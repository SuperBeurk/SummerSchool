

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Wed Sep 08 08:59:01 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og9 
     1                           	processor	18LF25K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=3
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=3
    73                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=3
    74                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=3
    75                           	psect	text63,global,reloc=2,class=CODE,delta=1,group=3
    76                           	psect	text64,global,reloc=2,class=CODE,delta=1,group=2
    77                           	psect	text65,global,reloc=2,class=CODE,delta=1,group=2
    78                           	psect	text66,global,reloc=2,class=CODE,delta=1
    79                           	psect	text67,global,reloc=2,class=CODE,delta=1
    80                           	psect	text68,global,reloc=2,class=CODE,delta=1
    81                           	psect	text69,global,reloc=2,class=CODE,delta=1
    82                           	psect	text70,global,reloc=2,class=CODE,delta=1,group=3
    83                           	psect	text71,global,reloc=2,class=CODE,delta=1,group=2
    84                           	psect	text72,global,reloc=2,class=CODE,delta=1
    85                           	psect	text73,global,reloc=2,class=CODE,delta=1
    86                           	psect	text74,global,reloc=2,class=CODE,delta=1
    87                           	psect	text75,global,reloc=2,class=CODE,delta=1,group=2
    88                           	psect	text76,global,reloc=2,class=CODE,delta=1,group=2
    89                           	psect	text77,global,reloc=2,class=CODE,delta=1,group=2
    90                           	psect	text78,global,reloc=2,class=CODE,delta=1
    91                           	psect	text79,global,reloc=2,class=CODE,delta=1
    92                           	psect	text80,global,reloc=2,class=CODE,delta=1
    93                           	psect	text81,global,reloc=2,class=CODE,delta=1
    94                           	psect	text82,global,reloc=2,class=CODE,delta=1,group=2
    95                           	psect	text83,global,reloc=2,class=CODE,delta=1
    96                           	psect	text84,global,reloc=2,class=CODE,delta=1
    97                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    98                           	psect	text86,global,reloc=2,class=CODE,delta=1
    99                           	psect	text87,global,reloc=2,class=CODE,delta=1
   100                           	psect	text88,global,reloc=2,class=CODE,delta=1
   101                           	psect	text89,global,reloc=2,class=CODE,delta=1
   102                           	psect	text90,global,reloc=2,class=CODE,delta=1
   103                           	psect	text91,global,reloc=2,class=CODE,delta=1
   104                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   105                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   106                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   107                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
   108                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
   109  0000                     
   110                           ; Version 2.32
   111                           ; Generated 02/02/2021 GMT
   112                           ; 
   113                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
   114                           ; All rights reserved.
   115                           ; 
   116                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   117                           ; 
   118                           ; Redistribution and use in source and binary forms, with or without modification, are
   119                           ; permitted provided that the following conditions are met:
   120                           ; 
   121                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   122                           ;        conditions and the following disclaimer.
   123                           ; 
   124                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   125                           ;        of conditions and the following disclaimer in the documentation and/or other
   126                           ;        materials provided with the distribution. Publication is not required when
   127                           ;        this file is used in an embedded application.
   128                           ; 
   129                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   130                           ;        software without specific prior written permission.
   131                           ; 
   132                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   133                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   134                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   135                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   136                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   137                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   138                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   139                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   140                           ; 
   141                           ; 
   142                           ; Code-generator required, PIC18LF25K22 Definitions
   143                           ; 
   144                           ; SFR Addresses
   145  0000                     
   146                           	psect	mediumconst
   147  007836                     __pmediumconst:
   148                           	callstack 0
   149  007836  00                 	db	0
   150  007837                     _arialNarrow_12ptBitmaps:
   151                           	callstack 0
   152  007837  00                 	db	0
   153  007838  00                 	db	0
   154  007839  00                 	db	0
   155  00783A  00                 	db	0
   156  00783B  00                 	db	0
   157  00783C  00                 	db	0
   158  00783D  00                 	db	0
   159  00783E  00                 	db	0
   160  00783F  00                 	db	0
   161  007840  00                 	db	0
   162  007841  00                 	db	0
   163  007842  00                 	db	0
   164  007843  00                 	db	0
   165  007844  00                 	db	0
   166  007845  00                 	db	0
   167  007846  00                 	db	0
   168  007847  C0                 	db	192
   169  007848  C0                 	db	192
   170  007849  C0                 	db	192
   171  00784A  C0                 	db	192
   172  00784B  C0                 	db	192
   173  00784C  C0                 	db	192
   174  00784D  C0                 	db	192
   175  00784E  C0                 	db	192
   176  00784F  00                 	db	0
   177  007850  C0                 	db	192
   178  007851  C0                 	db	192
   179  007852  00                 	db	0
   180  007853  00                 	db	0
   181  007854  00                 	db	0
   182  007855  00                 	db	0
   183  007856  D8                 	db	216
   184  007857  D8                 	db	216
   185  007858  D8                 	db	216
   186  007859  D8                 	db	216
   187  00785A  00                 	db	0
   188  00785B  00                 	db	0
   189  00785C  00                 	db	0
   190  00785D  00                 	db	0
   191  00785E  00                 	db	0
   192  00785F  00                 	db	0
   193  007860  00                 	db	0
   194  007861  00                 	db	0
   195  007862  00                 	db	0
   196  007863  00                 	db	0
   197  007864  00                 	db	0
   198  007865  12                 	db	18
   199  007866  12                 	db	18
   200  007867  24                 	db	36
   201  007868  FE                 	db	254
   202  007869  FE                 	db	254
   203  00786A  48                 	db	72
   204  00786B  FE                 	db	254
   205  00786C  FE                 	db	254
   206  00786D  48                 	db	72
   207  00786E  90                 	db	144
   208  00786F  90                 	db	144
   209  007870  00                 	db	0
   210  007871  00                 	db	0
   211  007872  00                 	db	0
   212  007873  10                 	db	16
   213  007874  7C                 	db	124
   214  007875  FC                 	db	252
   215  007876  D6                 	db	214
   216  007877  D0                 	db	208
   217  007878  F0                 	db	240
   218  007879  7C                 	db	124
   219  00787A  1E                 	db	30
   220  00787B  16                 	db	22
   221  00787C  D6                 	db	214
   222  00787D  7E                 	db	126
   223  00787E  7C                 	db	124
   224  00787F  10                 	db	16
   225  007880  00                 	db	0
   226  007881  00                 	db	0
   227  007882  00                 	db	0
   228  007883  00                 	db	0
   229  007884  61                 	db	97
   230  007885  00                 	db	0
   231  007886  91                 	db	145
   232  007887  00                 	db	0
   233  007888  92                 	db	146
   234  007889  00                 	db	0
   235  00788A  92                 	db	146
   236  00788B  00                 	db	0
   237  00788C  94                 	db	148
   238  00788D  00                 	db	0
   239  00788E  65                 	db	101
   240  00788F  80                 	db	128
   241  007890  06                 	db	6
   242  007891  40                 	db	64
   243  007892  0A                 	db	10
   244  007893  40                 	db	64
   245  007894  0A                 	db	10
   246  007895  40                 	db	64
   247  007896  12                 	db	18
   248  007897  40                 	db	64
   249  007898  11                 	db	17
   250  007899  80                 	db	128
   251  00789A  00                 	db	0
   252  00789B  00                 	db	0
   253  00789C  00                 	db	0
   254  00789D  00                 	db	0
   255  00789E  00                 	db	0
   256  00789F  00                 	db	0
   257  0078A0  00                 	db	0
   258  0078A1  38                 	db	56
   259  0078A2  7C                 	db	124
   260  0078A3  6C                 	db	108
   261  0078A4  7C                 	db	124
   262  0078A5  30                 	db	48
   263  0078A6  78                 	db	120
   264  0078A7  DA                 	db	218
   265  0078A8  CE                 	db	206
   266  0078A9  CE                 	db	206
   267  0078AA  FF                 	db	255
   268  0078AB  7A                 	db	122
   269  0078AC  00                 	db	0
   270  0078AD  00                 	db	0
   271  0078AE  00                 	db	0
   272  0078AF  00                 	db	0
   273  0078B0  C0                 	db	192
   274  0078B1  C0                 	db	192
   275  0078B2  C0                 	db	192
   276  0078B3  C0                 	db	192
   277  0078B4  00                 	db	0
   278  0078B5  00                 	db	0
   279  0078B6  00                 	db	0
   280  0078B7  00                 	db	0
   281  0078B8  00                 	db	0
   282  0078B9  00                 	db	0
   283  0078BA  00                 	db	0
   284  0078BB  00                 	db	0
   285  0078BC  00                 	db	0
   286  0078BD  00                 	db	0
   287  0078BE  00                 	db	0
   288  0078BF  10                 	db	16
   289  0078C0  20                 	db	32
   290  0078C1  60                 	db	96
   291  0078C2  60                 	db	96
   292  0078C3  C0                 	db	192
   293  0078C4  C0                 	db	192
   294  0078C5  C0                 	db	192
   295  0078C6  C0                 	db	192
   296  0078C7  C0                 	db	192
   297  0078C8  C0                 	db	192
   298  0078C9  60                 	db	96
   299  0078CA  60                 	db	96
   300  0078CB  20                 	db	32
   301  0078CC  10                 	db	16
   302  0078CD  00                 	db	0
   303  0078CE  80                 	db	128
   304  0078CF  40                 	db	64
   305  0078D0  60                 	db	96
   306  0078D1  20                 	db	32
   307  0078D2  30                 	db	48
   308  0078D3  30                 	db	48
   309  0078D4  30                 	db	48
   310  0078D5  30                 	db	48
   311  0078D6  30                 	db	48
   312  0078D7  30                 	db	48
   313  0078D8  60                 	db	96
   314  0078D9  60                 	db	96
   315  0078DA  40                 	db	64
   316  0078DB  80                 	db	128
   317  0078DC  00                 	db	0
   318  0078DD  20                 	db	32
   319  0078DE  A8                 	db	168
   320  0078DF  F8                 	db	248
   321  0078E0  20                 	db	32
   322  0078E1  50                 	db	80
   323  0078E2  50                 	db	80
   324  0078E3  00                 	db	0
   325  0078E4  00                 	db	0
   326  0078E5  00                 	db	0
   327  0078E6  00                 	db	0
   328  0078E7  00                 	db	0
   329  0078E8  00                 	db	0
   330  0078E9  00                 	db	0
   331  0078EA  00                 	db	0
   332  0078EB  00                 	db	0
   333  0078EC  00                 	db	0
   334  0078ED  00                 	db	0
   335  0078EE  00                 	db	0
   336  0078EF  30                 	db	48
   337  0078F0  30                 	db	48
   338  0078F1  30                 	db	48
   339  0078F2  FC                 	db	252
   340  0078F3  FC                 	db	252
   341  0078F4  30                 	db	48
   342  0078F5  30                 	db	48
   343  0078F6  30                 	db	48
   344  0078F7  00                 	db	0
   345  0078F8  00                 	db	0
   346  0078F9  00                 	db	0
   347  0078FA  00                 	db	0
   348  0078FB  00                 	db	0
   349  0078FC  00                 	db	0
   350  0078FD  00                 	db	0
   351  0078FE  00                 	db	0
   352  0078FF  00                 	db	0
   353  007900  00                 	db	0
   354  007901  00                 	db	0
   355  007902  00                 	db	0
   356  007903  00                 	db	0
   357  007904  C0                 	db	192
   358  007905  C0                 	db	192
   359  007906  40                 	db	64
   360  007907  40                 	db	64
   361  007908  80                 	db	128
   362  007909  00                 	db	0
   363  00790A  00                 	db	0
   364  00790B  00                 	db	0
   365  00790C  00                 	db	0
   366  00790D  00                 	db	0
   367  00790E  00                 	db	0
   368  00790F  00                 	db	0
   369  007910  F0                 	db	240
   370  007911  F0                 	db	240
   371  007912  00                 	db	0
   372  007913  00                 	db	0
   373  007914  00                 	db	0
   374  007915  00                 	db	0
   375  007916  00                 	db	0
   376  007917  00                 	db	0
   377  007918  00                 	db	0
   378  007919  00                 	db	0
   379  00791A  00                 	db	0
   380  00791B  00                 	db	0
   381  00791C  00                 	db	0
   382  00791D  00                 	db	0
   383  00791E  00                 	db	0
   384  00791F  00                 	db	0
   385  007920  00                 	db	0
   386  007921  00                 	db	0
   387  007922  C0                 	db	192
   388  007923  C0                 	db	192
   389  007924  00                 	db	0
   390  007925  00                 	db	0
   391  007926  00                 	db	0
   392  007927  00                 	db	0
   393  007928  30                 	db	48
   394  007929  30                 	db	48
   395  00792A  30                 	db	48
   396  00792B  60                 	db	96
   397  00792C  60                 	db	96
   398  00792D  60                 	db	96
   399  00792E  60                 	db	96
   400  00792F  60                 	db	96
   401  007930  C0                 	db	192
   402  007931  C0                 	db	192
   403  007932  C0                 	db	192
   404  007933  00                 	db	0
   405  007934  00                 	db	0
   406  007935  00                 	db	0
   407  007936  00                 	db	0
   408  007937  78                 	db	120
   409  007938  78                 	db	120
   410  007939  CC                 	db	204
   411  00793A  CC                 	db	204
   412  00793B  CC                 	db	204
   413  00793C  CC                 	db	204
   414  00793D  CC                 	db	204
   415  00793E  CC                 	db	204
   416  00793F  CC                 	db	204
   417  007940  78                 	db	120
   418  007941  78                 	db	120
   419  007942  00                 	db	0
   420  007943  00                 	db	0
   421  007944  00                 	db	0
   422  007945  00                 	db	0
   423  007946  30                 	db	48
   424  007947  30                 	db	48
   425  007948  70                 	db	112
   426  007949  F0                 	db	240
   427  00794A  B0                 	db	176
   428  00794B  30                 	db	48
   429  00794C  30                 	db	48
   430  00794D  30                 	db	48
   431  00794E  30                 	db	48
   432  00794F  30                 	db	48
   433  007950  30                 	db	48
   434  007951  00                 	db	0
   435  007952  00                 	db	0
   436  007953  00                 	db	0
   437  007954  00                 	db	0
   438  007955  38                 	db	56
   439  007956  7C                 	db	124
   440  007957  CC                 	db	204
   441  007958  CC                 	db	204
   442  007959  0C                 	db	12
   443  00795A  18                 	db	24
   444  00795B  38                 	db	56
   445  00795C  70                 	db	112
   446  00795D  60                 	db	96
   447  00795E  FC                 	db	252
   448  00795F  FC                 	db	252
   449  007960  00                 	db	0
   450  007961  00                 	db	0
   451  007962  00                 	db	0
   452  007963  00                 	db	0
   453  007964  78                 	db	120
   454  007965  FC                 	db	252
   455  007966  CC                 	db	204
   456  007967  0C                 	db	12
   457  007968  38                 	db	56
   458  007969  38                 	db	56
   459  00796A  0C                 	db	12
   460  00796B  0C                 	db	12
   461  00796C  CC                 	db	204
   462  00796D  F8                 	db	248
   463  00796E  78                 	db	120
   464  00796F  00                 	db	0
   465  007970  00                 	db	0
   466  007971  00                 	db	0
   467  007972  00                 	db	0
   468  007973  0C                 	db	12
   469  007974  1C                 	db	28
   470  007975  1C                 	db	28
   471  007976  3C                 	db	60
   472  007977  2C                 	db	44
   473  007978  6C                 	db	108
   474  007979  CC                 	db	204
   475  00797A  FE                 	db	254
   476  00797B  FE                 	db	254
   477  00797C  0C                 	db	12
   478  00797D  0C                 	db	12
   479  00797E  00                 	db	0
   480  00797F  00                 	db	0
   481  007980  00                 	db	0
   482  007981  00                 	db	0
   483  007982  7C                 	db	124
   484  007983  7C                 	db	124
   485  007984  60                 	db	96
   486  007985  D8                 	db	216
   487  007986  FC                 	db	252
   488  007987  CC                 	db	204
   489  007988  0C                 	db	12
   490  007989  CC                 	db	204
   491  00798A  CC                 	db	204
   492  00798B  78                 	db	120
   493  00798C  78                 	db	120
   494  00798D  00                 	db	0
   495  00798E  00                 	db	0
   496  00798F  00                 	db	0
   497  007990  00                 	db	0
   498  007991  70                 	db	112
   499  007992  78                 	db	120
   500  007993  D8                 	db	216
   501  007994  C0                 	db	192
   502  007995  F0                 	db	240
   503  007996  F8                 	db	248
   504  007997  D8                 	db	216
   505  007998  D8                 	db	216
   506  007999  D8                 	db	216
   507  00799A  78                 	db	120
   508  00799B  70                 	db	112
   509  00799C  00                 	db	0
   510  00799D  00                 	db	0
   511  00799E  00                 	db	0
   512  00799F  00                 	db	0
   513  0079A0  F8                 	db	248
   514  0079A1  F8                 	db	248
   515  0079A2  18                 	db	24
   516  0079A3  10                 	db	16
   517  0079A4  30                 	db	48
   518  0079A5  30                 	db	48
   519  0079A6  20                 	db	32
   520  0079A7  60                 	db	96
   521  0079A8  60                 	db	96
   522  0079A9  60                 	db	96
   523  0079AA  60                 	db	96
   524  0079AB  00                 	db	0
   525  0079AC  00                 	db	0
   526  0079AD  00                 	db	0
   527  0079AE  00                 	db	0
   528  0079AF  78                 	db	120
   529  0079B0  FC                 	db	252
   530  0079B1  CC                 	db	204
   531  0079B2  CC                 	db	204
   532  0079B3  78                 	db	120
   533  0079B4  78                 	db	120
   534  0079B5  CC                 	db	204
   535  0079B6  CC                 	db	204
   536  0079B7  CC                 	db	204
   537  0079B8  FC                 	db	252
   538  0079B9  78                 	db	120
   539  0079BA  00                 	db	0
   540  0079BB  00                 	db	0
   541  0079BC  00                 	db	0
   542  0079BD  00                 	db	0
   543  0079BE  70                 	db	112
   544  0079BF  F8                 	db	248
   545  0079C0  CC                 	db	204
   546  0079C1  CC                 	db	204
   547  0079C2  CC                 	db	204
   548  0079C3  FC                 	db	252
   549  0079C4  7C                 	db	124
   550  0079C5  0C                 	db	12
   551  0079C6  CC                 	db	204
   552  0079C7  F8                 	db	248
   553  0079C8  70                 	db	112
   554  0079C9  00                 	db	0
   555  0079CA  00                 	db	0
   556  0079CB  00                 	db	0
   557  0079CC  00                 	db	0
   558  0079CD  00                 	db	0
   559  0079CE  00                 	db	0
   560  0079CF  00                 	db	0
   561  0079D0  C0                 	db	192
   562  0079D1  C0                 	db	192
   563  0079D2  00                 	db	0
   564  0079D3  00                 	db	0
   565  0079D4  00                 	db	0
   566  0079D5  00                 	db	0
   567  0079D6  C0                 	db	192
   568  0079D7  C0                 	db	192
   569  0079D8  00                 	db	0
   570  0079D9  00                 	db	0
   571  0079DA  00                 	db	0
   572  0079DB  00                 	db	0
   573  0079DC  00                 	db	0
   574  0079DD  00                 	db	0
   575  0079DE  00                 	db	0
   576  0079DF  C0                 	db	192
   577  0079E0  C0                 	db	192
   578  0079E1  00                 	db	0
   579  0079E2  00                 	db	0
   580  0079E3  00                 	db	0
   581  0079E4  00                 	db	0
   582  0079E5  C0                 	db	192
   583  0079E6  C0                 	db	192
   584  0079E7  40                 	db	64
   585  0079E8  40                 	db	64
   586  0079E9  80                 	db	128
   587  0079EA  00                 	db	0
   588  0079EB  00                 	db	0
   589  0079EC  04                 	db	4
   590  0079ED  1C                 	db	28
   591  0079EE  38                 	db	56
   592  0079EF  F0                 	db	240
   593  0079F0  C0                 	db	192
   594  0079F1  F0                 	db	240
   595  0079F2  38                 	db	56
   596  0079F3  1C                 	db	28
   597  0079F4  04                 	db	4
   598  0079F5  00                 	db	0
   599  0079F6  00                 	db	0
   600  0079F7  00                 	db	0
   601  0079F8  00                 	db	0
   602  0079F9  00                 	db	0
   603  0079FA  00                 	db	0
   604  0079FB  00                 	db	0
   605  0079FC  00                 	db	0
   606  0079FD  FC                 	db	252
   607  0079FE  FC                 	db	252
   608  0079FF  00                 	db	0
   609  007A00  FC                 	db	252
   610  007A01  FC                 	db	252
   611  007A02  00                 	db	0
   612  007A03  00                 	db	0
   613  007A04  00                 	db	0
   614  007A05  00                 	db	0
   615  007A06  00                 	db	0
   616  007A07  00                 	db	0
   617  007A08  00                 	db	0
   618  007A09  00                 	db	0
   619  007A0A  80                 	db	128
   620  007A0B  E0                 	db	224
   621  007A0C  70                 	db	112
   622  007A0D  3C                 	db	60
   623  007A0E  0C                 	db	12
   624  007A0F  1C                 	db	28
   625  007A10  70                 	db	112
   626  007A11  E0                 	db	224
   627  007A12  80                 	db	128
   628  007A13  00                 	db	0
   629  007A14  00                 	db	0
   630  007A15  00                 	db	0
   631  007A16  00                 	db	0
   632  007A17  00                 	db	0
   633  007A18  78                 	db	120
   634  007A19  FC                 	db	252
   635  007A1A  CC                 	db	204
   636  007A1B  CC                 	db	204
   637  007A1C  1C                 	db	28
   638  007A1D  18                 	db	24
   639  007A1E  30                 	db	48
   640  007A1F  30                 	db	48
   641  007A20  00                 	db	0
   642  007A21  30                 	db	48
   643  007A22  30                 	db	48
   644  007A23  00                 	db	0
   645  007A24  00                 	db	0
   646  007A25  00                 	db	0
   647  007A26  00                 	db	0
   648  007A27  00                 	db	0
   649  007A28  0F                 	db	15
   650  007A29  C0                 	db	192
   651  007A2A  1F                 	db	31
   652  007A2B  E0                 	db	224
   653  007A2C  30                 	db	48
   654  007A2D  30                 	db	48
   655  007A2E  66                 	db	102
   656  007A2F  D8                 	db	216
   657  007A30  EF                 	db	239
   658  007A31  D8                 	db	216
   659  007A32  DD                 	db	221
   660  007A33  D8                 	db	216
   661  007A34  D8                 	db	216
   662  007A35  98                 	db	152
   663  007A36  D9                 	db	217
   664  007A37  98                 	db	152
   665  007A38  D9                 	db	217
   666  007A39  B0                 	db	176
   667  007A3A  DF                 	db	223
   668  007A3B  F0                 	db	240
   669  007A3C  6E                 	db	110
   670  007A3D  C8                 	db	200
   671  007A3E  70                 	db	112
   672  007A3F  10                 	db	16
   673  007A40  3F                 	db	63
   674  007A41  E0                 	db	224
   675  007A42  0F                 	db	15
   676  007A43  C0                 	db	192
   677  007A44  00                 	db	0
   678  007A45  00                 	db	0
   679  007A46  1C                 	db	28
   680  007A47  00                 	db	0
   681  007A48  1C                 	db	28
   682  007A49  00                 	db	0
   683  007A4A  1C                 	db	28
   684  007A4B  00                 	db	0
   685  007A4C  36                 	db	54
   686  007A4D  00                 	db	0
   687  007A4E  36                 	db	54
   688  007A4F  00                 	db	0
   689  007A50  36                 	db	54
   690  007A51  00                 	db	0
   691  007A52  63                 	db	99
   692  007A53  00                 	db	0
   693  007A54  7F                 	db	127
   694  007A55  00                 	db	0
   695  007A56  7F                 	db	127
   696  007A57  00                 	db	0
   697  007A58  C1                 	db	193
   698  007A59  80                 	db	128
   699  007A5A  C1                 	db	193
   700  007A5B  80                 	db	128
   701  007A5C  00                 	db	0
   702  007A5D  00                 	db	0
   703  007A5E  00                 	db	0
   704  007A5F  00                 	db	0
   705  007A60  00                 	db	0
   706  007A61  00                 	db	0
   707  007A62  00                 	db	0
   708  007A63  FC                 	db	252
   709  007A64  FE                 	db	254
   710  007A65  C6                 	db	198
   711  007A66  C6                 	db	198
   712  007A67  FC                 	db	252
   713  007A68  FC                 	db	252
   714  007A69  C6                 	db	198
   715  007A6A  C6                 	db	198
   716  007A6B  C6                 	db	198
   717  007A6C  FE                 	db	254
   718  007A6D  FC                 	db	252
   719  007A6E  00                 	db	0
   720  007A6F  00                 	db	0
   721  007A70  00                 	db	0
   722  007A71  00                 	db	0
   723  007A72  3C                 	db	60
   724  007A73  7E                 	db	126
   725  007A74  67                 	db	103
   726  007A75  C2                 	db	194
   727  007A76  C0                 	db	192
   728  007A77  C0                 	db	192
   729  007A78  C0                 	db	192
   730  007A79  C2                 	db	194
   731  007A7A  67                 	db	103
   732  007A7B  7E                 	db	126
   733  007A7C  3C                 	db	60
   734  007A7D  00                 	db	0
   735  007A7E  00                 	db	0
   736  007A7F  00                 	db	0
   737  007A80  00                 	db	0
   738  007A81  F8                 	db	248
   739  007A82  FC                 	db	252
   740  007A83  CE                 	db	206
   741  007A84  C6                 	db	198
   742  007A85  C6                 	db	198
   743  007A86  C6                 	db	198
   744  007A87  C6                 	db	198
   745  007A88  C6                 	db	198
   746  007A89  CE                 	db	206
   747  007A8A  FC                 	db	252
   748  007A8B  F8                 	db	248
   749  007A8C  00                 	db	0
   750  007A8D  00                 	db	0
   751  007A8E  00                 	db	0
   752  007A8F  00                 	db	0
   753  007A90  FE                 	db	254
   754  007A91  FE                 	db	254
   755  007A92  C0                 	db	192
   756  007A93  C0                 	db	192
   757  007A94  FE                 	db	254
   758  007A95  FE                 	db	254
   759  007A96  C0                 	db	192
   760  007A97  C0                 	db	192
   761  007A98  C0                 	db	192
   762  007A99  FE                 	db	254
   763  007A9A  FE                 	db	254
   764  007A9B  00                 	db	0
   765  007A9C  00                 	db	0
   766  007A9D  00                 	db	0
   767  007A9E  00                 	db	0
   768  007A9F  FC                 	db	252
   769  007AA0  FC                 	db	252
   770  007AA1  C0                 	db	192
   771  007AA2  C0                 	db	192
   772  007AA3  F8                 	db	248
   773  007AA4  F8                 	db	248
   774  007AA5  C0                 	db	192
   775  007AA6  C0                 	db	192
   776  007AA7  C0                 	db	192
   777  007AA8  C0                 	db	192
   778  007AA9  C0                 	db	192
   779  007AAA  00                 	db	0
   780  007AAB  00                 	db	0
   781  007AAC  00                 	db	0
   782  007AAD  00                 	db	0
   783  007AAE  3C                 	db	60
   784  007AAF  7E                 	db	126
   785  007AB0  67                 	db	103
   786  007AB1  C3                 	db	195
   787  007AB2  C0                 	db	192
   788  007AB3  CF                 	db	207
   789  007AB4  CF                 	db	207
   790  007AB5  C3                 	db	195
   791  007AB6  63                 	db	99
   792  007AB7  7F                 	db	127
   793  007AB8  3C                 	db	60
   794  007AB9  00                 	db	0
   795  007ABA  00                 	db	0
   796  007ABB  00                 	db	0
   797  007ABC  00                 	db	0
   798  007ABD  C6                 	db	198
   799  007ABE  C6                 	db	198
   800  007ABF  C6                 	db	198
   801  007AC0  C6                 	db	198
   802  007AC1  FE                 	db	254
   803  007AC2  FE                 	db	254
   804  007AC3  C6                 	db	198
   805  007AC4  C6                 	db	198
   806  007AC5  C6                 	db	198
   807  007AC6  C6                 	db	198
   808  007AC7  C6                 	db	198
   809  007AC8  00                 	db	0
   810  007AC9  00                 	db	0
   811  007ACA  00                 	db	0
   812  007ACB  00                 	db	0
   813  007ACC  C0                 	db	192
   814  007ACD  C0                 	db	192
   815  007ACE  C0                 	db	192
   816  007ACF  C0                 	db	192
   817  007AD0  C0                 	db	192
   818  007AD1  C0                 	db	192
   819  007AD2  C0                 	db	192
   820  007AD3  C0                 	db	192
   821  007AD4  C0                 	db	192
   822  007AD5  C0                 	db	192
   823  007AD6  C0                 	db	192
   824  007AD7  00                 	db	0
   825  007AD8  00                 	db	0
   826  007AD9  00                 	db	0
   827  007ADA  00                 	db	0
   828  007ADB  0C                 	db	12
   829  007ADC  0C                 	db	12
   830  007ADD  0C                 	db	12
   831  007ADE  0C                 	db	12
   832  007ADF  0C                 	db	12
   833  007AE0  0C                 	db	12
   834  007AE1  0C                 	db	12
   835  007AE2  CC                 	db	204
   836  007AE3  CC                 	db	204
   837  007AE4  FC                 	db	252
   838  007AE5  78                 	db	120
   839  007AE6  00                 	db	0
   840  007AE7  00                 	db	0
   841  007AE8  00                 	db	0
   842  007AE9  00                 	db	0
   843  007AEA  C3                 	db	195
   844  007AEB  C6                 	db	198
   845  007AEC  CC                 	db	204
   846  007AED  CC                 	db	204
   847  007AEE  D8                 	db	216
   848  007AEF  FC                 	db	252
   849  007AF0  EC                 	db	236
   850  007AF1  C6                 	db	198
   851  007AF2  C6                 	db	198
   852  007AF3  C3                 	db	195
   853  007AF4  C3                 	db	195
   854  007AF5  00                 	db	0
   855  007AF6  00                 	db	0
   856  007AF7  00                 	db	0
   857  007AF8  00                 	db	0
   858  007AF9  C0                 	db	192
   859  007AFA  C0                 	db	192
   860  007AFB  C0                 	db	192
   861  007AFC  C0                 	db	192
   862  007AFD  C0                 	db	192
   863  007AFE  C0                 	db	192
   864  007AFF  C0                 	db	192
   865  007B00  C0                 	db	192
   866  007B01  C0                 	db	192
   867  007B02  FE                 	db	254
   868  007B03  FE                 	db	254
   869  007B04  00                 	db	0
   870  007B05  00                 	db	0
   871  007B06  00                 	db	0
   872  007B07  00                 	db	0
   873  007B08  00                 	db	0
   874  007B09  E3                 	db	227
   875  007B0A  80                 	db	128
   876  007B0B  E3                 	db	227
   877  007B0C  80                 	db	128
   878  007B0D  E3                 	db	227
   879  007B0E  80                 	db	128
   880  007B0F  F7                 	db	247
   881  007B10  80                 	db	128
   882  007B11  D5                 	db	213
   883  007B12  80                 	db	128
   884  007B13  D5                 	db	213
   885  007B14  80                 	db	128
   886  007B15  D5                 	db	213
   887  007B16  80                 	db	128
   888  007B17  D5                 	db	213
   889  007B18  80                 	db	128
   890  007B19  DD                 	db	221
   891  007B1A  80                 	db	128
   892  007B1B  D9                 	db	217
   893  007B1C  80                 	db	128
   894  007B1D  C9                 	db	201
   895  007B1E  80                 	db	128
   896  007B1F  00                 	db	0
   897  007B20  00                 	db	0
   898  007B21  00                 	db	0
   899  007B22  00                 	db	0
   900  007B23  00                 	db	0
   901  007B24  00                 	db	0
   902  007B25  00                 	db	0
   903  007B26  C6                 	db	198
   904  007B27  E6                 	db	230
   905  007B28  E6                 	db	230
   906  007B29  E6                 	db	230
   907  007B2A  F6                 	db	246
   908  007B2B  D6                 	db	214
   909  007B2C  DE                 	db	222
   910  007B2D  DE                 	db	222
   911  007B2E  CE                 	db	206
   912  007B2F  CE                 	db	206
   913  007B30  C6                 	db	198
   914  007B31  00                 	db	0
   915  007B32  00                 	db	0
   916  007B33  00                 	db	0
   917  007B34  00                 	db	0
   918  007B35  3C                 	db	60
   919  007B36  7E                 	db	126
   920  007B37  67                 	db	103
   921  007B38  C3                 	db	195
   922  007B39  C3                 	db	195
   923  007B3A  C3                 	db	195
   924  007B3B  C3                 	db	195
   925  007B3C  C3                 	db	195
   926  007B3D  66                 	db	102
   927  007B3E  7E                 	db	126
   928  007B3F  3C                 	db	60
   929  007B40  00                 	db	0
   930  007B41  00                 	db	0
   931  007B42  00                 	db	0
   932  007B43  00                 	db	0
   933  007B44  FC                 	db	252
   934  007B45  FE                 	db	254
   935  007B46  C6                 	db	198
   936  007B47  C6                 	db	198
   937  007B48  C6                 	db	198
   938  007B49  FE                 	db	254
   939  007B4A  FC                 	db	252
   940  007B4B  C0                 	db	192
   941  007B4C  C0                 	db	192
   942  007B4D  C0                 	db	192
   943  007B4E  C0                 	db	192
   944  007B4F  00                 	db	0
   945  007B50  00                 	db	0
   946  007B51  00                 	db	0
   947  007B52  00                 	db	0
   948  007B53  00                 	db	0
   949  007B54  3C                 	db	60
   950  007B55  00                 	db	0
   951  007B56  7E                 	db	126
   952  007B57  00                 	db	0
   953  007B58  E7                 	db	231
   954  007B59  00                 	db	0
   955  007B5A  C3                 	db	195
   956  007B5B  00                 	db	0
   957  007B5C  C3                 	db	195
   958  007B5D  00                 	db	0
   959  007B5E  C3                 	db	195
   960  007B5F  00                 	db	0
   961  007B60  C3                 	db	195
   962  007B61  00                 	db	0
   963  007B62  CB                 	db	203
   964  007B63  00                 	db	0
   965  007B64  66                 	db	102
   966  007B65  00                 	db	0
   967  007B66  7F                 	db	127
   968  007B67  00                 	db	0
   969  007B68  3D                 	db	61
   970  007B69  80                 	db	128
   971  007B6A  00                 	db	0
   972  007B6B  80                 	db	128
   973  007B6C  00                 	db	0
   974  007B6D  00                 	db	0
   975  007B6E  00                 	db	0
   976  007B6F  00                 	db	0
   977  007B70  00                 	db	0
   978  007B71  FC                 	db	252
   979  007B72  FE                 	db	254
   980  007B73  C6                 	db	198
   981  007B74  C6                 	db	198
   982  007B75  FE                 	db	254
   983  007B76  FC                 	db	252
   984  007B77  CC                 	db	204
   985  007B78  C6                 	db	198
   986  007B79  C6                 	db	198
   987  007B7A  C6                 	db	198
   988  007B7B  C3                 	db	195
   989  007B7C  00                 	db	0
   990  007B7D  00                 	db	0
   991  007B7E  00                 	db	0
   992  007B7F  00                 	db	0
   993  007B80  7C                 	db	124
   994  007B81  FE                 	db	254
   995  007B82  C6                 	db	198
   996  007B83  C6                 	db	198
   997  007B84  F0                 	db	240
   998  007B85  7C                 	db	124
   999  007B86  0E                 	db	14
  1000  007B87  C6                 	db	198
  1001  007B88  C6                 	db	198
  1002  007B89  FE                 	db	254
  1003  007B8A  7C                 	db	124
  1004  007B8B  00                 	db	0
  1005  007B8C  00                 	db	0
  1006  007B8D  00                 	db	0
  1007  007B8E  00                 	db	0
  1008  007B8F  FF                 	db	255
  1009  007B90  FF                 	db	255
  1010  007B91  18                 	db	24
  1011  007B92  18                 	db	24
  1012  007B93  18                 	db	24
  1013  007B94  18                 	db	24
  1014  007B95  18                 	db	24
  1015  007B96  18                 	db	24
  1016  007B97  18                 	db	24
  1017  007B98  18                 	db	24
  1018  007B99  18                 	db	24
  1019  007B9A  00                 	db	0
  1020  007B9B  00                 	db	0
  1021  007B9C  00                 	db	0
  1022  007B9D  00                 	db	0
  1023  007B9E  C6                 	db	198
  1024  007B9F  C6                 	db	198
  1025  007BA0  C6                 	db	198
  1026  007BA1  C6                 	db	198
  1027  007BA2  C6                 	db	198
  1028  007BA3  C6                 	db	198
  1029  007BA4  C6                 	db	198
  1030  007BA5  C6                 	db	198
  1031  007BA6  C6                 	db	198
  1032  007BA7  7E                 	db	126
  1033  007BA8  38                 	db	56
  1034  007BA9  00                 	db	0
  1035  007BAA  00                 	db	0
  1036  007BAB  00                 	db	0
  1037  007BAC  00                 	db	0
  1038  007BAD  00                 	db	0
  1039  007BAE  C1                 	db	193
  1040  007BAF  80                 	db	128
  1041  007BB0  C1                 	db	193
  1042  007BB1  80                 	db	128
  1043  007BB2  63                 	db	99
  1044  007BB3  00                 	db	0
  1045  007BB4  63                 	db	99
  1046  007BB5  00                 	db	0
  1047  007BB6  63                 	db	99
  1048  007BB7  00                 	db	0
  1049  007BB8  36                 	db	54
  1050  007BB9  00                 	db	0
  1051  007BBA  36                 	db	54
  1052  007BBB  00                 	db	0
  1053  007BBC  36                 	db	54
  1054  007BBD  00                 	db	0
  1055  007BBE  1C                 	db	28
  1056  007BBF  00                 	db	0
  1057  007BC0  1C                 	db	28
  1058  007BC1  00                 	db	0
  1059  007BC2  1C                 	db	28
  1060  007BC3  00                 	db	0
  1061  007BC4  00                 	db	0
  1062  007BC5  00                 	db	0
  1063  007BC6  00                 	db	0
  1064  007BC7  00                 	db	0
  1065  007BC8  00                 	db	0
  1066  007BC9  00                 	db	0
  1067  007BCA  00                 	db	0
  1068  007BCB  00                 	db	0
  1069  007BCC  C4                 	db	196
  1070  007BCD  60                 	db	96
  1071  007BCE  C4                 	db	196
  1072  007BCF  60                 	db	96
  1073  007BD0  CA                 	db	202
  1074  007BD1  60                 	db	96
  1075  007BD2  6A                 	db	106
  1076  007BD3  C0                 	db	192
  1077  007BD4  6A                 	db	106
  1078  007BD5  C0                 	db	192
  1079  007BD6  6A                 	db	106
  1080  007BD7  C0                 	db	192
  1081  007BD8  6A                 	db	106
  1082  007BD9  C0                 	db	192
  1083  007BDA  6A                 	db	106
  1084  007BDB  C0                 	db	192
  1085  007BDC  31                 	db	49
  1086  007BDD  80                 	db	128
  1087  007BDE  31                 	db	49
  1088  007BDF  80                 	db	128
  1089  007BE0  31                 	db	49
  1090  007BE1  80                 	db	128
  1091  007BE2  00                 	db	0
  1092  007BE3  00                 	db	0
  1093  007BE4  00                 	db	0
  1094  007BE5  00                 	db	0
  1095  007BE6  00                 	db	0
  1096  007BE7  00                 	db	0
  1097  007BE8  00                 	db	0
  1098  007BE9  00                 	db	0
  1099  007BEA  C1                 	db	193
  1100  007BEB  80                 	db	128
  1101  007BEC  63                 	db	99
  1102  007BED  00                 	db	0
  1103  007BEE  36                 	db	54
  1104  007BEF  00                 	db	0
  1105  007BF0  36                 	db	54
  1106  007BF1  00                 	db	0
  1107  007BF2  1C                 	db	28
  1108  007BF3  00                 	db	0
  1109  007BF4  1C                 	db	28
  1110  007BF5  00                 	db	0
  1111  007BF6  1C                 	db	28
  1112  007BF7  00                 	db	0
  1113  007BF8  36                 	db	54
  1114  007BF9  00                 	db	0
  1115  007BFA  36                 	db	54
  1116  007BFB  00                 	db	0
  1117  007BFC  63                 	db	99
  1118  007BFD  00                 	db	0
  1119  007BFE  C1                 	db	193
  1120  007BFF  80                 	db	128
  1121  007C00  00                 	db	0
  1122  007C01  00                 	db	0
  1123  007C02  00                 	db	0
  1124  007C03  00                 	db	0
  1125  007C04  00                 	db	0
  1126  007C05  00                 	db	0
  1127  007C06  00                 	db	0
  1128  007C07  C3                 	db	195
  1129  007C08  66                 	db	102
  1130  007C09  66                 	db	102
  1131  007C0A  3C                 	db	60
  1132  007C0B  3C                 	db	60
  1133  007C0C  18                 	db	24
  1134  007C0D  18                 	db	24
  1135  007C0E  18                 	db	24
  1136  007C0F  18                 	db	24
  1137  007C10  18                 	db	24
  1138  007C11  18                 	db	24
  1139  007C12  00                 	db	0
  1140  007C13  00                 	db	0
  1141  007C14  00                 	db	0
  1142  007C15  00                 	db	0
  1143  007C16  FE                 	db	254
  1144  007C17  FE                 	db	254
  1145  007C18  06                 	db	6
  1146  007C19  0C                 	db	12
  1147  007C1A  18                 	db	24
  1148  007C1B  30                 	db	48
  1149  007C1C  30                 	db	48
  1150  007C1D  60                 	db	96
  1151  007C1E  C0                 	db	192
  1152  007C1F  FE                 	db	254
  1153  007C20  FE                 	db	254
  1154  007C21  00                 	db	0
  1155  007C22  00                 	db	0
  1156  007C23  00                 	db	0
  1157  007C24  00                 	db	0
  1158  007C25  E0                 	db	224
  1159  007C26  E0                 	db	224
  1160  007C27  C0                 	db	192
  1161  007C28  C0                 	db	192
  1162  007C29  C0                 	db	192
  1163  007C2A  C0                 	db	192
  1164  007C2B  C0                 	db	192
  1165  007C2C  C0                 	db	192
  1166  007C2D  C0                 	db	192
  1167  007C2E  C0                 	db	192
  1168  007C2F  C0                 	db	192
  1169  007C30  C0                 	db	192
  1170  007C31  E0                 	db	224
  1171  007C32  E0                 	db	224
  1172  007C33  00                 	db	0
  1173  007C34  C0                 	db	192
  1174  007C35  C0                 	db	192
  1175  007C36  C0                 	db	192
  1176  007C37  60                 	db	96
  1177  007C38  60                 	db	96
  1178  007C39  60                 	db	96
  1179  007C3A  60                 	db	96
  1180  007C3B  60                 	db	96
  1181  007C3C  30                 	db	48
  1182  007C3D  30                 	db	48
  1183  007C3E  30                 	db	48
  1184  007C3F  00                 	db	0
  1185  007C40  00                 	db	0
  1186  007C41  00                 	db	0
  1187  007C42  00                 	db	0
  1188  007C43  E0                 	db	224
  1189  007C44  E0                 	db	224
  1190  007C45  60                 	db	96
  1191  007C46  60                 	db	96
  1192  007C47  60                 	db	96
  1193  007C48  60                 	db	96
  1194  007C49  60                 	db	96
  1195  007C4A  60                 	db	96
  1196  007C4B  60                 	db	96
  1197  007C4C  60                 	db	96
  1198  007C4D  60                 	db	96
  1199  007C4E  60                 	db	96
  1200  007C4F  E0                 	db	224
  1201  007C50  E0                 	db	224
  1202  007C51  00                 	db	0
  1203  007C52  38                 	db	56
  1204  007C53  38                 	db	56
  1205  007C54  6C                 	db	108
  1206  007C55  6C                 	db	108
  1207  007C56  6C                 	db	108
  1208  007C57  C6                 	db	198
  1209  007C58  00                 	db	0
  1210  007C59  00                 	db	0
  1211  007C5A  00                 	db	0
  1212  007C5B  00                 	db	0
  1213  007C5C  00                 	db	0
  1214  007C5D  00                 	db	0
  1215  007C5E  00                 	db	0
  1216  007C5F  00                 	db	0
  1217  007C60  00                 	db	0
  1218  007C61  00                 	db	0
  1219  007C62  00                 	db	0
  1220  007C63  00                 	db	0
  1221  007C64  00                 	db	0
  1222  007C65  00                 	db	0
  1223  007C66  00                 	db	0
  1224  007C67  00                 	db	0
  1225  007C68  00                 	db	0
  1226  007C69  00                 	db	0
  1227  007C6A  00                 	db	0
  1228  007C6B  00                 	db	0
  1229  007C6C  00                 	db	0
  1230  007C6D  FE                 	db	254
  1231  007C6E  00                 	db	0
  1232  007C6F  00                 	db	0
  1233  007C70  C0                 	db	192
  1234  007C71  60                 	db	96
  1235  007C72  00                 	db	0
  1236  007C73  00                 	db	0
  1237  007C74  00                 	db	0
  1238  007C75  00                 	db	0
  1239  007C76  00                 	db	0
  1240  007C77  00                 	db	0
  1241  007C78  00                 	db	0
  1242  007C79  00                 	db	0
  1243  007C7A  00                 	db	0
  1244  007C7B  00                 	db	0
  1245  007C7C  00                 	db	0
  1246  007C7D  00                 	db	0
  1247  007C7E  00                 	db	0
  1248  007C7F  00                 	db	0
  1249  007C80  00                 	db	0
  1250  007C81  00                 	db	0
  1251  007C82  78                 	db	120
  1252  007C83  FC                 	db	252
  1253  007C84  CC                 	db	204
  1254  007C85  3C                 	db	60
  1255  007C86  FC                 	db	252
  1256  007C87  CC                 	db	204
  1257  007C88  FC                 	db	252
  1258  007C89  6C                 	db	108
  1259  007C8A  00                 	db	0
  1260  007C8B  00                 	db	0
  1261  007C8C  00                 	db	0
  1262  007C8D  00                 	db	0
  1263  007C8E  C0                 	db	192
  1264  007C8F  C0                 	db	192
  1265  007C90  C0                 	db	192
  1266  007C91  F8                 	db	248
  1267  007C92  FC                 	db	252
  1268  007C93  CC                 	db	204
  1269  007C94  CC                 	db	204
  1270  007C95  CC                 	db	204
  1271  007C96  CC                 	db	204
  1272  007C97  F8                 	db	248
  1273  007C98  F8                 	db	248
  1274  007C99  00                 	db	0
  1275  007C9A  00                 	db	0
  1276  007C9B  00                 	db	0
  1277  007C9C  00                 	db	0
  1278  007C9D  00                 	db	0
  1279  007C9E  00                 	db	0
  1280  007C9F  00                 	db	0
  1281  007CA0  70                 	db	112
  1282  007CA1  78                 	db	120
  1283  007CA2  D8                 	db	216
  1284  007CA3  C0                 	db	192
  1285  007CA4  C0                 	db	192
  1286  007CA5  D8                 	db	216
  1287  007CA6  78                 	db	120
  1288  007CA7  70                 	db	112
  1289  007CA8  00                 	db	0
  1290  007CA9  00                 	db	0
  1291  007CAA  00                 	db	0
  1292  007CAB  00                 	db	0
  1293  007CAC  0C                 	db	12
  1294  007CAD  0C                 	db	12
  1295  007CAE  0C                 	db	12
  1296  007CAF  7C                 	db	124
  1297  007CB0  FC                 	db	252
  1298  007CB1  CC                 	db	204
  1299  007CB2  CC                 	db	204
  1300  007CB3  CC                 	db	204
  1301  007CB4  CC                 	db	204
  1302  007CB5  FC                 	db	252
  1303  007CB6  7C                 	db	124
  1304  007CB7  00                 	db	0
  1305  007CB8  00                 	db	0
  1306  007CB9  00                 	db	0
  1307  007CBA  00                 	db	0
  1308  007CBB  00                 	db	0
  1309  007CBC  00                 	db	0
  1310  007CBD  00                 	db	0
  1311  007CBE  70                 	db	112
  1312  007CBF  F8                 	db	248
  1313  007CC0  D8                 	db	216
  1314  007CC1  F8                 	db	248
  1315  007CC2  C0                 	db	192
  1316  007CC3  D8                 	db	216
  1317  007CC4  F8                 	db	248
  1318  007CC5  70                 	db	112
  1319  007CC6  00                 	db	0
  1320  007CC7  00                 	db	0
  1321  007CC8  00                 	db	0
  1322  007CC9  00                 	db	0
  1323  007CCA  30                 	db	48
  1324  007CCB  70                 	db	112
  1325  007CCC  60                 	db	96
  1326  007CCD  F0                 	db	240
  1327  007CCE  F0                 	db	240
  1328  007CCF  60                 	db	96
  1329  007CD0  60                 	db	96
  1330  007CD1  60                 	db	96
  1331  007CD2  60                 	db	96
  1332  007CD3  60                 	db	96
  1333  007CD4  60                 	db	96
  1334  007CD5  00                 	db	0
  1335  007CD6  00                 	db	0
  1336  007CD7  00                 	db	0
  1337  007CD8  00                 	db	0
  1338  007CD9  00                 	db	0
  1339  007CDA  00                 	db	0
  1340  007CDB  00                 	db	0
  1341  007CDC  6C                 	db	108
  1342  007CDD  FC                 	db	252
  1343  007CDE  CC                 	db	204
  1344  007CDF  CC                 	db	204
  1345  007CE0  CC                 	db	204
  1346  007CE1  CC                 	db	204
  1347  007CE2  FC                 	db	252
  1348  007CE3  6C                 	db	108
  1349  007CE4  0C                 	db	12
  1350  007CE5  CC                 	db	204
  1351  007CE6  78                 	db	120
  1352  007CE7  00                 	db	0
  1353  007CE8  C0                 	db	192
  1354  007CE9  C0                 	db	192
  1355  007CEA  C0                 	db	192
  1356  007CEB  D8                 	db	216
  1357  007CEC  FC                 	db	252
  1358  007CED  CC                 	db	204
  1359  007CEE  CC                 	db	204
  1360  007CEF  CC                 	db	204
  1361  007CF0  CC                 	db	204
  1362  007CF1  CC                 	db	204
  1363  007CF2  CC                 	db	204
  1364  007CF3  00                 	db	0
  1365  007CF4  00                 	db	0
  1366  007CF5  00                 	db	0
  1367  007CF6  00                 	db	0
  1368  007CF7  C0                 	db	192
  1369  007CF8  C0                 	db	192
  1370  007CF9  00                 	db	0
  1371  007CFA  C0                 	db	192
  1372  007CFB  C0                 	db	192
  1373  007CFC  C0                 	db	192
  1374  007CFD  C0                 	db	192
  1375  007CFE  C0                 	db	192
  1376  007CFF  C0                 	db	192
  1377  007D00  C0                 	db	192
  1378  007D01  C0                 	db	192
  1379  007D02  00                 	db	0
  1380  007D03  00                 	db	0
  1381  007D04  00                 	db	0
  1382  007D05  00                 	db	0
  1383  007D06  30                 	db	48
  1384  007D07  30                 	db	48
  1385  007D08  00                 	db	0
  1386  007D09  30                 	db	48
  1387  007D0A  30                 	db	48
  1388  007D0B  30                 	db	48
  1389  007D0C  30                 	db	48
  1390  007D0D  30                 	db	48
  1391  007D0E  30                 	db	48
  1392  007D0F  30                 	db	48
  1393  007D10  30                 	db	48
  1394  007D11  30                 	db	48
  1395  007D12  F0                 	db	240
  1396  007D13  E0                 	db	224
  1397  007D14  00                 	db	0
  1398  007D15  C0                 	db	192
  1399  007D16  C0                 	db	192
  1400  007D17  C0                 	db	192
  1401  007D18  CC                 	db	204
  1402  007D19  D8                 	db	216
  1403  007D1A  F0                 	db	240
  1404  007D1B  F8                 	db	248
  1405  007D1C  D8                 	db	216
  1406  007D1D  D8                 	db	216
  1407  007D1E  CC                 	db	204
  1408  007D1F  CC                 	db	204
  1409  007D20  00                 	db	0
  1410  007D21  00                 	db	0
  1411  007D22  00                 	db	0
  1412  007D23  00                 	db	0
  1413  007D24  C0                 	db	192
  1414  007D25  C0                 	db	192
  1415  007D26  C0                 	db	192
  1416  007D27  C0                 	db	192
  1417  007D28  C0                 	db	192
  1418  007D29  C0                 	db	192
  1419  007D2A  C0                 	db	192
  1420  007D2B  C0                 	db	192
  1421  007D2C  C0                 	db	192
  1422  007D2D  C0                 	db	192
  1423  007D2E  C0                 	db	192
  1424  007D2F  00                 	db	0
  1425  007D30  00                 	db	0
  1426  007D31  00                 	db	0
  1427  007D32  00                 	db	0
  1428  007D33  00                 	db	0
  1429  007D34  00                 	db	0
  1430  007D35  00                 	db	0
  1431  007D36  00                 	db	0
  1432  007D37  00                 	db	0
  1433  007D38  00                 	db	0
  1434  007D39  00                 	db	0
  1435  007D3A  D9                 	db	217
  1436  007D3B  80                 	db	128
  1437  007D3C  FF                 	db	255
  1438  007D3D  C0                 	db	192
  1439  007D3E  CC                 	db	204
  1440  007D3F  C0                 	db	192
  1441  007D40  CC                 	db	204
  1442  007D41  C0                 	db	192
  1443  007D42  CC                 	db	204
  1444  007D43  C0                 	db	192
  1445  007D44  CC                 	db	204
  1446  007D45  C0                 	db	192
  1447  007D46  CC                 	db	204
  1448  007D47  C0                 	db	192
  1449  007D48  CC                 	db	204
  1450  007D49  C0                 	db	192
  1451  007D4A  00                 	db	0
  1452  007D4B  00                 	db	0
  1453  007D4C  00                 	db	0
  1454  007D4D  00                 	db	0
  1455  007D4E  00                 	db	0
  1456  007D4F  00                 	db	0
  1457  007D50  00                 	db	0
  1458  007D51  00                 	db	0
  1459  007D52  00                 	db	0
  1460  007D53  00                 	db	0
  1461  007D54  D8                 	db	216
  1462  007D55  FC                 	db	252
  1463  007D56  CC                 	db	204
  1464  007D57  CC                 	db	204
  1465  007D58  CC                 	db	204
  1466  007D59  CC                 	db	204
  1467  007D5A  CC                 	db	204
  1468  007D5B  CC                 	db	204
  1469  007D5C  00                 	db	0
  1470  007D5D  00                 	db	0
  1471  007D5E  00                 	db	0
  1472  007D5F  00                 	db	0
  1473  007D60  00                 	db	0
  1474  007D61  00                 	db	0
  1475  007D62  00                 	db	0
  1476  007D63  78                 	db	120
  1477  007D64  78                 	db	120
  1478  007D65  CC                 	db	204
  1479  007D66  CC                 	db	204
  1480  007D67  CC                 	db	204
  1481  007D68  CC                 	db	204
  1482  007D69  78                 	db	120
  1483  007D6A  78                 	db	120
  1484  007D6B  00                 	db	0
  1485  007D6C  00                 	db	0
  1486  007D6D  00                 	db	0
  1487  007D6E  00                 	db	0
  1488  007D6F  00                 	db	0
  1489  007D70  00                 	db	0
  1490  007D71  00                 	db	0
  1491  007D72  D8                 	db	216
  1492  007D73  FC                 	db	252
  1493  007D74  CC                 	db	204
  1494  007D75  CC                 	db	204
  1495  007D76  CC                 	db	204
  1496  007D77  CC                 	db	204
  1497  007D78  F8                 	db	248
  1498  007D79  D8                 	db	216
  1499  007D7A  C0                 	db	192
  1500  007D7B  C0                 	db	192
  1501  007D7C  C0                 	db	192
  1502  007D7D  00                 	db	0
  1503  007D7E  00                 	db	0
  1504  007D7F  00                 	db	0
  1505  007D80  00                 	db	0
  1506  007D81  6C                 	db	108
  1507  007D82  FC                 	db	252
  1508  007D83  CC                 	db	204
  1509  007D84  CC                 	db	204
  1510  007D85  CC                 	db	204
  1511  007D86  CC                 	db	204
  1512  007D87  FC                 	db	252
  1513  007D88  6C                 	db	108
  1514  007D89  0C                 	db	12
  1515  007D8A  0C                 	db	12
  1516  007D8B  0C                 	db	12
  1517  007D8C  00                 	db	0
  1518  007D8D  00                 	db	0
  1519  007D8E  00                 	db	0
  1520  007D8F  00                 	db	0
  1521  007D90  D0                 	db	208
  1522  007D91  F0                 	db	240
  1523  007D92  C0                 	db	192
  1524  007D93  C0                 	db	192
  1525  007D94  C0                 	db	192
  1526  007D95  C0                 	db	192
  1527  007D96  C0                 	db	192
  1528  007D97  C0                 	db	192
  1529  007D98  00                 	db	0
  1530  007D99  00                 	db	0
  1531  007D9A  00                 	db	0
  1532  007D9B  00                 	db	0
  1533  007D9C  00                 	db	0
  1534  007D9D  00                 	db	0
  1535  007D9E  00                 	db	0
  1536  007D9F  70                 	db	112
  1537  007DA0  F8                 	db	248
  1538  007DA1  C8                 	db	200
  1539  007DA2  E0                 	db	224
  1540  007DA3  38                 	db	56
  1541  007DA4  98                 	db	152
  1542  007DA5  F8                 	db	248
  1543  007DA6  70                 	db	112
  1544  007DA7  00                 	db	0
  1545  007DA8  00                 	db	0
  1546  007DA9  00                 	db	0
  1547  007DAA  00                 	db	0
  1548  007DAB  20                 	db	32
  1549  007DAC  60                 	db	96
  1550  007DAD  60                 	db	96
  1551  007DAE  F0                 	db	240
  1552  007DAF  F0                 	db	240
  1553  007DB0  60                 	db	96
  1554  007DB1  60                 	db	96
  1555  007DB2  60                 	db	96
  1556  007DB3  60                 	db	96
  1557  007DB4  70                 	db	112
  1558  007DB5  70                 	db	112
  1559  007DB6  00                 	db	0
  1560  007DB7  00                 	db	0
  1561  007DB8  00                 	db	0
  1562  007DB9  00                 	db	0
  1563  007DBA  00                 	db	0
  1564  007DBB  00                 	db	0
  1565  007DBC  00                 	db	0
  1566  007DBD  CC                 	db	204
  1567  007DBE  CC                 	db	204
  1568  007DBF  CC                 	db	204
  1569  007DC0  CC                 	db	204
  1570  007DC1  CC                 	db	204
  1571  007DC2  CC                 	db	204
  1572  007DC3  FC                 	db	252
  1573  007DC4  6C                 	db	108
  1574  007DC5  00                 	db	0
  1575  007DC6  00                 	db	0
  1576  007DC7  00                 	db	0
  1577  007DC8  00                 	db	0
  1578  007DC9  00                 	db	0
  1579  007DCA  00                 	db	0
  1580  007DCB  00                 	db	0
  1581  007DCC  C6                 	db	198
  1582  007DCD  C6                 	db	198
  1583  007DCE  6C                 	db	108
  1584  007DCF  6C                 	db	108
  1585  007DD0  6C                 	db	108
  1586  007DD1  38                 	db	56
  1587  007DD2  38                 	db	56
  1588  007DD3  38                 	db	56
  1589  007DD4  00                 	db	0
  1590  007DD5  00                 	db	0
  1591  007DD6  00                 	db	0
  1592  007DD7  00                 	db	0
  1593  007DD8  00                 	db	0
  1594  007DD9  00                 	db	0
  1595  007DDA  00                 	db	0
  1596  007DDB  00                 	db	0
  1597  007DDC  00                 	db	0
  1598  007DDD  00                 	db	0
  1599  007DDE  00                 	db	0
  1600  007DDF  DD                 	db	221
  1601  007DE0  80                 	db	128
  1602  007DE1  DD                 	db	221
  1603  007DE2  80                 	db	128
  1604  007DE3  DD                 	db	221
  1605  007DE4  80                 	db	128
  1606  007DE5  D5                 	db	213
  1607  007DE6  80                 	db	128
  1608  007DE7  55                 	db	85
  1609  007DE8  00                 	db	0
  1610  007DE9  77                 	db	119
  1611  007DEA  00                 	db	0
  1612  007DEB  77                 	db	119
  1613  007DEC  00                 	db	0
  1614  007DED  77                 	db	119
  1615  007DEE  00                 	db	0
  1616  007DEF  00                 	db	0
  1617  007DF0  00                 	db	0
  1618  007DF1  00                 	db	0
  1619  007DF2  00                 	db	0
  1620  007DF3  00                 	db	0
  1621  007DF4  00                 	db	0
  1622  007DF5  00                 	db	0
  1623  007DF6  00                 	db	0
  1624  007DF7  00                 	db	0
  1625  007DF8  00                 	db	0
  1626  007DF9  CC                 	db	204
  1627  007DFA  78                 	db	120
  1628  007DFB  78                 	db	120
  1629  007DFC  30                 	db	48
  1630  007DFD  30                 	db	48
  1631  007DFE  78                 	db	120
  1632  007DFF  78                 	db	120
  1633  007E00  CC                 	db	204
  1634  007E01  00                 	db	0
  1635  007E02  00                 	db	0
  1636  007E03  00                 	db	0
  1637  007E04  00                 	db	0
  1638  007E05  00                 	db	0
  1639  007E06  00                 	db	0
  1640  007E07  00                 	db	0
  1641  007E08  C6                 	db	198
  1642  007E09  C6                 	db	198
  1643  007E0A  6C                 	db	108
  1644  007E0B  6C                 	db	108
  1645  007E0C  6C                 	db	108
  1646  007E0D  38                 	db	56
  1647  007E0E  38                 	db	56
  1648  007E0F  38                 	db	56
  1649  007E10  30                 	db	48
  1650  007E11  F0                 	db	240
  1651  007E12  E0                 	db	224
  1652  007E13  00                 	db	0
  1653  007E14  00                 	db	0
  1654  007E15  00                 	db	0
  1655  007E16  00                 	db	0
  1656  007E17  FC                 	db	252
  1657  007E18  FC                 	db	252
  1658  007E19  18                 	db	24
  1659  007E1A  30                 	db	48
  1660  007E1B  30                 	db	48
  1661  007E1C  60                 	db	96
  1662  007E1D  FC                 	db	252
  1663  007E1E  FC                 	db	252
  1664  007E1F  00                 	db	0
  1665  007E20  00                 	db	0
  1666  007E21  00                 	db	0
  1667  007E22  00                 	db	0
  1668  007E23  30                 	db	48
  1669  007E24  70                 	db	112
  1670  007E25  60                 	db	96
  1671  007E26  60                 	db	96
  1672  007E27  60                 	db	96
  1673  007E28  60                 	db	96
  1674  007E29  C0                 	db	192
  1675  007E2A  C0                 	db	192
  1676  007E2B  60                 	db	96
  1677  007E2C  60                 	db	96
  1678  007E2D  60                 	db	96
  1679  007E2E  60                 	db	96
  1680  007E2F  70                 	db	112
  1681  007E30  30                 	db	48
  1682  007E31  00                 	db	0
  1683  007E32  C0                 	db	192
  1684  007E33  C0                 	db	192
  1685  007E34  C0                 	db	192
  1686  007E35  C0                 	db	192
  1687  007E36  C0                 	db	192
  1688  007E37  C0                 	db	192
  1689  007E38  C0                 	db	192
  1690  007E39  C0                 	db	192
  1691  007E3A  C0                 	db	192
  1692  007E3B  C0                 	db	192
  1693  007E3C  C0                 	db	192
  1694  007E3D  C0                 	db	192
  1695  007E3E  C0                 	db	192
  1696  007E3F  C0                 	db	192
  1697  007E40  00                 	db	0
  1698  007E41  C0                 	db	192
  1699  007E42  E0                 	db	224
  1700  007E43  60                 	db	96
  1701  007E44  60                 	db	96
  1702  007E45  60                 	db	96
  1703  007E46  60                 	db	96
  1704  007E47  30                 	db	48
  1705  007E48  30                 	db	48
  1706  007E49  60                 	db	96
  1707  007E4A  60                 	db	96
  1708  007E4B  60                 	db	96
  1709  007E4C  60                 	db	96
  1710  007E4D  E0                 	db	224
  1711  007E4E  C0                 	db	192
  1712  007E4F  00                 	db	0
  1713  007E50  00                 	db	0
  1714  007E51  00                 	db	0
  1715  007E52  00                 	db	0
  1716  007E53  00                 	db	0
  1717  007E54  E4                 	db	228
  1718  007E55  FC                 	db	252
  1719  007E56  9C                 	db	156
  1720  007E57  00                 	db	0
  1721  007E58  00                 	db	0
  1722  007E59  00                 	db	0
  1723  007E5A  00                 	db	0
  1724  007E5B  00                 	db	0
  1725  007E5C  00                 	db	0
  1726  007E5D  00                 	db	0
  1727  007E5E                     __end_of_arialNarrow_12ptBitmaps:
  1728                           	callstack 0
  1729  007E5E                     _arialNarrow_12ptDescriptors:
  1730                           	callstack 0
  1731  007E5E  08                 	db	8
  1732  007E5F  0000               	dw	0
  1733  007E61  02                 	db	2
  1734  007E62  000F               	dw	15
  1735  007E64  05                 	db	5
  1736  007E65  001E               	dw	30
  1737  007E67  07                 	db	7
  1738  007E68  002D               	dw	45
  1739  007E6A  07                 	db	7
  1740  007E6B  003C               	dw	60
  1741  007E6D  0A                 	db	10
  1742  007E6E  004B               	dw	75
  1743  007E70  08                 	db	8
  1744  007E71  0069               	dw	105
  1745  007E73  02                 	db	2
  1746  007E74  0078               	dw	120
  1747  007E76  04                 	db	4
  1748  007E77  0087               	dw	135
  1749  007E79  04                 	db	4
  1750  007E7A  0096               	dw	150
  1751  007E7C  05                 	db	5
  1752  007E7D  00A5               	dw	165
  1753  007E7F  06                 	db	6
  1754  007E80  00B4               	dw	180
  1755  007E82  02                 	db	2
  1756  007E83  00C3               	dw	195
  1757  007E85  04                 	db	4
  1758  007E86  00D2               	dw	210
  1759  007E88  02                 	db	2
  1760  007E89  00E1               	dw	225
  1761  007E8B  04                 	db	4
  1762  007E8C  00F0               	dw	240
  1763  007E8E  06                 	db	6
  1764  007E8F  00FF               	dw	255
  1765  007E91  04                 	db	4
  1766  007E92  010E               	dw	270
  1767  007E94  06                 	db	6
  1768  007E95  011D               	dw	285
  1769  007E97  06                 	db	6
  1770  007E98  012C               	dw	300
  1771  007E9A  07                 	db	7
  1772  007E9B  013B               	dw	315
  1773  007E9D  06                 	db	6
  1774  007E9E  014A               	dw	330
  1775  007EA0  05                 	db	5
  1776  007EA1  0159               	dw	345
  1777  007EA3  05                 	db	5
  1778  007EA4  0168               	dw	360
  1779  007EA6  06                 	db	6
  1780  007EA7  0177               	dw	375
  1781  007EA9  06                 	db	6
  1782  007EAA  0186               	dw	390
  1783  007EAC  02                 	db	2
  1784  007EAD  0195               	dw	405
  1785  007EAF  02                 	db	2
  1786  007EB0  01A4               	dw	420
  1787  007EB2  06                 	db	6
  1788  007EB3  01B3               	dw	435
  1789  007EB5  06                 	db	6
  1790  007EB6  01C2               	dw	450
  1791  007EB8  06                 	db	6
  1792  007EB9  01D1               	dw	465
  1793  007EBB  06                 	db	6
  1794  007EBC  01E0               	dw	480
  1795  007EBE  0D                 	db	13
  1796  007EBF  01EF               	dw	495
  1797  007EC1  09                 	db	9
  1798  007EC2  020D               	dw	525
  1799  007EC4  07                 	db	7
  1800  007EC5  022B               	dw	555
  1801  007EC7  08                 	db	8
  1802  007EC8  023A               	dw	570
  1803  007ECA  07                 	db	7
  1804  007ECB  0249               	dw	585
  1805  007ECD  07                 	db	7
  1806  007ECE  0258               	dw	600
  1807  007ED0  06                 	db	6
  1808  007ED1  0267               	dw	615
  1809  007ED3  08                 	db	8
  1810  007ED4  0276               	dw	630
  1811  007ED6  07                 	db	7
  1812  007ED7  0285               	dw	645
  1813  007ED9  02                 	db	2
  1814  007EDA  0294               	dw	660
  1815  007EDC  06                 	db	6
  1816  007EDD  02A3               	dw	675
  1817  007EDF  08                 	db	8
  1818  007EE0  02B2               	dw	690
  1819  007EE2  07                 	db	7
  1820  007EE3  02C1               	dw	705
  1821  007EE5  09                 	db	9
  1822  007EE6  02D0               	dw	720
  1823  007EE8  07                 	db	7
  1824  007EE9  02EE               	dw	750
  1825  007EEB  08                 	db	8
  1826  007EEC  02FD               	dw	765
  1827  007EEE  07                 	db	7
  1828  007EEF  030C               	dw	780
  1829  007EF1  09                 	db	9
  1830  007EF2  031B               	dw	795
  1831  007EF4  08                 	db	8
  1832  007EF5  0339               	dw	825
  1833  007EF7  07                 	db	7
  1834  007EF8  0348               	dw	840
  1835  007EFA  08                 	db	8
  1836  007EFB  0357               	dw	855
  1837  007EFD  07                 	db	7
  1838  007EFE  0366               	dw	870
  1839  007F00  09                 	db	9
  1840  007F01  0375               	dw	885
  1841  007F03  0B                 	db	11
  1842  007F04  0393               	dw	915
  1843  007F06  09                 	db	9
  1844  007F07  03B1               	dw	945
  1845  007F09  08                 	db	8
  1846  007F0A  03CF               	dw	975
  1847  007F0C  07                 	db	7
  1848  007F0D  03DE               	dw	990
  1849  007F0F  03                 	db	3
  1850  007F10  03ED               	dw	1005
  1851  007F12  04                 	db	4
  1852  007F13  03FC               	dw	1020
  1853  007F15  03                 	db	3
  1854  007F16  040B               	dw	1035
  1855  007F18  07                 	db	7
  1856  007F19  041A               	dw	1050
  1857  007F1B  07                 	db	7
  1858  007F1C  0429               	dw	1065
  1859  007F1E  03                 	db	3
  1860  007F1F  0438               	dw	1080
  1861  007F21  06                 	db	6
  1862  007F22  0447               	dw	1095
  1863  007F24  06                 	db	6
  1864  007F25  0456               	dw	1110
  1865  007F27  05                 	db	5
  1866  007F28  0465               	dw	1125
  1867  007F2A  06                 	db	6
  1868  007F2B  0474               	dw	1140
  1869  007F2D  05                 	db	5
  1870  007F2E  0483               	dw	1155
  1871  007F30  04                 	db	4
  1872  007F31  0492               	dw	1170
  1873  007F33  06                 	db	6
  1874  007F34  04A1               	dw	1185
  1875  007F36  06                 	db	6
  1876  007F37  04B0               	dw	1200
  1877  007F39  02                 	db	2
  1878  007F3A  04BF               	dw	1215
  1879  007F3C  04                 	db	4
  1880  007F3D  04CE               	dw	1230
  1881  007F3F  06                 	db	6
  1882  007F40  04DD               	dw	1245
  1883  007F42  02                 	db	2
  1884  007F43  04EC               	dw	1260
  1885  007F45  0A                 	db	10
  1886  007F46  04FB               	dw	1275
  1887  007F48  06                 	db	6
  1888  007F49  0519               	dw	1305
  1889  007F4B  06                 	db	6
  1890  007F4C  0528               	dw	1320
  1891  007F4E  06                 	db	6
  1892  007F4F  0537               	dw	1335
  1893  007F51  06                 	db	6
  1894  007F52  0546               	dw	1350
  1895  007F54  04                 	db	4
  1896  007F55  0555               	dw	1365
  1897  007F57  05                 	db	5
  1898  007F58  0564               	dw	1380
  1899  007F5A  04                 	db	4
  1900  007F5B  0573               	dw	1395
  1901  007F5D  06                 	db	6
  1902  007F5E  0582               	dw	1410
  1903  007F60  07                 	db	7
  1904  007F61  0591               	dw	1425
  1905  007F63  09                 	db	9
  1906  007F64  05A0               	dw	1440
  1907  007F66  06                 	db	6
  1908  007F67  05BE               	dw	1470
  1909  007F69  07                 	db	7
  1910  007F6A  05CD               	dw	1485
  1911  007F6C  06                 	db	6
  1912  007F6D  05DC               	dw	1500
  1913  007F6F  04                 	db	4
  1914  007F70  05EB               	dw	1515
  1915  007F72  02                 	db	2
  1916  007F73  05FA               	dw	1530
  1917  007F75  04                 	db	4
  1918  007F76  0609               	dw	1545
  1919  007F78  06                 	db	6
  1920  007F79  0618               	dw	1560
  1921  007F7B                     __end_of_arialNarrow_12ptDescriptors:
  1922                           	callstack 0
  1923  007F7B                     _arialNarrow_12ptFontInfo:
  1924                           	callstack 0
  1925  007F7B  0F                 	db	15
  1926  007F7C  20                 	db	32
  1927  007F7D  7E                 	db	126
  1928  007F7E  5E                 	db	low _arialNarrow_12ptDescriptors
  1929  007F7F  7E                 	db	high _arialNarrow_12ptDescriptors
  1930  007F80  37                 	db	low _arialNarrow_12ptBitmaps
  1931  007F81  78                 	db	high _arialNarrow_12ptBitmaps
  1932  007F82                     __end_of_arialNarrow_12ptFontInfo:
  1933                           	callstack 0
  1934  0000                     _ANSB2	set	31178
  1935  0000                     _ANSB1	set	31177
  1936  0000                     _WPUB	set	3937
  1937  0000                     _PORTBbits	set	3969
  1938  0000                     _ADRESL	set	4035
  1939  0000                     _ADRESH	set	4036
  1940  0000                     _ADCON0	set	4034
  1941  0000                     _LATA	set	3977
  1942  0000                     _TRISC	set	3988
  1943  0000                     _TRISA	set	3986
  1944  0000                     _PORTA	set	3968
  1945  0000                     _ADCON2	set	4032
  1946  0000                     _T2CONbits	set	4026
  1947  0000                     _CCPR2L	set	3943
  1948  0000                     _CCP2CONbits	set	3942
  1949  0000                     _PR2	set	4027
  1950  0000                     _TMR0L	set	4054
  1951  0000                     _TMR0H	set	4055
  1952  0000                     _T0CON	set	4053
  1953  0000                     _OSCCON	set	4051
  1954  0000                     _TMR0IF	set	32658
  1955  0000                     _LATB4	set	31828
  1956  0000                     _LATB1	set	31825
  1957  0000                     _INT1IF	set	32640
  1958  0000                     _TRISB4	set	31900
  1959  0000                     _LATB3	set	31827
  1960  0000                     _TRISB3	set	31899
  1961  0000                     _RBPU	set	32655
  1962  0000                     _TRISB1	set	31897
  1963  0000                     _LATB2	set	31826
  1964  0000                     _TRISB2	set	31898
  1965  0000                     _LATC2	set	31834
  1966  0000                     _LATC5	set	31837
  1967  0000                     _TRISC4	set	31908
  1968  0000                     _TRISC3	set	31907
  1969  0000                     _TRISC2	set	31906
  1970  0000                     _TRISC5	set	31909
  1971  0000                     _LATC3	set	31835
  1972  0000                     _LATC4	set	31836
  1973  0000                     _TMR2IF	set	31985
  1974  0000                     _TRISC1	set	31905
  1975  0000                     _TMR0IE	set	32661
  1976  0000                     _LATC0	set	31832
  1977  0000                     _TRISC0	set	31904
  1978  0000                     _INTEDG1	set	32653
  1979  0000                     _INT1IE	set	32643
  1980  0000                     _GIE	set	32663
  1981  0000                     _PLLEN	set	31966
  1982  007F82                     STR_15:
  1983  007F82  50                 	db	80	;'P'
  1984  007F83  4C                 	db	76	;'L'
  1985  007F84  41                 	db	65	;'A'
  1986  007F85  59                 	db	89	;'Y'
  1987  007F86  45                 	db	69	;'E'
  1988  007F87  52                 	db	82	;'R'
  1989  007F88  20                 	db	32
  1990  007F89  31                 	db	49	;'1'
  1991  007F8A  20                 	db	32
  1992  007F8B  57                 	db	87	;'W'
  1993  007F8C  49                 	db	73	;'I'
  1994  007F8D  4E                 	db	78	;'N'
  1995  007F8E  00                 	db	0
  1996  007F8F                     STR_14:
  1997  007F8F  50                 	db	80	;'P'
  1998  007F90  4C                 	db	76	;'L'
  1999  007F91  41                 	db	65	;'A'
  2000  007F92  59                 	db	89	;'Y'
  2001  007F93  45                 	db	69	;'E'
  2002  007F94  52                 	db	82	;'R'
  2003  007F95  20                 	db	32
  2004  007F96  32                 	db	50	;'2'
  2005  007F97  20                 	db	32
  2006  007F98  57                 	db	87	;'W'
  2007  007F99  49                 	db	73	;'I'
  2008  007F9A  4E                 	db	78	;'N'
  2009  007F9B  00                 	db	0
  2010  007F9C                     STR_11:
  2011  007F9C  50                 	db	80	;'P'
  2012  007F9D  41                 	db	65	;'A'
  2013  007F9E  52                 	db	82	;'R'
  2014  007F9F  41                 	db	65	;'A'
  2015  007FA0  4D                 	db	77	;'M'
  2016  007FA1  45                 	db	69	;'E'
  2017  007FA2  54                 	db	84	;'T'
  2018  007FA3  45                 	db	69	;'E'
  2019  007FA4  52                 	db	82	;'R'
  2020  007FA5  53                 	db	83	;'S'
  2021  007FA6  00                 	db	0
  2022  007FA7                     STR_12:
  2023  007FA7  4C                 	db	76	;'L'
  2024  007FA8  55                 	db	85	;'U'
  2025  007FA9  4D                 	db	77	;'M'
  2026  007FAA  49                 	db	73	;'I'
  2027  007FAB  4E                 	db	78	;'N'
  2028  007FAC  4F                 	db	79	;'O'
  2029  007FAD  53                 	db	83	;'S'
  2030  007FAE  49                 	db	73	;'I'
  2031  007FAF  54                 	db	84	;'T'
  2032  007FB0  59                 	db	89	;'Y'
  2033  007FB1  00                 	db	0
  2034  007FB2                     STR_6:
  2035  007FB2  50                 	db	80	;'P'
  2036  007FB3  61                 	db	97	;'a'
  2037  007FB4  72                 	db	114	;'r'
  2038  007FB5  61                 	db	97	;'a'
  2039  007FB6  6D                 	db	109	;'m'
  2040  007FB7  65                 	db	101	;'e'
  2041  007FB8  74                 	db	116	;'t'
  2042  007FB9  72                 	db	114	;'r'
  2043  007FBA  65                 	db	101	;'e'
  2044  007FBB  73                 	db	115	;'s'
  2045  007FBC  00                 	db	0
  2046  007FBD                     STR_1:
  2047  007FBD  4D                 	db	77	;'M'
  2048  007FBE  65                 	db	101	;'e'
  2049  007FBF  6E                 	db	110	;'n'
  2050  007FC0  75                 	db	117	;'u'
  2051  007FC1  53                 	db	83	;'S'
  2052  007FC2  74                 	db	116	;'t'
  2053  007FC3  61                 	db	97	;'a'
  2054  007FC4  72                 	db	114	;'r'
  2055  007FC5  74                 	db	116	;'t'
  2056  007FC6  00                 	db	0
  2057  007FC7                     STR_9:
  2058  007FC7  4E                 	db	78	;'N'
  2059  007FC8  65                 	db	101	;'e'
  2060  007FC9  77                 	db	119	;'w'
  2061  007FCA  20                 	db	32
  2062  007FCB  47                 	db	71	;'G'
  2063  007FCC  61                 	db	97	;'a'
  2064  007FCD  6D                 	db	109	;'m'
  2065  007FCE  65                 	db	101	;'e'
  2066  007FCF  00                 	db	0
  2067  007FD0                     STR_7:
  2068  007FD0  54                 	db	84	;'T'
  2069  007FD1  75                 	db	117	;'u'
  2070  007FD2  72                 	db	114	;'r'
  2071  007FD3  6E                 	db	110	;'n'
  2072  007FD4  20                 	db	32
  2073  007FD5  4F                 	db	79	;'O'
  2074  007FD6  66                 	db	102	;'f'
  2075  007FD7  66                 	db	102	;'f'
  2076  007FD8  00                 	db	0
  2077  007FD9                     STR_4:
  2078  007FD9  31                 	db	49	;'1'
  2079  007FDA  20                 	db	32
  2080  007FDB  50                 	db	80	;'P'
  2081  007FDC  6C                 	db	108	;'l'
  2082  007FDD  61                 	db	97	;'a'
  2083  007FDE  79                 	db	121	;'y'
  2084  007FDF  65                 	db	101	;'e'
  2085  007FE0  72                 	db	114	;'r'
  2086  007FE1  00                 	db	0
  2087  007FE2                     STR_5:
  2088  007FE2  32                 	db	50	;'2'
  2089  007FE3  20                 	db	32
  2090  007FE4  50                 	db	80	;'P'
  2091  007FE5  6C                 	db	108	;'l'
  2092  007FE6  61                 	db	97	;'a'
  2093  007FE7  79                 	db	121	;'y'
  2094  007FE8  65                 	db	101	;'e'
  2095  007FE9  72                 	db	114	;'r'
  2096  007FEA  00                 	db	0
  2097  007FEB                     STR_10:
  2098  007FEB  57                 	db	87	;'W'
  2099  007FEC  45                 	db	69	;'E'
  2100  007FED  4C                 	db	76	;'L'
  2101  007FEE  43                 	db	67	;'C'
  2102  007FEF  4F                 	db	79	;'O'
  2103  007FF0  4D                 	db	77	;'M'
  2104  007FF1  45                 	db	69	;'E'
  2105  007FF2  00                 	db	0
  2106  007FF3                     STR_13:
  2107  007FF3  4C                 	db	76	;'L'
  2108  007FF4  45                 	db	69	;'E'
  2109  007FF5  56                 	db	86	;'V'
  2110  007FF6  45                 	db	69	;'E'
  2111  007FF7  4C                 	db	76	;'L'
  2112  007FF8  00                 	db	0
  2113  007FF9                     STR_2:
  2114  007FF9  25                 	db	37
  2115  007FFA  64                 	db	100	;'d'
  2116  007FFB  00                 	db	0
  2117  007FFC                     STR_8:
  2118  007FFC  58                 	db	88	;'X'
  2119  007FFD  00                 	db	0
  2120  007FFE  00                 	db	0	; dummy byte at the end
  2121  0000                     
  2122                           ; #config settings
  2123                           
  2124                           	psect	cinit
  2125  005750                     __pcinit:
  2126                           	callstack 0
  2127  005750                     start_initialization:
  2128                           	callstack 0
  2129  005750                     __initialization:
  2130                           	callstack 0
  2131                           
  2132                           ; Clear objects allocated to BANK1 (240 bytes)
  2133  005750  EE01  F000         	lfsr	0,__pbssBANK1
  2134  005754  0EF0               	movlw	240
  2135  005756                     clear_0:
  2136  005756  6AEE               	clrf	postinc0,c
  2137  005758  06E8               	decf	wreg,f,c
  2138  00575A  E1FD               	bnz	clear_0
  2139                           
  2140                           ; Clear objects allocated to BANK0 (74 bytes)
  2141  00575C  EE00  F060         	lfsr	0,__pbssBANK0
  2142  005760  0E4A               	movlw	74
  2143  005762                     clear_1:
  2144  005762  6AEE               	clrf	postinc0,c
  2145  005764  06E8               	decf	wreg,f,c
  2146  005766  E1FD               	bnz	clear_1
  2147                           
  2148                           ; Clear objects allocated to COMRAM (8 bytes)
  2149  005768  EE00  F046         	lfsr	0,__pbssCOMRAM
  2150  00576C  0E08               	movlw	8
  2151  00576E                     clear_2:
  2152  00576E  6AEE               	clrf	postinc0,c
  2153  005770  06E8               	decf	wreg,f,c
  2154  005772  E1FD               	bnz	clear_2
  2155  005774                     end_of_initialization:
  2156                           	callstack 0
  2157  005774                     __end_of__initialization:
  2158                           	callstack 0
  2159  005774  904E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2160  005776  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2161  005778  0E00               	movlw	low (__Lmediumconst shr (0+16))
  2162  00577A  6EF8               	movwf	tblptru,c
  2163  00577C  0100               	movlb	0
  2164  00577E  EF06  F02D         	goto	_main	;jump to C main() function
  2165                           
  2166                           	psect	bssCOMRAM
  2167  000046                     __pbssCOMRAM:
  2168                           	callstack 0
  2169  000046                     _width:
  2170                           	callstack 0
  2171  000046                     	ds	2
  2172  000048                     _prec:
  2173                           	callstack 0
  2174  000048                     	ds	2
  2175  00004A                     _flags:
  2176                           	callstack 0
  2177  00004A                     	ds	2
  2178  00004C                     _gameStateMachine:
  2179                           	callstack 0
  2180  00004C                     	ds	1
  2181  00004D                     _touchScreenState:
  2182                           	callstack 0
  2183  00004D                     	ds	1
  2184                           
  2185                           	psect	bssBANK0
  2186  000060                     __pbssBANK0:
  2187                           	callstack 0
  2188  000060                     _theXF:
  2189                           	callstack 0
  2190  000060                     	ds	38
  2191  000086                     _nout:
  2192                           	callstack 0
  2193  000086                     	ds	2
  2194  000088                     _displayState:
  2195                           	callstack 0
  2196  000088                     	ds	1
  2197  000089                     _sleepState:
  2198                           	callstack 0
  2199  000089                     	ds	1
  2200  00008A                     _dbuf:
  2201                           	callstack 0
  2202  00008A                     	ds	32
  2203                           
  2204                           	psect	bssBANK1
  2205  000100                     __pbssBANK1:
  2206                           	callstack 0
  2207  000100                     _g1:
  2208                           	callstack 0
  2209  000100                     	ds	240
  2210                           
  2211                           	psect	cstackBANK0
  2212  0000AA                     __pcstackBANK0:
  2213                           	callstack 0
  2214  0000AA                     ??_touchScreenController:
  2215  0000AA                     _dtoa$5500:
  2216                           	callstack 0
  2217  0000AA                     LCD_Bitmap@bfOffBits:
  2218                           	callstack 0
  2219                           
  2220                           ; 4 bytes @ 0x0
  2221  0000AA                     	ds	2
  2222  0000AC                     dtoa@p:
  2223                           	callstack 0
  2224                           
  2225                           ; 2 bytes @ 0x2
  2226  0000AC                     	ds	2
  2227  0000AE                     LCD_Bitmap@endOfImage:
  2228                           	callstack 0
  2229  0000AE                     dtoa@w:
  2230                           	callstack 0
  2231                           
  2232                           ; 2 bytes @ 0x4
  2233  0000AE                     	ds	1
  2234  0000AF                     LCD_Bitmap@jumpCount:
  2235                           	callstack 0
  2236                           
  2237                           ; 2 bytes @ 0x5
  2238  0000AF                     	ds	1
  2239  0000B0                     touchScreenController@valueY:
  2240                           	callstack 0
  2241  0000B0                     dtoa@s:
  2242                           	callstack 0
  2243                           
  2244                           ; 2 bytes @ 0x6
  2245  0000B0                     	ds	1
  2246  0000B1                     LCD_Bitmap@curYPos:
  2247                           	callstack 0
  2248                           
  2249                           ; 2 bytes @ 0x7
  2250  0000B1                     	ds	1
  2251  0000B2                     touchScreenController@i:
  2252                           	callstack 0
  2253  0000B2                     dtoa@n:
  2254                           	callstack 0
  2255                           
  2256                           ; 8 bytes @ 0x8
  2257  0000B2                     	ds	1
  2258  0000B3                     LCD_Bitmap@colorTablePtr:
  2259                           	callstack 0
  2260                           
  2261                           ; 2 bytes @ 0x9
  2262  0000B3                     	ds	1
  2263  0000B4                     touchScreenController@valueX:
  2264                           	callstack 0
  2265                           
  2266                           ; 2 bytes @ 0xA
  2267  0000B4                     	ds	1
  2268  0000B5                     LCD_Bitmap@biHeight:
  2269                           	callstack 0
  2270                           
  2271                           ; 2 bytes @ 0xB
  2272  0000B5                     	ds	1
  2273  0000B6                     touchScreenSM@g:
  2274                           	callstack 0
  2275                           
  2276                           ; 2 bytes @ 0xC
  2277  0000B6                     	ds	1
  2278  0000B7                     LCD_Bitmap@curXPos:
  2279                           	callstack 0
  2280                           
  2281                           ; 2 bytes @ 0xD
  2282  0000B7                     	ds	1
  2283  0000B8                     ??_touchScreenSM:
  2284                           
  2285                           ; 1 bytes @ 0xE
  2286  0000B8                     	ds	1
  2287  0000B9                     LCD_Bitmap@color:
  2288                           	callstack 0
  2289                           
  2290                           ; 2 bytes @ 0xF
  2291  0000B9                     	ds	1
  2292  0000BA                     dtoa@i:
  2293                           	callstack 0
  2294                           
  2295                           ; 2 bytes @ 0x10
  2296  0000BA                     	ds	1
  2297  0000BB                     LCD_Bitmap@strPtr:
  2298                           	callstack 0
  2299                           
  2300                           ; 2 bytes @ 0x11
  2301  0000BB                     	ds	1
  2302  0000BC                     vfpfcnvrt@ll:
  2303                           	callstack 0
  2304                           
  2305                           ; 8 bytes @ 0x12
  2306  0000BC                     	ds	1
  2307  0000BD                     LCD_Bitmap@newY:
  2308                           	callstack 0
  2309                           
  2310                           ; 2 bytes @ 0x13
  2311  0000BD                     	ds	2
  2312  0000BF                     LCD_Bitmap@pixelCount:
  2313                           	callstack 0
  2314                           
  2315                           ; 1 bytes @ 0x15
  2316  0000BF                     	ds	1
  2317  0000C0                     LCD_Bitmap@biWidth:
  2318                           	callstack 0
  2319                           
  2320                           ; 2 bytes @ 0x16
  2321  0000C0                     	ds	2
  2322  0000C2                     LCD_Bitmap@jumpColor:
  2323                           	callstack 0
  2324                           
  2325                           ; 2 bytes @ 0x18
  2326  0000C2                     	ds	2
  2327  0000C4                     ?_vfprintf:
  2328                           	callstack 0
  2329  0000C4                     vfprintf@fp:
  2330                           	callstack 0
  2331  0000C4                     LCD_Bitmap@i:
  2332                           	callstack 0
  2333                           
  2334                           ; 2 bytes @ 0x1A
  2335  0000C4                     	ds	1
  2336  0000C5                     vfprintf@fmt:
  2337                           	callstack 0
  2338                           
  2339                           ; 2 bytes @ 0x1B
  2340  0000C5                     	ds	1
  2341  0000C6                     ??_LCD_ButtonDraw:
  2342                           
  2343                           ; 1 bytes @ 0x1C
  2344  0000C6                     	ds	1
  2345  0000C7                     vfprintf@ap:
  2346                           	callstack 0
  2347                           
  2348                           ; 1 bytes @ 0x1D
  2349  0000C7                     	ds	1
  2350  0000C8                     ?_sprintf:
  2351                           	callstack 0
  2352  0000C8                     sprintf@s:
  2353                           	callstack 0
  2354                           
  2355                           ; 2 bytes @ 0x1E
  2356  0000C8                     	ds	2
  2357  0000CA                     sprintf@fmt:
  2358                           	callstack 0
  2359                           
  2360                           ; 2 bytes @ 0x20
  2361  0000CA                     	ds	4
  2362  0000CE                     sprintf@ap:
  2363                           	callstack 0
  2364                           
  2365                           ; 1 bytes @ 0x24
  2366  0000CE                     	ds	1
  2367  0000CF                     sprintf@f:
  2368                           	callstack 0
  2369                           
  2370                           ; 6 bytes @ 0x25
  2371  0000CF                     	ds	3
  2372  0000D2                     LCD_ButtonDraw@tempChar:
  2373                           	callstack 0
  2374                           
  2375                           ; 1 bytes @ 0x28
  2376  0000D2                     	ds	1
  2377  0000D3                     LCD_ButtonDraw@width:
  2378                           	callstack 0
  2379                           
  2380                           ; 2 bytes @ 0x29
  2381  0000D3                     	ds	2
  2382  0000D5                     Score_draw@s:
  2383                           	callstack 0
  2384  0000D5                     LCD_ButtonDraw@x1:
  2385                           	callstack 0
  2386                           
  2387                           ; 2 bytes @ 0x2B
  2388  0000D5                     	ds	2
  2389  0000D7                     LCD_ButtonDraw@x2:
  2390                           	callstack 0
  2391                           
  2392                           ; 2 bytes @ 0x2D
  2393  0000D7                     	ds	2
  2394  0000D9                     LCD_ButtonDraw@y1:
  2395                           	callstack 0
  2396                           
  2397                           ; 2 bytes @ 0x2F
  2398  0000D9                     	ds	2
  2399  0000DB                     LCD_ButtonDraw@y2:
  2400                           	callstack 0
  2401                           
  2402                           ; 2 bytes @ 0x31
  2403  0000DB                     	ds	2
  2404  0000DD                     LCD_ButtonDraw@xText:
  2405                           	callstack 0
  2406                           
  2407                           ; 2 bytes @ 0x33
  2408  0000DD                     	ds	2
  2409  0000DF                     LCD_ButtonDraw@yText:
  2410                           	callstack 0
  2411                           
  2412                           ; 2 bytes @ 0x35
  2413  0000DF                     	ds	2
  2414  0000E1                     LCD_ButtonDraw@i:
  2415                           	callstack 0
  2416                           
  2417                           ; 1 bytes @ 0x37
  2418  0000E1                     	ds	1
  2419  0000E2                     LCD_ButtonDraw@bmpPtr:
  2420                           	callstack 0
  2421                           
  2422                           ; 2 bytes @ 0x38
  2423  0000E2                     	ds	2
  2424  0000E4                     Menu_parametersDraw@g:
  2425                           	callstack 0
  2426  0000E4                     Menu_inGameDraw@g:
  2427                           	callstack 0
  2428                           
  2429                           ; 2 bytes @ 0x3A
  2430  0000E4                     	ds	2
  2431  0000E6                     displayController@g:
  2432                           	callstack 0
  2433                           
  2434                           ; 2 bytes @ 0x3C
  2435  0000E6                     	ds	2
  2436  0000E8                     displayController@ev:
  2437                           	callstack 0
  2438                           
  2439                           ; 1 bytes @ 0x3E
  2440  0000E8                     	ds	1
  2441  0000E9                     ??_displayController:
  2442                           
  2443                           ; 1 bytes @ 0x3F
  2444  0000E9                     	ds	2
  2445  0000EB                     displayInit@g:
  2446                           	callstack 0
  2447  0000EB                     displaySM@g:
  2448                           	callstack 0
  2449                           
  2450                           ; 2 bytes @ 0x41
  2451  0000EB                     	ds	2
  2452  0000ED                     ??_displaySM:
  2453  0000ED                     sleepInit@g:
  2454                           	callstack 0
  2455                           
  2456                           ; 2 bytes @ 0x43
  2457  0000ED                     	ds	2
  2458  0000EF                     ??_Factory_init:
  2459  0000EF                     displaySM@ev:
  2460                           	callstack 0
  2461                           
  2462                           ; 1 bytes @ 0x45
  2463  0000EF                     	ds	1
  2464  0000F0                     Factory_exec@ev:
  2465                           	callstack 0
  2466                           
  2467                           ; 1 bytes @ 0x46
  2468  0000F0                     	ds	1
  2469                           
  2470                           	psect	cstackCOMRAM
  2471  000001                     __pcstackCOMRAM:
  2472                           	callstack 0
  2473  000001                     ?i2___awmod:
  2474                           	callstack 0
  2475  000001                     i2ENTERCRITICAL@inISR:
  2476                           	callstack 0
  2477  000001                     i2LEAVECRITICAL@inISR:
  2478                           	callstack 0
  2479  000001                     i2___awmod@dividend:
  2480                           	callstack 0
  2481                           
  2482                           ; 2 bytes @ 0x0
  2483  000001                     	ds	1
  2484  000002                     i2XF_unscheduleTimer@inISR:
  2485                           	callstack 0
  2486                           
  2487                           ; 1 bytes @ 0x1
  2488  000002                     	ds	1
  2489  000003                     i2XF_unscheduleTimer@id:
  2490                           	callstack 0
  2491  000003                     i2___awmod@divisor:
  2492                           	callstack 0
  2493                           
  2494                           ; 2 bytes @ 0x2
  2495  000003                     	ds	2
  2496  000005                     i2___awmod@counter:
  2497                           	callstack 0
  2498                           
  2499                           ; 1 bytes @ 0x4
  2500  000005                     	ds	1
  2501  000006                     i2___awmod@sign:
  2502                           	callstack 0
  2503                           
  2504                           ; 1 bytes @ 0x5
  2505  000006                     	ds	1
  2506  000007                     i2XF_pushEvent@inISR:
  2507                           	callstack 0
  2508                           
  2509                           ; 1 bytes @ 0x6
  2510  000007                     	ds	1
  2511  000008                     i2XF_pushEvent@ev:
  2512                           	callstack 0
  2513                           
  2514                           ; 1 bytes @ 0x7
  2515  000008                     	ds	1
  2516  000009                     i2XF_pushEvent@temp:
  2517                           	callstack 0
  2518                           
  2519                           ; 1 bytes @ 0x8
  2520  000009                     	ds	1
  2521  00000A                     
  2522                           ; 1 bytes @ 0x9
  2523  00000A                     	ds	2
  2524  00000C                     XF_decrementAndQueueTimers@i:
  2525                           	callstack 0
  2526                           
  2527                           ; 2 bytes @ 0xB
  2528  00000C                     	ds	2
  2529  00000E                     ??_isr:
  2530                           
  2531                           ; 1 bytes @ 0xD
  2532  00000E                     	ds	4
  2533  000012                     ??_LCD_Lowlevel_Init:
  2534  000012                     ??_sleepController:
  2535  000012                     ?_LCD_Read:
  2536                           	callstack 0
  2537  000012                     ?_strlen:
  2538                           	callstack 0
  2539  000012                     ?_RGB2LCD:
  2540                           	callstack 0
  2541  000012                     ?___awdiv:
  2542                           	callstack 0
  2543  000012                     ?___awmod:
  2544                           	callstack 0
  2545  000012                     ?___lwmod:
  2546                           	callstack 0
  2547  000012                     ?___xxtofl:
  2548                           	callstack 0
  2549  000012                     ?___aodiv:
  2550                           	callstack 0
  2551  000012                     ?___aomod:
  2552                           	callstack 0
  2553  000012                     configMeasure@channel:
  2554                           	callstack 0
  2555  000012                     ENTERCRITICAL@inISR:
  2556                           	callstack 0
  2557  000012                     LEAVECRITICAL@inISR:
  2558                           	callstack 0
  2559  000012                     Ball_init@b:
  2560                           	callstack 0
  2561  000012                     Ball_Update@b:
  2562                           	callstack 0
  2563  000012                     Paddle_init@p:
  2564                           	callstack 0
  2565  000012                     Paddle_addX@p:
  2566                           	callstack 0
  2567  000012                     Score_init@s:
  2568                           	callstack 0
  2569  000012                     GameParameters_setBackLight@s:
  2570                           	callstack 0
  2571  000012                     GameParameters_setLevel@s:
  2572                           	callstack 0
  2573  000012                     GameParameters_resetPos@s:
  2574                           	callstack 0
  2575  000012                     GameParameters_setX@s:
  2576                           	callstack 0
  2577  000012                     GameParameters_setY@s:
  2578                           	callstack 0
  2579  000012                     LCD_Fill@color:
  2580                           	callstack 0
  2581  000012                     LCD_SliderCreate@posX:
  2582                           	callstack 0
  2583  000012                     LCD_ButtonCreate@posX:
  2584                           	callstack 0
  2585  000012                     LCD_InButton@button:
  2586                           	callstack 0
  2587  000012                     LCD_InSlider@slider:
  2588                           	callstack 0
  2589  000012                     LCD_DrawRect@posX1:
  2590                           	callstack 0
  2591  000012                     RGB2LCD@colorTableEntry:
  2592                           	callstack 0
  2593  000012                     LCD_Read@posX:
  2594                           	callstack 0
  2595  000012                     XF_init@i:
  2596                           	callstack 0
  2597  000012                     ___awdiv@dividend:
  2598                           	callstack 0
  2599  000012                     ___awmod@dividend:
  2600                           	callstack 0
  2601  000012                     ___lwmod@dividend:
  2602                           	callstack 0
  2603  000012                     fputc@c:
  2604                           	callstack 0
  2605  000012                     strlen@s:
  2606                           	callstack 0
  2607  000012                     ___xxtofl@val:
  2608                           	callstack 0
  2609  000012                     ___aodiv@dividend:
  2610                           	callstack 0
  2611  000012                     ___aomod@dividend:
  2612                           	callstack 0
  2613                           
  2614                           ; 8 bytes @ 0x11
  2615  000012                     	ds	1
  2616  000013                     XF_unscheduleTimer@inISR:
  2617                           	callstack 0
  2618  000013                     XF_scheduleTimer@tm:
  2619                           	callstack 0
  2620  000013                     LCD_Lowlevel_Init@i:
  2621                           	callstack 0
  2622                           
  2623                           ; 4 bytes @ 0x12
  2624  000013                     	ds	1
  2625  000014                     ??_sleepSM:
  2626  000014                     ??_Ball_Update:
  2627  000014                     ??_RGB2LCD:
  2628  000014                     LCD_Fill@colorH:
  2629                           	callstack 0
  2630  000014                     XF_unscheduleTimer@id:
  2631                           	callstack 0
  2632  000014                     fputc@fp:
  2633                           	callstack 0
  2634  000014                     Paddle_init@team:
  2635                           	callstack 0
  2636  000014                     Paddle_addX@value:
  2637                           	callstack 0
  2638  000014                     GameParameters_setBackLight@value:
  2639                           	callstack 0
  2640  000014                     GameParameters_setLevel@value:
  2641                           	callstack 0
  2642  000014                     GameParameters_setX@value:
  2643                           	callstack 0
  2644  000014                     GameParameters_setY@value:
  2645                           	callstack 0
  2646  000014                     LCD_SliderCreate@posY:
  2647                           	callstack 0
  2648  000014                     LCD_ButtonCreate@posY:
  2649                           	callstack 0
  2650  000014                     LCD_InButton@posX:
  2651                           	callstack 0
  2652  000014                     LCD_InSlider@posX:
  2653                           	callstack 0
  2654  000014                     LCD_DrawRect@posY1:
  2655                           	callstack 0
  2656  000014                     LCD_Read@posY:
  2657                           	callstack 0
  2658  000014                     ___awdiv@divisor:
  2659                           	callstack 0
  2660  000014                     ___awmod@divisor:
  2661                           	callstack 0
  2662  000014                     ___lwmod@divisor:
  2663                           	callstack 0
  2664  000014                     strlen@a:
  2665                           	callstack 0
  2666                           
  2667                           ; 2 bytes @ 0x13
  2668  000014                     	ds	1
  2669  000015                     ??_fputc:
  2670  000015                     LCD_Fill@colorL:
  2671                           	callstack 0
  2672  000015                     XF_scheduleTimer@ev:
  2673                           	callstack 0
  2674                           
  2675                           ; 1 bytes @ 0x14
  2676  000015                     	ds	1
  2677  000016                     ??_LCD_Read:
  2678  000016                     ??___xxtofl:
  2679  000016                     sleepSM@ev:
  2680                           	callstack 0
  2681  000016                     XF_scheduleTimer@inISR:
  2682                           	callstack 0
  2683  000016                     ___awdiv@counter:
  2684                           	callstack 0
  2685  000016                     ___awmod@counter:
  2686                           	callstack 0
  2687  000016                     ___lwmod@counter:
  2688                           	callstack 0
  2689  000016                     Paddle_addX@add:
  2690                           	callstack 0
  2691  000016                     LCD_Fill@column:
  2692                           	callstack 0
  2693  000016                     LCD_SliderCreate@width:
  2694                           	callstack 0
  2695  000016                     LCD_ButtonCreate@width:
  2696                           	callstack 0
  2697  000016                     LCD_InButton@posY:
  2698                           	callstack 0
  2699  000016                     LCD_InSlider@posY:
  2700                           	callstack 0
  2701  000016                     LCD_DrawRect@posX2:
  2702                           	callstack 0
  2703  000016                     levelController@g:
  2704                           	callstack 0
  2705                           
  2706                           ; 2 bytes @ 0x15
  2707  000016                     	ds	1
  2708  000017                     ??_LCD_Init:
  2709  000017                     XF_scheduleTimer@i:
  2710                           	callstack 0
  2711  000017                     ___awdiv@sign:
  2712                           	callstack 0
  2713  000017                     ___awmod@sign:
  2714                           	callstack 0
  2715                           
  2716                           ; 1 bytes @ 0x16
  2717  000017                     	ds	1
  2718  000018                     ??_Paddle_addX:
  2719  000018                     ??_LCD_InButton:
  2720  000018                     ??_LCD_InSlider:
  2721  000018                     LCD_Init@i:
  2722                           	callstack 0
  2723  000018                     XF_pushEvent@inISR:
  2724                           	callstack 0
  2725  000018                     XF_popEvent@ev:
  2726                           	callstack 0
  2727  000018                     LCD_Fill@page:
  2728                           	callstack 0
  2729  000018                     LCD_SliderCreate@height:
  2730                           	callstack 0
  2731  000018                     LCD_ButtonCreate@height:
  2732                           	callstack 0
  2733  000018                     LCD_DrawRect@posY2:
  2734                           	callstack 0
  2735  000018                     RGB2LCD@red:
  2736                           	callstack 0
  2737  000018                     LCD_Read@color:
  2738                           	callstack 0
  2739  000018                     backlightController@g:
  2740                           	callstack 0
  2741  000018                     ___awdiv@quotient:
  2742                           	callstack 0
  2743                           
  2744                           ; 2 bytes @ 0x17
  2745  000018                     	ds	1
  2746  000019                     XF_pushEvent@ev:
  2747                           	callstack 0
  2748  000019                     XF_popEvent@inISR:
  2749                           	callstack 0
  2750                           
  2751                           ; 1 bytes @ 0x18
  2752  000019                     	ds	1
  2753  00001A                     ?___wmul:
  2754                           	callstack 0
  2755  00001A                     LCD_DrawRect@fill:
  2756                           	callstack 0
  2757  00001A                     XF_pushEvent@temp:
  2758                           	callstack 0
  2759  00001A                     ___xxtofl@sign:
  2760                           	callstack 0
  2761  00001A                     fputs@s:
  2762                           	callstack 0
  2763  00001A                     LCD_SliderCreate@sldColor:
  2764                           	callstack 0
  2765  00001A                     LCD_ButtonCreate@txtColor:
  2766                           	callstack 0
  2767  00001A                     RGB2LCD@green:
  2768                           	callstack 0
  2769  00001A                     LCD_Read@temp16:
  2770                           	callstack 0
  2771  00001A                     ___wmul@multiplier:
  2772                           	callstack 0
  2773  00001A                     ___aodiv@divisor:
  2774                           	callstack 0
  2775  00001A                     ___aomod@divisor:
  2776                           	callstack 0
  2777                           
  2778                           ; 8 bytes @ 0x19
  2779  00001A                     	ds	1
  2780  00001B                     ___xxtofl@exp:
  2781                           	callstack 0
  2782  00001B                     fputs@fp:
  2783                           	callstack 0
  2784  00001B                     LCD_DrawRect@color:
  2785                           	callstack 0
  2786  00001B                     checkCollision@g:
  2787                           	callstack 0
  2788                           
  2789                           ; 2 bytes @ 0x1A
  2790  00001B                     	ds	1
  2791  00001C                     fputs@c:
  2792                           	callstack 0
  2793  00001C                     LCD_SliderCreate@bgColor:
  2794                           	callstack 0
  2795  00001C                     LCD_ButtonCreate@bgColor:
  2796                           	callstack 0
  2797  00001C                     RGB2LCD@blue:
  2798                           	callstack 0
  2799  00001C                     moovePaddle1@g:
  2800                           	callstack 0
  2801  00001C                     moovePaddle2@g:
  2802                           	callstack 0
  2803  00001C                     ___wmul@multiplicand:
  2804                           	callstack 0
  2805  00001C                     ___xxtofl@arg:
  2806                           	callstack 0
  2807                           
  2808                           ; 4 bytes @ 0x1B
  2809  00001C                     	ds	1
  2810  00001D                     ??_checkCollision:
  2811  00001D                     LCD_DrawRect@j:
  2812                           	callstack 0
  2813  00001D                     fputs@i:
  2814                           	callstack 0
  2815                           
  2816                           ; 2 bytes @ 0x1C
  2817  00001D                     	ds	1
  2818  00001E                     ??_moovePaddle2:
  2819  00001E                     LCD_SliderCreate@borderColor:
  2820                           	callstack 0
  2821  00001E                     LCD_ButtonCreate@textOrBmp:
  2822                           	callstack 0
  2823  00001E                     RGB2LCD@color:
  2824                           	callstack 0
  2825  00001E                     ___wmul@product:
  2826                           	callstack 0
  2827                           
  2828                           ; 2 bytes @ 0x1D
  2829  00001E                     	ds	1
  2830  00001F                     ?_pad:
  2831                           	callstack 0
  2832  00001F                     pad@fp:
  2833                           	callstack 0
  2834  00001F                     LCD_DrawRect@temp:
  2835                           	callstack 0
  2836                           
  2837                           ; 2 bytes @ 0x1E
  2838  00001F                     	ds	1
  2839  000020                     ?___lwdiv:
  2840                           	callstack 0
  2841  000020                     ?___fldiv:
  2842                           	callstack 0
  2843  000020                     pad@buf:
  2844                           	callstack 0
  2845  000020                     LCD_SliderCreate@cursorWidth:
  2846                           	callstack 0
  2847  000020                     LCD_ButtonCreate@font:
  2848                           	callstack 0
  2849  000020                     LCD_DrawText@msg:
  2850                           	callstack 0
  2851  000020                     ___lwdiv@dividend:
  2852                           	callstack 0
  2853  000020                     ___fldiv@b:
  2854                           	callstack 0
  2855                           
  2856                           ; 4 bytes @ 0x1F
  2857  000020                     	ds	1
  2858  000021                     LCD_DrawRect@colorH:
  2859                           	callstack 0
  2860  000021                     pad@p:
  2861                           	callstack 0
  2862                           
  2863                           ; 2 bytes @ 0x20
  2864  000021                     	ds	1
  2865  000022                     LCD_DrawRect@colorL:
  2866                           	callstack 0
  2867  000022                     ___aodiv@counter:
  2868                           	callstack 0
  2869  000022                     ___aomod@counter:
  2870                           	callstack 0
  2871  000022                     LCD_SliderCreate@steps:
  2872                           	callstack 0
  2873  000022                     LCD_ButtonCreate@fpPress:
  2874                           	callstack 0
  2875  000022                     LCD_DrawText@font:
  2876                           	callstack 0
  2877  000022                     ___lwdiv@divisor:
  2878                           	callstack 0
  2879                           
  2880                           ; 2 bytes @ 0x21
  2881  000022                     	ds	1
  2882  000023                     ??_pad:
  2883  000023                     ___aodiv@sign:
  2884                           	callstack 0
  2885  000023                     ___aomod@sign:
  2886                           	callstack 0
  2887  000023                     LCD_DrawRect@i:
  2888                           	callstack 0
  2889                           
  2890                           ; 2 bytes @ 0x22
  2891  000023                     	ds	1
  2892  000024                     ?_abs:
  2893                           	callstack 0
  2894  000024                     LCD_DrawText@align:
  2895                           	callstack 0
  2896  000024                     LCD_SliderCreate@fpPress:
  2897                           	callstack 0
  2898  000024                     LCD_ButtonCreate@fpReleased:
  2899                           	callstack 0
  2900  000024                     ___lwdiv@quotient:
  2901                           	callstack 0
  2902  000024                     pad@i:
  2903                           	callstack 0
  2904  000024                     abs@a:
  2905                           	callstack 0
  2906  000024                     ___fldiv@a:
  2907                           	callstack 0
  2908  000024                     ___aodiv@quotient:
  2909                           	callstack 0
  2910                           
  2911                           ; 8 bytes @ 0x23
  2912  000024                     	ds	1
  2913  000025                     Ball_draw@b:
  2914                           	callstack 0
  2915  000025                     Paddle_draw@p:
  2916                           	callstack 0
  2917  000025                     LCD_ButtonUpdate@button:
  2918                           	callstack 0
  2919  000025                     LCD_DrawText@posX:
  2920                           	callstack 0
  2921  000025                     mooveBall@g:
  2922                           	callstack 0
  2923                           
  2924                           ; 2 bytes @ 0x24
  2925  000025                     	ds	1
  2926  000026                     ??_abs:
  2927  000026                     ___lwdiv@counter:
  2928                           	callstack 0
  2929  000026                     LCD_SliderCreate@slider:
  2930                           	callstack 0
  2931  000026                     LCD_ButtonCreate@fpOut:
  2932                           	callstack 0
  2933  000026                     pad@w:
  2934                           	callstack 0
  2935                           
  2936                           ; 2 bytes @ 0x25
  2937  000026                     	ds	1
  2938  000027                     ??_Ball_draw:
  2939  000027                     ??_Paddle_draw:
  2940  000027                     ??_LCD_ButtonUpdate:
  2941  000027                     LCD_SliderUpdate@slider:
  2942                           	callstack 0
  2943  000027                     LCD_DrawText@posY:
  2944                           	callstack 0
  2945  000027                     LCD_Bitmap@bmpPtr:
  2946                           	callstack 0
  2947                           
  2948                           ; 2 bytes @ 0x26
  2949  000027                     	ds	1
  2950  000028                     ??___fldiv:
  2951  000028                     LCD_ButtonCreate@button:
  2952                           	callstack 0
  2953                           
  2954                           ; 2 bytes @ 0x27
  2955  000028                     	ds	1
  2956  000029                     ??_LCD_SliderUpdate:
  2957  000029                     LCD_DrawText@color:
  2958                           	callstack 0
  2959  000029                     LCD_Bitmap@posX:
  2960                           	callstack 0
  2961                           
  2962                           ; 2 bytes @ 0x28
  2963  000029                     	ds	1
  2964  00002A                     LCD_ButtonCreate@index:
  2965                           	callstack 0
  2966                           
  2967                           ; 1 bytes @ 0x29
  2968  00002A                     	ds	1
  2969  00002B                     GameParameters_init@s:
  2970                           	callstack 0
  2971  00002B                     LCD_ButtonUpdate@colorOut:
  2972                           	callstack 0
  2973  00002B                     LCD_DrawText@bg_color:
  2974                           	callstack 0
  2975  00002B                     LCD_Bitmap@posY:
  2976                           	callstack 0
  2977                           
  2978                           ; 2 bytes @ 0x2A
  2979  00002B                     	ds	1
  2980  00002C                     ?_dtoa:
  2981                           	callstack 0
  2982  00002C                     dtoa@fp:
  2983                           	callstack 0
  2984  00002C                     ___fldiv@rem:
  2985                           	callstack 0
  2986                           
  2987                           ; 4 bytes @ 0x2B
  2988  00002C                     	ds	1
  2989  00002D                     ??_LCD_DrawText:
  2990  00002D                     ??_LCD_Bitmap:
  2991  00002D                     LCD_ButtonUpdate@colorIn:
  2992                           	callstack 0
  2993  00002D                     dtoa@d:
  2994                           	callstack 0
  2995                           
  2996                           ; 8 bytes @ 0x2C
  2997  00002D                     	ds	2
  2998  00002F                     LCD_SliderUpdate@x2:
  2999                           	callstack 0
  3000  00002F                     LCD_ButtonUpdate@x2:
  3001                           	callstack 0
  3002                           
  3003                           ; 2 bytes @ 0x2E
  3004  00002F                     	ds	1
  3005  000030                     ___fldiv@sign:
  3006                           	callstack 0
  3007                           
  3008                           ; 1 bytes @ 0x2F
  3009  000030                     	ds	1
  3010  000031                     LCD_SliderUpdate@y1:
  3011                           	callstack 0
  3012  000031                     LCD_ButtonUpdate@y1:
  3013                           	callstack 0
  3014  000031                     ___fldiv@new_exp:
  3015                           	callstack 0
  3016                           
  3017                           ; 2 bytes @ 0x30
  3018  000031                     	ds	2
  3019  000033                     LCD_SliderUpdate@y2:
  3020                           	callstack 0
  3021  000033                     LCD_ButtonUpdate@x1:
  3022                           	callstack 0
  3023  000033                     LCD_DrawText@offset:
  3024                           	callstack 0
  3025  000033                     ___fldiv@grs:
  3026                           	callstack 0
  3027                           
  3028                           ; 4 bytes @ 0x32
  3029  000033                     	ds	2
  3030  000035                     ??_dtoa:
  3031  000035                     LCD_SliderUpdate@x1:
  3032                           	callstack 0
  3033  000035                     LCD_ButtonUpdate@y2:
  3034                           	callstack 0
  3035  000035                     LCD_DrawText@yOffset:
  3036                           	callstack 0
  3037                           
  3038                           ; 2 bytes @ 0x34
  3039  000035                     	ds	2
  3040  000037                     LCD_DrawText@fontByte:
  3041                           	callstack 0
  3042  000037                     ___fldiv@bexp:
  3043                           	callstack 0
  3044  000037                     LCD_SliderDraw@slider:
  3045                           	callstack 0
  3046  000037                     gameControllerController@g:
  3047                           	callstack 0
  3048                           
  3049                           ; 2 bytes @ 0x36
  3050  000037                     	ds	1
  3051  000038                     LCD_DrawText@fontPixel:
  3052                           	callstack 0
  3053  000038                     ___fldiv@aexp:
  3054                           	callstack 0
  3055                           
  3056                           ; 1 bytes @ 0x37
  3057  000038                     	ds	1
  3058  000039                     ??_LCD_SliderDraw:
  3059  000039                     ?___fltol:
  3060                           	callstack 0
  3061  000039                     gameControllerController@ev:
  3062                           	callstack 0
  3063  000039                     LCD_DrawText@posYEnd:
  3064                           	callstack 0
  3065  000039                     ___fltol@f1:
  3066                           	callstack 0
  3067                           
  3068                           ; 4 bytes @ 0x38
  3069  000039                     	ds	1
  3070  00003A                     ??_gameControllerController:
  3071                           
  3072                           ; 1 bytes @ 0x39
  3073  00003A                     	ds	1
  3074  00003B                     LCD_DrawText@posXEnd:
  3075                           	callstack 0
  3076                           
  3077                           ; 2 bytes @ 0x3A
  3078  00003B                     	ds	1
  3079  00003C                     gameControllerInit@g:
  3080                           	callstack 0
  3081  00003C                     gameControllerSM@g:
  3082                           	callstack 0
  3083                           
  3084                           ; 2 bytes @ 0x3B
  3085  00003C                     	ds	1
  3086  00003D                     ??___fltol:
  3087  00003D                     ?_vfpfcnvrt:
  3088                           	callstack 0
  3089  00003D                     LCD_DrawText@y:
  3090                           	callstack 0
  3091  00003D                     vfpfcnvrt@fp:
  3092                           	callstack 0
  3093  00003D                     LCD_SliderDraw@x1:
  3094                           	callstack 0
  3095                           
  3096                           ; 2 bytes @ 0x3C
  3097  00003D                     	ds	1
  3098  00003E                     ??_gameControllerSM:
  3099  00003E                     LCD_DrawText@i:
  3100                           	callstack 0
  3101  00003E                     vfpfcnvrt@fmt:
  3102                           	callstack 0
  3103                           
  3104                           ; 1 bytes @ 0x3D
  3105  00003E                     	ds	1
  3106  00003F                     LCD_DrawText@tempChar:
  3107                           	callstack 0
  3108  00003F                     vfpfcnvrt@ap:
  3109                           	callstack 0
  3110  00003F                     LCD_SliderDraw@x2:
  3111                           	callstack 0
  3112                           
  3113                           ; 2 bytes @ 0x3E
  3114  00003F                     	ds	1
  3115  000040                     LCD_DrawText@x:
  3116                           	callstack 0
  3117  000040                     gameControllerSM@ev:
  3118                           	callstack 0
  3119  000040                     vfprintf@cfmt:
  3120                           	callstack 0
  3121                           
  3122                           ; 2 bytes @ 0x3F
  3123  000040                     	ds	1
  3124  000041                     LCD_DrawText@width:
  3125                           	callstack 0
  3126  000041                     ___fltol@sign1:
  3127                           	callstack 0
  3128  000041                     LCD_SliderDraw@y1:
  3129                           	callstack 0
  3130                           
  3131                           ; 2 bytes @ 0x40
  3132  000041                     	ds	1
  3133  000042                     ___fltol@exp1:
  3134                           	callstack 0
  3135  000042                     LCD_ButtonDraw@button:
  3136                           	callstack 0
  3137                           
  3138                           ; 2 bytes @ 0x41
  3139  000042                     	ds	1
  3140  000043                     LCD_SliderDraw@y2:
  3141                           	callstack 0
  3142  000043                     touchScreenController@g:
  3143                           	callstack 0
  3144                           
  3145                           ; 2 bytes @ 0x42
  3146  000043                     	ds	1
  3147  000044                     Menu_welcomeDraw@g:
  3148                           	callstack 0
  3149  000044                     Menu_endGame@g:
  3150                           	callstack 0
  3151                           
  3152                           ; 2 bytes @ 0x43
  3153  000044                     	ds	1
  3154  000045                     touchScreenSM@ev:
  3155                           	callstack 0
  3156                           
  3157                           ; 1 bytes @ 0x44
  3158  000045                     	ds	1
  3159  000046                     
  3160                           ; 1 bytes @ 0x45
  3161 ;;
  3162 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3163 ;;
  3164 ;; *************** function _main *****************
  3165 ;; Defined at:
  3166 ;;		line 53 in file "main.c"
  3167 ;; Parameters:    Size  Location     Type
  3168 ;;		None
  3169 ;; Auto vars:     Size  Location     Type
  3170 ;;		None
  3171 ;; Return value:  Size  Location     Type
  3172 ;;                  1    wreg      void 
  3173 ;; Registers used:
  3174 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3175 ;; Tracked objects:
  3176 ;;		On entry : 0/0
  3177 ;;		On exit  : 0/0
  3178 ;;		Unchanged: 0/0
  3179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3180 ;;      Params:         0       0       0       0       0       0       0
  3181 ;;      Locals:         0       0       0       0       0       0       0
  3182 ;;      Temps:          0       0       0       0       0       0       0
  3183 ;;      Totals:         0       0       0       0       0       0       0
  3184 ;;Total ram usage:        0 bytes
  3185 ;; Hardware stack levels required when called: 17
  3186 ;; This function calls:
  3187 ;;		_Factory_exec
  3188 ;;		_Factory_init
  3189 ;; This function is called by:
  3190 ;;		Startup code after reset
  3191 ;; This function uses a non-reentrant model
  3192 ;;
  3193                           
  3194                           	psect	text0
  3195  005A0C                     __ptext0:
  3196                           	callstack 0
  3197  005A0C                     _main:
  3198                           	callstack 14
  3199                           
  3200                           ;main.c: 55:     Factory_init();
  3201                           
  3202                           ;incstack = 0
  3203  005A0C  EC28  F023         	call	_Factory_init	;wreg free
  3204  005A10                     l778:
  3205                           
  3206                           ;main.c: 57:     {;main.c: 58:         Factory_exec();
  3207  005A10  EC8F  F02A         	call	_Factory_exec	;wreg free
  3208  005A14  D7FD               	goto	l778
  3209  005A16                     __end_of_main:
  3210                           	callstack 0
  3211                           
  3212 ;; *************** function _Factory_init *****************
  3213 ;; Defined at:
  3214 ;;		line 14 in file "class/factory.c"
  3215 ;; Parameters:    Size  Location     Type
  3216 ;;		None
  3217 ;; Auto vars:     Size  Location     Type
  3218 ;;		None
  3219 ;; Return value:  Size  Location     Type
  3220 ;;                  1    wreg      void 
  3221 ;; Registers used:
  3222 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3223 ;; Tracked objects:
  3224 ;;		On entry : 0/0
  3225 ;;		On exit  : 0/0
  3226 ;;		Unchanged: 0/0
  3227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3228 ;;      Params:         0       0       0       0       0       0       0
  3229 ;;      Locals:         0       0       0       0       0       0       0
  3230 ;;      Temps:          0       2       0       0       0       0       0
  3231 ;;      Totals:         0       2       0       0       0       0       0
  3232 ;;Total ram usage:        2 bytes
  3233 ;; Hardware stack levels used: 1
  3234 ;; Hardware stack levels required when called: 16
  3235 ;; This function calls:
  3236 ;;		_GameParameters_init
  3237 ;;		_LCD_DrawText
  3238 ;;		_LCD_Fill
  3239 ;;		_LCD_Init
  3240 ;;		_XF_init
  3241 ;;		_sleepInit
  3242 ;; This function is called by:
  3243 ;;		_main
  3244 ;; This function uses a non-reentrant model
  3245 ;;
  3246                           
  3247                           	psect	text1
  3248  004650                     __ptext1:
  3249                           	callstack 0
  3250  004650                     _Factory_init:
  3251                           	callstack 14
  3252                           
  3253                           ;class/factory.c: 17:     PLLEN = 1;
  3254                           
  3255                           ;incstack = 0
  3256  004650  8C9B               	bsf	3995,6,c	;volatile
  3257                           
  3258                           ;class/factory.c: 18:     OSCCON = 0b01110000;
  3259  004652  0E70               	movlw	112
  3260  004654  6ED3               	movwf	211,c	;volatile
  3261                           
  3262                           ;class/factory.c: 19:     _delay((unsigned long)((100)*(64000000L/4000.0)));
  3263  004656  0E09               	movlw	9
  3264  004658  0100               	movlb	0	; () banked
  3265  00465A  6FF0               	movwf	(??_Factory_init+1)& (0+255),b
  3266  00465C  0E1E               	movlw	30
  3267  00465E  6FEF               	movwf	??_Factory_init& (0+255),b
  3268  004660  0EE4               	movlw	228
  3269  004662                     u6517:
  3270  004662  2EE8               	decfsz	wreg,f,c
  3271  004664  D7FE               	bra	u6517
  3272  004666  2FEF               	decfsz	??_Factory_init& (0+255),f,b
  3273  004668  D7FC               	bra	u6517
  3274  00466A  2FF0               	decfsz	(??_Factory_init+1)& (0+255),f,b
  3275  00466C  D7FA               	bra	u6517
  3276  00466E  F000               	nop	
  3277                           
  3278                           ;class/factory.c: 22:     LCD_Init();
  3279  004670  EC9A  F014         	call	_LCD_Init	;wreg free
  3280                           
  3281                           ;class/factory.c: 23:     LCD_Fill(0b0000000000011111);
  3282  004674  0E00               	movlw	0
  3283  004676  6E13               	movwf	(LCD_Fill@color+1)^0,c
  3284  004678  0E1F               	movlw	31
  3285  00467A  6E12               	movwf	LCD_Fill@color^0,c
  3286  00467C  EC98  F024         	call	_LCD_Fill	;wreg free
  3287                           
  3288                           ;class/factory.c: 24:     LCD_DrawText("MenuStart",&arialNarrow_12ptFontInfo,A_CENTER,50
      +                          ,50,0b0000000000000000,0b1111111111111111);
  3289  004680  0EBD               	movlw	low STR_1
  3290  004682  6E20               	movwf	LCD_DrawText@msg^0,c
  3291  004684  0E7F               	movlw	high STR_1
  3292  004686  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
  3293  004688  0E7B               	movlw	low _arialNarrow_12ptFontInfo
  3294  00468A  6E22               	movwf	LCD_DrawText@font^0,c
  3295  00468C  0E7F               	movlw	high _arialNarrow_12ptFontInfo
  3296  00468E  6E23               	movwf	(LCD_DrawText@font+1)^0,c
  3297  004690  0E02               	movlw	2
  3298  004692  6E24               	movwf	LCD_DrawText@align^0,c
  3299  004694  0E00               	movlw	0
  3300  004696  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
  3301  004698  0E32               	movlw	50
  3302  00469A  6E25               	movwf	LCD_DrawText@posX^0,c
  3303  00469C  0E00               	movlw	0
  3304  00469E  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
  3305  0046A0  0E32               	movlw	50
  3306  0046A2  6E27               	movwf	LCD_DrawText@posY^0,c
  3307  0046A4  0E00               	movlw	0
  3308  0046A6  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
  3309  0046A8  0E00               	movlw	0
  3310  0046AA  6E29               	movwf	LCD_DrawText@color^0,c
  3311  0046AC  0EFF               	movlw	255
  3312  0046AE  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
  3313  0046B0  682B               	setf	LCD_DrawText@bg_color^0,c
  3314  0046B2  EC82  F00F         	call	_LCD_DrawText	;wreg free
  3315                           
  3316                           ;class/factory.c: 27:     GIE=1;
  3317  0046B6  8EF2               	bsf	4082,7,c	;volatile
  3318                           
  3319                           ;class/factory.c: 28:     INT1IE=0;
  3320  0046B8  96F0               	bcf	4080,3,c	;volatile
  3321                           
  3322                           ;class/factory.c: 29:     INTEDG1=0;
  3323  0046BA  9AF1               	bcf	4081,5,c	;volatile
  3324                           
  3325                           ;class/factory.c: 30:     TRISC0=0;
  3326  0046BC  9094               	bcf	3988,0,c	;volatile
  3327                           
  3328                           ;class/factory.c: 31:     LATC0=1;
  3329  0046BE  808B               	bsf	3979,0,c	;volatile
  3330                           
  3331                           ;class/factory.c: 34:     T0CON=0b10000110;
  3332  0046C0  0E86               	movlw	134
  3333  0046C2  6ED5               	movwf	213,c	;volatile
  3334                           
  3335                           ;class/factory.c: 35:     TMR0H=0xFB;
  3336  0046C4  0EFB               	movlw	251
  3337  0046C6  6ED7               	movwf	215,c	;volatile
  3338                           
  3339                           ;class/factory.c: 36:     TMR0L=0x1D;
  3340  0046C8  0E1D               	movlw	29
  3341  0046CA  6ED6               	movwf	214,c	;volatile
  3342                           
  3343                           ;class/factory.c: 37:     TMR0IE=1;
  3344  0046CC  8AF2               	bsf	4082,5,c	;volatile
  3345                           
  3346                           ;class/factory.c: 40:     TRISC1=0;
  3347  0046CE  9294               	bcf	3988,1,c	;volatile
  3348                           
  3349                           ;class/factory.c: 41:     PR2=255;
  3350  0046D0  68BB               	setf	187,c	;volatile
  3351                           
  3352                           ;class/factory.c: 42:     CCP2CONbits.CCP2M = 0xC;
  3353  0046D2  5066               	movf	102,w,c	;volatile
  3354  0046D4  0BF0               	andlw	-16
  3355  0046D6  090C               	iorlw	12
  3356  0046D8  6E66               	movwf	102,c	;volatile
  3357                           
  3358                           ;class/factory.c: 43:     CCPR2L = 255;
  3359  0046DA  6867               	setf	103,c	;volatile
  3360                           
  3361                           ;class/factory.c: 44:     CCP2CONbits.DC2B = 0;
  3362  0046DC  0ECF               	movlw	-49
  3363  0046DE  1666               	andwf	102,f,c	;volatile
  3364                           
  3365                           ;class/factory.c: 45:     TMR2IF=0;
  3366  0046E0  929E               	bcf	3998,1,c	;volatile
  3367                           
  3368                           ;class/factory.c: 46:     T2CONbits.T2CKPS0 = 1;
  3369  0046E2  80BA               	bsf	186,0,c	;volatile
  3370                           
  3371                           ;class/factory.c: 47:     T2CONbits.T2CKPS1 = 0;
  3372  0046E4  92BA               	bcf	186,1,c	;volatile
  3373                           
  3374                           ;class/factory.c: 48:     T2CONbits.TMR2ON = 1;
  3375  0046E6  84BA               	bsf	186,2,c	;volatile
  3376                           
  3377                           ;class/factory.c: 51:     ADCON2=0b10100110;
  3378  0046E8  0EA6               	movlw	166
  3379  0046EA  6EC0               	movwf	192,c	;volatile
  3380                           
  3381                           ;class/factory.c: 54:     XF_init();
  3382  0046EC  ECBA  F028         	call	_XF_init	;wreg free
  3383                           
  3384                           ; BSR set to: 0
  3385                           ;class/factory.c: 55:     GameParameters_init(&g1);
  3386  0046F0  0E00               	movlw	low _g1
  3387  0046F2  6E2B               	movwf	GameParameters_init@s^0,c
  3388  0046F4  0E01               	movlw	high _g1
  3389  0046F6  6E2C               	movwf	(GameParameters_init@s+1)^0,c
  3390  0046F8  EC8B  F00D         	call	_GameParameters_init	;wreg free
  3391                           
  3392                           ;class/factory.c: 56:     sleepInit(&g1);
  3393  0046FC  0E00               	movlw	low _g1
  3394  0046FE  0100               	movlb	0	; () banked
  3395  004700  6FED               	movwf	sleepInit@g& (0+255),b
  3396  004702  0E01               	movlw	high _g1
  3397  004704  6FEE               	movwf	(sleepInit@g+1)& (0+255),b
  3398  004706  EC4F  F02C         	call	_sleepInit	;wreg free
  3399  00470A  0012               	return		;funcret
  3400  00470C                     __end_of_Factory_init:
  3401                           	callstack 0
  3402                           
  3403 ;; *************** function _sleepInit *****************
  3404 ;; Defined at:
  3405 ;;		line 11 in file "stateMachine/sleepSM.c"
  3406 ;; Parameters:    Size  Location     Type
  3407 ;;  g               2   67[BANK0 ] PTR struct GameParameter
  3408 ;;		 -> g1(240), 
  3409 ;; Auto vars:     Size  Location     Type
  3410 ;;		None
  3411 ;; Return value:  Size  Location     Type
  3412 ;;                  1    wreg      void 
  3413 ;; Registers used:
  3414 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3415 ;; Tracked objects:
  3416 ;;		On entry : 3F/0
  3417 ;;		On exit  : 0/0
  3418 ;;		Unchanged: 0/0
  3419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3420 ;;      Params:         0       2       0       0       0       0       0
  3421 ;;      Locals:         0       0       0       0       0       0       0
  3422 ;;      Temps:          0       0       0       0       0       0       0
  3423 ;;      Totals:         0       2       0       0       0       0       0
  3424 ;;Total ram usage:        2 bytes
  3425 ;; Hardware stack levels used: 1
  3426 ;; Hardware stack levels required when called: 15
  3427 ;; This function calls:
  3428 ;;		_displayInit
  3429 ;;		_gameControllerInit
  3430 ;;		_sleepController
  3431 ;;		_touchScreenInit
  3432 ;; This function is called by:
  3433 ;;		_Factory_init
  3434 ;; This function uses a non-reentrant model
  3435 ;;
  3436                           
  3437                           	psect	text2
  3438  00589E                     __ptext2:
  3439                           	callstack 0
  3440  00589E                     _sleepInit:
  3441                           	callstack 14
  3442                           
  3443                           ; BSR set to: 0
  3444                           ;stateMachine/sleepSM.c: 11: void sleepInit(GameParameters* g);stateMachine/sleepSM.c: 1
      +                          2: {;stateMachine/sleepSM.c: 13:     sleepState=WAKEUP;
  3445                           
  3446                           ;incstack = 0
  3447  00589E  0E00               	movlw	0
  3448  0058A0  6F89               	movwf	_sleepState& (0+255),b
  3449                           
  3450                           ; BSR set to: 0
  3451                           ;stateMachine/sleepSM.c: 15:     displayInit(g);
  3452  0058A2  C0ED  F0EB         	movff	sleepInit@g,displayInit@g
  3453  0058A6  C0EE  F0EC         	movff	sleepInit@g+1,displayInit@g+1
  3454  0058AA  ECC2  F02C         	call	_displayInit	;wreg free
  3455                           
  3456                           ;stateMachine/sleepSM.c: 16:     gameControllerInit(g);
  3457  0058AE  C0ED  F03C         	movff	sleepInit@g,gameControllerInit@g
  3458  0058B2  C0EE  F03D         	movff	sleepInit@g+1,gameControllerInit@g+1
  3459  0058B6  ECB7  F02C         	call	_gameControllerInit	;wreg free
  3460                           
  3461                           ;stateMachine/sleepSM.c: 17:     touchScreenInit();
  3462  0058BA  EC99  F02C         	call	_touchScreenInit	;wreg free
  3463                           
  3464                           ;stateMachine/sleepSM.c: 18:     sleepController();
  3465  0058BE  EC24  F02C         	call	_sleepController	;wreg free
  3466  0058C2  0012               	return		;funcret
  3467  0058C4                     __end_of_sleepInit:
  3468                           	callstack 0
  3469                           
  3470 ;; *************** function _touchScreenInit *****************
  3471 ;; Defined at:
  3472 ;;		line 18 in file "stateMachine/touchScreenSM.c"
  3473 ;; Parameters:    Size  Location     Type
  3474 ;;		None
  3475 ;; Auto vars:     Size  Location     Type
  3476 ;;		None
  3477 ;; Return value:  Size  Location     Type
  3478 ;;                  1    wreg      void 
  3479 ;; Registers used:
  3480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3481 ;; Tracked objects:
  3482 ;;		On entry : 0/0
  3483 ;;		On exit  : 0/0
  3484 ;;		Unchanged: 0/0
  3485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3486 ;;      Params:         0       0       0       0       0       0       0
  3487 ;;      Locals:         0       0       0       0       0       0       0
  3488 ;;      Temps:          0       0       0       0       0       0       0
  3489 ;;      Totals:         0       0       0       0       0       0       0
  3490 ;;Total ram usage:        0 bytes
  3491 ;; Hardware stack levels used: 1
  3492 ;; Hardware stack levels required when called: 6
  3493 ;; This function calls:
  3494 ;;		_XF_scheduleTimer
  3495 ;;		_configTouch
  3496 ;; This function is called by:
  3497 ;;		_sleepInit
  3498 ;; This function uses a non-reentrant model
  3499 ;;
  3500                           
  3501                           	psect	text3
  3502  005932                     __ptext3:
  3503                           	callstack 0
  3504  005932                     _touchScreenInit:
  3505                           	callstack 22
  3506                           
  3507                           ;stateMachine/touchScreenSM.c: 20:     touchScreenState=WAITING;
  3508                           
  3509                           ;incstack = 0
  3510  005932  0E00               	movlw	0
  3511  005934  6E4D               	movwf	_touchScreenState^0,c
  3512                           
  3513                           ;stateMachine/touchScreenSM.c: 21:     configTouch();
  3514  005936  EC88  F02C         	call	_configTouch	;wreg free
  3515                           
  3516                           ;stateMachine/touchScreenSM.c: 22:     XF_scheduleTimer(3000,evSleep,0);
  3517  00593A  0E0B               	movlw	11
  3518  00593C  6E14               	movwf	(XF_scheduleTimer@tm+1)^0,c
  3519  00593E  0EB8               	movlw	184
  3520  005940  6E13               	movwf	XF_scheduleTimer@tm^0,c
  3521  005942  0E03               	movlw	3
  3522  005944  6E15               	movwf	XF_scheduleTimer@ev^0,c
  3523  005946  0E00               	movlw	0
  3524  005948  6E16               	movwf	XF_scheduleTimer@inISR^0,c
  3525  00594A  ECED  F029         	call	_XF_scheduleTimer	;wreg free
  3526  00594E  0012               	return		;funcret
  3527  005950                     __end_of_touchScreenInit:
  3528                           	callstack 0
  3529                           
  3530 ;; *************** function _gameControllerInit *****************
  3531 ;; Defined at:
  3532 ;;		line 11 in file "stateMachine/gameController.c"
  3533 ;; Parameters:    Size  Location     Type
  3534 ;;  g               2   59[COMRAM] PTR struct GameParameter
  3535 ;;		 -> g1(240), 
  3536 ;; Auto vars:     Size  Location     Type
  3537 ;;		None
  3538 ;; Return value:  Size  Location     Type
  3539 ;;                  1    wreg      void 
  3540 ;; Registers used:
  3541 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3542 ;; Tracked objects:
  3543 ;;		On entry : 0/0
  3544 ;;		On exit  : 0/0
  3545 ;;		Unchanged: 0/0
  3546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3547 ;;      Params:         2       0       0       0       0       0       0
  3548 ;;      Locals:         0       0       0       0       0       0       0
  3549 ;;      Temps:          0       0       0       0       0       0       0
  3550 ;;      Totals:         2       0       0       0       0       0       0
  3551 ;;Total ram usage:        2 bytes
  3552 ;; Hardware stack levels used: 1
  3553 ;; Hardware stack levels required when called: 9
  3554 ;; This function calls:
  3555 ;;		_gameControllerController
  3556 ;; This function is called by:
  3557 ;;		_sleepInit
  3558 ;; This function uses a non-reentrant model
  3559 ;;
  3560                           
  3561                           	psect	text4
  3562  00596E                     __ptext4:
  3563                           	callstack 0
  3564  00596E                     _gameControllerInit:
  3565                           	callstack 19
  3566                           
  3567                           ;stateMachine/gameController.c: 11: void gameControllerInit(GameParameters* g);stateMach
      +                          ine/gameController.c: 12: {;stateMachine/gameController.c: 13:     gameStateMachine=NOGA
      +                          ME;
  3568                           
  3569                           ;incstack = 0
  3570  00596E  0E00               	movlw	0
  3571  005970  6E4C               	movwf	_gameStateMachine^0,c
  3572                           
  3573                           ;stateMachine/gameController.c: 14:     gameControllerController(g,NULLEVENT);
  3574  005972  C03C  F037         	movff	gameControllerInit@g,gameControllerController@g
  3575  005976  C03D  F038         	movff	gameControllerInit@g+1,gameControllerController@g+1
  3576  00597A  0E00               	movlw	0
  3577  00597C  6E39               	movwf	gameControllerController@ev^0,c
  3578  00597E  EC82  F009         	call	_gameControllerController	;wreg free
  3579  005982  0012               	return		;funcret
  3580  005984                     __end_of_gameControllerInit:
  3581                           	callstack 0
  3582                           
  3583 ;; *************** function _displayInit *****************
  3584 ;; Defined at:
  3585 ;;		line 15 in file "stateMachine/display.c"
  3586 ;; Parameters:    Size  Location     Type
  3587 ;;  g               2   65[BANK0 ] PTR struct GameParameter
  3588 ;;		 -> g1(240), 
  3589 ;; Auto vars:     Size  Location     Type
  3590 ;;		None
  3591 ;; Return value:  Size  Location     Type
  3592 ;;                  1    wreg      void 
  3593 ;; Registers used:
  3594 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3595 ;; Tracked objects:
  3596 ;;		On entry : 3F/0
  3597 ;;		On exit  : 0/0
  3598 ;;		Unchanged: 0/0
  3599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3600 ;;      Params:         0       2       0       0       0       0       0
  3601 ;;      Locals:         0       0       0       0       0       0       0
  3602 ;;      Temps:          0       0       0       0       0       0       0
  3603 ;;      Totals:         0       2       0       0       0       0       0
  3604 ;;Total ram usage:        2 bytes
  3605 ;; Hardware stack levels used: 1
  3606 ;; Hardware stack levels required when called: 14
  3607 ;; This function calls:
  3608 ;;		_displayController
  3609 ;; This function is called by:
  3610 ;;		_sleepInit
  3611 ;; This function uses a non-reentrant model
  3612 ;;
  3613                           
  3614                           	psect	text5
  3615  005984                     __ptext5:
  3616                           	callstack 0
  3617  005984                     _displayInit:
  3618                           	callstack 14
  3619                           
  3620                           ; BSR set to: 0
  3621                           ;stateMachine/display.c: 15: void displayInit(GameParameters* g);stateMachine/display.c:
      +                           16: {;stateMachine/display.c: 18:     displayState=WELCOME;
  3622                           
  3623                           ;incstack = 0
  3624  005984  0E00               	movlw	0
  3625  005986  6F88               	movwf	_displayState& (0+255),b
  3626                           
  3627                           ; BSR set to: 0
  3628                           ;stateMachine/display.c: 19:     displayController(g,NULLEVENT);
  3629  005988  C0EB  F0E6         	movff	displayInit@g,displayController@g
  3630  00598C  C0EC  F0E7         	movff	displayInit@g+1,displayController@g+1
  3631  005990  0E00               	movlw	0
  3632  005992  6FE8               	movwf	displayController@ev& (0+255),b
  3633  005994  EC9F  F020         	call	_displayController	;wreg free
  3634  005998  0012               	return		;funcret
  3635  00599A                     __end_of_displayInit:
  3636                           	callstack 0
  3637                           
  3638 ;; *************** function _XF_init *****************
  3639 ;; Defined at:
  3640 ;;		line 25 in file "xf/xf.c"
  3641 ;; Parameters:    Size  Location     Type
  3642 ;;		None
  3643 ;; Auto vars:     Size  Location     Type
  3644 ;;  i               2   17[COMRAM] int 
  3645 ;; Return value:  Size  Location     Type
  3646 ;;                  1    wreg      void 
  3647 ;; Registers used:
  3648 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3649 ;; Tracked objects:
  3650 ;;		On entry : 0/0
  3651 ;;		On exit  : 3F/0
  3652 ;;		Unchanged: 0/0
  3653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3654 ;;      Params:         0       0       0       0       0       0       0
  3655 ;;      Locals:         2       0       0       0       0       0       0
  3656 ;;      Temps:          0       0       0       0       0       0       0
  3657 ;;      Totals:         2       0       0       0       0       0       0
  3658 ;;Total ram usage:        2 bytes
  3659 ;; Hardware stack levels used: 1
  3660 ;; Hardware stack levels required when called: 4
  3661 ;; This function calls:
  3662 ;;		Nothing
  3663 ;; This function is called by:
  3664 ;;		_Factory_init
  3665 ;; This function uses a non-reentrant model
  3666 ;;
  3667                           
  3668                           	psect	text6
  3669  005174                     __ptext6:
  3670                           	callstack 0
  3671  005174                     _XF_init:
  3672                           	callstack 25
  3673                           
  3674                           ;xf/xf.c: 27:     int i;;xf/xf.c: 28:     for (i=0; i<12; i++)
  3675                           
  3676                           ;incstack = 0
  3677  005174  0E00               	movlw	0
  3678  005176  6E13               	movwf	(XF_init@i+1)^0,c
  3679  005178  0E00               	movlw	0
  3680  00517A  6E12               	movwf	XF_init@i^0,c
  3681  00517C                     l7578:
  3682                           
  3683                           ;xf/xf.c: 29:     {;xf/xf.c: 30:         theXF.eventQueue[i] = NULLEVENT;
  3684  00517C  5012               	movf	XF_init@i^0,w,c
  3685  00517E  0F78               	addlw	low (_theXF+24)
  3686  005180  6ED9               	movwf	fsr2l,c
  3687  005182  6ADA               	clrf	fsr2h,c
  3688  005184  0E00               	movlw	0
  3689  005186  6EDF               	movwf	indf2,c
  3690                           
  3691                           ;xf/xf.c: 31:     }
  3692  005188  4A12               	infsnz	XF_init@i^0,f,c
  3693  00518A  2A13               	incf	(XF_init@i+1)^0,f,c
  3694  00518C  BE13               	btfsc	(XF_init@i+1)^0,7,c
  3695  00518E  D7F6               	goto	l7578
  3696  005190  5013               	movf	(XF_init@i+1)^0,w,c
  3697  005192  E104               	bnz	u5430
  3698  005194  0E0C               	movlw	12
  3699  005196  5C12               	subwf	XF_init@i^0,w,c
  3700  005198  A0D8               	btfss	status,0,c
  3701  00519A  D7F0               	goto	l7578
  3702  00519C                     u5430:
  3703                           
  3704                           ;xf/xf.c: 33:     for (i=0; i<8; i++)
  3705  00519C  0E00               	movlw	0
  3706  00519E  6E13               	movwf	(XF_init@i+1)^0,c
  3707  0051A0  0E00               	movlw	0
  3708  0051A2  6E12               	movwf	XF_init@i^0,c
  3709  0051A4                     l7590:
  3710                           
  3711                           ;xf/xf.c: 34:     {;xf/xf.c: 35:         theXF.timerList[i].tm = 0;
  3712  0051A4  5012               	movf	XF_init@i^0,w,c
  3713  0051A6  0D03               	mullw	3
  3714  0051A8  50F3               	movf	243,w,c
  3715  0051AA  0F60               	addlw	low _theXF
  3716  0051AC  6ED9               	movwf	fsr2l,c
  3717  0051AE  6ADA               	clrf	fsr2h,c
  3718  0051B0  0E00               	movlw	0
  3719  0051B2  6EDE               	movwf	postinc2,c
  3720  0051B4  0E00               	movlw	0
  3721  0051B6  6EDD               	movwf	postdec2,c
  3722                           
  3723                           ;xf/xf.c: 36:         theXF.timerList[i].ev = NULLEVENT;
  3724  0051B8  5012               	movf	XF_init@i^0,w,c
  3725  0051BA  0D03               	mullw	3
  3726  0051BC  50F3               	movf	243,w,c
  3727  0051BE  0F62               	addlw	low (_theXF+2)
  3728  0051C0  6ED9               	movwf	fsr2l,c
  3729  0051C2  6ADA               	clrf	fsr2h,c
  3730  0051C4  0E00               	movlw	0
  3731  0051C6  6EDF               	movwf	indf2,c
  3732                           
  3733                           ;xf/xf.c: 37:     }
  3734  0051C8  4A12               	infsnz	XF_init@i^0,f,c
  3735  0051CA  2A13               	incf	(XF_init@i+1)^0,f,c
  3736  0051CC  BE13               	btfsc	(XF_init@i+1)^0,7,c
  3737  0051CE  D7EA               	goto	l7590
  3738  0051D0  5013               	movf	(XF_init@i+1)^0,w,c
  3739  0051D2  E104               	bnz	u5440
  3740  0051D4  0E08               	movlw	8
  3741  0051D6  5C12               	subwf	XF_init@i^0,w,c
  3742  0051D8  A0D8               	btfss	status,0,c
  3743  0051DA  D7E4               	goto	l7590
  3744  0051DC                     u5440:
  3745                           
  3746                           ;xf/xf.c: 38:     theXF.in = 0;
  3747  0051DC  0E00               	movlw	0
  3748  0051DE  0100               	movlb	0	; () banked
  3749  0051E0  6F84               	movwf	(_theXF+36)& (0+255),b
  3750                           
  3751                           ;xf/xf.c: 39:     theXF.out = 0;
  3752  0051E2  0E00               	movlw	0
  3753  0051E4  6F85               	movwf	(_theXF+37)& (0+255),b
  3754                           
  3755                           ; BSR set to: 0
  3756  0051E6  0012               	return		;funcret
  3757  0051E8                     __end_of_XF_init:
  3758                           	callstack 0
  3759                           
  3760 ;; *************** function _LCD_Init *****************
  3761 ;; Defined at:
  3762 ;;		line 20 in file "libraries/lcd_highlevel.c"
  3763 ;; Parameters:    Size  Location     Type
  3764 ;;		None
  3765 ;; Auto vars:     Size  Location     Type
  3766 ;;  i               1   23[COMRAM] unsigned char 
  3767 ;; Return value:  Size  Location     Type
  3768 ;;                  1    wreg      void 
  3769 ;; Registers used:
  3770 ;;		wreg, status,2, status,0, cstack
  3771 ;; Tracked objects:
  3772 ;;		On entry : 0/0
  3773 ;;		On exit  : 0/0
  3774 ;;		Unchanged: 0/0
  3775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3776 ;;      Params:         0       0       0       0       0       0       0
  3777 ;;      Locals:         1       0       0       0       0       0       0
  3778 ;;      Temps:          1       0       0       0       0       0       0
  3779 ;;      Totals:         2       0       0       0       0       0       0
  3780 ;;Total ram usage:        2 bytes
  3781 ;; Hardware stack levels used: 1
  3782 ;; Hardware stack levels required when called: 5
  3783 ;; This function calls:
  3784 ;;		_LCD_Lowlevel_Init
  3785 ;; This function is called by:
  3786 ;;		_Factory_init
  3787 ;; This function uses a non-reentrant model
  3788 ;;
  3789                           
  3790                           	psect	text7
  3791  002934                     __ptext7:
  3792                           	callstack 0
  3793  002934                     _LCD_Init:
  3794                           	callstack 24
  3795                           
  3796                           ;libraries/lcd_highlevel.c: 22:   uint8_t i;;libraries/lcd_highlevel.c: 86:   LCD_Lowlev
      +                          el_Init();
  3797                           
  3798                           ; BSR set to: 0
  3799                           ;incstack = 0
  3800  002934  EC6F  F027         	call	_LCD_Lowlevel_Init	;wreg free
  3801                           
  3802                           ;libraries/lcd_highlevel.c: 87:   PORTA = 0x11; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 =
      +                           1;;
  3803  002938  0E11               	movlw	17
  3804  00293A  6E80               	movwf	128,c	;volatile
  3805  00293C  988B               	bcf	3979,4,c	;volatile
  3806  00293E  968B               	bcf	3979,3,c	;volatile
  3807  002940  868B               	bsf	3979,3,c	;volatile
  3808  002942  888B               	bsf	3979,4,c	;volatile
  3809                           
  3810                           ;libraries/lcd_highlevel.c: 88:   for(i=0;i<10;i++)
  3811  002944  0E00               	movlw	0
  3812  002946  6E18               	movwf	LCD_Init@i^0,c
  3813  002948                     l4160:
  3814                           
  3815                           ;libraries/lcd_highlevel.c: 89:   {;libraries/lcd_highlevel.c: 90:     _delay((unsigned 
      +                          long)((10)*(64000000L/4000.0)));
  3816  002948  0ED0               	movlw	208
  3817  00294A  6E17               	movwf	??_LCD_Init^0,c
  3818  00294C  0ECA               	movlw	202
  3819  00294E                     u6527:
  3820  00294E  2EE8               	decfsz	wreg,f,c
  3821  002950  D7FE               	bra	u6527
  3822  002952  2E17               	decfsz	??_LCD_Init^0,f,c
  3823  002954  D7FC               	bra	u6527
  3824                           
  3825                           ;libraries/lcd_highlevel.c: 91:   }
  3826  002956  2A18               	incf	LCD_Init@i^0,f,c
  3827  002958  0E09               	movlw	9
  3828  00295A  6418               	cpfsgt	LCD_Init@i^0,c
  3829  00295C  D7F5               	goto	l4160
  3830                           
  3831                           ;libraries/lcd_highlevel.c: 92:   PORTA = 0x36; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 =
      +                           1;;
  3832  00295E  0E36               	movlw	54
  3833  002960  6E80               	movwf	128,c	;volatile
  3834  002962  988B               	bcf	3979,4,c	;volatile
  3835  002964  968B               	bcf	3979,3,c	;volatile
  3836  002966  868B               	bsf	3979,3,c	;volatile
  3837  002968  888B               	bsf	3979,4,c	;volatile
  3838                           
  3839                           ;libraries/lcd_highlevel.c: 93:   PORTA = 0b00000000; LATC3 = 0; LATC3 = 1;;
  3840  00296A  0E00               	movlw	0
  3841  00296C  6E80               	movwf	128,c	;volatile
  3842  00296E  968B               	bcf	3979,3,c	;volatile
  3843  002970  868B               	bsf	3979,3,c	;volatile
  3844                           
  3845                           ;libraries/lcd_highlevel.c: 94:   PORTA = 0x3A; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 =
      +                           1;;
  3846  002972  0E3A               	movlw	58
  3847  002974  6E80               	movwf	128,c	;volatile
  3848  002976  988B               	bcf	3979,4,c	;volatile
  3849  002978  968B               	bcf	3979,3,c	;volatile
  3850  00297A  868B               	bsf	3979,3,c	;volatile
  3851  00297C  888B               	bsf	3979,4,c	;volatile
  3852                           
  3853                           ;libraries/lcd_highlevel.c: 95:   PORTA = 0x55; LATC3 = 0; LATC3 = 1;;
  3854  00297E  0E55               	movlw	85
  3855  002980  6E80               	movwf	128,c	;volatile
  3856  002982  968B               	bcf	3979,3,c	;volatile
  3857  002984  868B               	bsf	3979,3,c	;volatile
  3858                           
  3859                           ;libraries/lcd_highlevel.c: 96:   PORTA = 0xB2; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 =
      +                           1;;
  3860  002986  0EB2               	movlw	178
  3861  002988  6E80               	movwf	128,c	;volatile
  3862  00298A  988B               	bcf	3979,4,c	;volatile
  3863  00298C  968B               	bcf	3979,3,c	;volatile
  3864  00298E  868B               	bsf	3979,3,c	;volatile
  3865  002990  888B               	bsf	3979,4,c	;volatile
  3866                           
  3867                           ;libraries/lcd_highlevel.c: 97:   PORTA = 0x0C; LATC3 = 0; LATC3 = 1;;
  3868  002992  0E0C               	movlw	12
  3869  002994  6E80               	movwf	128,c	;volatile
  3870  002996  968B               	bcf	3979,3,c	;volatile
  3871  002998  868B               	bsf	3979,3,c	;volatile
  3872                           
  3873                           ;libraries/lcd_highlevel.c: 98:   PORTA = 0x0C; LATC3 = 0; LATC3 = 1;;
  3874  00299A  0E0C               	movlw	12
  3875  00299C  6E80               	movwf	128,c	;volatile
  3876  00299E  968B               	bcf	3979,3,c	;volatile
  3877  0029A0  868B               	bsf	3979,3,c	;volatile
  3878                           
  3879                           ;libraries/lcd_highlevel.c: 99:   PORTA = 0x33; LATC3 = 0; LATC3 = 1;;
  3880  0029A2  0E33               	movlw	51
  3881  0029A4  6E80               	movwf	128,c	;volatile
  3882  0029A6  968B               	bcf	3979,3,c	;volatile
  3883  0029A8  868B               	bsf	3979,3,c	;volatile
  3884                           
  3885                           ;libraries/lcd_highlevel.c: 100:   PORTA = 0x33; LATC3 = 0; LATC3 = 1;;
  3886  0029AA  0E33               	movlw	51
  3887  0029AC  6E80               	movwf	128,c	;volatile
  3888  0029AE  968B               	bcf	3979,3,c	;volatile
  3889  0029B0  868B               	bsf	3979,3,c	;volatile
  3890                           
  3891                           ;libraries/lcd_highlevel.c: 101:   PORTA = 0xB7; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  3892  0029B2  0EB7               	movlw	183
  3893  0029B4  6E80               	movwf	128,c	;volatile
  3894  0029B6  988B               	bcf	3979,4,c	;volatile
  3895  0029B8  968B               	bcf	3979,3,c	;volatile
  3896  0029BA  868B               	bsf	3979,3,c	;volatile
  3897  0029BC  888B               	bsf	3979,4,c	;volatile
  3898                           
  3899                           ;libraries/lcd_highlevel.c: 102:   PORTA = 0x35; LATC3 = 0; LATC3 = 1;;
  3900  0029BE  0E35               	movlw	53
  3901  0029C0  6E80               	movwf	128,c	;volatile
  3902  0029C2  968B               	bcf	3979,3,c	;volatile
  3903  0029C4  868B               	bsf	3979,3,c	;volatile
  3904                           
  3905                           ;libraries/lcd_highlevel.c: 103:   PORTA = 0xBB; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  3906  0029C6  0EBB               	movlw	187
  3907  0029C8  6E80               	movwf	128,c	;volatile
  3908  0029CA  988B               	bcf	3979,4,c	;volatile
  3909  0029CC  968B               	bcf	3979,3,c	;volatile
  3910  0029CE  868B               	bsf	3979,3,c	;volatile
  3911  0029D0  888B               	bsf	3979,4,c	;volatile
  3912                           
  3913                           ;libraries/lcd_highlevel.c: 104:   PORTA = 0x2B; LATC3 = 0; LATC3 = 1;;
  3914  0029D2  0E2B               	movlw	43
  3915  0029D4  6E80               	movwf	128,c	;volatile
  3916  0029D6  968B               	bcf	3979,3,c	;volatile
  3917  0029D8  868B               	bsf	3979,3,c	;volatile
  3918                           
  3919                           ;libraries/lcd_highlevel.c: 105:   PORTA = 0xC0; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  3920  0029DA  0EC0               	movlw	192
  3921  0029DC  6E80               	movwf	128,c	;volatile
  3922  0029DE  988B               	bcf	3979,4,c	;volatile
  3923  0029E0  968B               	bcf	3979,3,c	;volatile
  3924  0029E2  868B               	bsf	3979,3,c	;volatile
  3925  0029E4  888B               	bsf	3979,4,c	;volatile
  3926                           
  3927                           ;libraries/lcd_highlevel.c: 106:   PORTA = 0x2C; LATC3 = 0; LATC3 = 1;;
  3928  0029E6  0E2C               	movlw	44
  3929  0029E8  6E80               	movwf	128,c	;volatile
  3930  0029EA  968B               	bcf	3979,3,c	;volatile
  3931  0029EC  868B               	bsf	3979,3,c	;volatile
  3932                           
  3933                           ;libraries/lcd_highlevel.c: 107:   PORTA = 0xC2; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  3934  0029EE  0EC2               	movlw	194
  3935  0029F0  6E80               	movwf	128,c	;volatile
  3936  0029F2  988B               	bcf	3979,4,c	;volatile
  3937  0029F4  968B               	bcf	3979,3,c	;volatile
  3938  0029F6  868B               	bsf	3979,3,c	;volatile
  3939  0029F8  888B               	bsf	3979,4,c	;volatile
  3940                           
  3941                           ;libraries/lcd_highlevel.c: 108:   PORTA = 0x01; LATC3 = 0; LATC3 = 1;;
  3942  0029FA  0E01               	movlw	1
  3943  0029FC  6E80               	movwf	128,c	;volatile
  3944  0029FE  968B               	bcf	3979,3,c	;volatile
  3945  002A00  868B               	bsf	3979,3,c	;volatile
  3946                           
  3947                           ;libraries/lcd_highlevel.c: 109:   PORTA = 0xFF; LATC3 = 0; LATC3 = 1;;
  3948  002A02  6880               	setf	128,c	;volatile
  3949  002A04  968B               	bcf	3979,3,c	;volatile
  3950  002A06  868B               	bsf	3979,3,c	;volatile
  3951                           
  3952                           ;libraries/lcd_highlevel.c: 110:   PORTA = 0XC3; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  3953  002A08  0EC3               	movlw	195
  3954  002A0A  6E80               	movwf	128,c	;volatile
  3955  002A0C  988B               	bcf	3979,4,c	;volatile
  3956  002A0E  968B               	bcf	3979,3,c	;volatile
  3957  002A10  868B               	bsf	3979,3,c	;volatile
  3958  002A12  888B               	bsf	3979,4,c	;volatile
  3959                           
  3960                           ;libraries/lcd_highlevel.c: 111:   PORTA = 0x11; LATC3 = 0; LATC3 = 1;;
  3961  002A14  0E11               	movlw	17
  3962  002A16  6E80               	movwf	128,c	;volatile
  3963  002A18  968B               	bcf	3979,3,c	;volatile
  3964  002A1A  868B               	bsf	3979,3,c	;volatile
  3965                           
  3966                           ;libraries/lcd_highlevel.c: 112:   PORTA = 0xC4; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  3967  002A1C  0EC4               	movlw	196
  3968  002A1E  6E80               	movwf	128,c	;volatile
  3969  002A20  988B               	bcf	3979,4,c	;volatile
  3970  002A22  968B               	bcf	3979,3,c	;volatile
  3971  002A24  868B               	bsf	3979,3,c	;volatile
  3972  002A26  888B               	bsf	3979,4,c	;volatile
  3973                           
  3974                           ;libraries/lcd_highlevel.c: 113:   PORTA = 0x20; LATC3 = 0; LATC3 = 1;;
  3975  002A28  0E20               	movlw	32
  3976  002A2A  6E80               	movwf	128,c	;volatile
  3977  002A2C  968B               	bcf	3979,3,c	;volatile
  3978  002A2E  868B               	bsf	3979,3,c	;volatile
  3979                           
  3980                           ;libraries/lcd_highlevel.c: 114:   PORTA = 0xC6; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  3981  002A30  0EC6               	movlw	198
  3982  002A32  6E80               	movwf	128,c	;volatile
  3983  002A34  988B               	bcf	3979,4,c	;volatile
  3984  002A36  968B               	bcf	3979,3,c	;volatile
  3985  002A38  868B               	bsf	3979,3,c	;volatile
  3986  002A3A  888B               	bsf	3979,4,c	;volatile
  3987                           
  3988                           ;libraries/lcd_highlevel.c: 115:   PORTA = 0x09; LATC3 = 0; LATC3 = 1;;
  3989  002A3C  0E09               	movlw	9
  3990  002A3E  6E80               	movwf	128,c	;volatile
  3991  002A40  968B               	bcf	3979,3,c	;volatile
  3992  002A42  868B               	bsf	3979,3,c	;volatile
  3993                           
  3994                           ;libraries/lcd_highlevel.c: 116:   PORTA = 0xD0; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  3995  002A44  0ED0               	movlw	208
  3996  002A46  6E80               	movwf	128,c	;volatile
  3997  002A48  988B               	bcf	3979,4,c	;volatile
  3998  002A4A  968B               	bcf	3979,3,c	;volatile
  3999  002A4C  868B               	bsf	3979,3,c	;volatile
  4000  002A4E  888B               	bsf	3979,4,c	;volatile
  4001                           
  4002                           ;libraries/lcd_highlevel.c: 117:   PORTA = 0xA4; LATC3 = 0; LATC3 = 1;;
  4003  002A50  0EA4               	movlw	164
  4004  002A52  6E80               	movwf	128,c	;volatile
  4005  002A54  968B               	bcf	3979,3,c	;volatile
  4006  002A56  868B               	bsf	3979,3,c	;volatile
  4007                           
  4008                           ;libraries/lcd_highlevel.c: 118:   PORTA = 0xA1; LATC3 = 0; LATC3 = 1;;
  4009  002A58  0EA1               	movlw	161
  4010  002A5A  6E80               	movwf	128,c	;volatile
  4011  002A5C  968B               	bcf	3979,3,c	;volatile
  4012  002A5E  868B               	bsf	3979,3,c	;volatile
  4013                           
  4014                           ;libraries/lcd_highlevel.c: 119:   PORTA = 0xE0; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  4015  002A60  0EE0               	movlw	224
  4016  002A62  6E80               	movwf	128,c	;volatile
  4017  002A64  988B               	bcf	3979,4,c	;volatile
  4018  002A66  968B               	bcf	3979,3,c	;volatile
  4019  002A68  868B               	bsf	3979,3,c	;volatile
  4020  002A6A  888B               	bsf	3979,4,c	;volatile
  4021                           
  4022                           ;libraries/lcd_highlevel.c: 120:   PORTA = 0xD0; LATC3 = 0; LATC3 = 1;;
  4023  002A6C  0ED0               	movlw	208
  4024  002A6E  6E80               	movwf	128,c	;volatile
  4025  002A70  968B               	bcf	3979,3,c	;volatile
  4026  002A72  868B               	bsf	3979,3,c	;volatile
  4027                           
  4028                           ;libraries/lcd_highlevel.c: 121:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
  4029  002A74  0E00               	movlw	0
  4030  002A76  6E80               	movwf	128,c	;volatile
  4031  002A78  968B               	bcf	3979,3,c	;volatile
  4032  002A7A  868B               	bsf	3979,3,c	;volatile
  4033                           
  4034                           ;libraries/lcd_highlevel.c: 122:   PORTA = 0x05; LATC3 = 0; LATC3 = 1;;
  4035  002A7C  0E05               	movlw	5
  4036  002A7E  6E80               	movwf	128,c	;volatile
  4037  002A80  968B               	bcf	3979,3,c	;volatile
  4038  002A82  868B               	bsf	3979,3,c	;volatile
  4039                           
  4040                           ;libraries/lcd_highlevel.c: 123:   PORTA = 0x0E; LATC3 = 0; LATC3 = 1;;
  4041  002A84  0E0E               	movlw	14
  4042  002A86  6E80               	movwf	128,c	;volatile
  4043  002A88  968B               	bcf	3979,3,c	;volatile
  4044  002A8A  868B               	bsf	3979,3,c	;volatile
  4045                           
  4046                           ;libraries/lcd_highlevel.c: 124:   PORTA = 0x15; LATC3 = 0; LATC3 = 1;;
  4047  002A8C  0E15               	movlw	21
  4048  002A8E  6E80               	movwf	128,c	;volatile
  4049  002A90  968B               	bcf	3979,3,c	;volatile
  4050  002A92  868B               	bsf	3979,3,c	;volatile
  4051                           
  4052                           ;libraries/lcd_highlevel.c: 125:   PORTA = 0x0D; LATC3 = 0; LATC3 = 1;;
  4053  002A94  0E0D               	movlw	13
  4054  002A96  6E80               	movwf	128,c	;volatile
  4055  002A98  968B               	bcf	3979,3,c	;volatile
  4056  002A9A  868B               	bsf	3979,3,c	;volatile
  4057                           
  4058                           ;libraries/lcd_highlevel.c: 126:   PORTA = 0x37; LATC3 = 0; LATC3 = 1;;
  4059  002A9C  0E37               	movlw	55
  4060  002A9E  6E80               	movwf	128,c	;volatile
  4061  002AA0  968B               	bcf	3979,3,c	;volatile
  4062  002AA2  868B               	bsf	3979,3,c	;volatile
  4063                           
  4064                           ;libraries/lcd_highlevel.c: 127:   PORTA = 0x43; LATC3 = 0; LATC3 = 1;;
  4065  002AA4  0E43               	movlw	67
  4066  002AA6  6E80               	movwf	128,c	;volatile
  4067  002AA8  968B               	bcf	3979,3,c	;volatile
  4068  002AAA  868B               	bsf	3979,3,c	;volatile
  4069                           
  4070                           ;libraries/lcd_highlevel.c: 128:   PORTA = 0x47; LATC3 = 0; LATC3 = 1;;
  4071  002AAC  0E47               	movlw	71
  4072  002AAE  6E80               	movwf	128,c	;volatile
  4073  002AB0  968B               	bcf	3979,3,c	;volatile
  4074  002AB2  868B               	bsf	3979,3,c	;volatile
  4075                           
  4076                           ;libraries/lcd_highlevel.c: 129:   PORTA = 0x09; LATC3 = 0; LATC3 = 1;;
  4077  002AB4  0E09               	movlw	9
  4078  002AB6  6E80               	movwf	128,c	;volatile
  4079  002AB8  968B               	bcf	3979,3,c	;volatile
  4080  002ABA  868B               	bsf	3979,3,c	;volatile
  4081                           
  4082                           ;libraries/lcd_highlevel.c: 130:   PORTA = 0x15; LATC3 = 0; LATC3 = 1;;
  4083  002ABC  0E15               	movlw	21
  4084  002ABE  6E80               	movwf	128,c	;volatile
  4085  002AC0  968B               	bcf	3979,3,c	;volatile
  4086  002AC2  868B               	bsf	3979,3,c	;volatile
  4087                           
  4088                           ;libraries/lcd_highlevel.c: 131:   PORTA = 0x12; LATC3 = 0; LATC3 = 1;;
  4089  002AC4  0E12               	movlw	18
  4090  002AC6  6E80               	movwf	128,c	;volatile
  4091  002AC8  968B               	bcf	3979,3,c	;volatile
  4092  002ACA  868B               	bsf	3979,3,c	;volatile
  4093                           
  4094                           ;libraries/lcd_highlevel.c: 132:   PORTA = 0x16; LATC3 = 0; LATC3 = 1;;
  4095  002ACC  0E16               	movlw	22
  4096  002ACE  6E80               	movwf	128,c	;volatile
  4097  002AD0  968B               	bcf	3979,3,c	;volatile
  4098  002AD2  868B               	bsf	3979,3,c	;volatile
  4099                           
  4100                           ;libraries/lcd_highlevel.c: 133:   PORTA = 0x19; LATC3 = 0; LATC3 = 1;;
  4101  002AD4  0E19               	movlw	25
  4102  002AD6  6E80               	movwf	128,c	;volatile
  4103  002AD8  968B               	bcf	3979,3,c	;volatile
  4104  002ADA  868B               	bsf	3979,3,c	;volatile
  4105                           
  4106                           ;libraries/lcd_highlevel.c: 134:   PORTA = 0xE1; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  4107  002ADC  0EE1               	movlw	225
  4108  002ADE  6E80               	movwf	128,c	;volatile
  4109  002AE0  988B               	bcf	3979,4,c	;volatile
  4110  002AE2  968B               	bcf	3979,3,c	;volatile
  4111  002AE4  868B               	bsf	3979,3,c	;volatile
  4112  002AE6  888B               	bsf	3979,4,c	;volatile
  4113                           
  4114                           ;libraries/lcd_highlevel.c: 135:   PORTA = 0xD0; LATC3 = 0; LATC3 = 1;;
  4115  002AE8  0ED0               	movlw	208
  4116  002AEA  6E80               	movwf	128,c	;volatile
  4117  002AEC  968B               	bcf	3979,3,c	;volatile
  4118  002AEE  868B               	bsf	3979,3,c	;volatile
  4119                           
  4120                           ;libraries/lcd_highlevel.c: 136:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
  4121  002AF0  0E00               	movlw	0
  4122  002AF2  6E80               	movwf	128,c	;volatile
  4123  002AF4  968B               	bcf	3979,3,c	;volatile
  4124  002AF6  868B               	bsf	3979,3,c	;volatile
  4125                           
  4126                           ;libraries/lcd_highlevel.c: 137:   PORTA = 0x05; LATC3 = 0; LATC3 = 1;;
  4127  002AF8  0E05               	movlw	5
  4128  002AFA  6E80               	movwf	128,c	;volatile
  4129  002AFC  968B               	bcf	3979,3,c	;volatile
  4130  002AFE  868B               	bsf	3979,3,c	;volatile
  4131                           
  4132                           ;libraries/lcd_highlevel.c: 138:   PORTA = 0x0D; LATC3 = 0; LATC3 = 1;;
  4133  002B00  0E0D               	movlw	13
  4134  002B02  6E80               	movwf	128,c	;volatile
  4135  002B04  968B               	bcf	3979,3,c	;volatile
  4136  002B06  868B               	bsf	3979,3,c	;volatile
  4137                           
  4138                           ;libraries/lcd_highlevel.c: 139:   PORTA = 0x0C; LATC3 = 0; LATC3 = 1;;
  4139  002B08  0E0C               	movlw	12
  4140  002B0A  6E80               	movwf	128,c	;volatile
  4141  002B0C  968B               	bcf	3979,3,c	;volatile
  4142  002B0E  868B               	bsf	3979,3,c	;volatile
  4143                           
  4144                           ;libraries/lcd_highlevel.c: 140:   PORTA = 0x06; LATC3 = 0; LATC3 = 1;;
  4145  002B10  0E06               	movlw	6
  4146  002B12  6E80               	movwf	128,c	;volatile
  4147  002B14  968B               	bcf	3979,3,c	;volatile
  4148  002B16  868B               	bsf	3979,3,c	;volatile
  4149                           
  4150                           ;libraries/lcd_highlevel.c: 141:   PORTA = 0x2D; LATC3 = 0; LATC3 = 1;;
  4151  002B18  0E2D               	movlw	45
  4152  002B1A  6E80               	movwf	128,c	;volatile
  4153  002B1C  968B               	bcf	3979,3,c	;volatile
  4154  002B1E  868B               	bsf	3979,3,c	;volatile
  4155                           
  4156                           ;libraries/lcd_highlevel.c: 142:   PORTA = 0x44; LATC3 = 0; LATC3 = 1;;
  4157  002B20  0E44               	movlw	68
  4158  002B22  6E80               	movwf	128,c	;volatile
  4159  002B24  968B               	bcf	3979,3,c	;volatile
  4160  002B26  868B               	bsf	3979,3,c	;volatile
  4161                           
  4162                           ;libraries/lcd_highlevel.c: 143:   PORTA = 0x40; LATC3 = 0; LATC3 = 1;;
  4163  002B28  0E40               	movlw	64
  4164  002B2A  6E80               	movwf	128,c	;volatile
  4165  002B2C  968B               	bcf	3979,3,c	;volatile
  4166  002B2E  868B               	bsf	3979,3,c	;volatile
  4167                           
  4168                           ;libraries/lcd_highlevel.c: 144:   PORTA = 0x0E; LATC3 = 0; LATC3 = 1;;
  4169  002B30  0E0E               	movlw	14
  4170  002B32  6E80               	movwf	128,c	;volatile
  4171  002B34  968B               	bcf	3979,3,c	;volatile
  4172  002B36  868B               	bsf	3979,3,c	;volatile
  4173                           
  4174                           ;libraries/lcd_highlevel.c: 145:   PORTA = 0x1C; LATC3 = 0; LATC3 = 1;;
  4175  002B38  0E1C               	movlw	28
  4176  002B3A  6E80               	movwf	128,c	;volatile
  4177  002B3C  968B               	bcf	3979,3,c	;volatile
  4178  002B3E  868B               	bsf	3979,3,c	;volatile
  4179                           
  4180                           ;libraries/lcd_highlevel.c: 146:   PORTA = 0x18; LATC3 = 0; LATC3 = 1;;
  4181  002B40  0E18               	movlw	24
  4182  002B42  6E80               	movwf	128,c	;volatile
  4183  002B44  968B               	bcf	3979,3,c	;volatile
  4184  002B46  868B               	bsf	3979,3,c	;volatile
  4185                           
  4186                           ;libraries/lcd_highlevel.c: 147:   PORTA = 0x16; LATC3 = 0; LATC3 = 1;;
  4187  002B48  0E16               	movlw	22
  4188  002B4A  6E80               	movwf	128,c	;volatile
  4189  002B4C  968B               	bcf	3979,3,c	;volatile
  4190  002B4E  868B               	bsf	3979,3,c	;volatile
  4191                           
  4192                           ;libraries/lcd_highlevel.c: 148:   PORTA = 0x19; LATC3 = 0; LATC3 = 1;;
  4193  002B50  0E19               	movlw	25
  4194  002B52  6E80               	movwf	128,c	;volatile
  4195  002B54  968B               	bcf	3979,3,c	;volatile
  4196  002B56  868B               	bsf	3979,3,c	;volatile
  4197                           
  4198                           ;libraries/lcd_highlevel.c: 149:   PORTA = 0x2A; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  4199  002B58  0E2A               	movlw	42
  4200  002B5A  6E80               	movwf	128,c	;volatile
  4201  002B5C  988B               	bcf	3979,4,c	;volatile
  4202  002B5E  968B               	bcf	3979,3,c	;volatile
  4203  002B60  868B               	bsf	3979,3,c	;volatile
  4204  002B62  888B               	bsf	3979,4,c	;volatile
  4205                           
  4206                           ;libraries/lcd_highlevel.c: 150:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
  4207  002B64  0E00               	movlw	0
  4208  002B66  6E80               	movwf	128,c	;volatile
  4209  002B68  968B               	bcf	3979,3,c	;volatile
  4210  002B6A  868B               	bsf	3979,3,c	;volatile
  4211                           
  4212                           ;libraries/lcd_highlevel.c: 151:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
  4213  002B6C  0E00               	movlw	0
  4214  002B6E  6E80               	movwf	128,c	;volatile
  4215  002B70  968B               	bcf	3979,3,c	;volatile
  4216  002B72  868B               	bsf	3979,3,c	;volatile
  4217                           
  4218                           ;libraries/lcd_highlevel.c: 152:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
  4219  002B74  0E00               	movlw	0
  4220  002B76  6E80               	movwf	128,c	;volatile
  4221  002B78  968B               	bcf	3979,3,c	;volatile
  4222  002B7A  868B               	bsf	3979,3,c	;volatile
  4223                           
  4224                           ;libraries/lcd_highlevel.c: 153:   PORTA = 0xEF; LATC3 = 0; LATC3 = 1;;
  4225  002B7C  0EEF               	movlw	239
  4226  002B7E  6E80               	movwf	128,c	;volatile
  4227  002B80  968B               	bcf	3979,3,c	;volatile
  4228  002B82  868B               	bsf	3979,3,c	;volatile
  4229                           
  4230                           ;libraries/lcd_highlevel.c: 154:   PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  4231  002B84  0E2B               	movlw	43
  4232  002B86  6E80               	movwf	128,c	;volatile
  4233  002B88  988B               	bcf	3979,4,c	;volatile
  4234  002B8A  968B               	bcf	3979,3,c	;volatile
  4235  002B8C  868B               	bsf	3979,3,c	;volatile
  4236  002B8E  888B               	bsf	3979,4,c	;volatile
  4237                           
  4238                           ;libraries/lcd_highlevel.c: 155:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
  4239  002B90  0E00               	movlw	0
  4240  002B92  6E80               	movwf	128,c	;volatile
  4241  002B94  968B               	bcf	3979,3,c	;volatile
  4242  002B96  868B               	bsf	3979,3,c	;volatile
  4243                           
  4244                           ;libraries/lcd_highlevel.c: 156:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
  4245  002B98  0E00               	movlw	0
  4246  002B9A  6E80               	movwf	128,c	;volatile
  4247  002B9C  968B               	bcf	3979,3,c	;volatile
  4248  002B9E  868B               	bsf	3979,3,c	;volatile
  4249                           
  4250                           ;libraries/lcd_highlevel.c: 157:   PORTA = 0x01; LATC3 = 0; LATC3 = 1;;
  4251  002BA0  0E01               	movlw	1
  4252  002BA2  6E80               	movwf	128,c	;volatile
  4253  002BA4  968B               	bcf	3979,3,c	;volatile
  4254  002BA6  868B               	bsf	3979,3,c	;volatile
  4255                           
  4256                           ;libraries/lcd_highlevel.c: 158:   PORTA = 0x3F; LATC3 = 0; LATC3 = 1;;
  4257  002BA8  0E3F               	movlw	63
  4258  002BAA  6E80               	movwf	128,c	;volatile
  4259  002BAC  968B               	bcf	3979,3,c	;volatile
  4260  002BAE  868B               	bsf	3979,3,c	;volatile
  4261                           
  4262                           ;libraries/lcd_highlevel.c: 159:   PORTA = 0x26; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  4263  002BB0  0E26               	movlw	38
  4264  002BB2  6E80               	movwf	128,c	;volatile
  4265  002BB4  988B               	bcf	3979,4,c	;volatile
  4266  002BB6  968B               	bcf	3979,3,c	;volatile
  4267  002BB8  868B               	bsf	3979,3,c	;volatile
  4268  002BBA  888B               	bsf	3979,4,c	;volatile
  4269                           
  4270                           ;libraries/lcd_highlevel.c: 160:   PORTA = 0x01; LATC3 = 0; LATC3 = 1;;
  4271  002BBC  0E01               	movlw	1
  4272  002BBE  6E80               	movwf	128,c	;volatile
  4273  002BC0  968B               	bcf	3979,3,c	;volatile
  4274  002BC2  868B               	bsf	3979,3,c	;volatile
  4275                           
  4276                           ;libraries/lcd_highlevel.c: 161:   PORTA = 0x29; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  4277  002BC4  0E29               	movlw	41
  4278  002BC6  6E80               	movwf	128,c	;volatile
  4279  002BC8  988B               	bcf	3979,4,c	;volatile
  4280  002BCA  968B               	bcf	3979,3,c	;volatile
  4281  002BCC  868B               	bsf	3979,3,c	;volatile
  4282  002BCE  888B               	bsf	3979,4,c	;volatile
  4283  002BD0  0012               	return		;funcret
  4284  002BD2                     __end_of_LCD_Init:
  4285                           	callstack 0
  4286                           
  4287 ;; *************** function _LCD_Lowlevel_Init *****************
  4288 ;; Defined at:
  4289 ;;		line 17 in file "libraries/lcd_lowlevel.c"
  4290 ;; Parameters:    Size  Location     Type
  4291 ;;		None
  4292 ;; Auto vars:     Size  Location     Type
  4293 ;;  i               4   18[COMRAM] unsigned long 
  4294 ;; Return value:  Size  Location     Type
  4295 ;;                  1    wreg      void 
  4296 ;; Registers used:
  4297 ;;		wreg, status,2, status,0
  4298 ;; Tracked objects:
  4299 ;;		On entry : 0/0
  4300 ;;		On exit  : 0/0
  4301 ;;		Unchanged: 0/0
  4302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4303 ;;      Params:         0       0       0       0       0       0       0
  4304 ;;      Locals:         4       0       0       0       0       0       0
  4305 ;;      Temps:          1       0       0       0       0       0       0
  4306 ;;      Totals:         5       0       0       0       0       0       0
  4307 ;;Total ram usage:        5 bytes
  4308 ;; Hardware stack levels used: 1
  4309 ;; Hardware stack levels required when called: 4
  4310 ;; This function calls:
  4311 ;;		Nothing
  4312 ;; This function is called by:
  4313 ;;		_LCD_Init
  4314 ;; This function uses a non-reentrant model
  4315 ;;
  4316                           
  4317                           	psect	text8
  4318  004EDE                     __ptext8:
  4319                           	callstack 0
  4320  004EDE                     _LCD_Lowlevel_Init:
  4321                           	callstack 24
  4322                           
  4323                           ;libraries/lcd_lowlevel.c: 19:   uint32_t i;;libraries/lcd_lowlevel.c: 20:   TRISC5 = 0;
  4324                           
  4325                           ;incstack = 0
  4326  004EDE  9A94               	bcf	3988,5,c	;volatile
  4327                           
  4328                           ;libraries/lcd_lowlevel.c: 21:   TRISC2 = 0;
  4329  004EE0  9494               	bcf	3988,2,c	;volatile
  4330                           
  4331                           ;libraries/lcd_lowlevel.c: 22:   TRISC3 = 0;
  4332  004EE2  9694               	bcf	3988,3,c	;volatile
  4333                           
  4334                           ;libraries/lcd_lowlevel.c: 23:   TRISC4 = 0;
  4335  004EE4  9894               	bcf	3988,4,c	;volatile
  4336                           
  4337                           ;libraries/lcd_lowlevel.c: 25:   TRISA = 0x00;
  4338  004EE6  0E00               	movlw	0
  4339  004EE8  6E92               	movwf	146,c	;volatile
  4340                           
  4341                           ;libraries/lcd_lowlevel.c: 28:  LATC5 = 0;
  4342  004EEA  9A8B               	bcf	3979,5,c	;volatile
  4343                           
  4344                           ;libraries/lcd_lowlevel.c: 29:  LATC2 = 1;
  4345  004EEC  848B               	bsf	3979,2,c	;volatile
  4346                           
  4347                           ;libraries/lcd_lowlevel.c: 30:  LATC3 = 1;
  4348  004EEE  868B               	bsf	3979,3,c	;volatile
  4349                           
  4350                           ;libraries/lcd_lowlevel.c: 31:  LATC4 = 1;
  4351  004EF0  888B               	bsf	3979,4,c	;volatile
  4352                           
  4353                           ;libraries/lcd_lowlevel.c: 33:   for(i=0;i<12;i++)
  4354  004EF2  0E00               	movlw	0
  4355  004EF4  6E13               	movwf	LCD_Lowlevel_Init@i^0,c
  4356  004EF6  0E00               	movlw	0
  4357  004EF8  6E14               	movwf	(LCD_Lowlevel_Init@i+1)^0,c
  4358  004EFA  0E00               	movlw	0
  4359  004EFC  6E15               	movwf	(LCD_Lowlevel_Init@i+2)^0,c
  4360  004EFE  0E00               	movlw	0
  4361  004F00  6E16               	movwf	(LCD_Lowlevel_Init@i+3)^0,c
  4362  004F02                     l3998:
  4363                           
  4364                           ;libraries/lcd_lowlevel.c: 34:   {;libraries/lcd_lowlevel.c: 35:     _delay((unsigned lo
      +                          ng)((10)*(64000000L/4000.0)));
  4365  004F02  0ED0               	movlw	208
  4366  004F04  6E12               	movwf	??_LCD_Lowlevel_Init^0,c
  4367  004F06  0ECA               	movlw	202
  4368  004F08                     u6537:
  4369  004F08  2EE8               	decfsz	wreg,f,c
  4370  004F0A  D7FE               	bra	u6537
  4371  004F0C  2E12               	decfsz	??_LCD_Lowlevel_Init^0,f,c
  4372  004F0E  D7FC               	bra	u6537
  4373                           
  4374                           ;libraries/lcd_lowlevel.c: 36:   }
  4375  004F10  0E01               	movlw	1
  4376  004F12  2613               	addwf	LCD_Lowlevel_Init@i^0,f,c
  4377  004F14  0E00               	movlw	0
  4378  004F16  2214               	addwfc	(LCD_Lowlevel_Init@i+1)^0,f,c
  4379  004F18  2215               	addwfc	(LCD_Lowlevel_Init@i+2)^0,f,c
  4380  004F1A  2216               	addwfc	(LCD_Lowlevel_Init@i+3)^0,f,c
  4381  004F1C  5016               	movf	(LCD_Lowlevel_Init@i+3)^0,w,c
  4382  004F1E  1015               	iorwf	(LCD_Lowlevel_Init@i+2)^0,w,c
  4383  004F20  1014               	iorwf	(LCD_Lowlevel_Init@i+1)^0,w,c
  4384  004F22  E104               	bnz	u2400
  4385  004F24  0E0C               	movlw	12
  4386  004F26  5C13               	subwf	LCD_Lowlevel_Init@i^0,w,c
  4387  004F28  A0D8               	btfss	status,0,c
  4388  004F2A  D7EB               	goto	l3998
  4389  004F2C                     u2400:
  4390                           
  4391                           ;libraries/lcd_lowlevel.c: 38:   for(i=0;i<12;i++)
  4392  004F2C  0E00               	movlw	0
  4393  004F2E  6E13               	movwf	LCD_Lowlevel_Init@i^0,c
  4394  004F30  0E00               	movlw	0
  4395  004F32  6E14               	movwf	(LCD_Lowlevel_Init@i+1)^0,c
  4396  004F34  0E00               	movlw	0
  4397  004F36  6E15               	movwf	(LCD_Lowlevel_Init@i+2)^0,c
  4398  004F38  0E00               	movlw	0
  4399  004F3A  6E16               	movwf	(LCD_Lowlevel_Init@i+3)^0,c
  4400  004F3C                     l4010:
  4401                           
  4402                           ;libraries/lcd_lowlevel.c: 39:   {;libraries/lcd_lowlevel.c: 40:     _delay((unsigned lo
      +                          ng)((10)*(64000000L/4000.0)));
  4403  004F3C  0ED0               	movlw	208
  4404  004F3E  6E12               	movwf	??_LCD_Lowlevel_Init^0,c
  4405  004F40  0ECA               	movlw	202
  4406  004F42                     u6547:
  4407  004F42  2EE8               	decfsz	wreg,f,c
  4408  004F44  D7FE               	bra	u6547
  4409  004F46  2E12               	decfsz	??_LCD_Lowlevel_Init^0,f,c
  4410  004F48  D7FC               	bra	u6547
  4411                           
  4412                           ;libraries/lcd_lowlevel.c: 41:   }
  4413  004F4A  0E01               	movlw	1
  4414  004F4C  2613               	addwf	LCD_Lowlevel_Init@i^0,f,c
  4415  004F4E  0E00               	movlw	0
  4416  004F50  2214               	addwfc	(LCD_Lowlevel_Init@i+1)^0,f,c
  4417  004F52  2215               	addwfc	(LCD_Lowlevel_Init@i+2)^0,f,c
  4418  004F54  2216               	addwfc	(LCD_Lowlevel_Init@i+3)^0,f,c
  4419  004F56  5016               	movf	(LCD_Lowlevel_Init@i+3)^0,w,c
  4420  004F58  1015               	iorwf	(LCD_Lowlevel_Init@i+2)^0,w,c
  4421  004F5A  1014               	iorwf	(LCD_Lowlevel_Init@i+1)^0,w,c
  4422  004F5C  E105               	bnz	u2410
  4423  004F5E  0E0C               	movlw	12
  4424  004F60  5C13               	subwf	LCD_Lowlevel_Init@i^0,w,c
  4425  004F62  B0D8               	btfsc	status,0,c
  4426  004F64  0012               	return	
  4427  004F66  D7EA               	goto	l4010
  4428  004F68                     u2410:
  4429  004F68  0012               	return		;funcret
  4430  004F6A                     __end_of_LCD_Lowlevel_Init:
  4431                           	callstack 0
  4432                           
  4433 ;; *************** function _Factory_exec *****************
  4434 ;; Defined at:
  4435 ;;		line 63 in file "class/factory.c"
  4436 ;; Parameters:    Size  Location     Type
  4437 ;;		None
  4438 ;; Auto vars:     Size  Location     Type
  4439 ;;  ev              1   70[BANK0 ] unsigned char 
  4440 ;; Return value:  Size  Location     Type
  4441 ;;                  1    wreg      void 
  4442 ;; Registers used:
  4443 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4444 ;; Tracked objects:
  4445 ;;		On entry : 0/0
  4446 ;;		On exit  : 0/0
  4447 ;;		Unchanged: 0/0
  4448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4449 ;;      Params:         0       0       0       0       0       0       0
  4450 ;;      Locals:         0       1       0       0       0       0       0
  4451 ;;      Temps:          0       0       0       0       0       0       0
  4452 ;;      Totals:         0       1       0       0       0       0       0
  4453 ;;Total ram usage:        1 bytes
  4454 ;; Hardware stack levels used: 1
  4455 ;; Hardware stack levels required when called: 15
  4456 ;; This function calls:
  4457 ;;		_XF_popEvent
  4458 ;;		_displaySM
  4459 ;;		_gameControllerSM
  4460 ;;		_sleepSM
  4461 ;;		_touchScreenSM
  4462 ;; This function is called by:
  4463 ;;		_main
  4464 ;; This function uses a non-reentrant model
  4465 ;;
  4466                           
  4467                           	psect	text9
  4468  00551E                     __ptext9:
  4469                           	callstack 0
  4470  00551E                     _Factory_exec:
  4471                           	callstack 15
  4472                           
  4473                           ;class/factory.c: 66:     Event ev;;class/factory.c: 67:     ev = XF_popEvent(0);
  4474                           
  4475                           ;incstack = 0
  4476  00551E  0E00               	movlw	0
  4477  005520  EC68  F02A         	call	_XF_popEvent
  4478  005524  0100               	movlb	0	; () banked
  4479  005526  6FF0               	movwf	Factory_exec@ev& (0+255),b
  4480                           
  4481                           ; BSR set to: 0
  4482                           ;class/factory.c: 68:     if (ev != NULLEVENT)
  4483  005528  51F0               	movf	Factory_exec@ev& (0+255),w,b
  4484  00552A  B4D8               	btfsc	status,2,c
  4485  00552C  0012               	return	
  4486                           
  4487                           ; BSR set to: 0
  4488                           ;class/factory.c: 69:     {;class/factory.c: 70:         sleepSM(ev);
  4489  00552E  51F0               	movf	Factory_exec@ev& (0+255),w,b
  4490  005530  ECC1  F02B         	call	_sleepSM
  4491                           
  4492                           ;class/factory.c: 71:         touchScreenSM(ev,&g1);
  4493  005534  0E00               	movlw	low _g1
  4494  005536  0100               	movlb	0	; () banked
  4495  005538  6FB6               	movwf	touchScreenSM@g& (0+255),b
  4496  00553A  0E01               	movlw	high _g1
  4497  00553C  6FB7               	movwf	(touchScreenSM@g+1)& (0+255),b
  4498  00553E  51F0               	movf	Factory_exec@ev& (0+255),w,b
  4499  005540  EC95  F029         	call	_touchScreenSM
  4500                           
  4501                           ;class/factory.c: 72:         displaySM(ev,&g1);
  4502  005544  0E00               	movlw	low _g1
  4503  005546  0100               	movlb	0	; () banked
  4504  005548  6FEB               	movwf	displaySM@g& (0+255),b
  4505  00554A  0E01               	movlw	high _g1
  4506  00554C  6FEC               	movwf	(displaySM@g+1)& (0+255),b
  4507  00554E  51F0               	movf	Factory_exec@ev& (0+255),w,b
  4508  005550  ECED  F025         	call	_displaySM
  4509                           
  4510                           ;class/factory.c: 73:         gameControllerSM(ev,&g1);
  4511  005554  0E00               	movlw	low _g1
  4512  005556  6E3C               	movwf	gameControllerSM@g^0,c
  4513  005558  0E01               	movlw	high _g1
  4514  00555A  6E3D               	movwf	(gameControllerSM@g+1)^0,c
  4515  00555C  0100               	movlb	0	; () banked
  4516  00555E  51F0               	movf	Factory_exec@ev& (0+255),w,b
  4517  005560  EC8A  F021         	call	_gameControllerSM
  4518  005564  0012               	return		;funcret
  4519  005566                     __end_of_Factory_exec:
  4520                           	callstack 0
  4521                           
  4522 ;; *************** function _touchScreenSM *****************
  4523 ;; Defined at:
  4524 ;;		line 31 in file "stateMachine/touchScreenSM.c"
  4525 ;; Parameters:    Size  Location     Type
  4526 ;;  ev              1    wreg     unsigned char 
  4527 ;;  g               2   12[BANK0 ] PTR struct GameParameter
  4528 ;;		 -> g1(240), 
  4529 ;; Auto vars:     Size  Location     Type
  4530 ;;  ev              1   68[COMRAM] unsigned char 
  4531 ;; Return value:  Size  Location     Type
  4532 ;;                  1    wreg      void 
  4533 ;; Registers used:
  4534 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4535 ;; Tracked objects:
  4536 ;;		On entry : 3F/0
  4537 ;;		On exit  : 0/0
  4538 ;;		Unchanged: 0/0
  4539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4540 ;;      Params:         0       2       0       0       0       0       0
  4541 ;;      Locals:         1       0       0       0       0       0       0
  4542 ;;      Temps:          0       2       0       0       0       0       0
  4543 ;;      Totals:         1       4       0       0       0       0       0
  4544 ;;Total ram usage:        5 bytes
  4545 ;; Hardware stack levels used: 1
  4546 ;; Hardware stack levels required when called: 7
  4547 ;; This function calls:
  4548 ;;		_touchScreenController
  4549 ;; This function is called by:
  4550 ;;		_Factory_exec
  4551 ;; This function uses a non-reentrant model
  4552 ;;
  4553                           
  4554                           	psect	text10
  4555  00532A                     __ptext10:
  4556                           	callstack 0
  4557  00532A                     _touchScreenSM:
  4558                           	callstack 22
  4559                           
  4560                           ;incstack = 0
  4561                           ;touchScreenSM@ev stored from wreg
  4562  00532A  6E45               	movwf	touchScreenSM@ev^0,c
  4563                           
  4564                           ;stateMachine/touchScreenSM.c: 31: void touchScreenSM(Event ev, GameParameters* g);state
      +                          Machine/touchScreenSM.c: 32: {;stateMachine/touchScreenSM.c: 33:     switch(touchScreenS
      +                          tate)
  4565  00532C  D01D               	goto	l8750
  4566  00532E                     l8732:
  4567                           
  4568                           ; BSR set to: 0
  4569                           ;stateMachine/touchScreenSM.c: 36:             if(ev==evPress)
  4570  00532E  0445               	decf	touchScreenSM@ev^0,w,c
  4571  005330  A4D8               	btfss	status,2,c
  4572  005332  0012               	return	
  4573                           
  4574                           ; BSR set to: 0
  4575                           ;stateMachine/touchScreenSM.c: 37:             {;stateMachine/touchScreenSM.c: 38:      
      +                                     touchScreenState=CALCULATEPOSITION;
  4576  005334  0E01               	movlw	1
  4577  005336  6E4D               	movwf	_touchScreenState^0,c
  4578  005338                     l8736:
  4579                           
  4580                           ;stateMachine/touchScreenSM.c: 39:                 touchScreenController(g);
  4581  005338  C0B6  F043         	movff	touchScreenSM@g,touchScreenController@g
  4582  00533C  C0B7  F044         	movff	touchScreenSM@g+1,touchScreenController@g+1
  4583  005340  EC4C  F019         	call	_touchScreenController	;wreg free
  4584  005344  0012               	return	
  4585  005346                     l8738:
  4586                           
  4587                           ; BSR set to: 0
  4588                           ;stateMachine/touchScreenSM.c: 44:             if(ev==evRelease)
  4589  005346  0E02               	movlw	2
  4590  005348  1845               	xorwf	touchScreenSM@ev^0,w,c
  4591  00534A  A4D8               	btfss	status,2,c
  4592  00534C  D008               	goto	l8744
  4593                           
  4594                           ; BSR set to: 0
  4595                           ;stateMachine/touchScreenSM.c: 45:             {;stateMachine/touchScreenSM.c: 46:      
      +                                     touchScreenState=WAITING;
  4596  00534E  0E00               	movlw	0
  4597  005350  6E4D               	movwf	_touchScreenState^0,c
  4598                           
  4599                           ; BSR set to: 0
  4600                           ;stateMachine/touchScreenSM.c: 47:                 touchScreenController(g);
  4601  005352  C0B6  F043         	movff	touchScreenSM@g,touchScreenController@g
  4602  005356  C0B7  F044         	movff	touchScreenSM@g+1,touchScreenController@g+1
  4603  00535A  EC4C  F019         	call	_touchScreenController	;wreg free
  4604  00535E                     l8744:
  4605                           
  4606                           ;stateMachine/touchScreenSM.c: 49:             if(ev==evTimerPos)
  4607  00535E  0E04               	movlw	4
  4608  005360  1845               	xorwf	touchScreenSM@ev^0,w,c
  4609  005362  A4D8               	btfss	status,2,c
  4610  005364  0012               	return	
  4611  005366  D7E8               	goto	l8736
  4612  005368                     l8750:
  4613  005368  504D               	movf	_touchScreenState^0,w,c
  4614  00536A  0100               	movlb	0	; () banked
  4615  00536C  6FB8               	movwf	??_touchScreenSM& (0+255),b
  4616  00536E  6BB9               	clrf	(??_touchScreenSM+1)& (0+255),b
  4617                           
  4618                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4619                           ; Switch size 1, requested type "simple"
  4620                           ; Number of cases is 1, Range of values is 0 to 0
  4621                           ; switch strategies available:
  4622                           ; Name         Instructions Cycles
  4623                           ; simple_byte            4     3 (average)
  4624                           ;	Chosen strategy is simple_byte
  4625  005370  51B9               	movf	(??_touchScreenSM+1)& (0+255),w,b
  4626  005372  0A00               	xorlw	0	; case 0
  4627  005374  A4D8               	btfss	status,2,c
  4628  005376  0012               	return	
  4629                           
  4630                           ; BSR set to: 0
  4631                           ; Switch size 1, requested type "simple"
  4632                           ; Number of cases is 2, Range of values is 0 to 1
  4633                           ; switch strategies available:
  4634                           ; Name         Instructions Cycles
  4635                           ; simple_byte            7     4 (average)
  4636                           ;	Chosen strategy is simple_byte
  4637  005378  51B8               	movf	??_touchScreenSM& (0+255),w,b
  4638  00537A  0A00               	xorlw	0	; case 0
  4639  00537C  B4D8               	btfsc	status,2,c
  4640  00537E  D7D7               	goto	l8732
  4641  005380  0A01               	xorlw	1	; case 1
  4642  005382  A4D8               	btfss	status,2,c
  4643  005384  0012               	return	
  4644  005386  D7DF               	goto	l8738
  4645  005388                     __end_of_touchScreenSM:
  4646                           	callstack 0
  4647                           
  4648 ;; *************** function _touchScreenController *****************
  4649 ;; Defined at:
  4650 ;;		line 67 in file "stateMachine/touchScreenSM.c"
  4651 ;; Parameters:    Size  Location     Type
  4652 ;;  g               2   66[COMRAM] PTR struct GameParameter
  4653 ;;		 -> g1(240), 
  4654 ;; Auto vars:     Size  Location     Type
  4655 ;;  i               2    8[BANK0 ] int 
  4656 ;;  valueX          2   10[BANK0 ] unsigned short 
  4657 ;;  valueY          2    6[BANK0 ] unsigned short 
  4658 ;; Return value:  Size  Location     Type
  4659 ;;                  1    wreg      void 
  4660 ;; Registers used:
  4661 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4662 ;; Tracked objects:
  4663 ;;		On entry : 0/0
  4664 ;;		On exit  : 0/0
  4665 ;;		Unchanged: 0/0
  4666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4667 ;;      Params:         2       0       0       0       0       0       0
  4668 ;;      Locals:         0       6       0       0       0       0       0
  4669 ;;      Temps:          0       6       0       0       0       0       0
  4670 ;;      Totals:         2      12       0       0       0       0       0
  4671 ;;Total ram usage:       14 bytes
  4672 ;; Hardware stack levels used: 1
  4673 ;; Hardware stack levels required when called: 6
  4674 ;; This function calls:
  4675 ;;		_GameParameters_setX
  4676 ;;		_GameParameters_setY
  4677 ;;		_XF_scheduleTimer
  4678 ;;		_XF_unscheduleTimer
  4679 ;;		___fldiv
  4680 ;;		___fltol
  4681 ;;		___xxtofl
  4682 ;;		_configMeasure
  4683 ;;		_configTouch
  4684 ;; This function is called by:
  4685 ;;		_touchScreenSM
  4686 ;; This function uses a non-reentrant model
  4687 ;;
  4688                           
  4689                           	psect	text11
  4690  003298                     __ptext11:
  4691                           	callstack 0
  4692  003298                     _touchScreenController:
  4693                           	callstack 22
  4694                           
  4695                           ;stateMachine/touchScreenSM.c: 67: void touchScreenController(GameParameters* g);stateMa
      +                          chine/touchScreenSM.c: 68: {;stateMachine/touchScreenSM.c: 69:     switch(touchScreenSta
      +                          te)
  4696                           
  4697                           ;incstack = 0
  4698  003298  D0D5               	goto	l7520
  4699  00329A                     l532:
  4700                           
  4701                           ; BSR set to: 0
  4702                           ;stateMachine/touchScreenSM.c: 73:             INTEDG1=0;
  4703  00329A  9AF1               	bcf	4081,5,c	;volatile
  4704                           
  4705                           ; BSR set to: 0
  4706                           ;stateMachine/touchScreenSM.c: 74:             XF_scheduleTimer(3000,evSleep,0);
  4707  00329C  0E0B               	movlw	11
  4708  00329E  6E14               	movwf	(XF_scheduleTimer@tm+1)^0,c
  4709  0032A0  0EB8               	movlw	184
  4710  0032A2  6E13               	movwf	XF_scheduleTimer@tm^0,c
  4711  0032A4  0E03               	movlw	3
  4712  0032A6  6E15               	movwf	XF_scheduleTimer@ev^0,c
  4713  0032A8  0E00               	movlw	0
  4714  0032AA  6E16               	movwf	XF_scheduleTimer@inISR^0,c
  4715  0032AC  ECED  F029         	call	_XF_scheduleTimer	;wreg free
  4716                           
  4717                           ;stateMachine/touchScreenSM.c: 75:             configTouch();
  4718  0032B0  EC88  F02C         	call	_configTouch	;wreg free
  4719                           
  4720                           ;stateMachine/touchScreenSM.c: 77:             break;
  4721  0032B4  0012               	return	
  4722  0032B6                     l7476:
  4723                           
  4724                           ; BSR set to: 0
  4725                           ;stateMachine/touchScreenSM.c: 80:             for (int i=0; i<8; i++)
  4726  0032B6  0E00               	movlw	0
  4727  0032B8  6FB3               	movwf	(touchScreenController@i+1)& (0+255),b
  4728  0032BA  0E00               	movlw	0
  4729  0032BC  6FB2               	movwf	touchScreenController@i& (0+255),b
  4730  0032BE                     l7482:
  4731                           
  4732                           ; BSR set to: 0
  4733                           ;stateMachine/touchScreenSM.c: 81:             {;stateMachine/touchScreenSM.c: 82:      
      +                                     if (theXF.timerList[i].ev == evSleep)
  4734  0032BE  51B2               	movf	touchScreenController@i& (0+255),w,b
  4735  0032C0  0D03               	mullw	3
  4736  0032C2  50F3               	movf	243,w,c
  4737  0032C4  0F62               	addlw	low (_theXF+2)
  4738  0032C6  6ED9               	movwf	fsr2l,c
  4739  0032C8  6ADA               	clrf	fsr2h,c
  4740  0032CA  0E03               	movlw	3
  4741  0032CC  18DE               	xorwf	postinc2,w,c
  4742  0032CE  A4D8               	btfss	status,2,c
  4743  0032D0  D005               	goto	l7486
  4744                           
  4745                           ; BSR set to: 0
  4746                           ;stateMachine/touchScreenSM.c: 83:                 {;stateMachine/touchScreenSM.c: 84:  
      +                                             XF_unscheduleTimer(i, 0);
  4747  0032D2  0E00               	movlw	0
  4748  0032D4  6E13               	movwf	XF_unscheduleTimer@inISR^0,c
  4749  0032D6  51B2               	movf	touchScreenController@i& (0+255),w,b
  4750  0032D8  EC74  F02B         	call	_XF_unscheduleTimer
  4751  0032DC                     l7486:
  4752                           
  4753                           ;stateMachine/touchScreenSM.c: 86:             }
  4754  0032DC  0100               	movlb	0	; () banked
  4755  0032DE  4BB2               	infsnz	touchScreenController@i& (0+255),f,b
  4756  0032E0  2BB3               	incf	(touchScreenController@i+1)& (0+255),f,b
  4757                           
  4758                           ; BSR set to: 0
  4759  0032E2  BFB3               	btfsc	(touchScreenController@i+1)& (0+255),7,b
  4760  0032E4  D7EC               	goto	l7482
  4761  0032E6  51B3               	movf	(touchScreenController@i+1)& (0+255),w,b
  4762  0032E8  E104               	bnz	u5290
  4763  0032EA  0E08               	movlw	8
  4764  0032EC  5DB2               	subwf	touchScreenController@i& (0+255),w,b
  4765  0032EE  A0D8               	btfss	status,0,c
  4766  0032F0  D7E6               	goto	l7482
  4767  0032F2                     u5290:
  4768                           
  4769                           ; BSR set to: 0
  4770                           ;stateMachine/touchScreenSM.c: 90:             INT1IE=0;
  4771  0032F2  96F0               	bcf	4080,3,c	;volatile
  4772                           
  4773                           ; BSR set to: 0
  4774                           ;stateMachine/touchScreenSM.c: 91:             configMeasure(0);
  4775  0032F4  0E00               	movlw	0
  4776  0032F6  EC3A  F02B         	call	_configMeasure
  4777  0032FA                     l538:
  4778  0032FA  B2C2               	btfsc	194,1,c	;volatile
  4779  0032FC  D7FE               	goto	l538
  4780                           
  4781                           ;stateMachine/touchScreenSM.c: 93:             uint16_t valueX;;stateMachine/touchScreen
      +                          SM.c: 94:             valueX=(ADRESH<<8)+ADRESL;
  4782  0032FE  50C4               	movf	196,w,c	;volatile
  4783  003300  0100               	movlb	0	; () banked
  4784  003302  6FAB               	movwf	(??_touchScreenController+1)& (0+255),b
  4785  003304  6BAA               	clrf	??_touchScreenController& (0+255),b
  4786  003306  50C3               	movf	195,w,c	;volatile
  4787  003308  25AA               	addwf	??_touchScreenController& (0+255),w,b
  4788  00330A  6FB4               	movwf	touchScreenController@valueX& (0+255),b
  4789  00330C  0E00               	movlw	0
  4790  00330E  21AB               	addwfc	(??_touchScreenController+1)& (0+255),w,b
  4791  003310  6FB5               	movwf	(touchScreenController@valueX+1)& (0+255),b
  4792                           
  4793                           ;stateMachine/touchScreenSM.c: 95:             if(valueX<=120)
  4794  003312  51B5               	movf	(touchScreenController@valueX+1)& (0+255),w,b
  4795  003314  E108               	bnz	l7496
  4796  003316  0E79               	movlw	121
  4797  003318  5DB4               	subwf	touchScreenController@valueX& (0+255),w,b
  4798  00331A  B0D8               	btfsc	status,0,c
  4799  00331C  D004               	goto	l7496
  4800                           
  4801                           ; BSR set to: 0
  4802                           ;stateMachine/touchScreenSM.c: 96:             {;stateMachine/touchScreenSM.c: 97:      
      +                                     valueX=120;
  4803  00331E  0E00               	movlw	0
  4804  003320  6FB5               	movwf	(touchScreenController@valueX+1)& (0+255),b
  4805  003322  0E78               	movlw	120
  4806  003324  6FB4               	movwf	touchScreenController@valueX& (0+255),b
  4807  003326                     l7496:
  4808                           
  4809                           ; BSR set to: 0
  4810                           ;stateMachine/touchScreenSM.c: 99:             valueX=(valueX-120)/2.35;
  4811  003326  0E66               	movlw	102
  4812  003328  6E24               	movwf	___fldiv@a^0,c
  4813  00332A  0E66               	movlw	102
  4814  00332C  6E25               	movwf	(___fldiv@a+1)^0,c
  4815  00332E  0E16               	movlw	22
  4816  003330  6E26               	movwf	(___fldiv@a+2)^0,c
  4817  003332  0E40               	movlw	64
  4818  003334  6E27               	movwf	(___fldiv@a+3)^0,c
  4819  003336  0E88               	movlw	136
  4820  003338  6FAA               	movwf	??_touchScreenController& (0+255),b
  4821  00333A  0EFF               	movlw	255
  4822  00333C  6FAB               	movwf	(??_touchScreenController+1)& (0+255),b
  4823  00333E  C0B4  F0AC         	movff	touchScreenController@valueX,??_touchScreenController+2
  4824  003342  C0B5  F0AD         	movff	touchScreenController@valueX+1,??_touchScreenController+3
  4825  003346  51AA               	movf	??_touchScreenController& (0+255),w,b
  4826  003348  27AC               	addwf	(??_touchScreenController+2)& (0+255),f,b
  4827  00334A  51AB               	movf	(??_touchScreenController+1)& (0+255),w,b
  4828  00334C  23AD               	addwfc	(??_touchScreenController+3)& (0+255),f,b
  4829  00334E  C0AC  F012         	movff	??_touchScreenController+2,___xxtofl@val
  4830  003352  C0AD  F013         	movff	??_touchScreenController+3,___xxtofl@val+1
  4831  003356  6A14               	clrf	(___xxtofl@val+2)^0,c
  4832  003358  6A15               	clrf	(___xxtofl@val+3)^0,c
  4833  00335A  0E00               	movlw	0
  4834  00335C  EC29  F01C         	call	___xxtofl
  4835  003360  C012  F020         	movff	?___xxtofl,___fldiv@b
  4836  003364  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  4837  003368  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  4838  00336C  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  4839  003370  ECE9  F015         	call	___fldiv	;wreg free
  4840  003374  C020  F039         	movff	?___fldiv,___fltol@f1
  4841  003378  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  4842  00337C  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  4843  003380  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  4844  003384  EC86  F023         	call	___fltol	;wreg free
  4845  003388  C039  F0B4         	movff	?___fltol,touchScreenController@valueX
  4846  00338C  C03A  F0B5         	movff	?___fltol+1,touchScreenController@valueX+1
  4847                           
  4848                           ;stateMachine/touchScreenSM.c: 100:             valueX=240 -valueX;
  4849  003390  0100               	movlb	0	; () banked
  4850  003392  51B4               	movf	touchScreenController@valueX& (0+255),w,b
  4851  003394  08F0               	sublw	240
  4852  003396  6FB4               	movwf	touchScreenController@valueX& (0+255),b
  4853  003398  51B5               	movf	(touchScreenController@valueX+1)& (0+255),w,b
  4854  00339A  A0D8               	btfss	status,0,c
  4855  00339C  2AE8               	incf	wreg,f,c
  4856  00339E  0800               	sublw	0
  4857  0033A0  6FB5               	movwf	(touchScreenController@valueX+1)& (0+255),b
  4858                           
  4859                           ; BSR set to: 0
  4860                           ;stateMachine/touchScreenSM.c: 102:             configMeasure(1);
  4861  0033A2  0E01               	movlw	1
  4862  0033A4  EC3A  F02B         	call	_configMeasure
  4863  0033A8                     l542:
  4864  0033A8  B2C2               	btfsc	194,1,c	;volatile
  4865  0033AA  D7FE               	goto	l542
  4866                           
  4867                           ;stateMachine/touchScreenSM.c: 104:             uint16_t valueY;;stateMachine/touchScree
      +                          nSM.c: 105:             valueY=(ADRESH<<8)+ADRESL;
  4868  0033AC  50C4               	movf	196,w,c	;volatile
  4869  0033AE  0100               	movlb	0	; () banked
  4870  0033B0  6FAB               	movwf	(??_touchScreenController+1)& (0+255),b
  4871  0033B2  6BAA               	clrf	??_touchScreenController& (0+255),b
  4872  0033B4  50C3               	movf	195,w,c	;volatile
  4873  0033B6  25AA               	addwf	??_touchScreenController& (0+255),w,b
  4874  0033B8  6FB0               	movwf	touchScreenController@valueY& (0+255),b
  4875  0033BA  0E00               	movlw	0
  4876  0033BC  21AB               	addwfc	(??_touchScreenController+1)& (0+255),w,b
  4877  0033BE  6FB1               	movwf	(touchScreenController@valueY+1)& (0+255),b
  4878                           
  4879                           ;stateMachine/touchScreenSM.c: 106:             if(valueY<=105)
  4880  0033C0  51B1               	movf	(touchScreenController@valueY+1)& (0+255),w,b
  4881  0033C2  E108               	bnz	l7506
  4882  0033C4  0E6A               	movlw	106
  4883  0033C6  5DB0               	subwf	touchScreenController@valueY& (0+255),w,b
  4884  0033C8  B0D8               	btfsc	status,0,c
  4885  0033CA  D004               	goto	l7506
  4886                           
  4887                           ; BSR set to: 0
  4888                           ;stateMachine/touchScreenSM.c: 107:             {;stateMachine/touchScreenSM.c: 108:    
      +                                       valueY=105;
  4889  0033CC  0E00               	movlw	0
  4890  0033CE  6FB1               	movwf	(touchScreenController@valueY+1)& (0+255),b
  4891  0033D0  0E69               	movlw	105
  4892  0033D2  6FB0               	movwf	touchScreenController@valueY& (0+255),b
  4893  0033D4                     l7506:
  4894                           
  4895                           ; BSR set to: 0
  4896                           ;stateMachine/touchScreenSM.c: 110:             valueY=(valueY-105)/2;
  4897  0033D4  0E97               	movlw	151
  4898  0033D6  6FAA               	movwf	??_touchScreenController& (0+255),b
  4899  0033D8  0EFF               	movlw	255
  4900  0033DA  6FAB               	movwf	(??_touchScreenController+1)& (0+255),b
  4901  0033DC  C0B0  F0AC         	movff	touchScreenController@valueY,??_touchScreenController+2
  4902  0033E0  C0B1  F0AD         	movff	touchScreenController@valueY+1,??_touchScreenController+3
  4903  0033E4  51AA               	movf	??_touchScreenController& (0+255),w,b
  4904  0033E6  27AC               	addwf	(??_touchScreenController+2)& (0+255),f,b
  4905  0033E8  51AB               	movf	(??_touchScreenController+1)& (0+255),w,b
  4906  0033EA  23AD               	addwfc	(??_touchScreenController+3)& (0+255),f,b
  4907  0033EC  90D8               	bcf	status,0,c
  4908  0033EE  31AD               	rrcf	(??_touchScreenController+3)& (0+255),w,b
  4909  0033F0  6FAE               	movwf	(??_touchScreenController+4)& (0+255),b
  4910  0033F2  31AC               	rrcf	(??_touchScreenController+2)& (0+255),w,b
  4911  0033F4  6FB0               	movwf	touchScreenController@valueY& (0+255),b
  4912  0033F6  C0AE  F0B1         	movff	??_touchScreenController+4,touchScreenController@valueY+1
  4913                           
  4914                           ; BSR set to: 0
  4915                           ;stateMachine/touchScreenSM.c: 111:             XF_scheduleTimer(9,evTimerPos,0);
  4916  0033FA  0E00               	movlw	0
  4917  0033FC  6E14               	movwf	(XF_scheduleTimer@tm+1)^0,c
  4918  0033FE  0E09               	movlw	9
  4919  003400  6E13               	movwf	XF_scheduleTimer@tm^0,c
  4920  003402  0E04               	movlw	4
  4921  003404  6E15               	movwf	XF_scheduleTimer@ev^0,c
  4922  003406  0E00               	movlw	0
  4923  003408  6E16               	movwf	XF_scheduleTimer@inISR^0,c
  4924  00340A  ECED  F029         	call	_XF_scheduleTimer	;wreg free
  4925                           
  4926                           ;stateMachine/touchScreenSM.c: 113:             ADCON0=0b00101000;
  4927  00340E  0E28               	movlw	40
  4928  003410  6EC2               	movwf	194,c	;volatile
  4929                           
  4930                           ;stateMachine/touchScreenSM.c: 114:             configTouch();
  4931  003412  EC88  F02C         	call	_configTouch	;wreg free
  4932                           
  4933                           ;stateMachine/touchScreenSM.c: 116:             if(PORTBbits.RB1 == 0)
  4934  003416  B281               	btfsc	129,1,c	;volatile
  4935  003418  0012               	return	
  4936                           
  4937                           ;stateMachine/touchScreenSM.c: 117:             {;stateMachine/touchScreenSM.c: 118:    
      +                                       GameParameters_setX(g,valueX);
  4938  00341A  C043  F012         	movff	touchScreenController@g,GameParameters_setX@s
  4939  00341E  C044  F013         	movff	touchScreenController@g+1,GameParameters_setX@s+1
  4940  003422  C0B4  F014         	movff	touchScreenController@valueX,GameParameters_setX@value
  4941  003426  C0B5  F015         	movff	touchScreenController@valueX+1,GameParameters_setX@value+1
  4942  00342A  ECD8  F02C         	call	_GameParameters_setX	;wreg free
  4943                           
  4944                           ;stateMachine/touchScreenSM.c: 119:                 GameParameters_setY(g,valueY);
  4945  00342E  C043  F012         	movff	touchScreenController@g,GameParameters_setY@s
  4946  003432  C044  F013         	movff	touchScreenController@g+1,GameParameters_setY@s+1
  4947  003436  C0B0  F014         	movff	touchScreenController@valueY,GameParameters_setY@value
  4948  00343A  C0B1  F015         	movff	touchScreenController@valueY+1,GameParameters_setY@value+1
  4949  00343E  ECCD  F02C         	call	_GameParameters_setY	;wreg free
  4950  003442  0012               	return	
  4951  003444                     l7520:
  4952  003444  504D               	movf	_touchScreenState^0,w,c
  4953  003446  0100               	movlb	0	; () banked
  4954  003448  6FAA               	movwf	??_touchScreenController& (0+255),b
  4955  00344A  6BAB               	clrf	(??_touchScreenController+1)& (0+255),b
  4956                           
  4957                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4958                           ; Switch size 1, requested type "simple"
  4959                           ; Number of cases is 1, Range of values is 0 to 0
  4960                           ; switch strategies available:
  4961                           ; Name         Instructions Cycles
  4962                           ; simple_byte            4     3 (average)
  4963                           ;	Chosen strategy is simple_byte
  4964  00344C  51AB               	movf	(??_touchScreenController+1)& (0+255),w,b
  4965  00344E  0A00               	xorlw	0	; case 0
  4966  003450  A4D8               	btfss	status,2,c
  4967  003452  0012               	return	
  4968                           
  4969                           ; BSR set to: 0
  4970                           ; Switch size 1, requested type "simple"
  4971                           ; Number of cases is 2, Range of values is 0 to 1
  4972                           ; switch strategies available:
  4973                           ; Name         Instructions Cycles
  4974                           ; simple_byte            7     4 (average)
  4975                           ;	Chosen strategy is simple_byte
  4976  003454  51AA               	movf	??_touchScreenController& (0+255),w,b
  4977  003456  0A00               	xorlw	0	; case 0
  4978  003458  B4D8               	btfsc	status,2,c
  4979  00345A  D71F               	goto	l532
  4980  00345C  0A01               	xorlw	1	; case 1
  4981  00345E  A4D8               	btfss	status,2,c
  4982  003460  0012               	return	
  4983  003462  D729               	goto	l7476
  4984  003464                     __end_of_touchScreenController:
  4985                           	callstack 0
  4986                           
  4987 ;; *************** function _configMeasure *****************
  4988 ;; Defined at:
  4989 ;;		line 153 in file "stateMachine/touchScreenSM.c"
  4990 ;; Parameters:    Size  Location     Type
  4991 ;;  channel         1    wreg     _Bool 
  4992 ;; Auto vars:     Size  Location     Type
  4993 ;;  channel         1   17[COMRAM] _Bool 
  4994 ;; Return value:  Size  Location     Type
  4995 ;;                  1    wreg      void 
  4996 ;; Registers used:
  4997 ;;		wreg, status,2, status,0
  4998 ;; Tracked objects:
  4999 ;;		On entry : 3F/0
  5000 ;;		On exit  : 0/0
  5001 ;;		Unchanged: 0/0
  5002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5003 ;;      Params:         0       0       0       0       0       0       0
  5004 ;;      Locals:         1       0       0       0       0       0       0
  5005 ;;      Temps:          0       0       0       0       0       0       0
  5006 ;;      Totals:         1       0       0       0       0       0       0
  5007 ;;Total ram usage:        1 bytes
  5008 ;; Hardware stack levels used: 1
  5009 ;; Hardware stack levels required when called: 4
  5010 ;; This function calls:
  5011 ;;		Nothing
  5012 ;; This function is called by:
  5013 ;;		_touchScreenController
  5014 ;; This function uses a non-reentrant model
  5015 ;;
  5016                           
  5017                           	psect	text12
  5018  005674                     __ptext12:
  5019                           	callstack 0
  5020  005674                     _configMeasure:
  5021                           	callstack 23
  5022                           
  5023                           ;incstack = 0
  5024                           ;configMeasure@channel stored from wreg
  5025  005674  6E12               	movwf	configMeasure@channel^0,c
  5026                           
  5027                           ;stateMachine/touchScreenSM.c: 153: void configMeasure(_Bool channel);stateMachine/touch
      +                          ScreenSM.c: 154: {;stateMachine/touchScreenSM.c: 155:     if(channel==0)
  5028  005676  5012               	movf	configMeasure@channel^0,w,c
  5029  005678  A4D8               	btfss	status,2,c
  5030  00567A  D00B               	goto	l7102
  5031                           
  5032                           ;stateMachine/touchScreenSM.c: 156:     {;stateMachine/touchScreenSM.c: 157:         ANS
      +                          B1=0;
  5033  00567C  010F               	movlb	15	; () banked
  5034  00567E  9339               	bcf	57,1,b	;volatile
  5035                           
  5036                           ;stateMachine/touchScreenSM.c: 158:         TRISB1=0;
  5037  005680  9293               	bcf	3987,1,c	;volatile
  5038                           
  5039                           ;stateMachine/touchScreenSM.c: 159:         LATB1=0;
  5040  005682  928A               	bcf	3978,1,c	;volatile
  5041                           
  5042                           ;stateMachine/touchScreenSM.c: 160:         TRISB3=0;
  5043  005684  9693               	bcf	3987,3,c	;volatile
  5044                           
  5045                           ;stateMachine/touchScreenSM.c: 161:         LATB3=1;
  5046  005686  868A               	bsf	3978,3,c	;volatile
  5047                           
  5048                           ;stateMachine/touchScreenSM.c: 162:         TRISB4=1;
  5049  005688  8893               	bsf	3987,4,c	;volatile
  5050                           
  5051                           ;stateMachine/touchScreenSM.c: 163:         TRISB2=1;
  5052  00568A  8493               	bsf	3987,2,c	;volatile
  5053                           
  5054                           ;stateMachine/touchScreenSM.c: 164:         ANSB2=1;
  5055  00568C  8539               	bsf	57,2,b	;volatile
  5056                           
  5057                           ; BSR set to: 15
  5058                           ;stateMachine/touchScreenSM.c: 165:         ADCON0=0b00100011;
  5059  00568E  0E23               	movlw	35
  5060  005690  6EC2               	movwf	194,c	;volatile
  5061  005692                     l7102:
  5062                           
  5063                           ;stateMachine/touchScreenSM.c: 167:     if(channel==1)
  5064  005692  0412               	decf	configMeasure@channel^0,w,c
  5065  005694  A4D8               	btfss	status,2,c
  5066  005696  0012               	return	
  5067                           
  5068                           ;stateMachine/touchScreenSM.c: 168:     {;stateMachine/touchScreenSM.c: 169:         ANS
      +                          B2=0;
  5069  005698  010F               	movlb	15	; () banked
  5070  00569A  9539               	bcf	57,2,b	;volatile
  5071                           
  5072                           ;stateMachine/touchScreenSM.c: 170:         TRISB2=0;
  5073  00569C  9493               	bcf	3987,2,c	;volatile
  5074                           
  5075                           ;stateMachine/touchScreenSM.c: 171:         LATB2=0;
  5076  00569E  948A               	bcf	3978,2,c	;volatile
  5077                           
  5078                           ;stateMachine/touchScreenSM.c: 172:         TRISB4=0;
  5079  0056A0  9893               	bcf	3987,4,c	;volatile
  5080                           
  5081                           ;stateMachine/touchScreenSM.c: 173:         LATB4=1;
  5082  0056A2  888A               	bsf	3978,4,c	;volatile
  5083                           
  5084                           ;stateMachine/touchScreenSM.c: 174:         TRISB3=1;
  5085  0056A4  8693               	bsf	3987,3,c	;volatile
  5086                           
  5087                           ;stateMachine/touchScreenSM.c: 175:         TRISB1=1;
  5088  0056A6  8293               	bsf	3987,1,c	;volatile
  5089                           
  5090                           ;stateMachine/touchScreenSM.c: 176:         ANSB1=1;
  5091  0056A8  8339               	bsf	57,1,b	;volatile
  5092                           
  5093                           ; BSR set to: 15
  5094                           ;stateMachine/touchScreenSM.c: 177:         ADCON0=0b00101011;
  5095  0056AA  0E2B               	movlw	43
  5096  0056AC  6EC2               	movwf	194,c	;volatile
  5097  0056AE  0012               	return		;funcret
  5098  0056B0                     __end_of_configMeasure:
  5099                           	callstack 0
  5100                           
  5101 ;; *************** function ___xxtofl *****************
  5102 ;; Defined at:
  5103 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\xxtofl.c"
  5104 ;; Parameters:    Size  Location     Type
  5105 ;;  sign            1    wreg     unsigned char 
  5106 ;;  val             4   17[COMRAM] long 
  5107 ;; Auto vars:     Size  Location     Type
  5108 ;;  sign            1   25[COMRAM] unsigned char 
  5109 ;;  arg             4   27[COMRAM] unsigned long 
  5110 ;;  exp             1   26[COMRAM] unsigned char 
  5111 ;; Return value:  Size  Location     Type
  5112 ;;                  4   17[COMRAM] unsigned char 
  5113 ;; Registers used:
  5114 ;;		wreg, status,2, status,0
  5115 ;; Tracked objects:
  5116 ;;		On entry : 3F/0
  5117 ;;		On exit  : 0/0
  5118 ;;		Unchanged: 0/0
  5119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5120 ;;      Params:         4       0       0       0       0       0       0
  5121 ;;      Locals:         6       0       0       0       0       0       0
  5122 ;;      Temps:          4       0       0       0       0       0       0
  5123 ;;      Totals:        14       0       0       0       0       0       0
  5124 ;;Total ram usage:       14 bytes
  5125 ;; Hardware stack levels used: 1
  5126 ;; Hardware stack levels required when called: 4
  5127 ;; This function calls:
  5128 ;;		Nothing
  5129 ;; This function is called by:
  5130 ;;		_touchScreenController
  5131 ;; This function uses a non-reentrant model
  5132 ;;
  5133                           
  5134                           	psect	text13
  5135  003852                     __ptext13:
  5136                           	callstack 0
  5137  003852                     ___xxtofl:
  5138                           	callstack 23
  5139                           
  5140                           ;incstack = 0
  5141                           ;___xxtofl@sign stored from wreg
  5142  003852  6E1A               	movwf	___xxtofl@sign^0,c
  5143  003854  501A               	movf	___xxtofl@sign^0,w,c
  5144  003856  A4D8               	btfss	status,2,c
  5145  003858  AE15               	btfss	(___xxtofl@val+3)^0,7,c
  5146  00385A  D01A               	goto	l1529
  5147  00385C  C012  F016         	movff	___xxtofl@val,??___xxtofl
  5148  003860  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  5149  003864  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  5150  003868  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  5151  00386C  1E16               	comf	??___xxtofl^0,f,c
  5152  00386E  1E17               	comf	(??___xxtofl+1)^0,f,c
  5153  003870  1E18               	comf	(??___xxtofl+2)^0,f,c
  5154  003872  1E19               	comf	(??___xxtofl+3)^0,f,c
  5155  003874  2A16               	incf	??___xxtofl^0,f,c
  5156  003876  0E00               	movlw	0
  5157  003878  2217               	addwfc	(??___xxtofl+1)^0,f,c
  5158  00387A  2218               	addwfc	(??___xxtofl+2)^0,f,c
  5159  00387C  2219               	addwfc	(??___xxtofl+3)^0,f,c
  5160  00387E  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  5161  003882  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  5162  003886  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  5163  00388A  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  5164  00388E  D008               	goto	l7392
  5165  003890                     l1529:
  5166  003890  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  5167  003894  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  5168  003898  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  5169  00389C  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  5170  0038A0                     l7392:
  5171  0038A0  5012               	movf	___xxtofl@val^0,w,c
  5172  0038A2  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  5173  0038A4  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  5174  0038A6  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  5175  0038A8  A4D8               	btfss	status,2,c
  5176  0038AA  D009               	goto	l7398
  5177  0038AC  0E00               	movlw	0
  5178  0038AE  6E12               	movwf	?___xxtofl^0,c
  5179  0038B0  0E00               	movlw	0
  5180  0038B2  6E13               	movwf	(?___xxtofl+1)^0,c
  5181  0038B4  0E00               	movlw	0
  5182  0038B6  6E14               	movwf	(?___xxtofl+2)^0,c
  5183  0038B8  0E00               	movlw	0
  5184  0038BA  6E15               	movwf	(?___xxtofl+3)^0,c
  5185  0038BC  0012               	return	
  5186  0038BE                     l7398:
  5187  0038BE  0E96               	movlw	150
  5188  0038C0  6E1B               	movwf	___xxtofl@exp^0,c
  5189  0038C2  D006               	goto	l7402
  5190  0038C4                     l7400:
  5191  0038C4  2A1B               	incf	___xxtofl@exp^0,f,c
  5192  0038C6  90D8               	bcf	status,0,c
  5193  0038C8  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  5194  0038CA  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  5195  0038CC  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  5196  0038CE  321C               	rrcf	___xxtofl@arg^0,f,c
  5197  0038D0                     l7402:
  5198  0038D0  0E00               	movlw	0
  5199  0038D2  141C               	andwf	___xxtofl@arg^0,w,c
  5200  0038D4  6E16               	movwf	??___xxtofl^0,c
  5201  0038D6  0E00               	movlw	0
  5202  0038D8  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  5203  0038DA  6E17               	movwf	(??___xxtofl+1)^0,c
  5204  0038DC  0E00               	movlw	0
  5205  0038DE  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  5206  0038E0  6E18               	movwf	(??___xxtofl+2)^0,c
  5207  0038E2  0EFE               	movlw	254
  5208  0038E4  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  5209  0038E6  6E19               	movwf	(??___xxtofl+3)^0,c
  5210  0038E8  5016               	movf	??___xxtofl^0,w,c
  5211  0038EA  1017               	iorwf	(??___xxtofl+1)^0,w,c
  5212  0038EC  1018               	iorwf	(??___xxtofl+2)^0,w,c
  5213  0038EE  1019               	iorwf	(??___xxtofl+3)^0,w,c
  5214  0038F0  B4D8               	btfsc	status,2,c
  5215  0038F2  D00D               	goto	l1536
  5216  0038F4  D7E7               	goto	l7400
  5217  0038F6                     l7404:
  5218  0038F6  2A1B               	incf	___xxtofl@exp^0,f,c
  5219  0038F8  0E01               	movlw	1
  5220  0038FA  261C               	addwf	___xxtofl@arg^0,f,c
  5221  0038FC  0E00               	movlw	0
  5222  0038FE  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  5223  003900  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  5224  003902  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  5225  003904  90D8               	bcf	status,0,c
  5226  003906  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  5227  003908  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  5228  00390A  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  5229  00390C  321C               	rrcf	___xxtofl@arg^0,f,c
  5230  00390E                     l1536:
  5231  00390E  0E00               	movlw	0
  5232  003910  141C               	andwf	___xxtofl@arg^0,w,c
  5233  003912  6E16               	movwf	??___xxtofl^0,c
  5234  003914  0E00               	movlw	0
  5235  003916  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  5236  003918  6E17               	movwf	(??___xxtofl+1)^0,c
  5237  00391A  0E00               	movlw	0
  5238  00391C  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  5239  00391E  6E18               	movwf	(??___xxtofl+2)^0,c
  5240  003920  0EFF               	movlw	255
  5241  003922  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  5242  003924  6E19               	movwf	(??___xxtofl+3)^0,c
  5243  003926  5016               	movf	??___xxtofl^0,w,c
  5244  003928  1017               	iorwf	(??___xxtofl+1)^0,w,c
  5245  00392A  1018               	iorwf	(??___xxtofl+2)^0,w,c
  5246  00392C  1019               	iorwf	(??___xxtofl+3)^0,w,c
  5247  00392E  B4D8               	btfsc	status,2,c
  5248  003930  D007               	goto	l7412
  5249  003932  D7E1               	goto	l7404
  5250  003934                     l7410:
  5251  003934  061B               	decf	___xxtofl@exp^0,f,c
  5252  003936  90D8               	bcf	status,0,c
  5253  003938  361C               	rlcf	___xxtofl@arg^0,f,c
  5254  00393A  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  5255  00393C  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  5256  00393E  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  5257  003940                     l7412:
  5258  003940  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  5259  003942  D003               	goto	u5240
  5260  003944  0E02               	movlw	2
  5261  003946  601B               	cpfslt	___xxtofl@exp^0,c
  5262  003948  D7F5               	goto	l7410
  5263  00394A                     u5240:
  5264  00394A  A01B               	btfss	___xxtofl@exp^0,0,c
  5265  00394C  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  5266  00394E  90D8               	bcf	status,0,c
  5267  003950  321B               	rrcf	___xxtofl@exp^0,f,c
  5268  003952  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  5269  003956  6A17               	clrf	(??___xxtofl+1)^0,c
  5270  003958  6A18               	clrf	(??___xxtofl+2)^0,c
  5271  00395A  6A19               	clrf	(??___xxtofl+3)^0,c
  5272  00395C  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  5273  003960  6A18               	clrf	(??___xxtofl+2)^0,c
  5274  003962  6A17               	clrf	(??___xxtofl+1)^0,c
  5275  003964  6A16               	clrf	??___xxtofl^0,c
  5276  003966  5016               	movf	??___xxtofl^0,w,c
  5277  003968  121C               	iorwf	___xxtofl@arg^0,f,c
  5278  00396A  5017               	movf	(??___xxtofl+1)^0,w,c
  5279  00396C  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  5280  00396E  5018               	movf	(??___xxtofl+2)^0,w,c
  5281  003970  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  5282  003972  5019               	movf	(??___xxtofl+3)^0,w,c
  5283  003974  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  5284  003976  501A               	movf	___xxtofl@sign^0,w,c
  5285  003978  A4D8               	btfss	status,2,c
  5286  00397A  AE15               	btfss	(___xxtofl@val+3)^0,7,c
  5287  00397C  D001               	goto	l7428
  5288  00397E  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  5289  003980                     l7428:
  5290  003980  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  5291  003984  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  5292  003988  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  5293  00398C  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  5294  003990  0012               	return		;funcret
  5295  003992                     __end_of___xxtofl:
  5296                           	callstack 0
  5297                           
  5298 ;; *************** function ___fltol *****************
  5299 ;; Defined at:
  5300 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\fltol.c"
  5301 ;; Parameters:    Size  Location     Type
  5302 ;;  f1              4   56[COMRAM] unsigned char 
  5303 ;; Auto vars:     Size  Location     Type
  5304 ;;  exp1            1   65[COMRAM] unsigned char 
  5305 ;;  sign1           1   64[COMRAM] unsigned char 
  5306 ;; Return value:  Size  Location     Type
  5307 ;;                  4   56[COMRAM] long 
  5308 ;; Registers used:
  5309 ;;		wreg, status,2, status,0
  5310 ;; Tracked objects:
  5311 ;;		On entry : 0/0
  5312 ;;		On exit  : 0/0
  5313 ;;		Unchanged: 0/0
  5314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5315 ;;      Params:         4       0       0       0       0       0       0
  5316 ;;      Locals:         2       0       0       0       0       0       0
  5317 ;;      Temps:          4       0       0       0       0       0       0
  5318 ;;      Totals:        10       0       0       0       0       0       0
  5319 ;;Total ram usage:       10 bytes
  5320 ;; Hardware stack levels used: 1
  5321 ;; Hardware stack levels required when called: 4
  5322 ;; This function calls:
  5323 ;;		Nothing
  5324 ;; This function is called by:
  5325 ;;		_touchScreenController
  5326 ;; This function uses a non-reentrant model
  5327 ;;
  5328                           
  5329                           	psect	text14
  5330  00470C                     __ptext14:
  5331                           	callstack 0
  5332  00470C                     ___fltol:
  5333                           	callstack 23
  5334                           
  5335                           ;incstack = 0
  5336  00470C  343B               	rlcf	(___fltol@f1+2)^0,w,c
  5337  00470E  343C               	rlcf	(___fltol@f1+3)^0,w,c
  5338  004710  6E42               	movwf	___fltol@exp1^0,c
  5339  004712  5042               	movf	___fltol@exp1^0,w,c
  5340  004714  A4D8               	btfss	status,2,c
  5341  004716  D009               	goto	l7348
  5342  004718                     u5110:
  5343  004718  0E00               	movlw	0
  5344  00471A  6E39               	movwf	?___fltol^0,c
  5345  00471C  0E00               	movlw	0
  5346  00471E  6E3A               	movwf	(?___fltol+1)^0,c
  5347  004720  0E00               	movlw	0
  5348  004722  6E3B               	movwf	(?___fltol+2)^0,c
  5349  004724  0E00               	movlw	0
  5350  004726  6E3C               	movwf	(?___fltol+3)^0,c
  5351  004728  0012               	return	
  5352  00472A                     l7348:
  5353  00472A  C039  F03D         	movff	___fltol@f1,??___fltol
  5354  00472E  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  5355  004732  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  5356  004736  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  5357  00473A  0E20               	movlw	32
  5358  00473C  D005               	goto	u5120
  5359  00473E                     u5125:
  5360  00473E  90D8               	bcf	status,0,c
  5361  004740  3240               	rrcf	(??___fltol+3)^0,f,c
  5362  004742  323F               	rrcf	(??___fltol+2)^0,f,c
  5363  004744  323E               	rrcf	(??___fltol+1)^0,f,c
  5364  004746  323D               	rrcf	??___fltol^0,f,c
  5365  004748                     u5120:
  5366  004748  2EE8               	decfsz	wreg,f,c
  5367  00474A  D7F9               	goto	u5125
  5368  00474C  503D               	movf	??___fltol^0,w,c
  5369  00474E  6E41               	movwf	___fltol@sign1^0,c
  5370  004750  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  5371  004752  0EFF               	movlw	255
  5372  004754  1639               	andwf	___fltol@f1^0,f,c
  5373  004756  0EFF               	movlw	255
  5374  004758  163A               	andwf	(___fltol@f1+1)^0,f,c
  5375  00475A  0EFF               	movlw	255
  5376  00475C  163B               	andwf	(___fltol@f1+2)^0,f,c
  5377  00475E  0E00               	movlw	0
  5378  004760  163C               	andwf	(___fltol@f1+3)^0,f,c
  5379  004762  0E96               	movlw	150
  5380  004764  5E42               	subwf	___fltol@exp1^0,f,c
  5381  004766  AE42               	btfss	___fltol@exp1^0,7,c
  5382  004768  D00D               	goto	l7368
  5383  00476A  5042               	movf	___fltol@exp1^0,w,c
  5384  00476C  0A80               	xorlw	128
  5385  00476E  0F97               	addlw	151
  5386  004770  A0D8               	btfss	status,0,c
  5387  004772  D7D2               	goto	u5110
  5388  004774                     l7364:
  5389  004774  90D8               	bcf	status,0,c
  5390  004776  323C               	rrcf	(___fltol@f1+3)^0,f,c
  5391  004778  323B               	rrcf	(___fltol@f1+2)^0,f,c
  5392  00477A  323A               	rrcf	(___fltol@f1+1)^0,f,c
  5393  00477C  3239               	rrcf	___fltol@f1^0,f,c
  5394  00477E  3E42               	incfsz	___fltol@exp1^0,f,c
  5395  004780  D7F9               	goto	l7364
  5396  004782  D00D               	goto	u5160
  5397  004784                     l7368:
  5398  004784  0E1F               	movlw	31
  5399  004786  6442               	cpfsgt	___fltol@exp1^0,c
  5400  004788  D007               	goto	l7376
  5401  00478A  D7C6               	goto	u5110
  5402  00478C                     l7374:
  5403  00478C  90D8               	bcf	status,0,c
  5404  00478E  3639               	rlcf	___fltol@f1^0,f,c
  5405  004790  363A               	rlcf	(___fltol@f1+1)^0,f,c
  5406  004792  363B               	rlcf	(___fltol@f1+2)^0,f,c
  5407  004794  363C               	rlcf	(___fltol@f1+3)^0,f,c
  5408  004796  0642               	decf	___fltol@exp1^0,f,c
  5409  004798                     l7376:
  5410  004798  5042               	movf	___fltol@exp1^0,w,c
  5411  00479A  A4D8               	btfss	status,2,c
  5412  00479C  D7F7               	goto	l7374
  5413  00479E                     u5160:
  5414  00479E  5041               	movf	___fltol@sign1^0,w,c
  5415  0047A0  B4D8               	btfsc	status,2,c
  5416  0047A2  D008               	goto	l7382
  5417  0047A4  1E3C               	comf	(___fltol@f1+3)^0,f,c
  5418  0047A6  1E3B               	comf	(___fltol@f1+2)^0,f,c
  5419  0047A8  1E3A               	comf	(___fltol@f1+1)^0,f,c
  5420  0047AA  6C39               	negf	___fltol@f1^0,c
  5421  0047AC  0E00               	movlw	0
  5422  0047AE  223A               	addwfc	(___fltol@f1+1)^0,f,c
  5423  0047B0  223B               	addwfc	(___fltol@f1+2)^0,f,c
  5424  0047B2  223C               	addwfc	(___fltol@f1+3)^0,f,c
  5425  0047B4                     l7382:
  5426  0047B4  C039  F039         	movff	___fltol@f1,?___fltol
  5427  0047B8  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  5428  0047BC  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  5429  0047C0  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  5430  0047C4  0012               	return		;funcret
  5431  0047C6                     __end_of___fltol:
  5432                           	callstack 0
  5433                           
  5434 ;; *************** function ___fldiv *****************
  5435 ;; Defined at:
  5436 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\sprcdiv.c"
  5437 ;; Parameters:    Size  Location     Type
  5438 ;;  b               4   31[COMRAM] long 
  5439 ;;  a               4   35[COMRAM] long 
  5440 ;; Auto vars:     Size  Location     Type
  5441 ;;  grs             4   50[COMRAM] unsigned long 
  5442 ;;  rem             4   43[COMRAM] unsigned long 
  5443 ;;  new_exp         2   48[COMRAM] short 
  5444 ;;  aexp            1   55[COMRAM] unsigned char 
  5445 ;;  bexp            1   54[COMRAM] unsigned char 
  5446 ;;  sign            1   47[COMRAM] unsigned char 
  5447 ;; Return value:  Size  Location     Type
  5448 ;;                  4   31[COMRAM] unsigned char 
  5449 ;; Registers used:
  5450 ;;		wreg, status,2, status,0
  5451 ;; Tracked objects:
  5452 ;;		On entry : 0/0
  5453 ;;		On exit  : 0/0
  5454 ;;		Unchanged: 0/0
  5455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5456 ;;      Params:         8       0       0       0       0       0       0
  5457 ;;      Locals:        13       0       0       0       0       0       0
  5458 ;;      Temps:          4       0       0       0       0       0       0
  5459 ;;      Totals:        25       0       0       0       0       0       0
  5460 ;;Total ram usage:       25 bytes
  5461 ;; Hardware stack levels used: 1
  5462 ;; Hardware stack levels required when called: 4
  5463 ;; This function calls:
  5464 ;;		Nothing
  5465 ;; This function is called by:
  5466 ;;		_touchScreenController
  5467 ;; This function uses a non-reentrant model
  5468 ;;
  5469                           
  5470                           	psect	text15
  5471  002BD2                     __ptext15:
  5472                           	callstack 0
  5473  002BD2                     ___fldiv:
  5474                           	callstack 23
  5475                           
  5476                           ;incstack = 0
  5477  002BD2  5023               	movf	(___fldiv@b+3)^0,w,c
  5478  002BD4  0B80               	andlw	128
  5479  002BD6  6E30               	movwf	___fldiv@sign^0,c
  5480  002BD8  5023               	movf	(___fldiv@b+3)^0,w,c
  5481  002BDA  2423               	addwf	(___fldiv@b+3)^0,w,c
  5482  002BDC  6E37               	movwf	___fldiv@bexp^0,c
  5483  002BDE  BE22               	btfsc	(___fldiv@b+2)^0,7,c
  5484  002BE0  8037               	bsf	___fldiv@bexp^0,0,c
  5485  002BE2  5037               	movf	___fldiv@bexp^0,w,c
  5486  002BE4  B4D8               	btfsc	status,2,c
  5487  002BE6  D00D               	goto	l7220
  5488  002BE8  2837               	incf	___fldiv@bexp^0,w,c
  5489  002BEA  A4D8               	btfss	status,2,c
  5490  002BEC  D008               	goto	l7216
  5491  002BEE  0E00               	movlw	0
  5492  002BF0  6E20               	movwf	___fldiv@b^0,c
  5493  002BF2  0E00               	movlw	0
  5494  002BF4  6E21               	movwf	(___fldiv@b+1)^0,c
  5495  002BF6  0E00               	movlw	0
  5496  002BF8  6E22               	movwf	(___fldiv@b+2)^0,c
  5497  002BFA  0E00               	movlw	0
  5498  002BFC  6E23               	movwf	(___fldiv@b+3)^0,c
  5499  002BFE                     l7216:
  5500  002BFE  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5501  002C00  D006               	goto	L1
  5502  002C02                     l7220:
  5503  002C02  0E00               	movlw	0
  5504  002C04  6E20               	movwf	___fldiv@b^0,c
  5505  002C06  0E00               	movlw	0
  5506  002C08  6E21               	movwf	(___fldiv@b+1)^0,c
  5507  002C0A  0E00               	movlw	0
  5508  002C0C  6E22               	movwf	(___fldiv@b+2)^0,c
  5509  002C0E                     L1:
  5510  002C0E  0E00               	movlw	0
  5511  002C10  6E23               	movwf	(___fldiv@b+3)^0,c
  5512  002C12  5027               	movf	(___fldiv@a+3)^0,w,c
  5513  002C14  0B80               	andlw	128
  5514  002C16  1A30               	xorwf	___fldiv@sign^0,f,c
  5515  002C18  5027               	movf	(___fldiv@a+3)^0,w,c
  5516  002C1A  2427               	addwf	(___fldiv@a+3)^0,w,c
  5517  002C1C  6E38               	movwf	___fldiv@aexp^0,c
  5518  002C1E  BE26               	btfsc	(___fldiv@a+2)^0,7,c
  5519  002C20  8038               	bsf	___fldiv@aexp^0,0,c
  5520  002C22  5038               	movf	___fldiv@aexp^0,w,c
  5521  002C24  B4D8               	btfsc	status,2,c
  5522  002C26  D00D               	goto	l7240
  5523  002C28  2838               	incf	___fldiv@aexp^0,w,c
  5524  002C2A  A4D8               	btfss	status,2,c
  5525  002C2C  D008               	goto	l7236
  5526  002C2E  0E00               	movlw	0
  5527  002C30  6E24               	movwf	___fldiv@a^0,c
  5528  002C32  0E00               	movlw	0
  5529  002C34  6E25               	movwf	(___fldiv@a+1)^0,c
  5530  002C36  0E00               	movlw	0
  5531  002C38  6E26               	movwf	(___fldiv@a+2)^0,c
  5532  002C3A  0E00               	movlw	0
  5533  002C3C  6E27               	movwf	(___fldiv@a+3)^0,c
  5534  002C3E                     l7236:
  5535  002C3E  8E26               	bsf	(___fldiv@a+2)^0,7,c
  5536  002C40  D006               	goto	L2
  5537  002C42                     l7240:
  5538  002C42  0E00               	movlw	0
  5539  002C44  6E24               	movwf	___fldiv@a^0,c
  5540  002C46  0E00               	movlw	0
  5541  002C48  6E25               	movwf	(___fldiv@a+1)^0,c
  5542  002C4A  0E00               	movlw	0
  5543  002C4C  6E26               	movwf	(___fldiv@a+2)^0,c
  5544  002C4E                     L2:
  5545  002C4E  0E00               	movlw	0
  5546  002C50  6E27               	movwf	(___fldiv@a+3)^0,c
  5547  002C52  5024               	movf	___fldiv@a^0,w,c
  5548  002C54  1025               	iorwf	(___fldiv@a+1)^0,w,c
  5549  002C56  1026               	iorwf	(___fldiv@a+2)^0,w,c
  5550  002C58  1027               	iorwf	(___fldiv@a+3)^0,w,c
  5551  002C5A  A4D8               	btfss	status,2,c
  5552  002C5C  D017               	goto	l7254
  5553  002C5E  0E00               	movlw	0
  5554  002C60  6E20               	movwf	___fldiv@b^0,c
  5555  002C62  0E00               	movlw	0
  5556  002C64  6E21               	movwf	(___fldiv@b+1)^0,c
  5557  002C66  0E00               	movlw	0
  5558  002C68  6E22               	movwf	(___fldiv@b+2)^0,c
  5559  002C6A  0E00               	movlw	0
  5560  002C6C  6E23               	movwf	(___fldiv@b+3)^0,c
  5561  002C6E  0E80               	movlw	128
  5562  002C70  1222               	iorwf	(___fldiv@b+2)^0,f,c
  5563  002C72  0E7F               	movlw	127
  5564  002C74  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5565  002C76                     l7248:
  5566  002C76  5030               	movf	___fldiv@sign^0,w,c
  5567  002C78  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5568  002C7A  C020  F020         	movff	___fldiv@b,?___fldiv
  5569  002C7E  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  5570  002C82  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  5571  002C86  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  5572  002C8A  0012               	return	
  5573  002C8C                     l7254:
  5574  002C8C  5037               	movf	___fldiv@bexp^0,w,c
  5575  002C8E  A4D8               	btfss	status,2,c
  5576  002C90  D009               	goto	l7262
  5577  002C92  0E00               	movlw	0
  5578  002C94  6E20               	movwf	?___fldiv^0,c
  5579  002C96  0E00               	movlw	0
  5580  002C98  6E21               	movwf	(?___fldiv+1)^0,c
  5581  002C9A  0E00               	movlw	0
  5582  002C9C  6E22               	movwf	(?___fldiv+2)^0,c
  5583  002C9E  0E00               	movlw	0
  5584  002CA0  6E23               	movwf	(?___fldiv+3)^0,c
  5585  002CA2  0012               	return	
  5586  002CA4                     l7262:
  5587  002CA4  5038               	movf	___fldiv@aexp^0,w,c
  5588  002CA6  C037  F028         	movff	___fldiv@bexp,??___fldiv
  5589  002CAA  6A29               	clrf	(??___fldiv+1)^0,c
  5590  002CAC  5E28               	subwf	??___fldiv^0,f,c
  5591  002CAE  0E00               	movlw	0
  5592  002CB0  5A29               	subwfb	(??___fldiv+1)^0,f,c
  5593  002CB2  0E7F               	movlw	127
  5594  002CB4  2428               	addwf	??___fldiv^0,w,c
  5595  002CB6  6E31               	movwf	___fldiv@new_exp^0,c
  5596  002CB8  0E00               	movlw	0
  5597  002CBA  2029               	addwfc	(??___fldiv+1)^0,w,c
  5598  002CBC  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5599  002CBE  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  5600  002CC2  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  5601  002CC6  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  5602  002CCA  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  5603  002CCE  0E00               	movlw	0
  5604  002CD0  6E20               	movwf	___fldiv@b^0,c
  5605  002CD2  0E00               	movlw	0
  5606  002CD4  6E21               	movwf	(___fldiv@b+1)^0,c
  5607  002CD6  0E00               	movlw	0
  5608  002CD8  6E22               	movwf	(___fldiv@b+2)^0,c
  5609  002CDA  0E00               	movlw	0
  5610  002CDC  6E23               	movwf	(___fldiv@b+3)^0,c
  5611  002CDE  0E00               	movlw	0
  5612  002CE0  6E33               	movwf	___fldiv@grs^0,c
  5613  002CE2  0E00               	movlw	0
  5614  002CE4  6E34               	movwf	(___fldiv@grs+1)^0,c
  5615  002CE6  0E00               	movlw	0
  5616  002CE8  6E35               	movwf	(___fldiv@grs+2)^0,c
  5617  002CEA  0E00               	movlw	0
  5618  002CEC  6E36               	movwf	(___fldiv@grs+3)^0,c
  5619  002CEE  0E00               	movlw	0
  5620  002CF0  6E38               	movwf	___fldiv@aexp^0,c
  5621  002CF2  D028               	goto	l1458
  5622  002CF4                     l7272:
  5623  002CF4  5038               	movf	___fldiv@aexp^0,w,c
  5624  002CF6  B4D8               	btfsc	status,2,c
  5625  002CF8  D011               	goto	l7280
  5626  002CFA  90D8               	bcf	status,0,c
  5627  002CFC  362C               	rlcf	___fldiv@rem^0,f,c
  5628  002CFE  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  5629  002D00  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  5630  002D02  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  5631  002D04  90D8               	bcf	status,0,c
  5632  002D06  3620               	rlcf	___fldiv@b^0,f,c
  5633  002D08  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5634  002D0A  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5635  002D0C  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5636  002D0E  BE36               	btfsc	(___fldiv@grs+3)^0,7,c
  5637  002D10  8020               	bsf	___fldiv@b^0,0,c
  5638  002D12  90D8               	bcf	status,0,c
  5639  002D14  3633               	rlcf	___fldiv@grs^0,f,c
  5640  002D16  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5641  002D18  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5642  002D1A  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5643  002D1C                     l7280:
  5644  002D1C  5024               	movf	___fldiv@a^0,w,c
  5645  002D1E  5C2C               	subwf	___fldiv@rem^0,w,c
  5646  002D20  5025               	movf	(___fldiv@a+1)^0,w,c
  5647  002D22  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  5648  002D24  5026               	movf	(___fldiv@a+2)^0,w,c
  5649  002D26  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  5650  002D28  5027               	movf	(___fldiv@a+3)^0,w,c
  5651  002D2A  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  5652  002D2C  A0D8               	btfss	status,0,c
  5653  002D2E  D009               	goto	l7286
  5654  002D30  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  5655  002D32  5024               	movf	___fldiv@a^0,w,c
  5656  002D34  5E2C               	subwf	___fldiv@rem^0,f,c
  5657  002D36  5025               	movf	(___fldiv@a+1)^0,w,c
  5658  002D38  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  5659  002D3A  5026               	movf	(___fldiv@a+2)^0,w,c
  5660  002D3C  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  5661  002D3E  5027               	movf	(___fldiv@a+3)^0,w,c
  5662  002D40  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  5663  002D42                     l7286:
  5664  002D42  2A38               	incf	___fldiv@aexp^0,f,c
  5665  002D44                     l1458:
  5666  002D44  0E19               	movlw	25
  5667  002D46  6438               	cpfsgt	___fldiv@aexp^0,c
  5668  002D48  D7D5               	goto	l7272
  5669  002D4A  502C               	movf	___fldiv@rem^0,w,c
  5670  002D4C  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  5671  002D4E  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  5672  002D50  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  5673  002D52  B4D8               	btfsc	status,2,c
  5674  002D54  D011               	goto	l7298
  5675  002D56  8033               	bsf	___fldiv@grs^0,0,c
  5676  002D58  D00F               	goto	l7298
  5677  002D5A                     l7292:
  5678  002D5A  90D8               	bcf	status,0,c
  5679  002D5C  3620               	rlcf	___fldiv@b^0,f,c
  5680  002D5E  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5681  002D60  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5682  002D62  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5683  002D64  BE36               	btfsc	(___fldiv@grs+3)^0,7,c
  5684  002D66  8020               	bsf	___fldiv@b^0,0,c
  5685  002D68  90D8               	bcf	status,0,c
  5686  002D6A  3633               	rlcf	___fldiv@grs^0,f,c
  5687  002D6C  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5688  002D6E  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5689  002D70  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5690  002D72  0631               	decf	___fldiv@new_exp^0,f,c
  5691  002D74  A0D8               	btfss	status,0,c
  5692  002D76  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  5693  002D78                     l7298:
  5694  002D78  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5695  002D7A  D7EF               	goto	l7292
  5696  002D7C  0E00               	movlw	0
  5697  002D7E  6E38               	movwf	___fldiv@aexp^0,c
  5698  002D80  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5699  002D82  D017               	goto	l1469
  5700  002D84  0EFF               	movlw	255
  5701  002D86  1433               	andwf	___fldiv@grs^0,w,c
  5702  002D88  6E28               	movwf	??___fldiv^0,c
  5703  002D8A  0EFF               	movlw	255
  5704  002D8C  1434               	andwf	(___fldiv@grs+1)^0,w,c
  5705  002D8E  6E29               	movwf	(??___fldiv+1)^0,c
  5706  002D90  0EFF               	movlw	255
  5707  002D92  1435               	andwf	(___fldiv@grs+2)^0,w,c
  5708  002D94  6E2A               	movwf	(??___fldiv+2)^0,c
  5709  002D96  0E7F               	movlw	127
  5710  002D98  1436               	andwf	(___fldiv@grs+3)^0,w,c
  5711  002D9A  6E2B               	movwf	(??___fldiv+3)^0,c
  5712  002D9C  5028               	movf	??___fldiv^0,w,c
  5713  002D9E  1029               	iorwf	(??___fldiv+1)^0,w,c
  5714  002DA0  102A               	iorwf	(??___fldiv+2)^0,w,c
  5715  002DA2  102B               	iorwf	(??___fldiv+3)^0,w,c
  5716  002DA4  B4D8               	btfsc	status,2,c
  5717  002DA6  D003               	goto	l1470
  5718  002DA8                     u5040:
  5719  002DA8  0E01               	movlw	1
  5720  002DAA  6E38               	movwf	___fldiv@aexp^0,c
  5721  002DAC  D002               	goto	l1469
  5722  002DAE                     l1470:
  5723  002DAE  B020               	btfsc	___fldiv@b^0,0,c
  5724  002DB0  D7FB               	goto	u5040
  5725  002DB2                     l1469:
  5726  002DB2  5038               	movf	___fldiv@aexp^0,w,c
  5727  002DB4  B4D8               	btfsc	status,2,c
  5728  002DB6  D01F               	goto	l7318
  5729  002DB8  0E01               	movlw	1
  5730  002DBA  2620               	addwf	___fldiv@b^0,f,c
  5731  002DBC  0E00               	movlw	0
  5732  002DBE  2221               	addwfc	(___fldiv@b+1)^0,f,c
  5733  002DC0  2222               	addwfc	(___fldiv@b+2)^0,f,c
  5734  002DC2  2223               	addwfc	(___fldiv@b+3)^0,f,c
  5735  002DC4  A023               	btfss	(___fldiv@b+3)^0,0,c
  5736  002DC6  D017               	goto	l7318
  5737  002DC8  C020  F028         	movff	___fldiv@b,??___fldiv
  5738  002DCC  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  5739  002DD0  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  5740  002DD4  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  5741  002DD8  342B               	rlcf	(??___fldiv+3)^0,w,c
  5742  002DDA  322B               	rrcf	(??___fldiv+3)^0,f,c
  5743  002DDC  322A               	rrcf	(??___fldiv+2)^0,f,c
  5744  002DDE  3229               	rrcf	(??___fldiv+1)^0,f,c
  5745  002DE0  3228               	rrcf	??___fldiv^0,f,c
  5746  002DE2  C028  F020         	movff	??___fldiv,___fldiv@b
  5747  002DE6  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  5748  002DEA  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  5749  002DEE  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  5750  002DF2  4A31               	infsnz	___fldiv@new_exp^0,f,c
  5751  002DF4  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  5752  002DF6                     l7318:
  5753  002DF6  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5754  002DF8  D010               	goto	l7322
  5755  002DFA  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5756  002DFC  E103               	bnz	u5080
  5757  002DFE  2831               	incf	___fldiv@new_exp^0,w,c
  5758  002E00  A0D8               	btfss	status,0,c
  5759  002E02  D00B               	goto	l7322
  5760  002E04                     u5080:
  5761  002E04  0E00               	movlw	0
  5762  002E06  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5763  002E08  6831               	setf	___fldiv@new_exp^0,c
  5764  002E0A  0E00               	movlw	0
  5765  002E0C  6E20               	movwf	___fldiv@b^0,c
  5766  002E0E  0E00               	movlw	0
  5767  002E10  6E21               	movwf	(___fldiv@b+1)^0,c
  5768  002E12  0E00               	movlw	0
  5769  002E14  6E22               	movwf	(___fldiv@b+2)^0,c
  5770  002E16  0E00               	movlw	0
  5771  002E18  6E23               	movwf	(___fldiv@b+3)^0,c
  5772  002E1A                     l7322:
  5773  002E1A  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5774  002E1C  D005               	goto	u5090
  5775  002E1E  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5776  002E20  E111               	bnz	l7326
  5777  002E22  0431               	decf	___fldiv@new_exp^0,w,c
  5778  002E24  B0D8               	btfsc	status,0,c
  5779  002E26  D00E               	goto	l7326
  5780  002E28                     u5090:
  5781  002E28  0E00               	movlw	0
  5782  002E2A  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5783  002E2C  0E00               	movlw	0
  5784  002E2E  6E31               	movwf	___fldiv@new_exp^0,c
  5785  002E30  0E00               	movlw	0
  5786  002E32  6E20               	movwf	___fldiv@b^0,c
  5787  002E34  0E00               	movlw	0
  5788  002E36  6E21               	movwf	(___fldiv@b+1)^0,c
  5789  002E38  0E00               	movlw	0
  5790  002E3A  6E22               	movwf	(___fldiv@b+2)^0,c
  5791  002E3C  0E00               	movlw	0
  5792  002E3E  6E23               	movwf	(___fldiv@b+3)^0,c
  5793  002E40  0E00               	movlw	0
  5794  002E42  6E30               	movwf	___fldiv@sign^0,c
  5795  002E44                     l7326:
  5796  002E44  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5797  002E48  A037               	btfss	___fldiv@bexp^0,0,c
  5798  002E4A  D002               	goto	l7332
  5799  002E4C  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5800  002E4E  D001               	goto	l7334
  5801  002E50                     l7332:
  5802  002E50  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5803  002E52                     l7334:
  5804  002E52  90D8               	bcf	status,0,c
  5805  002E54  3037               	rrcf	___fldiv@bexp^0,w,c
  5806  002E56  6E23               	movwf	(___fldiv@b+3)^0,c
  5807  002E58  D70E               	goto	l7248
  5808  002E5A                     __end_of___fldiv:
  5809                           	callstack 0
  5810                           
  5811 ;; *************** function _XF_unscheduleTimer *****************
  5812 ;; Defined at:
  5813 ;;		line 125 in file "xf/xf.c"
  5814 ;; Parameters:    Size  Location     Type
  5815 ;;  id              1    wreg     unsigned char 
  5816 ;;  inISR           1   18[COMRAM] _Bool 
  5817 ;; Auto vars:     Size  Location     Type
  5818 ;;  id              1   19[COMRAM] unsigned char 
  5819 ;; Return value:  Size  Location     Type
  5820 ;;                  1    wreg      void 
  5821 ;; Registers used:
  5822 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5823 ;; Tracked objects:
  5824 ;;		On entry : 3F/0
  5825 ;;		On exit  : 0/0
  5826 ;;		Unchanged: 0/0
  5827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5828 ;;      Params:         1       0       0       0       0       0       0
  5829 ;;      Locals:         1       0       0       0       0       0       0
  5830 ;;      Temps:          0       0       0       0       0       0       0
  5831 ;;      Totals:         2       0       0       0       0       0       0
  5832 ;;Total ram usage:        2 bytes
  5833 ;; Hardware stack levels used: 1
  5834 ;; Hardware stack levels required when called: 5
  5835 ;; This function calls:
  5836 ;;		_ENTERCRITICAL
  5837 ;;		_LEAVECRITICAL
  5838 ;; This function is called by:
  5839 ;;		_touchScreenController
  5840 ;; This function uses a non-reentrant model
  5841 ;;
  5842                           
  5843                           	psect	text16
  5844  0056E8                     __ptext16:
  5845                           	callstack 0
  5846  0056E8                     _XF_unscheduleTimer:
  5847                           	callstack 22
  5848                           
  5849                           ;incstack = 0
  5850                           ;XF_unscheduleTimer@id stored from wreg
  5851  0056E8  6E14               	movwf	XF_unscheduleTimer@id^0,c
  5852                           
  5853                           ;xf/xf.c: 125: void XF_unscheduleTimer(TimerID id, _Bool inISR);xf/xf.c: 126: {;xf/xf.c:
      +                           127:     ENTERCRITICAL(inISR);
  5854  0056EA  5013               	movf	XF_unscheduleTimer@inISR^0,w,c
  5855  0056EC  ECF4  F02C         	call	_ENTERCRITICAL
  5856                           
  5857                           ;xf/xf.c: 128:     theXF.timerList[id].tm = 0;
  5858  0056F0  5014               	movf	XF_unscheduleTimer@id^0,w,c
  5859  0056F2  0D03               	mullw	3
  5860  0056F4  50F3               	movf	243,w,c
  5861  0056F6  0F60               	addlw	low _theXF
  5862  0056F8  6ED9               	movwf	fsr2l,c
  5863  0056FA  6ADA               	clrf	fsr2h,c
  5864  0056FC  0E00               	movlw	0
  5865  0056FE  6EDE               	movwf	postinc2,c
  5866  005700  0E00               	movlw	0
  5867  005702  6EDD               	movwf	postdec2,c
  5868                           
  5869                           ;xf/xf.c: 129:     theXF.timerList[id].ev = NULLEVENT;
  5870  005704  5014               	movf	XF_unscheduleTimer@id^0,w,c
  5871  005706  0D03               	mullw	3
  5872  005708  50F3               	movf	243,w,c
  5873  00570A  0F62               	addlw	low (_theXF+2)
  5874  00570C  6ED9               	movwf	fsr2l,c
  5875  00570E  6ADA               	clrf	fsr2h,c
  5876  005710  0E00               	movlw	0
  5877  005712  6EDF               	movwf	indf2,c
  5878                           
  5879                           ;xf/xf.c: 130:     LEAVECRITICAL(inISR);
  5880  005714  5013               	movf	XF_unscheduleTimer@inISR^0,w,c
  5881  005716  ECEE  F02C         	call	_LEAVECRITICAL
  5882  00571A  0012               	return		;funcret
  5883  00571C                     __end_of_XF_unscheduleTimer:
  5884                           	callstack 0
  5885                           
  5886 ;; *************** function _GameParameters_setY *****************
  5887 ;; Defined at:
  5888 ;;		line 79 in file "class/gameParameters.c"
  5889 ;; Parameters:    Size  Location     Type
  5890 ;;  s               2   17[COMRAM] PTR struct GameParameter
  5891 ;;		 -> g1(240), 
  5892 ;;  value           2   19[COMRAM] unsigned short 
  5893 ;; Auto vars:     Size  Location     Type
  5894 ;;		None
  5895 ;; Return value:  Size  Location     Type
  5896 ;;                  1    wreg      void 
  5897 ;; Registers used:
  5898 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5899 ;; Tracked objects:
  5900 ;;		On entry : 0/0
  5901 ;;		On exit  : 0/0
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5904 ;;      Params:         4       0       0       0       0       0       0
  5905 ;;      Locals:         0       0       0       0       0       0       0
  5906 ;;      Temps:          0       0       0       0       0       0       0
  5907 ;;      Totals:         4       0       0       0       0       0       0
  5908 ;;Total ram usage:        4 bytes
  5909 ;; Hardware stack levels used: 1
  5910 ;; Hardware stack levels required when called: 4
  5911 ;; This function calls:
  5912 ;;		Nothing
  5913 ;; This function is called by:
  5914 ;;		_touchScreenController
  5915 ;; This function uses a non-reentrant model
  5916 ;;
  5917                           
  5918                           	psect	text17
  5919  00599A                     __ptext17:
  5920                           	callstack 0
  5921  00599A                     _GameParameters_setY:
  5922                           	callstack 23
  5923                           
  5924                           ;class/gameParameters.c: 79: void GameParameters_setY(struct GameParameters* s, uint16_t
      +                           value);class/gameParameters.c: 80: {;class/gameParameters.c: 81:     s->y=value;
  5925                           
  5926                           ;incstack = 0
  5927  00599A  EE20 F004          	lfsr	2,4
  5928  00599E  5012               	movf	GameParameters_setY@s^0,w,c
  5929  0059A0  26D9               	addwf	fsr2l,f,c
  5930  0059A2  5013               	movf	(GameParameters_setY@s+1)^0,w,c
  5931  0059A4  22DA               	addwfc	fsr2h,f,c
  5932  0059A6  C014  FFDE         	movff	GameParameters_setY@value,postinc2
  5933  0059AA  C015  FFDD         	movff	GameParameters_setY@value+1,postdec2
  5934  0059AE  0012               	return		;funcret
  5935  0059B0                     __end_of_GameParameters_setY:
  5936                           	callstack 0
  5937                           
  5938 ;; *************** function _GameParameters_setX *****************
  5939 ;; Defined at:
  5940 ;;		line 71 in file "class/gameParameters.c"
  5941 ;; Parameters:    Size  Location     Type
  5942 ;;  s               2   17[COMRAM] PTR struct GameParameter
  5943 ;;		 -> g1(240), 
  5944 ;;  value           2   19[COMRAM] unsigned short 
  5945 ;; Auto vars:     Size  Location     Type
  5946 ;;		None
  5947 ;; Return value:  Size  Location     Type
  5948 ;;                  1    wreg      void 
  5949 ;; Registers used:
  5950 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5951 ;; Tracked objects:
  5952 ;;		On entry : 0/0
  5953 ;;		On exit  : 0/0
  5954 ;;		Unchanged: 0/0
  5955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5956 ;;      Params:         4       0       0       0       0       0       0
  5957 ;;      Locals:         0       0       0       0       0       0       0
  5958 ;;      Temps:          0       0       0       0       0       0       0
  5959 ;;      Totals:         4       0       0       0       0       0       0
  5960 ;;Total ram usage:        4 bytes
  5961 ;; Hardware stack levels used: 1
  5962 ;; Hardware stack levels required when called: 4
  5963 ;; This function calls:
  5964 ;;		Nothing
  5965 ;; This function is called by:
  5966 ;;		_touchScreenController
  5967 ;; This function uses a non-reentrant model
  5968 ;;
  5969                           
  5970                           	psect	text18
  5971  0059B0                     __ptext18:
  5972                           	callstack 0
  5973  0059B0                     _GameParameters_setX:
  5974                           	callstack 23
  5975                           
  5976                           ;class/gameParameters.c: 71: void GameParameters_setX(struct GameParameters* s, uint16_t
      +                           value);class/gameParameters.c: 72: {;class/gameParameters.c: 73:     s->x=value;
  5977                           
  5978                           ;incstack = 0
  5979  0059B0  EE20 F002          	lfsr	2,2
  5980  0059B4  5012               	movf	GameParameters_setX@s^0,w,c
  5981  0059B6  26D9               	addwf	fsr2l,f,c
  5982  0059B8  5013               	movf	(GameParameters_setX@s+1)^0,w,c
  5983  0059BA  22DA               	addwfc	fsr2h,f,c
  5984  0059BC  C014  FFDE         	movff	GameParameters_setX@value,postinc2
  5985  0059C0  C015  FFDD         	movff	GameParameters_setX@value+1,postdec2
  5986  0059C4  0012               	return		;funcret
  5987  0059C6                     __end_of_GameParameters_setX:
  5988                           	callstack 0
  5989                           
  5990 ;; *************** function _sleepSM *****************
  5991 ;; Defined at:
  5992 ;;		line 27 in file "stateMachine/sleepSM.c"
  5993 ;; Parameters:    Size  Location     Type
  5994 ;;  ev              1    wreg     unsigned char 
  5995 ;; Auto vars:     Size  Location     Type
  5996 ;;  ev              1   21[COMRAM] unsigned char 
  5997 ;; Return value:  Size  Location     Type
  5998 ;;                  1    wreg      void 
  5999 ;; Registers used:
  6000 ;;		wreg, status,2, status,0, cstack
  6001 ;; Tracked objects:
  6002 ;;		On entry : 3F/0
  6003 ;;		On exit  : 0/0
  6004 ;;		Unchanged: 0/0
  6005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6006 ;;      Params:         0       0       0       0       0       0       0
  6007 ;;      Locals:         1       0       0       0       0       0       0
  6008 ;;      Temps:          2       0       0       0       0       0       0
  6009 ;;      Totals:         3       0       0       0       0       0       0
  6010 ;;Total ram usage:        3 bytes
  6011 ;; Hardware stack levels used: 1
  6012 ;; Hardware stack levels required when called: 7
  6013 ;; This function calls:
  6014 ;;		_sleepController
  6015 ;; This function is called by:
  6016 ;;		_Factory_exec
  6017 ;; This function uses a non-reentrant model
  6018 ;;
  6019                           
  6020                           	psect	text19
  6021  005782                     __ptext19:
  6022                           	callstack 0
  6023  005782                     _sleepSM:
  6024                           	callstack 22
  6025                           
  6026                           ;incstack = 0
  6027                           ;sleepSM@ev stored from wreg
  6028  005782  6E16               	movwf	sleepSM@ev^0,c
  6029                           
  6030                           ;stateMachine/sleepSM.c: 27: void sleepSM(Event ev);stateMachine/sleepSM.c: 28: {;stateM
      +                          achine/sleepSM.c: 29:     switch(sleepState)
  6031  005784  D009               	goto	l7640
  6032  005786                     l7632:
  6033                           
  6034                           ; BSR set to: 0
  6035                           ;stateMachine/sleepSM.c: 32:             if(ev==evSleep)
  6036  005786  0E03               	movlw	3
  6037  005788  1816               	xorwf	sleepSM@ev^0,w,c
  6038  00578A  A4D8               	btfss	status,2,c
  6039  00578C  0012               	return	
  6040                           
  6041                           ; BSR set to: 0
  6042                           ;stateMachine/sleepSM.c: 33:             {;stateMachine/sleepSM.c: 34:                sl
      +                          eepState=SLEEP;
  6043  00578E  0E01               	movlw	1
  6044  005790  6F89               	movwf	_sleepState& (0+255),b
  6045                           
  6046                           ; BSR set to: 0
  6047                           ;stateMachine/sleepSM.c: 35:                sleepController();
  6048  005792  EC24  F02C         	call	_sleepController	;wreg free
  6049  005796  0012               	return	
  6050  005798                     l7640:
  6051  005798  0100               	movlb	0	; () banked
  6052  00579A  5189               	movf	_sleepState& (0+255),w,b
  6053  00579C  6E14               	movwf	??_sleepSM^0,c
  6054  00579E  6A15               	clrf	(??_sleepSM+1)^0,c
  6055                           
  6056                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6057                           ; Switch size 1, requested type "simple"
  6058                           ; Number of cases is 1, Range of values is 0 to 0
  6059                           ; switch strategies available:
  6060                           ; Name         Instructions Cycles
  6061                           ; simple_byte            4     3 (average)
  6062                           ;	Chosen strategy is simple_byte
  6063  0057A0  5015               	movf	(??_sleepSM+1)^0,w,c
  6064  0057A2  0A00               	xorlw	0	; case 0
  6065  0057A4  A4D8               	btfss	status,2,c
  6066  0057A6  0012               	return	
  6067                           
  6068                           ; BSR set to: 0
  6069                           ; Switch size 1, requested type "simple"
  6070                           ; Number of cases is 2, Range of values is 0 to 1
  6071                           ; switch strategies available:
  6072                           ; Name         Instructions Cycles
  6073                           ; simple_byte            7     4 (average)
  6074                           ;	Chosen strategy is simple_byte
  6075  0057A8  5014               	movf	??_sleepSM^0,w,c
  6076  0057AA  0A00               	xorlw	0	; case 0
  6077  0057AC  B4D8               	btfsc	status,2,c
  6078  0057AE  D7EB               	goto	l7632
  6079  0057B0  0A01               	xorlw	1	; case 1
  6080  0057B2  0012               	return	
  6081  0057B4                     __end_of_sleepSM:
  6082                           	callstack 0
  6083                           
  6084 ;; *************** function _sleepController *****************
  6085 ;; Defined at:
  6086 ;;		line 54 in file "stateMachine/sleepSM.c"
  6087 ;; Parameters:    Size  Location     Type
  6088 ;;		None
  6089 ;; Auto vars:     Size  Location     Type
  6090 ;;		None
  6091 ;; Return value:  Size  Location     Type
  6092 ;;                  1    wreg      void 
  6093 ;; Registers used:
  6094 ;;		wreg, status,2, status,0, cstack
  6095 ;; Tracked objects:
  6096 ;;		On entry : 0/0
  6097 ;;		On exit  : 0/0
  6098 ;;		Unchanged: 0/0
  6099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6100 ;;      Params:         0       0       0       0       0       0       0
  6101 ;;      Locals:         0       0       0       0       0       0       0
  6102 ;;      Temps:          2       0       0       0       0       0       0
  6103 ;;      Totals:         2       0       0       0       0       0       0
  6104 ;;Total ram usage:        2 bytes
  6105 ;; Hardware stack levels used: 1
  6106 ;; Hardware stack levels required when called: 6
  6107 ;; This function calls:
  6108 ;;		_configPinSleep
  6109 ;; This function is called by:
  6110 ;;		_sleepInit
  6111 ;;		_sleepSM
  6112 ;; This function uses a non-reentrant model
  6113 ;;
  6114                           
  6115                           	psect	text20
  6116  005848                     __ptext20:
  6117                           	callstack 0
  6118  005848                     _sleepController:
  6119                           	callstack 22
  6120                           
  6121                           ;stateMachine/sleepSM.c: 56:     switch(sleepState)
  6122                           
  6123                           ;incstack = 0
  6124  005848  D005               	goto	l7464
  6125  00584A                     l7460:
  6126                           
  6127                           ; BSR set to: 0
  6128                           ;stateMachine/sleepSM.c: 62:             configPinSleep();
  6129  00584A  ECA8  F02C         	call	_configPinSleep	;wreg free
  6130  00584E  0003               	sleep		;# 
  6131  005850  00FF               	reset		;# 
  6132                           
  6133                           ;stateMachine/sleepSM.c: 65:             break;
  6134  005852  0012               	return	
  6135  005854                     l7464:
  6136  005854  0100               	movlb	0	; () banked
  6137  005856  5189               	movf	_sleepState& (0+255),w,b
  6138  005858  6E12               	movwf	??_sleepController^0,c
  6139  00585A  6A13               	clrf	(??_sleepController+1)^0,c
  6140                           
  6141                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6142                           ; Switch size 1, requested type "simple"
  6143                           ; Number of cases is 1, Range of values is 0 to 0
  6144                           ; switch strategies available:
  6145                           ; Name         Instructions Cycles
  6146                           ; simple_byte            4     3 (average)
  6147                           ;	Chosen strategy is simple_byte
  6148  00585C  5013               	movf	(??_sleepController+1)^0,w,c
  6149  00585E  0A00               	xorlw	0	; case 0
  6150  005860  A4D8               	btfss	status,2,c
  6151  005862  0012               	return	
  6152                           
  6153                           ; BSR set to: 0
  6154                           ; Switch size 1, requested type "simple"
  6155                           ; Number of cases is 2, Range of values is 0 to 1
  6156                           ; switch strategies available:
  6157                           ; Name         Instructions Cycles
  6158                           ; simple_byte            7     4 (average)
  6159                           ;	Chosen strategy is simple_byte
  6160  005864  5012               	movf	??_sleepController^0,w,c
  6161  005866  0A00               	xorlw	0	; case 0
  6162  005868  B4D8               	btfsc	status,2,c
  6163  00586A  0012               	return	
  6164  00586C  0A01               	xorlw	1	; case 1
  6165  00586E  A4D8               	btfss	status,2,c
  6166  005870  0012               	return	
  6167  005872  D7EB               	goto	l7460
  6168  005874                     __end_of_sleepController:
  6169                           	callstack 0
  6170                           
  6171 ;; *************** function _configPinSleep *****************
  6172 ;; Defined at:
  6173 ;;		line 75 in file "stateMachine/sleepSM.c"
  6174 ;; Parameters:    Size  Location     Type
  6175 ;;		None
  6176 ;; Auto vars:     Size  Location     Type
  6177 ;;		None
  6178 ;; Return value:  Size  Location     Type
  6179 ;;                  1    wreg      void 
  6180 ;; Registers used:
  6181 ;;		wreg, status,2, cstack
  6182 ;; Tracked objects:
  6183 ;;		On entry : 0/0
  6184 ;;		On exit  : 0/0
  6185 ;;		Unchanged: 0/0
  6186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6187 ;;      Params:         0       0       0       0       0       0       0
  6188 ;;      Locals:         0       0       0       0       0       0       0
  6189 ;;      Temps:          0       0       0       0       0       0       0
  6190 ;;      Totals:         0       0       0       0       0       0       0
  6191 ;;Total ram usage:        0 bytes
  6192 ;; Hardware stack levels used: 1
  6193 ;; Hardware stack levels required when called: 5
  6194 ;; This function calls:
  6195 ;;		_configTouch
  6196 ;; This function is called by:
  6197 ;;		_sleepController
  6198 ;; This function uses a non-reentrant model
  6199 ;;
  6200                           
  6201                           	psect	text21
  6202  005950                     __ptext21:
  6203                           	callstack 0
  6204  005950                     _configPinSleep:
  6205                           	callstack 22
  6206                           
  6207                           ;stateMachine/sleepSM.c: 77:     TRISC=0b10000010;
  6208                           
  6209                           ;incstack = 0
  6210  005950  0E82               	movlw	130
  6211  005952  6E94               	movwf	148,c	;volatile
  6212                           
  6213                           ;stateMachine/sleepSM.c: 78:     TRISA=0;
  6214  005954  0E00               	movlw	0
  6215  005956  6E92               	movwf	146,c	;volatile
  6216                           
  6217                           ;stateMachine/sleepSM.c: 79:     LATA=0xFF;
  6218  005958  6889               	setf	137,c	;volatile
  6219                           
  6220                           ;stateMachine/sleepSM.c: 80:     LATC0=0;
  6221  00595A  908B               	bcf	3979,0,c	;volatile
  6222                           
  6223                           ;stateMachine/sleepSM.c: 81:     CCPR2L=0;
  6224  00595C  0E00               	movlw	0
  6225  00595E  6E67               	movwf	103,c	;volatile
  6226                           
  6227                           ;stateMachine/sleepSM.c: 82:     LATC2=1;
  6228  005960  848B               	bsf	3979,2,c	;volatile
  6229                           
  6230                           ;stateMachine/sleepSM.c: 83:     LATC3=1;
  6231  005962  868B               	bsf	3979,3,c	;volatile
  6232                           
  6233                           ;stateMachine/sleepSM.c: 84:     LATC4=1;
  6234  005964  888B               	bsf	3979,4,c	;volatile
  6235                           
  6236                           ;stateMachine/sleepSM.c: 85:     LATC5=1;
  6237  005966  8A8B               	bsf	3979,5,c	;volatile
  6238                           
  6239                           ;stateMachine/sleepSM.c: 86:     configTouch();
  6240  005968  EC88  F02C         	call	_configTouch	;wreg free
  6241  00596C  0012               	return		;funcret
  6242  00596E                     __end_of_configPinSleep:
  6243                           	callstack 0
  6244                           
  6245 ;; *************** function _configTouch *****************
  6246 ;; Defined at:
  6247 ;;		line 132 in file "stateMachine/touchScreenSM.c"
  6248 ;; Parameters:    Size  Location     Type
  6249 ;;		None
  6250 ;; Auto vars:     Size  Location     Type
  6251 ;;		None
  6252 ;; Return value:  Size  Location     Type
  6253 ;;                  1    wreg      void 
  6254 ;; Registers used:
  6255 ;;		wreg, status,2
  6256 ;; Tracked objects:
  6257 ;;		On entry : 0/0
  6258 ;;		On exit  : 0/0
  6259 ;;		Unchanged: 0/0
  6260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6261 ;;      Params:         0       0       0       0       0       0       0
  6262 ;;      Locals:         0       0       0       0       0       0       0
  6263 ;;      Temps:          0       0       0       0       0       0       0
  6264 ;;      Totals:         0       0       0       0       0       0       0
  6265 ;;Total ram usage:        0 bytes
  6266 ;; Hardware stack levels used: 1
  6267 ;; Hardware stack levels required when called: 4
  6268 ;; This function calls:
  6269 ;;		Nothing
  6270 ;; This function is called by:
  6271 ;;		_configPinSleep
  6272 ;;		_touchScreenInit
  6273 ;;		_touchScreenController
  6274 ;; This function uses a non-reentrant model
  6275 ;;
  6276                           
  6277                           	psect	text22
  6278  005910                     __ptext22:
  6279                           	callstack 0
  6280  005910                     _configTouch:
  6281                           	callstack 23
  6282                           
  6283                           ;stateMachine/touchScreenSM.c: 134:     ANSB1=0;
  6284                           
  6285                           ;incstack = 0
  6286  005910  010F               	movlb	15	; () banked
  6287  005912  9339               	bcf	57,1,b	;volatile
  6288                           
  6289                           ;stateMachine/touchScreenSM.c: 135:     ANSB2=0;
  6290  005914  9539               	bcf	57,2,b	;volatile
  6291                           
  6292                           ;stateMachine/touchScreenSM.c: 136:     TRISB2=0;
  6293  005916  9493               	bcf	3987,2,c	;volatile
  6294                           
  6295                           ;stateMachine/touchScreenSM.c: 137:     LATB2=0;
  6296  005918  948A               	bcf	3978,2,c	;volatile
  6297                           
  6298                           ;stateMachine/touchScreenSM.c: 138:     TRISB1=1;
  6299  00591A  8293               	bsf	3987,1,c	;volatile
  6300                           
  6301                           ;stateMachine/touchScreenSM.c: 139:     RBPU=0;
  6302  00591C  9EF1               	bcf	4081,7,c	;volatile
  6303                           
  6304                           ; BSR set to: 15
  6305                           ;stateMachine/touchScreenSM.c: 140:     WPUB=0b00000010;
  6306  00591E  0E02               	movlw	2
  6307  005920  6E61               	movwf	97,c	;volatile
  6308                           
  6309                           ; BSR set to: 15
  6310                           ;stateMachine/touchScreenSM.c: 141:     TRISB3=0;
  6311  005922  9693               	bcf	3987,3,c	;volatile
  6312                           
  6313                           ; BSR set to: 15
  6314                           ;stateMachine/touchScreenSM.c: 142:     LATB3=1;
  6315  005924  868A               	bsf	3978,3,c	;volatile
  6316                           
  6317                           ; BSR set to: 15
  6318                           ;stateMachine/touchScreenSM.c: 143:     __nop();
  6319  005926  F000               	nop	
  6320                           
  6321                           ;stateMachine/touchScreenSM.c: 144:     TRISB3=1;
  6322  005928  8693               	bsf	3987,3,c	;volatile
  6323                           
  6324                           ;stateMachine/touchScreenSM.c: 145:     TRISB4=1;
  6325  00592A  8893               	bsf	3987,4,c	;volatile
  6326                           
  6327                           ;stateMachine/touchScreenSM.c: 146:     INT1IF=0;
  6328  00592C  90F0               	bcf	4080,0,c	;volatile
  6329                           
  6330                           ;stateMachine/touchScreenSM.c: 147:     INT1IE=1;
  6331  00592E  86F0               	bsf	4080,3,c	;volatile
  6332  005930  0012               	return		;funcret
  6333  005932                     __end_of_configTouch:
  6334                           	callstack 0
  6335                           
  6336 ;; *************** function _gameControllerSM *****************
  6337 ;; Defined at:
  6338 ;;		line 26 in file "stateMachine/gameController.c"
  6339 ;; Parameters:    Size  Location     Type
  6340 ;;  ev              1    wreg     unsigned char 
  6341 ;;  g               2   59[COMRAM] PTR struct GameParameter
  6342 ;;		 -> g1(240), 
  6343 ;; Auto vars:     Size  Location     Type
  6344 ;;  ev              1   63[COMRAM] unsigned char 
  6345 ;; Return value:  Size  Location     Type
  6346 ;;                  1    wreg      void 
  6347 ;; Registers used:
  6348 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6349 ;; Tracked objects:
  6350 ;;		On entry : 3F/0
  6351 ;;		On exit  : 0/0
  6352 ;;		Unchanged: 0/0
  6353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6354 ;;      Params:         2       0       0       0       0       0       0
  6355 ;;      Locals:         1       0       0       0       0       0       0
  6356 ;;      Temps:          2       0       0       0       0       0       0
  6357 ;;      Totals:         5       0       0       0       0       0       0
  6358 ;;Total ram usage:        5 bytes
  6359 ;; Hardware stack levels used: 1
  6360 ;; Hardware stack levels required when called: 9
  6361 ;; This function calls:
  6362 ;;		_XF_scheduleTimer
  6363 ;;		_gameControllerController
  6364 ;; This function is called by:
  6365 ;;		_Factory_exec
  6366 ;; This function uses a non-reentrant model
  6367 ;;
  6368                           
  6369                           	psect	text23
  6370  004314                     __ptext23:
  6371                           	callstack 0
  6372  004314                     _gameControllerSM:
  6373                           	callstack 20
  6374                           
  6375                           ;incstack = 0
  6376                           ;gameControllerSM@ev stored from wreg
  6377  004314  6E40               	movwf	gameControllerSM@ev^0,c
  6378                           
  6379                           ;stateMachine/gameController.c: 26: void gameControllerSM(Event ev,GameParameters* g);st
      +                          ateMachine/gameController.c: 27: {;stateMachine/gameController.c: 28:    switch(gameStat
      +                          eMachine)
  6380  004316  D058               	goto	l7772
  6381  004318                     l7734:
  6382                           
  6383                           ;stateMachine/gameController.c: 31:             gameControllerController(g,NULLEVENT);
  6384  004318  C03C  F037         	movff	gameControllerSM@g,gameControllerController@g
  6385  00431C  C03D  F038         	movff	gameControllerSM@g+1,gameControllerController@g+1
  6386  004320  0E00               	movlw	0
  6387  004322  6E39               	movwf	gameControllerController@ev^0,c
  6388  004324  EC82  F009         	call	_gameControllerController	;wreg free
  6389                           
  6390                           ;stateMachine/gameController.c: 32:             if(ev==evParameters)
  6391  004328  0E07               	movlw	7
  6392  00432A  1840               	xorwf	gameControllerSM@ev^0,w,c
  6393  00432C  A4D8               	btfss	status,2,c
  6394  00432E  D002               	goto	l7740
  6395                           
  6396                           ;stateMachine/gameController.c: 33:             {;stateMachine/gameController.c: 34:    
      +                                       gameStateMachine=PARAMETERS;
  6397  004330  0E01               	movlw	1
  6398  004332  6E4C               	movwf	_gameStateMachine^0,c
  6399  004334                     l7740:
  6400                           
  6401                           ;stateMachine/gameController.c: 36:             if(ev==evOnePlayer)
  6402  004334  0E05               	movlw	5
  6403  004336  1840               	xorwf	gameControllerSM@ev^0,w,c
  6404  004338  A4D8               	btfss	status,2,c
  6405  00433A  0012               	return	
  6406                           
  6407                           ;stateMachine/gameController.c: 37:             {;stateMachine/gameController.c: 38:    
      +                                       gameStateMachine=LOCAL;
  6408  00433C  0E02               	movlw	2
  6409  00433E  6E4C               	movwf	_gameStateMachine^0,c
  6410                           
  6411                           ;stateMachine/gameController.c: 39:                 XF_scheduleTimer(4-g->level,evGameUp
      +                          date,1);
  6412  004340  EE20 F006          	lfsr	2,6
  6413  004344  503C               	movf	gameControllerSM@g^0,w,c
  6414  004346  26D9               	addwf	fsr2l,f,c
  6415  004348  503D               	movf	(gameControllerSM@g+1)^0,w,c
  6416  00434A  22DA               	addwfc	fsr2h,f,c
  6417  00434C  CFDE F03E          	movff	postinc2,??_gameControllerSM
  6418  004350  CFDD F03F          	movff	postdec2,??_gameControllerSM+1
  6419  004354  503E               	movf	??_gameControllerSM^0,w,c
  6420  004356  0804               	sublw	4
  6421  004358  6E13               	movwf	XF_scheduleTimer@tm^0,c
  6422  00435A  503F               	movf	(??_gameControllerSM+1)^0,w,c
  6423  00435C  A0D8               	btfss	status,0,c
  6424  00435E  2AE8               	incf	wreg,f,c
  6425  004360  0800               	sublw	0
  6426  004362  6E14               	movwf	(XF_scheduleTimer@tm+1)^0,c
  6427  004364  0E0A               	movlw	10
  6428  004366  6E15               	movwf	XF_scheduleTimer@ev^0,c
  6429  004368  0E01               	movlw	1
  6430  00436A  6E16               	movwf	XF_scheduleTimer@inISR^0,c
  6431  00436C  ECED  F029         	call	_XF_scheduleTimer	;wreg free
  6432  004370  0012               	return	
  6433  004372                     l7752:
  6434                           
  6435                           ;stateMachine/gameController.c: 49:             gameControllerController(g,NULLEVENT);
  6436  004372  C03C  F037         	movff	gameControllerSM@g,gameControllerController@g
  6437  004376  C03D  F038         	movff	gameControllerSM@g+1,gameControllerController@g+1
  6438  00437A  0E00               	movlw	0
  6439  00437C  6E39               	movwf	gameControllerController@ev^0,c
  6440  00437E  EC82  F009         	call	_gameControllerController	;wreg free
  6441                           
  6442                           ;stateMachine/gameController.c: 50:             if(ev==evLeave)
  6443  004382  0E08               	movlw	8
  6444  004384  1840               	xorwf	gameControllerSM@ev^0,w,c
  6445  004386  A4D8               	btfss	status,2,c
  6446  004388  0012               	return	
  6447  00438A                     u5590:
  6448                           
  6449                           ;stateMachine/gameController.c: 51:             {;stateMachine/gameController.c: 52:    
      +                                       gameStateMachine=NOGAME;
  6450  00438A  0E00               	movlw	0
  6451  00438C  6E4C               	movwf	_gameStateMachine^0,c
  6452  00438E  0012               	return	
  6453  004390                     l7758:
  6454                           
  6455                           ;stateMachine/gameController.c: 57:             gameControllerController(g,ev);
  6456  004390  C03C  F037         	movff	gameControllerSM@g,gameControllerController@g
  6457  004394  C03D  F038         	movff	gameControllerSM@g+1,gameControllerController@g+1
  6458  004398  C040  F039         	movff	gameControllerSM@ev,gameControllerController@ev
  6459  00439C  EC82  F009         	call	_gameControllerController	;wreg free
  6460                           
  6461                           ;stateMachine/gameController.c: 58:             if(ev==evLeave)
  6462  0043A0  0E08               	movlw	8
  6463  0043A2  1840               	xorwf	gameControllerSM@ev^0,w,c
  6464  0043A4  B4D8               	btfsc	status,2,c
  6465  0043A6  D7F1               	goto	u5590
  6466  0043A8  0E09               	movlw	9
  6467  0043AA  1840               	xorwf	gameControllerSM@ev^0,w,c
  6468  0043AC  A4D8               	btfss	status,2,c
  6469  0043AE  0012               	return	
  6470                           
  6471                           ;stateMachine/gameController.c: 63:             {;stateMachine/gameController.c: 64:    
      +                                       gameStateMachine=ENDGAME;
  6472  0043B0  0E04               	movlw	4
  6473  0043B2  6E4C               	movwf	_gameStateMachine^0,c
  6474  0043B4  0012               	return	
  6475  0043B6                     l7768:
  6476                           
  6477                           ;stateMachine/gameController.c: 73:            gameControllerController(g,ev);
  6478  0043B6  C03C  F037         	movff	gameControllerSM@g,gameControllerController@g
  6479  0043BA  C03D  F038         	movff	gameControllerSM@g+1,gameControllerController@g+1
  6480  0043BE  C040  F039         	movff	gameControllerSM@ev,gameControllerController@ev
  6481  0043C2  EC82  F009         	call	_gameControllerController	;wreg free
  6482                           
  6483                           ;stateMachine/gameController.c: 74:            break;
  6484  0043C6  0012               	return	
  6485  0043C8                     l7772:
  6486  0043C8  504C               	movf	_gameStateMachine^0,w,c
  6487  0043CA  6E3E               	movwf	??_gameControllerSM^0,c
  6488  0043CC  6A3F               	clrf	(??_gameControllerSM+1)^0,c
  6489                           
  6490                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6491                           ; Switch size 1, requested type "simple"
  6492                           ; Number of cases is 1, Range of values is 0 to 0
  6493                           ; switch strategies available:
  6494                           ; Name         Instructions Cycles
  6495                           ; simple_byte            4     3 (average)
  6496                           ;	Chosen strategy is simple_byte
  6497  0043CE  503F               	movf	(??_gameControllerSM+1)^0,w,c
  6498  0043D0  0A00               	xorlw	0	; case 0
  6499  0043D2  A4D8               	btfss	status,2,c
  6500  0043D4  0012               	return	
  6501                           
  6502                           ; Switch size 1, requested type "simple"
  6503                           ; Number of cases is 5, Range of values is 0 to 4
  6504                           ; switch strategies available:
  6505                           ; Name         Instructions Cycles
  6506                           ; simple_byte           16     9 (average)
  6507                           ;	Chosen strategy is simple_byte
  6508  0043D6  503E               	movf	??_gameControllerSM^0,w,c
  6509  0043D8  0A00               	xorlw	0	; case 0
  6510  0043DA  B4D8               	btfsc	status,2,c
  6511  0043DC  D79D               	goto	l7734
  6512  0043DE  0A01               	xorlw	1	; case 1
  6513  0043E0  B4D8               	btfsc	status,2,c
  6514  0043E2  D7C7               	goto	l7752
  6515  0043E4  0A03               	xorlw	3	; case 2
  6516  0043E6  B4D8               	btfsc	status,2,c
  6517  0043E8  D7D3               	goto	l7758
  6518  0043EA  0A01               	xorlw	1	; case 3
  6519  0043EC  B4D8               	btfsc	status,2,c
  6520  0043EE  0012               	return	
  6521  0043F0  0A07               	xorlw	7	; case 4
  6522  0043F2  A4D8               	btfss	status,2,c
  6523  0043F4  0012               	return	
  6524  0043F6  D7DF               	goto	l7768
  6525  0043F8                     __end_of_gameControllerSM:
  6526                           	callstack 0
  6527                           
  6528 ;; *************** function _gameControllerController *****************
  6529 ;; Defined at:
  6530 ;;		line 89 in file "stateMachine/gameController.c"
  6531 ;; Parameters:    Size  Location     Type
  6532 ;;  g               2   54[COMRAM] PTR struct GameParameter
  6533 ;;		 -> g1(240), 
  6534 ;;  ev              1   56[COMRAM] unsigned char 
  6535 ;; Auto vars:     Size  Location     Type
  6536 ;;		None
  6537 ;; Return value:  Size  Location     Type
  6538 ;;                  1    wreg      void 
  6539 ;; Registers used:
  6540 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6541 ;; Tracked objects:
  6542 ;;		On entry : 0/0
  6543 ;;		On exit  : 0/0
  6544 ;;		Unchanged: 0/0
  6545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6546 ;;      Params:         3       0       0       0       0       0       0
  6547 ;;      Locals:         0       0       0       0       0       0       0
  6548 ;;      Temps:          2       0       0       0       0       0       0
  6549 ;;      Totals:         5       0       0       0       0       0       0
  6550 ;;Total ram usage:        5 bytes
  6551 ;; Hardware stack levels used: 1
  6552 ;; Hardware stack levels required when called: 8
  6553 ;; This function calls:
  6554 ;;		_GameParameters_init
  6555 ;;		_GameParameters_resetPos
  6556 ;;		_LCD_InButton
  6557 ;;		_LCD_InSlider
  6558 ;;		_LCD_SliderUpdate
  6559 ;;		_XF_pushEvent
  6560 ;;		_XF_scheduleTimer
  6561 ;;		_backlightController
  6562 ;;		_levelController
  6563 ;;		_mooveBall
  6564 ;;		_moovePaddle1
  6565 ;;		_moovePaddle2
  6566 ;; This function is called by:
  6567 ;;		_gameControllerInit
  6568 ;;		_gameControllerSM
  6569 ;; This function uses a non-reentrant model
  6570 ;;
  6571                           
  6572                           	psect	text24
  6573  001304                     __ptext24:
  6574                           	callstack 0
  6575  001304                     _gameControllerController:
  6576                           	callstack 19
  6577                           
  6578                           ;stateMachine/gameController.c: 89: void gameControllerController(GameParameters* g,Even
      +                          t ev);stateMachine/gameController.c: 90: {;stateMachine/gameController.c: 91:     switch
      +                          (gameStateMachine)
  6579                           
  6580                           ;incstack = 0
  6581  001304  D1EF               	goto	l7198
  6582  001306                     l7144:
  6583                           
  6584                           ;stateMachine/gameController.c: 95:             if(LCD_InButton(&(g->btnParam),g->x,g->y
      +                          ))
  6585  001306  0E08               	movlw	8
  6586  001308  2437               	addwf	gameControllerController@g^0,w,c
  6587  00130A  6E12               	movwf	LCD_InButton@button^0,c
  6588  00130C  0E00               	movlw	0
  6589  00130E  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6590  001310  6E13               	movwf	(LCD_InButton@button+1)^0,c
  6591  001312  EE20 F002          	lfsr	2,2
  6592  001316  5037               	movf	gameControllerController@g^0,w,c
  6593  001318  26D9               	addwf	fsr2l,f,c
  6594  00131A  5038               	movf	(gameControllerController@g+1)^0,w,c
  6595  00131C  22DA               	addwfc	fsr2h,f,c
  6596  00131E  CFDE F014          	movff	postinc2,LCD_InButton@posX
  6597  001322  CFDD F015          	movff	postdec2,LCD_InButton@posX+1
  6598  001326  EE20 F004          	lfsr	2,4
  6599  00132A  5037               	movf	gameControllerController@g^0,w,c
  6600  00132C  26D9               	addwf	fsr2l,f,c
  6601  00132E  5038               	movf	(gameControllerController@g+1)^0,w,c
  6602  001330  22DA               	addwfc	fsr2h,f,c
  6603  001332  CFDE F016          	movff	postinc2,LCD_InButton@posY
  6604  001336  CFDD F017          	movff	postdec2,LCD_InButton@posY+1
  6605  00133A  EC99  F025         	call	_LCD_InButton	;wreg free
  6606  00133E  0900               	iorlw	0
  6607  001340  B4D8               	btfsc	status,2,c
  6608  001342  D00B               	goto	l667
  6609                           
  6610                           ;stateMachine/gameController.c: 96:             {;stateMachine/gameController.c: 97:    
      +                                       XF_pushEvent(evParameters,0);
  6611  001344  0E00               	movlw	0
  6612  001346  6E18               	movwf	XF_pushEvent@inISR^0,c
  6613  001348  0E07               	movlw	7
  6614  00134A  ECC4  F029         	call	_XF_pushEvent
  6615                           
  6616                           ;stateMachine/gameController.c: 98:                 GameParameters_resetPos(g);
  6617  00134E  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  6618  001352  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  6619  001356  EC3A  F02C         	call	_GameParameters_resetPos	;wreg free
  6620  00135A                     l667:
  6621                           
  6622                           ;stateMachine/gameController.c: 100:             if(LCD_InButton(&(g->btnOnePlayer),g->x
      +                          ,g->y))
  6623  00135A  0E20               	movlw	32
  6624  00135C  2437               	addwf	gameControllerController@g^0,w,c
  6625  00135E  6E12               	movwf	LCD_InButton@button^0,c
  6626  001360  0E00               	movlw	0
  6627  001362  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6628  001364  6E13               	movwf	(LCD_InButton@button+1)^0,c
  6629  001366  EE20 F002          	lfsr	2,2
  6630  00136A  5037               	movf	gameControllerController@g^0,w,c
  6631  00136C  26D9               	addwf	fsr2l,f,c
  6632  00136E  5038               	movf	(gameControllerController@g+1)^0,w,c
  6633  001370  22DA               	addwfc	fsr2h,f,c
  6634  001372  CFDE F014          	movff	postinc2,LCD_InButton@posX
  6635  001376  CFDD F015          	movff	postdec2,LCD_InButton@posX+1
  6636  00137A  EE20 F004          	lfsr	2,4
  6637  00137E  5037               	movf	gameControllerController@g^0,w,c
  6638  001380  26D9               	addwf	fsr2l,f,c
  6639  001382  5038               	movf	(gameControllerController@g+1)^0,w,c
  6640  001384  22DA               	addwfc	fsr2h,f,c
  6641  001386  CFDE F016          	movff	postinc2,LCD_InButton@posY
  6642  00138A  CFDD F017          	movff	postdec2,LCD_InButton@posY+1
  6643  00138E  EC99  F025         	call	_LCD_InButton	;wreg free
  6644  001392  0900               	iorlw	0
  6645  001394  B4D8               	btfsc	status,2,c
  6646  001396  D00B               	goto	l668
  6647                           
  6648                           ;stateMachine/gameController.c: 101:             {;stateMachine/gameController.c: 102:  
      +                                         XF_pushEvent(evOnePlayer,0);
  6649  001398  0E00               	movlw	0
  6650  00139A  6E18               	movwf	XF_pushEvent@inISR^0,c
  6651  00139C  0E05               	movlw	5
  6652  00139E  ECC4  F029         	call	_XF_pushEvent
  6653                           
  6654                           ;stateMachine/gameController.c: 103:                 GameParameters_resetPos(g);
  6655  0013A2  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  6656  0013A6  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  6657  0013AA  EC3A  F02C         	call	_GameParameters_resetPos	;wreg free
  6658  0013AE                     l668:
  6659                           
  6660                           ;stateMachine/gameController.c: 105:             if(LCD_InButton(&(g->btnTwoPlayer),g->x
      +                          ,g->y))
  6661  0013AE  0E38               	movlw	56
  6662  0013B0  2437               	addwf	gameControllerController@g^0,w,c
  6663  0013B2  6E12               	movwf	LCD_InButton@button^0,c
  6664  0013B4  0E00               	movlw	0
  6665  0013B6  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6666  0013B8  6E13               	movwf	(LCD_InButton@button+1)^0,c
  6667  0013BA  EE20 F002          	lfsr	2,2
  6668  0013BE  5037               	movf	gameControllerController@g^0,w,c
  6669  0013C0  26D9               	addwf	fsr2l,f,c
  6670  0013C2  5038               	movf	(gameControllerController@g+1)^0,w,c
  6671  0013C4  22DA               	addwfc	fsr2h,f,c
  6672  0013C6  CFDE F014          	movff	postinc2,LCD_InButton@posX
  6673  0013CA  CFDD F015          	movff	postdec2,LCD_InButton@posX+1
  6674  0013CE  EE20 F004          	lfsr	2,4
  6675  0013D2  5037               	movf	gameControllerController@g^0,w,c
  6676  0013D4  26D9               	addwf	fsr2l,f,c
  6677  0013D6  5038               	movf	(gameControllerController@g+1)^0,w,c
  6678  0013D8  22DA               	addwfc	fsr2h,f,c
  6679  0013DA  CFDE F016          	movff	postinc2,LCD_InButton@posY
  6680  0013DE  CFDD F017          	movff	postdec2,LCD_InButton@posY+1
  6681  0013E2  EC99  F025         	call	_LCD_InButton	;wreg free
  6682  0013E6  0900               	iorlw	0
  6683  0013E8  B4D8               	btfsc	status,2,c
  6684  0013EA  D00B               	goto	l669
  6685                           
  6686                           ;stateMachine/gameController.c: 106:             {;stateMachine/gameController.c: 107:  
      +                                         XF_pushEvent(evTwoPlayer,0);
  6687  0013EC  0E00               	movlw	0
  6688  0013EE  6E18               	movwf	XF_pushEvent@inISR^0,c
  6689  0013F0  0E06               	movlw	6
  6690  0013F2  ECC4  F029         	call	_XF_pushEvent
  6691                           
  6692                           ;stateMachine/gameController.c: 108:                 GameParameters_resetPos(g);
  6693  0013F6  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  6694  0013FA  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  6695  0013FE  EC3A  F02C         	call	_GameParameters_resetPos	;wreg free
  6696  001402                     l669:
  6697                           
  6698                           ;stateMachine/gameController.c: 110:             if(LCD_InButton(&(g->btnTurnOff),g->x,g
      +                          ->y))
  6699  001402  0E80               	movlw	128
  6700  001404  2437               	addwf	gameControllerController@g^0,w,c
  6701  001406  6E12               	movwf	LCD_InButton@button^0,c
  6702  001408  0E00               	movlw	0
  6703  00140A  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6704  00140C  6E13               	movwf	(LCD_InButton@button+1)^0,c
  6705  00140E  EE20 F002          	lfsr	2,2
  6706  001412  5037               	movf	gameControllerController@g^0,w,c
  6707  001414  26D9               	addwf	fsr2l,f,c
  6708  001416  5038               	movf	(gameControllerController@g+1)^0,w,c
  6709  001418  22DA               	addwfc	fsr2h,f,c
  6710  00141A  CFDE F014          	movff	postinc2,LCD_InButton@posX
  6711  00141E  CFDD F015          	movff	postdec2,LCD_InButton@posX+1
  6712  001422  EE20 F004          	lfsr	2,4
  6713  001426  5037               	movf	gameControllerController@g^0,w,c
  6714  001428  26D9               	addwf	fsr2l,f,c
  6715  00142A  5038               	movf	(gameControllerController@g+1)^0,w,c
  6716  00142C  22DA               	addwfc	fsr2h,f,c
  6717  00142E  CFDE F016          	movff	postinc2,LCD_InButton@posY
  6718  001432  CFDD F017          	movff	postdec2,LCD_InButton@posY+1
  6719  001436  EC99  F025         	call	_LCD_InButton	;wreg free
  6720  00143A  0900               	iorlw	0
  6721  00143C  B4D8               	btfsc	status,2,c
  6722  00143E  0012               	return	
  6723                           
  6724                           ;stateMachine/gameController.c: 111:             {;stateMachine/gameController.c: 112:  
      +                                         XF_pushEvent(evSleep,0);
  6725  001440  0E00               	movlw	0
  6726  001442  6E18               	movwf	XF_pushEvent@inISR^0,c
  6727  001444  0E03               	movlw	3
  6728  001446  ECC4  F029         	call	_XF_pushEvent
  6729                           
  6730                           ;stateMachine/gameController.c: 113:                 GameParameters_resetPos(g);
  6731  00144A  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  6732  00144E  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  6733  001452  EC3A  F02C         	call	_GameParameters_resetPos	;wreg free
  6734  001456  0012               	return	
  6735  001458                     l7154:
  6736                           
  6737                           ;stateMachine/gameController.c: 120:             if(LCD_InSlider(&(g->sldBackLight),g->x
      +                          ,g->y))
  6738  001458  0E98               	movlw	152
  6739  00145A  2437               	addwf	gameControllerController@g^0,w,c
  6740  00145C  6E12               	movwf	LCD_InSlider@slider^0,c
  6741  00145E  0E00               	movlw	0
  6742  001460  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6743  001462  6E13               	movwf	(LCD_InSlider@slider+1)^0,c
  6744  001464  EE20 F002          	lfsr	2,2
  6745  001468  5037               	movf	gameControllerController@g^0,w,c
  6746  00146A  26D9               	addwf	fsr2l,f,c
  6747  00146C  5038               	movf	(gameControllerController@g+1)^0,w,c
  6748  00146E  22DA               	addwfc	fsr2h,f,c
  6749  001470  CFDE F014          	movff	postinc2,LCD_InSlider@posX
  6750  001474  CFDD F015          	movff	postdec2,LCD_InSlider@posX+1
  6751  001478  EE20 F004          	lfsr	2,4
  6752  00147C  5037               	movf	gameControllerController@g^0,w,c
  6753  00147E  26D9               	addwf	fsr2l,f,c
  6754  001480  5038               	movf	(gameControllerController@g+1)^0,w,c
  6755  001482  22DA               	addwfc	fsr2h,f,c
  6756  001484  CFDE F016          	movff	postinc2,LCD_InSlider@posY
  6757  001488  CFDD F017          	movff	postdec2,LCD_InSlider@posY+1
  6758  00148C  EC45  F025         	call	_LCD_InSlider	;wreg free
  6759  001490  0900               	iorlw	0
  6760  001492  B4D8               	btfsc	status,2,c
  6761  001494  D014               	goto	l7160
  6762                           
  6763                           ;stateMachine/gameController.c: 121:             {;stateMachine/gameController.c: 122:  
      +                                         backlightController(g);
  6764  001496  C037  F018         	movff	gameControllerController@g,backlightController@g
  6765  00149A  C038  F019         	movff	gameControllerController@g+1,backlightController@g+1
  6766  00149E  EC67  F011         	call	_backlightController	;wreg free
  6767                           
  6768                           ;stateMachine/gameController.c: 123:                 LCD_SliderUpdate(&(g->sldBackLight)
      +                          );
  6769  0014A2  0E98               	movlw	152
  6770  0014A4  2437               	addwf	gameControllerController@g^0,w,c
  6771  0014A6  6E27               	movwf	LCD_SliderUpdate@slider^0,c
  6772  0014A8  0E00               	movlw	0
  6773  0014AA  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6774  0014AC  6E28               	movwf	(LCD_SliderUpdate@slider+1)^0,c
  6775  0014AE  EC8A  F00B         	call	_LCD_SliderUpdate	;wreg free
  6776                           
  6777                           ;stateMachine/gameController.c: 124:                 GameParameters_resetPos(g);
  6778  0014B2  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  6779  0014B6  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  6780  0014BA  EC3A  F02C         	call	_GameParameters_resetPos	;wreg free
  6781  0014BE                     l7160:
  6782                           
  6783                           ;stateMachine/gameController.c: 126:             if(LCD_InSlider(&(g->sldLevel),g->x,g->
      +                          y))
  6784  0014BE  0EB1               	movlw	177
  6785  0014C0  2437               	addwf	gameControllerController@g^0,w,c
  6786  0014C2  6E12               	movwf	LCD_InSlider@slider^0,c
  6787  0014C4  0E00               	movlw	0
  6788  0014C6  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6789  0014C8  6E13               	movwf	(LCD_InSlider@slider+1)^0,c
  6790  0014CA  EE20 F002          	lfsr	2,2
  6791  0014CE  5037               	movf	gameControllerController@g^0,w,c
  6792  0014D0  26D9               	addwf	fsr2l,f,c
  6793  0014D2  5038               	movf	(gameControllerController@g+1)^0,w,c
  6794  0014D4  22DA               	addwfc	fsr2h,f,c
  6795  0014D6  CFDE F014          	movff	postinc2,LCD_InSlider@posX
  6796  0014DA  CFDD F015          	movff	postdec2,LCD_InSlider@posX+1
  6797  0014DE  EE20 F004          	lfsr	2,4
  6798  0014E2  5037               	movf	gameControllerController@g^0,w,c
  6799  0014E4  26D9               	addwf	fsr2l,f,c
  6800  0014E6  5038               	movf	(gameControllerController@g+1)^0,w,c
  6801  0014E8  22DA               	addwfc	fsr2h,f,c
  6802  0014EA  CFDE F016          	movff	postinc2,LCD_InSlider@posY
  6803  0014EE  CFDD F017          	movff	postdec2,LCD_InSlider@posY+1
  6804  0014F2  EC45  F025         	call	_LCD_InSlider	;wreg free
  6805  0014F6  0900               	iorlw	0
  6806  0014F8  B4D8               	btfsc	status,2,c
  6807  0014FA  D014               	goto	l7168
  6808                           
  6809                           ;stateMachine/gameController.c: 127:             {;stateMachine/gameController.c: 128:  
      +                                         levelController(g);
  6810  0014FC  C037  F016         	movff	gameControllerController@g,levelController@g
  6811  001500  C038  F017         	movff	gameControllerController@g+1,levelController@g+1
  6812  001504  EC62  F022         	call	_levelController	;wreg free
  6813                           
  6814                           ;stateMachine/gameController.c: 129:                 LCD_SliderUpdate(&(g->sldLevel));
  6815  001508  0EB1               	movlw	177
  6816  00150A  2437               	addwf	gameControllerController@g^0,w,c
  6817  00150C  6E27               	movwf	LCD_SliderUpdate@slider^0,c
  6818  00150E  0E00               	movlw	0
  6819  001510  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6820  001512  6E28               	movwf	(LCD_SliderUpdate@slider+1)^0,c
  6821  001514  EC8A  F00B         	call	_LCD_SliderUpdate	;wreg free
  6822                           
  6823                           ;stateMachine/gameController.c: 130:                 GameParameters_resetPos(g);
  6824  001518  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  6825  00151C  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  6826  001520  EC3A  F02C         	call	_GameParameters_resetPos	;wreg free
  6827  001524                     l7168:
  6828                           
  6829                           ;stateMachine/gameController.c: 133:             if(LCD_InButton(&(g->btnLeave),g->x,g->
      +                          y))
  6830  001524  0E50               	movlw	80
  6831  001526  2437               	addwf	gameControllerController@g^0,w,c
  6832  001528  6E12               	movwf	LCD_InButton@button^0,c
  6833  00152A  0E00               	movlw	0
  6834  00152C  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6835  00152E  6E13               	movwf	(LCD_InButton@button+1)^0,c
  6836  001530  EE20 F002          	lfsr	2,2
  6837  001534  5037               	movf	gameControllerController@g^0,w,c
  6838  001536  26D9               	addwf	fsr2l,f,c
  6839  001538  5038               	movf	(gameControllerController@g+1)^0,w,c
  6840  00153A  22DA               	addwfc	fsr2h,f,c
  6841  00153C  CFDE F014          	movff	postinc2,LCD_InButton@posX
  6842  001540  CFDD F015          	movff	postdec2,LCD_InButton@posX+1
  6843  001544  EE20 F004          	lfsr	2,4
  6844  001548  5037               	movf	gameControllerController@g^0,w,c
  6845  00154A  26D9               	addwf	fsr2l,f,c
  6846  00154C  5038               	movf	(gameControllerController@g+1)^0,w,c
  6847  00154E  22DA               	addwfc	fsr2h,f,c
  6848  001550  CFDE F016          	movff	postinc2,LCD_InButton@posY
  6849  001554  CFDD F017          	movff	postdec2,LCD_InButton@posY+1
  6850  001558  EC99  F025         	call	_LCD_InButton	;wreg free
  6851  00155C  0900               	iorlw	0
  6852  00155E  B4D8               	btfsc	status,2,c
  6853  001560  0012               	return	
  6854                           
  6855                           ;stateMachine/gameController.c: 134:             {;stateMachine/gameController.c: 135:  
      +                                         XF_pushEvent(evLeave,0);
  6856  001562  0E00               	movlw	0
  6857  001564  6E18               	movwf	XF_pushEvent@inISR^0,c
  6858  001566  0E08               	movlw	8
  6859  001568  ECC4  F029         	call	_XF_pushEvent
  6860                           
  6861                           ;stateMachine/gameController.c: 136:                 GameParameters_resetPos(g);
  6862  00156C  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  6863  001570  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  6864  001574  EC3A  F02C         	call	_GameParameters_resetPos	;wreg free
  6865  001578  0012               	return	
  6866  00157A                     l7172:
  6867                           
  6868                           ;stateMachine/gameController.c: 141:             if(LCD_InButton(&(g->btnLeave),g->x,g->
      +                          y))
  6869  00157A  0E50               	movlw	80
  6870  00157C  2437               	addwf	gameControllerController@g^0,w,c
  6871  00157E  6E12               	movwf	LCD_InButton@button^0,c
  6872  001580  0E00               	movlw	0
  6873  001582  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6874  001584  6E13               	movwf	(LCD_InButton@button+1)^0,c
  6875  001586  EE20 F002          	lfsr	2,2
  6876  00158A  5037               	movf	gameControllerController@g^0,w,c
  6877  00158C  26D9               	addwf	fsr2l,f,c
  6878  00158E  5038               	movf	(gameControllerController@g+1)^0,w,c
  6879  001590  22DA               	addwfc	fsr2h,f,c
  6880  001592  CFDE F014          	movff	postinc2,LCD_InButton@posX
  6881  001596  CFDD F015          	movff	postdec2,LCD_InButton@posX+1
  6882  00159A  EE20 F004          	lfsr	2,4
  6883  00159E  5037               	movf	gameControllerController@g^0,w,c
  6884  0015A0  26D9               	addwf	fsr2l,f,c
  6885  0015A2  5038               	movf	(gameControllerController@g+1)^0,w,c
  6886  0015A4  22DA               	addwfc	fsr2h,f,c
  6887  0015A6  CFDE F016          	movff	postinc2,LCD_InButton@posY
  6888  0015AA  CFDD F017          	movff	postdec2,LCD_InButton@posY+1
  6889  0015AE  EC99  F025         	call	_LCD_InButton	;wreg free
  6890  0015B2  0900               	iorlw	0
  6891  0015B4  B4D8               	btfsc	status,2,c
  6892  0015B6  D00B               	goto	l7176
  6893                           
  6894                           ;stateMachine/gameController.c: 142:             {;stateMachine/gameController.c: 143:  
      +                                         XF_pushEvent(evLeave,0);
  6895  0015B8  0E00               	movlw	0
  6896  0015BA  6E18               	movwf	XF_pushEvent@inISR^0,c
  6897  0015BC  0E08               	movlw	8
  6898  0015BE  ECC4  F029         	call	_XF_pushEvent
  6899                           
  6900                           ;stateMachine/gameController.c: 144:                 GameParameters_resetPos(g);
  6901  0015C2  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  6902  0015C6  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  6903  0015CA  EC3A  F02C         	call	_GameParameters_resetPos	;wreg free
  6904  0015CE                     l7176:
  6905                           
  6906                           ;stateMachine/gameController.c: 147:             if (ev==evTimerPos)
  6907  0015CE  0E04               	movlw	4
  6908  0015D0  1839               	xorwf	gameControllerController@ev^0,w,c
  6909  0015D2  A4D8               	btfss	status,2,c
  6910  0015D4  D007               	goto	l7180
  6911                           
  6912                           ;stateMachine/gameController.c: 148:             {;stateMachine/gameController.c: 150:  
      +                                         moovePaddle1(g);
  6913  0015D6  C037  F01C         	movff	gameControllerController@g,moovePaddle1@g
  6914  0015DA  C038  F01D         	movff	gameControllerController@g+1,moovePaddle1@g+1
  6915  0015DE  ECEF  F024         	call	_moovePaddle1	;wreg free
  6916                           
  6917                           ;stateMachine/gameController.c: 152:             }
  6918  0015E2  0012               	return	
  6919  0015E4                     l7180:
  6920  0015E4  0E0A               	movlw	10
  6921  0015E6  1839               	xorwf	gameControllerController@ev^0,w,c
  6922  0015E8  A4D8               	btfss	status,2,c
  6923  0015EA  0012               	return	
  6924                           
  6925                           ;stateMachine/gameController.c: 154:             {;stateMachine/gameController.c: 156:  
      +                                         mooveBall(g);
  6926  0015EC  C037  F025         	movff	gameControllerController@g,mooveBall@g
  6927  0015F0  C038  F026         	movff	gameControllerController@g+1,mooveBall@g+1
  6928  0015F4  ECDA  F02B         	call	_mooveBall	;wreg free
  6929                           
  6930                           ;stateMachine/gameController.c: 157:                 moovePaddle2(g);
  6931  0015F8  C037  F01C         	movff	gameControllerController@g,moovePaddle2@g
  6932  0015FC  C038  F01D         	movff	gameControllerController@g+1,moovePaddle2@g+1
  6933  001600  EC16  F021         	call	_moovePaddle2	;wreg free
  6934                           
  6935                           ;stateMachine/gameController.c: 158:                 XF_scheduleTimer(4-g->level,evGameU
      +                          pdate,1);
  6936  001604  EE20 F006          	lfsr	2,6
  6937  001608  5037               	movf	gameControllerController@g^0,w,c
  6938  00160A  26D9               	addwf	fsr2l,f,c
  6939  00160C  5038               	movf	(gameControllerController@g+1)^0,w,c
  6940  00160E  22DA               	addwfc	fsr2h,f,c
  6941  001610  CFDE F03A          	movff	postinc2,??_gameControllerController
  6942  001614  CFDD F03B          	movff	postdec2,??_gameControllerController+1
  6943  001618  503A               	movf	??_gameControllerController^0,w,c
  6944  00161A  0804               	sublw	4
  6945  00161C  6E13               	movwf	XF_scheduleTimer@tm^0,c
  6946  00161E  503B               	movf	(??_gameControllerController+1)^0,w,c
  6947  001620  A0D8               	btfss	status,0,c
  6948  001622  2AE8               	incf	wreg,f,c
  6949  001624  0800               	sublw	0
  6950  001626  6E14               	movwf	(XF_scheduleTimer@tm+1)^0,c
  6951  001628  0E0A               	movlw	10
  6952  00162A  6E15               	movwf	XF_scheduleTimer@ev^0,c
  6953  00162C  0E01               	movlw	1
  6954  00162E  6E16               	movwf	XF_scheduleTimer@inISR^0,c
  6955  001630  ECED  F029         	call	_XF_scheduleTimer	;wreg free
  6956  001634  0012               	return	
  6957  001636                     l7186:
  6958                           
  6959                           ;stateMachine/gameController.c: 167:             if(LCD_InButton(&(g->btnNewGame),g->x,g
      +                          ->y))
  6960  001636  0E68               	movlw	104
  6961  001638  2437               	addwf	gameControllerController@g^0,w,c
  6962  00163A  6E12               	movwf	LCD_InButton@button^0,c
  6963  00163C  0E00               	movlw	0
  6964  00163E  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6965  001640  6E13               	movwf	(LCD_InButton@button+1)^0,c
  6966  001642  EE20 F002          	lfsr	2,2
  6967  001646  5037               	movf	gameControllerController@g^0,w,c
  6968  001648  26D9               	addwf	fsr2l,f,c
  6969  00164A  5038               	movf	(gameControllerController@g+1)^0,w,c
  6970  00164C  22DA               	addwfc	fsr2h,f,c
  6971  00164E  CFDE F014          	movff	postinc2,LCD_InButton@posX
  6972  001652  CFDD F015          	movff	postdec2,LCD_InButton@posX+1
  6973  001656  EE20 F004          	lfsr	2,4
  6974  00165A  5037               	movf	gameControllerController@g^0,w,c
  6975  00165C  26D9               	addwf	fsr2l,f,c
  6976  00165E  5038               	movf	(gameControllerController@g+1)^0,w,c
  6977  001660  22DA               	addwfc	fsr2h,f,c
  6978  001662  CFDE F016          	movff	postinc2,LCD_InButton@posY
  6979  001666  CFDD F017          	movff	postdec2,LCD_InButton@posY+1
  6980  00166A  EC99  F025         	call	_LCD_InButton	;wreg free
  6981  00166E  0900               	iorlw	0
  6982  001670  B4D8               	btfsc	status,2,c
  6983  001672  D00D               	goto	l7192
  6984                           
  6985                           ;stateMachine/gameController.c: 168:             {;stateMachine/gameController.c: 170:  
      +                                         GameParameters_init(g);
  6986  001674  C037  F02B         	movff	gameControllerController@g,GameParameters_init@s
  6987  001678  C038  F02C         	movff	gameControllerController@g+1,GameParameters_init@s+1
  6988  00167C  EC8B  F00D         	call	_GameParameters_init	;wreg free
  6989                           
  6990                           ;stateMachine/gameController.c: 171:                 XF_pushEvent(evNewGame,0);
  6991  001680  0E00               	movlw	0
  6992  001682  6E18               	movwf	XF_pushEvent@inISR^0,c
  6993  001684  0E0F               	movlw	15
  6994  001686  ECC4  F029         	call	_XF_pushEvent
  6995                           
  6996                           ;stateMachine/gameController.c: 172:                 gameStateMachine=NOGAME;
  6997  00168A  0E00               	movlw	0
  6998  00168C  6E4C               	movwf	_gameStateMachine^0,c
  6999  00168E                     l7192:
  7000                           
  7001                           ;stateMachine/gameController.c: 174:             if(LCD_InButton(&(g->btnTurnOff),g->x,g
      +                          ->y))
  7002  00168E  0E80               	movlw	128
  7003  001690  2437               	addwf	gameControllerController@g^0,w,c
  7004  001692  6E12               	movwf	LCD_InButton@button^0,c
  7005  001694  0E00               	movlw	0
  7006  001696  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  7007  001698  6E13               	movwf	(LCD_InButton@button+1)^0,c
  7008  00169A  EE20 F002          	lfsr	2,2
  7009  00169E  5037               	movf	gameControllerController@g^0,w,c
  7010  0016A0  26D9               	addwf	fsr2l,f,c
  7011  0016A2  5038               	movf	(gameControllerController@g+1)^0,w,c
  7012  0016A4  22DA               	addwfc	fsr2h,f,c
  7013  0016A6  CFDE F014          	movff	postinc2,LCD_InButton@posX
  7014  0016AA  CFDD F015          	movff	postdec2,LCD_InButton@posX+1
  7015  0016AE  EE20 F004          	lfsr	2,4
  7016  0016B2  5037               	movf	gameControllerController@g^0,w,c
  7017  0016B4  26D9               	addwf	fsr2l,f,c
  7018  0016B6  5038               	movf	(gameControllerController@g+1)^0,w,c
  7019  0016B8  22DA               	addwfc	fsr2h,f,c
  7020  0016BA  CFDE F016          	movff	postinc2,LCD_InButton@posY
  7021  0016BE  CFDD F017          	movff	postdec2,LCD_InButton@posY+1
  7022  0016C2  EC99  F025         	call	_LCD_InButton	;wreg free
  7023  0016C6  0900               	iorlw	0
  7024  0016C8  B4D8               	btfsc	status,2,c
  7025  0016CA  0012               	return	
  7026                           
  7027                           ;stateMachine/gameController.c: 175:             {;stateMachine/gameController.c: 176:  
      +                                         XF_pushEvent(evSleep,0);
  7028  0016CC  0E00               	movlw	0
  7029  0016CE  6E18               	movwf	XF_pushEvent@inISR^0,c
  7030  0016D0  0E03               	movlw	3
  7031  0016D2  ECC4  F029         	call	_XF_pushEvent
  7032                           
  7033                           ;stateMachine/gameController.c: 177:                 GameParameters_resetPos(g);
  7034  0016D6  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  7035  0016DA  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  7036  0016DE  EC3A  F02C         	call	_GameParameters_resetPos	;wreg free
  7037  0016E2  0012               	return	
  7038  0016E4                     l7198:
  7039  0016E4  504C               	movf	_gameStateMachine^0,w,c
  7040  0016E6  6E3A               	movwf	??_gameControllerController^0,c
  7041  0016E8  6A3B               	clrf	(??_gameControllerController+1)^0,c
  7042                           
  7043                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7044                           ; Switch size 1, requested type "simple"
  7045                           ; Number of cases is 1, Range of values is 0 to 0
  7046                           ; switch strategies available:
  7047                           ; Name         Instructions Cycles
  7048                           ; simple_byte            4     3 (average)
  7049                           ;	Chosen strategy is simple_byte
  7050  0016EA  503B               	movf	(??_gameControllerController+1)^0,w,c
  7051  0016EC  0A00               	xorlw	0	; case 0
  7052  0016EE  A4D8               	btfss	status,2,c
  7053  0016F0  0012               	return	
  7054                           
  7055                           ; Switch size 1, requested type "simple"
  7056                           ; Number of cases is 5, Range of values is 0 to 4
  7057                           ; switch strategies available:
  7058                           ; Name         Instructions Cycles
  7059                           ; simple_byte           16     9 (average)
  7060                           ;	Chosen strategy is simple_byte
  7061  0016F2  503A               	movf	??_gameControllerController^0,w,c
  7062  0016F4  0A00               	xorlw	0	; case 0
  7063  0016F6  B4D8               	btfsc	status,2,c
  7064  0016F8  D606               	goto	l7144
  7065  0016FA  0A01               	xorlw	1	; case 1
  7066  0016FC  B4D8               	btfsc	status,2,c
  7067  0016FE  D6AC               	goto	l7154
  7068  001700  0A03               	xorlw	3	; case 2
  7069  001702  B4D8               	btfsc	status,2,c
  7070  001704  D73A               	goto	l7172
  7071  001706  0A01               	xorlw	1	; case 3
  7072  001708  B4D8               	btfsc	status,2,c
  7073  00170A  0012               	return	
  7074  00170C  0A07               	xorlw	7	; case 4
  7075  00170E  A4D8               	btfss	status,2,c
  7076  001710  0012               	return	
  7077  001712  D791               	goto	l7186
  7078  001714                     __end_of_gameControllerController:
  7079                           	callstack 0
  7080                           
  7081 ;; *************** function _moovePaddle2 *****************
  7082 ;; Defined at:
  7083 ;;		line 25 in file "gameFunction.c"
  7084 ;; Parameters:    Size  Location     Type
  7085 ;;  g               2   27[COMRAM] PTR struct GameParameter
  7086 ;;		 -> g1(240), 
  7087 ;; Auto vars:     Size  Location     Type
  7088 ;;		None
  7089 ;; Return value:  Size  Location     Type
  7090 ;;                  1    wreg      void 
  7091 ;; Registers used:
  7092 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7093 ;; Tracked objects:
  7094 ;;		On entry : 0/0
  7095 ;;		On exit  : 0/0
  7096 ;;		Unchanged: 0/0
  7097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7098 ;;      Params:         2       0       0       0       0       0       0
  7099 ;;      Locals:         0       0       0       0       0       0       0
  7100 ;;      Temps:          6       0       0       0       0       0       0
  7101 ;;      Totals:         8       0       0       0       0       0       0
  7102 ;;Total ram usage:        8 bytes
  7103 ;; Hardware stack levels used: 1
  7104 ;; Hardware stack levels required when called: 6
  7105 ;; This function calls:
  7106 ;;		_Paddle_addX
  7107 ;;		_XF_pushEvent
  7108 ;; This function is called by:
  7109 ;;		_gameControllerController
  7110 ;; This function uses a non-reentrant model
  7111 ;;
  7112                           
  7113                           	psect	text25
  7114  00422C                     __ptext25:
  7115                           	callstack 0
  7116  00422C                     _moovePaddle2:
  7117                           	callstack 20
  7118                           
  7119                           ;gameFunction.c: 25: void moovePaddle2(GameParameters* g);gameFunction.c: 26: {;gameFunc
      +                          tion.c: 28:     if(g->p2.x+(50/2)<g->b.x-2)
  7120                           
  7121                           ;incstack = 0
  7122  00422C  0EFE               	movlw	254
  7123  00422E  6E1E               	movwf	??_moovePaddle2^0,c
  7124  004230  0EFF               	movlw	255
  7125  004232  6E1F               	movwf	(??_moovePaddle2+1)^0,c
  7126  004234  EE20 F0CA          	lfsr	2,202
  7127  004238  501C               	movf	moovePaddle2@g^0,w,c
  7128  00423A  26D9               	addwf	fsr2l,f,c
  7129  00423C  501D               	movf	(moovePaddle2@g+1)^0,w,c
  7130  00423E  22DA               	addwfc	fsr2h,f,c
  7131  004240  CFDE F020          	movff	postinc2,??_moovePaddle2+2
  7132  004244  CFDD F021          	movff	postdec2,??_moovePaddle2+3
  7133  004248  501E               	movf	??_moovePaddle2^0,w,c
  7134  00424A  2620               	addwf	(??_moovePaddle2+2)^0,f,c
  7135  00424C  501F               	movf	(??_moovePaddle2+1)^0,w,c
  7136  00424E  2221               	addwfc	(??_moovePaddle2+3)^0,f,c
  7137  004250  EE20 F0E0          	lfsr	2,224
  7138  004254  501C               	movf	moovePaddle2@g^0,w,c
  7139  004256  26D9               	addwf	fsr2l,f,c
  7140  004258  501D               	movf	(moovePaddle2@g+1)^0,w,c
  7141  00425A  22DA               	addwfc	fsr2h,f,c
  7142  00425C  CFDE F022          	movff	postinc2,??_moovePaddle2+4
  7143  004260  CFDD F023          	movff	postdec2,??_moovePaddle2+5
  7144  004264  0E19               	movlw	25
  7145  004266  2622               	addwf	(??_moovePaddle2+4)^0,f,c
  7146  004268  0E00               	movlw	0
  7147  00426A  2223               	addwfc	(??_moovePaddle2+5)^0,f,c
  7148  00426C  5020               	movf	(??_moovePaddle2+2)^0,w,c
  7149  00426E  5C22               	subwf	(??_moovePaddle2+4)^0,w,c
  7150  004270  5021               	movf	(??_moovePaddle2+3)^0,w,c
  7151  004272  5823               	subwfb	(??_moovePaddle2+5)^0,w,c
  7152  004274  B0D8               	btfsc	status,0,c
  7153  004276  D016               	goto	l7066
  7154                           
  7155                           ;gameFunction.c: 29:     {;gameFunction.c: 30:         Paddle_addX(&g->p2,2,1);
  7156  004278  0EE0               	movlw	224
  7157  00427A  241C               	addwf	moovePaddle2@g^0,w,c
  7158  00427C  6E12               	movwf	Paddle_addX@p^0,c
  7159  00427E  0E00               	movlw	0
  7160  004280  201D               	addwfc	(moovePaddle2@g+1)^0,w,c
  7161  004282  6E13               	movwf	(Paddle_addX@p+1)^0,c
  7162  004284  0E00               	movlw	0
  7163  004286  6E15               	movwf	(Paddle_addX@value+1)^0,c
  7164  004288  0E02               	movlw	2
  7165  00428A  6E14               	movwf	Paddle_addX@value^0,c
  7166  00428C  0E00               	movlw	0
  7167  00428E  6E17               	movwf	(Paddle_addX@add+1)^0,c
  7168  004290  0E01               	movlw	1
  7169  004292  6E16               	movwf	Paddle_addX@add^0,c
  7170  004294  ECC7  F022         	call	_Paddle_addX	;wreg free
  7171                           
  7172                           ;gameFunction.c: 31:         XF_pushEvent(evRedrawPaddle2,0);
  7173  004298  0E00               	movlw	0
  7174  00429A  6E18               	movwf	XF_pushEvent@inISR^0,c
  7175  00429C  0E0C               	movlw	12
  7176  00429E  ECC4  F029         	call	_XF_pushEvent
  7177                           
  7178                           ;gameFunction.c: 32:     }
  7179  0042A2  0012               	return	
  7180  0042A4                     l7066:
  7181  0042A4  EE20 F0E0          	lfsr	2,224
  7182  0042A8  501C               	movf	moovePaddle2@g^0,w,c
  7183  0042AA  26D9               	addwf	fsr2l,f,c
  7184  0042AC  501D               	movf	(moovePaddle2@g+1)^0,w,c
  7185  0042AE  22DA               	addwfc	fsr2h,f,c
  7186  0042B0  CFDE F01E          	movff	postinc2,??_moovePaddle2
  7187  0042B4  CFDD F01F          	movff	postdec2,??_moovePaddle2+1
  7188  0042B8  0E19               	movlw	25
  7189  0042BA  261E               	addwf	??_moovePaddle2^0,f,c
  7190  0042BC  0E00               	movlw	0
  7191  0042BE  221F               	addwfc	(??_moovePaddle2+1)^0,f,c
  7192  0042C0  EE20 F0CA          	lfsr	2,202
  7193  0042C4  501C               	movf	moovePaddle2@g^0,w,c
  7194  0042C6  26D9               	addwf	fsr2l,f,c
  7195  0042C8  501D               	movf	(moovePaddle2@g+1)^0,w,c
  7196  0042CA  22DA               	addwfc	fsr2h,f,c
  7197  0042CC  CFDE F020          	movff	postinc2,??_moovePaddle2+2
  7198  0042D0  CFDD F021          	movff	postdec2,??_moovePaddle2+3
  7199  0042D4  0E02               	movlw	2
  7200  0042D6  2620               	addwf	(??_moovePaddle2+2)^0,f,c
  7201  0042D8  0E00               	movlw	0
  7202  0042DA  2221               	addwfc	(??_moovePaddle2+3)^0,f,c
  7203  0042DC  501E               	movf	??_moovePaddle2^0,w,c
  7204  0042DE  5C20               	subwf	(??_moovePaddle2+2)^0,w,c
  7205  0042E0  501F               	movf	(??_moovePaddle2+1)^0,w,c
  7206  0042E2  5821               	subwfb	(??_moovePaddle2+3)^0,w,c
  7207  0042E4  B0D8               	btfsc	status,0,c
  7208  0042E6  0012               	return	
  7209                           
  7210                           ;gameFunction.c: 34:     {;gameFunction.c: 35:         Paddle_addX(&g->p2,2,0);
  7211  0042E8  0EE0               	movlw	224
  7212  0042EA  241C               	addwf	moovePaddle2@g^0,w,c
  7213  0042EC  6E12               	movwf	Paddle_addX@p^0,c
  7214  0042EE  0E00               	movlw	0
  7215  0042F0  201D               	addwfc	(moovePaddle2@g+1)^0,w,c
  7216  0042F2  6E13               	movwf	(Paddle_addX@p+1)^0,c
  7217  0042F4  0E00               	movlw	0
  7218  0042F6  6E15               	movwf	(Paddle_addX@value+1)^0,c
  7219  0042F8  0E02               	movlw	2
  7220  0042FA  6E14               	movwf	Paddle_addX@value^0,c
  7221  0042FC  0E00               	movlw	0
  7222  0042FE  6E17               	movwf	(Paddle_addX@add+1)^0,c
  7223  004300  0E00               	movlw	0
  7224  004302  6E16               	movwf	Paddle_addX@add^0,c
  7225  004304  ECC7  F022         	call	_Paddle_addX	;wreg free
  7226                           
  7227                           ;gameFunction.c: 36:         XF_pushEvent(evRedrawPaddle2,0);
  7228  004308  0E00               	movlw	0
  7229  00430A  6E18               	movwf	XF_pushEvent@inISR^0,c
  7230  00430C  0E0C               	movlw	12
  7231  00430E  ECC4  F029         	call	_XF_pushEvent
  7232  004312  0012               	return		;funcret
  7233  004314                     __end_of_moovePaddle2:
  7234                           	callstack 0
  7235                           
  7236 ;; *************** function _moovePaddle1 *****************
  7237 ;; Defined at:
  7238 ;;		line 5 in file "gameFunction.c"
  7239 ;; Parameters:    Size  Location     Type
  7240 ;;  g               2   27[COMRAM] PTR struct GameParameter
  7241 ;;		 -> g1(240), 
  7242 ;; Auto vars:     Size  Location     Type
  7243 ;;		None
  7244 ;; Return value:  Size  Location     Type
  7245 ;;                  1    wreg      void 
  7246 ;; Registers used:
  7247 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7248 ;; Tracked objects:
  7249 ;;		On entry : 0/0
  7250 ;;		On exit  : 0/0
  7251 ;;		Unchanged: 0/0
  7252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7253 ;;      Params:         2       0       0       0       0       0       0
  7254 ;;      Locals:         0       0       0       0       0       0       0
  7255 ;;      Temps:          2       0       0       0       0       0       0
  7256 ;;      Totals:         4       0       0       0       0       0       0
  7257 ;;Total ram usage:        4 bytes
  7258 ;; Hardware stack levels used: 1
  7259 ;; Hardware stack levels required when called: 6
  7260 ;; This function calls:
  7261 ;;		_GameParameters_resetPos
  7262 ;;		_Paddle_addX
  7263 ;;		_XF_pushEvent
  7264 ;; This function is called by:
  7265 ;;		_gameControllerController
  7266 ;; This function uses a non-reentrant model
  7267 ;;
  7268                           
  7269                           	psect	text26
  7270  0049DE                     __ptext26:
  7271                           	callstack 0
  7272  0049DE                     _moovePaddle1:
  7273                           	callstack 20
  7274                           
  7275                           ;gameFunction.c: 5: void moovePaddle1(GameParameters* g);gameFunction.c: 6: {;gameFuncti
      +                          on.c: 8:     if((g->x>0)&&(g->x<110))
  7276                           
  7277                           ;incstack = 0
  7278  0049DE  EE20 F002          	lfsr	2,2
  7279  0049E2  501C               	movf	moovePaddle1@g^0,w,c
  7280  0049E4  26D9               	addwf	fsr2l,f,c
  7281  0049E6  501D               	movf	(moovePaddle1@g+1)^0,w,c
  7282  0049E8  22DA               	addwfc	fsr2h,f,c
  7283  0049EA  50DE               	movf	postinc2,w,c
  7284  0049EC  10DE               	iorwf	postinc2,w,c
  7285  0049EE  B4D8               	btfsc	status,2,c
  7286  0049F0  D023               	goto	l7056
  7287  0049F2  EE20 F002          	lfsr	2,2
  7288  0049F6  501C               	movf	moovePaddle1@g^0,w,c
  7289  0049F8  26D9               	addwf	fsr2l,f,c
  7290  0049FA  501D               	movf	(moovePaddle1@g+1)^0,w,c
  7291  0049FC  22DA               	addwfc	fsr2h,f,c
  7292  0049FE  0E01               	movlw	1
  7293  004A00  50DB               	movf	plusw2,w,c
  7294  004A02  E11A               	bnz	l7056
  7295  004A04  0E6E               	movlw	110
  7296  004A06  5CDE               	subwf	postinc2,w,c
  7297  004A08  B0D8               	btfsc	status,0,c
  7298  004A0A  D016               	goto	l7056
  7299                           
  7300                           ;gameFunction.c: 9:     {;gameFunction.c: 10:         GameParameters_resetPos(g);
  7301  004A0C  C01C  F012         	movff	moovePaddle1@g,GameParameters_resetPos@s
  7302  004A10  C01D  F013         	movff	moovePaddle1@g+1,GameParameters_resetPos@s+1
  7303  004A14  EC3A  F02C         	call	_GameParameters_resetPos	;wreg free
  7304                           
  7305                           ;gameFunction.c: 11:         Paddle_addX(&g->p1,20,0);
  7306  004A18  0ED6               	movlw	214
  7307  004A1A  241C               	addwf	moovePaddle1@g^0,w,c
  7308  004A1C  6E12               	movwf	Paddle_addX@p^0,c
  7309  004A1E  0E00               	movlw	0
  7310  004A20  201D               	addwfc	(moovePaddle1@g+1)^0,w,c
  7311  004A22  6E13               	movwf	(Paddle_addX@p+1)^0,c
  7312  004A24  0E00               	movlw	0
  7313  004A26  6E15               	movwf	(Paddle_addX@value+1)^0,c
  7314  004A28  0E14               	movlw	20
  7315  004A2A  6E14               	movwf	Paddle_addX@value^0,c
  7316  004A2C  0E00               	movlw	0
  7317  004A2E  6E17               	movwf	(Paddle_addX@add+1)^0,c
  7318  004A30  0E00               	movlw	0
  7319  004A32  6E16               	movwf	Paddle_addX@add^0,c
  7320  004A34  ECC7  F022         	call	_Paddle_addX	;wreg free
  7321  004A38                     l7056:
  7322                           
  7323                           ;gameFunction.c: 14:     if(g->x>=130)
  7324  004A38  EE20 F002          	lfsr	2,2
  7325  004A3C  501C               	movf	moovePaddle1@g^0,w,c
  7326  004A3E  26D9               	addwf	fsr2l,f,c
  7327  004A40  501D               	movf	(moovePaddle1@g+1)^0,w,c
  7328  004A42  22DA               	addwfc	fsr2h,f,c
  7329  004A44  0E01               	movlw	1
  7330  004A46  50DB               	movf	plusw2,w,c
  7331  004A48  E104               	bnz	u4670
  7332  004A4A  0E82               	movlw	130
  7333  004A4C  5CDE               	subwf	postinc2,w,c
  7334  004A4E  A0D8               	btfss	status,0,c
  7335  004A50  D016               	goto	l799
  7336  004A52                     u4670:
  7337                           
  7338                           ;gameFunction.c: 15:     {;gameFunction.c: 16:         GameParameters_resetPos(g);
  7339  004A52  C01C  F012         	movff	moovePaddle1@g,GameParameters_resetPos@s
  7340  004A56  C01D  F013         	movff	moovePaddle1@g+1,GameParameters_resetPos@s+1
  7341  004A5A  EC3A  F02C         	call	_GameParameters_resetPos	;wreg free
  7342                           
  7343                           ;gameFunction.c: 17:         Paddle_addX(&g->p1,20,1);
  7344  004A5E  0ED6               	movlw	214
  7345  004A60  241C               	addwf	moovePaddle1@g^0,w,c
  7346  004A62  6E12               	movwf	Paddle_addX@p^0,c
  7347  004A64  0E00               	movlw	0
  7348  004A66  201D               	addwfc	(moovePaddle1@g+1)^0,w,c
  7349  004A68  6E13               	movwf	(Paddle_addX@p+1)^0,c
  7350  004A6A  0E00               	movlw	0
  7351  004A6C  6E15               	movwf	(Paddle_addX@value+1)^0,c
  7352  004A6E  0E14               	movlw	20
  7353  004A70  6E14               	movwf	Paddle_addX@value^0,c
  7354  004A72  0E00               	movlw	0
  7355  004A74  6E17               	movwf	(Paddle_addX@add+1)^0,c
  7356  004A76  0E01               	movlw	1
  7357  004A78  6E16               	movwf	Paddle_addX@add^0,c
  7358  004A7A  ECC7  F022         	call	_Paddle_addX	;wreg free
  7359  004A7E                     l799:
  7360                           
  7361                           ;gameFunction.c: 19:     XF_pushEvent(evRedrawPaddle1,0);
  7362  004A7E  0E00               	movlw	0
  7363  004A80  6E18               	movwf	XF_pushEvent@inISR^0,c
  7364  004A82  0E0B               	movlw	11
  7365  004A84  ECC4  F029         	call	_XF_pushEvent
  7366  004A88  0012               	return		;funcret
  7367  004A8A                     __end_of_moovePaddle1:
  7368                           	callstack 0
  7369                           
  7370 ;; *************** function _Paddle_addX *****************
  7371 ;; Defined at:
  7372 ;;		line 28 in file "class/paddle.c"
  7373 ;; Parameters:    Size  Location     Type
  7374 ;;  p               2   17[COMRAM] PTR struct Paddle
  7375 ;;		 -> g1(240), 
  7376 ;;  value           2   19[COMRAM] unsigned short 
  7377 ;;  add             2   21[COMRAM] unsigned short 
  7378 ;; Auto vars:     Size  Location     Type
  7379 ;;		None
  7380 ;; Return value:  Size  Location     Type
  7381 ;;                  1    wreg      void 
  7382 ;; Registers used:
  7383 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7384 ;; Tracked objects:
  7385 ;;		On entry : 0/0
  7386 ;;		On exit  : 0/0
  7387 ;;		Unchanged: 0/0
  7388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7389 ;;      Params:         6       0       0       0       0       0       0
  7390 ;;      Locals:         0       0       0       0       0       0       0
  7391 ;;      Temps:          4       0       0       0       0       0       0
  7392 ;;      Totals:        10       0       0       0       0       0       0
  7393 ;;Total ram usage:       10 bytes
  7394 ;; Hardware stack levels used: 1
  7395 ;; Hardware stack levels required when called: 4
  7396 ;; This function calls:
  7397 ;;		Nothing
  7398 ;; This function is called by:
  7399 ;;		_moovePaddle1
  7400 ;;		_moovePaddle2
  7401 ;; This function uses a non-reentrant model
  7402 ;;
  7403                           
  7404                           	psect	text27
  7405  00458E                     __ptext27:
  7406                           	callstack 0
  7407  00458E                     _Paddle_addX:
  7408                           	callstack 21
  7409                           
  7410                           ;class/paddle.c: 28: void Paddle_addX(struct Paddle* p,uint16_t value,uint16_t add);clas
      +                          s/paddle.c: 29: {;class/paddle.c: 30:     if(add==1)
  7411                           
  7412                           ;incstack = 0
  7413  00458E  0416               	decf	Paddle_addX@add^0,w,c
  7414  004590  1017               	iorwf	(Paddle_addX@add+1)^0,w,c
  7415  004592  A4D8               	btfss	status,2,c
  7416  004594  D02F               	goto	l6482
  7417                           
  7418                           ;class/paddle.c: 31:     {;class/paddle.c: 32:         p->x=(p->x)+value;
  7419  004596  C012  FFD9         	movff	Paddle_addX@p,fsr2l
  7420  00459A  C013  FFDA         	movff	Paddle_addX@p+1,fsr2h
  7421  00459E  CFDE F018          	movff	postinc2,??_Paddle_addX
  7422  0045A2  CFDD F019          	movff	postdec2,??_Paddle_addX+1
  7423  0045A6  5014               	movf	Paddle_addX@value^0,w,c
  7424  0045A8  2618               	addwf	??_Paddle_addX^0,f,c
  7425  0045AA  5015               	movf	(Paddle_addX@value+1)^0,w,c
  7426  0045AC  2219               	addwfc	(??_Paddle_addX+1)^0,f,c
  7427  0045AE  C012  FFD9         	movff	Paddle_addX@p,fsr2l
  7428  0045B2  C013  FFDA         	movff	Paddle_addX@p+1,fsr2h
  7429  0045B6  C018  FFDE         	movff	??_Paddle_addX,postinc2
  7430  0045BA  C019  FFDD         	movff	??_Paddle_addX+1,postdec2
  7431                           
  7432                           ;class/paddle.c: 33:         if((p->x+50)>239)
  7433  0045BE  C012  FFD9         	movff	Paddle_addX@p,fsr2l
  7434  0045C2  C013  FFDA         	movff	Paddle_addX@p+1,fsr2h
  7435  0045C6  CFDE F018          	movff	postinc2,??_Paddle_addX
  7436  0045CA  CFDD F019          	movff	postdec2,??_Paddle_addX+1
  7437  0045CE  0E32               	movlw	50
  7438  0045D0  2618               	addwf	??_Paddle_addX^0,f,c
  7439  0045D2  0E00               	movlw	0
  7440  0045D4  2219               	addwfc	(??_Paddle_addX+1)^0,f,c
  7441  0045D6  5019               	movf	(??_Paddle_addX+1)^0,w,c
  7442  0045D8  E104               	bnz	u3990
  7443  0045DA  0EF0               	movlw	240
  7444  0045DC  5C18               	subwf	??_Paddle_addX^0,w,c
  7445  0045DE  A0D8               	btfss	status,0,c
  7446  0045E0  0012               	return	
  7447  0045E2                     u3990:
  7448                           
  7449                           ;class/paddle.c: 34:         {;class/paddle.c: 35:             p->x=239-(50);
  7450  0045E2  C012  FFD9         	movff	Paddle_addX@p,fsr2l
  7451  0045E6  C013  FFDA         	movff	Paddle_addX@p+1,fsr2h
  7452  0045EA  0EBD               	movlw	189
  7453  0045EC  6EDE               	movwf	postinc2,c
  7454  0045EE  0E00               	movlw	0
  7455  0045F0  6EDD               	movwf	postdec2,c
  7456  0045F2  0012               	return	
  7457  0045F4                     l6482:
  7458                           
  7459                           ;class/paddle.c: 39:     {;class/paddle.c: 40:         if((p->x)<value+1)
  7460  0045F4  0E01               	movlw	1
  7461  0045F6  2414               	addwf	Paddle_addX@value^0,w,c
  7462  0045F8  6E18               	movwf	??_Paddle_addX^0,c
  7463  0045FA  0E00               	movlw	0
  7464  0045FC  2015               	addwfc	(Paddle_addX@value+1)^0,w,c
  7465  0045FE  6E19               	movwf	(??_Paddle_addX+1)^0,c
  7466  004600  C012  FFD9         	movff	Paddle_addX@p,fsr2l
  7467  004604  C013  FFDA         	movff	Paddle_addX@p+1,fsr2h
  7468  004608  5018               	movf	??_Paddle_addX^0,w,c
  7469  00460A  5CDE               	subwf	postinc2,w,c
  7470  00460C  5019               	movf	(??_Paddle_addX+1)^0,w,c
  7471  00460E  58DE               	subwfb	postinc2,w,c
  7472  004610  B0D8               	btfsc	status,0,c
  7473  004612  D009               	goto	l6486
  7474                           
  7475                           ;class/paddle.c: 41:         {;class/paddle.c: 42:             p->x=0;
  7476  004614  C012  FFD9         	movff	Paddle_addX@p,fsr2l
  7477  004618  C013  FFDA         	movff	Paddle_addX@p+1,fsr2h
  7478  00461C  0E00               	movlw	0
  7479  00461E  6EDE               	movwf	postinc2,c
  7480  004620  0E00               	movlw	0
  7481  004622  6EDD               	movwf	postdec2,c
  7482                           
  7483                           ;class/paddle.c: 43:         }
  7484  004624  0012               	return	
  7485  004626                     l6486:
  7486                           
  7487                           ;class/paddle.c: 45:         {;class/paddle.c: 46:             p->x=(p->x)-value;
  7488  004626  C012  FFD9         	movff	Paddle_addX@p,fsr2l
  7489  00462A  C013  FFDA         	movff	Paddle_addX@p+1,fsr2h
  7490  00462E  CFDE F018          	movff	postinc2,??_Paddle_addX
  7491  004632  CFDD F019          	movff	postdec2,??_Paddle_addX+1
  7492  004636  5014               	movf	Paddle_addX@value^0,w,c
  7493  004638  5E18               	subwf	??_Paddle_addX^0,f,c
  7494  00463A  5015               	movf	(Paddle_addX@value+1)^0,w,c
  7495  00463C  5A19               	subwfb	(??_Paddle_addX+1)^0,f,c
  7496  00463E  C012  FFD9         	movff	Paddle_addX@p,fsr2l
  7497  004642  C013  FFDA         	movff	Paddle_addX@p+1,fsr2h
  7498  004646  C018  FFDE         	movff	??_Paddle_addX,postinc2
  7499  00464A  C019  FFDD         	movff	??_Paddle_addX+1,postdec2
  7500  00464E  0012               	return		;funcret
  7501  004650                     __end_of_Paddle_addX:
  7502                           	callstack 0
  7503                           
  7504 ;; *************** function _GameParameters_resetPos *****************
  7505 ;; Defined at:
  7506 ;;		line 62 in file "class/gameParameters.c"
  7507 ;; Parameters:    Size  Location     Type
  7508 ;;  s               2   17[COMRAM] PTR struct GameParameter
  7509 ;;		 -> g1(240), 
  7510 ;; Auto vars:     Size  Location     Type
  7511 ;;		None
  7512 ;; Return value:  Size  Location     Type
  7513 ;;                  1    wreg      void 
  7514 ;; Registers used:
  7515 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7516 ;; Tracked objects:
  7517 ;;		On entry : 0/0
  7518 ;;		On exit  : 0/0
  7519 ;;		Unchanged: 0/0
  7520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7521 ;;      Params:         2       0       0       0       0       0       0
  7522 ;;      Locals:         0       0       0       0       0       0       0
  7523 ;;      Temps:          0       0       0       0       0       0       0
  7524 ;;      Totals:         2       0       0       0       0       0       0
  7525 ;;Total ram usage:        2 bytes
  7526 ;; Hardware stack levels used: 1
  7527 ;; Hardware stack levels required when called: 4
  7528 ;; This function calls:
  7529 ;;		Nothing
  7530 ;; This function is called by:
  7531 ;;		_gameControllerController
  7532 ;;		_moovePaddle1
  7533 ;; This function uses a non-reentrant model
  7534 ;;
  7535                           
  7536                           	psect	text28
  7537  005874                     __ptext28:
  7538                           	callstack 0
  7539  005874                     _GameParameters_resetPos:
  7540                           	callstack 21
  7541                           
  7542                           ;class/gameParameters.c: 62: void GameParameters_resetPos(struct GameParameters* s);clas
      +                          s/gameParameters.c: 63: {;class/gameParameters.c: 64:     s->x=0;
  7543                           
  7544                           ;incstack = 0
  7545  005874  EE20 F002          	lfsr	2,2
  7546  005878  5012               	movf	GameParameters_resetPos@s^0,w,c
  7547  00587A  26D9               	addwf	fsr2l,f,c
  7548  00587C  5013               	movf	(GameParameters_resetPos@s+1)^0,w,c
  7549  00587E  22DA               	addwfc	fsr2h,f,c
  7550  005880  0E00               	movlw	0
  7551  005882  6EDE               	movwf	postinc2,c
  7552  005884  0E00               	movlw	0
  7553  005886  6EDD               	movwf	postdec2,c
  7554                           
  7555                           ;class/gameParameters.c: 65:     s->y=0;
  7556  005888  EE20 F004          	lfsr	2,4
  7557  00588C  5012               	movf	GameParameters_resetPos@s^0,w,c
  7558  00588E  26D9               	addwf	fsr2l,f,c
  7559  005890  5013               	movf	(GameParameters_resetPos@s+1)^0,w,c
  7560  005892  22DA               	addwfc	fsr2h,f,c
  7561  005894  0E00               	movlw	0
  7562  005896  6EDE               	movwf	postinc2,c
  7563  005898  0E00               	movlw	0
  7564  00589A  6EDD               	movwf	postdec2,c
  7565  00589C  0012               	return		;funcret
  7566  00589E                     __end_of_GameParameters_resetPos:
  7567                           	callstack 0
  7568                           
  7569 ;; *************** function _mooveBall *****************
  7570 ;; Defined at:
  7571 ;;		line 44 in file "gameFunction.c"
  7572 ;; Parameters:    Size  Location     Type
  7573 ;;  g               2   36[COMRAM] PTR struct GameParameter
  7574 ;;		 -> g1(240), 
  7575 ;; Auto vars:     Size  Location     Type
  7576 ;;		None
  7577 ;; Return value:  Size  Location     Type
  7578 ;;                  1    wreg      void 
  7579 ;; Registers used:
  7580 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7581 ;; Tracked objects:
  7582 ;;		On entry : 0/0
  7583 ;;		On exit  : 0/0
  7584 ;;		Unchanged: 0/0
  7585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7586 ;;      Params:         2       0       0       0       0       0       0
  7587 ;;      Locals:         0       0       0       0       0       0       0
  7588 ;;      Temps:          0       0       0       0       0       0       0
  7589 ;;      Totals:         2       0       0       0       0       0       0
  7590 ;;Total ram usage:        2 bytes
  7591 ;; Hardware stack levels used: 1
  7592 ;; Hardware stack levels required when called: 7
  7593 ;; This function calls:
  7594 ;;		_Ball_Update
  7595 ;;		_XF_pushEvent
  7596 ;;		_checkCollision
  7597 ;; This function is called by:
  7598 ;;		_gameControllerController
  7599 ;; This function uses a non-reentrant model
  7600 ;;
  7601                           
  7602                           	psect	text29
  7603  0057B4                     __ptext29:
  7604                           	callstack 0
  7605  0057B4                     _mooveBall:
  7606                           	callstack 19
  7607                           
  7608                           ;gameFunction.c: 44: void mooveBall(GameParameters* g);gameFunction.c: 45: {;gameFunctio
      +                          n.c: 46:     checkCollision(g);
  7609                           
  7610                           ;incstack = 0
  7611  0057B4  C025  F01B         	movff	mooveBall@g,checkCollision@g
  7612  0057B8  C026  F01C         	movff	mooveBall@g+1,checkCollision@g+1
  7613  0057BC  EC39  F000         	call	_checkCollision	;wreg free
  7614                           
  7615                           ;gameFunction.c: 47:     Ball_Update(&g->b);
  7616  0057C0  0ECA               	movlw	202
  7617  0057C2  2425               	addwf	mooveBall@g^0,w,c
  7618  0057C4  6E12               	movwf	Ball_Update@b^0,c
  7619  0057C6  0E00               	movlw	0
  7620  0057C8  2026               	addwfc	(mooveBall@g+1)^0,w,c
  7621  0057CA  6E13               	movwf	(Ball_Update@b+1)^0,c
  7622  0057CC  EC39  F028         	call	_Ball_Update	;wreg free
  7623                           
  7624                           ;gameFunction.c: 48:     XF_pushEvent(evRedrawBall,0);
  7625  0057D0  0E00               	movlw	0
  7626  0057D2  6E18               	movwf	XF_pushEvent@inISR^0,c
  7627  0057D4  0E0D               	movlw	13
  7628  0057D6  ECC4  F029         	call	_XF_pushEvent
  7629                           
  7630                           ;gameFunction.c: 49:     XF_pushEvent(evRedrawScore,0);
  7631  0057DA  0E00               	movlw	0
  7632  0057DC  6E18               	movwf	XF_pushEvent@inISR^0,c
  7633  0057DE  0E0E               	movlw	14
  7634  0057E0  ECC4  F029         	call	_XF_pushEvent
  7635  0057E4  0012               	return		;funcret
  7636  0057E6                     __end_of_mooveBall:
  7637                           	callstack 0
  7638                           
  7639 ;; *************** function _checkCollision *****************
  7640 ;; Defined at:
  7641 ;;		line 55 in file "gameFunction.c"
  7642 ;; Parameters:    Size  Location     Type
  7643 ;;  g               2   26[COMRAM] PTR struct GameParameter
  7644 ;;		 -> g1(240), 
  7645 ;; Auto vars:     Size  Location     Type
  7646 ;;  s              20    0        unsigned char [20]
  7647 ;; Return value:  Size  Location     Type
  7648 ;;                  1    wreg      void 
  7649 ;; Registers used:
  7650 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7651 ;; Tracked objects:
  7652 ;;		On entry : 0/0
  7653 ;;		On exit  : 0/0
  7654 ;;		Unchanged: 0/0
  7655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7656 ;;      Params:         2       0       0       0       0       0       0
  7657 ;;      Locals:         0       0       0       0       0       0       0
  7658 ;;      Temps:          8       0       0       0       0       0       0
  7659 ;;      Totals:        10       0       0       0       0       0       0
  7660 ;;Total ram usage:       10 bytes
  7661 ;; Hardware stack levels used: 1
  7662 ;; Hardware stack levels required when called: 6
  7663 ;; This function calls:
  7664 ;;		_XF_pushEvent
  7665 ;; This function is called by:
  7666 ;;		_mooveBall
  7667 ;; This function uses a non-reentrant model
  7668 ;;
  7669                           
  7670                           	psect	text30
  7671  000072                     __ptext30:
  7672                           	callstack 0
  7673  000072                     _checkCollision:
  7674                           	callstack 19
  7675                           
  7676                           ;gameFunction.c: 55: void checkCollision(GameParameters* g);gameFunction.c: 56: {;gameFu
      +                          nction.c: 57:     char s[20];;gameFunction.c: 59:     if(g->b.x+g->b.dx+8>=239)
  7677                           
  7678                           ;incstack = 0
  7679  000072  EE20 F0D2          	lfsr	2,210
  7680  000076  501B               	movf	checkCollision@g^0,w,c
  7681  000078  26D9               	addwf	fsr2l,f,c
  7682  00007A  501C               	movf	(checkCollision@g+1)^0,w,c
  7683  00007C  22DA               	addwfc	fsr2h,f,c
  7684  00007E  CFDE F01D          	movff	postinc2,??_checkCollision
  7685  000082  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7686  000086  EE20 F0CA          	lfsr	2,202
  7687  00008A  501B               	movf	checkCollision@g^0,w,c
  7688  00008C  26D9               	addwf	fsr2l,f,c
  7689  00008E  501C               	movf	(checkCollision@g+1)^0,w,c
  7690  000090  22DA               	addwfc	fsr2h,f,c
  7691  000092  CFDE F01F          	movff	postinc2,??_checkCollision+2
  7692  000096  CFDD F020          	movff	postdec2,??_checkCollision+3
  7693  00009A  501D               	movf	??_checkCollision^0,w,c
  7694  00009C  261F               	addwf	(??_checkCollision+2)^0,f,c
  7695  00009E  501E               	movf	(??_checkCollision+1)^0,w,c
  7696  0000A0  2220               	addwfc	(??_checkCollision+3)^0,f,c
  7697  0000A2  0E08               	movlw	8
  7698  0000A4  261F               	addwf	(??_checkCollision+2)^0,f,c
  7699  0000A6  0E00               	movlw	0
  7700  0000A8  2220               	addwfc	(??_checkCollision+3)^0,f,c
  7701  0000AA  5020               	movf	(??_checkCollision+3)^0,w,c
  7702  0000AC  E104               	bnz	u4080
  7703  0000AE  0EEF               	movlw	239
  7704  0000B0  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  7705  0000B2  A0D8               	btfss	status,0,c
  7706  0000B4  D02C               	goto	l812
  7707  0000B6                     u4080:
  7708                           
  7709                           ;gameFunction.c: 60:     {;gameFunction.c: 61:         g->b.dx=-g->b.dx;
  7710  0000B6  EE20 F0D2          	lfsr	2,210
  7711  0000BA  501B               	movf	checkCollision@g^0,w,c
  7712  0000BC  26D9               	addwf	fsr2l,f,c
  7713  0000BE  501C               	movf	(checkCollision@g+1)^0,w,c
  7714  0000C0  22DA               	addwfc	fsr2h,f,c
  7715  0000C2  CFDE F01D          	movff	postinc2,??_checkCollision
  7716  0000C6  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7717  0000CA  1E1D               	comf	??_checkCollision^0,f,c
  7718  0000CC  1E1E               	comf	(??_checkCollision+1)^0,f,c
  7719  0000CE  4A1D               	infsnz	??_checkCollision^0,f,c
  7720  0000D0  2A1E               	incf	(??_checkCollision+1)^0,f,c
  7721  0000D2  EE20 F0D2          	lfsr	2,210
  7722  0000D6  501B               	movf	checkCollision@g^0,w,c
  7723  0000D8  26D9               	addwf	fsr2l,f,c
  7724  0000DA  501C               	movf	(checkCollision@g+1)^0,w,c
  7725  0000DC  22DA               	addwfc	fsr2h,f,c
  7726  0000DE  C01D  FFDE         	movff	??_checkCollision,postinc2
  7727  0000E2  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  7728                           
  7729                           ;gameFunction.c: 62:         g->b.x+=g->b.dx;
  7730  0000E6  EE20 F0D2          	lfsr	2,210
  7731  0000EA  501B               	movf	checkCollision@g^0,w,c
  7732  0000EC  26D9               	addwf	fsr2l,f,c
  7733  0000EE  501C               	movf	(checkCollision@g+1)^0,w,c
  7734  0000F0  22DA               	addwfc	fsr2h,f,c
  7735  0000F2  CFDE F01D          	movff	postinc2,??_checkCollision
  7736  0000F6  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7737  0000FA  EE20 F0CA          	lfsr	2,202
  7738  0000FE  501B               	movf	checkCollision@g^0,w,c
  7739  000100  26D9               	addwf	fsr2l,f,c
  7740  000102  501C               	movf	(checkCollision@g+1)^0,w,c
  7741  000104  22DA               	addwfc	fsr2h,f,c
  7742  000106  501D               	movf	??_checkCollision^0,w,c
  7743  000108  26DE               	addwf	postinc2,f,c
  7744  00010A  501E               	movf	(??_checkCollision+1)^0,w,c
  7745  00010C  22DD               	addwfc	postdec2,f,c
  7746  00010E                     l812:
  7747                           
  7748                           ;gameFunction.c: 64:     if((int)(g->b.x+g->b.dx-8)<=1)
  7749  00010E  0EF8               	movlw	248
  7750  000110  6E1D               	movwf	??_checkCollision^0,c
  7751  000112  0EFF               	movlw	255
  7752  000114  6E1E               	movwf	(??_checkCollision+1)^0,c
  7753  000116  EE20 F0D2          	lfsr	2,210
  7754  00011A  501B               	movf	checkCollision@g^0,w,c
  7755  00011C  26D9               	addwf	fsr2l,f,c
  7756  00011E  501C               	movf	(checkCollision@g+1)^0,w,c
  7757  000120  22DA               	addwfc	fsr2h,f,c
  7758  000122  CFDE F01F          	movff	postinc2,??_checkCollision+2
  7759  000126  CFDD F020          	movff	postdec2,??_checkCollision+3
  7760  00012A  EE20 F0CA          	lfsr	2,202
  7761  00012E  501B               	movf	checkCollision@g^0,w,c
  7762  000130  26D9               	addwf	fsr2l,f,c
  7763  000132  501C               	movf	(checkCollision@g+1)^0,w,c
  7764  000134  22DA               	addwfc	fsr2h,f,c
  7765  000136  CFDE F021          	movff	postinc2,??_checkCollision+4
  7766  00013A  CFDD F022          	movff	postdec2,??_checkCollision+5
  7767  00013E  501F               	movf	(??_checkCollision+2)^0,w,c
  7768  000140  2621               	addwf	(??_checkCollision+4)^0,f,c
  7769  000142  5020               	movf	(??_checkCollision+3)^0,w,c
  7770  000144  2222               	addwfc	(??_checkCollision+5)^0,f,c
  7771  000146  501D               	movf	??_checkCollision^0,w,c
  7772  000148  2621               	addwf	(??_checkCollision+4)^0,f,c
  7773  00014A  501E               	movf	(??_checkCollision+1)^0,w,c
  7774  00014C  2222               	addwfc	(??_checkCollision+5)^0,f,c
  7775  00014E  BE22               	btfsc	(??_checkCollision+5)^0,7,c
  7776  000150  D006               	goto	u4090
  7777  000152  5022               	movf	(??_checkCollision+5)^0,w,c
  7778  000154  E130               	bnz	l813
  7779  000156  0E02               	movlw	2
  7780  000158  5C21               	subwf	(??_checkCollision+4)^0,w,c
  7781  00015A  B0D8               	btfsc	status,0,c
  7782  00015C  D02C               	goto	l813
  7783  00015E                     u4090:
  7784                           
  7785                           ;gameFunction.c: 65:     {;gameFunction.c: 66:         g->b.dx=-g->b.dx;
  7786  00015E  EE20 F0D2          	lfsr	2,210
  7787  000162  501B               	movf	checkCollision@g^0,w,c
  7788  000164  26D9               	addwf	fsr2l,f,c
  7789  000166  501C               	movf	(checkCollision@g+1)^0,w,c
  7790  000168  22DA               	addwfc	fsr2h,f,c
  7791  00016A  CFDE F01D          	movff	postinc2,??_checkCollision
  7792  00016E  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7793  000172  1E1D               	comf	??_checkCollision^0,f,c
  7794  000174  1E1E               	comf	(??_checkCollision+1)^0,f,c
  7795  000176  4A1D               	infsnz	??_checkCollision^0,f,c
  7796  000178  2A1E               	incf	(??_checkCollision+1)^0,f,c
  7797  00017A  EE20 F0D2          	lfsr	2,210
  7798  00017E  501B               	movf	checkCollision@g^0,w,c
  7799  000180  26D9               	addwf	fsr2l,f,c
  7800  000182  501C               	movf	(checkCollision@g+1)^0,w,c
  7801  000184  22DA               	addwfc	fsr2h,f,c
  7802  000186  C01D  FFDE         	movff	??_checkCollision,postinc2
  7803  00018A  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  7804                           
  7805                           ;gameFunction.c: 67:         g->b.x+=g->b.dx;
  7806  00018E  EE20 F0D2          	lfsr	2,210
  7807  000192  501B               	movf	checkCollision@g^0,w,c
  7808  000194  26D9               	addwf	fsr2l,f,c
  7809  000196  501C               	movf	(checkCollision@g+1)^0,w,c
  7810  000198  22DA               	addwfc	fsr2h,f,c
  7811  00019A  CFDE F01D          	movff	postinc2,??_checkCollision
  7812  00019E  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7813  0001A2  EE20 F0CA          	lfsr	2,202
  7814  0001A6  501B               	movf	checkCollision@g^0,w,c
  7815  0001A8  26D9               	addwf	fsr2l,f,c
  7816  0001AA  501C               	movf	(checkCollision@g+1)^0,w,c
  7817  0001AC  22DA               	addwfc	fsr2h,f,c
  7818  0001AE  501D               	movf	??_checkCollision^0,w,c
  7819  0001B0  26DE               	addwf	postinc2,f,c
  7820  0001B2  501E               	movf	(??_checkCollision+1)^0,w,c
  7821  0001B4  22DD               	addwfc	postdec2,f,c
  7822  0001B6                     l813:
  7823                           
  7824                           ;gameFunction.c: 70:     if(g->b.y+8==g->p1.y-1)
  7825  0001B6  0EFF               	movlw	255
  7826  0001B8  6E1D               	movwf	??_checkCollision^0,c
  7827  0001BA  0EFF               	movlw	255
  7828  0001BC  6E1E               	movwf	(??_checkCollision+1)^0,c
  7829  0001BE  EE20 F0D8          	lfsr	2,216
  7830  0001C2  501B               	movf	checkCollision@g^0,w,c
  7831  0001C4  26D9               	addwf	fsr2l,f,c
  7832  0001C6  501C               	movf	(checkCollision@g+1)^0,w,c
  7833  0001C8  22DA               	addwfc	fsr2h,f,c
  7834  0001CA  CFDE F01F          	movff	postinc2,??_checkCollision+2
  7835  0001CE  CFDD F020          	movff	postdec2,??_checkCollision+3
  7836  0001D2  501D               	movf	??_checkCollision^0,w,c
  7837  0001D4  261F               	addwf	(??_checkCollision+2)^0,f,c
  7838  0001D6  501E               	movf	(??_checkCollision+1)^0,w,c
  7839  0001D8  2220               	addwfc	(??_checkCollision+3)^0,f,c
  7840  0001DA  EE20 F0CC          	lfsr	2,204
  7841  0001DE  501B               	movf	checkCollision@g^0,w,c
  7842  0001E0  26D9               	addwf	fsr2l,f,c
  7843  0001E2  501C               	movf	(checkCollision@g+1)^0,w,c
  7844  0001E4  22DA               	addwfc	fsr2h,f,c
  7845  0001E6  CFDE F021          	movff	postinc2,??_checkCollision+4
  7846  0001EA  CFDD F022          	movff	postdec2,??_checkCollision+5
  7847  0001EE  0E08               	movlw	8
  7848  0001F0  2621               	addwf	(??_checkCollision+4)^0,f,c
  7849  0001F2  0E00               	movlw	0
  7850  0001F4  2222               	addwfc	(??_checkCollision+5)^0,f,c
  7851  0001F6  501F               	movf	(??_checkCollision+2)^0,w,c
  7852  0001F8  1821               	xorwf	(??_checkCollision+4)^0,w,c
  7853  0001FA  E103               	bnz	u4101
  7854  0001FC  5020               	movf	(??_checkCollision+3)^0,w,c
  7855  0001FE  1822               	xorwf	(??_checkCollision+5)^0,w,c
  7856  000200  A4D8               	btfss	status,2,c
  7857  000202                     u4101:
  7858  000202  D17D               	goto	l6732
  7859                           
  7860                           ;gameFunction.c: 71:     {;gameFunction.c: 72:         if(g->b.x+8>g->p1.x)
  7861  000204  EE20 F0CA          	lfsr	2,202
  7862  000208  501B               	movf	checkCollision@g^0,w,c
  7863  00020A  26D9               	addwf	fsr2l,f,c
  7864  00020C  501C               	movf	(checkCollision@g+1)^0,w,c
  7865  00020E  22DA               	addwfc	fsr2h,f,c
  7866  000210  CFDE F01D          	movff	postinc2,??_checkCollision
  7867  000214  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7868  000218  0E08               	movlw	8
  7869  00021A  261D               	addwf	??_checkCollision^0,f,c
  7870  00021C  0E00               	movlw	0
  7871  00021E  221E               	addwfc	(??_checkCollision+1)^0,f,c
  7872  000220  EE20 F0D6          	lfsr	2,214
  7873  000224  501B               	movf	checkCollision@g^0,w,c
  7874  000226  26D9               	addwf	fsr2l,f,c
  7875  000228  501C               	movf	(checkCollision@g+1)^0,w,c
  7876  00022A  22DA               	addwfc	fsr2h,f,c
  7877  00022C  501D               	movf	??_checkCollision^0,w,c
  7878  00022E  5CDE               	subwf	postinc2,w,c
  7879  000230  501E               	movf	(??_checkCollision+1)^0,w,c
  7880  000232  58DE               	subwfb	postinc2,w,c
  7881  000234  B0D8               	btfsc	status,0,c
  7882  000236  D163               	goto	l6732
  7883                           
  7884                           ;gameFunction.c: 73:         {;gameFunction.c: 74:             if(g->b.x-8<g->p1.x+50)
  7885  000238  EE20 F0D6          	lfsr	2,214
  7886  00023C  501B               	movf	checkCollision@g^0,w,c
  7887  00023E  26D9               	addwf	fsr2l,f,c
  7888  000240  501C               	movf	(checkCollision@g+1)^0,w,c
  7889  000242  22DA               	addwfc	fsr2h,f,c
  7890  000244  CFDE F01D          	movff	postinc2,??_checkCollision
  7891  000248  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7892  00024C  0E32               	movlw	50
  7893  00024E  261D               	addwf	??_checkCollision^0,f,c
  7894  000250  0E00               	movlw	0
  7895  000252  221E               	addwfc	(??_checkCollision+1)^0,f,c
  7896  000254  0EF8               	movlw	248
  7897  000256  6E1F               	movwf	(??_checkCollision+2)^0,c
  7898  000258  0EFF               	movlw	255
  7899  00025A  6E20               	movwf	(??_checkCollision+3)^0,c
  7900  00025C  EE20 F0CA          	lfsr	2,202
  7901  000260  501B               	movf	checkCollision@g^0,w,c
  7902  000262  26D9               	addwf	fsr2l,f,c
  7903  000264  501C               	movf	(checkCollision@g+1)^0,w,c
  7904  000266  22DA               	addwfc	fsr2h,f,c
  7905  000268  CFDE F021          	movff	postinc2,??_checkCollision+4
  7906  00026C  CFDD F022          	movff	postdec2,??_checkCollision+5
  7907  000270  501F               	movf	(??_checkCollision+2)^0,w,c
  7908  000272  2621               	addwf	(??_checkCollision+4)^0,f,c
  7909  000274  5020               	movf	(??_checkCollision+3)^0,w,c
  7910  000276  2222               	addwfc	(??_checkCollision+5)^0,f,c
  7911  000278  501D               	movf	??_checkCollision^0,w,c
  7912  00027A  5C21               	subwf	(??_checkCollision+4)^0,w,c
  7913  00027C  501E               	movf	(??_checkCollision+1)^0,w,c
  7914  00027E  5822               	subwfb	(??_checkCollision+5)^0,w,c
  7915  000280  B0D8               	btfsc	status,0,c
  7916  000282  D13D               	goto	l6732
  7917                           
  7918                           ;gameFunction.c: 75:             {;gameFunction.c: 77:                 if(g->b.x-g->p1.x
      +                          <10)
  7919  000284  EE20 F0D6          	lfsr	2,214
  7920  000288  501B               	movf	checkCollision@g^0,w,c
  7921  00028A  26D9               	addwf	fsr2l,f,c
  7922  00028C  501C               	movf	(checkCollision@g+1)^0,w,c
  7923  00028E  22DA               	addwfc	fsr2h,f,c
  7924  000290  CFDE F01D          	movff	postinc2,??_checkCollision
  7925  000294  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7926  000298  EE20 F0CA          	lfsr	2,202
  7927  00029C  501B               	movf	checkCollision@g^0,w,c
  7928  00029E  26D9               	addwf	fsr2l,f,c
  7929  0002A0  501C               	movf	(checkCollision@g+1)^0,w,c
  7930  0002A2  22DA               	addwfc	fsr2h,f,c
  7931  0002A4  CFDE F01F          	movff	postinc2,??_checkCollision+2
  7932  0002A8  CFDD F020          	movff	postdec2,??_checkCollision+3
  7933  0002AC  501D               	movf	??_checkCollision^0,w,c
  7934  0002AE  5E1F               	subwf	(??_checkCollision+2)^0,f,c
  7935  0002B0  501E               	movf	(??_checkCollision+1)^0,w,c
  7936  0002B2  5A20               	subwfb	(??_checkCollision+3)^0,f,c
  7937  0002B4  5020               	movf	(??_checkCollision+3)^0,w,c
  7938  0002B6  E126               	bnz	l6716
  7939  0002B8  0E0A               	movlw	10
  7940  0002BA  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  7941  0002BC  B0D8               	btfsc	status,0,c
  7942  0002BE  D022               	goto	l6716
  7943                           
  7944                           ;gameFunction.c: 78:                 {;gameFunction.c: 80:                     g->b.dy=-
      +                          g->b.dy;
  7945  0002C0  EE20 F0D4          	lfsr	2,212
  7946  0002C4  501B               	movf	checkCollision@g^0,w,c
  7947  0002C6  26D9               	addwf	fsr2l,f,c
  7948  0002C8  501C               	movf	(checkCollision@g+1)^0,w,c
  7949  0002CA  22DA               	addwfc	fsr2h,f,c
  7950  0002CC  CFDE F01D          	movff	postinc2,??_checkCollision
  7951  0002D0  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7952  0002D4  1E1D               	comf	??_checkCollision^0,f,c
  7953  0002D6  1E1E               	comf	(??_checkCollision+1)^0,f,c
  7954  0002D8  4A1D               	infsnz	??_checkCollision^0,f,c
  7955  0002DA  2A1E               	incf	(??_checkCollision+1)^0,f,c
  7956  0002DC  EE20 F0D4          	lfsr	2,212
  7957  0002E0  501B               	movf	checkCollision@g^0,w,c
  7958  0002E2  26D9               	addwf	fsr2l,f,c
  7959  0002E4  501C               	movf	(checkCollision@g+1)^0,w,c
  7960  0002E6  22DA               	addwfc	fsr2h,f,c
  7961  0002E8  C01D  FFDE         	movff	??_checkCollision,postinc2
  7962  0002EC  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  7963                           
  7964                           ;gameFunction.c: 81:                     g->b.dx-=2;
  7965  0002F0  EE20 F0D2          	lfsr	2,210
  7966  0002F4  501B               	movf	checkCollision@g^0,w,c
  7967  0002F6  26D9               	addwf	fsr2l,f,c
  7968  0002F8  501C               	movf	(checkCollision@g+1)^0,w,c
  7969  0002FA  22DA               	addwfc	fsr2h,f,c
  7970  0002FC  0EFE               	movlw	254
  7971  0002FE  26DE               	addwf	postinc2,f,c
  7972  000300  0EFF               	movlw	255
  7973  000302  D0EE               	goto	L3
  7974  000304                     l6716:
  7975  000304  EE20 F0D6          	lfsr	2,214
  7976  000308  501B               	movf	checkCollision@g^0,w,c
  7977  00030A  26D9               	addwf	fsr2l,f,c
  7978  00030C  501C               	movf	(checkCollision@g+1)^0,w,c
  7979  00030E  22DA               	addwfc	fsr2h,f,c
  7980  000310  CFDE F01D          	movff	postinc2,??_checkCollision
  7981  000314  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7982  000318  EE20 F0CA          	lfsr	2,202
  7983  00031C  501B               	movf	checkCollision@g^0,w,c
  7984  00031E  26D9               	addwf	fsr2l,f,c
  7985  000320  501C               	movf	(checkCollision@g+1)^0,w,c
  7986  000322  22DA               	addwfc	fsr2h,f,c
  7987  000324  CFDE F01F          	movff	postinc2,??_checkCollision+2
  7988  000328  CFDD F020          	movff	postdec2,??_checkCollision+3
  7989  00032C  501D               	movf	??_checkCollision^0,w,c
  7990  00032E  5E1F               	subwf	(??_checkCollision+2)^0,f,c
  7991  000330  501E               	movf	(??_checkCollision+1)^0,w,c
  7992  000332  5A20               	subwfb	(??_checkCollision+3)^0,f,c
  7993  000334  5020               	movf	(??_checkCollision+3)^0,w,c
  7994  000336  E126               	bnz	l6720
  7995  000338  0E14               	movlw	20
  7996  00033A  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  7997  00033C  B0D8               	btfsc	status,0,c
  7998  00033E  D022               	goto	l6720
  7999                           
  8000                           ;gameFunction.c: 84:                 {;gameFunction.c: 86:                     g->b.dy=-
      +                          g->b.dy;
  8001  000340  EE20 F0D4          	lfsr	2,212
  8002  000344  501B               	movf	checkCollision@g^0,w,c
  8003  000346  26D9               	addwf	fsr2l,f,c
  8004  000348  501C               	movf	(checkCollision@g+1)^0,w,c
  8005  00034A  22DA               	addwfc	fsr2h,f,c
  8006  00034C  CFDE F01D          	movff	postinc2,??_checkCollision
  8007  000350  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8008  000354  1E1D               	comf	??_checkCollision^0,f,c
  8009  000356  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8010  000358  4A1D               	infsnz	??_checkCollision^0,f,c
  8011  00035A  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8012  00035C  EE20 F0D4          	lfsr	2,212
  8013  000360  501B               	movf	checkCollision@g^0,w,c
  8014  000362  26D9               	addwf	fsr2l,f,c
  8015  000364  501C               	movf	(checkCollision@g+1)^0,w,c
  8016  000366  22DA               	addwfc	fsr2h,f,c
  8017  000368  C01D  FFDE         	movff	??_checkCollision,postinc2
  8018  00036C  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8019                           
  8020                           ;gameFunction.c: 87:                     g->b.dx-=1;
  8021  000370  EE20 F0D2          	lfsr	2,210
  8022  000374  501B               	movf	checkCollision@g^0,w,c
  8023  000376  26D9               	addwf	fsr2l,f,c
  8024  000378  501C               	movf	(checkCollision@g+1)^0,w,c
  8025  00037A  22DA               	addwfc	fsr2h,f,c
  8026  00037C  06DE               	decf	postinc2,f,c
  8027  00037E  0E00               	movlw	0
  8028  000380  5ADD               	subwfb	postdec2,f,c
  8029                           
  8030                           ;gameFunction.c: 88:                 }
  8031  000382  D0AF               	goto	l818
  8032  000384                     l6720:
  8033  000384  EE20 F0D6          	lfsr	2,214
  8034  000388  501B               	movf	checkCollision@g^0,w,c
  8035  00038A  26D9               	addwf	fsr2l,f,c
  8036  00038C  501C               	movf	(checkCollision@g+1)^0,w,c
  8037  00038E  22DA               	addwfc	fsr2h,f,c
  8038  000390  CFDE F01D          	movff	postinc2,??_checkCollision
  8039  000394  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8040  000398  EE20 F0CA          	lfsr	2,202
  8041  00039C  501B               	movf	checkCollision@g^0,w,c
  8042  00039E  26D9               	addwf	fsr2l,f,c
  8043  0003A0  501C               	movf	(checkCollision@g+1)^0,w,c
  8044  0003A2  22DA               	addwfc	fsr2h,f,c
  8045  0003A4  CFDE F01F          	movff	postinc2,??_checkCollision+2
  8046  0003A8  CFDD F020          	movff	postdec2,??_checkCollision+3
  8047  0003AC  501D               	movf	??_checkCollision^0,w,c
  8048  0003AE  5E1F               	subwf	(??_checkCollision+2)^0,f,c
  8049  0003B0  501E               	movf	(??_checkCollision+1)^0,w,c
  8050  0003B2  5A20               	subwfb	(??_checkCollision+3)^0,f,c
  8051  0003B4  5020               	movf	(??_checkCollision+3)^0,w,c
  8052  0003B6  E135               	bnz	l6724
  8053  0003B8  0E1E               	movlw	30
  8054  0003BA  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  8055  0003BC  B0D8               	btfsc	status,0,c
  8056  0003BE  D031               	goto	l6724
  8057                           
  8058                           ;gameFunction.c: 90:                 {;gameFunction.c: 92:                     g->b.dx=-
      +                          g->b.dx;
  8059  0003C0  EE20 F0D2          	lfsr	2,210
  8060  0003C4  501B               	movf	checkCollision@g^0,w,c
  8061  0003C6  26D9               	addwf	fsr2l,f,c
  8062  0003C8  501C               	movf	(checkCollision@g+1)^0,w,c
  8063  0003CA  22DA               	addwfc	fsr2h,f,c
  8064  0003CC  CFDE F01D          	movff	postinc2,??_checkCollision
  8065  0003D0  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8066  0003D4  1E1D               	comf	??_checkCollision^0,f,c
  8067  0003D6  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8068  0003D8  4A1D               	infsnz	??_checkCollision^0,f,c
  8069  0003DA  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8070  0003DC  EE20 F0D2          	lfsr	2,210
  8071  0003E0  501B               	movf	checkCollision@g^0,w,c
  8072  0003E2  26D9               	addwf	fsr2l,f,c
  8073  0003E4  501C               	movf	(checkCollision@g+1)^0,w,c
  8074  0003E6  22DA               	addwfc	fsr2h,f,c
  8075  0003E8  C01D  FFDE         	movff	??_checkCollision,postinc2
  8076  0003EC  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8077                           
  8078                           ;gameFunction.c: 93:                     g->b.dy=-g->b.dy;
  8079  0003F0  EE20 F0D4          	lfsr	2,212
  8080  0003F4  501B               	movf	checkCollision@g^0,w,c
  8081  0003F6  26D9               	addwf	fsr2l,f,c
  8082  0003F8  501C               	movf	(checkCollision@g+1)^0,w,c
  8083  0003FA  22DA               	addwfc	fsr2h,f,c
  8084  0003FC  CFDE F01D          	movff	postinc2,??_checkCollision
  8085  000400  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8086  000404  1E1D               	comf	??_checkCollision^0,f,c
  8087  000406  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8088  000408  4A1D               	infsnz	??_checkCollision^0,f,c
  8089  00040A  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8090  00040C  EE20 F0D4          	lfsr	2,212
  8091  000410  501B               	movf	checkCollision@g^0,w,c
  8092  000412  26D9               	addwf	fsr2l,f,c
  8093  000414  501C               	movf	(checkCollision@g+1)^0,w,c
  8094  000416  22DA               	addwfc	fsr2h,f,c
  8095  000418  C01D  FFDE         	movff	??_checkCollision,postinc2
  8096  00041C  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8097                           
  8098                           ;gameFunction.c: 94:                 }
  8099  000420  D060               	goto	l818
  8100  000422                     l6724:
  8101  000422  EE20 F0D6          	lfsr	2,214
  8102  000426  501B               	movf	checkCollision@g^0,w,c
  8103  000428  26D9               	addwf	fsr2l,f,c
  8104  00042A  501C               	movf	(checkCollision@g+1)^0,w,c
  8105  00042C  22DA               	addwfc	fsr2h,f,c
  8106  00042E  CFDE F01D          	movff	postinc2,??_checkCollision
  8107  000432  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8108  000436  EE20 F0CA          	lfsr	2,202
  8109  00043A  501B               	movf	checkCollision@g^0,w,c
  8110  00043C  26D9               	addwf	fsr2l,f,c
  8111  00043E  501C               	movf	(checkCollision@g+1)^0,w,c
  8112  000440  22DA               	addwfc	fsr2h,f,c
  8113  000442  CFDE F01F          	movff	postinc2,??_checkCollision+2
  8114  000446  CFDD F020          	movff	postdec2,??_checkCollision+3
  8115  00044A  501D               	movf	??_checkCollision^0,w,c
  8116  00044C  5E1F               	subwf	(??_checkCollision+2)^0,f,c
  8117  00044E  501E               	movf	(??_checkCollision+1)^0,w,c
  8118  000450  5A20               	subwfb	(??_checkCollision+3)^0,f,c
  8119  000452  5020               	movf	(??_checkCollision+3)^0,w,c
  8120  000454  E124               	bnz	l6728
  8121  000456  0E28               	movlw	40
  8122  000458  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  8123  00045A  B0D8               	btfsc	status,0,c
  8124  00045C  D020               	goto	l6728
  8125                           
  8126                           ;gameFunction.c: 96:                 {;gameFunction.c: 98:                     g->b.dy=-
      +                          g->b.dy;
  8127  00045E  EE20 F0D4          	lfsr	2,212
  8128  000462  501B               	movf	checkCollision@g^0,w,c
  8129  000464  26D9               	addwf	fsr2l,f,c
  8130  000466  501C               	movf	(checkCollision@g+1)^0,w,c
  8131  000468  22DA               	addwfc	fsr2h,f,c
  8132  00046A  CFDE F01D          	movff	postinc2,??_checkCollision
  8133  00046E  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8134  000472  1E1D               	comf	??_checkCollision^0,f,c
  8135  000474  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8136  000476  4A1D               	infsnz	??_checkCollision^0,f,c
  8137  000478  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8138  00047A  EE20 F0D4          	lfsr	2,212
  8139  00047E  501B               	movf	checkCollision@g^0,w,c
  8140  000480  26D9               	addwf	fsr2l,f,c
  8141  000482  501C               	movf	(checkCollision@g+1)^0,w,c
  8142  000484  22DA               	addwfc	fsr2h,f,c
  8143  000486  C01D  FFDE         	movff	??_checkCollision,postinc2
  8144  00048A  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8145                           
  8146                           ;gameFunction.c: 99:                     g->b.dx+=1;
  8147  00048E  EE20 F0D2          	lfsr	2,210
  8148  000492  501B               	movf	checkCollision@g^0,w,c
  8149  000494  26D9               	addwf	fsr2l,f,c
  8150  000496  501C               	movf	(checkCollision@g+1)^0,w,c
  8151  000498  22DA               	addwfc	fsr2h,f,c
  8152  00049A  2ADE               	incf	postinc2,f,c
  8153  00049C  D020               	goto	L5
  8154  00049E                     l6728:
  8155                           
  8156                           ;gameFunction.c: 102:                 {;gameFunction.c: 104:                     g->b.dy
      +                          =-g->b.dy;
  8157  00049E  EE20 F0D4          	lfsr	2,212
  8158  0004A2  501B               	movf	checkCollision@g^0,w,c
  8159  0004A4  26D9               	addwf	fsr2l,f,c
  8160  0004A6  501C               	movf	(checkCollision@g+1)^0,w,c
  8161  0004A8  22DA               	addwfc	fsr2h,f,c
  8162  0004AA  CFDE F01D          	movff	postinc2,??_checkCollision
  8163  0004AE  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8164  0004B2  1E1D               	comf	??_checkCollision^0,f,c
  8165  0004B4  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8166  0004B6  4A1D               	infsnz	??_checkCollision^0,f,c
  8167  0004B8  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8168  0004BA  EE20 F0D4          	lfsr	2,212
  8169  0004BE  501B               	movf	checkCollision@g^0,w,c
  8170  0004C0  26D9               	addwf	fsr2l,f,c
  8171  0004C2  501C               	movf	(checkCollision@g+1)^0,w,c
  8172  0004C4  22DA               	addwfc	fsr2h,f,c
  8173  0004C6  C01D  FFDE         	movff	??_checkCollision,postinc2
  8174  0004CA  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8175                           
  8176                           ;gameFunction.c: 105:                     g->b.dx+=2;
  8177  0004CE  EE20 F0D2          	lfsr	2,210
  8178  0004D2  501B               	movf	checkCollision@g^0,w,c
  8179  0004D4  26D9               	addwf	fsr2l,f,c
  8180  0004D6  501C               	movf	(checkCollision@g+1)^0,w,c
  8181  0004D8  22DA               	addwfc	fsr2h,f,c
  8182  0004DA  0E02               	movlw	2
  8183  0004DC  26DE               	addwf	postinc2,f,c
  8184  0004DE                     L5:
  8185  0004DE  0E00               	movlw	0
  8186  0004E0                     L3:
  8187  0004E0  22DD               	addwfc	postdec2,f,c
  8188  0004E2                     l818:
  8189                           
  8190                           ;gameFunction.c: 109:                 g->s1.homeScore++;
  8191  0004E2  EE20 F0EA          	lfsr	2,234
  8192  0004E6  501B               	movf	checkCollision@g^0,w,c
  8193  0004E8  26D9               	addwf	fsr2l,f,c
  8194  0004EA  501C               	movf	(checkCollision@g+1)^0,w,c
  8195  0004EC  22DA               	addwfc	fsr2h,f,c
  8196  0004EE  2ADE               	incf	postinc2,f,c
  8197  0004F0  0E00               	movlw	0
  8198  0004F2  22DD               	addwfc	postdec2,f,c
  8199                           
  8200                           ;gameFunction.c: 110:                 XF_pushEvent(evRedrawScore,0);
  8201  0004F4  0E00               	movlw	0
  8202  0004F6  6E18               	movwf	XF_pushEvent@inISR^0,c
  8203  0004F8  0E0E               	movlw	14
  8204  0004FA  ECC4  F029         	call	_XF_pushEvent
  8205  0004FE                     l6732:
  8206                           
  8207                           ;gameFunction.c: 117:     if(g->b.y-8==g->p2.y+10 +1)
  8208  0004FE  EE20 F0E2          	lfsr	2,226
  8209  000502  501B               	movf	checkCollision@g^0,w,c
  8210  000504  26D9               	addwf	fsr2l,f,c
  8211  000506  501C               	movf	(checkCollision@g+1)^0,w,c
  8212  000508  22DA               	addwfc	fsr2h,f,c
  8213  00050A  CFDE F01D          	movff	postinc2,??_checkCollision
  8214  00050E  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8215  000512  0E0B               	movlw	11
  8216  000514  261D               	addwf	??_checkCollision^0,f,c
  8217  000516  0E00               	movlw	0
  8218  000518  221E               	addwfc	(??_checkCollision+1)^0,f,c
  8219  00051A  0EF8               	movlw	248
  8220  00051C  6E1F               	movwf	(??_checkCollision+2)^0,c
  8221  00051E  0EFF               	movlw	255
  8222  000520  6E20               	movwf	(??_checkCollision+3)^0,c
  8223  000522  EE20 F0CC          	lfsr	2,204
  8224  000526  501B               	movf	checkCollision@g^0,w,c
  8225  000528  26D9               	addwf	fsr2l,f,c
  8226  00052A  501C               	movf	(checkCollision@g+1)^0,w,c
  8227  00052C  22DA               	addwfc	fsr2h,f,c
  8228  00052E  CFDE F021          	movff	postinc2,??_checkCollision+4
  8229  000532  CFDD F022          	movff	postdec2,??_checkCollision+5
  8230  000536  501F               	movf	(??_checkCollision+2)^0,w,c
  8231  000538  2621               	addwf	(??_checkCollision+4)^0,f,c
  8232  00053A  5020               	movf	(??_checkCollision+3)^0,w,c
  8233  00053C  2222               	addwfc	(??_checkCollision+5)^0,f,c
  8234  00053E  501D               	movf	??_checkCollision^0,w,c
  8235  000540  1821               	xorwf	(??_checkCollision+4)^0,w,c
  8236  000542  E103               	bnz	u4171
  8237  000544  501E               	movf	(??_checkCollision+1)^0,w,c
  8238  000546  1822               	xorwf	(??_checkCollision+5)^0,w,c
  8239  000548  A4D8               	btfss	status,2,c
  8240  00054A                     u4171:
  8241  00054A  D17D               	goto	l6758
  8242                           
  8243                           ;gameFunction.c: 118:     {;gameFunction.c: 119:         if(g->b.x+8>g->p2.x)
  8244  00054C  EE20 F0CA          	lfsr	2,202
  8245  000550  501B               	movf	checkCollision@g^0,w,c
  8246  000552  26D9               	addwf	fsr2l,f,c
  8247  000554  501C               	movf	(checkCollision@g+1)^0,w,c
  8248  000556  22DA               	addwfc	fsr2h,f,c
  8249  000558  CFDE F01D          	movff	postinc2,??_checkCollision
  8250  00055C  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8251  000560  0E08               	movlw	8
  8252  000562  261D               	addwf	??_checkCollision^0,f,c
  8253  000564  0E00               	movlw	0
  8254  000566  221E               	addwfc	(??_checkCollision+1)^0,f,c
  8255  000568  EE20 F0E0          	lfsr	2,224
  8256  00056C  501B               	movf	checkCollision@g^0,w,c
  8257  00056E  26D9               	addwf	fsr2l,f,c
  8258  000570  501C               	movf	(checkCollision@g+1)^0,w,c
  8259  000572  22DA               	addwfc	fsr2h,f,c
  8260  000574  501D               	movf	??_checkCollision^0,w,c
  8261  000576  5CDE               	subwf	postinc2,w,c
  8262  000578  501E               	movf	(??_checkCollision+1)^0,w,c
  8263  00057A  58DE               	subwfb	postinc2,w,c
  8264  00057C  B0D8               	btfsc	status,0,c
  8265  00057E  D163               	goto	l6758
  8266                           
  8267                           ;gameFunction.c: 120:         {;gameFunction.c: 121:             if(g->b.x-8<g->p2.x+50)
  8268  000580  EE20 F0E0          	lfsr	2,224
  8269  000584  501B               	movf	checkCollision@g^0,w,c
  8270  000586  26D9               	addwf	fsr2l,f,c
  8271  000588  501C               	movf	(checkCollision@g+1)^0,w,c
  8272  00058A  22DA               	addwfc	fsr2h,f,c
  8273  00058C  CFDE F01D          	movff	postinc2,??_checkCollision
  8274  000590  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8275  000594  0E32               	movlw	50
  8276  000596  261D               	addwf	??_checkCollision^0,f,c
  8277  000598  0E00               	movlw	0
  8278  00059A  221E               	addwfc	(??_checkCollision+1)^0,f,c
  8279  00059C  0EF8               	movlw	248
  8280  00059E  6E1F               	movwf	(??_checkCollision+2)^0,c
  8281  0005A0  0EFF               	movlw	255
  8282  0005A2  6E20               	movwf	(??_checkCollision+3)^0,c
  8283  0005A4  EE20 F0CA          	lfsr	2,202
  8284  0005A8  501B               	movf	checkCollision@g^0,w,c
  8285  0005AA  26D9               	addwf	fsr2l,f,c
  8286  0005AC  501C               	movf	(checkCollision@g+1)^0,w,c
  8287  0005AE  22DA               	addwfc	fsr2h,f,c
  8288  0005B0  CFDE F021          	movff	postinc2,??_checkCollision+4
  8289  0005B4  CFDD F022          	movff	postdec2,??_checkCollision+5
  8290  0005B8  501F               	movf	(??_checkCollision+2)^0,w,c
  8291  0005BA  2621               	addwf	(??_checkCollision+4)^0,f,c
  8292  0005BC  5020               	movf	(??_checkCollision+3)^0,w,c
  8293  0005BE  2222               	addwfc	(??_checkCollision+5)^0,f,c
  8294  0005C0  501D               	movf	??_checkCollision^0,w,c
  8295  0005C2  5C21               	subwf	(??_checkCollision+4)^0,w,c
  8296  0005C4  501E               	movf	(??_checkCollision+1)^0,w,c
  8297  0005C6  5822               	subwfb	(??_checkCollision+5)^0,w,c
  8298  0005C8  B0D8               	btfsc	status,0,c
  8299  0005CA  D13D               	goto	l6758
  8300                           
  8301                           ;gameFunction.c: 122:             {;gameFunction.c: 123:                 if(g->b.x-g->p2
      +                          .x<10)
  8302  0005CC  EE20 F0E0          	lfsr	2,224
  8303  0005D0  501B               	movf	checkCollision@g^0,w,c
  8304  0005D2  26D9               	addwf	fsr2l,f,c
  8305  0005D4  501C               	movf	(checkCollision@g+1)^0,w,c
  8306  0005D6  22DA               	addwfc	fsr2h,f,c
  8307  0005D8  CFDE F01D          	movff	postinc2,??_checkCollision
  8308  0005DC  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8309  0005E0  EE20 F0CA          	lfsr	2,202
  8310  0005E4  501B               	movf	checkCollision@g^0,w,c
  8311  0005E6  26D9               	addwf	fsr2l,f,c
  8312  0005E8  501C               	movf	(checkCollision@g+1)^0,w,c
  8313  0005EA  22DA               	addwfc	fsr2h,f,c
  8314  0005EC  CFDE F01F          	movff	postinc2,??_checkCollision+2
  8315  0005F0  CFDD F020          	movff	postdec2,??_checkCollision+3
  8316  0005F4  501D               	movf	??_checkCollision^0,w,c
  8317  0005F6  5E1F               	subwf	(??_checkCollision+2)^0,f,c
  8318  0005F8  501E               	movf	(??_checkCollision+1)^0,w,c
  8319  0005FA  5A20               	subwfb	(??_checkCollision+3)^0,f,c
  8320  0005FC  5020               	movf	(??_checkCollision+3)^0,w,c
  8321  0005FE  E126               	bnz	l6742
  8322  000600  0E0A               	movlw	10
  8323  000602  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  8324  000604  B0D8               	btfsc	status,0,c
  8325  000606  D022               	goto	l6742
  8326                           
  8327                           ;gameFunction.c: 124:                 {;gameFunction.c: 126:                     g->b.dy
      +                          =-g->b.dy;
  8328  000608  EE20 F0D4          	lfsr	2,212
  8329  00060C  501B               	movf	checkCollision@g^0,w,c
  8330  00060E  26D9               	addwf	fsr2l,f,c
  8331  000610  501C               	movf	(checkCollision@g+1)^0,w,c
  8332  000612  22DA               	addwfc	fsr2h,f,c
  8333  000614  CFDE F01D          	movff	postinc2,??_checkCollision
  8334  000618  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8335  00061C  1E1D               	comf	??_checkCollision^0,f,c
  8336  00061E  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8337  000620  4A1D               	infsnz	??_checkCollision^0,f,c
  8338  000622  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8339  000624  EE20 F0D4          	lfsr	2,212
  8340  000628  501B               	movf	checkCollision@g^0,w,c
  8341  00062A  26D9               	addwf	fsr2l,f,c
  8342  00062C  501C               	movf	(checkCollision@g+1)^0,w,c
  8343  00062E  22DA               	addwfc	fsr2h,f,c
  8344  000630  C01D  FFDE         	movff	??_checkCollision,postinc2
  8345  000634  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8346                           
  8347                           ;gameFunction.c: 127:                     g->b.dx-=2;
  8348  000638  EE20 F0D2          	lfsr	2,210
  8349  00063C  501B               	movf	checkCollision@g^0,w,c
  8350  00063E  26D9               	addwf	fsr2l,f,c
  8351  000640  501C               	movf	(checkCollision@g+1)^0,w,c
  8352  000642  22DA               	addwfc	fsr2h,f,c
  8353  000644  0EFE               	movlw	254
  8354  000646  26DE               	addwf	postinc2,f,c
  8355  000648  0EFF               	movlw	255
  8356  00064A  D0EE               	goto	L4
  8357  00064C                     l6742:
  8358  00064C  EE20 F0E0          	lfsr	2,224
  8359  000650  501B               	movf	checkCollision@g^0,w,c
  8360  000652  26D9               	addwf	fsr2l,f,c
  8361  000654  501C               	movf	(checkCollision@g+1)^0,w,c
  8362  000656  22DA               	addwfc	fsr2h,f,c
  8363  000658  CFDE F01D          	movff	postinc2,??_checkCollision
  8364  00065C  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8365  000660  EE20 F0CA          	lfsr	2,202
  8366  000664  501B               	movf	checkCollision@g^0,w,c
  8367  000666  26D9               	addwf	fsr2l,f,c
  8368  000668  501C               	movf	(checkCollision@g+1)^0,w,c
  8369  00066A  22DA               	addwfc	fsr2h,f,c
  8370  00066C  CFDE F01F          	movff	postinc2,??_checkCollision+2
  8371  000670  CFDD F020          	movff	postdec2,??_checkCollision+3
  8372  000674  501D               	movf	??_checkCollision^0,w,c
  8373  000676  5E1F               	subwf	(??_checkCollision+2)^0,f,c
  8374  000678  501E               	movf	(??_checkCollision+1)^0,w,c
  8375  00067A  5A20               	subwfb	(??_checkCollision+3)^0,f,c
  8376  00067C  5020               	movf	(??_checkCollision+3)^0,w,c
  8377  00067E  E126               	bnz	l6746
  8378  000680  0E14               	movlw	20
  8379  000682  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  8380  000684  B0D8               	btfsc	status,0,c
  8381  000686  D022               	goto	l6746
  8382                           
  8383                           ;gameFunction.c: 130:                 {;gameFunction.c: 132:                     g->b.dy
      +                          =-g->b.dy;
  8384  000688  EE20 F0D4          	lfsr	2,212
  8385  00068C  501B               	movf	checkCollision@g^0,w,c
  8386  00068E  26D9               	addwf	fsr2l,f,c
  8387  000690  501C               	movf	(checkCollision@g+1)^0,w,c
  8388  000692  22DA               	addwfc	fsr2h,f,c
  8389  000694  CFDE F01D          	movff	postinc2,??_checkCollision
  8390  000698  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8391  00069C  1E1D               	comf	??_checkCollision^0,f,c
  8392  00069E  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8393  0006A0  4A1D               	infsnz	??_checkCollision^0,f,c
  8394  0006A2  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8395  0006A4  EE20 F0D4          	lfsr	2,212
  8396  0006A8  501B               	movf	checkCollision@g^0,w,c
  8397  0006AA  26D9               	addwf	fsr2l,f,c
  8398  0006AC  501C               	movf	(checkCollision@g+1)^0,w,c
  8399  0006AE  22DA               	addwfc	fsr2h,f,c
  8400  0006B0  C01D  FFDE         	movff	??_checkCollision,postinc2
  8401  0006B4  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8402                           
  8403                           ;gameFunction.c: 133:                     g->b.dx-=1;
  8404  0006B8  EE20 F0D2          	lfsr	2,210
  8405  0006BC  501B               	movf	checkCollision@g^0,w,c
  8406  0006BE  26D9               	addwf	fsr2l,f,c
  8407  0006C0  501C               	movf	(checkCollision@g+1)^0,w,c
  8408  0006C2  22DA               	addwfc	fsr2h,f,c
  8409  0006C4  06DE               	decf	postinc2,f,c
  8410  0006C6  0E00               	movlw	0
  8411  0006C8  5ADD               	subwfb	postdec2,f,c
  8412                           
  8413                           ;gameFunction.c: 134:                 }
  8414  0006CA  D0AF               	goto	l829
  8415  0006CC                     l6746:
  8416  0006CC  EE20 F0E0          	lfsr	2,224
  8417  0006D0  501B               	movf	checkCollision@g^0,w,c
  8418  0006D2  26D9               	addwf	fsr2l,f,c
  8419  0006D4  501C               	movf	(checkCollision@g+1)^0,w,c
  8420  0006D6  22DA               	addwfc	fsr2h,f,c
  8421  0006D8  CFDE F01D          	movff	postinc2,??_checkCollision
  8422  0006DC  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8423  0006E0  EE20 F0CA          	lfsr	2,202
  8424  0006E4  501B               	movf	checkCollision@g^0,w,c
  8425  0006E6  26D9               	addwf	fsr2l,f,c
  8426  0006E8  501C               	movf	(checkCollision@g+1)^0,w,c
  8427  0006EA  22DA               	addwfc	fsr2h,f,c
  8428  0006EC  CFDE F01F          	movff	postinc2,??_checkCollision+2
  8429  0006F0  CFDD F020          	movff	postdec2,??_checkCollision+3
  8430  0006F4  501D               	movf	??_checkCollision^0,w,c
  8431  0006F6  5E1F               	subwf	(??_checkCollision+2)^0,f,c
  8432  0006F8  501E               	movf	(??_checkCollision+1)^0,w,c
  8433  0006FA  5A20               	subwfb	(??_checkCollision+3)^0,f,c
  8434  0006FC  5020               	movf	(??_checkCollision+3)^0,w,c
  8435  0006FE  E135               	bnz	l6750
  8436  000700  0E1E               	movlw	30
  8437  000702  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  8438  000704  B0D8               	btfsc	status,0,c
  8439  000706  D031               	goto	l6750
  8440                           
  8441                           ;gameFunction.c: 136:                 {;gameFunction.c: 138:                     g->b.dx
      +                          =-g->b.dx;
  8442  000708  EE20 F0D2          	lfsr	2,210
  8443  00070C  501B               	movf	checkCollision@g^0,w,c
  8444  00070E  26D9               	addwf	fsr2l,f,c
  8445  000710  501C               	movf	(checkCollision@g+1)^0,w,c
  8446  000712  22DA               	addwfc	fsr2h,f,c
  8447  000714  CFDE F01D          	movff	postinc2,??_checkCollision
  8448  000718  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8449  00071C  1E1D               	comf	??_checkCollision^0,f,c
  8450  00071E  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8451  000720  4A1D               	infsnz	??_checkCollision^0,f,c
  8452  000722  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8453  000724  EE20 F0D2          	lfsr	2,210
  8454  000728  501B               	movf	checkCollision@g^0,w,c
  8455  00072A  26D9               	addwf	fsr2l,f,c
  8456  00072C  501C               	movf	(checkCollision@g+1)^0,w,c
  8457  00072E  22DA               	addwfc	fsr2h,f,c
  8458  000730  C01D  FFDE         	movff	??_checkCollision,postinc2
  8459  000734  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8460                           
  8461                           ;gameFunction.c: 139:                     g->b.dy=-g->b.dy;
  8462  000738  EE20 F0D4          	lfsr	2,212
  8463  00073C  501B               	movf	checkCollision@g^0,w,c
  8464  00073E  26D9               	addwf	fsr2l,f,c
  8465  000740  501C               	movf	(checkCollision@g+1)^0,w,c
  8466  000742  22DA               	addwfc	fsr2h,f,c
  8467  000744  CFDE F01D          	movff	postinc2,??_checkCollision
  8468  000748  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8469  00074C  1E1D               	comf	??_checkCollision^0,f,c
  8470  00074E  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8471  000750  4A1D               	infsnz	??_checkCollision^0,f,c
  8472  000752  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8473  000754  EE20 F0D4          	lfsr	2,212
  8474  000758  501B               	movf	checkCollision@g^0,w,c
  8475  00075A  26D9               	addwf	fsr2l,f,c
  8476  00075C  501C               	movf	(checkCollision@g+1)^0,w,c
  8477  00075E  22DA               	addwfc	fsr2h,f,c
  8478  000760  C01D  FFDE         	movff	??_checkCollision,postinc2
  8479  000764  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8480                           
  8481                           ;gameFunction.c: 140:                 }
  8482  000768  D060               	goto	l829
  8483  00076A                     l6750:
  8484  00076A  EE20 F0E0          	lfsr	2,224
  8485  00076E  501B               	movf	checkCollision@g^0,w,c
  8486  000770  26D9               	addwf	fsr2l,f,c
  8487  000772  501C               	movf	(checkCollision@g+1)^0,w,c
  8488  000774  22DA               	addwfc	fsr2h,f,c
  8489  000776  CFDE F01D          	movff	postinc2,??_checkCollision
  8490  00077A  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8491  00077E  EE20 F0CA          	lfsr	2,202
  8492  000782  501B               	movf	checkCollision@g^0,w,c
  8493  000784  26D9               	addwf	fsr2l,f,c
  8494  000786  501C               	movf	(checkCollision@g+1)^0,w,c
  8495  000788  22DA               	addwfc	fsr2h,f,c
  8496  00078A  CFDE F01F          	movff	postinc2,??_checkCollision+2
  8497  00078E  CFDD F020          	movff	postdec2,??_checkCollision+3
  8498  000792  501D               	movf	??_checkCollision^0,w,c
  8499  000794  5E1F               	subwf	(??_checkCollision+2)^0,f,c
  8500  000796  501E               	movf	(??_checkCollision+1)^0,w,c
  8501  000798  5A20               	subwfb	(??_checkCollision+3)^0,f,c
  8502  00079A  5020               	movf	(??_checkCollision+3)^0,w,c
  8503  00079C  E124               	bnz	l6754
  8504  00079E  0E28               	movlw	40
  8505  0007A0  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  8506  0007A2  B0D8               	btfsc	status,0,c
  8507  0007A4  D020               	goto	l6754
  8508                           
  8509                           ;gameFunction.c: 142:                 {;gameFunction.c: 144:                     g->b.dy
      +                          =-g->b.dy;
  8510  0007A6  EE20 F0D4          	lfsr	2,212
  8511  0007AA  501B               	movf	checkCollision@g^0,w,c
  8512  0007AC  26D9               	addwf	fsr2l,f,c
  8513  0007AE  501C               	movf	(checkCollision@g+1)^0,w,c
  8514  0007B0  22DA               	addwfc	fsr2h,f,c
  8515  0007B2  CFDE F01D          	movff	postinc2,??_checkCollision
  8516  0007B6  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8517  0007BA  1E1D               	comf	??_checkCollision^0,f,c
  8518  0007BC  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8519  0007BE  4A1D               	infsnz	??_checkCollision^0,f,c
  8520  0007C0  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8521  0007C2  EE20 F0D4          	lfsr	2,212
  8522  0007C6  501B               	movf	checkCollision@g^0,w,c
  8523  0007C8  26D9               	addwf	fsr2l,f,c
  8524  0007CA  501C               	movf	(checkCollision@g+1)^0,w,c
  8525  0007CC  22DA               	addwfc	fsr2h,f,c
  8526  0007CE  C01D  FFDE         	movff	??_checkCollision,postinc2
  8527  0007D2  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8528                           
  8529                           ;gameFunction.c: 145:                     g->b.dx+=1;
  8530  0007D6  EE20 F0D2          	lfsr	2,210
  8531  0007DA  501B               	movf	checkCollision@g^0,w,c
  8532  0007DC  26D9               	addwf	fsr2l,f,c
  8533  0007DE  501C               	movf	(checkCollision@g+1)^0,w,c
  8534  0007E0  22DA               	addwfc	fsr2h,f,c
  8535  0007E2  2ADE               	incf	postinc2,f,c
  8536  0007E4  D020               	goto	L6
  8537  0007E6                     l6754:
  8538                           
  8539                           ;gameFunction.c: 148:                 {;gameFunction.c: 150:                     g->b.dy
      +                          =-g->b.dy;
  8540  0007E6  EE20 F0D4          	lfsr	2,212
  8541  0007EA  501B               	movf	checkCollision@g^0,w,c
  8542  0007EC  26D9               	addwf	fsr2l,f,c
  8543  0007EE  501C               	movf	(checkCollision@g+1)^0,w,c
  8544  0007F0  22DA               	addwfc	fsr2h,f,c
  8545  0007F2  CFDE F01D          	movff	postinc2,??_checkCollision
  8546  0007F6  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8547  0007FA  1E1D               	comf	??_checkCollision^0,f,c
  8548  0007FC  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8549  0007FE  4A1D               	infsnz	??_checkCollision^0,f,c
  8550  000800  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8551  000802  EE20 F0D4          	lfsr	2,212
  8552  000806  501B               	movf	checkCollision@g^0,w,c
  8553  000808  26D9               	addwf	fsr2l,f,c
  8554  00080A  501C               	movf	(checkCollision@g+1)^0,w,c
  8555  00080C  22DA               	addwfc	fsr2h,f,c
  8556  00080E  C01D  FFDE         	movff	??_checkCollision,postinc2
  8557  000812  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8558                           
  8559                           ;gameFunction.c: 151:                     g->b.dx+=2;
  8560  000816  EE20 F0D2          	lfsr	2,210
  8561  00081A  501B               	movf	checkCollision@g^0,w,c
  8562  00081C  26D9               	addwf	fsr2l,f,c
  8563  00081E  501C               	movf	(checkCollision@g+1)^0,w,c
  8564  000820  22DA               	addwfc	fsr2h,f,c
  8565  000822  0E02               	movlw	2
  8566  000824  26DE               	addwf	postinc2,f,c
  8567  000826                     L6:
  8568  000826  0E00               	movlw	0
  8569  000828                     L4:
  8570  000828  22DD               	addwfc	postdec2,f,c
  8571  00082A                     l829:
  8572                           
  8573                           ;gameFunction.c: 154:                 g->s1.awayScore++;
  8574  00082A  EE20 F0EC          	lfsr	2,236
  8575  00082E  501B               	movf	checkCollision@g^0,w,c
  8576  000830  26D9               	addwf	fsr2l,f,c
  8577  000832  501C               	movf	(checkCollision@g+1)^0,w,c
  8578  000834  22DA               	addwfc	fsr2h,f,c
  8579  000836  2ADE               	incf	postinc2,f,c
  8580  000838  0E00               	movlw	0
  8581  00083A  22DD               	addwfc	postdec2,f,c
  8582                           
  8583                           ;gameFunction.c: 155:                 XF_pushEvent(evRedrawScore,0);
  8584  00083C  0E00               	movlw	0
  8585  00083E  6E18               	movwf	XF_pushEvent@inISR^0,c
  8586  000840  0E0E               	movlw	14
  8587  000842  ECC4  F029         	call	_XF_pushEvent
  8588  000846                     l6758:
  8589                           
  8590                           ;gameFunction.c: 161:     if(g->b.y-8<g->p2.y-10)
  8591  000846  0EF6               	movlw	246
  8592  000848  6E1D               	movwf	??_checkCollision^0,c
  8593  00084A  0EFF               	movlw	255
  8594  00084C  6E1E               	movwf	(??_checkCollision+1)^0,c
  8595  00084E  EE20 F0E2          	lfsr	2,226
  8596  000852  501B               	movf	checkCollision@g^0,w,c
  8597  000854  26D9               	addwf	fsr2l,f,c
  8598  000856  501C               	movf	(checkCollision@g+1)^0,w,c
  8599  000858  22DA               	addwfc	fsr2h,f,c
  8600  00085A  CFDE F01F          	movff	postinc2,??_checkCollision+2
  8601  00085E  CFDD F020          	movff	postdec2,??_checkCollision+3
  8602  000862  501D               	movf	??_checkCollision^0,w,c
  8603  000864  261F               	addwf	(??_checkCollision+2)^0,f,c
  8604  000866  501E               	movf	(??_checkCollision+1)^0,w,c
  8605  000868  2220               	addwfc	(??_checkCollision+3)^0,f,c
  8606  00086A  0EF8               	movlw	248
  8607  00086C  6E21               	movwf	(??_checkCollision+4)^0,c
  8608  00086E  0EFF               	movlw	255
  8609  000870  6E22               	movwf	(??_checkCollision+5)^0,c
  8610  000872  EE20 F0CC          	lfsr	2,204
  8611  000876  501B               	movf	checkCollision@g^0,w,c
  8612  000878  26D9               	addwf	fsr2l,f,c
  8613  00087A  501C               	movf	(checkCollision@g+1)^0,w,c
  8614  00087C  22DA               	addwfc	fsr2h,f,c
  8615  00087E  CFDE F023          	movff	postinc2,??_checkCollision+6
  8616  000882  CFDD F024          	movff	postdec2,??_checkCollision+7
  8617  000886  5021               	movf	(??_checkCollision+4)^0,w,c
  8618  000888  2623               	addwf	(??_checkCollision+6)^0,f,c
  8619  00088A  5022               	movf	(??_checkCollision+5)^0,w,c
  8620  00088C  2224               	addwfc	(??_checkCollision+7)^0,f,c
  8621  00088E  501F               	movf	(??_checkCollision+2)^0,w,c
  8622  000890  5C23               	subwf	(??_checkCollision+6)^0,w,c
  8623  000892  5020               	movf	(??_checkCollision+3)^0,w,c
  8624  000894  5824               	subwfb	(??_checkCollision+7)^0,w,c
  8625  000896  B0D8               	btfsc	status,0,c
  8626  000898  D00F               	goto	l6764
  8627                           
  8628                           ;gameFunction.c: 162:     {;gameFunction.c: 164:         XF_pushEvent(evEndGame,0);
  8629  00089A  0E00               	movlw	0
  8630  00089C  6E18               	movwf	XF_pushEvent@inISR^0,c
  8631  00089E  0E09               	movlw	9
  8632  0008A0  ECC4  F029         	call	_XF_pushEvent
  8633                           
  8634                           ;gameFunction.c: 165:         g->s1.awayScore=0;
  8635  0008A4  EE20 F0EC          	lfsr	2,236
  8636  0008A8  501B               	movf	checkCollision@g^0,w,c
  8637  0008AA  26D9               	addwf	fsr2l,f,c
  8638  0008AC  501C               	movf	(checkCollision@g+1)^0,w,c
  8639  0008AE  22DA               	addwfc	fsr2h,f,c
  8640  0008B0  0E00               	movlw	0
  8641  0008B2  6EDE               	movwf	postinc2,c
  8642  0008B4  0E00               	movlw	0
  8643  0008B6  6EDD               	movwf	postdec2,c
  8644  0008B8                     l6764:
  8645                           
  8646                           ;gameFunction.c: 167:     if(g->b.y+8>g->p1.y+10)
  8647  0008B8  EE20 F0CC          	lfsr	2,204
  8648  0008BC  501B               	movf	checkCollision@g^0,w,c
  8649  0008BE  26D9               	addwf	fsr2l,f,c
  8650  0008C0  501C               	movf	(checkCollision@g+1)^0,w,c
  8651  0008C2  22DA               	addwfc	fsr2h,f,c
  8652  0008C4  CFDE F01D          	movff	postinc2,??_checkCollision
  8653  0008C8  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8654  0008CC  0E08               	movlw	8
  8655  0008CE  261D               	addwf	??_checkCollision^0,f,c
  8656  0008D0  0E00               	movlw	0
  8657  0008D2  221E               	addwfc	(??_checkCollision+1)^0,f,c
  8658  0008D4  EE20 F0D8          	lfsr	2,216
  8659  0008D8  501B               	movf	checkCollision@g^0,w,c
  8660  0008DA  26D9               	addwf	fsr2l,f,c
  8661  0008DC  501C               	movf	(checkCollision@g+1)^0,w,c
  8662  0008DE  22DA               	addwfc	fsr2h,f,c
  8663  0008E0  CFDE F01F          	movff	postinc2,??_checkCollision+2
  8664  0008E4  CFDD F020          	movff	postdec2,??_checkCollision+3
  8665  0008E8  0E0A               	movlw	10
  8666  0008EA  261F               	addwf	(??_checkCollision+2)^0,f,c
  8667  0008EC  0E00               	movlw	0
  8668  0008EE  2220               	addwfc	(??_checkCollision+3)^0,f,c
  8669  0008F0  501D               	movf	??_checkCollision^0,w,c
  8670  0008F2  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  8671  0008F4  501E               	movf	(??_checkCollision+1)^0,w,c
  8672  0008F6  5820               	subwfb	(??_checkCollision+3)^0,w,c
  8673  0008F8  B0D8               	btfsc	status,0,c
  8674  0008FA  0012               	return	
  8675                           
  8676                           ;gameFunction.c: 168:     {;gameFunction.c: 170:         XF_pushEvent(evEndGame,0);
  8677  0008FC  0E00               	movlw	0
  8678  0008FE  6E18               	movwf	XF_pushEvent@inISR^0,c
  8679  000900  0E09               	movlw	9
  8680  000902  ECC4  F029         	call	_XF_pushEvent
  8681                           
  8682                           ;gameFunction.c: 171:         g->s1.homeScore=0;
  8683  000906  EE20 F0EA          	lfsr	2,234
  8684  00090A  501B               	movf	checkCollision@g^0,w,c
  8685  00090C  26D9               	addwf	fsr2l,f,c
  8686  00090E  501C               	movf	(checkCollision@g+1)^0,w,c
  8687  000910  22DA               	addwfc	fsr2h,f,c
  8688  000912  0E00               	movlw	0
  8689  000914  6EDE               	movwf	postinc2,c
  8690  000916  0E00               	movlw	0
  8691  000918  6EDD               	movwf	postdec2,c
  8692  00091A  0012               	return		;funcret
  8693  00091C                     __end_of_checkCollision:
  8694                           	callstack 0
  8695                           
  8696 ;; *************** function _XF_pushEvent *****************
  8697 ;; Defined at:
  8698 ;;		line 49 in file "xf/xf.c"
  8699 ;; Parameters:    Size  Location     Type
  8700 ;;  ev              1    wreg     unsigned char 
  8701 ;;  inISR           1   23[COMRAM] _Bool 
  8702 ;; Auto vars:     Size  Location     Type
  8703 ;;  ev              1   24[COMRAM] unsigned char 
  8704 ;;  temp            1   25[COMRAM] unsigned char 
  8705 ;; Return value:  Size  Location     Type
  8706 ;;                  1    wreg      _Bool 
  8707 ;; Registers used:
  8708 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8709 ;; Tracked objects:
  8710 ;;		On entry : 0/0
  8711 ;;		On exit  : 0/0
  8712 ;;		Unchanged: 0/0
  8713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8714 ;;      Params:         1       0       0       0       0       0       0
  8715 ;;      Locals:         2       0       0       0       0       0       0
  8716 ;;      Temps:          0       0       0       0       0       0       0
  8717 ;;      Totals:         3       0       0       0       0       0       0
  8718 ;;Total ram usage:        3 bytes
  8719 ;; Hardware stack levels used: 1
  8720 ;; Hardware stack levels required when called: 5
  8721 ;; This function calls:
  8722 ;;		_ENTERCRITICAL
  8723 ;;		_LEAVECRITICAL
  8724 ;;		___awmod
  8725 ;; This function is called by:
  8726 ;;		_gameControllerController
  8727 ;;		_moovePaddle1
  8728 ;;		_moovePaddle2
  8729 ;;		_mooveBall
  8730 ;;		_checkCollision
  8731 ;; This function uses a non-reentrant model
  8732 ;;
  8733                           
  8734                           	psect	text31
  8735  005388                     __ptext31:
  8736                           	callstack 0
  8737  005388                     _XF_pushEvent:
  8738                           	callstack 20
  8739                           
  8740                           ;incstack = 0
  8741                           ;XF_pushEvent@ev stored from wreg
  8742  005388  6E19               	movwf	XF_pushEvent@ev^0,c
  8743                           
  8744                           ;xf/xf.c: 49: _Bool XF_pushEvent(Event ev, _Bool inISR);xf/xf.c: 50: {;xf/xf.c: 51:   ui
      +                          nt8_t temp;;xf/xf.c: 52:     ENTERCRITICAL(inISR);
  8745  00538A  5018               	movf	XF_pushEvent@inISR^0,w,c
  8746  00538C  ECF4  F02C         	call	_ENTERCRITICAL
  8747                           
  8748                           ;xf/xf.c: 54:     temp = (theXF.in+1) % (uint8_t)sizeof(theXF.eventQueue);
  8749  005390  0E01               	movlw	1
  8750  005392  0100               	movlb	0	; () banked
  8751  005394  2584               	addwf	(_theXF+36)& (0+255),w,b
  8752  005396  6E12               	movwf	___awmod@dividend^0,c
  8753  005398  6A13               	clrf	(___awmod@dividend+1)^0,c
  8754  00539A  0E00               	movlw	0
  8755  00539C  2213               	addwfc	(___awmod@dividend+1)^0,f,c
  8756  00539E  0E00               	movlw	0
  8757  0053A0  6E15               	movwf	(___awmod@divisor+1)^0,c
  8758  0053A2  0E0C               	movlw	12
  8759  0053A4  6E14               	movwf	___awmod@divisor^0,c
  8760  0053A6  ECF4  F028         	call	___awmod	;wreg free
  8761  0053AA  5012               	movf	?___awmod^0,w,c
  8762  0053AC  6E1A               	movwf	XF_pushEvent@temp^0,c
  8763                           
  8764                           ; BSR set to: 0
  8765                           ;xf/xf.c: 55:     if(temp == theXF.out)
  8766  0053AE  501A               	movf	XF_pushEvent@temp^0,w,c
  8767  0053B0  1985               	xorwf	(_theXF+37)& (0+255),w,b
  8768  0053B2  A4D8               	btfss	status,2,c
  8769  0053B4  D005               	goto	l6430
  8770                           
  8771                           ; BSR set to: 0
  8772                           ;xf/xf.c: 56:     {;xf/xf.c: 57:       LEAVECRITICAL(inISR);
  8773  0053B6  5018               	movf	XF_pushEvent@inISR^0,w,c
  8774  0053B8  ECEE  F02C         	call	_LEAVECRITICAL
  8775                           
  8776                           ;xf/xf.c: 58:       return 0;
  8777  0053BC  0E00               	movlw	0
  8778  0053BE  0012               	return	
  8779  0053C0                     l6430:
  8780                           
  8781                           ; BSR set to: 0
  8782                           ;xf/xf.c: 60:     theXF.eventQueue[theXF.in] = ev;
  8783  0053C0  5184               	movf	(_theXF+36)& (0+255),w,b
  8784  0053C2  0F78               	addlw	low (_theXF+24)
  8785  0053C4  6ED9               	movwf	fsr2l,c
  8786  0053C6  6ADA               	clrf	fsr2h,c
  8787  0053C8  C019  FFDF         	movff	XF_pushEvent@ev,indf2
  8788                           
  8789                           ; BSR set to: 0
  8790                           ;xf/xf.c: 61:     theXF.in = temp;
  8791  0053CC  C01A  F084         	movff	XF_pushEvent@temp,_theXF+36
  8792                           
  8793                           ; BSR set to: 0
  8794                           ;xf/xf.c: 62:     LEAVECRITICAL(inISR);
  8795  0053D0  5018               	movf	XF_pushEvent@inISR^0,w,c
  8796  0053D2  ECEE  F02C         	call	_LEAVECRITICAL
  8797                           
  8798                           ;xf/xf.c: 63:     return 1;
  8799  0053D6  0E01               	movlw	1
  8800  0053D8  0012               	return		;funcret
  8801  0053DA                     __end_of_XF_pushEvent:
  8802                           	callstack 0
  8803                           
  8804 ;; *************** function _Ball_Update *****************
  8805 ;; Defined at:
  8806 ;;		line 18 in file "class/ball.c"
  8807 ;; Parameters:    Size  Location     Type
  8808 ;;  b               2   17[COMRAM] PTR struct Ball
  8809 ;;		 -> g1(240), 
  8810 ;; Auto vars:     Size  Location     Type
  8811 ;;		None
  8812 ;; Return value:  Size  Location     Type
  8813 ;;                  1    wreg      void 
  8814 ;; Registers used:
  8815 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8816 ;; Tracked objects:
  8817 ;;		On entry : 0/0
  8818 ;;		On exit  : 0/0
  8819 ;;		Unchanged: 0/0
  8820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8821 ;;      Params:         2       0       0       0       0       0       0
  8822 ;;      Locals:         0       0       0       0       0       0       0
  8823 ;;      Temps:          4       0       0       0       0       0       0
  8824 ;;      Totals:         6       0       0       0       0       0       0
  8825 ;;Total ram usage:        6 bytes
  8826 ;; Hardware stack levels used: 1
  8827 ;; Hardware stack levels required when called: 4
  8828 ;; This function calls:
  8829 ;;		Nothing
  8830 ;; This function is called by:
  8831 ;;		_mooveBall
  8832 ;; This function uses a non-reentrant model
  8833 ;;
  8834                           
  8835                           	psect	text32
  8836  005072                     __ptext32:
  8837                           	callstack 0
  8838  005072                     _Ball_Update:
  8839                           	callstack 21
  8840                           
  8841                           ;class/ball.c: 18: void Ball_Update(struct Ball* b);class/ball.c: 19: {;class/ball.c: 20
      +                          :     b->x=b->x+b->dx;
  8842                           
  8843                           ;incstack = 0
  8844  005072  EE20 F008          	lfsr	2,8
  8845  005076  5012               	movf	Ball_Update@b^0,w,c
  8846  005078  26D9               	addwf	fsr2l,f,c
  8847  00507A  5013               	movf	(Ball_Update@b+1)^0,w,c
  8848  00507C  22DA               	addwfc	fsr2h,f,c
  8849  00507E  CFDE F014          	movff	postinc2,??_Ball_Update
  8850  005082  CFDD F015          	movff	postdec2,??_Ball_Update+1
  8851  005086  C012  FFD9         	movff	Ball_Update@b,fsr2l
  8852  00508A  C013  FFDA         	movff	Ball_Update@b+1,fsr2h
  8853  00508E  CFDE F016          	movff	postinc2,??_Ball_Update+2
  8854  005092  CFDD F017          	movff	postdec2,??_Ball_Update+3
  8855  005096  5014               	movf	??_Ball_Update^0,w,c
  8856  005098  2616               	addwf	(??_Ball_Update+2)^0,f,c
  8857  00509A  5015               	movf	(??_Ball_Update+1)^0,w,c
  8858  00509C  2217               	addwfc	(??_Ball_Update+3)^0,f,c
  8859  00509E  C012  FFD9         	movff	Ball_Update@b,fsr2l
  8860  0050A2  C013  FFDA         	movff	Ball_Update@b+1,fsr2h
  8861  0050A6  C016  FFDE         	movff	??_Ball_Update+2,postinc2
  8862  0050AA  C017  FFDD         	movff	??_Ball_Update+3,postdec2
  8863                           
  8864                           ;class/ball.c: 21:     b->y=b->y+b->dy;
  8865  0050AE  EE20 F00A          	lfsr	2,10
  8866  0050B2  5012               	movf	Ball_Update@b^0,w,c
  8867  0050B4  26D9               	addwf	fsr2l,f,c
  8868  0050B6  5013               	movf	(Ball_Update@b+1)^0,w,c
  8869  0050B8  22DA               	addwfc	fsr2h,f,c
  8870  0050BA  CFDE F014          	movff	postinc2,??_Ball_Update
  8871  0050BE  CFDD F015          	movff	postdec2,??_Ball_Update+1
  8872  0050C2  EE20 F002          	lfsr	2,2
  8873  0050C6  5012               	movf	Ball_Update@b^0,w,c
  8874  0050C8  26D9               	addwf	fsr2l,f,c
  8875  0050CA  5013               	movf	(Ball_Update@b+1)^0,w,c
  8876  0050CC  22DA               	addwfc	fsr2h,f,c
  8877  0050CE  CFDE F016          	movff	postinc2,??_Ball_Update+2
  8878  0050D2  CFDD F017          	movff	postdec2,??_Ball_Update+3
  8879  0050D6  5014               	movf	??_Ball_Update^0,w,c
  8880  0050D8  2616               	addwf	(??_Ball_Update+2)^0,f,c
  8881  0050DA  5015               	movf	(??_Ball_Update+1)^0,w,c
  8882  0050DC  2217               	addwfc	(??_Ball_Update+3)^0,f,c
  8883  0050DE  EE20 F002          	lfsr	2,2
  8884  0050E2  5012               	movf	Ball_Update@b^0,w,c
  8885  0050E4  26D9               	addwf	fsr2l,f,c
  8886  0050E6  5013               	movf	(Ball_Update@b+1)^0,w,c
  8887  0050E8  22DA               	addwfc	fsr2h,f,c
  8888  0050EA  C016  FFDE         	movff	??_Ball_Update+2,postinc2
  8889  0050EE  C017  FFDD         	movff	??_Ball_Update+3,postdec2
  8890  0050F2  0012               	return		;funcret
  8891  0050F4                     __end_of_Ball_Update:
  8892                           	callstack 0
  8893                           
  8894 ;; *************** function _levelController *****************
  8895 ;; Defined at:
  8896 ;;		line 236 in file "gameFunction.c"
  8897 ;; Parameters:    Size  Location     Type
  8898 ;;  g               2   21[COMRAM] PTR struct GameParameter
  8899 ;;		 -> g1(240), 
  8900 ;; Auto vars:     Size  Location     Type
  8901 ;;		None
  8902 ;; Return value:  Size  Location     Type
  8903 ;;                  1    wreg      void 
  8904 ;; Registers used:
  8905 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8906 ;; Tracked objects:
  8907 ;;		On entry : 0/0
  8908 ;;		On exit  : 0/0
  8909 ;;		Unchanged: 0/0
  8910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8911 ;;      Params:         2       0       0       0       0       0       0
  8912 ;;      Locals:         0       0       0       0       0       0       0
  8913 ;;      Temps:          2       0       0       0       0       0       0
  8914 ;;      Totals:         4       0       0       0       0       0       0
  8915 ;;Total ram usage:        4 bytes
  8916 ;; Hardware stack levels used: 1
  8917 ;; Hardware stack levels required when called: 5
  8918 ;; This function calls:
  8919 ;;		_GameParameters_setLevel
  8920 ;; This function is called by:
  8921 ;;		_gameControllerController
  8922 ;; This function uses a non-reentrant model
  8923 ;;
  8924                           
  8925                           	psect	text33
  8926  0044C4                     __ptext33:
  8927                           	callstack 0
  8928  0044C4                     _levelController:
  8929                           	callstack 21
  8930                           
  8931                           ;gameFunction.c: 236: void levelController(GameParameters* g);gameFunction.c: 237: {;gam
      +                          eFunction.c: 239:     if(((g->x)>=105)&&((g->x)<160))
  8932                           
  8933                           ;incstack = 0
  8934  0044C4  EE20 F002          	lfsr	2,2
  8935  0044C8  5016               	movf	levelController@g^0,w,c
  8936  0044CA  26D9               	addwf	fsr2l,f,c
  8937  0044CC  5017               	movf	(levelController@g+1)^0,w,c
  8938  0044CE  22DA               	addwfc	fsr2h,f,c
  8939  0044D0  0E01               	movlw	1
  8940  0044D2  50DB               	movf	plusw2,w,c
  8941  0044D4  E104               	bnz	u4610
  8942  0044D6  0E69               	movlw	105
  8943  0044D8  5CDE               	subwf	postinc2,w,c
  8944  0044DA  A0D8               	btfss	status,0,c
  8945  0044DC  D018               	goto	l7040
  8946  0044DE                     u4610:
  8947  0044DE  EE20 F002          	lfsr	2,2
  8948  0044E2  5016               	movf	levelController@g^0,w,c
  8949  0044E4  26D9               	addwf	fsr2l,f,c
  8950  0044E6  5017               	movf	(levelController@g+1)^0,w,c
  8951  0044E8  22DA               	addwfc	fsr2h,f,c
  8952  0044EA  0E01               	movlw	1
  8953  0044EC  50DB               	movf	plusw2,w,c
  8954  0044EE  E10F               	bnz	l7040
  8955  0044F0  0EA0               	movlw	160
  8956  0044F2  5CDE               	subwf	postinc2,w,c
  8957  0044F4  B0D8               	btfsc	status,0,c
  8958  0044F6  D00B               	goto	l7040
  8959                           
  8960                           ;gameFunction.c: 240:     {;gameFunction.c: 241:         GameParameters_setLevel(g,2);
  8961  0044F8  C016  F012         	movff	levelController@g,GameParameters_setLevel@s
  8962  0044FC  C017  F013         	movff	levelController@g+1,GameParameters_setLevel@s+1
  8963  004500  0E00               	movlw	0
  8964  004502  6E15               	movwf	(GameParameters_setLevel@value+1)^0,c
  8965  004504  0E02               	movlw	2
  8966  004506  6E14               	movwf	GameParameters_setLevel@value^0,c
  8967  004508  ECE3  F02C         	call	_GameParameters_setLevel	;wreg free
  8968                           
  8969                           ;gameFunction.c: 242:     }
  8970  00450C  D02F               	goto	l7048
  8971  00450E                     l7040:
  8972  00450E  EE20 F002          	lfsr	2,2
  8973  004512  5016               	movf	levelController@g^0,w,c
  8974  004514  26D9               	addwf	fsr2l,f,c
  8975  004516  5017               	movf	(levelController@g+1)^0,w,c
  8976  004518  22DA               	addwfc	fsr2h,f,c
  8977  00451A  0E01               	movlw	1
  8978  00451C  50DB               	movf	plusw2,w,c
  8979  00451E  E104               	bnz	u4630
  8980  004520  0EA0               	movlw	160
  8981  004522  5CDE               	subwf	postinc2,w,c
  8982  004524  A0D8               	btfss	status,0,c
  8983  004526  D018               	goto	l7046
  8984  004528                     u4630:
  8985  004528  EE20 F002          	lfsr	2,2
  8986  00452C  5016               	movf	levelController@g^0,w,c
  8987  00452E  26D9               	addwf	fsr2l,f,c
  8988  004530  5017               	movf	(levelController@g+1)^0,w,c
  8989  004532  22DA               	addwfc	fsr2h,f,c
  8990  004534  0E01               	movlw	1
  8991  004536  50DB               	movf	plusw2,w,c
  8992  004538  E10F               	bnz	l7046
  8993  00453A  0ED7               	movlw	215
  8994  00453C  5CDE               	subwf	postinc2,w,c
  8995  00453E  B0D8               	btfsc	status,0,c
  8996  004540  D00B               	goto	l7046
  8997                           
  8998                           ;gameFunction.c: 244:     {;gameFunction.c: 245:         GameParameters_setLevel(g,3);
  8999  004542  C016  F012         	movff	levelController@g,GameParameters_setLevel@s
  9000  004546  C017  F013         	movff	levelController@g+1,GameParameters_setLevel@s+1
  9001  00454A  0E00               	movlw	0
  9002  00454C  6E15               	movwf	(GameParameters_setLevel@value+1)^0,c
  9003  00454E  0E03               	movlw	3
  9004  004550  6E14               	movwf	GameParameters_setLevel@value^0,c
  9005  004552  ECE3  F02C         	call	_GameParameters_setLevel	;wreg free
  9006                           
  9007                           ;gameFunction.c: 246:     }
  9008  004556  D00A               	goto	l7048
  9009  004558                     l7046:
  9010                           
  9011                           ;gameFunction.c: 248:     {;gameFunction.c: 249:         GameParameters_setLevel(g,1);
  9012  004558  C016  F012         	movff	levelController@g,GameParameters_setLevel@s
  9013  00455C  C017  F013         	movff	levelController@g+1,GameParameters_setLevel@s+1
  9014  004560  0E00               	movlw	0
  9015  004562  6E15               	movwf	(GameParameters_setLevel@value+1)^0,c
  9016  004564  0E01               	movlw	1
  9017  004566  6E14               	movwf	GameParameters_setLevel@value^0,c
  9018  004568  ECE3  F02C         	call	_GameParameters_setLevel	;wreg free
  9019  00456C                     l7048:
  9020                           
  9021                           ;gameFunction.c: 251:     g->sldLevel.value=g->level;
  9022  00456C  EE20 F006          	lfsr	2,6
  9023  004570  5016               	movf	levelController@g^0,w,c
  9024  004572  26D9               	addwf	fsr2l,f,c
  9025  004574  5017               	movf	(levelController@g+1)^0,w,c
  9026  004576  22DA               	addwfc	fsr2h,f,c
  9027  004578  EE10 F0C2          	lfsr	1,194
  9028  00457C  5016               	movf	levelController@g^0,w,c
  9029  00457E  26E1               	addwf	fsr1l,f,c
  9030  004580  5017               	movf	(levelController@g+1)^0,w,c
  9031  004582  22E2               	addwfc	fsr1h,f,c
  9032  004584  CFDE FFE6          	movff	postinc2,postinc1
  9033  004588  CFDD FFE5          	movff	postdec2,postdec1
  9034  00458C  0012               	return		;funcret
  9035  00458E                     __end_of_levelController:
  9036                           	callstack 0
  9037                           
  9038 ;; *************** function _GameParameters_setLevel *****************
  9039 ;; Defined at:
  9040 ;;		line 54 in file "class/gameParameters.c"
  9041 ;; Parameters:    Size  Location     Type
  9042 ;;  s               2   17[COMRAM] PTR struct GameParameter
  9043 ;;		 -> g1(240), 
  9044 ;;  value           2   19[COMRAM] unsigned short 
  9045 ;; Auto vars:     Size  Location     Type
  9046 ;;		None
  9047 ;; Return value:  Size  Location     Type
  9048 ;;                  1    wreg      void 
  9049 ;; Registers used:
  9050 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9051 ;; Tracked objects:
  9052 ;;		On entry : 0/0
  9053 ;;		On exit  : 0/0
  9054 ;;		Unchanged: 0/0
  9055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9056 ;;      Params:         4       0       0       0       0       0       0
  9057 ;;      Locals:         0       0       0       0       0       0       0
  9058 ;;      Temps:          0       0       0       0       0       0       0
  9059 ;;      Totals:         4       0       0       0       0       0       0
  9060 ;;Total ram usage:        4 bytes
  9061 ;; Hardware stack levels used: 1
  9062 ;; Hardware stack levels required when called: 4
  9063 ;; This function calls:
  9064 ;;		Nothing
  9065 ;; This function is called by:
  9066 ;;		_levelController
  9067 ;; This function uses a non-reentrant model
  9068 ;;
  9069                           
  9070                           	psect	text34
  9071  0059C6                     __ptext34:
  9072                           	callstack 0
  9073  0059C6                     _GameParameters_setLevel:
  9074                           	callstack 21
  9075                           
  9076                           ;class/gameParameters.c: 54: void GameParameters_setLevel(struct GameParameters* s, uint
      +                          16_t value);class/gameParameters.c: 55: {;class/gameParameters.c: 56:     s->level = val
      +                          ue;
  9077                           
  9078                           ;incstack = 0
  9079  0059C6  EE20 F006          	lfsr	2,6
  9080  0059CA  5012               	movf	GameParameters_setLevel@s^0,w,c
  9081  0059CC  26D9               	addwf	fsr2l,f,c
  9082  0059CE  5013               	movf	(GameParameters_setLevel@s+1)^0,w,c
  9083  0059D0  22DA               	addwfc	fsr2h,f,c
  9084  0059D2  C014  FFDE         	movff	GameParameters_setLevel@value,postinc2
  9085  0059D6  C015  FFDD         	movff	GameParameters_setLevel@value+1,postdec2
  9086  0059DA  0012               	return		;funcret
  9087  0059DC                     __end_of_GameParameters_setLevel:
  9088                           	callstack 0
  9089                           
  9090 ;; *************** function _backlightController *****************
  9091 ;; Defined at:
  9092 ;;		line 179 in file "gameFunction.c"
  9093 ;; Parameters:    Size  Location     Type
  9094 ;;  g               2   23[COMRAM] PTR struct GameParameter
  9095 ;;		 -> g1(240), 
  9096 ;; Auto vars:     Size  Location     Type
  9097 ;;		None
  9098 ;; Return value:  Size  Location     Type
  9099 ;;                  1    wreg      void 
  9100 ;; Registers used:
  9101 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9102 ;; Tracked objects:
  9103 ;;		On entry : 0/0
  9104 ;;		On exit  : 0/0
  9105 ;;		Unchanged: 0/0
  9106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9107 ;;      Params:         2       0       0       0       0       0       0
  9108 ;;      Locals:         0       0       0       0       0       0       0
  9109 ;;      Temps:          2       0       0       0       0       0       0
  9110 ;;      Totals:         4       0       0       0       0       0       0
  9111 ;;Total ram usage:        4 bytes
  9112 ;; Hardware stack levels used: 1
  9113 ;; Hardware stack levels required when called: 5
  9114 ;; This function calls:
  9115 ;;		_GameParameters_setBackLight
  9116 ;; This function is called by:
  9117 ;;		_gameControllerController
  9118 ;; This function uses a non-reentrant model
  9119 ;;
  9120                           
  9121                           	psect	text35
  9122  0022CE                     __ptext35:
  9123                           	callstack 0
  9124  0022CE                     _backlightController:
  9125                           	callstack 21
  9126                           
  9127                           ;gameFunction.c: 179: void backlightController(GameParameters* g);gameFunction.c: 180: {
      +                          ;gameFunction.c: 182:     if(((g->x)>=50)&&((g->x)<64))
  9128                           
  9129                           ;incstack = 0
  9130  0022CE  EE20 F002          	lfsr	2,2
  9131  0022D2  5018               	movf	backlightController@g^0,w,c
  9132  0022D4  26D9               	addwf	fsr2l,f,c
  9133  0022D6  5019               	movf	(backlightController@g+1)^0,w,c
  9134  0022D8  22DA               	addwfc	fsr2h,f,c
  9135  0022DA  0E01               	movlw	1
  9136  0022DC  50DB               	movf	plusw2,w,c
  9137  0022DE  E104               	bnz	u4370
  9138  0022E0  0E32               	movlw	50
  9139  0022E2  5CDE               	subwf	postinc2,w,c
  9140  0022E4  A0D8               	btfss	status,0,c
  9141  0022E6  D018               	goto	l6966
  9142  0022E8                     u4370:
  9143  0022E8  EE20 F002          	lfsr	2,2
  9144  0022EC  5018               	movf	backlightController@g^0,w,c
  9145  0022EE  26D9               	addwf	fsr2l,f,c
  9146  0022F0  5019               	movf	(backlightController@g+1)^0,w,c
  9147  0022F2  22DA               	addwfc	fsr2h,f,c
  9148  0022F4  0E01               	movlw	1
  9149  0022F6  50DB               	movf	plusw2,w,c
  9150  0022F8  E10F               	bnz	l6966
  9151  0022FA  0E40               	movlw	64
  9152  0022FC  5CDE               	subwf	postinc2,w,c
  9153  0022FE  B0D8               	btfsc	status,0,c
  9154  002300  D00B               	goto	l6966
  9155                           
  9156                           ;gameFunction.c: 183:     {;gameFunction.c: 184:         GameParameters_setBackLight(g,0
      +                          );
  9157  002302  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9158  002306  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9159  00230A  0E00               	movlw	0
  9160  00230C  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9161  00230E  0E00               	movlw	0
  9162  002310  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9163  002312  EC58  F02B         	call	_GameParameters_setBackLight	;wreg free
  9164                           
  9165                           ;gameFunction.c: 185:     }
  9166  002316  D196               	goto	l858
  9167  002318                     l6966:
  9168  002318  EE20 F002          	lfsr	2,2
  9169  00231C  5018               	movf	backlightController@g^0,w,c
  9170  00231E  26D9               	addwf	fsr2l,f,c
  9171  002320  5019               	movf	(backlightController@g+1)^0,w,c
  9172  002322  22DA               	addwfc	fsr2h,f,c
  9173  002324  0E01               	movlw	1
  9174  002326  50DB               	movf	plusw2,w,c
  9175  002328  E104               	bnz	u4390
  9176  00232A  0E40               	movlw	64
  9177  00232C  5CDE               	subwf	postinc2,w,c
  9178  00232E  A0D8               	btfss	status,0,c
  9179  002330  D018               	goto	l6972
  9180  002332                     u4390:
  9181  002332  EE20 F002          	lfsr	2,2
  9182  002336  5018               	movf	backlightController@g^0,w,c
  9183  002338  26D9               	addwf	fsr2l,f,c
  9184  00233A  5019               	movf	(backlightController@g+1)^0,w,c
  9185  00233C  22DA               	addwfc	fsr2h,f,c
  9186  00233E  0E01               	movlw	1
  9187  002340  50DB               	movf	plusw2,w,c
  9188  002342  E10F               	bnz	l6972
  9189  002344  0E4E               	movlw	78
  9190  002346  5CDE               	subwf	postinc2,w,c
  9191  002348  B0D8               	btfsc	status,0,c
  9192  00234A  D00B               	goto	l6972
  9193                           
  9194                           ;gameFunction.c: 187:     {;gameFunction.c: 188:         GameParameters_setBackLight(g,1
      +                          );
  9195  00234C  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9196  002350  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9197  002354  0E00               	movlw	0
  9198  002356  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9199  002358  0E01               	movlw	1
  9200  00235A  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9201  00235C  EC58  F02B         	call	_GameParameters_setBackLight	;wreg free
  9202                           
  9203                           ;gameFunction.c: 189:     }
  9204  002360  D171               	goto	l858
  9205  002362                     l6972:
  9206  002362  EE20 F002          	lfsr	2,2
  9207  002366  5018               	movf	backlightController@g^0,w,c
  9208  002368  26D9               	addwf	fsr2l,f,c
  9209  00236A  5019               	movf	(backlightController@g+1)^0,w,c
  9210  00236C  22DA               	addwfc	fsr2h,f,c
  9211  00236E  0E01               	movlw	1
  9212  002370  50DB               	movf	plusw2,w,c
  9213  002372  E104               	bnz	u4410
  9214  002374  0E4E               	movlw	78
  9215  002376  5CDE               	subwf	postinc2,w,c
  9216  002378  A0D8               	btfss	status,0,c
  9217  00237A  D018               	goto	l6978
  9218  00237C                     u4410:
  9219  00237C  EE20 F002          	lfsr	2,2
  9220  002380  5018               	movf	backlightController@g^0,w,c
  9221  002382  26D9               	addwf	fsr2l,f,c
  9222  002384  5019               	movf	(backlightController@g+1)^0,w,c
  9223  002386  22DA               	addwfc	fsr2h,f,c
  9224  002388  0E01               	movlw	1
  9225  00238A  50DB               	movf	plusw2,w,c
  9226  00238C  E10F               	bnz	l6978
  9227  00238E  0E5C               	movlw	92
  9228  002390  5CDE               	subwf	postinc2,w,c
  9229  002392  B0D8               	btfsc	status,0,c
  9230  002394  D00B               	goto	l6978
  9231                           
  9232                           ;gameFunction.c: 191:     {;gameFunction.c: 192:         GameParameters_setBackLight(g,2
      +                          );
  9233  002396  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9234  00239A  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9235  00239E  0E00               	movlw	0
  9236  0023A0  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9237  0023A2  0E02               	movlw	2
  9238  0023A4  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9239  0023A6  EC58  F02B         	call	_GameParameters_setBackLight	;wreg free
  9240                           
  9241                           ;gameFunction.c: 193:     }
  9242  0023AA  D14C               	goto	l858
  9243  0023AC                     l6978:
  9244  0023AC  EE20 F002          	lfsr	2,2
  9245  0023B0  5018               	movf	backlightController@g^0,w,c
  9246  0023B2  26D9               	addwf	fsr2l,f,c
  9247  0023B4  5019               	movf	(backlightController@g+1)^0,w,c
  9248  0023B6  22DA               	addwfc	fsr2h,f,c
  9249  0023B8  0E01               	movlw	1
  9250  0023BA  50DB               	movf	plusw2,w,c
  9251  0023BC  E104               	bnz	u4430
  9252  0023BE  0E5C               	movlw	92
  9253  0023C0  5CDE               	subwf	postinc2,w,c
  9254  0023C2  A0D8               	btfss	status,0,c
  9255  0023C4  D018               	goto	l6984
  9256  0023C6                     u4430:
  9257  0023C6  EE20 F002          	lfsr	2,2
  9258  0023CA  5018               	movf	backlightController@g^0,w,c
  9259  0023CC  26D9               	addwf	fsr2l,f,c
  9260  0023CE  5019               	movf	(backlightController@g+1)^0,w,c
  9261  0023D0  22DA               	addwfc	fsr2h,f,c
  9262  0023D2  0E01               	movlw	1
  9263  0023D4  50DB               	movf	plusw2,w,c
  9264  0023D6  E10F               	bnz	l6984
  9265  0023D8  0E6A               	movlw	106
  9266  0023DA  5CDE               	subwf	postinc2,w,c
  9267  0023DC  B0D8               	btfsc	status,0,c
  9268  0023DE  D00B               	goto	l6984
  9269                           
  9270                           ;gameFunction.c: 195:     {;gameFunction.c: 196:         GameParameters_setBackLight(g,3
      +                          );
  9271  0023E0  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9272  0023E4  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9273  0023E8  0E00               	movlw	0
  9274  0023EA  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9275  0023EC  0E03               	movlw	3
  9276  0023EE  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9277  0023F0  EC58  F02B         	call	_GameParameters_setBackLight	;wreg free
  9278                           
  9279                           ;gameFunction.c: 197:     }
  9280  0023F4  D127               	goto	l858
  9281  0023F6                     l6984:
  9282  0023F6  EE20 F002          	lfsr	2,2
  9283  0023FA  5018               	movf	backlightController@g^0,w,c
  9284  0023FC  26D9               	addwf	fsr2l,f,c
  9285  0023FE  5019               	movf	(backlightController@g+1)^0,w,c
  9286  002400  22DA               	addwfc	fsr2h,f,c
  9287  002402  0E01               	movlw	1
  9288  002404  50DB               	movf	plusw2,w,c
  9289  002406  E104               	bnz	u4450
  9290  002408  0E6A               	movlw	106
  9291  00240A  5CDE               	subwf	postinc2,w,c
  9292  00240C  A0D8               	btfss	status,0,c
  9293  00240E  D018               	goto	l6990
  9294  002410                     u4450:
  9295  002410  EE20 F002          	lfsr	2,2
  9296  002414  5018               	movf	backlightController@g^0,w,c
  9297  002416  26D9               	addwf	fsr2l,f,c
  9298  002418  5019               	movf	(backlightController@g+1)^0,w,c
  9299  00241A  22DA               	addwfc	fsr2h,f,c
  9300  00241C  0E01               	movlw	1
  9301  00241E  50DB               	movf	plusw2,w,c
  9302  002420  E10F               	bnz	l6990
  9303  002422  0E78               	movlw	120
  9304  002424  5CDE               	subwf	postinc2,w,c
  9305  002426  B0D8               	btfsc	status,0,c
  9306  002428  D00B               	goto	l6990
  9307                           
  9308                           ;gameFunction.c: 199:     {;gameFunction.c: 200:         GameParameters_setBackLight(g,4
      +                          );
  9309  00242A  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9310  00242E  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9311  002432  0E00               	movlw	0
  9312  002434  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9313  002436  0E04               	movlw	4
  9314  002438  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9315  00243A  EC58  F02B         	call	_GameParameters_setBackLight	;wreg free
  9316                           
  9317                           ;gameFunction.c: 201:     }
  9318  00243E  D102               	goto	l858
  9319  002440                     l6990:
  9320  002440  EE20 F002          	lfsr	2,2
  9321  002444  5018               	movf	backlightController@g^0,w,c
  9322  002446  26D9               	addwf	fsr2l,f,c
  9323  002448  5019               	movf	(backlightController@g+1)^0,w,c
  9324  00244A  22DA               	addwfc	fsr2h,f,c
  9325  00244C  0E01               	movlw	1
  9326  00244E  50DB               	movf	plusw2,w,c
  9327  002450  E104               	bnz	u4470
  9328  002452  0E78               	movlw	120
  9329  002454  5CDE               	subwf	postinc2,w,c
  9330  002456  A0D8               	btfss	status,0,c
  9331  002458  D018               	goto	l6996
  9332  00245A                     u4470:
  9333  00245A  EE20 F002          	lfsr	2,2
  9334  00245E  5018               	movf	backlightController@g^0,w,c
  9335  002460  26D9               	addwf	fsr2l,f,c
  9336  002462  5019               	movf	(backlightController@g+1)^0,w,c
  9337  002464  22DA               	addwfc	fsr2h,f,c
  9338  002466  0E01               	movlw	1
  9339  002468  50DB               	movf	plusw2,w,c
  9340  00246A  E10F               	bnz	l6996
  9341  00246C  0E86               	movlw	134
  9342  00246E  5CDE               	subwf	postinc2,w,c
  9343  002470  B0D8               	btfsc	status,0,c
  9344  002472  D00B               	goto	l6996
  9345                           
  9346                           ;gameFunction.c: 203:     {;gameFunction.c: 204:         GameParameters_setBackLight(g,5
      +                          );
  9347  002474  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9348  002478  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9349  00247C  0E00               	movlw	0
  9350  00247E  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9351  002480  0E05               	movlw	5
  9352  002482  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9353  002484  EC58  F02B         	call	_GameParameters_setBackLight	;wreg free
  9354                           
  9355                           ;gameFunction.c: 205:     }
  9356  002488  D0DD               	goto	l858
  9357  00248A                     l6996:
  9358  00248A  EE20 F002          	lfsr	2,2
  9359  00248E  5018               	movf	backlightController@g^0,w,c
  9360  002490  26D9               	addwf	fsr2l,f,c
  9361  002492  5019               	movf	(backlightController@g+1)^0,w,c
  9362  002494  22DA               	addwfc	fsr2h,f,c
  9363  002496  0E01               	movlw	1
  9364  002498  50DB               	movf	plusw2,w,c
  9365  00249A  E104               	bnz	u4490
  9366  00249C  0E86               	movlw	134
  9367  00249E  5CDE               	subwf	postinc2,w,c
  9368  0024A0  A0D8               	btfss	status,0,c
  9369  0024A2  D018               	goto	l7002
  9370  0024A4                     u4490:
  9371  0024A4  EE20 F002          	lfsr	2,2
  9372  0024A8  5018               	movf	backlightController@g^0,w,c
  9373  0024AA  26D9               	addwf	fsr2l,f,c
  9374  0024AC  5019               	movf	(backlightController@g+1)^0,w,c
  9375  0024AE  22DA               	addwfc	fsr2h,f,c
  9376  0024B0  0E01               	movlw	1
  9377  0024B2  50DB               	movf	plusw2,w,c
  9378  0024B4  E10F               	bnz	l7002
  9379  0024B6  0E96               	movlw	150
  9380  0024B8  5CDE               	subwf	postinc2,w,c
  9381  0024BA  B0D8               	btfsc	status,0,c
  9382  0024BC  D00B               	goto	l7002
  9383                           
  9384                           ;gameFunction.c: 207:     {;gameFunction.c: 208:         GameParameters_setBackLight(g,6
      +                          );
  9385  0024BE  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9386  0024C2  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9387  0024C6  0E00               	movlw	0
  9388  0024C8  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9389  0024CA  0E06               	movlw	6
  9390  0024CC  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9391  0024CE  EC58  F02B         	call	_GameParameters_setBackLight	;wreg free
  9392                           
  9393                           ;gameFunction.c: 209:     }
  9394  0024D2  D0B8               	goto	l858
  9395  0024D4                     l7002:
  9396  0024D4  EE20 F002          	lfsr	2,2
  9397  0024D8  5018               	movf	backlightController@g^0,w,c
  9398  0024DA  26D9               	addwf	fsr2l,f,c
  9399  0024DC  5019               	movf	(backlightController@g+1)^0,w,c
  9400  0024DE  22DA               	addwfc	fsr2h,f,c
  9401  0024E0  0E01               	movlw	1
  9402  0024E2  50DB               	movf	plusw2,w,c
  9403  0024E4  E104               	bnz	u4510
  9404  0024E6  0E96               	movlw	150
  9405  0024E8  5CDE               	subwf	postinc2,w,c
  9406  0024EA  A0D8               	btfss	status,0,c
  9407  0024EC  D018               	goto	l7008
  9408  0024EE                     u4510:
  9409  0024EE  EE20 F002          	lfsr	2,2
  9410  0024F2  5018               	movf	backlightController@g^0,w,c
  9411  0024F4  26D9               	addwf	fsr2l,f,c
  9412  0024F6  5019               	movf	(backlightController@g+1)^0,w,c
  9413  0024F8  22DA               	addwfc	fsr2h,f,c
  9414  0024FA  0E01               	movlw	1
  9415  0024FC  50DB               	movf	plusw2,w,c
  9416  0024FE  E10F               	bnz	l7008
  9417  002500  0EA4               	movlw	164
  9418  002502  5CDE               	subwf	postinc2,w,c
  9419  002504  B0D8               	btfsc	status,0,c
  9420  002506  D00B               	goto	l7008
  9421                           
  9422                           ;gameFunction.c: 211:     {;gameFunction.c: 212:         GameParameters_setBackLight(g,7
      +                          );
  9423  002508  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9424  00250C  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9425  002510  0E00               	movlw	0
  9426  002512  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9427  002514  0E07               	movlw	7
  9428  002516  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9429  002518  EC58  F02B         	call	_GameParameters_setBackLight	;wreg free
  9430                           
  9431                           ;gameFunction.c: 213:     }
  9432  00251C  D093               	goto	l858
  9433  00251E                     l7008:
  9434  00251E  EE20 F002          	lfsr	2,2
  9435  002522  5018               	movf	backlightController@g^0,w,c
  9436  002524  26D9               	addwf	fsr2l,f,c
  9437  002526  5019               	movf	(backlightController@g+1)^0,w,c
  9438  002528  22DA               	addwfc	fsr2h,f,c
  9439  00252A  0E01               	movlw	1
  9440  00252C  50DB               	movf	plusw2,w,c
  9441  00252E  E104               	bnz	u4530
  9442  002530  0EA4               	movlw	164
  9443  002532  5CDE               	subwf	postinc2,w,c
  9444  002534  A0D8               	btfss	status,0,c
  9445  002536  D018               	goto	l7014
  9446  002538                     u4530:
  9447  002538  EE20 F002          	lfsr	2,2
  9448  00253C  5018               	movf	backlightController@g^0,w,c
  9449  00253E  26D9               	addwf	fsr2l,f,c
  9450  002540  5019               	movf	(backlightController@g+1)^0,w,c
  9451  002542  22DA               	addwfc	fsr2h,f,c
  9452  002544  0E01               	movlw	1
  9453  002546  50DB               	movf	plusw2,w,c
  9454  002548  E10F               	bnz	l7014
  9455  00254A  0EB2               	movlw	178
  9456  00254C  5CDE               	subwf	postinc2,w,c
  9457  00254E  B0D8               	btfsc	status,0,c
  9458  002550  D00B               	goto	l7014
  9459                           
  9460                           ;gameFunction.c: 215:     {;gameFunction.c: 216:         GameParameters_setBackLight(g,8
      +                          );
  9461  002552  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9462  002556  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9463  00255A  0E00               	movlw	0
  9464  00255C  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9465  00255E  0E08               	movlw	8
  9466  002560  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9467  002562  EC58  F02B         	call	_GameParameters_setBackLight	;wreg free
  9468                           
  9469                           ;gameFunction.c: 217:     }
  9470  002566  D06E               	goto	l858
  9471  002568                     l7014:
  9472  002568  EE20 F002          	lfsr	2,2
  9473  00256C  5018               	movf	backlightController@g^0,w,c
  9474  00256E  26D9               	addwf	fsr2l,f,c
  9475  002570  5019               	movf	(backlightController@g+1)^0,w,c
  9476  002572  22DA               	addwfc	fsr2h,f,c
  9477  002574  0E01               	movlw	1
  9478  002576  50DB               	movf	plusw2,w,c
  9479  002578  E104               	bnz	u4550
  9480  00257A  0EB2               	movlw	178
  9481  00257C  5CDE               	subwf	postinc2,w,c
  9482  00257E  A0D8               	btfss	status,0,c
  9483  002580  D018               	goto	l7020
  9484  002582                     u4550:
  9485  002582  EE20 F002          	lfsr	2,2
  9486  002586  5018               	movf	backlightController@g^0,w,c
  9487  002588  26D9               	addwf	fsr2l,f,c
  9488  00258A  5019               	movf	(backlightController@g+1)^0,w,c
  9489  00258C  22DA               	addwfc	fsr2h,f,c
  9490  00258E  0E01               	movlw	1
  9491  002590  50DB               	movf	plusw2,w,c
  9492  002592  E10F               	bnz	l7020
  9493  002594  0EC0               	movlw	192
  9494  002596  5CDE               	subwf	postinc2,w,c
  9495  002598  B0D8               	btfsc	status,0,c
  9496  00259A  D00B               	goto	l7020
  9497                           
  9498                           ;gameFunction.c: 219:     {;gameFunction.c: 220:         GameParameters_setBackLight(g,9
      +                          );
  9499  00259C  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9500  0025A0  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9501  0025A4  0E00               	movlw	0
  9502  0025A6  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9503  0025A8  0E09               	movlw	9
  9504  0025AA  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9505  0025AC  EC58  F02B         	call	_GameParameters_setBackLight	;wreg free
  9506                           
  9507                           ;gameFunction.c: 221:     }
  9508  0025B0  D049               	goto	l858
  9509  0025B2                     l7020:
  9510  0025B2  EE20 F002          	lfsr	2,2
  9511  0025B6  5018               	movf	backlightController@g^0,w,c
  9512  0025B8  26D9               	addwf	fsr2l,f,c
  9513  0025BA  5019               	movf	(backlightController@g+1)^0,w,c
  9514  0025BC  22DA               	addwfc	fsr2h,f,c
  9515  0025BE  0E01               	movlw	1
  9516  0025C0  50DB               	movf	plusw2,w,c
  9517  0025C2  E104               	bnz	u4570
  9518  0025C4  0EC0               	movlw	192
  9519  0025C6  5CDE               	subwf	postinc2,w,c
  9520  0025C8  A0D8               	btfss	status,0,c
  9521  0025CA  D018               	goto	l7026
  9522  0025CC                     u4570:
  9523  0025CC  EE20 F002          	lfsr	2,2
  9524  0025D0  5018               	movf	backlightController@g^0,w,c
  9525  0025D2  26D9               	addwf	fsr2l,f,c
  9526  0025D4  5019               	movf	(backlightController@g+1)^0,w,c
  9527  0025D6  22DA               	addwfc	fsr2h,f,c
  9528  0025D8  0E01               	movlw	1
  9529  0025DA  50DB               	movf	plusw2,w,c
  9530  0025DC  E10F               	bnz	l7026
  9531  0025DE  0ECE               	movlw	206
  9532  0025E0  5CDE               	subwf	postinc2,w,c
  9533  0025E2  B0D8               	btfsc	status,0,c
  9534  0025E4  D00B               	goto	l7026
  9535                           
  9536                           ;gameFunction.c: 223:     {;gameFunction.c: 224:         GameParameters_setBackLight(g,1
      +                          0);
  9537  0025E6  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9538  0025EA  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9539  0025EE  0E00               	movlw	0
  9540  0025F0  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9541  0025F2  0E0A               	movlw	10
  9542  0025F4  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9543  0025F6  EC58  F02B         	call	_GameParameters_setBackLight	;wreg free
  9544                           
  9545                           ;gameFunction.c: 225:     }
  9546  0025FA  D024               	goto	l858
  9547  0025FC                     l7026:
  9548  0025FC  EE20 F002          	lfsr	2,2
  9549  002600  5018               	movf	backlightController@g^0,w,c
  9550  002602  26D9               	addwf	fsr2l,f,c
  9551  002604  5019               	movf	(backlightController@g+1)^0,w,c
  9552  002606  22DA               	addwfc	fsr2h,f,c
  9553  002608  0E01               	movlw	1
  9554  00260A  50DB               	movf	plusw2,w,c
  9555  00260C  E104               	bnz	u4590
  9556  00260E  0ECE               	movlw	206
  9557  002610  5CDE               	subwf	postinc2,w,c
  9558  002612  A0D8               	btfss	status,0,c
  9559  002614  D017               	goto	l858
  9560  002616                     u4590:
  9561  002616  EE20 F002          	lfsr	2,2
  9562  00261A  5018               	movf	backlightController@g^0,w,c
  9563  00261C  26D9               	addwf	fsr2l,f,c
  9564  00261E  5019               	movf	(backlightController@g+1)^0,w,c
  9565  002620  22DA               	addwfc	fsr2h,f,c
  9566  002622  0E01               	movlw	1
  9567  002624  50DB               	movf	plusw2,w,c
  9568  002626  E10E               	bnz	l858
  9569  002628  0ED7               	movlw	215
  9570  00262A  5CDE               	subwf	postinc2,w,c
  9571  00262C  B0D8               	btfsc	status,0,c
  9572  00262E  D00A               	goto	l858
  9573                           
  9574                           ;gameFunction.c: 227:     {;gameFunction.c: 228:         GameParameters_setBackLight(g,1
      +                          1);
  9575  002630  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9576  002634  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9577  002638  0E00               	movlw	0
  9578  00263A  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9579  00263C  0E0B               	movlw	11
  9580  00263E  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9581  002640  EC58  F02B         	call	_GameParameters_setBackLight	;wreg free
  9582  002644                     l858:
  9583                           
  9584                           ;gameFunction.c: 230:     g->sldBackLight.value=g->backlight;
  9585  002644  C018  FFD9         	movff	backlightController@g,fsr2l
  9586  002648  C019  FFDA         	movff	backlightController@g+1,fsr2h
  9587  00264C  EE10 F0A9          	lfsr	1,169
  9588  002650  5018               	movf	backlightController@g^0,w,c
  9589  002652  26E1               	addwf	fsr1l,f,c
  9590  002654  5019               	movf	(backlightController@g+1)^0,w,c
  9591  002656  22E2               	addwfc	fsr1h,f,c
  9592  002658  CFDE FFE6          	movff	postinc2,postinc1
  9593  00265C  CFDD FFE5          	movff	postdec2,postdec1
  9594  002660  0012               	return		;funcret
  9595  002662                     __end_of_backlightController:
  9596                           	callstack 0
  9597                           
  9598 ;; *************** function _GameParameters_setBackLight *****************
  9599 ;; Defined at:
  9600 ;;		line 38 in file "class/gameParameters.c"
  9601 ;; Parameters:    Size  Location     Type
  9602 ;;  s               2   17[COMRAM] PTR struct GameParameter
  9603 ;;		 -> g1(240), 
  9604 ;;  value           2   19[COMRAM] unsigned short 
  9605 ;; Auto vars:     Size  Location     Type
  9606 ;;		None
  9607 ;; Return value:  Size  Location     Type
  9608 ;;                  1    wreg      void 
  9609 ;; Registers used:
  9610 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9611 ;; Tracked objects:
  9612 ;;		On entry : 0/0
  9613 ;;		On exit  : 0/0
  9614 ;;		Unchanged: 0/0
  9615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9616 ;;      Params:         4       0       0       0       0       0       0
  9617 ;;      Locals:         0       0       0       0       0       0       0
  9618 ;;      Temps:          2       0       0       0       0       0       0
  9619 ;;      Totals:         6       0       0       0       0       0       0
  9620 ;;Total ram usage:        6 bytes
  9621 ;; Hardware stack levels used: 1
  9622 ;; Hardware stack levels required when called: 4
  9623 ;; This function calls:
  9624 ;;		Nothing
  9625 ;; This function is called by:
  9626 ;;		_backlightController
  9627 ;; This function uses a non-reentrant model
  9628 ;;
  9629                           
  9630                           	psect	text36
  9631  0056B0                     __ptext36:
  9632                           	callstack 0
  9633  0056B0                     _GameParameters_setBackLight:
  9634                           	callstack 21
  9635                           
  9636                           ;class/gameParameters.c: 38: void GameParameters_setBackLight(struct GameParameters* s, 
      +                          uint16_t value);class/gameParameters.c: 39: {;class/gameParameters.c: 40:     s->backlig
      +                          ht = value;
  9637                           
  9638                           ;incstack = 0
  9639  0056B0  C012  FFD9         	movff	GameParameters_setBackLight@s,fsr2l
  9640  0056B4  C013  FFDA         	movff	GameParameters_setBackLight@s+1,fsr2h
  9641  0056B8  C014  FFDE         	movff	GameParameters_setBackLight@value,postinc2
  9642  0056BC  C015  FFDD         	movff	GameParameters_setBackLight@value+1,postdec2
  9643                           
  9644                           ;class/gameParameters.c: 41:     if(s->backlight==11)
  9645  0056C0  C012  FFD9         	movff	GameParameters_setBackLight@s,fsr2l
  9646  0056C4  C013  FFDA         	movff	GameParameters_setBackLight@s+1,fsr2h
  9647  0056C8  0E0B               	movlw	11
  9648  0056CA  18DE               	xorwf	postinc2,w,c
  9649  0056CC  10DE               	iorwf	postinc2,w,c
  9650  0056CE  A4D8               	btfss	status,2,c
  9651  0056D0  D002               	goto	l6638
  9652                           
  9653                           ;class/gameParameters.c: 42:     {;class/gameParameters.c: 43:         CCPR2L = 255;
  9654  0056D2  6867               	setf	103,c	;volatile
  9655                           
  9656                           ;class/gameParameters.c: 44:     }
  9657  0056D4  0012               	return	
  9658  0056D6                     l6638:
  9659                           
  9660                           ;class/gameParameters.c: 46:     {;class/gameParameters.c: 47:         CCPR2L=(s->backli
      +                          ght)*23;
  9661  0056D6  C012  FFD9         	movff	GameParameters_setBackLight@s,fsr2l
  9662  0056DA  C013  FFDA         	movff	GameParameters_setBackLight@s+1,fsr2h
  9663  0056DE  50DF               	movf	indf2,w,c
  9664  0056E0  0D17               	mullw	23
  9665  0056E2  CFF3 FF67          	movff	prodl,3943	;volatile
  9666  0056E6  0012               	return		;funcret
  9667  0056E8                     __end_of_GameParameters_setBackLight:
  9668                           	callstack 0
  9669                           
  9670 ;; *************** function _XF_scheduleTimer *****************
  9671 ;; Defined at:
  9672 ;;		line 96 in file "xf/xf.c"
  9673 ;; Parameters:    Size  Location     Type
  9674 ;;  tm              2   18[COMRAM] unsigned short 
  9675 ;;  ev              1   20[COMRAM] unsigned char 
  9676 ;;  inISR           1   21[COMRAM] _Bool 
  9677 ;; Auto vars:     Size  Location     Type
  9678 ;;  i               1   22[COMRAM] unsigned char 
  9679 ;; Return value:  Size  Location     Type
  9680 ;;                  1    wreg      unsigned char 
  9681 ;; Registers used:
  9682 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9683 ;; Tracked objects:
  9684 ;;		On entry : 0/0
  9685 ;;		On exit  : 0/0
  9686 ;;		Unchanged: 0/0
  9687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9688 ;;      Params:         4       0       0       0       0       0       0
  9689 ;;      Locals:         1       0       0       0       0       0       0
  9690 ;;      Temps:          0       0       0       0       0       0       0
  9691 ;;      Totals:         5       0       0       0       0       0       0
  9692 ;;Total ram usage:        5 bytes
  9693 ;; Hardware stack levels used: 1
  9694 ;; Hardware stack levels required when called: 5
  9695 ;; This function calls:
  9696 ;;		_ENTERCRITICAL
  9697 ;;		_LEAVECRITICAL
  9698 ;; This function is called by:
  9699 ;;		_touchScreenInit
  9700 ;;		_touchScreenController
  9701 ;;		_gameControllerSM
  9702 ;;		_gameControllerController
  9703 ;; This function uses a non-reentrant model
  9704 ;;
  9705                           
  9706                           	psect	text37
  9707  0053DA                     __ptext37:
  9708                           	callstack 0
  9709  0053DA                     _XF_scheduleTimer:
  9710                           	callstack 22
  9711                           
  9712                           ;xf/xf.c: 96: TimerID XF_scheduleTimer(Time tm, Event ev, _Bool inISR);xf/xf.c: 97: {;xf
      +                          /xf.c: 98:     uint8_t i;;xf/xf.c: 100:     ENTERCRITICAL(inISR);
  9713                           
  9714                           ;incstack = 0
  9715  0053DA  5016               	movf	XF_scheduleTimer@inISR^0,w,c
  9716  0053DC  ECF4  F02C         	call	_ENTERCRITICAL
  9717                           
  9718                           ;xf/xf.c: 101:     for (i=0; i<8; i++)
  9719  0053E0  0E00               	movlw	0
  9720  0053E2  6E17               	movwf	XF_scheduleTimer@i^0,c
  9721  0053E4                     l6948:
  9722                           
  9723                           ;xf/xf.c: 102:     {;xf/xf.c: 103:         if (theXF.timerList[i].ev == NULLEVENT)
  9724  0053E4  5017               	movf	XF_scheduleTimer@i^0,w,c
  9725  0053E6  0D03               	mullw	3
  9726  0053E8  50F3               	movf	243,w,c
  9727  0053EA  0F62               	addlw	low (_theXF+2)
  9728  0053EC  6ED9               	movwf	fsr2l,c
  9729  0053EE  6ADA               	clrf	fsr2h,c
  9730  0053F0  50DF               	movf	indf2,w,c
  9731  0053F2  A4D8               	btfss	status,2,c
  9732  0053F4  D013               	goto	l6952
  9733                           
  9734                           ;xf/xf.c: 104:         {;xf/xf.c: 105:             theXF.timerList[i].tm = tm;
  9735  0053F6  5017               	movf	XF_scheduleTimer@i^0,w,c
  9736  0053F8  0D03               	mullw	3
  9737  0053FA  50F3               	movf	243,w,c
  9738  0053FC  0F60               	addlw	low _theXF
  9739  0053FE  6ED9               	movwf	fsr2l,c
  9740  005400  6ADA               	clrf	fsr2h,c
  9741  005402  C013  FFDE         	movff	XF_scheduleTimer@tm,postinc2
  9742  005406  C014  FFDD         	movff	XF_scheduleTimer@tm+1,postdec2
  9743                           
  9744                           ;xf/xf.c: 106:             theXF.timerList[i].ev = ev;
  9745  00540A  5017               	movf	XF_scheduleTimer@i^0,w,c
  9746  00540C  0D03               	mullw	3
  9747  00540E  50F3               	movf	243,w,c
  9748  005410  0F62               	addlw	low (_theXF+2)
  9749  005412  6ED9               	movwf	fsr2l,c
  9750  005414  6ADA               	clrf	fsr2h,c
  9751  005416  C015  FFDF         	movff	XF_scheduleTimer@ev,indf2
  9752                           
  9753                           ;xf/xf.c: 107:             break;
  9754  00541A  D004               	goto	u4360
  9755  00541C                     l6952:
  9756                           
  9757                           ;xf/xf.c: 109:     }
  9758  00541C  2A17               	incf	XF_scheduleTimer@i^0,f,c
  9759  00541E  0E07               	movlw	7
  9760  005420  6417               	cpfsgt	XF_scheduleTimer@i^0,c
  9761  005422  D7E0               	goto	l6948
  9762  005424                     u4360:
  9763                           
  9764                           ;xf/xf.c: 114:     LEAVECRITICAL(inISR);
  9765  005424  5016               	movf	XF_scheduleTimer@inISR^0,w,c
  9766  005426  ECEE  F02C         	call	_LEAVECRITICAL
  9767  00542A  0012               	return		;funcret
  9768  00542C                     __end_of_XF_scheduleTimer:
  9769                           	callstack 0
  9770                           
  9771 ;; *************** function _LCD_InSlider *****************
  9772 ;; Defined at:
  9773 ;;		line 546 in file "libraries/lcd_highlevel.c"
  9774 ;; Parameters:    Size  Location     Type
  9775 ;;  slider          2   17[COMRAM] PTR struct .
  9776 ;;		 -> g1(240), 
  9777 ;;  posX            2   19[COMRAM] unsigned short 
  9778 ;;  posY            2   21[COMRAM] unsigned short 
  9779 ;; Auto vars:     Size  Location     Type
  9780 ;;		None
  9781 ;; Return value:  Size  Location     Type
  9782 ;;                  1    wreg      unsigned char 
  9783 ;; Registers used:
  9784 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9785 ;; Tracked objects:
  9786 ;;		On entry : 0/0
  9787 ;;		On exit  : 0/0
  9788 ;;		Unchanged: 0/0
  9789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9790 ;;      Params:         6       0       0       0       0       0       0
  9791 ;;      Locals:         0       0       0       0       0       0       0
  9792 ;;      Temps:          4       0       0       0       0       0       0
  9793 ;;      Totals:        10       0       0       0       0       0       0
  9794 ;;Total ram usage:       10 bytes
  9795 ;; Hardware stack levels used: 1
  9796 ;; Hardware stack levels required when called: 4
  9797 ;; This function calls:
  9798 ;;		Nothing
  9799 ;; This function is called by:
  9800 ;;		_gameControllerController
  9801 ;; This function uses a non-reentrant model
  9802 ;;
  9803                           
  9804                           	psect	text38
  9805  004A8A                     __ptext38:
  9806                           	callstack 0
  9807  004A8A                     _LCD_InSlider:
  9808                           	callstack 22
  9809                           
  9810                           ;libraries/lcd_highlevel.c: 546: uint8_t LCD_InSlider(sld_t * slider, uint16_t posX, uin
      +                          t16_t posY);libraries/lcd_highlevel.c: 547: {;libraries/lcd_highlevel.c: 549:   if(posX 
      +                          < slider->posX)
  9811                           
  9812                           ;incstack = 0
  9813  004A8A  C012  FFD9         	movff	LCD_InSlider@slider,fsr2l
  9814  004A8E  C013  FFDA         	movff	LCD_InSlider@slider+1,fsr2h
  9815  004A92  50DE               	movf	postinc2,w,c
  9816  004A94  5C14               	subwf	LCD_InSlider@posX^0,w,c
  9817  004A96  50DE               	movf	postinc2,w,c
  9818  004A98  5815               	subwfb	(LCD_InSlider@posX+1)^0,w,c
  9819  004A9A  B0D8               	btfsc	status,0,c
  9820  004A9C  D002               	goto	l6900
  9821  004A9E                     u4310:
  9822                           
  9823                           ;libraries/lcd_highlevel.c: 550:   {;libraries/lcd_highlevel.c: 551:     return 0;
  9824  004A9E  0E00               	movlw	0
  9825  004AA0  0012               	return	
  9826  004AA2                     l6900:
  9827                           
  9828                           ;libraries/lcd_highlevel.c: 554:   if(posX > (slider->posX + slider->width))
  9829  004AA2  EE20 F004          	lfsr	2,4
  9830  004AA6  5012               	movf	LCD_InSlider@slider^0,w,c
  9831  004AA8  26D9               	addwf	fsr2l,f,c
  9832  004AAA  5013               	movf	(LCD_InSlider@slider+1)^0,w,c
  9833  004AAC  22DA               	addwfc	fsr2h,f,c
  9834  004AAE  CFDE F018          	movff	postinc2,??_LCD_InSlider
  9835  004AB2  CFDD F019          	movff	postdec2,??_LCD_InSlider+1
  9836  004AB6  C012  FFD9         	movff	LCD_InSlider@slider,fsr2l
  9837  004ABA  C013  FFDA         	movff	LCD_InSlider@slider+1,fsr2h
  9838  004ABE  CFDE F01A          	movff	postinc2,??_LCD_InSlider+2
  9839  004AC2  CFDD F01B          	movff	postdec2,??_LCD_InSlider+3
  9840  004AC6  5018               	movf	??_LCD_InSlider^0,w,c
  9841  004AC8  261A               	addwf	(??_LCD_InSlider+2)^0,f,c
  9842  004ACA  5019               	movf	(??_LCD_InSlider+1)^0,w,c
  9843  004ACC  221B               	addwfc	(??_LCD_InSlider+3)^0,f,c
  9844  004ACE  5014               	movf	LCD_InSlider@posX^0,w,c
  9845  004AD0  5C1A               	subwf	(??_LCD_InSlider+2)^0,w,c
  9846  004AD2  5015               	movf	(LCD_InSlider@posX+1)^0,w,c
  9847  004AD4  581B               	subwfb	(??_LCD_InSlider+3)^0,w,c
  9848  004AD6  A0D8               	btfss	status,0,c
  9849  004AD8  D7E2               	goto	u4310
  9850                           
  9851                           ;libraries/lcd_highlevel.c: 559:   if(posY < slider->posY)
  9852  004ADA  EE20 F002          	lfsr	2,2
  9853  004ADE  5012               	movf	LCD_InSlider@slider^0,w,c
  9854  004AE0  26D9               	addwf	fsr2l,f,c
  9855  004AE2  5013               	movf	(LCD_InSlider@slider+1)^0,w,c
  9856  004AE4  22DA               	addwfc	fsr2h,f,c
  9857  004AE6  50DE               	movf	postinc2,w,c
  9858  004AE8  5C16               	subwf	LCD_InSlider@posY^0,w,c
  9859  004AEA  50DE               	movf	postinc2,w,c
  9860  004AEC  5817               	subwfb	(LCD_InSlider@posY+1)^0,w,c
  9861  004AEE  A0D8               	btfss	status,0,c
  9862  004AF0  D7D6               	goto	u4310
  9863                           
  9864                           ;libraries/lcd_highlevel.c: 564:   if(posY > (slider->posY + slider->height))
  9865  004AF2  EE20 F006          	lfsr	2,6
  9866  004AF6  5012               	movf	LCD_InSlider@slider^0,w,c
  9867  004AF8  26D9               	addwf	fsr2l,f,c
  9868  004AFA  5013               	movf	(LCD_InSlider@slider+1)^0,w,c
  9869  004AFC  22DA               	addwfc	fsr2h,f,c
  9870  004AFE  CFDE F018          	movff	postinc2,??_LCD_InSlider
  9871  004B02  CFDD F019          	movff	postdec2,??_LCD_InSlider+1
  9872  004B06  EE20 F002          	lfsr	2,2
  9873  004B0A  5012               	movf	LCD_InSlider@slider^0,w,c
  9874  004B0C  26D9               	addwf	fsr2l,f,c
  9875  004B0E  5013               	movf	(LCD_InSlider@slider+1)^0,w,c
  9876  004B10  22DA               	addwfc	fsr2h,f,c
  9877  004B12  CFDE F01A          	movff	postinc2,??_LCD_InSlider+2
  9878  004B16  CFDD F01B          	movff	postdec2,??_LCD_InSlider+3
  9879  004B1A  5018               	movf	??_LCD_InSlider^0,w,c
  9880  004B1C  261A               	addwf	(??_LCD_InSlider+2)^0,f,c
  9881  004B1E  5019               	movf	(??_LCD_InSlider+1)^0,w,c
  9882  004B20  221B               	addwfc	(??_LCD_InSlider+3)^0,f,c
  9883  004B22  5016               	movf	LCD_InSlider@posY^0,w,c
  9884  004B24  5C1A               	subwf	(??_LCD_InSlider+2)^0,w,c
  9885  004B26  5017               	movf	(LCD_InSlider@posY+1)^0,w,c
  9886  004B28  581B               	subwfb	(??_LCD_InSlider+3)^0,w,c
  9887  004B2A  A0D8               	btfss	status,0,c
  9888  004B2C  D7B8               	goto	u4310
  9889                           
  9890                           ;libraries/lcd_highlevel.c: 568:   return 1;
  9891  004B2E  0E01               	movlw	1
  9892  004B30  0012               	return		;funcret
  9893  004B32                     __end_of_LCD_InSlider:
  9894                           	callstack 0
  9895                           
  9896 ;; *************** function _LCD_InButton *****************
  9897 ;; Defined at:
  9898 ;;		line 514 in file "libraries/lcd_highlevel.c"
  9899 ;; Parameters:    Size  Location     Type
  9900 ;;  button          2   17[COMRAM] PTR struct .
  9901 ;;		 -> g1(240), 
  9902 ;;  posX            2   19[COMRAM] unsigned short 
  9903 ;;  posY            2   21[COMRAM] unsigned short 
  9904 ;; Auto vars:     Size  Location     Type
  9905 ;;		None
  9906 ;; Return value:  Size  Location     Type
  9907 ;;                  1    wreg      unsigned char 
  9908 ;; Registers used:
  9909 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9910 ;; Tracked objects:
  9911 ;;		On entry : 0/0
  9912 ;;		On exit  : 0/0
  9913 ;;		Unchanged: 0/0
  9914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9915 ;;      Params:         6       0       0       0       0       0       0
  9916 ;;      Locals:         0       0       0       0       0       0       0
  9917 ;;      Temps:          4       0       0       0       0       0       0
  9918 ;;      Totals:        10       0       0       0       0       0       0
  9919 ;;Total ram usage:       10 bytes
  9920 ;; Hardware stack levels used: 1
  9921 ;; Hardware stack levels required when called: 4
  9922 ;; This function calls:
  9923 ;;		Nothing
  9924 ;; This function is called by:
  9925 ;;		_gameControllerController
  9926 ;; This function uses a non-reentrant model
  9927 ;;
  9928                           
  9929                           	psect	text39
  9930  004B32                     __ptext39:
  9931                           	callstack 0
  9932  004B32                     _LCD_InButton:
  9933                           	callstack 22
  9934                           
  9935                           ;libraries/lcd_highlevel.c: 514: uint8_t LCD_InButton(btn_t * button, uint16_t posX, uin
      +                          t16_t posY);libraries/lcd_highlevel.c: 515: {;libraries/lcd_highlevel.c: 517:   if(posX 
      +                          < button->posX)
  9936                           
  9937                           ;incstack = 0
  9938  004B32  C012  FFD9         	movff	LCD_InButton@button,fsr2l
  9939  004B36  C013  FFDA         	movff	LCD_InButton@button+1,fsr2h
  9940  004B3A  50DE               	movf	postinc2,w,c
  9941  004B3C  5C14               	subwf	LCD_InButton@posX^0,w,c
  9942  004B3E  50DE               	movf	postinc2,w,c
  9943  004B40  5815               	subwfb	(LCD_InButton@posX+1)^0,w,c
  9944  004B42  B0D8               	btfsc	status,0,c
  9945  004B44  D002               	goto	l6872
  9946  004B46                     u4270:
  9947                           
  9948                           ;libraries/lcd_highlevel.c: 518:   {;libraries/lcd_highlevel.c: 519:     return 0;
  9949  004B46  0E00               	movlw	0
  9950  004B48  0012               	return	
  9951  004B4A                     l6872:
  9952                           
  9953                           ;libraries/lcd_highlevel.c: 522:   if(posX > (button->posX + button->width))
  9954  004B4A  EE20 F004          	lfsr	2,4
  9955  004B4E  5012               	movf	LCD_InButton@button^0,w,c
  9956  004B50  26D9               	addwf	fsr2l,f,c
  9957  004B52  5013               	movf	(LCD_InButton@button+1)^0,w,c
  9958  004B54  22DA               	addwfc	fsr2h,f,c
  9959  004B56  CFDE F018          	movff	postinc2,??_LCD_InButton
  9960  004B5A  CFDD F019          	movff	postdec2,??_LCD_InButton+1
  9961  004B5E  C012  FFD9         	movff	LCD_InButton@button,fsr2l
  9962  004B62  C013  FFDA         	movff	LCD_InButton@button+1,fsr2h
  9963  004B66  CFDE F01A          	movff	postinc2,??_LCD_InButton+2
  9964  004B6A  CFDD F01B          	movff	postdec2,??_LCD_InButton+3
  9965  004B6E  5018               	movf	??_LCD_InButton^0,w,c
  9966  004B70  261A               	addwf	(??_LCD_InButton+2)^0,f,c
  9967  004B72  5019               	movf	(??_LCD_InButton+1)^0,w,c
  9968  004B74  221B               	addwfc	(??_LCD_InButton+3)^0,f,c
  9969  004B76  5014               	movf	LCD_InButton@posX^0,w,c
  9970  004B78  5C1A               	subwf	(??_LCD_InButton+2)^0,w,c
  9971  004B7A  5015               	movf	(LCD_InButton@posX+1)^0,w,c
  9972  004B7C  581B               	subwfb	(??_LCD_InButton+3)^0,w,c
  9973  004B7E  A0D8               	btfss	status,0,c
  9974  004B80  D7E2               	goto	u4270
  9975                           
  9976                           ;libraries/lcd_highlevel.c: 527:   if(posY < button->posY)
  9977  004B82  EE20 F002          	lfsr	2,2
  9978  004B86  5012               	movf	LCD_InButton@button^0,w,c
  9979  004B88  26D9               	addwf	fsr2l,f,c
  9980  004B8A  5013               	movf	(LCD_InButton@button+1)^0,w,c
  9981  004B8C  22DA               	addwfc	fsr2h,f,c
  9982  004B8E  50DE               	movf	postinc2,w,c
  9983  004B90  5C16               	subwf	LCD_InButton@posY^0,w,c
  9984  004B92  50DE               	movf	postinc2,w,c
  9985  004B94  5817               	subwfb	(LCD_InButton@posY+1)^0,w,c
  9986  004B96  A0D8               	btfss	status,0,c
  9987  004B98  D7D6               	goto	u4270
  9988                           
  9989                           ;libraries/lcd_highlevel.c: 532:   if(posY > (button->posY + button->height))
  9990  004B9A  EE20 F006          	lfsr	2,6
  9991  004B9E  5012               	movf	LCD_InButton@button^0,w,c
  9992  004BA0  26D9               	addwf	fsr2l,f,c
  9993  004BA2  5013               	movf	(LCD_InButton@button+1)^0,w,c
  9994  004BA4  22DA               	addwfc	fsr2h,f,c
  9995  004BA6  CFDE F018          	movff	postinc2,??_LCD_InButton
  9996  004BAA  CFDD F019          	movff	postdec2,??_LCD_InButton+1
  9997  004BAE  EE20 F002          	lfsr	2,2
  9998  004BB2  5012               	movf	LCD_InButton@button^0,w,c
  9999  004BB4  26D9               	addwf	fsr2l,f,c
 10000  004BB6  5013               	movf	(LCD_InButton@button+1)^0,w,c
 10001  004BB8  22DA               	addwfc	fsr2h,f,c
 10002  004BBA  CFDE F01A          	movff	postinc2,??_LCD_InButton+2
 10003  004BBE  CFDD F01B          	movff	postdec2,??_LCD_InButton+3
 10004  004BC2  5018               	movf	??_LCD_InButton^0,w,c
 10005  004BC4  261A               	addwf	(??_LCD_InButton+2)^0,f,c
 10006  004BC6  5019               	movf	(??_LCD_InButton+1)^0,w,c
 10007  004BC8  221B               	addwfc	(??_LCD_InButton+3)^0,f,c
 10008  004BCA  5016               	movf	LCD_InButton@posY^0,w,c
 10009  004BCC  5C1A               	subwf	(??_LCD_InButton+2)^0,w,c
 10010  004BCE  5017               	movf	(LCD_InButton@posY+1)^0,w,c
 10011  004BD0  581B               	subwfb	(??_LCD_InButton+3)^0,w,c
 10012  004BD2  A0D8               	btfss	status,0,c
 10013  004BD4  D7B8               	goto	u4270
 10014                           
 10015                           ;libraries/lcd_highlevel.c: 536:   return 1;
 10016  004BD6  0E01               	movlw	1
 10017  004BD8  0012               	return		;funcret
 10018  004BDA                     __end_of_LCD_InButton:
 10019                           	callstack 0
 10020                           
 10021 ;; *************** function _GameParameters_init *****************
 10022 ;; Defined at:
 10023 ;;		line 7 in file "class/gameParameters.c"
 10024 ;; Parameters:    Size  Location     Type
 10025 ;;  s               2   42[COMRAM] PTR struct GameParameter
 10026 ;;		 -> g1(240), 
 10027 ;; Auto vars:     Size  Location     Type
 10028 ;;		None
 10029 ;; Return value:  Size  Location     Type
 10030 ;;                  1    wreg      void 
 10031 ;; Registers used:
 10032 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10033 ;; Tracked objects:
 10034 ;;		On entry : 0/0
 10035 ;;		On exit  : 0/0
 10036 ;;		Unchanged: 0/0
 10037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10038 ;;      Params:         2       0       0       0       0       0       0
 10039 ;;      Locals:         0       0       0       0       0       0       0
 10040 ;;      Temps:          0       0       0       0       0       0       0
 10041 ;;      Totals:         2       0       0       0       0       0       0
 10042 ;;Total ram usage:        2 bytes
 10043 ;; Hardware stack levels used: 1
 10044 ;; Hardware stack levels required when called: 5
 10045 ;; This function calls:
 10046 ;;		_Ball_init
 10047 ;;		_LCD_ButtonCreate
 10048 ;;		_LCD_SliderCreate
 10049 ;;		_Paddle_init
 10050 ;;		_Score_init
 10051 ;; This function is called by:
 10052 ;;		_Factory_init
 10053 ;;		_gameControllerController
 10054 ;; This function uses a non-reentrant model
 10055 ;;
 10056                           
 10057                           	psect	text40
 10058  001B16                     __ptext40:
 10059                           	callstack 0
 10060  001B16                     _GameParameters_init:
 10061                           	callstack 21
 10062                           
 10063                           ;class/gameParameters.c: 7: void GameParameters_init(struct GameParameters* s);class/gam
      +                          eParameters.c: 8: {;class/gameParameters.c: 10:     s->backlight = 11;
 10064                           
 10065                           ;incstack = 0
 10066  001B16  C02B  FFD9         	movff	GameParameters_init@s,fsr2l
 10067  001B1A  C02C  FFDA         	movff	GameParameters_init@s+1,fsr2h
 10068  001B1E  0E0B               	movlw	11
 10069  001B20  6EDE               	movwf	postinc2,c
 10070  001B22  0E00               	movlw	0
 10071  001B24  6EDD               	movwf	postdec2,c
 10072                           
 10073                           ;class/gameParameters.c: 11:     CCPR2L = 255;
 10074  001B26  6867               	setf	103,c	;volatile
 10075                           
 10076                           ;class/gameParameters.c: 12:     s->x=0;
 10077  001B28  EE20 F002          	lfsr	2,2
 10078  001B2C  502B               	movf	GameParameters_init@s^0,w,c
 10079  001B2E  26D9               	addwf	fsr2l,f,c
 10080  001B30  502C               	movf	(GameParameters_init@s+1)^0,w,c
 10081  001B32  22DA               	addwfc	fsr2h,f,c
 10082  001B34  0E00               	movlw	0
 10083  001B36  6EDE               	movwf	postinc2,c
 10084  001B38  0E00               	movlw	0
 10085  001B3A  6EDD               	movwf	postdec2,c
 10086                           
 10087                           ;class/gameParameters.c: 13:     s->y=0;
 10088  001B3C  EE20 F004          	lfsr	2,4
 10089  001B40  502B               	movf	GameParameters_init@s^0,w,c
 10090  001B42  26D9               	addwf	fsr2l,f,c
 10091  001B44  502C               	movf	(GameParameters_init@s+1)^0,w,c
 10092  001B46  22DA               	addwfc	fsr2h,f,c
 10093  001B48  0E00               	movlw	0
 10094  001B4A  6EDE               	movwf	postinc2,c
 10095  001B4C  0E00               	movlw	0
 10096  001B4E  6EDD               	movwf	postdec2,c
 10097                           
 10098                           ;class/gameParameters.c: 14:     s->level=1;
 10099  001B50  EE20 F006          	lfsr	2,6
 10100  001B54  502B               	movf	GameParameters_init@s^0,w,c
 10101  001B56  26D9               	addwf	fsr2l,f,c
 10102  001B58  502C               	movf	(GameParameters_init@s+1)^0,w,c
 10103  001B5A  22DA               	addwfc	fsr2h,f,c
 10104  001B5C  0E01               	movlw	1
 10105  001B5E  6EDE               	movwf	postinc2,c
 10106  001B60  0E00               	movlw	0
 10107  001B62  6EDD               	movwf	postdec2,c
 10108                           
 10109                           ;class/gameParameters.c: 15:     Score_init(&s->s1);
 10110  001B64  0EEA               	movlw	234
 10111  001B66  242B               	addwf	GameParameters_init@s^0,w,c
 10112  001B68  6E12               	movwf	Score_init@s^0,c
 10113  001B6A  0E00               	movlw	0
 10114  001B6C  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10115  001B6E  6E13               	movwf	(Score_init@s+1)^0,c
 10116  001B70  EC62  F02C         	call	_Score_init	;wreg free
 10117                           
 10118                           ;class/gameParameters.c: 16:     Ball_init(&(s->b));
 10119  001B74  0ECA               	movlw	202
 10120  001B76  242B               	addwf	GameParameters_init@s^0,w,c
 10121  001B78  6E12               	movwf	Ball_init@b^0,c
 10122  001B7A  0E00               	movlw	0
 10123  001B7C  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10124  001B7E  6E13               	movwf	(Ball_init@b+1)^0,c
 10125  001B80  EC64  F029         	call	_Ball_init	;wreg free
 10126                           
 10127                           ;class/gameParameters.c: 17:     s->b.dy=1;
 10128  001B84  EE20 F0D4          	lfsr	2,212
 10129  001B88  502B               	movf	GameParameters_init@s^0,w,c
 10130  001B8A  26D9               	addwf	fsr2l,f,c
 10131  001B8C  502C               	movf	(GameParameters_init@s+1)^0,w,c
 10132  001B8E  22DA               	addwfc	fsr2h,f,c
 10133  001B90  0E01               	movlw	1
 10134  001B92  6EDE               	movwf	postinc2,c
 10135  001B94  0E00               	movlw	0
 10136  001B96  6EDD               	movwf	postdec2,c
 10137                           
 10138                           ;class/gameParameters.c: 18:     Paddle_init(&(s->p1),0);
 10139  001B98  0ED6               	movlw	214
 10140  001B9A  242B               	addwf	GameParameters_init@s^0,w,c
 10141  001B9C  6E12               	movwf	Paddle_init@p^0,c
 10142  001B9E  0E00               	movlw	0
 10143  001BA0  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10144  001BA2  6E13               	movwf	(Paddle_init@p+1)^0,c
 10145  001BA4  0E00               	movlw	0
 10146  001BA6  6E15               	movwf	(Paddle_init@team+1)^0,c
 10147  001BA8  0E00               	movlw	0
 10148  001BAA  6E14               	movwf	Paddle_init@team^0,c
 10149  001BAC  EC40  F026         	call	_Paddle_init	;wreg free
 10150                           
 10151                           ;class/gameParameters.c: 19:     Paddle_init(&(s->p2),1);
 10152  001BB0  0EE0               	movlw	224
 10153  001BB2  242B               	addwf	GameParameters_init@s^0,w,c
 10154  001BB4  6E12               	movwf	Paddle_init@p^0,c
 10155  001BB6  0E00               	movlw	0
 10156  001BB8  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10157  001BBA  6E13               	movwf	(Paddle_init@p+1)^0,c
 10158  001BBC  0E00               	movlw	0
 10159  001BBE  6E15               	movwf	(Paddle_init@team+1)^0,c
 10160  001BC0  0E01               	movlw	1
 10161  001BC2  6E14               	movwf	Paddle_init@team^0,c
 10162  001BC4  EC40  F026         	call	_Paddle_init	;wreg free
 10163                           
 10164                           ;class/gameParameters.c: 22:     LCD_ButtonCreate(10,200,90,30,0b0000000000000000,0b1111
      +                          111111111111,"1 Player",&arialNarrow_12ptFontInfo,((void*)0),((void*)0),((void*)0),&(s->
      +                          btnOnePlayer),1);
 10165  001BC8  0E00               	movlw	0
 10166  001BCA  6E13               	movwf	(LCD_ButtonCreate@posX+1)^0,c
 10167  001BCC  0E0A               	movlw	10
 10168  001BCE  6E12               	movwf	LCD_ButtonCreate@posX^0,c
 10169  001BD0  0E00               	movlw	0
 10170  001BD2  6E15               	movwf	(LCD_ButtonCreate@posY+1)^0,c
 10171  001BD4  0EC8               	movlw	200
 10172  001BD6  6E14               	movwf	LCD_ButtonCreate@posY^0,c
 10173  001BD8  0E00               	movlw	0
 10174  001BDA  6E17               	movwf	(LCD_ButtonCreate@width+1)^0,c
 10175  001BDC  0E5A               	movlw	90
 10176  001BDE  6E16               	movwf	LCD_ButtonCreate@width^0,c
 10177  001BE0  0E00               	movlw	0
 10178  001BE2  6E19               	movwf	(LCD_ButtonCreate@height+1)^0,c
 10179  001BE4  0E1E               	movlw	30
 10180  001BE6  6E18               	movwf	LCD_ButtonCreate@height^0,c
 10181  001BE8  0E00               	movlw	0
 10182  001BEA  6E1B               	movwf	(LCD_ButtonCreate@txtColor+1)^0,c
 10183  001BEC  0E00               	movlw	0
 10184  001BEE  6E1A               	movwf	LCD_ButtonCreate@txtColor^0,c
 10185  001BF0  0EFF               	movlw	255
 10186  001BF2  6E1D               	movwf	(LCD_ButtonCreate@bgColor+1)^0,c
 10187  001BF4  681C               	setf	LCD_ButtonCreate@bgColor^0,c
 10188  001BF6  0ED9               	movlw	low STR_4
 10189  001BF8  6E1E               	movwf	LCD_ButtonCreate@textOrBmp^0,c
 10190  001BFA  0E7F               	movlw	high STR_4
 10191  001BFC  6E1F               	movwf	(LCD_ButtonCreate@textOrBmp+1)^0,c
 10192  001BFE  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 10193  001C00  6E20               	movwf	LCD_ButtonCreate@font^0,c
 10194  001C02  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 10195  001C04  6E21               	movwf	(LCD_ButtonCreate@font+1)^0,c
 10196  001C06  0E00               	movlw	0
 10197  001C08  6E22               	movwf	LCD_ButtonCreate@fpPress^0,c
 10198  001C0A  0E00               	movlw	0
 10199  001C0C  6E23               	movwf	(LCD_ButtonCreate@fpPress+1)^0,c
 10200  001C0E  0E00               	movlw	0
 10201  001C10  6E24               	movwf	LCD_ButtonCreate@fpReleased^0,c
 10202  001C12  0E00               	movlw	0
 10203  001C14  6E25               	movwf	(LCD_ButtonCreate@fpReleased+1)^0,c
 10204  001C16  0E00               	movlw	0
 10205  001C18  6E26               	movwf	LCD_ButtonCreate@fpOut^0,c
 10206  001C1A  0E00               	movlw	0
 10207  001C1C  6E27               	movwf	(LCD_ButtonCreate@fpOut+1)^0,c
 10208  001C1E  0E20               	movlw	32
 10209  001C20  242B               	addwf	GameParameters_init@s^0,w,c
 10210  001C22  6E28               	movwf	LCD_ButtonCreate@button^0,c
 10211  001C24  0E00               	movlw	0
 10212  001C26  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10213  001C28  6E29               	movwf	(LCD_ButtonCreate@button+1)^0,c
 10214  001C2A  0E01               	movlw	1
 10215  001C2C  6E2A               	movwf	LCD_ButtonCreate@index^0,c
 10216  001C2E  ECAB  F01F         	call	_LCD_ButtonCreate	;wreg free
 10217                           
 10218                           ;class/gameParameters.c: 23:     LCD_ButtonCreate(140,200,90,30,0b0000000000000000,0b111
      +                          1111111111111,"2 Player",&arialNarrow_12ptFontInfo,((void*)0),((void*)0),((void*)0),&(s-
      +                          >btnTwoPlayer),2);
 10219  001C32  0E00               	movlw	0
 10220  001C34  6E13               	movwf	(LCD_ButtonCreate@posX+1)^0,c
 10221  001C36  0E8C               	movlw	140
 10222  001C38  6E12               	movwf	LCD_ButtonCreate@posX^0,c
 10223  001C3A  0E00               	movlw	0
 10224  001C3C  6E15               	movwf	(LCD_ButtonCreate@posY+1)^0,c
 10225  001C3E  0EC8               	movlw	200
 10226  001C40  6E14               	movwf	LCD_ButtonCreate@posY^0,c
 10227  001C42  0E00               	movlw	0
 10228  001C44  6E17               	movwf	(LCD_ButtonCreate@width+1)^0,c
 10229  001C46  0E5A               	movlw	90
 10230  001C48  6E16               	movwf	LCD_ButtonCreate@width^0,c
 10231  001C4A  0E00               	movlw	0
 10232  001C4C  6E19               	movwf	(LCD_ButtonCreate@height+1)^0,c
 10233  001C4E  0E1E               	movlw	30
 10234  001C50  6E18               	movwf	LCD_ButtonCreate@height^0,c
 10235  001C52  0E00               	movlw	0
 10236  001C54  6E1B               	movwf	(LCD_ButtonCreate@txtColor+1)^0,c
 10237  001C56  0E00               	movlw	0
 10238  001C58  6E1A               	movwf	LCD_ButtonCreate@txtColor^0,c
 10239  001C5A  0EFF               	movlw	255
 10240  001C5C  6E1D               	movwf	(LCD_ButtonCreate@bgColor+1)^0,c
 10241  001C5E  681C               	setf	LCD_ButtonCreate@bgColor^0,c
 10242  001C60  0EE2               	movlw	low STR_5
 10243  001C62  6E1E               	movwf	LCD_ButtonCreate@textOrBmp^0,c
 10244  001C64  0E7F               	movlw	high STR_5
 10245  001C66  6E1F               	movwf	(LCD_ButtonCreate@textOrBmp+1)^0,c
 10246  001C68  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 10247  001C6A  6E20               	movwf	LCD_ButtonCreate@font^0,c
 10248  001C6C  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 10249  001C6E  6E21               	movwf	(LCD_ButtonCreate@font+1)^0,c
 10250  001C70  0E00               	movlw	0
 10251  001C72  6E22               	movwf	LCD_ButtonCreate@fpPress^0,c
 10252  001C74  0E00               	movlw	0
 10253  001C76  6E23               	movwf	(LCD_ButtonCreate@fpPress+1)^0,c
 10254  001C78  0E00               	movlw	0
 10255  001C7A  6E24               	movwf	LCD_ButtonCreate@fpReleased^0,c
 10256  001C7C  0E00               	movlw	0
 10257  001C7E  6E25               	movwf	(LCD_ButtonCreate@fpReleased+1)^0,c
 10258  001C80  0E00               	movlw	0
 10259  001C82  6E26               	movwf	LCD_ButtonCreate@fpOut^0,c
 10260  001C84  0E00               	movlw	0
 10261  001C86  6E27               	movwf	(LCD_ButtonCreate@fpOut+1)^0,c
 10262  001C88  0E38               	movlw	56
 10263  001C8A  242B               	addwf	GameParameters_init@s^0,w,c
 10264  001C8C  6E28               	movwf	LCD_ButtonCreate@button^0,c
 10265  001C8E  0E00               	movlw	0
 10266  001C90  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10267  001C92  6E29               	movwf	(LCD_ButtonCreate@button+1)^0,c
 10268  001C94  0E02               	movlw	2
 10269  001C96  6E2A               	movwf	LCD_ButtonCreate@index^0,c
 10270  001C98  ECAB  F01F         	call	_LCD_ButtonCreate	;wreg free
 10271                           
 10272                           ;class/gameParameters.c: 24:     LCD_ButtonCreate(10,250,90,30,0b0000000000000000,0b1111
      +                          111111111111,"Parametres",&arialNarrow_12ptFontInfo,((void*)0),((void*)0),((void*)0),&(s
      +                          ->btnParam),3);
 10273  001C9C  0E00               	movlw	0
 10274  001C9E  6E13               	movwf	(LCD_ButtonCreate@posX+1)^0,c
 10275  001CA0  0E0A               	movlw	10
 10276  001CA2  6E12               	movwf	LCD_ButtonCreate@posX^0,c
 10277  001CA4  0E00               	movlw	0
 10278  001CA6  6E15               	movwf	(LCD_ButtonCreate@posY+1)^0,c
 10279  001CA8  0EFA               	movlw	250
 10280  001CAA  6E14               	movwf	LCD_ButtonCreate@posY^0,c
 10281  001CAC  0E00               	movlw	0
 10282  001CAE  6E17               	movwf	(LCD_ButtonCreate@width+1)^0,c
 10283  001CB0  0E5A               	movlw	90
 10284  001CB2  6E16               	movwf	LCD_ButtonCreate@width^0,c
 10285  001CB4  0E00               	movlw	0
 10286  001CB6  6E19               	movwf	(LCD_ButtonCreate@height+1)^0,c
 10287  001CB8  0E1E               	movlw	30
 10288  001CBA  6E18               	movwf	LCD_ButtonCreate@height^0,c
 10289  001CBC  0E00               	movlw	0
 10290  001CBE  6E1B               	movwf	(LCD_ButtonCreate@txtColor+1)^0,c
 10291  001CC0  0E00               	movlw	0
 10292  001CC2  6E1A               	movwf	LCD_ButtonCreate@txtColor^0,c
 10293  001CC4  0EFF               	movlw	255
 10294  001CC6  6E1D               	movwf	(LCD_ButtonCreate@bgColor+1)^0,c
 10295  001CC8  681C               	setf	LCD_ButtonCreate@bgColor^0,c
 10296  001CCA  0EB2               	movlw	low STR_6
 10297  001CCC  6E1E               	movwf	LCD_ButtonCreate@textOrBmp^0,c
 10298  001CCE  0E7F               	movlw	high STR_6
 10299  001CD0  6E1F               	movwf	(LCD_ButtonCreate@textOrBmp+1)^0,c
 10300  001CD2  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 10301  001CD4  6E20               	movwf	LCD_ButtonCreate@font^0,c
 10302  001CD6  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 10303  001CD8  6E21               	movwf	(LCD_ButtonCreate@font+1)^0,c
 10304  001CDA  0E00               	movlw	0
 10305  001CDC  6E22               	movwf	LCD_ButtonCreate@fpPress^0,c
 10306  001CDE  0E00               	movlw	0
 10307  001CE0  6E23               	movwf	(LCD_ButtonCreate@fpPress+1)^0,c
 10308  001CE2  0E00               	movlw	0
 10309  001CE4  6E24               	movwf	LCD_ButtonCreate@fpReleased^0,c
 10310  001CE6  0E00               	movlw	0
 10311  001CE8  6E25               	movwf	(LCD_ButtonCreate@fpReleased+1)^0,c
 10312  001CEA  0E00               	movlw	0
 10313  001CEC  6E26               	movwf	LCD_ButtonCreate@fpOut^0,c
 10314  001CEE  0E00               	movlw	0
 10315  001CF0  6E27               	movwf	(LCD_ButtonCreate@fpOut+1)^0,c
 10316  001CF2  0E08               	movlw	8
 10317  001CF4  242B               	addwf	GameParameters_init@s^0,w,c
 10318  001CF6  6E28               	movwf	LCD_ButtonCreate@button^0,c
 10319  001CF8  0E00               	movlw	0
 10320  001CFA  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10321  001CFC  6E29               	movwf	(LCD_ButtonCreate@button+1)^0,c
 10322  001CFE  0E03               	movlw	3
 10323  001D00  6E2A               	movwf	LCD_ButtonCreate@index^0,c
 10324  001D02  ECAB  F01F         	call	_LCD_ButtonCreate	;wreg free
 10325                           
 10326                           ;class/gameParameters.c: 25:     LCD_ButtonCreate(140,250,90,30,0b0000000000000000,0b111
      +                          1111111111111,"Turn Off",&arialNarrow_12ptFontInfo,((void*)0),((void*)0),((void*)0),&(s-
      +                          >btnTurnOff),4);
 10327  001D06  0E00               	movlw	0
 10328  001D08  6E13               	movwf	(LCD_ButtonCreate@posX+1)^0,c
 10329  001D0A  0E8C               	movlw	140
 10330  001D0C  6E12               	movwf	LCD_ButtonCreate@posX^0,c
 10331  001D0E  0E00               	movlw	0
 10332  001D10  6E15               	movwf	(LCD_ButtonCreate@posY+1)^0,c
 10333  001D12  0EFA               	movlw	250
 10334  001D14  6E14               	movwf	LCD_ButtonCreate@posY^0,c
 10335  001D16  0E00               	movlw	0
 10336  001D18  6E17               	movwf	(LCD_ButtonCreate@width+1)^0,c
 10337  001D1A  0E5A               	movlw	90
 10338  001D1C  6E16               	movwf	LCD_ButtonCreate@width^0,c
 10339  001D1E  0E00               	movlw	0
 10340  001D20  6E19               	movwf	(LCD_ButtonCreate@height+1)^0,c
 10341  001D22  0E1E               	movlw	30
 10342  001D24  6E18               	movwf	LCD_ButtonCreate@height^0,c
 10343  001D26  0E00               	movlw	0
 10344  001D28  6E1B               	movwf	(LCD_ButtonCreate@txtColor+1)^0,c
 10345  001D2A  0E00               	movlw	0
 10346  001D2C  6E1A               	movwf	LCD_ButtonCreate@txtColor^0,c
 10347  001D2E  0EFF               	movlw	255
 10348  001D30  6E1D               	movwf	(LCD_ButtonCreate@bgColor+1)^0,c
 10349  001D32  681C               	setf	LCD_ButtonCreate@bgColor^0,c
 10350  001D34  0ED0               	movlw	low STR_7
 10351  001D36  6E1E               	movwf	LCD_ButtonCreate@textOrBmp^0,c
 10352  001D38  0E7F               	movlw	high STR_7
 10353  001D3A  6E1F               	movwf	(LCD_ButtonCreate@textOrBmp+1)^0,c
 10354  001D3C  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 10355  001D3E  6E20               	movwf	LCD_ButtonCreate@font^0,c
 10356  001D40  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 10357  001D42  6E21               	movwf	(LCD_ButtonCreate@font+1)^0,c
 10358  001D44  0E00               	movlw	0
 10359  001D46  6E22               	movwf	LCD_ButtonCreate@fpPress^0,c
 10360  001D48  0E00               	movlw	0
 10361  001D4A  6E23               	movwf	(LCD_ButtonCreate@fpPress+1)^0,c
 10362  001D4C  0E00               	movlw	0
 10363  001D4E  6E24               	movwf	LCD_ButtonCreate@fpReleased^0,c
 10364  001D50  0E00               	movlw	0
 10365  001D52  6E25               	movwf	(LCD_ButtonCreate@fpReleased+1)^0,c
 10366  001D54  0E00               	movlw	0
 10367  001D56  6E26               	movwf	LCD_ButtonCreate@fpOut^0,c
 10368  001D58  0E00               	movlw	0
 10369  001D5A  6E27               	movwf	(LCD_ButtonCreate@fpOut+1)^0,c
 10370  001D5C  0E80               	movlw	128
 10371  001D5E  242B               	addwf	GameParameters_init@s^0,w,c
 10372  001D60  6E28               	movwf	LCD_ButtonCreate@button^0,c
 10373  001D62  0E00               	movlw	0
 10374  001D64  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10375  001D66  6E29               	movwf	(LCD_ButtonCreate@button+1)^0,c
 10376  001D68  0E04               	movlw	4
 10377  001D6A  6E2A               	movwf	LCD_ButtonCreate@index^0,c
 10378  001D6C  ECAB  F01F         	call	_LCD_ButtonCreate	;wreg free
 10379                           
 10380                           ;class/gameParameters.c: 27:     LCD_ButtonCreate(220,0,20,20,0b0000000000000000,0b11111
      +                          00000000000,"X",&arialNarrow_12ptFontInfo,((void*)0),((void*)0),((void*)0),&(s->btnLeave
      +                          ),5);
 10381  001D70  0E00               	movlw	0
 10382  001D72  6E13               	movwf	(LCD_ButtonCreate@posX+1)^0,c
 10383  001D74  0EDC               	movlw	220
 10384  001D76  6E12               	movwf	LCD_ButtonCreate@posX^0,c
 10385  001D78  0E00               	movlw	0
 10386  001D7A  6E15               	movwf	(LCD_ButtonCreate@posY+1)^0,c
 10387  001D7C  0E00               	movlw	0
 10388  001D7E  6E14               	movwf	LCD_ButtonCreate@posY^0,c
 10389  001D80  0E00               	movlw	0
 10390  001D82  6E17               	movwf	(LCD_ButtonCreate@width+1)^0,c
 10391  001D84  0E14               	movlw	20
 10392  001D86  6E16               	movwf	LCD_ButtonCreate@width^0,c
 10393  001D88  0E00               	movlw	0
 10394  001D8A  6E19               	movwf	(LCD_ButtonCreate@height+1)^0,c
 10395  001D8C  0E14               	movlw	20
 10396  001D8E  6E18               	movwf	LCD_ButtonCreate@height^0,c
 10397  001D90  0E00               	movlw	0
 10398  001D92  6E1B               	movwf	(LCD_ButtonCreate@txtColor+1)^0,c
 10399  001D94  0E00               	movlw	0
 10400  001D96  6E1A               	movwf	LCD_ButtonCreate@txtColor^0,c
 10401  001D98  0EF8               	movlw	248
 10402  001D9A  6E1D               	movwf	(LCD_ButtonCreate@bgColor+1)^0,c
 10403  001D9C  0E00               	movlw	0
 10404  001D9E  6E1C               	movwf	LCD_ButtonCreate@bgColor^0,c
 10405  001DA0  0EFC               	movlw	low STR_8
 10406  001DA2  6E1E               	movwf	LCD_ButtonCreate@textOrBmp^0,c
 10407  001DA4  0E7F               	movlw	high STR_8
 10408  001DA6  6E1F               	movwf	(LCD_ButtonCreate@textOrBmp+1)^0,c
 10409  001DA8  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 10410  001DAA  6E20               	movwf	LCD_ButtonCreate@font^0,c
 10411  001DAC  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 10412  001DAE  6E21               	movwf	(LCD_ButtonCreate@font+1)^0,c
 10413  001DB0  0E00               	movlw	0
 10414  001DB2  6E22               	movwf	LCD_ButtonCreate@fpPress^0,c
 10415  001DB4  0E00               	movlw	0
 10416  001DB6  6E23               	movwf	(LCD_ButtonCreate@fpPress+1)^0,c
 10417  001DB8  0E00               	movlw	0
 10418  001DBA  6E24               	movwf	LCD_ButtonCreate@fpReleased^0,c
 10419  001DBC  0E00               	movlw	0
 10420  001DBE  6E25               	movwf	(LCD_ButtonCreate@fpReleased+1)^0,c
 10421  001DC0  0E00               	movlw	0
 10422  001DC2  6E26               	movwf	LCD_ButtonCreate@fpOut^0,c
 10423  001DC4  0E00               	movlw	0
 10424  001DC6  6E27               	movwf	(LCD_ButtonCreate@fpOut+1)^0,c
 10425  001DC8  0E50               	movlw	80
 10426  001DCA  242B               	addwf	GameParameters_init@s^0,w,c
 10427  001DCC  6E28               	movwf	LCD_ButtonCreate@button^0,c
 10428  001DCE  0E00               	movlw	0
 10429  001DD0  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10430  001DD2  6E29               	movwf	(LCD_ButtonCreate@button+1)^0,c
 10431  001DD4  0E05               	movlw	5
 10432  001DD6  6E2A               	movwf	LCD_ButtonCreate@index^0,c
 10433  001DD8  ECAB  F01F         	call	_LCD_ButtonCreate	;wreg free
 10434                           
 10435                           ;class/gameParameters.c: 28:     LCD_ButtonCreate(10,250,90,30,0b0000000000000000,0b1111
      +                          111111111111,"New Game",&arialNarrow_12ptFontInfo,((void*)0),((void*)0),((void*)0),&(s->
      +                          btnNewGame),6);
 10436  001DDC  0E00               	movlw	0
 10437  001DDE  6E13               	movwf	(LCD_ButtonCreate@posX+1)^0,c
 10438  001DE0  0E0A               	movlw	10
 10439  001DE2  6E12               	movwf	LCD_ButtonCreate@posX^0,c
 10440  001DE4  0E00               	movlw	0
 10441  001DE6  6E15               	movwf	(LCD_ButtonCreate@posY+1)^0,c
 10442  001DE8  0EFA               	movlw	250
 10443  001DEA  6E14               	movwf	LCD_ButtonCreate@posY^0,c
 10444  001DEC  0E00               	movlw	0
 10445  001DEE  6E17               	movwf	(LCD_ButtonCreate@width+1)^0,c
 10446  001DF0  0E5A               	movlw	90
 10447  001DF2  6E16               	movwf	LCD_ButtonCreate@width^0,c
 10448  001DF4  0E00               	movlw	0
 10449  001DF6  6E19               	movwf	(LCD_ButtonCreate@height+1)^0,c
 10450  001DF8  0E1E               	movlw	30
 10451  001DFA  6E18               	movwf	LCD_ButtonCreate@height^0,c
 10452  001DFC  0E00               	movlw	0
 10453  001DFE  6E1B               	movwf	(LCD_ButtonCreate@txtColor+1)^0,c
 10454  001E00  0E00               	movlw	0
 10455  001E02  6E1A               	movwf	LCD_ButtonCreate@txtColor^0,c
 10456  001E04  0EFF               	movlw	255
 10457  001E06  6E1D               	movwf	(LCD_ButtonCreate@bgColor+1)^0,c
 10458  001E08  681C               	setf	LCD_ButtonCreate@bgColor^0,c
 10459  001E0A  0EC7               	movlw	low STR_9
 10460  001E0C  6E1E               	movwf	LCD_ButtonCreate@textOrBmp^0,c
 10461  001E0E  0E7F               	movlw	high STR_9
 10462  001E10  6E1F               	movwf	(LCD_ButtonCreate@textOrBmp+1)^0,c
 10463  001E12  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 10464  001E14  6E20               	movwf	LCD_ButtonCreate@font^0,c
 10465  001E16  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 10466  001E18  6E21               	movwf	(LCD_ButtonCreate@font+1)^0,c
 10467  001E1A  0E00               	movlw	0
 10468  001E1C  6E22               	movwf	LCD_ButtonCreate@fpPress^0,c
 10469  001E1E  0E00               	movlw	0
 10470  001E20  6E23               	movwf	(LCD_ButtonCreate@fpPress+1)^0,c
 10471  001E22  0E00               	movlw	0
 10472  001E24  6E24               	movwf	LCD_ButtonCreate@fpReleased^0,c
 10473  001E26  0E00               	movlw	0
 10474  001E28  6E25               	movwf	(LCD_ButtonCreate@fpReleased+1)^0,c
 10475  001E2A  0E00               	movlw	0
 10476  001E2C  6E26               	movwf	LCD_ButtonCreate@fpOut^0,c
 10477  001E2E  0E00               	movlw	0
 10478  001E30  6E27               	movwf	(LCD_ButtonCreate@fpOut+1)^0,c
 10479  001E32  0E68               	movlw	104
 10480  001E34  242B               	addwf	GameParameters_init@s^0,w,c
 10481  001E36  6E28               	movwf	LCD_ButtonCreate@button^0,c
 10482  001E38  0E00               	movlw	0
 10483  001E3A  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10484  001E3C  6E29               	movwf	(LCD_ButtonCreate@button+1)^0,c
 10485  001E3E  0E06               	movlw	6
 10486  001E40  6E2A               	movwf	LCD_ButtonCreate@index^0,c
 10487  001E42  ECAB  F01F         	call	_LCD_ButtonCreate	;wreg free
 10488                           
 10489                           ;class/gameParameters.c: 31:     LCD_SliderCreate(50,110,165,20,0b0000000000000000,0b111
      +                          1111111111111,0b1111100000000000,0,11,((void*)0),&(s->sldBackLight));
 10490  001E46  0E00               	movlw	0
 10491  001E48  6E13               	movwf	(LCD_SliderCreate@posX+1)^0,c
 10492  001E4A  0E32               	movlw	50
 10493  001E4C  6E12               	movwf	LCD_SliderCreate@posX^0,c
 10494  001E4E  0E00               	movlw	0
 10495  001E50  6E15               	movwf	(LCD_SliderCreate@posY+1)^0,c
 10496  001E52  0E6E               	movlw	110
 10497  001E54  6E14               	movwf	LCD_SliderCreate@posY^0,c
 10498  001E56  0E00               	movlw	0
 10499  001E58  6E17               	movwf	(LCD_SliderCreate@width+1)^0,c
 10500  001E5A  0EA5               	movlw	165
 10501  001E5C  6E16               	movwf	LCD_SliderCreate@width^0,c
 10502  001E5E  0E00               	movlw	0
 10503  001E60  6E19               	movwf	(LCD_SliderCreate@height+1)^0,c
 10504  001E62  0E14               	movlw	20
 10505  001E64  6E18               	movwf	LCD_SliderCreate@height^0,c
 10506  001E66  0E00               	movlw	0
 10507  001E68  6E1B               	movwf	(LCD_SliderCreate@sldColor+1)^0,c
 10508  001E6A  0E00               	movlw	0
 10509  001E6C  6E1A               	movwf	LCD_SliderCreate@sldColor^0,c
 10510  001E6E  0EFF               	movlw	255
 10511  001E70  6E1D               	movwf	(LCD_SliderCreate@bgColor+1)^0,c
 10512  001E72  681C               	setf	LCD_SliderCreate@bgColor^0,c
 10513  001E74  0EF8               	movlw	248
 10514  001E76  6E1F               	movwf	(LCD_SliderCreate@borderColor+1)^0,c
 10515  001E78  0E00               	movlw	0
 10516  001E7A  6E1E               	movwf	LCD_SliderCreate@borderColor^0,c
 10517  001E7C  0E00               	movlw	0
 10518  001E7E  6E21               	movwf	(LCD_SliderCreate@cursorWidth+1)^0,c
 10519  001E80  0E00               	movlw	0
 10520  001E82  6E20               	movwf	LCD_SliderCreate@cursorWidth^0,c
 10521  001E84  0E00               	movlw	0
 10522  001E86  6E23               	movwf	(LCD_SliderCreate@steps+1)^0,c
 10523  001E88  0E0B               	movlw	11
 10524  001E8A  6E22               	movwf	LCD_SliderCreate@steps^0,c
 10525  001E8C  0E00               	movlw	0
 10526  001E8E  6E24               	movwf	LCD_SliderCreate@fpPress^0,c
 10527  001E90  0E00               	movlw	0
 10528  001E92  6E25               	movwf	(LCD_SliderCreate@fpPress+1)^0,c
 10529  001E94  0E98               	movlw	152
 10530  001E96  242B               	addwf	GameParameters_init@s^0,w,c
 10531  001E98  6E26               	movwf	LCD_SliderCreate@slider^0,c
 10532  001E9A  0E00               	movlw	0
 10533  001E9C  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10534  001E9E  6E27               	movwf	(LCD_SliderCreate@slider+1)^0,c
 10535  001EA0  EC28  F020         	call	_LCD_SliderCreate	;wreg free
 10536                           
 10537                           ;class/gameParameters.c: 32:     LCD_SliderCreate(50,160,165,20,0b0000000000000000,0b111
      +                          1111111111111,0b1111100000000000,0,3,((void*)0),&(s->sldLevel));
 10538  001EA4  0E00               	movlw	0
 10539  001EA6  6E13               	movwf	(LCD_SliderCreate@posX+1)^0,c
 10540  001EA8  0E32               	movlw	50
 10541  001EAA  6E12               	movwf	LCD_SliderCreate@posX^0,c
 10542  001EAC  0E00               	movlw	0
 10543  001EAE  6E15               	movwf	(LCD_SliderCreate@posY+1)^0,c
 10544  001EB0  0EA0               	movlw	160
 10545  001EB2  6E14               	movwf	LCD_SliderCreate@posY^0,c
 10546  001EB4  0E00               	movlw	0
 10547  001EB6  6E17               	movwf	(LCD_SliderCreate@width+1)^0,c
 10548  001EB8  0EA5               	movlw	165
 10549  001EBA  6E16               	movwf	LCD_SliderCreate@width^0,c
 10550  001EBC  0E00               	movlw	0
 10551  001EBE  6E19               	movwf	(LCD_SliderCreate@height+1)^0,c
 10552  001EC0  0E14               	movlw	20
 10553  001EC2  6E18               	movwf	LCD_SliderCreate@height^0,c
 10554  001EC4  0E00               	movlw	0
 10555  001EC6  6E1B               	movwf	(LCD_SliderCreate@sldColor+1)^0,c
 10556  001EC8  0E00               	movlw	0
 10557  001ECA  6E1A               	movwf	LCD_SliderCreate@sldColor^0,c
 10558  001ECC  0EFF               	movlw	255
 10559  001ECE  6E1D               	movwf	(LCD_SliderCreate@bgColor+1)^0,c
 10560  001ED0  681C               	setf	LCD_SliderCreate@bgColor^0,c
 10561  001ED2  0EF8               	movlw	248
 10562  001ED4  6E1F               	movwf	(LCD_SliderCreate@borderColor+1)^0,c
 10563  001ED6  0E00               	movlw	0
 10564  001ED8  6E1E               	movwf	LCD_SliderCreate@borderColor^0,c
 10565  001EDA  0E00               	movlw	0
 10566  001EDC  6E21               	movwf	(LCD_SliderCreate@cursorWidth+1)^0,c
 10567  001EDE  0E00               	movlw	0
 10568  001EE0  6E20               	movwf	LCD_SliderCreate@cursorWidth^0,c
 10569  001EE2  0E00               	movlw	0
 10570  001EE4  6E23               	movwf	(LCD_SliderCreate@steps+1)^0,c
 10571  001EE6  0E03               	movlw	3
 10572  001EE8  6E22               	movwf	LCD_SliderCreate@steps^0,c
 10573  001EEA  0E00               	movlw	0
 10574  001EEC  6E24               	movwf	LCD_SliderCreate@fpPress^0,c
 10575  001EEE  0E00               	movlw	0
 10576  001EF0  6E25               	movwf	(LCD_SliderCreate@fpPress+1)^0,c
 10577  001EF2  0EB1               	movlw	177
 10578  001EF4  242B               	addwf	GameParameters_init@s^0,w,c
 10579  001EF6  6E26               	movwf	LCD_SliderCreate@slider^0,c
 10580  001EF8  0E00               	movlw	0
 10581  001EFA  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10582  001EFC  6E27               	movwf	(LCD_SliderCreate@slider+1)^0,c
 10583  001EFE  EC28  F020         	call	_LCD_SliderCreate	;wreg free
 10584  001F02  0012               	return		;funcret
 10585  001F04                     __end_of_GameParameters_init:
 10586                           	callstack 0
 10587                           
 10588 ;; *************** function _Score_init *****************
 10589 ;; Defined at:
 10590 ;;		line 7 in file "class/score.c"
 10591 ;; Parameters:    Size  Location     Type
 10592 ;;  s               2   17[COMRAM] PTR struct Score
 10593 ;;		 -> g1(240), 
 10594 ;; Auto vars:     Size  Location     Type
 10595 ;;		None
 10596 ;; Return value:  Size  Location     Type
 10597 ;;                  1    wreg      void 
 10598 ;; Registers used:
 10599 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10600 ;; Tracked objects:
 10601 ;;		On entry : 0/0
 10602 ;;		On exit  : 0/0
 10603 ;;		Unchanged: 0/0
 10604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10605 ;;      Params:         2       0       0       0       0       0       0
 10606 ;;      Locals:         0       0       0       0       0       0       0
 10607 ;;      Temps:          0       0       0       0       0       0       0
 10608 ;;      Totals:         2       0       0       0       0       0       0
 10609 ;;Total ram usage:        2 bytes
 10610 ;; Hardware stack levels used: 1
 10611 ;; Hardware stack levels required when called: 4
 10612 ;; This function calls:
 10613 ;;		Nothing
 10614 ;; This function is called by:
 10615 ;;		_GameParameters_init
 10616 ;; This function uses a non-reentrant model
 10617 ;;
 10618                           
 10619                           	psect	text41
 10620  0058C4                     __ptext41:
 10621                           	callstack 0
 10622  0058C4                     _Score_init:
 10623                           	callstack 21
 10624                           
 10625                           ;class/score.c: 7: void Score_init(struct Score* s);class/score.c: 8: {;class/score.c: 9
      +                          :     s->homeScore = 0;
 10626                           
 10627                           ;incstack = 0
 10628  0058C4  C012  FFD9         	movff	Score_init@s,fsr2l
 10629  0058C8  C013  FFDA         	movff	Score_init@s+1,fsr2h
 10630  0058CC  0E00               	movlw	0
 10631  0058CE  6EDE               	movwf	postinc2,c
 10632  0058D0  0E00               	movlw	0
 10633  0058D2  6EDD               	movwf	postdec2,c
 10634                           
 10635                           ;class/score.c: 10:     s->awayScore = 0;
 10636  0058D4  EE20 F002          	lfsr	2,2
 10637  0058D8  5012               	movf	Score_init@s^0,w,c
 10638  0058DA  26D9               	addwf	fsr2l,f,c
 10639  0058DC  5013               	movf	(Score_init@s+1)^0,w,c
 10640  0058DE  22DA               	addwfc	fsr2h,f,c
 10641  0058E0  0E00               	movlw	0
 10642  0058E2  6EDE               	movwf	postinc2,c
 10643  0058E4  0E00               	movlw	0
 10644  0058E6  6EDD               	movwf	postdec2,c
 10645  0058E8  0012               	return		;funcret
 10646  0058EA                     __end_of_Score_init:
 10647                           	callstack 0
 10648                           
 10649 ;; *************** function _Paddle_init *****************
 10650 ;; Defined at:
 10651 ;;		line 6 in file "class/paddle.c"
 10652 ;; Parameters:    Size  Location     Type
 10653 ;;  p               2   17[COMRAM] PTR struct Paddle
 10654 ;;		 -> g1(240), 
 10655 ;;  team            2   19[COMRAM] unsigned short 
 10656 ;; Auto vars:     Size  Location     Type
 10657 ;;		None
 10658 ;; Return value:  Size  Location     Type
 10659 ;;                  1    wreg      void 
 10660 ;; Registers used:
 10661 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10662 ;; Tracked objects:
 10663 ;;		On entry : 0/0
 10664 ;;		On exit  : 0/0
 10665 ;;		Unchanged: 0/0
 10666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10667 ;;      Params:         4       0       0       0       0       0       0
 10668 ;;      Locals:         0       0       0       0       0       0       0
 10669 ;;      Temps:          0       0       0       0       0       0       0
 10670 ;;      Totals:         4       0       0       0       0       0       0
 10671 ;;Total ram usage:        4 bytes
 10672 ;; Hardware stack levels used: 1
 10673 ;; Hardware stack levels required when called: 4
 10674 ;; This function calls:
 10675 ;;		Nothing
 10676 ;; This function is called by:
 10677 ;;		_GameParameters_init
 10678 ;; This function uses a non-reentrant model
 10679 ;;
 10680                           
 10681                           	psect	text42
 10682  004C80                     __ptext42:
 10683                           	callstack 0
 10684  004C80                     _Paddle_init:
 10685                           	callstack 21
 10686                           
 10687                           ;class/paddle.c: 6: void Paddle_init(struct Paddle* p,uint16_t team);class/paddle.c: 7: 
      +                          {;class/paddle.c: 8:     p->oldx=0;
 10688                           
 10689                           ;incstack = 0
 10690  004C80  EE20 F004          	lfsr	2,4
 10691  004C84  5012               	movf	Paddle_init@p^0,w,c
 10692  004C86  26D9               	addwf	fsr2l,f,c
 10693  004C88  5013               	movf	(Paddle_init@p+1)^0,w,c
 10694  004C8A  22DA               	addwfc	fsr2h,f,c
 10695  004C8C  0E00               	movlw	0
 10696  004C8E  6EDE               	movwf	postinc2,c
 10697  004C90  0E00               	movlw	0
 10698  004C92  6EDD               	movwf	postdec2,c
 10699                           
 10700                           ;class/paddle.c: 9:     p->oldy=0;
 10701  004C94  EE20 F006          	lfsr	2,6
 10702  004C98  5012               	movf	Paddle_init@p^0,w,c
 10703  004C9A  26D9               	addwf	fsr2l,f,c
 10704  004C9C  5013               	movf	(Paddle_init@p+1)^0,w,c
 10705  004C9E  22DA               	addwfc	fsr2h,f,c
 10706  004CA0  0E00               	movlw	0
 10707  004CA2  6EDE               	movwf	postinc2,c
 10708  004CA4  0E00               	movlw	0
 10709  004CA6  6EDD               	movwf	postdec2,c
 10710                           
 10711                           ;class/paddle.c: 10:     if(team)
 10712  004CA8  5014               	movf	Paddle_init@team^0,w,c
 10713  004CAA  1015               	iorwf	(Paddle_init@team+1)^0,w,c
 10714  004CAC  B4D8               	btfsc	status,2,c
 10715  004CAE  D01D               	goto	l6470
 10716                           
 10717                           ;class/paddle.c: 11:     {;class/paddle.c: 12:         p->x = 90;
 10718  004CB0  C012  FFD9         	movff	Paddle_init@p,fsr2l
 10719  004CB4  C013  FFDA         	movff	Paddle_init@p+1,fsr2h
 10720  004CB8  0E5A               	movlw	90
 10721  004CBA  6EDE               	movwf	postinc2,c
 10722  004CBC  0E00               	movlw	0
 10723  004CBE  6EDD               	movwf	postdec2,c
 10724                           
 10725                           ;class/paddle.c: 13:         p->y = 20;
 10726  004CC0  EE20 F002          	lfsr	2,2
 10727  004CC4  5012               	movf	Paddle_init@p^0,w,c
 10728  004CC6  26D9               	addwf	fsr2l,f,c
 10729  004CC8  5013               	movf	(Paddle_init@p+1)^0,w,c
 10730  004CCA  22DA               	addwfc	fsr2h,f,c
 10731  004CCC  0E14               	movlw	20
 10732  004CCE  6EDE               	movwf	postinc2,c
 10733  004CD0  0E00               	movlw	0
 10734  004CD2  6EDD               	movwf	postdec2,c
 10735                           
 10736                           ;class/paddle.c: 14:         p->color = 0b1111111111111111;
 10737  004CD4  EE20 F008          	lfsr	2,8
 10738  004CD8  5012               	movf	Paddle_init@p^0,w,c
 10739  004CDA  26D9               	addwf	fsr2l,f,c
 10740  004CDC  5013               	movf	(Paddle_init@p+1)^0,w,c
 10741  004CDE  22DA               	addwfc	fsr2h,f,c
 10742  004CE0  0EFF               	movlw	255
 10743  004CE2  6EDE               	movwf	postinc2,c
 10744  004CE4  0EFF               	movlw	255
 10745  004CE6  6EDD               	movwf	postdec2,c
 10746                           
 10747                           ;class/paddle.c: 15:     }
 10748  004CE8  0012               	return	
 10749  004CEA                     l6470:
 10750                           
 10751                           ;class/paddle.c: 17:     {;class/paddle.c: 18:         p->x = 90;
 10752  004CEA  C012  FFD9         	movff	Paddle_init@p,fsr2l
 10753  004CEE  C013  FFDA         	movff	Paddle_init@p+1,fsr2h
 10754  004CF2  0E5A               	movlw	90
 10755  004CF4  6EDE               	movwf	postinc2,c
 10756  004CF6  0E00               	movlw	0
 10757  004CF8  6EDD               	movwf	postdec2,c
 10758                           
 10759                           ;class/paddle.c: 19:         p->y = 280;
 10760  004CFA  EE20 F002          	lfsr	2,2
 10761  004CFE  5012               	movf	Paddle_init@p^0,w,c
 10762  004D00  26D9               	addwf	fsr2l,f,c
 10763  004D02  5013               	movf	(Paddle_init@p+1)^0,w,c
 10764  004D04  22DA               	addwfc	fsr2h,f,c
 10765  004D06  0E18               	movlw	24
 10766  004D08  6EDE               	movwf	postinc2,c
 10767  004D0A  0E01               	movlw	1
 10768  004D0C  6EDD               	movwf	postdec2,c
 10769                           
 10770                           ;class/paddle.c: 20:         p->color = 0b1111111111111111;
 10771  004D0E  EE20 F008          	lfsr	2,8
 10772  004D12  5012               	movf	Paddle_init@p^0,w,c
 10773  004D14  26D9               	addwf	fsr2l,f,c
 10774  004D16  5013               	movf	(Paddle_init@p+1)^0,w,c
 10775  004D18  22DA               	addwfc	fsr2h,f,c
 10776  004D1A  0EFF               	movlw	255
 10777  004D1C  6EDE               	movwf	postinc2,c
 10778  004D1E  0EFF               	movlw	255
 10779  004D20  6EDD               	movwf	postdec2,c
 10780  004D22  0012               	return		;funcret
 10781  004D24                     __end_of_Paddle_init:
 10782                           	callstack 0
 10783                           
 10784 ;; *************** function _LCD_SliderCreate *****************
 10785 ;; Defined at:
 10786 ;;		line 291 in file "libraries/lcd_highlevel.c"
 10787 ;; Parameters:    Size  Location     Type
 10788 ;;  posX            2   17[COMRAM] unsigned short 
 10789 ;;  posY            2   19[COMRAM] unsigned short 
 10790 ;;  width           2   21[COMRAM] unsigned short 
 10791 ;;  height          2   23[COMRAM] unsigned short 
 10792 ;;  sldColor        2   25[COMRAM] unsigned short 
 10793 ;;  bgColor         2   27[COMRAM] unsigned short 
 10794 ;;  borderColor     2   29[COMRAM] unsigned short 
 10795 ;;  cursorWidth     2   31[COMRAM] unsigned short 
 10796 ;;  steps           2   33[COMRAM] unsigned short 
 10797 ;;  fpPress         2   35[COMRAM] PTR FTN()void 
 10798 ;;		 -> Absolute function(1), 
 10799 ;;  slider          2   37[COMRAM] PTR struct .
 10800 ;;		 -> g1(240), 
 10801 ;; Auto vars:     Size  Location     Type
 10802 ;;		None
 10803 ;; Return value:  Size  Location     Type
 10804 ;;                  1    wreg      void 
 10805 ;; Registers used:
 10806 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10807 ;; Tracked objects:
 10808 ;;		On entry : 0/0
 10809 ;;		On exit  : 0/0
 10810 ;;		Unchanged: 0/0
 10811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10812 ;;      Params:        22       0       0       0       0       0       0
 10813 ;;      Locals:         0       0       0       0       0       0       0
 10814 ;;      Temps:          0       0       0       0       0       0       0
 10815 ;;      Totals:        22       0       0       0       0       0       0
 10816 ;;Total ram usage:       22 bytes
 10817 ;; Hardware stack levels used: 1
 10818 ;; Hardware stack levels required when called: 4
 10819 ;; This function calls:
 10820 ;;		Nothing
 10821 ;; This function is called by:
 10822 ;;		_GameParameters_init
 10823 ;; This function uses a non-reentrant model
 10824 ;;
 10825                           
 10826                           	psect	text43
 10827  004050                     __ptext43:
 10828                           	callstack 0
 10829  004050                     _LCD_SliderCreate:
 10830                           	callstack 21
 10831                           
 10832                           ;libraries/lcd_highlevel.c: 291: void LCD_SliderCreate(uint16_t posX, uint16_t posY,;lib
      +                          raries/lcd_highlevel.c: 292:                       uint16_t width, uint16_t height,;libr
      +                          aries/lcd_highlevel.c: 293:                       uint16_t sldColor, uint16_t bgColor, u
      +                          int16_t borderColor,;libraries/lcd_highlevel.c: 294:                       uint16_t curs
      +                          orWidth,;libraries/lcd_highlevel.c: 295:                       uint16_t steps,;libraries
      +                          /lcd_highlevel.c: 296:                       void (* fpPress)(),;libraries/lcd_highlevel
      +                          .c: 297:                       sld_t * slider)
 10833                           
 10834                           ;incstack = 0
 10835  004050  C026  FFD9         	movff	LCD_SliderCreate@slider,fsr2l
 10836  004054  C027  FFDA         	movff	LCD_SliderCreate@slider+1,fsr2h
 10837  004058  C012  FFDE         	movff	LCD_SliderCreate@posX,postinc2
 10838  00405C  C013  FFDD         	movff	LCD_SliderCreate@posX+1,postdec2
 10839                           
 10840                           ;libraries/lcd_highlevel.c: 300:   slider->posY = posY;
 10841  004060  EE20 F002          	lfsr	2,2
 10842  004064  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10843  004066  26D9               	addwf	fsr2l,f,c
 10844  004068  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10845  00406A  22DA               	addwfc	fsr2h,f,c
 10846  00406C  C014  FFDE         	movff	LCD_SliderCreate@posY,postinc2
 10847  004070  C015  FFDD         	movff	LCD_SliderCreate@posY+1,postdec2
 10848                           
 10849                           ;libraries/lcd_highlevel.c: 301:   slider->height = height;
 10850  004074  EE20 F006          	lfsr	2,6
 10851  004078  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10852  00407A  26D9               	addwf	fsr2l,f,c
 10853  00407C  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10854  00407E  22DA               	addwfc	fsr2h,f,c
 10855  004080  C018  FFDE         	movff	LCD_SliderCreate@height,postinc2
 10856  004084  C019  FFDD         	movff	LCD_SliderCreate@height+1,postdec2
 10857                           
 10858                           ;libraries/lcd_highlevel.c: 302:   slider->width = width;
 10859  004088  EE20 F004          	lfsr	2,4
 10860  00408C  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10861  00408E  26D9               	addwf	fsr2l,f,c
 10862  004090  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10863  004092  22DA               	addwfc	fsr2h,f,c
 10864  004094  C016  FFDE         	movff	LCD_SliderCreate@width,postinc2
 10865  004098  C017  FFDD         	movff	LCD_SliderCreate@width+1,postdec2
 10866                           
 10867                           ;libraries/lcd_highlevel.c: 303:   slider->sldColor = sldColor;
 10868  00409C  EE20 F008          	lfsr	2,8
 10869  0040A0  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10870  0040A2  26D9               	addwf	fsr2l,f,c
 10871  0040A4  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10872  0040A6  22DA               	addwfc	fsr2h,f,c
 10873  0040A8  C01A  FFDE         	movff	LCD_SliderCreate@sldColor,postinc2
 10874  0040AC  C01B  FFDD         	movff	LCD_SliderCreate@sldColor+1,postdec2
 10875                           
 10876                           ;libraries/lcd_highlevel.c: 304:   slider->bgColor = bgColor;
 10877  0040B0  EE20 F00A          	lfsr	2,10
 10878  0040B4  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10879  0040B6  26D9               	addwf	fsr2l,f,c
 10880  0040B8  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10881  0040BA  22DA               	addwfc	fsr2h,f,c
 10882  0040BC  C01C  FFDE         	movff	LCD_SliderCreate@bgColor,postinc2
 10883  0040C0  C01D  FFDD         	movff	LCD_SliderCreate@bgColor+1,postdec2
 10884                           
 10885                           ;libraries/lcd_highlevel.c: 305:   slider->borderColor = borderColor;
 10886  0040C4  EE20 F00C          	lfsr	2,12
 10887  0040C8  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10888  0040CA  26D9               	addwf	fsr2l,f,c
 10889  0040CC  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10890  0040CE  22DA               	addwfc	fsr2h,f,c
 10891  0040D0  C01E  FFDE         	movff	LCD_SliderCreate@borderColor,postinc2
 10892  0040D4  C01F  FFDD         	movff	LCD_SliderCreate@borderColor+1,postdec2
 10893                           
 10894                           ;libraries/lcd_highlevel.c: 306:   slider->cursorWidth = cursorWidth;
 10895  0040D8  EE20 F00E          	lfsr	2,14
 10896  0040DC  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10897  0040DE  26D9               	addwf	fsr2l,f,c
 10898  0040E0  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10899  0040E2  22DA               	addwfc	fsr2h,f,c
 10900  0040E4  C020  FFDE         	movff	LCD_SliderCreate@cursorWidth,postinc2
 10901  0040E8  C021  FFDD         	movff	LCD_SliderCreate@cursorWidth+1,postdec2
 10902                           
 10903                           ;libraries/lcd_highlevel.c: 307:   slider->fpPress = fpPress;
 10904  0040EC  EE20 F017          	lfsr	2,23
 10905  0040F0  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10906  0040F2  26D9               	addwf	fsr2l,f,c
 10907  0040F4  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10908  0040F6  22DA               	addwfc	fsr2h,f,c
 10909  0040F8  C024  FFDE         	movff	LCD_SliderCreate@fpPress,postinc2
 10910  0040FC  C025  FFDD         	movff	LCD_SliderCreate@fpPress+1,postdec2
 10911                           
 10912                           ;libraries/lcd_highlevel.c: 308:   slider->steps = steps;
 10913  004100  EE20 F015          	lfsr	2,21
 10914  004104  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10915  004106  26D9               	addwf	fsr2l,f,c
 10916  004108  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10917  00410A  22DA               	addwfc	fsr2h,f,c
 10918  00410C  C022  FFDE         	movff	LCD_SliderCreate@steps,postinc2
 10919  004110  C023  FFDD         	movff	LCD_SliderCreate@steps+1,postdec2
 10920                           
 10921                           ;libraries/lcd_highlevel.c: 309:   slider->value = 0;
 10922  004114  EE20 F011          	lfsr	2,17
 10923  004118  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10924  00411A  26D9               	addwf	fsr2l,f,c
 10925  00411C  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10926  00411E  22DA               	addwfc	fsr2h,f,c
 10927  004120  0E00               	movlw	0
 10928  004122  6EDE               	movwf	postinc2,c
 10929  004124  0E00               	movlw	0
 10930  004126  6EDD               	movwf	postdec2,c
 10931                           
 10932                           ;libraries/lcd_highlevel.c: 310:   slider->oldValue = 0;
 10933  004128  EE20 F013          	lfsr	2,19
 10934  00412C  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10935  00412E  26D9               	addwf	fsr2l,f,c
 10936  004130  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10937  004132  22DA               	addwfc	fsr2h,f,c
 10938  004134  0E00               	movlw	0
 10939  004136  6EDE               	movwf	postinc2,c
 10940  004138  0E00               	movlw	0
 10941  00413A  6EDD               	movwf	postdec2,c
 10942  00413C  0012               	return		;funcret
 10943  00413E                     __end_of_LCD_SliderCreate:
 10944                           	callstack 0
 10945                           
 10946 ;; *************** function _LCD_ButtonCreate *****************
 10947 ;; Defined at:
 10948 ;;		line 396 in file "libraries/lcd_highlevel.c"
 10949 ;; Parameters:    Size  Location     Type
 10950 ;;  posX            2   17[COMRAM] unsigned short 
 10951 ;;  posY            2   19[COMRAM] unsigned short 
 10952 ;;  width           2   21[COMRAM] unsigned short 
 10953 ;;  height          2   23[COMRAM] unsigned short 
 10954 ;;  txtColor        2   25[COMRAM] unsigned short 
 10955 ;;  bgColor         2   27[COMRAM] unsigned short 
 10956 ;;  textOrBmp       2   29[COMRAM] PTR const unsigned char 
 10957 ;;		 -> STR_9(9), STR_8(2), STR_7(9), STR_6(11), 
 10958 ;;		 -> STR_5(9), STR_4(9), 
 10959 ;;  font            2   31[COMRAM] PTR struct .
 10960 ;;		 -> arialNarrow_12ptFontInfo(7), 
 10961 ;;  fpPress         2   33[COMRAM] PTR FTN(unsigned char ,)
 10962 ;;		 -> Absolute function(1), 
 10963 ;;  fpReleased      2   35[COMRAM] PTR FTN(unsigned char ,)
 10964 ;;		 -> Absolute function(1), 
 10965 ;;  fpOut           2   37[COMRAM] PTR FTN(unsigned char ,)
 10966 ;;		 -> Absolute function(1), 
 10967 ;;  button          2   39[COMRAM] PTR struct .
 10968 ;;		 -> g1(240), 
 10969 ;;  index           1   41[COMRAM] unsigned char 
 10970 ;; Auto vars:     Size  Location     Type
 10971 ;;		None
 10972 ;; Return value:  Size  Location     Type
 10973 ;;                  1    wreg      void 
 10974 ;; Registers used:
 10975 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10976 ;; Tracked objects:
 10977 ;;		On entry : 0/0
 10978 ;;		On exit  : 0/0
 10979 ;;		Unchanged: 0/0
 10980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10981 ;;      Params:        25       0       0       0       0       0       0
 10982 ;;      Locals:         0       0       0       0       0       0       0
 10983 ;;      Temps:          0       0       0       0       0       0       0
 10984 ;;      Totals:        25       0       0       0       0       0       0
 10985 ;;Total ram usage:       25 bytes
 10986 ;; Hardware stack levels used: 1
 10987 ;; Hardware stack levels required when called: 4
 10988 ;; This function calls:
 10989 ;;		Nothing
 10990 ;; This function is called by:
 10991 ;;		_GameParameters_init
 10992 ;; This function uses a non-reentrant model
 10993 ;;
 10994                           
 10995                           	psect	text44
 10996  003F56                     __ptext44:
 10997                           	callstack 0
 10998  003F56                     _LCD_ButtonCreate:
 10999                           	callstack 21
 11000                           
 11001                           ;libraries/lcd_highlevel.c: 396: void LCD_ButtonCreate(uint16_t posX, uint16_t posY,;lib
      +                          raries/lcd_highlevel.c: 397:                       uint16_t width, uint16_t height,;libr
      +                          aries/lcd_highlevel.c: 398:                       uint16_t txtColor, uint16_t bgColor,;l
      +                          ibraries/lcd_highlevel.c: 399:                       const uint8_t * textOrBmp, FONT_INF
      +                          O * font,;libraries/lcd_highlevel.c: 400:                       void (*fpPress)(uint8_t)
      +                          , void (* fpReleased)(uint8_t), void (* fpOut)(uint8_t),;libraries/lcd_highlevel.c: 401:
      +                                                 btn_t * button,
 11002                           
 11003                           ;incstack = 0
 11004  003F56  C028  FFD9         	movff	LCD_ButtonCreate@button,fsr2l
 11005  003F5A  C029  FFDA         	movff	LCD_ButtonCreate@button+1,fsr2h
 11006  003F5E  C012  FFDE         	movff	LCD_ButtonCreate@posX,postinc2
 11007  003F62  C013  FFDD         	movff	LCD_ButtonCreate@posX+1,postdec2
 11008                           
 11009                           ;libraries/lcd_highlevel.c: 405:   button->posY = posY;
 11010  003F66  EE20 F002          	lfsr	2,2
 11011  003F6A  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11012  003F6C  26D9               	addwf	fsr2l,f,c
 11013  003F6E  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11014  003F70  22DA               	addwfc	fsr2h,f,c
 11015  003F72  C014  FFDE         	movff	LCD_ButtonCreate@posY,postinc2
 11016  003F76  C015  FFDD         	movff	LCD_ButtonCreate@posY+1,postdec2
 11017                           
 11018                           ;libraries/lcd_highlevel.c: 406:   button->height = height;
 11019  003F7A  EE20 F006          	lfsr	2,6
 11020  003F7E  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11021  003F80  26D9               	addwf	fsr2l,f,c
 11022  003F82  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11023  003F84  22DA               	addwfc	fsr2h,f,c
 11024  003F86  C018  FFDE         	movff	LCD_ButtonCreate@height,postinc2
 11025  003F8A  C019  FFDD         	movff	LCD_ButtonCreate@height+1,postdec2
 11026                           
 11027                           ;libraries/lcd_highlevel.c: 407:   button->width = width;
 11028  003F8E  EE20 F004          	lfsr	2,4
 11029  003F92  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11030  003F94  26D9               	addwf	fsr2l,f,c
 11031  003F96  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11032  003F98  22DA               	addwfc	fsr2h,f,c
 11033  003F9A  C016  FFDE         	movff	LCD_ButtonCreate@width,postinc2
 11034  003F9E  C017  FFDD         	movff	LCD_ButtonCreate@width+1,postdec2
 11035                           
 11036                           ;libraries/lcd_highlevel.c: 408:   button->txtColor = txtColor;
 11037  003FA2  EE20 F008          	lfsr	2,8
 11038  003FA6  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11039  003FA8  26D9               	addwf	fsr2l,f,c
 11040  003FAA  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11041  003FAC  22DA               	addwfc	fsr2h,f,c
 11042  003FAE  C01A  FFDE         	movff	LCD_ButtonCreate@txtColor,postinc2
 11043  003FB2  C01B  FFDD         	movff	LCD_ButtonCreate@txtColor+1,postdec2
 11044                           
 11045                           ;libraries/lcd_highlevel.c: 409:   button->bgColor = bgColor;
 11046  003FB6  EE20 F00A          	lfsr	2,10
 11047  003FBA  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11048  003FBC  26D9               	addwf	fsr2l,f,c
 11049  003FBE  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11050  003FC0  22DA               	addwfc	fsr2h,f,c
 11051  003FC2  C01C  FFDE         	movff	LCD_ButtonCreate@bgColor,postinc2
 11052  003FC6  C01D  FFDD         	movff	LCD_ButtonCreate@bgColor+1,postdec2
 11053                           
 11054                           ;libraries/lcd_highlevel.c: 410:   button->text = textOrBmp;
 11055  003FCA  EE20 F00C          	lfsr	2,12
 11056  003FCE  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11057  003FD0  26D9               	addwf	fsr2l,f,c
 11058  003FD2  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11059  003FD4  22DA               	addwfc	fsr2h,f,c
 11060  003FD6  C01E  FFDE         	movff	LCD_ButtonCreate@textOrBmp,postinc2
 11061  003FDA  C01F  FFDD         	movff	LCD_ButtonCreate@textOrBmp+1,postdec2
 11062                           
 11063                           ;libraries/lcd_highlevel.c: 411:   button->font = font;
 11064  003FDE  EE20 F00E          	lfsr	2,14
 11065  003FE2  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11066  003FE4  26D9               	addwf	fsr2l,f,c
 11067  003FE6  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11068  003FE8  22DA               	addwfc	fsr2h,f,c
 11069  003FEA  C020  FFDE         	movff	LCD_ButtonCreate@font,postinc2
 11070  003FEE  C021  FFDD         	movff	LCD_ButtonCreate@font+1,postdec2
 11071                           
 11072                           ;libraries/lcd_highlevel.c: 412:   button->fpPress = fpPress;
 11073  003FF2  EE20 F011          	lfsr	2,17
 11074  003FF6  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11075  003FF8  26D9               	addwf	fsr2l,f,c
 11076  003FFA  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11077  003FFC  22DA               	addwfc	fsr2h,f,c
 11078  003FFE  C022  FFDE         	movff	LCD_ButtonCreate@fpPress,postinc2
 11079  004002  C023  FFDD         	movff	LCD_ButtonCreate@fpPress+1,postdec2
 11080                           
 11081                           ;libraries/lcd_highlevel.c: 413:   button->fpReleased = fpReleased;
 11082  004006  EE20 F013          	lfsr	2,19
 11083  00400A  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11084  00400C  26D9               	addwf	fsr2l,f,c
 11085  00400E  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11086  004010  22DA               	addwfc	fsr2h,f,c
 11087  004012  C024  FFDE         	movff	LCD_ButtonCreate@fpReleased,postinc2
 11088  004016  C025  FFDD         	movff	LCD_ButtonCreate@fpReleased+1,postdec2
 11089                           
 11090                           ;libraries/lcd_highlevel.c: 414:   button->fpOut = fpOut;
 11091  00401A  EE20 F015          	lfsr	2,21
 11092  00401E  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11093  004020  26D9               	addwf	fsr2l,f,c
 11094  004022  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11095  004024  22DA               	addwfc	fsr2h,f,c
 11096  004026  C026  FFDE         	movff	LCD_ButtonCreate@fpOut,postinc2
 11097  00402A  C027  FFDD         	movff	LCD_ButtonCreate@fpOut+1,postdec2
 11098                           
 11099                           ;libraries/lcd_highlevel.c: 415:   button->index = index;
 11100  00402E  EE20 F017          	lfsr	2,23
 11101  004032  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11102  004034  26D9               	addwf	fsr2l,f,c
 11103  004036  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11104  004038  22DA               	addwfc	fsr2h,f,c
 11105  00403A  C02A  FFDF         	movff	LCD_ButtonCreate@index,indf2
 11106                           
 11107                           ;libraries/lcd_highlevel.c: 416:   button->pressed = 0;
 11108  00403E  EE20 F010          	lfsr	2,16
 11109  004042  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11110  004044  26D9               	addwf	fsr2l,f,c
 11111  004046  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11112  004048  22DA               	addwfc	fsr2h,f,c
 11113  00404A  0E00               	movlw	0
 11114  00404C  6EDF               	movwf	indf2,c
 11115  00404E  0012               	return		;funcret
 11116  004050                     __end_of_LCD_ButtonCreate:
 11117                           	callstack 0
 11118                           
 11119 ;; *************** function _Ball_init *****************
 11120 ;; Defined at:
 11121 ;;		line 6 in file "class/ball.c"
 11122 ;; Parameters:    Size  Location     Type
 11123 ;;  b               2   17[COMRAM] PTR struct Ball
 11124 ;;		 -> g1(240), 
 11125 ;; Auto vars:     Size  Location     Type
 11126 ;;		None
 11127 ;; Return value:  Size  Location     Type
 11128 ;;                  1    wreg      void 
 11129 ;; Registers used:
 11130 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11131 ;; Tracked objects:
 11132 ;;		On entry : 0/0
 11133 ;;		On exit  : 0/0
 11134 ;;		Unchanged: 0/0
 11135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11136 ;;      Params:         2       0       0       0       0       0       0
 11137 ;;      Locals:         0       0       0       0       0       0       0
 11138 ;;      Temps:          0       0       0       0       0       0       0
 11139 ;;      Totals:         2       0       0       0       0       0       0
 11140 ;;Total ram usage:        2 bytes
 11141 ;; Hardware stack levels used: 1
 11142 ;; Hardware stack levels required when called: 4
 11143 ;; This function calls:
 11144 ;;		Nothing
 11145 ;; This function is called by:
 11146 ;;		_GameParameters_init
 11147 ;; This function uses a non-reentrant model
 11148 ;;
 11149                           
 11150                           	psect	text45
 11151  0052C8                     __ptext45:
 11152                           	callstack 0
 11153  0052C8                     _Ball_init:
 11154                           	callstack 21
 11155                           
 11156                           ;class/ball.c: 6: void Ball_init(struct Ball* b);class/ball.c: 7: {;class/ball.c: 8:    
      +                           b->x = 90;
 11157                           
 11158                           ;incstack = 0
 11159  0052C8  C012  FFD9         	movff	Ball_init@b,fsr2l
 11160  0052CC  C013  FFDA         	movff	Ball_init@b+1,fsr2h
 11161  0052D0  0E5A               	movlw	90
 11162  0052D2  6EDE               	movwf	postinc2,c
 11163  0052D4  0E00               	movlw	0
 11164  0052D6  6EDD               	movwf	postdec2,c
 11165                           
 11166                           ;class/ball.c: 9:     b->y = 150;
 11167  0052D8  EE20 F002          	lfsr	2,2
 11168  0052DC  5012               	movf	Ball_init@b^0,w,c
 11169  0052DE  26D9               	addwf	fsr2l,f,c
 11170  0052E0  5013               	movf	(Ball_init@b+1)^0,w,c
 11171  0052E2  22DA               	addwfc	fsr2h,f,c
 11172  0052E4  0E96               	movlw	150
 11173  0052E6  6EDE               	movwf	postinc2,c
 11174  0052E8  0E00               	movlw	0
 11175  0052EA  6EDD               	movwf	postdec2,c
 11176                           
 11177                           ;class/ball.c: 10:     b->oldx=20;
 11178  0052EC  EE20 F004          	lfsr	2,4
 11179  0052F0  5012               	movf	Ball_init@b^0,w,c
 11180  0052F2  26D9               	addwf	fsr2l,f,c
 11181  0052F4  5013               	movf	(Ball_init@b+1)^0,w,c
 11182  0052F6  22DA               	addwfc	fsr2h,f,c
 11183  0052F8  0E14               	movlw	20
 11184  0052FA  6EDE               	movwf	postinc2,c
 11185  0052FC  0E00               	movlw	0
 11186  0052FE  6EDD               	movwf	postdec2,c
 11187                           
 11188                           ;class/ball.c: 11:     b->oldy=20;
 11189  005300  EE20 F006          	lfsr	2,6
 11190  005304  5012               	movf	Ball_init@b^0,w,c
 11191  005306  26D9               	addwf	fsr2l,f,c
 11192  005308  5013               	movf	(Ball_init@b+1)^0,w,c
 11193  00530A  22DA               	addwfc	fsr2h,f,c
 11194  00530C  0E14               	movlw	20
 11195  00530E  6EDE               	movwf	postinc2,c
 11196  005310  0E00               	movlw	0
 11197  005312  6EDD               	movwf	postdec2,c
 11198                           
 11199                           ;class/ball.c: 12:     b->dx = 0;
 11200  005314  EE20 F008          	lfsr	2,8
 11201  005318  5012               	movf	Ball_init@b^0,w,c
 11202  00531A  26D9               	addwf	fsr2l,f,c
 11203  00531C  5013               	movf	(Ball_init@b+1)^0,w,c
 11204  00531E  22DA               	addwfc	fsr2h,f,c
 11205  005320  0E00               	movlw	0
 11206  005322  6EDE               	movwf	postinc2,c
 11207  005324  0E00               	movlw	0
 11208  005326  6EDD               	movwf	postdec2,c
 11209  005328  0012               	return		;funcret
 11210  00532A                     __end_of_Ball_init:
 11211                           	callstack 0
 11212                           
 11213 ;; *************** function _displaySM *****************
 11214 ;; Defined at:
 11215 ;;		line 30 in file "stateMachine/display.c"
 11216 ;; Parameters:    Size  Location     Type
 11217 ;;  ev              1    wreg     unsigned char 
 11218 ;;  g               2   65[BANK0 ] PTR struct GameParameter
 11219 ;;		 -> g1(240), 
 11220 ;; Auto vars:     Size  Location     Type
 11221 ;;  ev              1   69[BANK0 ] unsigned char 
 11222 ;; Return value:  Size  Location     Type
 11223 ;;                  1    wreg      void 
 11224 ;; Registers used:
 11225 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11226 ;; Tracked objects:
 11227 ;;		On entry : 3F/0
 11228 ;;		On exit  : 0/0
 11229 ;;		Unchanged: 0/0
 11230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11231 ;;      Params:         0       2       0       0       0       0       0
 11232 ;;      Locals:         0       1       0       0       0       0       0
 11233 ;;      Temps:          0       2       0       0       0       0       0
 11234 ;;      Totals:         0       5       0       0       0       0       0
 11235 ;;Total ram usage:        5 bytes
 11236 ;; Hardware stack levels used: 1
 11237 ;; Hardware stack levels required when called: 14
 11238 ;; This function calls:
 11239 ;;		_Menu_inGameDraw
 11240 ;;		_displayController
 11241 ;; This function is called by:
 11242 ;;		_Factory_exec
 11243 ;; This function uses a non-reentrant model
 11244 ;;
 11245                           
 11246                           	psect	text46
 11247  004BDA                     __ptext46:
 11248                           	callstack 0
 11249  004BDA                     _displaySM:
 11250                           	callstack 15
 11251                           
 11252                           ;incstack = 0
 11253                           ;displaySM@ev stored from wreg
 11254  004BDA  6FEF               	movwf	displaySM@ev& (0+255),b
 11255                           
 11256                           ;stateMachine/display.c: 30: void displaySM(Event ev, GameParameters* g);stateMachine/di
      +                          splay.c: 31: {;stateMachine/display.c: 32:    switch(displayState)
 11257  004BDC  D03B               	goto	l8804
 11258  004BDE                     l8760:
 11259                           
 11260                           ; BSR set to: 0
 11261                           ;stateMachine/display.c: 35:             if((ev==evOnePlayer)||(ev==evTwoPlayer))
 11262  004BDE  0E05               	movlw	5
 11263  004BE0  19EF               	xorwf	displaySM@ev& (0+255),w,b
 11264  004BE2  B4D8               	btfsc	status,2,c
 11265  004BE4  D004               	goto	u6440
 11266                           
 11267                           ; BSR set to: 0
 11268  004BE6  0E06               	movlw	6
 11269  004BE8  19EF               	xorwf	displaySM@ev& (0+255),w,b
 11270  004BEA  A4D8               	btfss	status,2,c
 11271  004BEC  D010               	goto	l8770
 11272  004BEE                     u6440:
 11273                           
 11274                           ; BSR set to: 0
 11275                           ;stateMachine/display.c: 36:             {;stateMachine/display.c: 37:                 d
      +                          isplayState=INGAME;
 11276  004BEE  0E02               	movlw	2
 11277  004BF0  6F88               	movwf	_displayState& (0+255),b
 11278                           
 11279                           ; BSR set to: 0
 11280                           ;stateMachine/display.c: 38:                 Menu_inGameDraw(g);
 11281  004BF2  C0EB  F0E4         	movff	displaySM@g,Menu_inGameDraw@g
 11282  004BF6  C0EC  F0E5         	movff	displaySM@g+1,Menu_inGameDraw@g+1
 11283  004BFA  EC92  F026         	call	_Menu_inGameDraw	;wreg free
 11284                           
 11285                           ;stateMachine/display.c: 39:                 displayController(g,ev);
 11286  004BFE  C0EB  F0E6         	movff	displaySM@g,displayController@g
 11287  004C02  C0EC  F0E7         	movff	displaySM@g+1,displayController@g+1
 11288  004C06  C0EF  F0E8         	movff	displaySM@ev,displayController@ev
 11289  004C0A  EC9F  F020         	call	_displayController	;wreg free
 11290  004C0E                     l8770:
 11291                           
 11292                           ;stateMachine/display.c: 41:             if(ev==evParameters)
 11293  004C0E  0E07               	movlw	7
 11294  004C10  0100               	movlb	0	; () banked
 11295  004C12  19EF               	xorwf	displaySM@ev& (0+255),w,b
 11296  004C14  A4D8               	btfss	status,2,c
 11297  004C16  0012               	return	
 11298                           
 11299                           ; BSR set to: 0
 11300                           ;stateMachine/display.c: 42:             {;stateMachine/display.c: 43:                 d
      +                          isplayState=PARAMETERS;
 11301  004C18  0E01               	movlw	1
 11302  004C1A                     L7:
 11303  004C1A  6F88               	movwf	_displayState& (0+255),b
 11304  004C1C                     l8774:
 11305                           
 11306                           ; BSR set to: 0
 11307                           ;stateMachine/display.c: 44:                 displayController(g,ev);
 11308  004C1C  C0EB  F0E6         	movff	displaySM@g,displayController@g
 11309  004C20  C0EC  F0E7         	movff	displaySM@g+1,displayController@g+1
 11310  004C24  C0EF  F0E8         	movff	displaySM@ev,displayController@ev
 11311  004C28  EC9F  F020         	call	_displayController	;wreg free
 11312  004C2C  0012               	return	
 11313  004C2E                     l8776:
 11314                           
 11315                           ; BSR set to: 0
 11316                           ;stateMachine/display.c: 49:             if(ev==evLeave)
 11317  004C2E  0E08               	movlw	8
 11318  004C30  19EF               	xorwf	displaySM@ev& (0+255),w,b
 11319  004C32  A4D8               	btfss	status,2,c
 11320  004C34  0012               	return	
 11321  004C36                     u6460:
 11322                           
 11323                           ; BSR set to: 0
 11324                           ;stateMachine/display.c: 50:             {;stateMachine/display.c: 51:                 d
      +                          isplayState=WELCOME;
 11325  004C36  0E00               	movlw	0
 11326  004C38  D7F0               	goto	L7
 11327  004C3A                     l8782:
 11328                           
 11329                           ; BSR set to: 0
 11330                           ;stateMachine/display.c: 57:             if(ev==evEndGame)
 11331  004C3A  0E09               	movlw	9
 11332  004C3C  19EF               	xorwf	displaySM@ev& (0+255),w,b
 11333  004C3E  A4D8               	btfss	status,2,c
 11334  004C40  D002               	goto	l8788
 11335                           
 11336                           ; BSR set to: 0
 11337                           ;stateMachine/display.c: 58:             {;stateMachine/display.c: 59:                 d
      +                          isplayState=ENDGAME;
 11338  004C42  0E03               	movlw	3
 11339  004C44  D7EA               	goto	L7
 11340  004C46                     l8788:
 11341                           
 11342                           ; BSR set to: 0
 11343  004C46  0E08               	movlw	8
 11344  004C48  19EF               	xorwf	displaySM@ev& (0+255),w,b
 11345  004C4A  B4D8               	btfsc	status,2,c
 11346  004C4C  D7F4               	goto	u6460
 11347  004C4E  D7E6               	goto	l8774
 11348  004C50                     l8796:
 11349                           
 11350                           ; BSR set to: 0
 11351                           ;stateMachine/display.c: 74:            if(ev==evNewGame)
 11352  004C50  0E0F               	movlw	15
 11353  004C52  D7EE               	goto	L14
 11354  004C54                     l8804:
 11355  004C54  0100               	movlb	0	; () banked
 11356  004C56  5188               	movf	_displayState& (0+255),w,b
 11357  004C58  6FED               	movwf	??_displaySM& (0+255),b
 11358  004C5A  6BEE               	clrf	(??_displaySM+1)& (0+255),b
 11359                           
 11360                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11361                           ; Switch size 1, requested type "simple"
 11362                           ; Number of cases is 1, Range of values is 0 to 0
 11363                           ; switch strategies available:
 11364                           ; Name         Instructions Cycles
 11365                           ; simple_byte            4     3 (average)
 11366                           ;	Chosen strategy is simple_byte
 11367  004C5C  51EE               	movf	(??_displaySM+1)& (0+255),w,b
 11368  004C5E  0A00               	xorlw	0	; case 0
 11369  004C60  A4D8               	btfss	status,2,c
 11370  004C62  0012               	return	
 11371                           
 11372                           ; BSR set to: 0
 11373                           ; Switch size 1, requested type "simple"
 11374                           ; Number of cases is 4, Range of values is 0 to 3
 11375                           ; switch strategies available:
 11376                           ; Name         Instructions Cycles
 11377                           ; simple_byte           13     7 (average)
 11378                           ;	Chosen strategy is simple_byte
 11379  004C64  51ED               	movf	??_displaySM& (0+255),w,b
 11380  004C66  0A00               	xorlw	0	; case 0
 11381  004C68  B4D8               	btfsc	status,2,c
 11382  004C6A  D7B9               	goto	l8760
 11383  004C6C  0A01               	xorlw	1	; case 1
 11384  004C6E  B4D8               	btfsc	status,2,c
 11385  004C70  D7DE               	goto	l8776
 11386  004C72  0A03               	xorlw	3	; case 2
 11387  004C74  B4D8               	btfsc	status,2,c
 11388  004C76  D7E1               	goto	l8782
 11389  004C78  0A01               	xorlw	1	; case 3
 11390  004C7A  A4D8               	btfss	status,2,c
 11391  004C7C  0012               	return	
 11392  004C7E  D7E8               	goto	l8796
 11393  004C80                     __end_of_displaySM:
 11394                           	callstack 0
 11395                           
 11396 ;; *************** function _displayController *****************
 11397 ;; Defined at:
 11398 ;;		line 94 in file "stateMachine/display.c"
 11399 ;; Parameters:    Size  Location     Type
 11400 ;;  g               2   60[BANK0 ] PTR struct GameParameter
 11401 ;;		 -> g1(240), 
 11402 ;;  ev              1   62[BANK0 ] unsigned char 
 11403 ;; Auto vars:     Size  Location     Type
 11404 ;;		None
 11405 ;; Return value:  Size  Location     Type
 11406 ;;                  1    wreg      void 
 11407 ;; Registers used:
 11408 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11409 ;; Tracked objects:
 11410 ;;		On entry : 0/0
 11411 ;;		On exit  : 0/0
 11412 ;;		Unchanged: 0/0
 11413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11414 ;;      Params:         0       3       0       0       0       0       0
 11415 ;;      Locals:         0       0       0       0       0       0       0
 11416 ;;      Temps:          0       2       0       0       0       0       0
 11417 ;;      Totals:         0       5       0       0       0       0       0
 11418 ;;Total ram usage:        5 bytes
 11419 ;; Hardware stack levels used: 1
 11420 ;; Hardware stack levels required when called: 13
 11421 ;; This function calls:
 11422 ;;		_Ball_draw
 11423 ;;		_LCD_DrawRect
 11424 ;;		_Menu_endGame
 11425 ;;		_Menu_parametersDraw
 11426 ;;		_Menu_welcomeDraw
 11427 ;;		_Paddle_draw
 11428 ;;		_Score_draw
 11429 ;; This function is called by:
 11430 ;;		_displayInit
 11431 ;;		_displaySM
 11432 ;; This function uses a non-reentrant model
 11433 ;;
 11434                           
 11435                           	psect	text47
 11436  00413E                     __ptext47:
 11437                           	callstack 0
 11438  00413E                     _displayController:
 11439                           	callstack 14
 11440                           
 11441                           ;stateMachine/display.c: 94: void displayController(GameParameters* g,Event ev);stateMac
      +                          hine/display.c: 95: {;stateMachine/display.c: 96:     switch(displayState)
 11442                           
 11443                           ;incstack = 0
 11444  00413E  D060               	goto	l8698
 11445  004140                     l8672:
 11446                           
 11447                           ; BSR set to: 0
 11448                           ;stateMachine/display.c: 100:             Menu_welcomeDraw(g);
 11449  004140  C0E6  F044         	movff	displayController@g,Menu_welcomeDraw@g
 11450  004144  C0E7  F045         	movff	displayController@g+1,Menu_welcomeDraw@g+1
 11451  004148  ECB5  F027         	call	_Menu_welcomeDraw	;wreg free
 11452                           
 11453                           ;stateMachine/display.c: 101:             break;
 11454  00414C  0012               	return	
 11455  00414E                     l8674:
 11456                           
 11457                           ; BSR set to: 0
 11458                           ;stateMachine/display.c: 105:             Menu_parametersDraw(g);
 11459  00414E  C0E6  F0E4         	movff	displayController@g,Menu_parametersDraw@g
 11460  004152  C0E7  F0E5         	movff	displayController@g+1,Menu_parametersDraw@g+1
 11461  004156  EC93  F01E         	call	_Menu_parametersDraw	;wreg free
 11462                           
 11463                           ;stateMachine/display.c: 106:             break;
 11464  00415A  0012               	return	
 11465  00415C                     l8676:
 11466                           
 11467                           ; BSR set to: 0
 11468                           ;stateMachine/display.c: 110:             if(ev==evRedrawPaddle1)
 11469  00415C  0E0B               	movlw	11
 11470  00415E  19E8               	xorwf	displayController@ev& (0+255),w,b
 11471  004160  A4D8               	btfss	status,2,c
 11472  004162  D008               	goto	l8680
 11473                           
 11474                           ; BSR set to: 0
 11475                           ;stateMachine/display.c: 111:             {;stateMachine/display.c: 112:                
      +                           Paddle_draw(&g->p1);
 11476  004164  0ED6               	movlw	214
 11477  004166  25E6               	addwf	displayController@g& (0+255),w,b
 11478  004168  6E25               	movwf	Paddle_draw@p^0,c
 11479  00416A  0E00               	movlw	0
 11480  00416C  21E7               	addwfc	(displayController@g+1)& (0+255),w,b
 11481  00416E  6E26               	movwf	(Paddle_draw@p+1)^0,c
 11482  004170  EC68  F01D         	call	_Paddle_draw	;wreg free
 11483  004174                     l8680:
 11484                           
 11485                           ;stateMachine/display.c: 114:             if(ev==evRedrawPaddle2)
 11486  004174  0E0C               	movlw	12
 11487  004176  0100               	movlb	0	; () banked
 11488  004178  19E8               	xorwf	displayController@ev& (0+255),w,b
 11489  00417A  A4D8               	btfss	status,2,c
 11490  00417C  D008               	goto	l8684
 11491                           
 11492                           ; BSR set to: 0
 11493                           ;stateMachine/display.c: 115:             {;stateMachine/display.c: 116:                
      +                           Paddle_draw(&g->p2);
 11494  00417E  0EE0               	movlw	224
 11495  004180  25E6               	addwf	displayController@g& (0+255),w,b
 11496  004182  6E25               	movwf	Paddle_draw@p^0,c
 11497  004184  0E00               	movlw	0
 11498  004186  21E7               	addwfc	(displayController@g+1)& (0+255),w,b
 11499  004188  6E26               	movwf	(Paddle_draw@p+1)^0,c
 11500  00418A  EC68  F01D         	call	_Paddle_draw	;wreg free
 11501  00418E                     l8684:
 11502                           
 11503                           ;stateMachine/display.c: 118:             if(ev==evRedrawBall)
 11504  00418E  0E0D               	movlw	13
 11505  004190  0100               	movlb	0	; () banked
 11506  004192  19E8               	xorwf	displayController@ev& (0+255),w,b
 11507  004194  A4D8               	btfss	status,2,c
 11508  004196  D008               	goto	l8688
 11509                           
 11510                           ; BSR set to: 0
 11511                           ;stateMachine/display.c: 119:             {;stateMachine/display.c: 120:                
      +                           Ball_draw(&g->b);
 11512  004198  0ECA               	movlw	202
 11513  00419A  25E6               	addwf	displayController@g& (0+255),w,b
 11514  00419C  6E25               	movwf	Ball_draw@b^0,c
 11515  00419E  0E00               	movlw	0
 11516  0041A0  21E7               	addwfc	(displayController@g+1)& (0+255),w,b
 11517  0041A2  6E26               	movwf	(Ball_draw@b+1)^0,c
 11518  0041A4  EC32  F01A         	call	_Ball_draw	;wreg free
 11519  0041A8                     l8688:
 11520                           
 11521                           ;stateMachine/display.c: 122:             if(ev==evRedrawScore)
 11522  0041A8  0E0E               	movlw	14
 11523  0041AA  0100               	movlb	0	; () banked
 11524  0041AC  19E8               	xorwf	displayController@ev& (0+255),w,b
 11525  0041AE  A4D8               	btfss	status,2,c
 11526  0041B0  0012               	return	
 11527                           
 11528                           ; BSR set to: 0
 11529                           ;stateMachine/display.c: 123:             {;stateMachine/display.c: 124:                
      +                           Score_draw(&g->s1);
 11530  0041B2  0EEA               	movlw	234
 11531  0041B4  25E6               	addwf	displayController@g& (0+255),w,b
 11532  0041B6  6FD5               	movwf	Score_draw@s& (0+255),b
 11533  0041B8  0E00               	movlw	0
 11534  0041BA  21E7               	addwfc	(displayController@g+1)& (0+255),w,b
 11535  0041BC  6FD6               	movwf	(Score_draw@s+1)& (0+255),b
 11536  0041BE  ECFC  F021         	call	_Score_draw	;wreg free
 11537                           
 11538                           ;stateMachine/display.c: 125:                 LCD_DrawRect(0,160,239,160,1,0b11111111111
      +                          11111);
 11539  0041C2  0E00               	movlw	0
 11540  0041C4  6E13               	movwf	(LCD_DrawRect@posX1+1)^0,c
 11541  0041C6  0E00               	movlw	0
 11542  0041C8  6E12               	movwf	LCD_DrawRect@posX1^0,c
 11543  0041CA  0E00               	movlw	0
 11544  0041CC  6E15               	movwf	(LCD_DrawRect@posY1+1)^0,c
 11545  0041CE  0EA0               	movlw	160
 11546  0041D0  6E14               	movwf	LCD_DrawRect@posY1^0,c
 11547  0041D2  0E00               	movlw	0
 11548  0041D4  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 11549  0041D6  0EEF               	movlw	239
 11550  0041D8  6E16               	movwf	LCD_DrawRect@posX2^0,c
 11551  0041DA  0E00               	movlw	0
 11552  0041DC  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 11553  0041DE  0EA0               	movlw	160
 11554  0041E0  6E18               	movwf	LCD_DrawRect@posY2^0,c
 11555  0041E2  0E01               	movlw	1
 11556  0041E4  6E1A               	movwf	LCD_DrawRect@fill^0,c
 11557  0041E6  0EFF               	movlw	255
 11558  0041E8  6E1C               	movwf	(LCD_DrawRect@color+1)^0,c
 11559  0041EA  681B               	setf	LCD_DrawRect@color^0,c
 11560  0041EC  EC31  F013         	call	_LCD_DrawRect	;wreg free
 11561  0041F0  0012               	return	
 11562  0041F2                     l8694:
 11563                           
 11564                           ; BSR set to: 0
 11565                           ;stateMachine/display.c: 130:             Menu_endGame(g);
 11566  0041F2  C0E6  F044         	movff	displayController@g,Menu_endGame@g
 11567  0041F6  C0E7  F045         	movff	displayController@g+1,Menu_endGame@g+1
 11568  0041FA  EC40  F024         	call	_Menu_endGame	;wreg free
 11569                           
 11570                           ;stateMachine/display.c: 131:             break;
 11571  0041FE  0012               	return	
 11572  004200                     l8698:
 11573  004200  0100               	movlb	0	; () banked
 11574  004202  5188               	movf	_displayState& (0+255),w,b
 11575  004204  6FE9               	movwf	??_displayController& (0+255),b
 11576  004206  6BEA               	clrf	(??_displayController+1)& (0+255),b
 11577                           
 11578                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11579                           ; Switch size 1, requested type "simple"
 11580                           ; Number of cases is 1, Range of values is 0 to 0
 11581                           ; switch strategies available:
 11582                           ; Name         Instructions Cycles
 11583                           ; simple_byte            4     3 (average)
 11584                           ;	Chosen strategy is simple_byte
 11585  004208  51EA               	movf	(??_displayController+1)& (0+255),w,b
 11586  00420A  0A00               	xorlw	0	; case 0
 11587  00420C  A4D8               	btfss	status,2,c
 11588  00420E  0012               	return	
 11589                           
 11590                           ; BSR set to: 0
 11591                           ; Switch size 1, requested type "simple"
 11592                           ; Number of cases is 4, Range of values is 0 to 3
 11593                           ; switch strategies available:
 11594                           ; Name         Instructions Cycles
 11595                           ; simple_byte           13     7 (average)
 11596                           ;	Chosen strategy is simple_byte
 11597  004210  51E9               	movf	??_displayController& (0+255),w,b
 11598  004212  0A00               	xorlw	0	; case 0
 11599  004214  B4D8               	btfsc	status,2,c
 11600  004216  D794               	goto	l8672
 11601  004218  0A01               	xorlw	1	; case 1
 11602  00421A  B4D8               	btfsc	status,2,c
 11603  00421C  D798               	goto	l8674
 11604  00421E  0A03               	xorlw	3	; case 2
 11605  004220  B4D8               	btfsc	status,2,c
 11606  004222  D79C               	goto	l8676
 11607  004224  0A01               	xorlw	1	; case 3
 11608  004226  A4D8               	btfss	status,2,c
 11609  004228  0012               	return	
 11610  00422A  D7E3               	goto	l8694
 11611  00422C                     __end_of_displayController:
 11612                           	callstack 0
 11613                           
 11614 ;; *************** function _Menu_welcomeDraw *****************
 11615 ;; Defined at:
 11616 ;;		line 7 in file "class/menu.c"
 11617 ;; Parameters:    Size  Location     Type
 11618 ;;  g               2   67[COMRAM] PTR struct GameParameter
 11619 ;;		 -> g1(240), 
 11620 ;; Auto vars:     Size  Location     Type
 11621 ;;		None
 11622 ;; Return value:  Size  Location     Type
 11623 ;;                  1    wreg      void 
 11624 ;; Registers used:
 11625 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11626 ;; Tracked objects:
 11627 ;;		On entry : 0/0
 11628 ;;		On exit  : 0/0
 11629 ;;		Unchanged: 0/0
 11630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11631 ;;      Params:         2       0       0       0       0       0       0
 11632 ;;      Locals:         0       0       0       0       0       0       0
 11633 ;;      Temps:          0       0       0       0       0       0       0
 11634 ;;      Totals:         2       0       0       0       0       0       0
 11635 ;;Total ram usage:        2 bytes
 11636 ;; Hardware stack levels used: 1
 11637 ;; Hardware stack levels required when called: 7
 11638 ;; This function calls:
 11639 ;;		_LCD_ButtonDraw
 11640 ;;		_LCD_DrawText
 11641 ;;		_LCD_Fill
 11642 ;; This function is called by:
 11643 ;;		_displayController
 11644 ;; This function uses a non-reentrant model
 11645 ;;
 11646                           
 11647                           	psect	text48
 11648  004F6A                     __ptext48:
 11649                           	callstack 0
 11650  004F6A                     _Menu_welcomeDraw:
 11651                           	callstack 19
 11652                           
 11653                           ;class/menu.c: 7: void Menu_welcomeDraw(GameParameters* g);class/menu.c: 8: {;class/menu
      +                          .c: 9:     LCD_Fill(0b0000000000000000);
 11654                           
 11655                           ;incstack = 0
 11656  004F6A  0E00               	movlw	0
 11657  004F6C  6E13               	movwf	(LCD_Fill@color+1)^0,c
 11658  004F6E  0E00               	movlw	0
 11659  004F70  6E12               	movwf	LCD_Fill@color^0,c
 11660  004F72  EC98  F024         	call	_LCD_Fill	;wreg free
 11661                           
 11662                           ;class/menu.c: 10:     LCD_DrawText("WELCOME",&arialNarrow_12ptFontInfo,A_CENTER,120,50,
      +                          0b1111111111111111,0b0000000000000000);
 11663  004F76  0EEB               	movlw	low STR_10
 11664  004F78  6E20               	movwf	LCD_DrawText@msg^0,c
 11665  004F7A  0E7F               	movlw	high STR_10
 11666  004F7C  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
 11667  004F7E  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 11668  004F80  6E22               	movwf	LCD_DrawText@font^0,c
 11669  004F82  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 11670  004F84  6E23               	movwf	(LCD_DrawText@font+1)^0,c
 11671  004F86  0E02               	movlw	2
 11672  004F88  6E24               	movwf	LCD_DrawText@align^0,c
 11673  004F8A  0E00               	movlw	0
 11674  004F8C  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 11675  004F8E  0E78               	movlw	120
 11676  004F90  6E25               	movwf	LCD_DrawText@posX^0,c
 11677  004F92  0E00               	movlw	0
 11678  004F94  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
 11679  004F96  0E32               	movlw	50
 11680  004F98  6E27               	movwf	LCD_DrawText@posY^0,c
 11681  004F9A  0EFF               	movlw	255
 11682  004F9C  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
 11683  004F9E  6829               	setf	LCD_DrawText@color^0,c
 11684  004FA0  0E00               	movlw	0
 11685  004FA2  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
 11686  004FA4  0E00               	movlw	0
 11687  004FA6  6E2B               	movwf	LCD_DrawText@bg_color^0,c
 11688  004FA8  EC82  F00F         	call	_LCD_DrawText	;wreg free
 11689                           
 11690                           ;class/menu.c: 12:     LCD_ButtonDraw(&(g->btnOnePlayer));
 11691  004FAC  0E20               	movlw	32
 11692  004FAE  2444               	addwf	Menu_welcomeDraw@g^0,w,c
 11693  004FB0  6E42               	movwf	LCD_ButtonDraw@button^0,c
 11694  004FB2  0E00               	movlw	0
 11695  004FB4  2045               	addwfc	(Menu_welcomeDraw@g+1)^0,w,c
 11696  004FB6  6E43               	movwf	(LCD_ButtonDraw@button+1)^0,c
 11697  004FB8  EC27  F007         	call	_LCD_ButtonDraw	;wreg free
 11698                           
 11699                           ;class/menu.c: 13:     LCD_ButtonDraw(&(g->btnTwoPlayer));
 11700  004FBC  0E38               	movlw	56
 11701  004FBE  2444               	addwf	Menu_welcomeDraw@g^0,w,c
 11702  004FC0  6E42               	movwf	LCD_ButtonDraw@button^0,c
 11703  004FC2  0E00               	movlw	0
 11704  004FC4  2045               	addwfc	(Menu_welcomeDraw@g+1)^0,w,c
 11705  004FC6  6E43               	movwf	(LCD_ButtonDraw@button+1)^0,c
 11706  004FC8  EC27  F007         	call	_LCD_ButtonDraw	;wreg free
 11707                           
 11708                           ;class/menu.c: 14:     LCD_ButtonDraw(&(g->btnParam));
 11709  004FCC  0E08               	movlw	8
 11710  004FCE  2444               	addwf	Menu_welcomeDraw@g^0,w,c
 11711  004FD0  6E42               	movwf	LCD_ButtonDraw@button^0,c
 11712  004FD2  0E00               	movlw	0
 11713  004FD4  2045               	addwfc	(Menu_welcomeDraw@g+1)^0,w,c
 11714  004FD6  6E43               	movwf	(LCD_ButtonDraw@button+1)^0,c
 11715  004FD8  EC27  F007         	call	_LCD_ButtonDraw	;wreg free
 11716                           
 11717                           ;class/menu.c: 15:     LCD_ButtonDraw(&(g->btnTurnOff));
 11718  004FDC  0E80               	movlw	128
 11719  004FDE  2444               	addwf	Menu_welcomeDraw@g^0,w,c
 11720  004FE0  6E42               	movwf	LCD_ButtonDraw@button^0,c
 11721  004FE2  0E00               	movlw	0
 11722  004FE4  2045               	addwfc	(Menu_welcomeDraw@g+1)^0,w,c
 11723  004FE6  6E43               	movwf	(LCD_ButtonDraw@button+1)^0,c
 11724  004FE8  EC27  F007         	call	_LCD_ButtonDraw	;wreg free
 11725  004FEC  0012               	return		;funcret
 11726  004FEE                     __end_of_Menu_welcomeDraw:
 11727                           	callstack 0
 11728                           
 11729 ;; *************** function _Menu_parametersDraw *****************
 11730 ;; Defined at:
 11731 ;;		line 21 in file "class/menu.c"
 11732 ;; Parameters:    Size  Location     Type
 11733 ;;  g               2   58[BANK0 ] PTR struct GameParameter
 11734 ;;		 -> g1(240), 
 11735 ;; Auto vars:     Size  Location     Type
 11736 ;;		None
 11737 ;; Return value:  Size  Location     Type
 11738 ;;                  1    wreg      void 
 11739 ;; Registers used:
 11740 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11741 ;; Tracked objects:
 11742 ;;		On entry : 0/0
 11743 ;;		On exit  : 0/0
 11744 ;;		Unchanged: 0/0
 11745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11746 ;;      Params:         0       2       0       0       0       0       0
 11747 ;;      Locals:         0       0       0       0       0       0       0
 11748 ;;      Temps:          0       0       0       0       0       0       0
 11749 ;;      Totals:         0       2       0       0       0       0       0
 11750 ;;Total ram usage:        2 bytes
 11751 ;; Hardware stack levels used: 1
 11752 ;; Hardware stack levels required when called: 7
 11753 ;; This function calls:
 11754 ;;		_LCD_ButtonDraw
 11755 ;;		_LCD_DrawText
 11756 ;;		_LCD_Fill
 11757 ;;		_LCD_SliderDraw
 11758 ;; This function is called by:
 11759 ;;		_displayController
 11760 ;; This function uses a non-reentrant model
 11761 ;;
 11762                           
 11763                           	psect	text49
 11764  003D26                     __ptext49:
 11765                           	callstack 0
 11766  003D26                     _Menu_parametersDraw:
 11767                           	callstack 19
 11768                           
 11769                           ;class/menu.c: 21: void Menu_parametersDraw(GameParameters* g);class/menu.c: 22: {;class
      +                          /menu.c: 23:     LCD_Fill(0b0000000000000000);
 11770                           
 11771                           ;incstack = 0
 11772  003D26  0E00               	movlw	0
 11773  003D28  6E13               	movwf	(LCD_Fill@color+1)^0,c
 11774  003D2A  0E00               	movlw	0
 11775  003D2C  6E12               	movwf	LCD_Fill@color^0,c
 11776  003D2E  EC98  F024         	call	_LCD_Fill	;wreg free
 11777                           
 11778                           ;class/menu.c: 24:     LCD_DrawText("PARAMETERS",&arialNarrow_12ptFontInfo,A_CENTER,120,
      +                          50,0b1111111111111111,0b0000000000000000);
 11779  003D32  0E9C               	movlw	low STR_11
 11780  003D34  6E20               	movwf	LCD_DrawText@msg^0,c
 11781  003D36  0E7F               	movlw	high STR_11
 11782  003D38  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
 11783  003D3A  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 11784  003D3C  6E22               	movwf	LCD_DrawText@font^0,c
 11785  003D3E  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 11786  003D40  6E23               	movwf	(LCD_DrawText@font+1)^0,c
 11787  003D42  0E02               	movlw	2
 11788  003D44  6E24               	movwf	LCD_DrawText@align^0,c
 11789  003D46  0E00               	movlw	0
 11790  003D48  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 11791  003D4A  0E78               	movlw	120
 11792  003D4C  6E25               	movwf	LCD_DrawText@posX^0,c
 11793  003D4E  0E00               	movlw	0
 11794  003D50  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
 11795  003D52  0E32               	movlw	50
 11796  003D54  6E27               	movwf	LCD_DrawText@posY^0,c
 11797  003D56  0EFF               	movlw	255
 11798  003D58  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
 11799  003D5A  6829               	setf	LCD_DrawText@color^0,c
 11800  003D5C  0E00               	movlw	0
 11801  003D5E  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
 11802  003D60  0E00               	movlw	0
 11803  003D62  6E2B               	movwf	LCD_DrawText@bg_color^0,c
 11804  003D64  EC82  F00F         	call	_LCD_DrawText	;wreg free
 11805                           
 11806                           ;class/menu.c: 25:     LCD_ButtonDraw(&(g->btnLeave));
 11807  003D68  0E50               	movlw	80
 11808  003D6A  0100               	movlb	0	; () banked
 11809  003D6C  25E4               	addwf	Menu_parametersDraw@g& (0+255),w,b
 11810  003D6E  6E42               	movwf	LCD_ButtonDraw@button^0,c
 11811  003D70  0E00               	movlw	0
 11812  003D72  21E5               	addwfc	(Menu_parametersDraw@g+1)& (0+255),w,b
 11813  003D74  6E43               	movwf	(LCD_ButtonDraw@button+1)^0,c
 11814  003D76  EC27  F007         	call	_LCD_ButtonDraw	;wreg free
 11815                           
 11816                           ;class/menu.c: 26:     g->sldBackLight.value=g->backlight;
 11817  003D7A  C0E4  FFD9         	movff	Menu_parametersDraw@g,fsr2l
 11818  003D7E  C0E5  FFDA         	movff	Menu_parametersDraw@g+1,fsr2h
 11819  003D82  0100               	movlb	0	; () banked
 11820  003D84  EE10 F0A9          	lfsr	1,169
 11821  003D88  51E4               	movf	Menu_parametersDraw@g& (0+255),w,b
 11822  003D8A  26E1               	addwf	fsr1l,f,c
 11823  003D8C  51E5               	movf	(Menu_parametersDraw@g+1)& (0+255),w,b
 11824  003D8E  22E2               	addwfc	fsr1h,f,c
 11825  003D90  CFDE FFE6          	movff	postinc2,postinc1
 11826  003D94  CFDD FFE5          	movff	postdec2,postdec1
 11827                           
 11828                           ; BSR set to: 0
 11829                           ;class/menu.c: 27:     LCD_SliderDraw(&(g->sldBackLight));
 11830  003D98  0E98               	movlw	152
 11831  003D9A  25E4               	addwf	Menu_parametersDraw@g& (0+255),w,b
 11832  003D9C  6E37               	movwf	LCD_SliderDraw@slider^0,c
 11833  003D9E  0E00               	movlw	0
 11834  003DA0  21E5               	addwfc	(Menu_parametersDraw@g+1)& (0+255),w,b
 11835  003DA2  6E38               	movwf	(LCD_SliderDraw@slider+1)^0,c
 11836  003DA4  EC24  F01F         	call	_LCD_SliderDraw	;wreg free
 11837                           
 11838                           ;class/menu.c: 28:     LCD_DrawText("LUMINOSITY",&arialNarrow_12ptFontInfo,A_LEFT,50,95,
      +                          0b1111111111111111,0b0000000000000000);
 11839  003DA8  0EA7               	movlw	low STR_12
 11840  003DAA  6E20               	movwf	LCD_DrawText@msg^0,c
 11841  003DAC  0E7F               	movlw	high STR_12
 11842  003DAE  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
 11843  003DB0  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 11844  003DB2  6E22               	movwf	LCD_DrawText@font^0,c
 11845  003DB4  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 11846  003DB6  6E23               	movwf	(LCD_DrawText@font+1)^0,c
 11847  003DB8  0E00               	movlw	0
 11848  003DBA  6E24               	movwf	LCD_DrawText@align^0,c
 11849  003DBC  0E00               	movlw	0
 11850  003DBE  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 11851  003DC0  0E32               	movlw	50
 11852  003DC2  6E25               	movwf	LCD_DrawText@posX^0,c
 11853  003DC4  0E00               	movlw	0
 11854  003DC6  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
 11855  003DC8  0E5F               	movlw	95
 11856  003DCA  6E27               	movwf	LCD_DrawText@posY^0,c
 11857  003DCC  0EFF               	movlw	255
 11858  003DCE  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
 11859  003DD0  6829               	setf	LCD_DrawText@color^0,c
 11860  003DD2  0E00               	movlw	0
 11861  003DD4  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
 11862  003DD6  0E00               	movlw	0
 11863  003DD8  6E2B               	movwf	LCD_DrawText@bg_color^0,c
 11864  003DDA  EC82  F00F         	call	_LCD_DrawText	;wreg free
 11865                           
 11866                           ;class/menu.c: 29:     g->sldLevel.value=g->level;
 11867  003DDE  0100               	movlb	0	; () banked
 11868  003DE0  EE20 F006          	lfsr	2,6
 11869  003DE4  51E4               	movf	Menu_parametersDraw@g& (0+255),w,b
 11870  003DE6  26D9               	addwf	fsr2l,f,c
 11871  003DE8  51E5               	movf	(Menu_parametersDraw@g+1)& (0+255),w,b
 11872  003DEA  22DA               	addwfc	fsr2h,f,c
 11873  003DEC  EE10 F0C2          	lfsr	1,194
 11874  003DF0  51E4               	movf	Menu_parametersDraw@g& (0+255),w,b
 11875  003DF2  26E1               	addwf	fsr1l,f,c
 11876  003DF4  51E5               	movf	(Menu_parametersDraw@g+1)& (0+255),w,b
 11877  003DF6  22E2               	addwfc	fsr1h,f,c
 11878  003DF8  CFDE FFE6          	movff	postinc2,postinc1
 11879  003DFC  CFDD FFE5          	movff	postdec2,postdec1
 11880                           
 11881                           ; BSR set to: 0
 11882                           ;class/menu.c: 30:     LCD_SliderDraw(&(g->sldLevel));
 11883  003E00  0EB1               	movlw	177
 11884  003E02  25E4               	addwf	Menu_parametersDraw@g& (0+255),w,b
 11885  003E04  6E37               	movwf	LCD_SliderDraw@slider^0,c
 11886  003E06  0E00               	movlw	0
 11887  003E08  21E5               	addwfc	(Menu_parametersDraw@g+1)& (0+255),w,b
 11888  003E0A  6E38               	movwf	(LCD_SliderDraw@slider+1)^0,c
 11889  003E0C  EC24  F01F         	call	_LCD_SliderDraw	;wreg free
 11890                           
 11891                           ;class/menu.c: 31:     LCD_DrawText("LEVEL",&arialNarrow_12ptFontInfo,A_LEFT,50,145,0b11
      +                          11111111111111,0b0000000000000000);
 11892  003E10  0EF3               	movlw	low STR_13
 11893  003E12  6E20               	movwf	LCD_DrawText@msg^0,c
 11894  003E14  0E7F               	movlw	high STR_13
 11895  003E16  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
 11896  003E18  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 11897  003E1A  6E22               	movwf	LCD_DrawText@font^0,c
 11898  003E1C  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 11899  003E1E  6E23               	movwf	(LCD_DrawText@font+1)^0,c
 11900  003E20  0E00               	movlw	0
 11901  003E22  6E24               	movwf	LCD_DrawText@align^0,c
 11902  003E24  0E00               	movlw	0
 11903  003E26  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 11904  003E28  0E32               	movlw	50
 11905  003E2A  6E25               	movwf	LCD_DrawText@posX^0,c
 11906  003E2C  0E00               	movlw	0
 11907  003E2E  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
 11908  003E30  0E91               	movlw	145
 11909  003E32  6E27               	movwf	LCD_DrawText@posY^0,c
 11910  003E34  0EFF               	movlw	255
 11911  003E36  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
 11912  003E38  6829               	setf	LCD_DrawText@color^0,c
 11913  003E3A  0E00               	movlw	0
 11914  003E3C  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
 11915  003E3E  0E00               	movlw	0
 11916  003E40  6E2B               	movwf	LCD_DrawText@bg_color^0,c
 11917  003E42  EC82  F00F         	call	_LCD_DrawText	;wreg free
 11918  003E46  0012               	return		;funcret
 11919  003E48                     __end_of_Menu_parametersDraw:
 11920                           	callstack 0
 11921                           
 11922 ;; *************** function _LCD_SliderDraw *****************
 11923 ;; Defined at:
 11924 ;;		line 371 in file "libraries/lcd_highlevel.c"
 11925 ;; Parameters:    Size  Location     Type
 11926 ;;  slider          2   54[COMRAM] PTR struct .
 11927 ;;		 -> g1(240), 
 11928 ;; Auto vars:     Size  Location     Type
 11929 ;;  y2              2   66[COMRAM] unsigned short 
 11930 ;;  y1              2   64[COMRAM] unsigned short 
 11931 ;;  x2              2   62[COMRAM] unsigned short 
 11932 ;;  x1              2   60[COMRAM] unsigned short 
 11933 ;; Return value:  Size  Location     Type
 11934 ;;                  1    wreg      void 
 11935 ;; Registers used:
 11936 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11937 ;; Tracked objects:
 11938 ;;		On entry : 3F/0
 11939 ;;		On exit  : 0/0
 11940 ;;		Unchanged: 0/0
 11941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11942 ;;      Params:         2       0       0       0       0       0       0
 11943 ;;      Locals:         8       0       0       0       0       0       0
 11944 ;;      Temps:          4       0       0       0       0       0       0
 11945 ;;      Totals:        14       0       0       0       0       0       0
 11946 ;;Total ram usage:       14 bytes
 11947 ;; Hardware stack levels used: 1
 11948 ;; Hardware stack levels required when called: 6
 11949 ;; This function calls:
 11950 ;;		_LCD_DrawRect
 11951 ;;		_LCD_SliderUpdate
 11952 ;; This function is called by:
 11953 ;;		_Menu_parametersDraw
 11954 ;; This function uses a non-reentrant model
 11955 ;;
 11956                           
 11957                           	psect	text50
 11958  003E48                     __ptext50:
 11959                           	callstack 0
 11960  003E48                     _LCD_SliderDraw:
 11961                           	callstack 19
 11962                           
 11963                           ; BSR set to: 0
 11964                           ;libraries/lcd_highlevel.c: 371: void LCD_SliderDraw(sld_t * slider);libraries/lcd_highl
      +                          evel.c: 372: {;libraries/lcd_highlevel.c: 373:   uint16_t x1,x2,y1,y2;;libraries/lcd_hig
      +                          hlevel.c: 375:   x1 = slider->posX;
 11965                           
 11966                           ;incstack = 0
 11967  003E48  C037  FFD9         	movff	LCD_SliderDraw@slider,fsr2l
 11968  003E4C  C038  FFDA         	movff	LCD_SliderDraw@slider+1,fsr2h
 11969  003E50  CFDE F03D          	movff	postinc2,LCD_SliderDraw@x1
 11970  003E54  CFDD F03E          	movff	postdec2,LCD_SliderDraw@x1+1
 11971                           
 11972                           ; BSR set to: 0
 11973                           ;libraries/lcd_highlevel.c: 376:   x2 = slider->posX + slider->width;
 11974  003E58  EE20 F004          	lfsr	2,4
 11975  003E5C  5037               	movf	LCD_SliderDraw@slider^0,w,c
 11976  003E5E  26D9               	addwf	fsr2l,f,c
 11977  003E60  5038               	movf	(LCD_SliderDraw@slider+1)^0,w,c
 11978  003E62  22DA               	addwfc	fsr2h,f,c
 11979  003E64  CFDE F039          	movff	postinc2,??_LCD_SliderDraw
 11980  003E68  CFDD F03A          	movff	postdec2,??_LCD_SliderDraw+1
 11981  003E6C  C037  FFD9         	movff	LCD_SliderDraw@slider,fsr2l
 11982  003E70  C038  FFDA         	movff	LCD_SliderDraw@slider+1,fsr2h
 11983  003E74  CFDE F03B          	movff	postinc2,??_LCD_SliderDraw+2
 11984  003E78  CFDD F03C          	movff	postdec2,??_LCD_SliderDraw+3
 11985  003E7C  5039               	movf	??_LCD_SliderDraw^0,w,c
 11986  003E7E  243B               	addwf	(??_LCD_SliderDraw+2)^0,w,c
 11987  003E80  6E3F               	movwf	LCD_SliderDraw@x2^0,c
 11988  003E82  503A               	movf	(??_LCD_SliderDraw+1)^0,w,c
 11989  003E84  203C               	addwfc	(??_LCD_SliderDraw+3)^0,w,c
 11990  003E86  6E40               	movwf	(LCD_SliderDraw@x2+1)^0,c
 11991                           
 11992                           ; BSR set to: 0
 11993                           ;libraries/lcd_highlevel.c: 377:   y1 = slider->posY;
 11994  003E88  EE20 F002          	lfsr	2,2
 11995  003E8C  5037               	movf	LCD_SliderDraw@slider^0,w,c
 11996  003E8E  26D9               	addwf	fsr2l,f,c
 11997  003E90  5038               	movf	(LCD_SliderDraw@slider+1)^0,w,c
 11998  003E92  22DA               	addwfc	fsr2h,f,c
 11999  003E94  CFDE F041          	movff	postinc2,LCD_SliderDraw@y1
 12000  003E98  CFDD F042          	movff	postdec2,LCD_SliderDraw@y1+1
 12001                           
 12002                           ; BSR set to: 0
 12003                           ;libraries/lcd_highlevel.c: 378:   y2 = slider->posY + slider->height;
 12004  003E9C  EE20 F006          	lfsr	2,6
 12005  003EA0  5037               	movf	LCD_SliderDraw@slider^0,w,c
 12006  003EA2  26D9               	addwf	fsr2l,f,c
 12007  003EA4  5038               	movf	(LCD_SliderDraw@slider+1)^0,w,c
 12008  003EA6  22DA               	addwfc	fsr2h,f,c
 12009  003EA8  CFDE F039          	movff	postinc2,??_LCD_SliderDraw
 12010  003EAC  CFDD F03A          	movff	postdec2,??_LCD_SliderDraw+1
 12011  003EB0  EE20 F002          	lfsr	2,2
 12012  003EB4  5037               	movf	LCD_SliderDraw@slider^0,w,c
 12013  003EB6  26D9               	addwf	fsr2l,f,c
 12014  003EB8  5038               	movf	(LCD_SliderDraw@slider+1)^0,w,c
 12015  003EBA  22DA               	addwfc	fsr2h,f,c
 12016  003EBC  CFDE F03B          	movff	postinc2,??_LCD_SliderDraw+2
 12017  003EC0  CFDD F03C          	movff	postdec2,??_LCD_SliderDraw+3
 12018  003EC4  5039               	movf	??_LCD_SliderDraw^0,w,c
 12019  003EC6  243B               	addwf	(??_LCD_SliderDraw+2)^0,w,c
 12020  003EC8  6E43               	movwf	LCD_SliderDraw@y2^0,c
 12021  003ECA  503A               	movf	(??_LCD_SliderDraw+1)^0,w,c
 12022  003ECC  203C               	addwfc	(??_LCD_SliderDraw+3)^0,w,c
 12023  003ECE  6E44               	movwf	(LCD_SliderDraw@y2+1)^0,c
 12024                           
 12025                           ; BSR set to: 0
 12026                           ;libraries/lcd_highlevel.c: 379:   LCD_DrawRect(x1, y1, x2, y2, 1, slider->bgColor);
 12027  003ED0  C03D  F012         	movff	LCD_SliderDraw@x1,LCD_DrawRect@posX1
 12028  003ED4  C03E  F013         	movff	LCD_SliderDraw@x1+1,LCD_DrawRect@posX1+1
 12029  003ED8  C041  F014         	movff	LCD_SliderDraw@y1,LCD_DrawRect@posY1
 12030  003EDC  C042  F015         	movff	LCD_SliderDraw@y1+1,LCD_DrawRect@posY1+1
 12031  003EE0  C03F  F016         	movff	LCD_SliderDraw@x2,LCD_DrawRect@posX2
 12032  003EE4  C040  F017         	movff	LCD_SliderDraw@x2+1,LCD_DrawRect@posX2+1
 12033  003EE8  C043  F018         	movff	LCD_SliderDraw@y2,LCD_DrawRect@posY2
 12034  003EEC  C044  F019         	movff	LCD_SliderDraw@y2+1,LCD_DrawRect@posY2+1
 12035  003EF0  0E01               	movlw	1
 12036  003EF2  6E1A               	movwf	LCD_DrawRect@fill^0,c
 12037  003EF4  EE20 F00A          	lfsr	2,10
 12038  003EF8  5037               	movf	LCD_SliderDraw@slider^0,w,c
 12039  003EFA  26D9               	addwf	fsr2l,f,c
 12040  003EFC  5038               	movf	(LCD_SliderDraw@slider+1)^0,w,c
 12041  003EFE  22DA               	addwfc	fsr2h,f,c
 12042  003F00  CFDE F01B          	movff	postinc2,LCD_DrawRect@color
 12043  003F04  CFDD F01C          	movff	postdec2,LCD_DrawRect@color+1
 12044  003F08  EC31  F013         	call	_LCD_DrawRect	;wreg free
 12045                           
 12046                           ;libraries/lcd_highlevel.c: 380:   LCD_DrawRect(x1, y1, x2, y2, 0, slider->borderColor);
 12047  003F0C  C03D  F012         	movff	LCD_SliderDraw@x1,LCD_DrawRect@posX1
 12048  003F10  C03E  F013         	movff	LCD_SliderDraw@x1+1,LCD_DrawRect@posX1+1
 12049  003F14  C041  F014         	movff	LCD_SliderDraw@y1,LCD_DrawRect@posY1
 12050  003F18  C042  F015         	movff	LCD_SliderDraw@y1+1,LCD_DrawRect@posY1+1
 12051  003F1C  C03F  F016         	movff	LCD_SliderDraw@x2,LCD_DrawRect@posX2
 12052  003F20  C040  F017         	movff	LCD_SliderDraw@x2+1,LCD_DrawRect@posX2+1
 12053  003F24  C043  F018         	movff	LCD_SliderDraw@y2,LCD_DrawRect@posY2
 12054  003F28  C044  F019         	movff	LCD_SliderDraw@y2+1,LCD_DrawRect@posY2+1
 12055  003F2C  0E00               	movlw	0
 12056  003F2E  6E1A               	movwf	LCD_DrawRect@fill^0,c
 12057  003F30  EE20 F00C          	lfsr	2,12
 12058  003F34  5037               	movf	LCD_SliderDraw@slider^0,w,c
 12059  003F36  26D9               	addwf	fsr2l,f,c
 12060  003F38  5038               	movf	(LCD_SliderDraw@slider+1)^0,w,c
 12061  003F3A  22DA               	addwfc	fsr2h,f,c
 12062  003F3C  CFDE F01B          	movff	postinc2,LCD_DrawRect@color
 12063  003F40  CFDD F01C          	movff	postdec2,LCD_DrawRect@color+1
 12064  003F44  EC31  F013         	call	_LCD_DrawRect	;wreg free
 12065                           
 12066                           ;libraries/lcd_highlevel.c: 381:   LCD_SliderUpdate(slider);
 12067  003F48  C037  F027         	movff	LCD_SliderDraw@slider,LCD_SliderUpdate@slider
 12068  003F4C  C038  F028         	movff	LCD_SliderDraw@slider+1,LCD_SliderUpdate@slider+1
 12069  003F50  EC8A  F00B         	call	_LCD_SliderUpdate	;wreg free
 12070  003F54  0012               	return		;funcret
 12071  003F56                     __end_of_LCD_SliderDraw:
 12072                           	callstack 0
 12073                           
 12074 ;; *************** function _LCD_SliderUpdate *****************
 12075 ;; Defined at:
 12076 ;;		line 319 in file "libraries/lcd_highlevel.c"
 12077 ;; Parameters:    Size  Location     Type
 12078 ;;  slider          2   38[COMRAM] PTR struct .
 12079 ;;		 -> g1(240), 
 12080 ;; Auto vars:     Size  Location     Type
 12081 ;;  x1              2   52[COMRAM] unsigned short 
 12082 ;;  y2              2   50[COMRAM] unsigned short 
 12083 ;;  y1              2   48[COMRAM] unsigned short 
 12084 ;;  x2              2   46[COMRAM] unsigned short 
 12085 ;; Return value:  Size  Location     Type
 12086 ;;                  1    wreg      void 
 12087 ;; Registers used:
 12088 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12089 ;; Tracked objects:
 12090 ;;		On entry : 0/0
 12091 ;;		On exit  : 0/0
 12092 ;;		Unchanged: 0/0
 12093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12094 ;;      Params:         2       0       0       0       0       0       0
 12095 ;;      Locals:         8       0       0       0       0       0       0
 12096 ;;      Temps:          6       0       0       0       0       0       0
 12097 ;;      Totals:        16       0       0       0       0       0       0
 12098 ;;Total ram usage:       16 bytes
 12099 ;; Hardware stack levels used: 1
 12100 ;; Hardware stack levels required when called: 5
 12101 ;; This function calls:
 12102 ;;		_LCD_DrawRect
 12103 ;;		___lwdiv
 12104 ;;		___wmul
 12105 ;; This function is called by:
 12106 ;;		_LCD_SliderDraw
 12107 ;;		_gameControllerController
 12108 ;; This function uses a non-reentrant model
 12109 ;;
 12110                           
 12111                           	psect	text51
 12112  001714                     __ptext51:
 12113                           	callstack 0
 12114  001714                     _LCD_SliderUpdate:
 12115                           	callstack 21
 12116                           
 12117                           ;libraries/lcd_highlevel.c: 319: void LCD_SliderUpdate(sld_t * slider);libraries/lcd_hig
      +                          hlevel.c: 320: {;libraries/lcd_highlevel.c: 321:   uint16_t x1,x2,y1,y2;;libraries/lcd_h
      +                          ighlevel.c: 325:   if(slider->cursorWidth != 0)
 12118                           
 12119                           ;incstack = 0
 12120  001714  EE20 F00E          	lfsr	2,14
 12121  001718  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12122  00171A  26D9               	addwf	fsr2l,f,c
 12123  00171C  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12124  00171E  22DA               	addwfc	fsr2h,f,c
 12125  001720  50DE               	movf	postinc2,w,c
 12126  001722  10DE               	iorwf	postinc2,w,c
 12127  001724  B4D8               	btfsc	status,2,c
 12128  001726  D05C               	goto	l6108
 12129                           
 12130                           ;libraries/lcd_highlevel.c: 326:   {;libraries/lcd_highlevel.c: 327:     x1 = slider->po
      +                          sX + 1 + (((slider->width-slider->cursorWidth) * slider->oldValue)/ slider->steps);
 12131  001728  C027  FFD9         	movff	LCD_SliderUpdate@slider,fsr2l
 12132  00172C  C028  FFDA         	movff	LCD_SliderUpdate@slider+1,fsr2h
 12133  001730  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12134  001734  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12135  001738  EE20 F00E          	lfsr	2,14
 12136  00173C  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12137  00173E  26D9               	addwf	fsr2l,f,c
 12138  001740  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12139  001742  22DA               	addwfc	fsr2h,f,c
 12140  001744  CFDE F02B          	movff	postinc2,??_LCD_SliderUpdate+2
 12141  001748  CFDD F02C          	movff	postdec2,??_LCD_SliderUpdate+3
 12142  00174C  EE20 F004          	lfsr	2,4
 12143  001750  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12144  001752  26D9               	addwf	fsr2l,f,c
 12145  001754  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12146  001756  22DA               	addwfc	fsr2h,f,c
 12147  001758  CFDE F02D          	movff	postinc2,??_LCD_SliderUpdate+4
 12148  00175C  CFDD F02E          	movff	postdec2,??_LCD_SliderUpdate+5
 12149  001760  502B               	movf	(??_LCD_SliderUpdate+2)^0,w,c
 12150  001762  5C2D               	subwf	(??_LCD_SliderUpdate+4)^0,w,c
 12151  001764  6E1A               	movwf	___wmul@multiplier^0,c
 12152  001766  502C               	movf	(??_LCD_SliderUpdate+3)^0,w,c
 12153  001768  582E               	subwfb	(??_LCD_SliderUpdate+5)^0,w,c
 12154  00176A  6E1B               	movwf	(___wmul@multiplier+1)^0,c
 12155  00176C  EE20 F013          	lfsr	2,19
 12156  001770  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12157  001772  26D9               	addwf	fsr2l,f,c
 12158  001774  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12159  001776  22DA               	addwfc	fsr2h,f,c
 12160  001778  CFDE F01C          	movff	postinc2,___wmul@multiplicand
 12161  00177C  CFDD F01D          	movff	postdec2,___wmul@multiplicand+1
 12162  001780  EC75  F02C         	call	___wmul	;wreg free
 12163  001784  C01A  F020         	movff	?___wmul,___lwdiv@dividend
 12164  001788  C01B  F021         	movff	?___wmul+1,___lwdiv@dividend+1
 12165  00178C  EE20 F015          	lfsr	2,21
 12166  001790  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12167  001792  26D9               	addwf	fsr2l,f,c
 12168  001794  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12169  001796  22DA               	addwfc	fsr2h,f,c
 12170  001798  CFDE F022          	movff	postinc2,___lwdiv@divisor
 12171  00179C  CFDD F023          	movff	postdec2,___lwdiv@divisor+1
 12172  0017A0  EC16  F02A         	call	___lwdiv	;wreg free
 12173  0017A4  5029               	movf	??_LCD_SliderUpdate^0,w,c
 12174  0017A6  2620               	addwf	?___lwdiv^0,f,c
 12175  0017A8  502A               	movf	(??_LCD_SliderUpdate+1)^0,w,c
 12176  0017AA  2221               	addwfc	(?___lwdiv+1)^0,f,c
 12177  0017AC  0E01               	movlw	1
 12178  0017AE  2420               	addwf	?___lwdiv^0,w,c
 12179  0017B0  6E35               	movwf	LCD_SliderUpdate@x1^0,c
 12180  0017B2  0E00               	movlw	0
 12181  0017B4  2021               	addwfc	(?___lwdiv+1)^0,w,c
 12182  0017B6  6E36               	movwf	(LCD_SliderUpdate@x1+1)^0,c
 12183                           
 12184                           ;libraries/lcd_highlevel.c: 328:     x2 = x1 + slider->cursorWidth-2;
 12185  0017B8  EE20 F00E          	lfsr	2,14
 12186  0017BC  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12187  0017BE  26D9               	addwf	fsr2l,f,c
 12188  0017C0  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12189  0017C2  22DA               	addwfc	fsr2h,f,c
 12190  0017C4  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12191  0017C8  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12192  0017CC  5035               	movf	LCD_SliderUpdate@x1^0,w,c
 12193  0017CE  2629               	addwf	??_LCD_SliderUpdate^0,f,c
 12194  0017D0  5036               	movf	(LCD_SliderUpdate@x1+1)^0,w,c
 12195  0017D2  222A               	addwfc	(??_LCD_SliderUpdate+1)^0,f,c
 12196  0017D4  0EFE               	movlw	254
 12197  0017D6  2429               	addwf	??_LCD_SliderUpdate^0,w,c
 12198  0017D8  6E2F               	movwf	LCD_SliderUpdate@x2^0,c
 12199  0017DA  0EFF               	movlw	255
 12200  0017DC  202A               	addwfc	(??_LCD_SliderUpdate+1)^0,w,c
 12201  0017DE  D045               	goto	L15
 12202  0017E0                     l6108:
 12203                           
 12204                           ;libraries/lcd_highlevel.c: 333:   {;libraries/lcd_highlevel.c: 334:     x1 = slider->po
      +                          sX + 1;
 12205  0017E0  C027  FFD9         	movff	LCD_SliderUpdate@slider,fsr2l
 12206  0017E4  C028  FFDA         	movff	LCD_SliderUpdate@slider+1,fsr2h
 12207  0017E8  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12208  0017EC  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12209  0017F0  0E01               	movlw	1
 12210  0017F2  2429               	addwf	??_LCD_SliderUpdate^0,w,c
 12211  0017F4  6E35               	movwf	LCD_SliderUpdate@x1^0,c
 12212  0017F6  0E00               	movlw	0
 12213  0017F8  202A               	addwfc	(??_LCD_SliderUpdate+1)^0,w,c
 12214  0017FA  6E36               	movwf	(LCD_SliderUpdate@x1+1)^0,c
 12215                           
 12216                           ;libraries/lcd_highlevel.c: 335:     x2 = slider->posX - 1 + ((slider->width * slider->o
      +                          ldValue)/ slider->steps);
 12217  0017FC  C027  FFD9         	movff	LCD_SliderUpdate@slider,fsr2l
 12218  001800  C028  FFDA         	movff	LCD_SliderUpdate@slider+1,fsr2h
 12219  001804  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12220  001808  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12221  00180C  EE20 F004          	lfsr	2,4
 12222  001810  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12223  001812  26D9               	addwf	fsr2l,f,c
 12224  001814  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12225  001816  22DA               	addwfc	fsr2h,f,c
 12226  001818  CFDE F01A          	movff	postinc2,___wmul@multiplier
 12227  00181C  CFDD F01B          	movff	postdec2,___wmul@multiplier+1
 12228  001820  EE20 F013          	lfsr	2,19
 12229  001824  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12230  001826  26D9               	addwf	fsr2l,f,c
 12231  001828  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12232  00182A  22DA               	addwfc	fsr2h,f,c
 12233  00182C  CFDE F01C          	movff	postinc2,___wmul@multiplicand
 12234  001830  CFDD F01D          	movff	postdec2,___wmul@multiplicand+1
 12235  001834  EC75  F02C         	call	___wmul	;wreg free
 12236  001838  C01A  F020         	movff	?___wmul,___lwdiv@dividend
 12237  00183C  C01B  F021         	movff	?___wmul+1,___lwdiv@dividend+1
 12238  001840  EE20 F015          	lfsr	2,21
 12239  001844  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12240  001846  26D9               	addwf	fsr2l,f,c
 12241  001848  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12242  00184A  22DA               	addwfc	fsr2h,f,c
 12243  00184C  CFDE F022          	movff	postinc2,___lwdiv@divisor
 12244  001850  CFDD F023          	movff	postdec2,___lwdiv@divisor+1
 12245  001854  EC16  F02A         	call	___lwdiv	;wreg free
 12246  001858  5029               	movf	??_LCD_SliderUpdate^0,w,c
 12247  00185A  2620               	addwf	?___lwdiv^0,f,c
 12248  00185C  502A               	movf	(??_LCD_SliderUpdate+1)^0,w,c
 12249  00185E  2221               	addwfc	(?___lwdiv+1)^0,f,c
 12250  001860  0EFF               	movlw	255
 12251  001862  2420               	addwf	?___lwdiv^0,w,c
 12252  001864  6E2F               	movwf	LCD_SliderUpdate@x2^0,c
 12253  001866  0EFF               	movlw	255
 12254  001868  2021               	addwfc	(?___lwdiv+1)^0,w,c
 12255  00186A                     L15:
 12256  00186A  6E30               	movwf	(LCD_SliderUpdate@x2+1)^0,c
 12257                           
 12258                           ;libraries/lcd_highlevel.c: 336:     y1 = slider->posY + 2;
 12259  00186C  EE20 F002          	lfsr	2,2
 12260  001870  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12261  001872  26D9               	addwf	fsr2l,f,c
 12262  001874  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12263  001876  22DA               	addwfc	fsr2h,f,c
 12264  001878  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12265  00187C  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12266  001880  0E02               	movlw	2
 12267  001882  2429               	addwf	??_LCD_SliderUpdate^0,w,c
 12268  001884  6E31               	movwf	LCD_SliderUpdate@y1^0,c
 12269  001886  0E00               	movlw	0
 12270  001888  202A               	addwfc	(??_LCD_SliderUpdate+1)^0,w,c
 12271  00188A  6E32               	movwf	(LCD_SliderUpdate@y1+1)^0,c
 12272                           
 12273                           ;libraries/lcd_highlevel.c: 337:     y2 = slider->posY + slider->height - 2;
 12274  00188C  EE20 F006          	lfsr	2,6
 12275  001890  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12276  001892  26D9               	addwf	fsr2l,f,c
 12277  001894  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12278  001896  22DA               	addwfc	fsr2h,f,c
 12279  001898  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12280  00189C  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12281  0018A0  EE20 F002          	lfsr	2,2
 12282  0018A4  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12283  0018A6  26D9               	addwf	fsr2l,f,c
 12284  0018A8  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12285  0018AA  22DA               	addwfc	fsr2h,f,c
 12286  0018AC  CFDE F02B          	movff	postinc2,??_LCD_SliderUpdate+2
 12287  0018B0  CFDD F02C          	movff	postdec2,??_LCD_SliderUpdate+3
 12288  0018B4  5029               	movf	??_LCD_SliderUpdate^0,w,c
 12289  0018B6  262B               	addwf	(??_LCD_SliderUpdate+2)^0,f,c
 12290  0018B8  502A               	movf	(??_LCD_SliderUpdate+1)^0,w,c
 12291  0018BA  222C               	addwfc	(??_LCD_SliderUpdate+3)^0,f,c
 12292  0018BC  0EFE               	movlw	254
 12293  0018BE  242B               	addwf	(??_LCD_SliderUpdate+2)^0,w,c
 12294  0018C0  6E33               	movwf	LCD_SliderUpdate@y2^0,c
 12295  0018C2  0EFF               	movlw	255
 12296  0018C4  202C               	addwfc	(??_LCD_SliderUpdate+3)^0,w,c
 12297  0018C6  6E34               	movwf	(LCD_SliderUpdate@y2+1)^0,c
 12298                           
 12299                           ;libraries/lcd_highlevel.c: 339:   LCD_DrawRect(x1,
 12300  0018C8  C035  F012         	movff	LCD_SliderUpdate@x1,LCD_DrawRect@posX1
 12301  0018CC  C036  F013         	movff	LCD_SliderUpdate@x1+1,LCD_DrawRect@posX1+1
 12302  0018D0  C031  F014         	movff	LCD_SliderUpdate@y1,LCD_DrawRect@posY1
 12303  0018D4  C032  F015         	movff	LCD_SliderUpdate@y1+1,LCD_DrawRect@posY1+1
 12304  0018D8  C02F  F016         	movff	LCD_SliderUpdate@x2,LCD_DrawRect@posX2
 12305  0018DC  C030  F017         	movff	LCD_SliderUpdate@x2+1,LCD_DrawRect@posX2+1
 12306  0018E0  C033  F018         	movff	LCD_SliderUpdate@y2,LCD_DrawRect@posY2
 12307  0018E4  C034  F019         	movff	LCD_SliderUpdate@y2+1,LCD_DrawRect@posY2+1
 12308  0018E8  0E01               	movlw	1
 12309  0018EA  6E1A               	movwf	LCD_DrawRect@fill^0,c
 12310  0018EC  EE20 F00A          	lfsr	2,10
 12311  0018F0  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12312  0018F2  26D9               	addwf	fsr2l,f,c
 12313  0018F4  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12314  0018F6  22DA               	addwfc	fsr2h,f,c
 12315  0018F8  CFDE F01B          	movff	postinc2,LCD_DrawRect@color
 12316  0018FC  CFDD F01C          	movff	postdec2,LCD_DrawRect@color+1
 12317  001900  EC31  F013         	call	_LCD_DrawRect	;wreg free
 12318                           
 12319                           ;libraries/lcd_highlevel.c: 344:   slider->oldValue = slider->value;
 12320  001904  EE20 F011          	lfsr	2,17
 12321  001908  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12322  00190A  26D9               	addwf	fsr2l,f,c
 12323  00190C  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12324  00190E  22DA               	addwfc	fsr2h,f,c
 12325  001910  EE10 F013          	lfsr	1,19
 12326  001914  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12327  001916  26E1               	addwf	fsr1l,f,c
 12328  001918  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12329  00191A  22E2               	addwfc	fsr1h,f,c
 12330  00191C  CFDE FFE6          	movff	postinc2,postinc1
 12331  001920  CFDD FFE5          	movff	postdec2,postdec1
 12332                           
 12333                           ;libraries/lcd_highlevel.c: 347:   if(slider->cursorWidth == 0)
 12334  001924  EE20 F00E          	lfsr	2,14
 12335  001928  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12336  00192A  26D9               	addwf	fsr2l,f,c
 12337  00192C  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12338  00192E  22DA               	addwfc	fsr2h,f,c
 12339  001930  50DE               	movf	postinc2,w,c
 12340  001932  10DE               	iorwf	postinc2,w,c
 12341  001934  A4D8               	btfss	status,2,c
 12342  001936  D046               	goto	l6130
 12343                           
 12344                           ;libraries/lcd_highlevel.c: 348:   {;libraries/lcd_highlevel.c: 349:     x1 = slider->po
      +                          sX + 1;
 12345  001938  C027  FFD9         	movff	LCD_SliderUpdate@slider,fsr2l
 12346  00193C  C028  FFDA         	movff	LCD_SliderUpdate@slider+1,fsr2h
 12347  001940  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12348  001944  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12349  001948  0E01               	movlw	1
 12350  00194A  2429               	addwf	??_LCD_SliderUpdate^0,w,c
 12351  00194C  6E35               	movwf	LCD_SliderUpdate@x1^0,c
 12352  00194E  0E00               	movlw	0
 12353  001950  202A               	addwfc	(??_LCD_SliderUpdate+1)^0,w,c
 12354  001952  6E36               	movwf	(LCD_SliderUpdate@x1+1)^0,c
 12355                           
 12356                           ;libraries/lcd_highlevel.c: 350:     x2 = slider->posX - 1 + ((slider->width * slider->v
      +                          alue)/ slider->steps);
 12357  001954  C027  FFD9         	movff	LCD_SliderUpdate@slider,fsr2l
 12358  001958  C028  FFDA         	movff	LCD_SliderUpdate@slider+1,fsr2h
 12359  00195C  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12360  001960  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12361  001964  EE20 F004          	lfsr	2,4
 12362  001968  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12363  00196A  26D9               	addwf	fsr2l,f,c
 12364  00196C  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12365  00196E  22DA               	addwfc	fsr2h,f,c
 12366  001970  CFDE F01A          	movff	postinc2,___wmul@multiplier
 12367  001974  CFDD F01B          	movff	postdec2,___wmul@multiplier+1
 12368  001978  EE20 F011          	lfsr	2,17
 12369  00197C  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12370  00197E  26D9               	addwf	fsr2l,f,c
 12371  001980  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12372  001982  22DA               	addwfc	fsr2h,f,c
 12373  001984  CFDE F01C          	movff	postinc2,___wmul@multiplicand
 12374  001988  CFDD F01D          	movff	postdec2,___wmul@multiplicand+1
 12375  00198C  EC75  F02C         	call	___wmul	;wreg free
 12376  001990  C01A  F020         	movff	?___wmul,___lwdiv@dividend
 12377  001994  C01B  F021         	movff	?___wmul+1,___lwdiv@dividend+1
 12378  001998  EE20 F015          	lfsr	2,21
 12379  00199C  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12380  00199E  26D9               	addwf	fsr2l,f,c
 12381  0019A0  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12382  0019A2  22DA               	addwfc	fsr2h,f,c
 12383  0019A4  CFDE F022          	movff	postinc2,___lwdiv@divisor
 12384  0019A8  CFDD F023          	movff	postdec2,___lwdiv@divisor+1
 12385  0019AC  EC16  F02A         	call	___lwdiv	;wreg free
 12386  0019B0  5029               	movf	??_LCD_SliderUpdate^0,w,c
 12387  0019B2  2620               	addwf	?___lwdiv^0,f,c
 12388  0019B4  502A               	movf	(??_LCD_SliderUpdate+1)^0,w,c
 12389  0019B6  2221               	addwfc	(?___lwdiv+1)^0,f,c
 12390  0019B8  0EFF               	movlw	255
 12391  0019BA  2420               	addwf	?___lwdiv^0,w,c
 12392  0019BC  6E2F               	movwf	LCD_SliderUpdate@x2^0,c
 12393  0019BE  0EFF               	movlw	255
 12394  0019C0  2021               	addwfc	(?___lwdiv+1)^0,w,c
 12395  0019C2  D05B               	goto	L16
 12396  0019C4                     l6130:
 12397                           
 12398                           ;libraries/lcd_highlevel.c: 357:   {;libraries/lcd_highlevel.c: 358:     x1 = slider->po
      +                          sX + 1 + (((slider->width-slider->cursorWidth) * slider->value)/ slider->steps);
 12399  0019C4  C027  FFD9         	movff	LCD_SliderUpdate@slider,fsr2l
 12400  0019C8  C028  FFDA         	movff	LCD_SliderUpdate@slider+1,fsr2h
 12401  0019CC  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12402  0019D0  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12403  0019D4  EE20 F00E          	lfsr	2,14
 12404  0019D8  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12405  0019DA  26D9               	addwf	fsr2l,f,c
 12406  0019DC  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12407  0019DE  22DA               	addwfc	fsr2h,f,c
 12408  0019E0  CFDE F02B          	movff	postinc2,??_LCD_SliderUpdate+2
 12409  0019E4  CFDD F02C          	movff	postdec2,??_LCD_SliderUpdate+3
 12410  0019E8  EE20 F004          	lfsr	2,4
 12411  0019EC  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12412  0019EE  26D9               	addwf	fsr2l,f,c
 12413  0019F0  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12414  0019F2  22DA               	addwfc	fsr2h,f,c
 12415  0019F4  CFDE F02D          	movff	postinc2,??_LCD_SliderUpdate+4
 12416  0019F8  CFDD F02E          	movff	postdec2,??_LCD_SliderUpdate+5
 12417  0019FC  502B               	movf	(??_LCD_SliderUpdate+2)^0,w,c
 12418  0019FE  5C2D               	subwf	(??_LCD_SliderUpdate+4)^0,w,c
 12419  001A00  6E1A               	movwf	___wmul@multiplier^0,c
 12420  001A02  502C               	movf	(??_LCD_SliderUpdate+3)^0,w,c
 12421  001A04  582E               	subwfb	(??_LCD_SliderUpdate+5)^0,w,c
 12422  001A06  6E1B               	movwf	(___wmul@multiplier+1)^0,c
 12423  001A08  EE20 F011          	lfsr	2,17
 12424  001A0C  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12425  001A0E  26D9               	addwf	fsr2l,f,c
 12426  001A10  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12427  001A12  22DA               	addwfc	fsr2h,f,c
 12428  001A14  CFDE F01C          	movff	postinc2,___wmul@multiplicand
 12429  001A18  CFDD F01D          	movff	postdec2,___wmul@multiplicand+1
 12430  001A1C  EC75  F02C         	call	___wmul	;wreg free
 12431  001A20  C01A  F020         	movff	?___wmul,___lwdiv@dividend
 12432  001A24  C01B  F021         	movff	?___wmul+1,___lwdiv@dividend+1
 12433  001A28  EE20 F015          	lfsr	2,21
 12434  001A2C  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12435  001A2E  26D9               	addwf	fsr2l,f,c
 12436  001A30  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12437  001A32  22DA               	addwfc	fsr2h,f,c
 12438  001A34  CFDE F022          	movff	postinc2,___lwdiv@divisor
 12439  001A38  CFDD F023          	movff	postdec2,___lwdiv@divisor+1
 12440  001A3C  EC16  F02A         	call	___lwdiv	;wreg free
 12441  001A40  5029               	movf	??_LCD_SliderUpdate^0,w,c
 12442  001A42  2620               	addwf	?___lwdiv^0,f,c
 12443  001A44  502A               	movf	(??_LCD_SliderUpdate+1)^0,w,c
 12444  001A46  2221               	addwfc	(?___lwdiv+1)^0,f,c
 12445  001A48  0E01               	movlw	1
 12446  001A4A  2420               	addwf	?___lwdiv^0,w,c
 12447  001A4C  6E35               	movwf	LCD_SliderUpdate@x1^0,c
 12448  001A4E  0E00               	movlw	0
 12449  001A50  2021               	addwfc	(?___lwdiv+1)^0,w,c
 12450  001A52  6E36               	movwf	(LCD_SliderUpdate@x1+1)^0,c
 12451                           
 12452                           ;libraries/lcd_highlevel.c: 359:     x2 = x1 + slider->cursorWidth-2;
 12453  001A54  EE20 F00E          	lfsr	2,14
 12454  001A58  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12455  001A5A  26D9               	addwf	fsr2l,f,c
 12456  001A5C  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12457  001A5E  22DA               	addwfc	fsr2h,f,c
 12458  001A60  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12459  001A64  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12460  001A68  5035               	movf	LCD_SliderUpdate@x1^0,w,c
 12461  001A6A  2629               	addwf	??_LCD_SliderUpdate^0,f,c
 12462  001A6C  5036               	movf	(LCD_SliderUpdate@x1+1)^0,w,c
 12463  001A6E  222A               	addwfc	(??_LCD_SliderUpdate+1)^0,f,c
 12464  001A70  0EFE               	movlw	254
 12465  001A72  2429               	addwf	??_LCD_SliderUpdate^0,w,c
 12466  001A74  6E2F               	movwf	LCD_SliderUpdate@x2^0,c
 12467  001A76  0EFF               	movlw	255
 12468  001A78  202A               	addwfc	(??_LCD_SliderUpdate+1)^0,w,c
 12469  001A7A                     L16:
 12470  001A7A  6E30               	movwf	(LCD_SliderUpdate@x2+1)^0,c
 12471                           
 12472                           ;libraries/lcd_highlevel.c: 360:     y1 = slider->posY + 2;
 12473  001A7C  EE20 F002          	lfsr	2,2
 12474  001A80  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12475  001A82  26D9               	addwf	fsr2l,f,c
 12476  001A84  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12477  001A86  22DA               	addwfc	fsr2h,f,c
 12478  001A88  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12479  001A8C  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12480  001A90  0E02               	movlw	2
 12481  001A92  2429               	addwf	??_LCD_SliderUpdate^0,w,c
 12482  001A94  6E31               	movwf	LCD_SliderUpdate@y1^0,c
 12483  001A96  0E00               	movlw	0
 12484  001A98  202A               	addwfc	(??_LCD_SliderUpdate+1)^0,w,c
 12485  001A9A  6E32               	movwf	(LCD_SliderUpdate@y1+1)^0,c
 12486                           
 12487                           ;libraries/lcd_highlevel.c: 361:     y2 = slider->posY + slider->height - 2;
 12488  001A9C  EE20 F006          	lfsr	2,6
 12489  001AA0  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12490  001AA2  26D9               	addwf	fsr2l,f,c
 12491  001AA4  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12492  001AA6  22DA               	addwfc	fsr2h,f,c
 12493  001AA8  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12494  001AAC  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12495  001AB0  EE20 F002          	lfsr	2,2
 12496  001AB4  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12497  001AB6  26D9               	addwf	fsr2l,f,c
 12498  001AB8  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12499  001ABA  22DA               	addwfc	fsr2h,f,c
 12500  001ABC  CFDE F02B          	movff	postinc2,??_LCD_SliderUpdate+2
 12501  001AC0  CFDD F02C          	movff	postdec2,??_LCD_SliderUpdate+3
 12502  001AC4  5029               	movf	??_LCD_SliderUpdate^0,w,c
 12503  001AC6  262B               	addwf	(??_LCD_SliderUpdate+2)^0,f,c
 12504  001AC8  502A               	movf	(??_LCD_SliderUpdate+1)^0,w,c
 12505  001ACA  222C               	addwfc	(??_LCD_SliderUpdate+3)^0,f,c
 12506  001ACC  0EFE               	movlw	254
 12507  001ACE  242B               	addwf	(??_LCD_SliderUpdate+2)^0,w,c
 12508  001AD0  6E33               	movwf	LCD_SliderUpdate@y2^0,c
 12509  001AD2  0EFF               	movlw	255
 12510  001AD4  202C               	addwfc	(??_LCD_SliderUpdate+3)^0,w,c
 12511  001AD6  6E34               	movwf	(LCD_SliderUpdate@y2+1)^0,c
 12512                           
 12513                           ;libraries/lcd_highlevel.c: 363:   LCD_DrawRect(x1, y1, x2, y2, 1, slider->sldColor);
 12514  001AD8  C035  F012         	movff	LCD_SliderUpdate@x1,LCD_DrawRect@posX1
 12515  001ADC  C036  F013         	movff	LCD_SliderUpdate@x1+1,LCD_DrawRect@posX1+1
 12516  001AE0  C031  F014         	movff	LCD_SliderUpdate@y1,LCD_DrawRect@posY1
 12517  001AE4  C032  F015         	movff	LCD_SliderUpdate@y1+1,LCD_DrawRect@posY1+1
 12518  001AE8  C02F  F016         	movff	LCD_SliderUpdate@x2,LCD_DrawRect@posX2
 12519  001AEC  C030  F017         	movff	LCD_SliderUpdate@x2+1,LCD_DrawRect@posX2+1
 12520  001AF0  C033  F018         	movff	LCD_SliderUpdate@y2,LCD_DrawRect@posY2
 12521  001AF4  C034  F019         	movff	LCD_SliderUpdate@y2+1,LCD_DrawRect@posY2+1
 12522  001AF8  0E01               	movlw	1
 12523  001AFA  6E1A               	movwf	LCD_DrawRect@fill^0,c
 12524  001AFC  EE20 F008          	lfsr	2,8
 12525  001B00  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12526  001B02  26D9               	addwf	fsr2l,f,c
 12527  001B04  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12528  001B06  22DA               	addwfc	fsr2h,f,c
 12529  001B08  CFDE F01B          	movff	postinc2,LCD_DrawRect@color
 12530  001B0C  CFDD F01C          	movff	postdec2,LCD_DrawRect@color+1
 12531  001B10  EC31  F013         	call	_LCD_DrawRect	;wreg free
 12532  001B14  0012               	return		;funcret
 12533  001B16                     __end_of_LCD_SliderUpdate:
 12534                           	callstack 0
 12535                           
 12536 ;; *************** function _Menu_endGame *****************
 12537 ;; Defined at:
 12538 ;;		line 51 in file "class/menu.c"
 12539 ;; Parameters:    Size  Location     Type
 12540 ;;  g               2   67[COMRAM] PTR struct GameParameter
 12541 ;;		 -> g1(240), 
 12542 ;; Auto vars:     Size  Location     Type
 12543 ;;		None
 12544 ;; Return value:  Size  Location     Type
 12545 ;;                  1    wreg      void 
 12546 ;; Registers used:
 12547 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12548 ;; Tracked objects:
 12549 ;;		On entry : 0/0
 12550 ;;		On exit  : 0/0
 12551 ;;		Unchanged: 0/0
 12552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12553 ;;      Params:         2       0       0       0       0       0       0
 12554 ;;      Locals:         0       0       0       0       0       0       0
 12555 ;;      Temps:          0       2       0       0       0       0       0
 12556 ;;      Totals:         2       2       0       0       0       0       0
 12557 ;;Total ram usage:        4 bytes
 12558 ;; Hardware stack levels used: 1
 12559 ;; Hardware stack levels required when called: 7
 12560 ;; This function calls:
 12561 ;;		_LCD_ButtonDraw
 12562 ;;		_LCD_DrawText
 12563 ;;		_LCD_Fill
 12564 ;; This function is called by:
 12565 ;;		_displayController
 12566 ;; This function uses a non-reentrant model
 12567 ;;
 12568                           
 12569                           	psect	text52
 12570  004880                     __ptext52:
 12571                           	callstack 0
 12572  004880                     _Menu_endGame:
 12573                           	callstack 19
 12574                           
 12575                           ;class/menu.c: 51: void Menu_endGame(GameParameters* g);class/menu.c: 52: {;class/menu.c
      +                          : 53:     LCD_Fill(0b0000000000000000);
 12576                           
 12577                           ;incstack = 0
 12578  004880  0E00               	movlw	0
 12579  004882  6E13               	movwf	(LCD_Fill@color+1)^0,c
 12580  004884  0E00               	movlw	0
 12581  004886  6E12               	movwf	LCD_Fill@color^0,c
 12582  004888  EC98  F024         	call	_LCD_Fill	;wreg free
 12583                           
 12584                           ;class/menu.c: 54:     LCD_ButtonDraw(&(g->btnNewGame));
 12585  00488C  0E68               	movlw	104
 12586  00488E  2444               	addwf	Menu_endGame@g^0,w,c
 12587  004890  6E42               	movwf	LCD_ButtonDraw@button^0,c
 12588  004892  0E00               	movlw	0
 12589  004894  2045               	addwfc	(Menu_endGame@g+1)^0,w,c
 12590  004896  6E43               	movwf	(LCD_ButtonDraw@button+1)^0,c
 12591  004898  EC27  F007         	call	_LCD_ButtonDraw	;wreg free
 12592                           
 12593                           ;class/menu.c: 55:     LCD_ButtonDraw(&(g->btnTurnOff));
 12594  00489C  0E80               	movlw	128
 12595  00489E  2444               	addwf	Menu_endGame@g^0,w,c
 12596  0048A0  6E42               	movwf	LCD_ButtonDraw@button^0,c
 12597  0048A2  0E00               	movlw	0
 12598  0048A4  2045               	addwfc	(Menu_endGame@g+1)^0,w,c
 12599  0048A6  6E43               	movwf	(LCD_ButtonDraw@button+1)^0,c
 12600  0048A8  EC27  F007         	call	_LCD_ButtonDraw	;wreg free
 12601                           
 12602                           ;class/menu.c: 57:     if(g->s1.homeScore==0)
 12603  0048AC  EE20 F0EA          	lfsr	2,234
 12604  0048B0  5044               	movf	Menu_endGame@g^0,w,c
 12605  0048B2  26D9               	addwf	fsr2l,f,c
 12606  0048B4  5045               	movf	(Menu_endGame@g+1)^0,w,c
 12607  0048B6  22DA               	addwfc	fsr2h,f,c
 12608  0048B8  50DE               	movf	postinc2,w,c
 12609  0048BA  10DE               	iorwf	postinc2,w,c
 12610  0048BC  A4D8               	btfss	status,2,c
 12611  0048BE  D01C               	goto	l8668
 12612                           
 12613                           ;class/menu.c: 58:     {;class/menu.c: 59:         LCD_DrawText("PLAYER 2 WIN",&arialNar
      +                          row_12ptFontInfo,A_CENTER,100,50,0b1111111111111111,0b0000000000000000);
 12614  0048C0  0E8F               	movlw	low STR_14
 12615  0048C2  6E20               	movwf	LCD_DrawText@msg^0,c
 12616  0048C4  0E7F               	movlw	high STR_14
 12617  0048C6  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
 12618  0048C8  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 12619  0048CA  6E22               	movwf	LCD_DrawText@font^0,c
 12620  0048CC  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 12621  0048CE  6E23               	movwf	(LCD_DrawText@font+1)^0,c
 12622  0048D0  0E02               	movlw	2
 12623  0048D2  6E24               	movwf	LCD_DrawText@align^0,c
 12624  0048D4  0E00               	movlw	0
 12625  0048D6  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 12626  0048D8  0E64               	movlw	100
 12627  0048DA  6E25               	movwf	LCD_DrawText@posX^0,c
 12628  0048DC  0E00               	movlw	0
 12629  0048DE  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
 12630  0048E0  0E32               	movlw	50
 12631  0048E2  6E27               	movwf	LCD_DrawText@posY^0,c
 12632  0048E4  0EFF               	movlw	255
 12633  0048E6  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
 12634  0048E8  6829               	setf	LCD_DrawText@color^0,c
 12635  0048EA  0E00               	movlw	0
 12636  0048EC  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
 12637  0048EE  0E00               	movlw	0
 12638  0048F0  6E2B               	movwf	LCD_DrawText@bg_color^0,c
 12639  0048F2  EC82  F00F         	call	_LCD_DrawText	;wreg free
 12640                           
 12641                           ;class/menu.c: 60:     }
 12642  0048F6  0012               	return	
 12643  0048F8                     l8668:
 12644                           
 12645                           ;class/menu.c: 62:     {;class/menu.c: 63:         LCD_DrawText("PLAYER 1 WIN",&arialNar
      +                          row_12ptFontInfo,A_CENTER,100,50,0b1111111111111111,0b0000000000000000);
 12646  0048F8  0E82               	movlw	low STR_15
 12647  0048FA  6E20               	movwf	LCD_DrawText@msg^0,c
 12648  0048FC  0E7F               	movlw	high STR_15
 12649  0048FE  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
 12650  004900  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 12651  004902  6E22               	movwf	LCD_DrawText@font^0,c
 12652  004904  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 12653  004906  6E23               	movwf	(LCD_DrawText@font+1)^0,c
 12654  004908  0E02               	movlw	2
 12655  00490A  6E24               	movwf	LCD_DrawText@align^0,c
 12656  00490C  0E00               	movlw	0
 12657  00490E  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 12658  004910  0E64               	movlw	100
 12659  004912  6E25               	movwf	LCD_DrawText@posX^0,c
 12660  004914  0E00               	movlw	0
 12661  004916  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
 12662  004918  0E32               	movlw	50
 12663  00491A  6E27               	movwf	LCD_DrawText@posY^0,c
 12664  00491C  0EFF               	movlw	255
 12665  00491E  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
 12666  004920  6829               	setf	LCD_DrawText@color^0,c
 12667  004922  0E00               	movlw	0
 12668  004924  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
 12669  004926  0E00               	movlw	0
 12670  004928  6E2B               	movwf	LCD_DrawText@bg_color^0,c
 12671  00492A  EC82  F00F         	call	_LCD_DrawText	;wreg free
 12672  00492E  0012               	return		;funcret
 12673  004930                     __end_of_Menu_endGame:
 12674                           	callstack 0
 12675                           
 12676 ;; *************** function _Menu_inGameDraw *****************
 12677 ;; Defined at:
 12678 ;;		line 37 in file "class/menu.c"
 12679 ;; Parameters:    Size  Location     Type
 12680 ;;  g               2   58[BANK0 ] PTR struct GameParameter
 12681 ;;		 -> g1(240), 
 12682 ;; Auto vars:     Size  Location     Type
 12683 ;;		None
 12684 ;; Return value:  Size  Location     Type
 12685 ;;                  1    wreg      void 
 12686 ;; Registers used:
 12687 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12688 ;; Tracked objects:
 12689 ;;		On entry : 3F/0
 12690 ;;		On exit  : 0/0
 12691 ;;		Unchanged: 0/0
 12692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12693 ;;      Params:         0       2       0       0       0       0       0
 12694 ;;      Locals:         0       0       0       0       0       0       0
 12695 ;;      Temps:          0       0       0       0       0       0       0
 12696 ;;      Totals:         0       2       0       0       0       0       0
 12697 ;;Total ram usage:        2 bytes
 12698 ;; Hardware stack levels used: 1
 12699 ;; Hardware stack levels required when called: 13
 12700 ;; This function calls:
 12701 ;;		_Ball_draw
 12702 ;;		_LCD_ButtonDraw
 12703 ;;		_LCD_DrawRect
 12704 ;;		_LCD_Fill
 12705 ;;		_Paddle_draw
 12706 ;;		_Score_draw
 12707 ;; This function is called by:
 12708 ;;		_displaySM
 12709 ;; This function uses a non-reentrant model
 12710 ;;
 12711                           
 12712                           	psect	text53
 12713  004D24                     __ptext53:
 12714                           	callstack 0
 12715  004D24                     _Menu_inGameDraw:
 12716                           	callstack 15
 12717                           
 12718                           ; BSR set to: 0
 12719                           ;class/menu.c: 37: void Menu_inGameDraw(GameParameters* g);class/menu.c: 38: {;class/men
      +                          u.c: 39:     LCD_Fill(0b0000000000000000);
 12720                           
 12721                           ;incstack = 0
 12722  004D24  0E00               	movlw	0
 12723  004D26  6E13               	movwf	(LCD_Fill@color+1)^0,c
 12724  004D28  0E00               	movlw	0
 12725  004D2A  6E12               	movwf	LCD_Fill@color^0,c
 12726  004D2C  EC98  F024         	call	_LCD_Fill	;wreg free
 12727                           
 12728                           ;class/menu.c: 40:     LCD_ButtonDraw(&(g->btnLeave));
 12729  004D30  0E50               	movlw	80
 12730  004D32  0100               	movlb	0	; () banked
 12731  004D34  25E4               	addwf	Menu_inGameDraw@g& (0+255),w,b
 12732  004D36  6E42               	movwf	LCD_ButtonDraw@button^0,c
 12733  004D38  0E00               	movlw	0
 12734  004D3A  21E5               	addwfc	(Menu_inGameDraw@g+1)& (0+255),w,b
 12735  004D3C  6E43               	movwf	(LCD_ButtonDraw@button+1)^0,c
 12736  004D3E  EC27  F007         	call	_LCD_ButtonDraw	;wreg free
 12737                           
 12738                           ;class/menu.c: 41:     LCD_DrawRect(0,160,239,160,1,0b1111111111111111);
 12739  004D42  0E00               	movlw	0
 12740  004D44  6E13               	movwf	(LCD_DrawRect@posX1+1)^0,c
 12741  004D46  0E00               	movlw	0
 12742  004D48  6E12               	movwf	LCD_DrawRect@posX1^0,c
 12743  004D4A  0E00               	movlw	0
 12744  004D4C  6E15               	movwf	(LCD_DrawRect@posY1+1)^0,c
 12745  004D4E  0EA0               	movlw	160
 12746  004D50  6E14               	movwf	LCD_DrawRect@posY1^0,c
 12747  004D52  0E00               	movlw	0
 12748  004D54  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 12749  004D56  0EEF               	movlw	239
 12750  004D58  6E16               	movwf	LCD_DrawRect@posX2^0,c
 12751  004D5A  0E00               	movlw	0
 12752  004D5C  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 12753  004D5E  0EA0               	movlw	160
 12754  004D60  6E18               	movwf	LCD_DrawRect@posY2^0,c
 12755  004D62  0E01               	movlw	1
 12756  004D64  6E1A               	movwf	LCD_DrawRect@fill^0,c
 12757  004D66  0EFF               	movlw	255
 12758  004D68  6E1C               	movwf	(LCD_DrawRect@color+1)^0,c
 12759  004D6A  681B               	setf	LCD_DrawRect@color^0,c
 12760  004D6C  EC31  F013         	call	_LCD_DrawRect	;wreg free
 12761                           
 12762                           ;class/menu.c: 42:     Score_draw(&g->s1);
 12763  004D70  0EEA               	movlw	234
 12764  004D72  0100               	movlb	0	; () banked
 12765  004D74  25E4               	addwf	Menu_inGameDraw@g& (0+255),w,b
 12766  004D76  6FD5               	movwf	Score_draw@s& (0+255),b
 12767  004D78  0E00               	movlw	0
 12768  004D7A  21E5               	addwfc	(Menu_inGameDraw@g+1)& (0+255),w,b
 12769  004D7C  6FD6               	movwf	(Score_draw@s+1)& (0+255),b
 12770  004D7E  ECFC  F021         	call	_Score_draw	;wreg free
 12771                           
 12772                           ;class/menu.c: 43:     Paddle_draw(&g->p1);
 12773  004D82  0ED6               	movlw	214
 12774  004D84  0100               	movlb	0	; () banked
 12775  004D86  25E4               	addwf	Menu_inGameDraw@g& (0+255),w,b
 12776  004D88  6E25               	movwf	Paddle_draw@p^0,c
 12777  004D8A  0E00               	movlw	0
 12778  004D8C  21E5               	addwfc	(Menu_inGameDraw@g+1)& (0+255),w,b
 12779  004D8E  6E26               	movwf	(Paddle_draw@p+1)^0,c
 12780  004D90  EC68  F01D         	call	_Paddle_draw	;wreg free
 12781                           
 12782                           ;class/menu.c: 44:     Paddle_draw(&g->p2);
 12783  004D94  0EE0               	movlw	224
 12784  004D96  0100               	movlb	0	; () banked
 12785  004D98  25E4               	addwf	Menu_inGameDraw@g& (0+255),w,b
 12786  004D9A  6E25               	movwf	Paddle_draw@p^0,c
 12787  004D9C  0E00               	movlw	0
 12788  004D9E  21E5               	addwfc	(Menu_inGameDraw@g+1)& (0+255),w,b
 12789  004DA0  6E26               	movwf	(Paddle_draw@p+1)^0,c
 12790  004DA2  EC68  F01D         	call	_Paddle_draw	;wreg free
 12791                           
 12792                           ;class/menu.c: 45:     Ball_draw(&g->b);
 12793  004DA6  0ECA               	movlw	202
 12794  004DA8  0100               	movlb	0	; () banked
 12795  004DAA  25E4               	addwf	Menu_inGameDraw@g& (0+255),w,b
 12796  004DAC  6E25               	movwf	Ball_draw@b^0,c
 12797  004DAE  0E00               	movlw	0
 12798  004DB0  21E5               	addwfc	(Menu_inGameDraw@g+1)& (0+255),w,b
 12799  004DB2  6E26               	movwf	(Ball_draw@b+1)^0,c
 12800  004DB4  EC32  F01A         	call	_Ball_draw	;wreg free
 12801  004DB8  0012               	return		;funcret
 12802  004DBA                     __end_of_Menu_inGameDraw:
 12803                           	callstack 0
 12804                           
 12805 ;; *************** function _Score_draw *****************
 12806 ;; Defined at:
 12807 ;;		line 32 in file "class/score.c"
 12808 ;; Parameters:    Size  Location     Type
 12809 ;;  s               2   43[BANK0 ] PTR struct Score
 12810 ;;		 -> g1(240), 
 12811 ;; Auto vars:     Size  Location     Type
 12812 ;;		None
 12813 ;; Return value:  Size  Location     Type
 12814 ;;                  1    wreg      void 
 12815 ;; Registers used:
 12816 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12817 ;; Tracked objects:
 12818 ;;		On entry : 3F/0
 12819 ;;		On exit  : 0/0
 12820 ;;		Unchanged: 0/0
 12821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12822 ;;      Params:         0       2       0       0       0       0       0
 12823 ;;      Locals:         0       0       0       0       0       0       0
 12824 ;;      Temps:          0       0       0       0       0       0       0
 12825 ;;      Totals:         0       2       0       0       0       0       0
 12826 ;;Total ram usage:        2 bytes
 12827 ;; Hardware stack levels used: 1
 12828 ;; Hardware stack levels required when called: 12
 12829 ;; This function calls:
 12830 ;;		_LCD_DrawText
 12831 ;;		_sprintf
 12832 ;; This function is called by:
 12833 ;;		_Menu_inGameDraw
 12834 ;;		_displayController
 12835 ;; This function uses a non-reentrant model
 12836 ;;
 12837                           
 12838                           	psect	text54
 12839  0043F8                     __ptext54:
 12840                           	callstack 0
 12841  0043F8                     _Score_draw:
 12842                           	callstack 14
 12843                           
 12844                           ; BSR set to: 0
 12845                           ;class/score.c: 32: void Score_draw(struct Score* s);class/score.c: 33: {;class/score.c:
      +                           34:     sprintf(s->str,"%d",s->homeScore);
 12846                           
 12847                           ;incstack = 0
 12848  0043F8  0E04               	movlw	4
 12849  0043FA  25D5               	addwf	Score_draw@s& (0+255),w,b
 12850  0043FC  6FC8               	movwf	sprintf@s& (0+255),b
 12851  0043FE  0E00               	movlw	0
 12852  004400  21D6               	addwfc	(Score_draw@s+1)& (0+255),w,b
 12853  004402  6FC9               	movwf	(sprintf@s+1)& (0+255),b
 12854  004404  0EF9               	movlw	low STR_2
 12855  004406  6FCA               	movwf	sprintf@fmt& (0+255),b
 12856  004408  0E7F               	movlw	high STR_2
 12857  00440A  6FCB               	movwf	(sprintf@fmt+1)& (0+255),b
 12858  00440C  C0D5  FFD9         	movff	Score_draw@s,fsr2l
 12859  004410  C0D6  FFDA         	movff	Score_draw@s+1,fsr2h
 12860  004414  CFDE F0CC          	movff	postinc2,?_sprintf+4
 12861  004418  CFDD F0CD          	movff	postdec2,?_sprintf+5
 12862  00441C  ECD7  F02A         	call	_sprintf	;wreg free
 12863                           
 12864                           ; BSR set to: 0
 12865                           ;class/score.c: 35:     LCD_DrawText(s->str,&arialNarrow_12ptFontInfo,A_LEFT,20,170,0b11
      +                          11111111111111,0b0000000000000000);
 12866  004420  0E04               	movlw	4
 12867  004422  25D5               	addwf	Score_draw@s& (0+255),w,b
 12868  004424  6E20               	movwf	LCD_DrawText@msg^0,c
 12869  004426  0E00               	movlw	0
 12870  004428  21D6               	addwfc	(Score_draw@s+1)& (0+255),w,b
 12871  00442A  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
 12872  00442C  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 12873  00442E  6E22               	movwf	LCD_DrawText@font^0,c
 12874  004430  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 12875  004432  6E23               	movwf	(LCD_DrawText@font+1)^0,c
 12876  004434  0E00               	movlw	0
 12877  004436  6E24               	movwf	LCD_DrawText@align^0,c
 12878  004438  0E00               	movlw	0
 12879  00443A  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 12880  00443C  0E14               	movlw	20
 12881  00443E  6E25               	movwf	LCD_DrawText@posX^0,c
 12882  004440  0E00               	movlw	0
 12883  004442  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
 12884  004444  0EAA               	movlw	170
 12885  004446  6E27               	movwf	LCD_DrawText@posY^0,c
 12886  004448  0EFF               	movlw	255
 12887  00444A  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
 12888  00444C  6829               	setf	LCD_DrawText@color^0,c
 12889  00444E  0E00               	movlw	0
 12890  004450  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
 12891  004452  0E00               	movlw	0
 12892  004454  6E2B               	movwf	LCD_DrawText@bg_color^0,c
 12893  004456  EC82  F00F         	call	_LCD_DrawText	;wreg free
 12894                           
 12895                           ;class/score.c: 36:     sprintf(s->str,"%d",s->awayScore);
 12896  00445A  0E04               	movlw	4
 12897  00445C  0100               	movlb	0	; () banked
 12898  00445E  25D5               	addwf	Score_draw@s& (0+255),w,b
 12899  004460  6FC8               	movwf	sprintf@s& (0+255),b
 12900  004462  0E00               	movlw	0
 12901  004464  21D6               	addwfc	(Score_draw@s+1)& (0+255),w,b
 12902  004466  6FC9               	movwf	(sprintf@s+1)& (0+255),b
 12903  004468  0EF9               	movlw	low STR_2
 12904  00446A  6FCA               	movwf	sprintf@fmt& (0+255),b
 12905  00446C  0E7F               	movlw	high STR_2
 12906  00446E  6FCB               	movwf	(sprintf@fmt+1)& (0+255),b
 12907  004470  EE20 F002          	lfsr	2,2
 12908  004474  51D5               	movf	Score_draw@s& (0+255),w,b
 12909  004476  26D9               	addwf	fsr2l,f,c
 12910  004478  51D6               	movf	(Score_draw@s+1)& (0+255),w,b
 12911  00447A  22DA               	addwfc	fsr2h,f,c
 12912  00447C  CFDE F0CC          	movff	postinc2,?_sprintf+4
 12913  004480  CFDD F0CD          	movff	postdec2,?_sprintf+5
 12914  004484  ECD7  F02A         	call	_sprintf	;wreg free
 12915                           
 12916                           ;class/score.c: 37:     LCD_DrawText(s->str,&arialNarrow_12ptFontInfo,A_LEFT,20,138,0b11
      +                          11111111111111,0b0000000000000000);
 12917  004488  0E04               	movlw	4
 12918  00448A  25D5               	addwf	Score_draw@s& (0+255),w,b
 12919  00448C  6E20               	movwf	LCD_DrawText@msg^0,c
 12920  00448E  0E00               	movlw	0
 12921  004490  21D6               	addwfc	(Score_draw@s+1)& (0+255),w,b
 12922  004492  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
 12923  004494  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 12924  004496  6E22               	movwf	LCD_DrawText@font^0,c
 12925  004498  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 12926  00449A  6E23               	movwf	(LCD_DrawText@font+1)^0,c
 12927  00449C  0E00               	movlw	0
 12928  00449E  6E24               	movwf	LCD_DrawText@align^0,c
 12929  0044A0  0E00               	movlw	0
 12930  0044A2  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 12931  0044A4  0E14               	movlw	20
 12932  0044A6  6E25               	movwf	LCD_DrawText@posX^0,c
 12933  0044A8  0E00               	movlw	0
 12934  0044AA  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
 12935  0044AC  0E8A               	movlw	138
 12936  0044AE  6E27               	movwf	LCD_DrawText@posY^0,c
 12937  0044B0  0EFF               	movlw	255
 12938  0044B2  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
 12939  0044B4  6829               	setf	LCD_DrawText@color^0,c
 12940  0044B6  0E00               	movlw	0
 12941  0044B8  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
 12942  0044BA  0E00               	movlw	0
 12943  0044BC  6E2B               	movwf	LCD_DrawText@bg_color^0,c
 12944  0044BE  EC82  F00F         	call	_LCD_DrawText	;wreg free
 12945  0044C2  0012               	return		;funcret
 12946  0044C4                     __end_of_Score_draw:
 12947                           	callstack 0
 12948                           
 12949 ;; *************** function _sprintf *****************
 12950 ;; Defined at:
 12951 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_sprintf.c"
 12952 ;; Parameters:    Size  Location     Type
 12953 ;;  s               2   30[BANK0 ] PTR unsigned char 
 12954 ;;		 -> g1(240), 
 12955 ;;  fmt             2   32[BANK0 ] PTR const unsigned char 
 12956 ;;		 -> STR_3(3), STR_2(3), 
 12957 ;; Auto vars:     Size  Location     Type
 12958 ;;  f               6   37[BANK0 ] struct _IO_FILE
 12959 ;;  ret             2    0        int 
 12960 ;;  ap              1   36[BANK0 ] PTR void [1]
 12961 ;;		 -> ?_sprintf(2), 
 12962 ;; Return value:  Size  Location     Type
 12963 ;;                  2   30[BANK0 ] int 
 12964 ;; Registers used:
 12965 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12966 ;; Tracked objects:
 12967 ;;		On entry : 3F/0
 12968 ;;		On exit  : 3F/0
 12969 ;;		Unchanged: 0/0
 12970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12971 ;;      Params:         0       6       0       0       0       0       0
 12972 ;;      Locals:         0       7       0       0       0       0       0
 12973 ;;      Temps:          0       0       0       0       0       0       0
 12974 ;;      Totals:         0      13       0       0       0       0       0
 12975 ;;Total ram usage:       13 bytes
 12976 ;; Hardware stack levels used: 1
 12977 ;; Hardware stack levels required when called: 11
 12978 ;; This function calls:
 12979 ;;		_vfprintf
 12980 ;; This function is called by:
 12981 ;;		_Score_draw
 12982 ;; This function uses a non-reentrant model
 12983 ;;
 12984                           
 12985                           	psect	text55
 12986  0055AE                     __ptext55:
 12987                           	callstack 0
 12988  0055AE                     _sprintf:
 12989                           	callstack 14
 12990                           
 12991                           ; BSR set to: 0
 12992                           
 12993                           ;incstack = 0
 12994  0055AE  0ECC               	movlw	low (?_sprintf+4)
 12995  0055B0  6FCE               	movwf	sprintf@ap& (0+255),b
 12996  0055B2  C0C8  F0CF         	movff	sprintf@s,sprintf@f
 12997  0055B6  C0C9  F0D0         	movff	sprintf@s+1,sprintf@f+1
 12998                           
 12999                           ; BSR set to: 0
 13000  0055BA  0E00               	movlw	0
 13001  0055BC  6FD2               	movwf	(sprintf@f+3)& (0+255),b
 13002  0055BE  0E00               	movlw	0
 13003  0055C0  6FD1               	movwf	(sprintf@f+2)& (0+255),b
 13004                           
 13005                           ; BSR set to: 0
 13006  0055C2  0E00               	movlw	0
 13007  0055C4  6FD4               	movwf	(sprintf@f+5)& (0+255),b
 13008  0055C6  0E00               	movlw	0
 13009  0055C8  6FD3               	movwf	(sprintf@f+4)& (0+255),b
 13010                           
 13011                           ; BSR set to: 0
 13012  0055CA  0ECF               	movlw	low sprintf@f
 13013  0055CC  6FC4               	movwf	vfprintf@fp& (0+255),b
 13014  0055CE  C0CA  F0C5         	movff	sprintf@fmt,vfprintf@fmt
 13015  0055D2  C0CB  F0C6         	movff	sprintf@fmt+1,vfprintf@fmt+1
 13016  0055D6  0ECE               	movlw	low sprintf@ap
 13017  0055D8  6FC7               	movwf	vfprintf@ap& (0+255),b
 13018  0055DA  ECB3  F02A         	call	_vfprintf	;wreg free
 13019                           
 13020                           ; BSR set to: 0
 13021  0055DE  51D1               	movf	(sprintf@f+2)& (0+255),w,b
 13022  0055E0  25C8               	addwf	sprintf@s& (0+255),w,b
 13023  0055E2  6ED9               	movwf	fsr2l,c
 13024  0055E4  51D2               	movf	(sprintf@f+3)& (0+255),w,b
 13025  0055E6  21C9               	addwfc	(sprintf@s+1)& (0+255),w,b
 13026  0055E8  6EDA               	movwf	fsr2h,c
 13027  0055EA  0E00               	movlw	0
 13028  0055EC  6EDF               	movwf	indf2,c
 13029                           
 13030                           ; BSR set to: 0
 13031  0055EE  0012               	return		;funcret
 13032  0055F0                     __end_of_sprintf:
 13033                           	callstack 0
 13034                           
 13035 ;; *************** function _vfprintf *****************
 13036 ;; Defined at:
 13037 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
 13038 ;; Parameters:    Size  Location     Type
 13039 ;;  fp              1   26[BANK0 ] PTR struct _IO_FILE
 13040 ;;		 -> sprintf@f(6), 
 13041 ;;  fmt             2   27[BANK0 ] PTR const unsigned char 
 13042 ;;		 -> STR_3(3), STR_2(3), 
 13043 ;;  ap              1   29[BANK0 ] PTR PTR void 
 13044 ;;		 -> sprintf@ap(1), 
 13045 ;; Auto vars:     Size  Location     Type
 13046 ;;  cfmt            2   63[COMRAM] PTR unsigned char 
 13047 ;;		 -> STR_3(3), STR_2(3), 
 13048 ;; Return value:  Size  Location     Type
 13049 ;;                  2   26[BANK0 ] int 
 13050 ;; Registers used:
 13051 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13052 ;; Tracked objects:
 13053 ;;		On entry : 3F/0
 13054 ;;		On exit  : 3F/0
 13055 ;;		Unchanged: 0/0
 13056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13057 ;;      Params:         0       4       0       0       0       0       0
 13058 ;;      Locals:         2       0       0       0       0       0       0
 13059 ;;      Temps:          0       0       0       0       0       0       0
 13060 ;;      Totals:         2       4       0       0       0       0       0
 13061 ;;Total ram usage:        6 bytes
 13062 ;; Hardware stack levels used: 1
 13063 ;; Hardware stack levels required when called: 10
 13064 ;; This function calls:
 13065 ;;		_vfpfcnvrt
 13066 ;; This function is called by:
 13067 ;;		_sprintf
 13068 ;; This function uses a non-reentrant model
 13069 ;;
 13070                           
 13071                           	psect	text56
 13072  005566                     __ptext56:
 13073                           	callstack 0
 13074  005566                     _vfprintf:
 13075                           	callstack 14
 13076                           
 13077                           ; BSR set to: 0
 13078                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
 13079                           
 13080                           ; BSR set to: 0
 13081                           ;incstack = 0
 13082  005566  C0C5  F040         	movff	vfprintf@fmt,vfprintf@cfmt
 13083  00556A  C0C6  F041         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
 13084                           
 13085                           ; BSR set to: 0
 13086                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
 13087  00556E  0E00               	movlw	0
 13088  005570  6F87               	movwf	(_nout+1)& (0+255),b
 13089  005572  0E00               	movlw	0
 13090  005574  6F86               	movwf	_nout& (0+255),b
 13091                           
 13092                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
 13093  005576  D00D               	goto	l8564
 13094  005578                     l8562:
 13095                           
 13096                           ; BSR set to: 0
 13097                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
 13098  005578  C0C4  F03D         	movff	vfprintf@fp,vfpfcnvrt@fp
 13099  00557C  0E40               	movlw	low vfprintf@cfmt
 13100  00557E  6E3E               	movwf	vfpfcnvrt@fmt^0,c
 13101  005580  C0C7  F03F         	movff	vfprintf@ap,vfpfcnvrt@ap
 13102  005584  ECDD  F01A         	call	_vfpfcnvrt	;wreg free
 13103  005588  503D               	movf	?_vfpfcnvrt^0,w,c
 13104  00558A  0100               	movlb	0	; () banked
 13105  00558C  2786               	addwf	_nout& (0+255),f,b
 13106  00558E  503E               	movf	(?_vfpfcnvrt+1)^0,w,c
 13107  005590  2387               	addwfc	(_nout+1)& (0+255),f,b
 13108  005592                     l8564:
 13109                           
 13110                           ; BSR set to: 0
 13111                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
 13112  005592  C040  FFF6         	movff	vfprintf@cfmt,tblptrl
 13113  005596  C041  FFF7         	movff	vfprintf@cfmt+1,tblptrh
 13114  00559A                     	if	0	;tblptru may be non-zero
 13115  00559A                     	endif
 13116  00559A                     	if	0	;tblptru may be non-zero
 13117  00559A                     	endif
 13118  00559A  0008               	tblrd		*
 13119  00559C  50F5               	movf	tablat,w,c
 13120  00559E  0900               	iorlw	0
 13121  0055A0  A4D8               	btfss	status,2,c
 13122  0055A2  D7EA               	goto	l8562
 13123                           
 13124                           ; BSR set to: 0
 13125                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
 13126  0055A4  C086  F0C4         	movff	_nout,?_vfprintf
 13127  0055A8  C087  F0C5         	movff	_nout+1,?_vfprintf+1
 13128                           
 13129                           ; BSR set to: 0
 13130  0055AC  0012               	return		;funcret
 13131  0055AE                     __end_of_vfprintf:
 13132                           	callstack 0
 13133                           
 13134 ;; *************** function _vfpfcnvrt *****************
 13135 ;; Defined at:
 13136 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
 13137 ;; Parameters:    Size  Location     Type
 13138 ;;  fp              1   60[COMRAM] PTR struct _IO_FILE
 13139 ;;		 -> sprintf@f(6), 
 13140 ;;  fmt             1   61[COMRAM] PTR PTR unsigned char 
 13141 ;;		 -> vfprintf@cfmt(2), 
 13142 ;;  ap              1   62[COMRAM] PTR PTR void 
 13143 ;;		 -> sprintf@ap(1), 
 13144 ;; Auto vars:     Size  Location     Type
 13145 ;;  ll              8   18[BANK0 ] long long 
 13146 ;;  llu             8    0        unsigned long long 
 13147 ;;  f               4    0        unsigned long long 
 13148 ;;  vp              3    0        PTR void 
 13149 ;;  ct              3    0        unsigned char [3]
 13150 ;;  cp              3    0        PTR unsigned char 
 13151 ;;  i               2    0        int 
 13152 ;;  done            2    0        int 
 13153 ;;  c               1    0        unsigned char 
 13154 ;; Return value:  Size  Location     Type
 13155 ;;                  2   60[COMRAM] int 
 13156 ;; Registers used:
 13157 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13158 ;; Tracked objects:
 13159 ;;		On entry : 3F/0
 13160 ;;		On exit  : 0/0
 13161 ;;		Unchanged: 0/0
 13162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13163 ;;      Params:         3       0       0       0       0       0       0
 13164 ;;      Locals:         0       8       0       0       0       0       0
 13165 ;;      Temps:          0       0       0       0       0       0       0
 13166 ;;      Totals:         3       8       0       0       0       0       0
 13167 ;;Total ram usage:       11 bytes
 13168 ;; Hardware stack levels used: 1
 13169 ;; Hardware stack levels required when called: 9
 13170 ;; This function calls:
 13171 ;;		_dtoa
 13172 ;;		_fputc
 13173 ;; This function is called by:
 13174 ;;		_vfprintf
 13175 ;; This function uses a non-reentrant model
 13176 ;;
 13177                           
 13178                           	psect	text57
 13179  0035BA                     __ptext57:
 13180                           	callstack 0
 13181  0035BA                     _vfpfcnvrt:
 13182                           	callstack 14
 13183                           
 13184                           ; BSR set to: 0
 13185                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.32\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          2\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
 13186                           
 13187                           ; BSR set to: 0
 13188                           ;incstack = 0
 13189  0035BA  503E               	movf	vfpfcnvrt@fmt^0,w,c
 13190  0035BC  6ED9               	movwf	fsr2l,c
 13191  0035BE  6ADA               	clrf	fsr2h,c
 13192  0035C0  CFDE FFF6          	movff	postinc2,tblptrl
 13193  0035C4  CFDD FFF7          	movff	postdec2,tblptrh
 13194  0035C8                     	if	0	;tblptru may be non-zero
 13195  0035C8                     	endif
 13196  0035C8                     	if	0	;tblptru may be non-zero
 13197  0035C8                     	endif
 13198  0035C8  0008               	tblrd		*
 13199  0035CA  50F5               	movf	tablat,w,c
 13200  0035CC  0A25               	xorlw	37
 13201  0035CE  A4D8               	btfss	status,2,c
 13202  0035D0  D086               	goto	l8406
 13203                           
 13204                           ; BSR set to: 0
 13205                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
 13206  0035D2  503E               	movf	vfpfcnvrt@fmt^0,w,c
 13207  0035D4  6ED9               	movwf	fsr2l,c
 13208  0035D6  6ADA               	clrf	fsr2h,c
 13209  0035D8  2ADE               	incf	postinc2,f,c
 13210  0035DA  0E00               	movlw	0
 13211  0035DC  22DD               	addwfc	postdec2,f,c
 13212                           
 13213                           ; BSR set to: 0
 13214                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
 13215  0035DE  0E00               	movlw	0
 13216  0035E0  6E47               	movwf	(_width+1)^0,c
 13217  0035E2  0E00               	movlw	0
 13218  0035E4  6E46               	movwf	_width^0,c
 13219  0035E6  C046  F04A         	movff	_width,_flags
 13220  0035EA  C047  F04B         	movff	_width+1,_flags+1
 13221                           
 13222                           ; BSR set to: 0
 13223                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
 13224  0035EE  6848               	setf	_prec^0,c
 13225  0035F0  6849               	setf	(_prec+1)^0,c
 13226                           
 13227                           ; BSR set to: 0
 13228                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 847:         if (
      +                          (*fmt[0] == 'd') || (*fmt[0] == 'i')) {
 13229  0035F2  503E               	movf	vfpfcnvrt@fmt^0,w,c
 13230  0035F4  6ED9               	movwf	fsr2l,c
 13231  0035F6  6ADA               	clrf	fsr2h,c
 13232  0035F8  CFDE FFF6          	movff	postinc2,tblptrl
 13233  0035FC  CFDD FFF7          	movff	postdec2,tblptrh
 13234  003600                     	if	0	;tblptru may be non-zero
 13235  003600                     	endif
 13236  003600                     	if	0	;tblptru may be non-zero
 13237  003600                     	endif
 13238  003600  0008               	tblrd		*
 13239  003602  50F5               	movf	tablat,w,c
 13240  003604  0A64               	xorlw	100
 13241  003606  B4D8               	btfsc	status,2,c
 13242  003608  D00C               	goto	u6160
 13243                           
 13244                           ; BSR set to: 0
 13245  00360A  503E               	movf	vfpfcnvrt@fmt^0,w,c
 13246  00360C  6ED9               	movwf	fsr2l,c
 13247  00360E  6ADA               	clrf	fsr2h,c
 13248  003610  CFDE FFF6          	movff	postinc2,tblptrl
 13249  003614  CFDD FFF7          	movff	postdec2,tblptrh
 13250  003618                     	if	0	;tblptru may be non-zero
 13251  003618                     	endif
 13252  003618                     	if	0	;tblptru may be non-zero
 13253  003618                     	endif
 13254  003618  0008               	tblrd		*
 13255  00361A  50F5               	movf	tablat,w,c
 13256  00361C  0A69               	xorlw	105
 13257  00361E  A4D8               	btfss	status,2,c
 13258  003620  D034               	goto	l8390
 13259  003622                     u6160:
 13260                           
 13261                           ; BSR set to: 0
 13262                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 849:             
      +                          ++*fmt;
 13263  003622  503E               	movf	vfpfcnvrt@fmt^0,w,c
 13264  003624  6ED9               	movwf	fsr2l,c
 13265  003626  6ADA               	clrf	fsr2h,c
 13266  003628  2ADE               	incf	postinc2,f,c
 13267  00362A  0E00               	movlw	0
 13268  00362C  22DD               	addwfc	postdec2,f,c
 13269                           
 13270                           ; BSR set to: 0
 13271                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 850:             
      +                          ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
 13272  00362E  503F               	movf	vfpfcnvrt@ap^0,w,c
 13273  003630  6ED9               	movwf	fsr2l,c
 13274  003632  6ADA               	clrf	fsr2h,c
 13275  003634  50DF               	movf	indf2,w,c
 13276  003636  2ADF               	incf	indf2,f,c
 13277  003638  2ADF               	incf	indf2,f,c
 13278  00363A  6ED9               	movwf	fsr2l,c
 13279  00363C  6ADA               	clrf	fsr2h,c
 13280  00363E  CFDE F0BC          	movff	postinc2,vfpfcnvrt@ll
 13281  003642  CFDD F0BD          	movff	postdec2,vfpfcnvrt@ll+1
 13282  003646  0E00               	movlw	0
 13283  003648  BFBD               	btfsc	(vfpfcnvrt@ll+1)& (0+255),7,b
 13284  00364A  0EFF               	movlw	-1
 13285  00364C  6FBE               	movwf	(vfpfcnvrt@ll+2)& (0+255),b
 13286  00364E  6FBF               	movwf	(vfpfcnvrt@ll+3)& (0+255),b
 13287  003650  6FC0               	movwf	(vfpfcnvrt@ll+4)& (0+255),b
 13288  003652  6FC1               	movwf	(vfpfcnvrt@ll+5)& (0+255),b
 13289  003654  6FC2               	movwf	(vfpfcnvrt@ll+6)& (0+255),b
 13290  003656  6FC3               	movwf	(vfpfcnvrt@ll+7)& (0+255),b
 13291                           
 13292                           ; BSR set to: 0
 13293                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 852:             
      +                          return dtoa(fp, ll);
 13294  003658  C03D  F02C         	movff	vfpfcnvrt@fp,dtoa@fp
 13295  00365C  C0BC  F02D         	movff	vfpfcnvrt@ll,dtoa@d
 13296  003660  C0BD  F02E         	movff	vfpfcnvrt@ll+1,dtoa@d+1
 13297  003664  C0BE  F02F         	movff	vfpfcnvrt@ll+2,dtoa@d+2
 13298  003668  C0BF  F030         	movff	vfpfcnvrt@ll+3,dtoa@d+3
 13299  00366C  C0C0  F031         	movff	vfpfcnvrt@ll+4,dtoa@d+4
 13300  003670  C0C1  F032         	movff	vfpfcnvrt@ll+5,dtoa@d+5
 13301  003674  C0C2  F033         	movff	vfpfcnvrt@ll+6,dtoa@d+6
 13302  003678  C0C3  F034         	movff	vfpfcnvrt@ll+7,dtoa@d+7
 13303  00367C  EC2D  F017         	call	_dtoa	;wreg free
 13304  003680  C02C  F03D         	movff	?_dtoa,?_vfpfcnvrt
 13305  003684  C02D  F03E         	movff	?_dtoa+1,?_vfpfcnvrt+1
 13306  003688  0012               	return	
 13307  00368A                     l8390:
 13308                           
 13309                           ; BSR set to: 0
 13310                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
 13311  00368A  503E               	movf	vfpfcnvrt@fmt^0,w,c
 13312  00368C  6ED9               	movwf	fsr2l,c
 13313  00368E  6ADA               	clrf	fsr2h,c
 13314  003690  CFDE FFF6          	movff	postinc2,tblptrl
 13315  003694  CFDD FFF7          	movff	postdec2,tblptrh
 13316  003698                     	if	0	;tblptru may be non-zero
 13317  003698                     	endif
 13318  003698                     	if	0	;tblptru may be non-zero
 13319  003698                     	endif
 13320  003698  0008               	tblrd		*
 13321  00369A  50F5               	movf	tablat,w,c
 13322  00369C  0A25               	xorlw	37
 13323  00369E  A4D8               	btfss	status,2,c
 13324  0036A0  D013               	goto	l8400
 13325                           
 13326                           ; BSR set to: 0
 13327                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
 13328  0036A2  503E               	movf	vfpfcnvrt@fmt^0,w,c
 13329  0036A4  6ED9               	movwf	fsr2l,c
 13330  0036A6  6ADA               	clrf	fsr2h,c
 13331  0036A8  2ADE               	incf	postinc2,f,c
 13332  0036AA  0E00               	movlw	0
 13333  0036AC  22DD               	addwfc	postdec2,f,c
 13334                           
 13335                           ; BSR set to: 0
 13336                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
 13337  0036AE  0E00               	movlw	0
 13338  0036B0  6E13               	movwf	(fputc@c+1)^0,c
 13339  0036B2  0E25               	movlw	37
 13340  0036B4  6E12               	movwf	fputc@c^0,c
 13341  0036B6  C03D  F014         	movff	vfpfcnvrt@fp,fputc@fp
 13342  0036BA  EC27  F027         	call	_fputc	;wreg free
 13343  0036BE                     l8396:
 13344                           
 13345                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
 13346  0036BE  0E00               	movlw	0
 13347  0036C0  6E3E               	movwf	(?_vfpfcnvrt+1)^0,c
 13348  0036C2  0E01               	movlw	1
 13349  0036C4  6E3D               	movwf	?_vfpfcnvrt^0,c
 13350  0036C6  0012               	return	
 13351  0036C8                     l8400:
 13352                           
 13353                           ; BSR set to: 0
 13354                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
 13355  0036C8  503E               	movf	vfpfcnvrt@fmt^0,w,c
 13356  0036CA  6ED9               	movwf	fsr2l,c
 13357  0036CC  6ADA               	clrf	fsr2h,c
 13358  0036CE  2ADE               	incf	postinc2,f,c
 13359  0036D0  0E00               	movlw	0
 13360  0036D2  22DD               	addwfc	postdec2,f,c
 13361                           
 13362                           ; BSR set to: 0
 13363                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
 13364  0036D4  0E00               	movlw	0
 13365  0036D6  6E3E               	movwf	(?_vfpfcnvrt+1)^0,c
 13366  0036D8  0E00               	movlw	0
 13367  0036DA  6E3D               	movwf	?_vfpfcnvrt^0,c
 13368  0036DC  0012               	return	
 13369  0036DE                     l8406:
 13370                           
 13371                           ; BSR set to: 0
 13372                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
 13373  0036DE  503E               	movf	vfpfcnvrt@fmt^0,w,c
 13374  0036E0  6ED9               	movwf	fsr2l,c
 13375  0036E2  6ADA               	clrf	fsr2h,c
 13376  0036E4  CFDE FFF6          	movff	postinc2,tblptrl
 13377  0036E8  CFDD FFF7          	movff	postdec2,tblptrh
 13378  0036EC                     	if	0	;tblptru may be non-zero
 13379  0036EC                     	endif
 13380  0036EC                     	if	0	;tblptru may be non-zero
 13381  0036EC                     	endif
 13382  0036EC  0008               	tblrd		*
 13383  0036EE  50F5               	movf	tablat,w,c
 13384  0036F0  6E12               	movwf	fputc@c^0,c
 13385  0036F2  6A13               	clrf	(fputc@c+1)^0,c
 13386  0036F4  C03D  F014         	movff	vfpfcnvrt@fp,fputc@fp
 13387  0036F8  EC27  F027         	call	_fputc	;wreg free
 13388                           
 13389                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
 13390  0036FC  503E               	movf	vfpfcnvrt@fmt^0,w,c
 13391  0036FE  6ED9               	movwf	fsr2l,c
 13392  003700  6ADA               	clrf	fsr2h,c
 13393  003702  2ADE               	incf	postinc2,f,c
 13394  003704  0E00               	movlw	0
 13395  003706  22DD               	addwfc	postdec2,f,c
 13396  003708  D7DA               	goto	l8396
 13397  00370A                     __end_of_vfpfcnvrt:
 13398                           	callstack 0
 13399                           
 13400 ;; *************** function _dtoa *****************
 13401 ;; Defined at:
 13402 ;;		line 287 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
 13403 ;; Parameters:    Size  Location     Type
 13404 ;;  fp              1   43[COMRAM] PTR struct _IO_FILE
 13405 ;;		 -> sprintf@f(6), 
 13406 ;;  d               8   44[COMRAM] long long 
 13407 ;; Auto vars:     Size  Location     Type
 13408 ;;  n               8    8[BANK0 ] long long 
 13409 ;;  i               2   16[BANK0 ] int 
 13410 ;;  s               2    6[BANK0 ] int 
 13411 ;;  w               2    4[BANK0 ] int 
 13412 ;;  p               2    2[BANK0 ] int 
 13413 ;; Return value:  Size  Location     Type
 13414 ;;                  2   43[COMRAM] int 
 13415 ;; Registers used:
 13416 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13417 ;; Tracked objects:
 13418 ;;		On entry : 3F/0
 13419 ;;		On exit  : 0/0
 13420 ;;		Unchanged: 0/0
 13421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13422 ;;      Params:         9       0       0       0       0       0       0
 13423 ;;      Locals:         0      18       0       0       0       0       0
 13424 ;;      Temps:          8       0       0       0       0       0       0
 13425 ;;      Totals:        17      18       0       0       0       0       0
 13426 ;;Total ram usage:       35 bytes
 13427 ;; Hardware stack levels used: 1
 13428 ;; Hardware stack levels required when called: 8
 13429 ;; This function calls:
 13430 ;;		___aodiv
 13431 ;;		___aomod
 13432 ;;		_abs
 13433 ;;		_pad
 13434 ;; This function is called by:
 13435 ;;		_vfpfcnvrt
 13436 ;; This function uses a non-reentrant model
 13437 ;;
 13438                           
 13439                           	psect	text58
 13440  002E5A                     __ptext58:
 13441                           	callstack 0
 13442  002E5A                     _dtoa:
 13443                           	callstack 14
 13444                           
 13445                           ; BSR set to: 0
 13446                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 287: static int d
      +                          toa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\d
      +                          oprnt.c: 288: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 28
      +                          9:     int i, p, s, w;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprn
      +                          t.c: 290:     long long n;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\d
      +                          oprnt.c: 293:     n = d;
 13447                           
 13448                           ;incstack = 0
 13449  002E5A  C02D  F0B2         	movff	dtoa@d,dtoa@n
 13450  002E5E  C02E  F0B3         	movff	dtoa@d+1,dtoa@n+1
 13451  002E62  C02F  F0B4         	movff	dtoa@d+2,dtoa@n+2
 13452  002E66  C030  F0B5         	movff	dtoa@d+3,dtoa@n+3
 13453  002E6A  C031  F0B6         	movff	dtoa@d+4,dtoa@n+4
 13454  002E6E  C032  F0B7         	movff	dtoa@d+5,dtoa@n+5
 13455  002E72  C033  F0B8         	movff	dtoa@d+6,dtoa@n+6
 13456  002E76  C034  F0B9         	movff	dtoa@d+7,dtoa@n+7
 13457                           
 13458                           ; BSR set to: 0
 13459                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 294:     s = n < 
      +                          0 ? 1 : 0;
 13460  002E7A  AFB9               	btfss	(dtoa@n+7)& (0+255),7,b
 13461  002E7C  D002               	goto	u5990
 13462  002E7E  0E01               	movlw	1
 13463  002E80  D001               	goto	u6000
 13464  002E82                     u5990:
 13465  002E82  0E00               	movlw	0
 13466  002E84                     u6000:
 13467  002E84  6FB0               	movwf	dtoa@s& (0+255),b
 13468  002E86  6BB1               	clrf	(dtoa@s+1)& (0+255),b
 13469                           
 13470                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 295:     if (s) {
 13471  002E88  51B0               	movf	dtoa@s& (0+255),w,b
 13472  002E8A  11B1               	iorwf	(dtoa@s+1)& (0+255),w,b
 13473  002E8C  B4D8               	btfsc	status,2,c
 13474  002E8E  D010               	goto	l8314
 13475                           
 13476                           ; BSR set to: 0
 13477                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 296:         n = 
      +                          -n;
 13478  002E90  1FB9               	comf	(dtoa@n+7)& (0+255),f,b
 13479  002E92  1FB8               	comf	(dtoa@n+6)& (0+255),f,b
 13480  002E94  1FB7               	comf	(dtoa@n+5)& (0+255),f,b
 13481  002E96  1FB6               	comf	(dtoa@n+4)& (0+255),f,b
 13482  002E98  1FB5               	comf	(dtoa@n+3)& (0+255),f,b
 13483  002E9A  1FB4               	comf	(dtoa@n+2)& (0+255),f,b
 13484  002E9C  1FB3               	comf	(dtoa@n+1)& (0+255),f,b
 13485  002E9E  6DB2               	negf	dtoa@n& (0+255),b
 13486  002EA0  0E00               	movlw	0
 13487  002EA2  23B3               	addwfc	(dtoa@n+1)& (0+255),f,b
 13488  002EA4  23B4               	addwfc	(dtoa@n+2)& (0+255),f,b
 13489  002EA6  23B5               	addwfc	(dtoa@n+3)& (0+255),f,b
 13490  002EA8  23B6               	addwfc	(dtoa@n+4)& (0+255),f,b
 13491  002EAA  23B7               	addwfc	(dtoa@n+5)& (0+255),f,b
 13492  002EAC  23B8               	addwfc	(dtoa@n+6)& (0+255),f,b
 13493  002EAE  23B9               	addwfc	(dtoa@n+7)& (0+255),f,b
 13494  002EB0                     l8314:
 13495                           
 13496                           ; BSR set to: 0
 13497                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 300:     if (!(pr
      +                          ec < 0)) {
 13498  002EB0  AE49               	btfss	(_prec+1)^0,7,c
 13499                           
 13500                           ; BSR set to: 0
 13501                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 301:         flag
      +                          s &= ~(1 << 1);
 13502  002EB2  924A               	bcf	_flags^0,1,c
 13503                           
 13504                           ; BSR set to: 0
 13505                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 303:     p = (0 <
      +                           prec) ? prec : 1;
 13506  002EB4  BE49               	btfsc	(_prec+1)^0,7,c
 13507  002EB6  D005               	goto	u6030
 13508  002EB8  5049               	movf	(_prec+1)^0,w,c
 13509  002EBA  E108               	bnz	l1590
 13510  002EBC  0448               	decf	_prec^0,w,c
 13511  002EBE  B0D8               	btfsc	status,0,c
 13512  002EC0  D005               	goto	l1590
 13513  002EC2                     u6030:
 13514                           
 13515                           ; BSR set to: 0
 13516  002EC2  0E00               	movlw	0
 13517  002EC4  6FAD               	movwf	(dtoa@p+1)& (0+255),b
 13518  002EC6  0E01               	movlw	1
 13519  002EC8  6FAC               	movwf	dtoa@p& (0+255),b
 13520  002ECA  D004               	goto	l1592
 13521  002ECC                     l1590:
 13522                           
 13523                           ; BSR set to: 0
 13524  002ECC  C048  F0AC         	movff	_prec,dtoa@p
 13525  002ED0  C049  F0AD         	movff	_prec+1,dtoa@p+1
 13526  002ED4                     l1592:
 13527                           
 13528                           ; BSR set to: 0
 13529                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 304:     w = widt
      +                          h;
 13530  002ED4  C046  F0AE         	movff	_width,dtoa@w
 13531  002ED8  C047  F0AF         	movff	_width+1,dtoa@w+1
 13532                           
 13533                           ; BSR set to: 0
 13534                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 305:     if (s ||
      +                           (flags & (1 << 2))) {
 13535  002EDC  51B0               	movf	dtoa@s& (0+255),w,b
 13536  002EDE  11B1               	iorwf	(dtoa@s+1)& (0+255),w,b
 13537  002EE0  A4D8               	btfss	status,2,c
 13538  002EE2  D002               	goto	u6050
 13539                           
 13540                           ; BSR set to: 0
 13541  002EE4  A44A               	btfss	_flags^0,2,c
 13542  002EE6  D003               	goto	l8328
 13543  002EE8                     u6050:
 13544                           
 13545                           ; BSR set to: 0
 13546                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 306:         --w;
 13547  002EE8  07AE               	decf	dtoa@w& (0+255),f,b
 13548  002EEA  A0D8               	btfss	status,0,c
 13549  002EEC  07AF               	decf	(dtoa@w+1)& (0+255),f,b
 13550  002EEE                     l8328:
 13551                           
 13552                           ; BSR set to: 0
 13553                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 310:     i = size
      +                          of(dbuf) - 1;
 13554  002EEE  0E00               	movlw	0
 13555  002EF0  6FBB               	movwf	(dtoa@i+1)& (0+255),b
 13556  002EF2  0E1F               	movlw	31
 13557  002EF4  6FBA               	movwf	dtoa@i& (0+255),b
 13558                           
 13559                           ; BSR set to: 0
 13560                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 311:     dbuf[i] 
      +                          = '\0';
 13561  002EF6  0E00               	movlw	0
 13562  002EF8  6FA9               	movwf	(_dbuf+31)& (0+255),b
 13563                           
 13564                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 13565  002EFA  D07A               	goto	l8342
 13566  002EFC                     l8332:
 13567                           
 13568                           ; BSR set to: 0
 13569                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 313:         --i;
 13570  002EFC  07BA               	decf	dtoa@i& (0+255),f,b
 13571  002EFE  A0D8               	btfss	status,0,c
 13572  002F00  07BB               	decf	(dtoa@i+1)& (0+255),f,b
 13573                           
 13574                           ; BSR set to: 0
 13575                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 314:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
 13576  002F02  51BA               	movf	dtoa@i& (0+255),w,b
 13577  002F04  0F8A               	addlw	low _dbuf
 13578  002F06  6ED9               	movwf	fsr2l,c
 13579  002F08  6ADA               	clrf	fsr2h,c
 13580  002F0A  C0B2  F012         	movff	dtoa@n,___aomod@dividend
 13581  002F0E  C0B3  F013         	movff	dtoa@n+1,___aomod@dividend+1
 13582  002F12  C0B4  F014         	movff	dtoa@n+2,___aomod@dividend+2
 13583  002F16  C0B5  F015         	movff	dtoa@n+3,___aomod@dividend+3
 13584  002F1A  C0B6  F016         	movff	dtoa@n+4,___aomod@dividend+4
 13585  002F1E  C0B7  F017         	movff	dtoa@n+5,___aomod@dividend+5
 13586  002F22  C0B8  F018         	movff	dtoa@n+6,___aomod@dividend+6
 13587  002F26  C0B9  F019         	movff	dtoa@n+7,___aomod@dividend+7
 13588  002F2A  0E0A               	movlw	10
 13589  002F2C  6E1A               	movwf	___aomod@divisor^0,c
 13590  002F2E  0E00               	movlw	0
 13591  002F30  6E1B               	movwf	(___aomod@divisor+1)^0,c
 13592  002F32  0E00               	movlw	0
 13593  002F34  6E1C               	movwf	(___aomod@divisor+2)^0,c
 13594  002F36  0E00               	movlw	0
 13595  002F38  6E1D               	movwf	(___aomod@divisor+3)^0,c
 13596  002F3A  0E00               	movlw	0
 13597  002F3C  6E1E               	movwf	(___aomod@divisor+4)^0,c
 13598  002F3E  0E00               	movlw	0
 13599  002F40  6E1F               	movwf	(___aomod@divisor+5)^0,c
 13600  002F42  0E00               	movlw	0
 13601  002F44  6E20               	movwf	(___aomod@divisor+6)^0,c
 13602  002F46  0E00               	movlw	0
 13603  002F48  6E21               	movwf	(___aomod@divisor+7)^0,c
 13604  002F4A  EC01  F01E         	call	___aomod	;wreg free
 13605  002F4E  C012  F035         	movff	?___aomod,??_dtoa
 13606  002F52  C013  F036         	movff	?___aomod+1,??_dtoa+1
 13607  002F56  C014  F037         	movff	?___aomod+2,??_dtoa+2
 13608  002F5A  C015  F038         	movff	?___aomod+3,??_dtoa+3
 13609  002F5E  C016  F039         	movff	?___aomod+4,??_dtoa+4
 13610  002F62  C017  F03A         	movff	?___aomod+5,??_dtoa+5
 13611  002F66  C018  F03B         	movff	?___aomod+6,??_dtoa+6
 13612  002F6A  C019  F03C         	movff	?___aomod+7,??_dtoa+7
 13613  002F6E  C035  F024         	movff	??_dtoa,abs@a
 13614  002F72  C037  F025         	movff	??_dtoa+2,abs@a+1
 13615  002F76  ECF3  F02B         	call	_abs	;wreg free
 13616  002F7A  5024               	movf	?_abs^0,w,c
 13617  002F7C  0F30               	addlw	48
 13618  002F7E  6EDF               	movwf	indf2,c
 13619                           
 13620                           ; BSR set to: 0
 13621                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 315:         --p;
 13622  002F80  07AC               	decf	dtoa@p& (0+255),f,b
 13623  002F82  A0D8               	btfss	status,0,c
 13624  002F84  07AD               	decf	(dtoa@p+1)& (0+255),f,b
 13625                           
 13626                           ; BSR set to: 0
 13627                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 316:         --w;
 13628  002F86  07AE               	decf	dtoa@w& (0+255),f,b
 13629  002F88  A0D8               	btfss	status,0,c
 13630  002F8A  07AF               	decf	(dtoa@w+1)& (0+255),f,b
 13631                           
 13632                           ; BSR set to: 0
 13633                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 317:         n = 
      +                          n / 10;
 13634  002F8C  C0B2  F012         	movff	dtoa@n,___aodiv@dividend
 13635  002F90  C0B3  F013         	movff	dtoa@n+1,___aodiv@dividend+1
 13636  002F94  C0B4  F014         	movff	dtoa@n+2,___aodiv@dividend+2
 13637  002F98  C0B5  F015         	movff	dtoa@n+3,___aodiv@dividend+3
 13638  002F9C  C0B6  F016         	movff	dtoa@n+4,___aodiv@dividend+4
 13639  002FA0  C0B7  F017         	movff	dtoa@n+5,___aodiv@dividend+5
 13640  002FA4  C0B8  F018         	movff	dtoa@n+6,___aodiv@dividend+6
 13641  002FA8  C0B9  F019         	movff	dtoa@n+7,___aodiv@dividend+7
 13642  002FAC  0E0A               	movlw	10
 13643  002FAE  6E1A               	movwf	___aodiv@divisor^0,c
 13644  002FB0  0E00               	movlw	0
 13645  002FB2  6E1B               	movwf	(___aodiv@divisor+1)^0,c
 13646  002FB4  0E00               	movlw	0
 13647  002FB6  6E1C               	movwf	(___aodiv@divisor+2)^0,c
 13648  002FB8  0E00               	movlw	0
 13649  002FBA  6E1D               	movwf	(___aodiv@divisor+3)^0,c
 13650  002FBC  0E00               	movlw	0
 13651  002FBE  6E1E               	movwf	(___aodiv@divisor+4)^0,c
 13652  002FC0  0E00               	movlw	0
 13653  002FC2  6E1F               	movwf	(___aodiv@divisor+5)^0,c
 13654  002FC4  0E00               	movlw	0
 13655  002FC6  6E20               	movwf	(___aodiv@divisor+6)^0,c
 13656  002FC8  0E00               	movlw	0
 13657  002FCA  6E21               	movwf	(___aodiv@divisor+7)^0,c
 13658  002FCC  EC85  F01B         	call	___aodiv	;wreg free
 13659  002FD0  C012  F0B2         	movff	?___aodiv,dtoa@n
 13660  002FD4  C013  F0B3         	movff	?___aodiv+1,dtoa@n+1
 13661  002FD8  C014  F0B4         	movff	?___aodiv+2,dtoa@n+2
 13662  002FDC  C015  F0B5         	movff	?___aodiv+3,dtoa@n+3
 13663  002FE0  C016  F0B6         	movff	?___aodiv+4,dtoa@n+4
 13664  002FE4  C017  F0B7         	movff	?___aodiv+5,dtoa@n+5
 13665  002FE8  C018  F0B8         	movff	?___aodiv+6,dtoa@n+6
 13666  002FEC  C019  F0B9         	movff	?___aodiv+7,dtoa@n+7
 13667  002FF0                     l8342:
 13668                           
 13669                           ; BSR set to: 0
 13670                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 13671  002FF0  BFBB               	btfsc	(dtoa@i+1)& (0+255),7,b
 13672  002FF2  D01F               	goto	u6100
 13673  002FF4  51BB               	movf	(dtoa@i+1)& (0+255),w,b
 13674  002FF6  E103               	bnz	u6060
 13675  002FF8  05BA               	decf	dtoa@i& (0+255),w,b
 13676  002FFA  A0D8               	btfss	status,0,c
 13677  002FFC  D01A               	goto	u6100
 13678  002FFE                     u6060:
 13679                           
 13680                           ; BSR set to: 0
 13681  002FFE  51B2               	movf	dtoa@n& (0+255),w,b
 13682  003000  11B3               	iorwf	(dtoa@n+1)& (0+255),w,b
 13683  003002  11B4               	iorwf	(dtoa@n+2)& (0+255),w,b
 13684  003004  11B5               	iorwf	(dtoa@n+3)& (0+255),w,b
 13685  003006  11B6               	iorwf	(dtoa@n+4)& (0+255),w,b
 13686  003008  11B7               	iorwf	(dtoa@n+5)& (0+255),w,b
 13687  00300A  11B8               	iorwf	(dtoa@n+6)& (0+255),w,b
 13688  00300C  11B9               	iorwf	(dtoa@n+7)& (0+255),w,b
 13689  00300E  A4D8               	btfss	status,2,c
 13690  003010  D775               	goto	l8332
 13691                           
 13692                           ; BSR set to: 0
 13693  003012  BFAD               	btfsc	(dtoa@p+1)& (0+255),7,b
 13694  003014  D005               	goto	u6080
 13695  003016  51AD               	movf	(dtoa@p+1)& (0+255),w,b
 13696  003018  E102               	bnz	u6081
 13697  00301A  05AC               	decf	dtoa@p& (0+255),w,b
 13698  00301C  B0D8               	btfsc	status,0,c
 13699  00301E                     u6081:
 13700  00301E  D76E               	goto	l8332
 13701  003020                     u6080:
 13702                           
 13703                           ; BSR set to: 0
 13704  003020  BFAF               	btfsc	(dtoa@w+1)& (0+255),7,b
 13705  003022  D007               	goto	u6100
 13706  003024  51AF               	movf	(dtoa@w+1)& (0+255),w,b
 13707  003026  E103               	bnz	u6090
 13708  003028  05AE               	decf	dtoa@w& (0+255),w,b
 13709  00302A  A0D8               	btfss	status,0,c
 13710  00302C  D002               	goto	u6100
 13711  00302E                     u6090:
 13712                           
 13713                           ; BSR set to: 0
 13714  00302E  B24A               	btfsc	_flags^0,1,c
 13715  003030  D765               	goto	l8332
 13716  003032                     u6100:
 13717                           
 13718                           ; BSR set to: 0
 13719                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 321:     if (s ||
      +                           (flags & (1 << 2))) {
 13720  003032  51B0               	movf	dtoa@s& (0+255),w,b
 13721  003034  11B1               	iorwf	(dtoa@s+1)& (0+255),w,b
 13722  003036  A4D8               	btfss	status,2,c
 13723  003038  D002               	goto	u6120
 13724                           
 13725                           ; BSR set to: 0
 13726  00303A  A44A               	btfss	_flags^0,2,c
 13727  00303C  D015               	goto	l8366
 13728  00303E                     u6120:
 13729                           
 13730                           ; BSR set to: 0
 13731                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 322:         --i;
 13732  00303E  07BA               	decf	dtoa@i& (0+255),f,b
 13733  003040  A0D8               	btfss	status,0,c
 13734  003042  07BB               	decf	(dtoa@i+1)& (0+255),f,b
 13735                           
 13736                           ; BSR set to: 0
 13737                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 323:         dbuf
      +                          [i] = s ? '-' : '+';
 13738  003044  51B0               	movf	dtoa@s& (0+255),w,b
 13739  003046  11B1               	iorwf	(dtoa@s+1)& (0+255),w,b
 13740  003048  A4D8               	btfss	status,2,c
 13741  00304A  D004               	goto	l8362
 13742                           
 13743                           ; BSR set to: 0
 13744  00304C  0E00               	movlw	0
 13745  00304E  6FAB               	movwf	(_dtoa$5500+1)& (0+255),b
 13746  003050  0E2B               	movlw	43
 13747  003052  D003               	goto	L8
 13748  003054                     l8362:
 13749                           
 13750                           ; BSR set to: 0
 13751  003054  0E00               	movlw	0
 13752  003056  6FAB               	movwf	(_dtoa$5500+1)& (0+255),b
 13753  003058  0E2D               	movlw	45
 13754  00305A                     L8:
 13755  00305A  6FAA               	movwf	_dtoa$5500& (0+255),b
 13756                           
 13757                           ; BSR set to: 0
 13758  00305C  51BA               	movf	dtoa@i& (0+255),w,b
 13759  00305E  0F8A               	addlw	low _dbuf
 13760  003060  6ED9               	movwf	fsr2l,c
 13761  003062  6ADA               	clrf	fsr2h,c
 13762  003064  C0AA  FFDF         	movff	_dtoa$5500,indf2
 13763  003068                     l8366:
 13764                           
 13765                           ; BSR set to: 0
 13766                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 327:     return p
      +                          ad(fp, &dbuf[i], w);
 13767  003068  C02C  F01F         	movff	dtoa@fp,pad@fp
 13768  00306C  51BA               	movf	dtoa@i& (0+255),w,b
 13769  00306E  0F8A               	addlw	low _dbuf
 13770  003070  6E20               	movwf	pad@buf^0,c
 13771  003072  C0AE  F021         	movff	dtoa@w,pad@p
 13772  003076  C0AF  F022         	movff	dtoa@w+1,pad@p+1
 13773  00307A  EC7A  F028         	call	_pad	;wreg free
 13774  00307E  C01F  F02C         	movff	?_pad,?_dtoa
 13775  003082  C020  F02D         	movff	?_pad+1,?_dtoa+1
 13776  003086  0012               	return		;funcret
 13777  003088                     __end_of_dtoa:
 13778                           	callstack 0
 13779                           
 13780 ;; *************** function _pad *****************
 13781 ;; Defined at:
 13782 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
 13783 ;; Parameters:    Size  Location     Type
 13784 ;;  fp              1   30[COMRAM] PTR struct _IO_FILE
 13785 ;;		 -> sprintf@f(6), 
 13786 ;;  buf             1   31[COMRAM] PTR unsigned char 
 13787 ;;		 -> dbuf(32), 
 13788 ;;  p               2   32[COMRAM] int 
 13789 ;; Auto vars:     Size  Location     Type
 13790 ;;  w               2   37[COMRAM] int 
 13791 ;;  i               2   35[COMRAM] int 
 13792 ;; Return value:  Size  Location     Type
 13793 ;;                  2   30[COMRAM] int 
 13794 ;; Registers used:
 13795 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13796 ;; Tracked objects:
 13797 ;;		On entry : 3F/0
 13798 ;;		On exit  : 0/0
 13799 ;;		Unchanged: 0/0
 13800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13801 ;;      Params:         4       0       0       0       0       0       0
 13802 ;;      Locals:         4       0       0       0       0       0       0
 13803 ;;      Temps:          1       0       0       0       0       0       0
 13804 ;;      Totals:         9       0       0       0       0       0       0
 13805 ;;Total ram usage:        9 bytes
 13806 ;; Hardware stack levels used: 1
 13807 ;; Hardware stack levels required when called: 7
 13808 ;; This function calls:
 13809 ;;		_fputc
 13810 ;;		_fputs
 13811 ;;		_strlen
 13812 ;; This function is called by:
 13813 ;;		_dtoa
 13814 ;; This function uses a non-reentrant model
 13815 ;;
 13816                           
 13817                           	psect	text59
 13818  0050F4                     __ptext59:
 13819                           	callstack 0
 13820  0050F4                     _pad:
 13821                           	callstack 14
 13822                           
 13823                           ; BSR set to: 0
 13824                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
 13825                           
 13826                           ;incstack = 0
 13827  0050F4  A04A               	btfss	_flags^0,0,c
 13828  0050F6  D006               	goto	l8286
 13829                           
 13830                           ; BSR set to: 0
 13831                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
 13832  0050F8  C020  F01A         	movff	pad@buf,fputs@s
 13833  0050FC  C01F  F01B         	movff	pad@fp,fputs@fp
 13834  005100  EC0C  F02C         	call	_fputs	;wreg free
 13835  005104                     l8286:
 13836                           
 13837                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
 13838  005104  BE22               	btfsc	(pad@p+1)^0,7,c
 13839  005106  D005               	goto	l8290
 13840  005108  C021  F026         	movff	pad@p,pad@w
 13841  00510C  C022  F027         	movff	pad@p+1,pad@w+1
 13842  005110  D004               	goto	l1579
 13843  005112                     l8290:
 13844  005112  0E00               	movlw	0
 13845  005114  6E27               	movwf	(pad@w+1)^0,c
 13846  005116  0E00               	movlw	0
 13847  005118  6E26               	movwf	pad@w^0,c
 13848  00511A                     l1579:
 13849                           
 13850                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 83:     i = 0;
 13851  00511A  0E00               	movlw	0
 13852  00511C  6E25               	movwf	(pad@i+1)^0,c
 13853  00511E  0E00               	movlw	0
 13854  005120  6E24               	movwf	pad@i^0,c
 13855                           
 13856                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
 13857  005122  D00A               	goto	l8296
 13858  005124                     l8292:
 13859                           
 13860                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
 13861  005124  0E00               	movlw	0
 13862  005126  6E13               	movwf	(fputc@c+1)^0,c
 13863  005128  0E20               	movlw	32
 13864  00512A  6E12               	movwf	fputc@c^0,c
 13865  00512C  C01F  F014         	movff	pad@fp,fputc@fp
 13866  005130  EC27  F027         	call	_fputc	;wreg free
 13867                           
 13868                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 86:         ++i;
 13869  005134  4A24               	infsnz	pad@i^0,f,c
 13870  005136  2A25               	incf	(pad@i+1)^0,f,c
 13871  005138                     l8296:
 13872                           
 13873                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
 13874  005138  5026               	movf	pad@w^0,w,c
 13875  00513A  5C24               	subwf	pad@i^0,w,c
 13876  00513C  5025               	movf	(pad@i+1)^0,w,c
 13877  00513E  0A80               	xorlw	128
 13878  005140  6E23               	movwf	??_pad^0,c
 13879  005142  5027               	movf	(pad@w+1)^0,w,c
 13880  005144  0A80               	xorlw	128
 13881  005146  5823               	subwfb	??_pad^0,w,c
 13882  005148  A0D8               	btfss	status,0,c
 13883  00514A  D7EC               	goto	l8292
 13884                           
 13885                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
 13886  00514C  B04A               	btfsc	_flags^0,0,c
 13887  00514E  D006               	goto	l8300
 13888                           
 13889                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
 13890  005150  C020  F01A         	movff	pad@buf,fputs@s
 13891  005154  C01F  F01B         	movff	pad@fp,fputs@fp
 13892  005158  EC0C  F02C         	call	_fputs	;wreg free
 13893  00515C                     l8300:
 13894                           
 13895                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 94:     return (i
      +                          nt)(strlen(buf) + (size_t)w);
 13896  00515C  C020  F012         	movff	pad@buf,strlen@s
 13897  005160  6A13               	clrf	(strlen@s+1)^0,c
 13898  005162  ECF8  F02A         	call	_strlen	;wreg free
 13899  005166  5026               	movf	pad@w^0,w,c
 13900  005168  2412               	addwf	?_strlen^0,w,c
 13901  00516A  6E1F               	movwf	?_pad^0,c
 13902  00516C  5027               	movf	(pad@w+1)^0,w,c
 13903  00516E  2013               	addwfc	(?_strlen+1)^0,w,c
 13904  005170  6E20               	movwf	(?_pad+1)^0,c
 13905  005172  0012               	return		;funcret
 13906  005174                     __end_of_pad:
 13907                           	callstack 0
 13908                           
 13909 ;; *************** function _fputs *****************
 13910 ;; Defined at:
 13911 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputs.c"
 13912 ;; Parameters:    Size  Location     Type
 13913 ;;  s               1   25[COMRAM] PTR const unsigned char 
 13914 ;;		 -> dbuf(32), 
 13915 ;;  fp              1   26[COMRAM] PTR struct _IO_FILE
 13916 ;;		 -> sprintf@f(6), 
 13917 ;; Auto vars:     Size  Location     Type
 13918 ;;  i               2   28[COMRAM] int 
 13919 ;;  c               1   27[COMRAM] unsigned char 
 13920 ;; Return value:  Size  Location     Type
 13921 ;;                  2   25[COMRAM] int 
 13922 ;; Registers used:
 13923 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13924 ;; Tracked objects:
 13925 ;;		On entry : 0/0
 13926 ;;		On exit  : 0/0
 13927 ;;		Unchanged: 0/0
 13928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13929 ;;      Params:         2       0       0       0       0       0       0
 13930 ;;      Locals:         3       0       0       0       0       0       0
 13931 ;;      Temps:          0       0       0       0       0       0       0
 13932 ;;      Totals:         5       0       0       0       0       0       0
 13933 ;;Total ram usage:        5 bytes
 13934 ;; Hardware stack levels used: 1
 13935 ;; Hardware stack levels required when called: 6
 13936 ;; This function calls:
 13937 ;;		_fputc
 13938 ;; This function is called by:
 13939 ;;		_pad
 13940 ;; This function uses a non-reentrant model
 13941 ;;
 13942                           
 13943                           	psect	text60
 13944  005818                     __ptext60:
 13945                           	callstack 0
 13946  005818                     _fputs:
 13947                           	callstack 14
 13948                           
 13949                           ;incstack = 0
 13950  005818  0E00               	movlw	0
 13951  00581A  6E1E               	movwf	(fputs@i+1)^0,c
 13952  00581C  0E00               	movlw	0
 13953  00581E  6E1D               	movwf	fputs@i^0,c
 13954  005820  D009               	goto	l8200
 13955  005822                     l8196:
 13956  005822  C01C  F012         	movff	fputs@c,fputc@c
 13957  005826  6A13               	clrf	(fputc@c+1)^0,c
 13958  005828  C01B  F014         	movff	fputs@fp,fputc@fp
 13959  00582C  EC27  F027         	call	_fputc	;wreg free
 13960  005830  4A1D               	infsnz	fputs@i^0,f,c
 13961  005832  2A1E               	incf	(fputs@i+1)^0,f,c
 13962  005834                     l8200:
 13963  005834  501A               	movf	fputs@s^0,w,c
 13964  005836  241D               	addwf	fputs@i^0,w,c
 13965  005838  6ED9               	movwf	fsr2l,c
 13966  00583A  6ADA               	clrf	fsr2h,c
 13967  00583C  50DF               	movf	indf2,w,c
 13968  00583E  6E1C               	movwf	fputs@c^0,c
 13969  005840  501C               	movf	fputs@c^0,w,c
 13970  005842  B4D8               	btfsc	status,2,c
 13971  005844  0012               	return	
 13972  005846  D7ED               	goto	l8196
 13973  005848                     __end_of_fputs:
 13974                           	callstack 0
 13975                           
 13976 ;; *************** function _fputc *****************
 13977 ;; Defined at:
 13978 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputc.c"
 13979 ;; Parameters:    Size  Location     Type
 13980 ;;  c               2   17[COMRAM] int 
 13981 ;;  fp              1   19[COMRAM] PTR struct _IO_FILE
 13982 ;;		 -> sprintf@f(6), 
 13983 ;; Auto vars:     Size  Location     Type
 13984 ;;		None
 13985 ;; Return value:  Size  Location     Type
 13986 ;;                  2   17[COMRAM] int 
 13987 ;; Registers used:
 13988 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13989 ;; Tracked objects:
 13990 ;;		On entry : 0/0
 13991 ;;		On exit  : 0/0
 13992 ;;		Unchanged: 0/0
 13993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13994 ;;      Params:         3       0       0       0       0       0       0
 13995 ;;      Locals:         0       0       0       0       0       0       0
 13996 ;;      Temps:          5       0       0       0       0       0       0
 13997 ;;      Totals:         8       0       0       0       0       0       0
 13998 ;;Total ram usage:        8 bytes
 13999 ;; Hardware stack levels used: 1
 14000 ;; Hardware stack levels required when called: 5
 14001 ;; This function calls:
 14002 ;;		_putch
 14003 ;; This function is called by:
 14004 ;;		_pad
 14005 ;;		_vfpfcnvrt
 14006 ;;		_fputs
 14007 ;; This function uses a non-reentrant model
 14008 ;;
 14009                           
 14010                           	psect	text61
 14011  004E4E                     __ptext61:
 14012                           	callstack 0
 14013  004E4E                     _fputc:
 14014                           	callstack 17
 14015                           
 14016                           ;incstack = 0
 14017  004E4E  5014               	movf	fputc@fp^0,w,c
 14018  004E50  B4D8               	btfsc	status,2,c
 14019  004E52  D003               	goto	u5750
 14020  004E54  5014               	movf	fputc@fp^0,w,c
 14021  004E56  A4D8               	btfss	status,2,c
 14022  004E58  D004               	goto	l8176
 14023  004E5A                     u5750:
 14024  004E5A  5012               	movf	fputc@c^0,w,c
 14025  004E5C  EC0B  F02D         	call	_putch
 14026  004E60  0012               	return	
 14027  004E62                     l8176:
 14028  004E62  5014               	movf	fputc@fp^0,w,c
 14029  004E64  6ED9               	movwf	fsr2l,c
 14030  004E66  6ADA               	clrf	fsr2h,c
 14031  004E68  0E04               	movlw	4
 14032  004E6A  26D9               	addwf	fsr2l,f,c
 14033  004E6C  50DE               	movf	postinc2,w,c
 14034  004E6E  10DE               	iorwf	postinc2,w,c
 14035  004E70  B4D8               	btfsc	status,2,c
 14036  004E72  D014               	goto	u5770
 14037  004E74  5014               	movf	fputc@fp^0,w,c
 14038  004E76  6ED9               	movwf	fsr2l,c
 14039  004E78  6ADA               	clrf	fsr2h,c
 14040  004E7A  0E04               	movlw	4
 14041  004E7C  26D9               	addwf	fsr2l,f,c
 14042  004E7E  5014               	movf	fputc@fp^0,w,c
 14043  004E80  6EE1               	movwf	fsr1l,c
 14044  004E82  6AE2               	clrf	fsr1h,c
 14045  004E84  0E02               	movlw	2
 14046  004E86  26E1               	addwf	fsr1l,f,c
 14047  004E88  50DE               	movf	postinc2,w,c
 14048  004E8A  5CE6               	subwf	postinc1,w,c
 14049  004E8C  50E6               	movf	postinc1,w,c
 14050  004E8E  0A80               	xorlw	128
 14051  004E90  6E19               	movwf	(??_fputc+4)^0,c
 14052  004E92  50DE               	movf	postinc2,w,c
 14053  004E94  0A80               	xorlw	128
 14054  004E96  5819               	subwfb	(??_fputc+4)^0,w,c
 14055  004E98  B0D8               	btfsc	status,0,c
 14056  004E9A  0012               	return	
 14057  004E9C                     u5770:
 14058  004E9C  5014               	movf	fputc@fp^0,w,c
 14059  004E9E  6ED9               	movwf	fsr2l,c
 14060  004EA0  6ADA               	clrf	fsr2h,c
 14061  004EA2  0E02               	movlw	2
 14062  004EA4  26D9               	addwf	fsr2l,f,c
 14063  004EA6  CFDE F015          	movff	postinc2,??_fputc
 14064  004EAA  CFDD F016          	movff	postdec2,??_fputc+1
 14065  004EAE  5014               	movf	fputc@fp^0,w,c
 14066  004EB0  6ED9               	movwf	fsr2l,c
 14067  004EB2  6ADA               	clrf	fsr2h,c
 14068  004EB4  CFDE F017          	movff	postinc2,??_fputc+2
 14069  004EB8  CFDD F018          	movff	postdec2,??_fputc+3
 14070  004EBC  5015               	movf	??_fputc^0,w,c
 14071  004EBE  2417               	addwf	(??_fputc+2)^0,w,c
 14072  004EC0  6ED9               	movwf	fsr2l,c
 14073  004EC2  5016               	movf	(??_fputc+1)^0,w,c
 14074  004EC4  2018               	addwfc	(??_fputc+3)^0,w,c
 14075  004EC6  6EDA               	movwf	fsr2h,c
 14076  004EC8  C012  FFDF         	movff	fputc@c,indf2
 14077  004ECC  5014               	movf	fputc@fp^0,w,c
 14078  004ECE  6ED9               	movwf	fsr2l,c
 14079  004ED0  6ADA               	clrf	fsr2h,c
 14080  004ED2  0E02               	movlw	2
 14081  004ED4  26D9               	addwf	fsr2l,f,c
 14082  004ED6  2ADE               	incf	postinc2,f,c
 14083  004ED8  0E00               	movlw	0
 14084  004EDA  22DD               	addwfc	postdec2,f,c
 14085  004EDC  0012               	return		;funcret
 14086  004EDE                     __end_of_fputc:
 14087                           	callstack 0
 14088                           
 14089 ;; *************** function _putch *****************
 14090 ;; Defined at:
 14091 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\putch.c"
 14092 ;; Parameters:    Size  Location     Type
 14093 ;;  c               1    wreg     unsigned char 
 14094 ;; Auto vars:     Size  Location     Type
 14095 ;;  c               1    0[COMRAM] unsigned char 
 14096 ;; Return value:  Size  Location     Type
 14097 ;;                  1    wreg      void 
 14098 ;; Registers used:
 14099 ;;		wreg
 14100 ;; Tracked objects:
 14101 ;;		On entry : 0/0
 14102 ;;		On exit  : 0/0
 14103 ;;		Unchanged: 0/0
 14104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14105 ;;      Params:         0       0       0       0       0       0       0
 14106 ;;      Locals:         0       0       0       0       0       0       0
 14107 ;;      Temps:          0       0       0       0       0       0       0
 14108 ;;      Totals:         0       0       0       0       0       0       0
 14109 ;;Total ram usage:        0 bytes
 14110 ;; Hardware stack levels used: 1
 14111 ;; Hardware stack levels required when called: 4
 14112 ;; This function calls:
 14113 ;;		Nothing
 14114 ;; This function is called by:
 14115 ;;		_fputc
 14116 ;; This function uses a non-reentrant model
 14117 ;;
 14118                           
 14119                           	psect	text62
 14120  005A16                     __ptext62:
 14121                           	callstack 0
 14122  005A16                     _putch:
 14123                           	callstack 17
 14124                           
 14125                           ;incstack = 0
 14126  005A16  0012               	return		;funcret
 14127  005A18                     __end_of_putch:
 14128                           	callstack 0
 14129                           
 14130 ;; *************** function _abs *****************
 14131 ;; Defined at:
 14132 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\abs.c"
 14133 ;; Parameters:    Size  Location     Type
 14134 ;;  a               2   35[COMRAM] int 
 14135 ;; Auto vars:     Size  Location     Type
 14136 ;;		None
 14137 ;; Return value:  Size  Location     Type
 14138 ;;                  2   35[COMRAM] int 
 14139 ;; Registers used:
 14140 ;;		wreg, status,2, status,0
 14141 ;; Tracked objects:
 14142 ;;		On entry : 3F/0
 14143 ;;		On exit  : 3F/0
 14144 ;;		Unchanged: 3F/0
 14145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14146 ;;      Params:         2       0       0       0       0       0       0
 14147 ;;      Locals:         0       0       0       0       0       0       0
 14148 ;;      Temps:          2       0       0       0       0       0       0
 14149 ;;      Totals:         4       0       0       0       0       0       0
 14150 ;;Total ram usage:        4 bytes
 14151 ;; Hardware stack levels used: 1
 14152 ;; Hardware stack levels required when called: 4
 14153 ;; This function calls:
 14154 ;;		Nothing
 14155 ;; This function is called by:
 14156 ;;		_dtoa
 14157 ;; This function uses a non-reentrant model
 14158 ;;
 14159                           
 14160                           	psect	text63
 14161  0057E6                     __ptext63:
 14162                           	callstack 0
 14163  0057E6                     _abs:
 14164                           	callstack 17
 14165                           
 14166                           ; BSR set to: 0
 14167                           
 14168                           ;incstack = 0
 14169  0057E6  BE25               	btfsc	(abs@a+1)^0,7,c
 14170  0057E8  D005               	goto	u5980
 14171  0057EA  5025               	movf	(abs@a+1)^0,w,c
 14172  0057EC  E110               	bnz	l1628
 14173  0057EE  0424               	decf	abs@a^0,w,c
 14174  0057F0  B0D8               	btfsc	status,0,c
 14175  0057F2  D00D               	goto	l1628
 14176  0057F4                     u5980:
 14177                           
 14178                           ; BSR set to: 0
 14179  0057F4  C024  F026         	movff	abs@a,??_abs
 14180  0057F8  C025  F027         	movff	abs@a+1,??_abs+1
 14181  0057FC  1E26               	comf	??_abs^0,f,c
 14182  0057FE  1E27               	comf	(??_abs+1)^0,f,c
 14183  005800  4A26               	infsnz	??_abs^0,f,c
 14184  005802  2A27               	incf	(??_abs+1)^0,f,c
 14185  005804  C026  F024         	movff	??_abs,?_abs
 14186  005808  C027  F025         	movff	??_abs+1,?_abs+1
 14187  00580C  0012               	return	
 14188  00580E                     l1628:
 14189                           
 14190                           ; BSR set to: 0
 14191  00580E  C024  F024         	movff	abs@a,?_abs
 14192  005812  C025  F025         	movff	abs@a+1,?_abs+1
 14193                           
 14194                           ; BSR set to: 0
 14195  005816  0012               	return		;funcret
 14196  005818                     __end_of_abs:
 14197                           	callstack 0
 14198                           
 14199 ;; *************** function ___aomod *****************
 14200 ;; Defined at:
 14201 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\aomod.c"
 14202 ;; Parameters:    Size  Location     Type
 14203 ;;  dividend        8   17[COMRAM] long long 
 14204 ;;  divisor         8   25[COMRAM] long long 
 14205 ;; Auto vars:     Size  Location     Type
 14206 ;;  sign            1   34[COMRAM] unsigned char 
 14207 ;;  counter         1   33[COMRAM] unsigned char 
 14208 ;; Return value:  Size  Location     Type
 14209 ;;                  8   17[COMRAM] long long 
 14210 ;; Registers used:
 14211 ;;		wreg, status,2, status,0
 14212 ;; Tracked objects:
 14213 ;;		On entry : 3F/0
 14214 ;;		On exit  : 3F/0
 14215 ;;		Unchanged: 3F/0
 14216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14217 ;;      Params:        16       0       0       0       0       0       0
 14218 ;;      Locals:         2       0       0       0       0       0       0
 14219 ;;      Temps:          0       0       0       0       0       0       0
 14220 ;;      Totals:        18       0       0       0       0       0       0
 14221 ;;Total ram usage:       18 bytes
 14222 ;; Hardware stack levels used: 1
 14223 ;; Hardware stack levels required when called: 4
 14224 ;; This function calls:
 14225 ;;		Nothing
 14226 ;; This function is called by:
 14227 ;;		_dtoa
 14228 ;; This function uses a non-reentrant model
 14229 ;;
 14230                           
 14231                           	psect	text64
 14232  003C02                     __ptext64:
 14233                           	callstack 0
 14234  003C02                     ___aomod:
 14235                           	callstack 17
 14236                           
 14237                           ; BSR set to: 0
 14238                           
 14239                           ; BSR set to: 0
 14240                           ;incstack = 0
 14241  003C02  0E00               	movlw	0
 14242  003C04  6E23               	movwf	___aomod@sign^0,c
 14243                           
 14244                           ; BSR set to: 0
 14245  003C06  AE19               	btfss	(___aomod@dividend+7)^0,7,c
 14246  003C08  D012               	goto	l8254
 14247                           
 14248                           ; BSR set to: 0
 14249  003C0A  1E19               	comf	(___aomod@dividend+7)^0,f,c
 14250  003C0C  1E18               	comf	(___aomod@dividend+6)^0,f,c
 14251  003C0E  1E17               	comf	(___aomod@dividend+5)^0,f,c
 14252  003C10  1E16               	comf	(___aomod@dividend+4)^0,f,c
 14253  003C12  1E15               	comf	(___aomod@dividend+3)^0,f,c
 14254  003C14  1E14               	comf	(___aomod@dividend+2)^0,f,c
 14255  003C16  1E13               	comf	(___aomod@dividend+1)^0,f,c
 14256  003C18  6C12               	negf	___aomod@dividend^0,c
 14257  003C1A  0E00               	movlw	0
 14258  003C1C  2213               	addwfc	(___aomod@dividend+1)^0,f,c
 14259  003C1E  2214               	addwfc	(___aomod@dividend+2)^0,f,c
 14260  003C20  2215               	addwfc	(___aomod@dividend+3)^0,f,c
 14261  003C22  2216               	addwfc	(___aomod@dividend+4)^0,f,c
 14262  003C24  2217               	addwfc	(___aomod@dividend+5)^0,f,c
 14263  003C26  2218               	addwfc	(___aomod@dividend+6)^0,f,c
 14264  003C28  2219               	addwfc	(___aomod@dividend+7)^0,f,c
 14265                           
 14266                           ; BSR set to: 0
 14267  003C2A  0E01               	movlw	1
 14268  003C2C  6E23               	movwf	___aomod@sign^0,c
 14269  003C2E                     l8254:
 14270                           
 14271                           ; BSR set to: 0
 14272  003C2E  AE21               	btfss	(___aomod@divisor+7)^0,7,c
 14273  003C30  D010               	goto	l8258
 14274                           
 14275                           ; BSR set to: 0
 14276  003C32  1E21               	comf	(___aomod@divisor+7)^0,f,c
 14277  003C34  1E20               	comf	(___aomod@divisor+6)^0,f,c
 14278  003C36  1E1F               	comf	(___aomod@divisor+5)^0,f,c
 14279  003C38  1E1E               	comf	(___aomod@divisor+4)^0,f,c
 14280  003C3A  1E1D               	comf	(___aomod@divisor+3)^0,f,c
 14281  003C3C  1E1C               	comf	(___aomod@divisor+2)^0,f,c
 14282  003C3E  1E1B               	comf	(___aomod@divisor+1)^0,f,c
 14283  003C40  6C1A               	negf	___aomod@divisor^0,c
 14284  003C42  0E00               	movlw	0
 14285  003C44  221B               	addwfc	(___aomod@divisor+1)^0,f,c
 14286  003C46  221C               	addwfc	(___aomod@divisor+2)^0,f,c
 14287  003C48  221D               	addwfc	(___aomod@divisor+3)^0,f,c
 14288  003C4A  221E               	addwfc	(___aomod@divisor+4)^0,f,c
 14289  003C4C  221F               	addwfc	(___aomod@divisor+5)^0,f,c
 14290  003C4E  2220               	addwfc	(___aomod@divisor+6)^0,f,c
 14291  003C50  2221               	addwfc	(___aomod@divisor+7)^0,f,c
 14292  003C52                     l8258:
 14293                           
 14294                           ; BSR set to: 0
 14295  003C52  501A               	movf	___aomod@divisor^0,w,c
 14296  003C54  101B               	iorwf	(___aomod@divisor+1)^0,w,c
 14297  003C56  101C               	iorwf	(___aomod@divisor+2)^0,w,c
 14298  003C58  101D               	iorwf	(___aomod@divisor+3)^0,w,c
 14299  003C5A  101E               	iorwf	(___aomod@divisor+4)^0,w,c
 14300  003C5C  101F               	iorwf	(___aomod@divisor+5)^0,w,c
 14301  003C5E  1020               	iorwf	(___aomod@divisor+6)^0,w,c
 14302  003C60  1021               	iorwf	(___aomod@divisor+7)^0,w,c
 14303  003C62  B4D8               	btfsc	status,2,c
 14304  003C64  D03C               	goto	l8274
 14305                           
 14306                           ; BSR set to: 0
 14307  003C66  0E01               	movlw	1
 14308  003C68  6E22               	movwf	___aomod@counter^0,c
 14309  003C6A  D00A               	goto	l8264
 14310  003C6C                     l8262:
 14311                           
 14312                           ; BSR set to: 0
 14313  003C6C  90D8               	bcf	status,0,c
 14314  003C6E  361A               	rlcf	___aomod@divisor^0,f,c
 14315  003C70  361B               	rlcf	(___aomod@divisor+1)^0,f,c
 14316  003C72  361C               	rlcf	(___aomod@divisor+2)^0,f,c
 14317  003C74  361D               	rlcf	(___aomod@divisor+3)^0,f,c
 14318  003C76  361E               	rlcf	(___aomod@divisor+4)^0,f,c
 14319  003C78  361F               	rlcf	(___aomod@divisor+5)^0,f,c
 14320  003C7A  3620               	rlcf	(___aomod@divisor+6)^0,f,c
 14321  003C7C  3621               	rlcf	(___aomod@divisor+7)^0,f,c
 14322  003C7E  2A22               	incf	___aomod@counter^0,f,c
 14323  003C80                     l8264:
 14324                           
 14325                           ; BSR set to: 0
 14326  003C80  AE21               	btfss	(___aomod@divisor+7)^0,7,c
 14327  003C82  D7F4               	goto	l8262
 14328  003C84                     u5910:
 14329                           
 14330                           ; BSR set to: 0
 14331  003C84  501A               	movf	___aomod@divisor^0,w,c
 14332  003C86  5C12               	subwf	___aomod@dividend^0,w,c
 14333  003C88  501B               	movf	(___aomod@divisor+1)^0,w,c
 14334  003C8A  5813               	subwfb	(___aomod@dividend+1)^0,w,c
 14335  003C8C  501C               	movf	(___aomod@divisor+2)^0,w,c
 14336  003C8E  5814               	subwfb	(___aomod@dividend+2)^0,w,c
 14337  003C90  501D               	movf	(___aomod@divisor+3)^0,w,c
 14338  003C92  5815               	subwfb	(___aomod@dividend+3)^0,w,c
 14339  003C94  501E               	movf	(___aomod@divisor+4)^0,w,c
 14340  003C96  5816               	subwfb	(___aomod@dividend+4)^0,w,c
 14341  003C98  501F               	movf	(___aomod@divisor+5)^0,w,c
 14342  003C9A  5817               	subwfb	(___aomod@dividend+5)^0,w,c
 14343  003C9C  5020               	movf	(___aomod@divisor+6)^0,w,c
 14344  003C9E  5818               	subwfb	(___aomod@dividend+6)^0,w,c
 14345  003CA0  5021               	movf	(___aomod@divisor+7)^0,w,c
 14346  003CA2  5819               	subwfb	(___aomod@dividend+7)^0,w,c
 14347  003CA4  A0D8               	btfss	status,0,c
 14348  003CA6  D010               	goto	l8270
 14349                           
 14350                           ; BSR set to: 0
 14351  003CA8  501A               	movf	___aomod@divisor^0,w,c
 14352  003CAA  5E12               	subwf	___aomod@dividend^0,f,c
 14353  003CAC  501B               	movf	(___aomod@divisor+1)^0,w,c
 14354  003CAE  5A13               	subwfb	(___aomod@dividend+1)^0,f,c
 14355  003CB0  501C               	movf	(___aomod@divisor+2)^0,w,c
 14356  003CB2  5A14               	subwfb	(___aomod@dividend+2)^0,f,c
 14357  003CB4  501D               	movf	(___aomod@divisor+3)^0,w,c
 14358  003CB6  5A15               	subwfb	(___aomod@dividend+3)^0,f,c
 14359  003CB8  501E               	movf	(___aomod@divisor+4)^0,w,c
 14360  003CBA  5A16               	subwfb	(___aomod@dividend+4)^0,f,c
 14361  003CBC  501F               	movf	(___aomod@divisor+5)^0,w,c
 14362  003CBE  5A17               	subwfb	(___aomod@dividend+5)^0,f,c
 14363  003CC0  5020               	movf	(___aomod@divisor+6)^0,w,c
 14364  003CC2  5A18               	subwfb	(___aomod@dividend+6)^0,f,c
 14365  003CC4  5021               	movf	(___aomod@divisor+7)^0,w,c
 14366  003CC6  5A19               	subwfb	(___aomod@dividend+7)^0,f,c
 14367  003CC8                     l8270:
 14368                           
 14369                           ; BSR set to: 0
 14370  003CC8  90D8               	bcf	status,0,c
 14371  003CCA  3221               	rrcf	(___aomod@divisor+7)^0,f,c
 14372  003CCC  3220               	rrcf	(___aomod@divisor+6)^0,f,c
 14373  003CCE  321F               	rrcf	(___aomod@divisor+5)^0,f,c
 14374  003CD0  321E               	rrcf	(___aomod@divisor+4)^0,f,c
 14375  003CD2  321D               	rrcf	(___aomod@divisor+3)^0,f,c
 14376  003CD4  321C               	rrcf	(___aomod@divisor+2)^0,f,c
 14377  003CD6  321B               	rrcf	(___aomod@divisor+1)^0,f,c
 14378  003CD8  321A               	rrcf	___aomod@divisor^0,f,c
 14379                           
 14380                           ; BSR set to: 0
 14381  003CDA  2E22               	decfsz	___aomod@counter^0,f,c
 14382  003CDC  D7D3               	goto	u5910
 14383  003CDE                     l8274:
 14384                           
 14385                           ; BSR set to: 0
 14386  003CDE  5023               	movf	___aomod@sign^0,w,c
 14387  003CE0  B4D8               	btfsc	status,2,c
 14388  003CE2  D010               	goto	l8278
 14389                           
 14390                           ; BSR set to: 0
 14391  003CE4  1E19               	comf	(___aomod@dividend+7)^0,f,c
 14392  003CE6  1E18               	comf	(___aomod@dividend+6)^0,f,c
 14393  003CE8  1E17               	comf	(___aomod@dividend+5)^0,f,c
 14394  003CEA  1E16               	comf	(___aomod@dividend+4)^0,f,c
 14395  003CEC  1E15               	comf	(___aomod@dividend+3)^0,f,c
 14396  003CEE  1E14               	comf	(___aomod@dividend+2)^0,f,c
 14397  003CF0  1E13               	comf	(___aomod@dividend+1)^0,f,c
 14398  003CF2  6C12               	negf	___aomod@dividend^0,c
 14399  003CF4  0E00               	movlw	0
 14400  003CF6  2213               	addwfc	(___aomod@dividend+1)^0,f,c
 14401  003CF8  2214               	addwfc	(___aomod@dividend+2)^0,f,c
 14402  003CFA  2215               	addwfc	(___aomod@dividend+3)^0,f,c
 14403  003CFC  2216               	addwfc	(___aomod@dividend+4)^0,f,c
 14404  003CFE  2217               	addwfc	(___aomod@dividend+5)^0,f,c
 14405  003D00  2218               	addwfc	(___aomod@dividend+6)^0,f,c
 14406  003D02  2219               	addwfc	(___aomod@dividend+7)^0,f,c
 14407  003D04                     l8278:
 14408                           
 14409                           ; BSR set to: 0
 14410  003D04  C012  F012         	movff	___aomod@dividend,?___aomod
 14411  003D08  C013  F013         	movff	___aomod@dividend+1,?___aomod+1
 14412  003D0C  C014  F014         	movff	___aomod@dividend+2,?___aomod+2
 14413  003D10  C015  F015         	movff	___aomod@dividend+3,?___aomod+3
 14414  003D14  C016  F016         	movff	___aomod@dividend+4,?___aomod+4
 14415  003D18  C017  F017         	movff	___aomod@dividend+5,?___aomod+5
 14416  003D1C  C018  F018         	movff	___aomod@dividend+6,?___aomod+6
 14417  003D20  C019  F019         	movff	___aomod@dividend+7,?___aomod+7
 14418                           
 14419                           ; BSR set to: 0
 14420  003D24  0012               	return		;funcret
 14421  003D26                     __end_of___aomod:
 14422                           	callstack 0
 14423                           
 14424 ;; *************** function ___aodiv *****************
 14425 ;; Defined at:
 14426 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\aodiv.c"
 14427 ;; Parameters:    Size  Location     Type
 14428 ;;  dividend        8   17[COMRAM] long long 
 14429 ;;  divisor         8   25[COMRAM] long long 
 14430 ;; Auto vars:     Size  Location     Type
 14431 ;;  quotient        8   35[COMRAM] long long 
 14432 ;;  sign            1   34[COMRAM] unsigned char 
 14433 ;;  counter         1   33[COMRAM] unsigned char 
 14434 ;; Return value:  Size  Location     Type
 14435 ;;                  8   17[COMRAM] long long 
 14436 ;; Registers used:
 14437 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14438 ;; Tracked objects:
 14439 ;;		On entry : 3F/0
 14440 ;;		On exit  : 3F/0
 14441 ;;		Unchanged: 3F/0
 14442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14443 ;;      Params:        16       0       0       0       0       0       0
 14444 ;;      Locals:        10       0       0       0       0       0       0
 14445 ;;      Temps:          0       0       0       0       0       0       0
 14446 ;;      Totals:        26       0       0       0       0       0       0
 14447 ;;Total ram usage:       26 bytes
 14448 ;; Hardware stack levels used: 1
 14449 ;; Hardware stack levels required when called: 4
 14450 ;; This function calls:
 14451 ;;		Nothing
 14452 ;; This function is called by:
 14453 ;;		_dtoa
 14454 ;; This function uses a non-reentrant model
 14455 ;;
 14456                           
 14457                           	psect	text65
 14458  00370A                     __ptext65:
 14459                           	callstack 0
 14460  00370A                     ___aodiv:
 14461                           	callstack 17
 14462                           
 14463                           ; BSR set to: 0
 14464                           
 14465                           ; BSR set to: 0
 14466                           ;incstack = 0
 14467  00370A  0E00               	movlw	0
 14468  00370C  6E23               	movwf	___aodiv@sign^0,c
 14469                           
 14470                           ; BSR set to: 0
 14471  00370E  AE21               	btfss	(___aodiv@divisor+7)^0,7,c
 14472  003710  D012               	goto	l8210
 14473                           
 14474                           ; BSR set to: 0
 14475  003712  1E21               	comf	(___aodiv@divisor+7)^0,f,c
 14476  003714  1E20               	comf	(___aodiv@divisor+6)^0,f,c
 14477  003716  1E1F               	comf	(___aodiv@divisor+5)^0,f,c
 14478  003718  1E1E               	comf	(___aodiv@divisor+4)^0,f,c
 14479  00371A  1E1D               	comf	(___aodiv@divisor+3)^0,f,c
 14480  00371C  1E1C               	comf	(___aodiv@divisor+2)^0,f,c
 14481  00371E  1E1B               	comf	(___aodiv@divisor+1)^0,f,c
 14482  003720  6C1A               	negf	___aodiv@divisor^0,c
 14483  003722  0E00               	movlw	0
 14484  003724  221B               	addwfc	(___aodiv@divisor+1)^0,f,c
 14485  003726  221C               	addwfc	(___aodiv@divisor+2)^0,f,c
 14486  003728  221D               	addwfc	(___aodiv@divisor+3)^0,f,c
 14487  00372A  221E               	addwfc	(___aodiv@divisor+4)^0,f,c
 14488  00372C  221F               	addwfc	(___aodiv@divisor+5)^0,f,c
 14489  00372E  2220               	addwfc	(___aodiv@divisor+6)^0,f,c
 14490  003730  2221               	addwfc	(___aodiv@divisor+7)^0,f,c
 14491                           
 14492                           ; BSR set to: 0
 14493  003732  0E01               	movlw	1
 14494  003734  6E23               	movwf	___aodiv@sign^0,c
 14495  003736                     l8210:
 14496                           
 14497                           ; BSR set to: 0
 14498  003736  AE19               	btfss	(___aodiv@dividend+7)^0,7,c
 14499  003738  D012               	goto	l8216
 14500                           
 14501                           ; BSR set to: 0
 14502  00373A  1E19               	comf	(___aodiv@dividend+7)^0,f,c
 14503  00373C  1E18               	comf	(___aodiv@dividend+6)^0,f,c
 14504  00373E  1E17               	comf	(___aodiv@dividend+5)^0,f,c
 14505  003740  1E16               	comf	(___aodiv@dividend+4)^0,f,c
 14506  003742  1E15               	comf	(___aodiv@dividend+3)^0,f,c
 14507  003744  1E14               	comf	(___aodiv@dividend+2)^0,f,c
 14508  003746  1E13               	comf	(___aodiv@dividend+1)^0,f,c
 14509  003748  6C12               	negf	___aodiv@dividend^0,c
 14510  00374A  0E00               	movlw	0
 14511  00374C  2213               	addwfc	(___aodiv@dividend+1)^0,f,c
 14512  00374E  2214               	addwfc	(___aodiv@dividend+2)^0,f,c
 14513  003750  2215               	addwfc	(___aodiv@dividend+3)^0,f,c
 14514  003752  2216               	addwfc	(___aodiv@dividend+4)^0,f,c
 14515  003754  2217               	addwfc	(___aodiv@dividend+5)^0,f,c
 14516  003756  2218               	addwfc	(___aodiv@dividend+6)^0,f,c
 14517  003758  2219               	addwfc	(___aodiv@dividend+7)^0,f,c
 14518                           
 14519                           ; BSR set to: 0
 14520  00375A  0E01               	movlw	1
 14521  00375C  1A23               	xorwf	___aodiv@sign^0,f,c
 14522  00375E                     l8216:
 14523                           
 14524                           ; BSR set to: 0
 14525  00375E  EE20  F024         	lfsr	2,___aodiv@quotient
 14526  003762  0E07               	movlw	7
 14527  003764                     u5831:
 14528  003764  6ADE               	clrf	postinc2,c
 14529  003766  06E8               	decf	wreg,f,c
 14530  003768  E2FD               	bc	u5831
 14531                           
 14532                           ; BSR set to: 0
 14533  00376A  501A               	movf	___aodiv@divisor^0,w,c
 14534  00376C  101B               	iorwf	(___aodiv@divisor+1)^0,w,c
 14535  00376E  101C               	iorwf	(___aodiv@divisor+2)^0,w,c
 14536  003770  101D               	iorwf	(___aodiv@divisor+3)^0,w,c
 14537  003772  101E               	iorwf	(___aodiv@divisor+4)^0,w,c
 14538  003774  101F               	iorwf	(___aodiv@divisor+5)^0,w,c
 14539  003776  1020               	iorwf	(___aodiv@divisor+6)^0,w,c
 14540  003778  1021               	iorwf	(___aodiv@divisor+7)^0,w,c
 14541  00377A  B4D8               	btfsc	status,2,c
 14542  00377C  D046               	goto	l8238
 14543                           
 14544                           ; BSR set to: 0
 14545  00377E  0E01               	movlw	1
 14546  003780  6E22               	movwf	___aodiv@counter^0,c
 14547  003782  D00A               	goto	l8224
 14548  003784                     l8222:
 14549                           
 14550                           ; BSR set to: 0
 14551  003784  90D8               	bcf	status,0,c
 14552  003786  361A               	rlcf	___aodiv@divisor^0,f,c
 14553  003788  361B               	rlcf	(___aodiv@divisor+1)^0,f,c
 14554  00378A  361C               	rlcf	(___aodiv@divisor+2)^0,f,c
 14555  00378C  361D               	rlcf	(___aodiv@divisor+3)^0,f,c
 14556  00378E  361E               	rlcf	(___aodiv@divisor+4)^0,f,c
 14557  003790  361F               	rlcf	(___aodiv@divisor+5)^0,f,c
 14558  003792  3620               	rlcf	(___aodiv@divisor+6)^0,f,c
 14559  003794  3621               	rlcf	(___aodiv@divisor+7)^0,f,c
 14560  003796  2A22               	incf	___aodiv@counter^0,f,c
 14561  003798                     l8224:
 14562                           
 14563                           ; BSR set to: 0
 14564  003798  AE21               	btfss	(___aodiv@divisor+7)^0,7,c
 14565  00379A  D7F4               	goto	l8222
 14566  00379C                     u5850:
 14567                           
 14568                           ; BSR set to: 0
 14569  00379C  90D8               	bcf	status,0,c
 14570  00379E  3624               	rlcf	___aodiv@quotient^0,f,c
 14571  0037A0  3625               	rlcf	(___aodiv@quotient+1)^0,f,c
 14572  0037A2  3626               	rlcf	(___aodiv@quotient+2)^0,f,c
 14573  0037A4  3627               	rlcf	(___aodiv@quotient+3)^0,f,c
 14574  0037A6  3628               	rlcf	(___aodiv@quotient+4)^0,f,c
 14575  0037A8  3629               	rlcf	(___aodiv@quotient+5)^0,f,c
 14576  0037AA  362A               	rlcf	(___aodiv@quotient+6)^0,f,c
 14577  0037AC  362B               	rlcf	(___aodiv@quotient+7)^0,f,c
 14578                           
 14579                           ; BSR set to: 0
 14580  0037AE  501A               	movf	___aodiv@divisor^0,w,c
 14581  0037B0  5C12               	subwf	___aodiv@dividend^0,w,c
 14582  0037B2  501B               	movf	(___aodiv@divisor+1)^0,w,c
 14583  0037B4  5813               	subwfb	(___aodiv@dividend+1)^0,w,c
 14584  0037B6  501C               	movf	(___aodiv@divisor+2)^0,w,c
 14585  0037B8  5814               	subwfb	(___aodiv@dividend+2)^0,w,c
 14586  0037BA  501D               	movf	(___aodiv@divisor+3)^0,w,c
 14587  0037BC  5815               	subwfb	(___aodiv@dividend+3)^0,w,c
 14588  0037BE  501E               	movf	(___aodiv@divisor+4)^0,w,c
 14589  0037C0  5816               	subwfb	(___aodiv@dividend+4)^0,w,c
 14590  0037C2  501F               	movf	(___aodiv@divisor+5)^0,w,c
 14591  0037C4  5817               	subwfb	(___aodiv@dividend+5)^0,w,c
 14592  0037C6  5020               	movf	(___aodiv@divisor+6)^0,w,c
 14593  0037C8  5818               	subwfb	(___aodiv@dividend+6)^0,w,c
 14594  0037CA  5021               	movf	(___aodiv@divisor+7)^0,w,c
 14595  0037CC  5819               	subwfb	(___aodiv@dividend+7)^0,w,c
 14596  0037CE  A0D8               	btfss	status,0,c
 14597  0037D0  D011               	goto	l8234
 14598                           
 14599                           ; BSR set to: 0
 14600  0037D2  501A               	movf	___aodiv@divisor^0,w,c
 14601  0037D4  5E12               	subwf	___aodiv@dividend^0,f,c
 14602  0037D6  501B               	movf	(___aodiv@divisor+1)^0,w,c
 14603  0037D8  5A13               	subwfb	(___aodiv@dividend+1)^0,f,c
 14604  0037DA  501C               	movf	(___aodiv@divisor+2)^0,w,c
 14605  0037DC  5A14               	subwfb	(___aodiv@dividend+2)^0,f,c
 14606  0037DE  501D               	movf	(___aodiv@divisor+3)^0,w,c
 14607  0037E0  5A15               	subwfb	(___aodiv@dividend+3)^0,f,c
 14608  0037E2  501E               	movf	(___aodiv@divisor+4)^0,w,c
 14609  0037E4  5A16               	subwfb	(___aodiv@dividend+4)^0,f,c
 14610  0037E6  501F               	movf	(___aodiv@divisor+5)^0,w,c
 14611  0037E8  5A17               	subwfb	(___aodiv@dividend+5)^0,f,c
 14612  0037EA  5020               	movf	(___aodiv@divisor+6)^0,w,c
 14613  0037EC  5A18               	subwfb	(___aodiv@dividend+6)^0,f,c
 14614  0037EE  5021               	movf	(___aodiv@divisor+7)^0,w,c
 14615  0037F0  5A19               	subwfb	(___aodiv@dividend+7)^0,f,c
 14616                           
 14617                           ; BSR set to: 0
 14618  0037F2  8024               	bsf	___aodiv@quotient^0,0,c
 14619  0037F4                     l8234:
 14620                           
 14621                           ; BSR set to: 0
 14622  0037F4  90D8               	bcf	status,0,c
 14623  0037F6  3221               	rrcf	(___aodiv@divisor+7)^0,f,c
 14624  0037F8  3220               	rrcf	(___aodiv@divisor+6)^0,f,c
 14625  0037FA  321F               	rrcf	(___aodiv@divisor+5)^0,f,c
 14626  0037FC  321E               	rrcf	(___aodiv@divisor+4)^0,f,c
 14627  0037FE  321D               	rrcf	(___aodiv@divisor+3)^0,f,c
 14628  003800  321C               	rrcf	(___aodiv@divisor+2)^0,f,c
 14629  003802  321B               	rrcf	(___aodiv@divisor+1)^0,f,c
 14630  003804  321A               	rrcf	___aodiv@divisor^0,f,c
 14631                           
 14632                           ; BSR set to: 0
 14633  003806  2E22               	decfsz	___aodiv@counter^0,f,c
 14634  003808  D7C9               	goto	u5850
 14635  00380A                     l8238:
 14636                           
 14637                           ; BSR set to: 0
 14638  00380A  5023               	movf	___aodiv@sign^0,w,c
 14639  00380C  B4D8               	btfsc	status,2,c
 14640  00380E  D010               	goto	l8242
 14641                           
 14642                           ; BSR set to: 0
 14643  003810  1E2B               	comf	(___aodiv@quotient+7)^0,f,c
 14644  003812  1E2A               	comf	(___aodiv@quotient+6)^0,f,c
 14645  003814  1E29               	comf	(___aodiv@quotient+5)^0,f,c
 14646  003816  1E28               	comf	(___aodiv@quotient+4)^0,f,c
 14647  003818  1E27               	comf	(___aodiv@quotient+3)^0,f,c
 14648  00381A  1E26               	comf	(___aodiv@quotient+2)^0,f,c
 14649  00381C  1E25               	comf	(___aodiv@quotient+1)^0,f,c
 14650  00381E  6C24               	negf	___aodiv@quotient^0,c
 14651  003820  0E00               	movlw	0
 14652  003822  2225               	addwfc	(___aodiv@quotient+1)^0,f,c
 14653  003824  2226               	addwfc	(___aodiv@quotient+2)^0,f,c
 14654  003826  2227               	addwfc	(___aodiv@quotient+3)^0,f,c
 14655  003828  2228               	addwfc	(___aodiv@quotient+4)^0,f,c
 14656  00382A  2229               	addwfc	(___aodiv@quotient+5)^0,f,c
 14657  00382C  222A               	addwfc	(___aodiv@quotient+6)^0,f,c
 14658  00382E  222B               	addwfc	(___aodiv@quotient+7)^0,f,c
 14659  003830                     l8242:
 14660                           
 14661                           ; BSR set to: 0
 14662  003830  C024  F012         	movff	___aodiv@quotient,?___aodiv
 14663  003834  C025  F013         	movff	___aodiv@quotient+1,?___aodiv+1
 14664  003838  C026  F014         	movff	___aodiv@quotient+2,?___aodiv+2
 14665  00383C  C027  F015         	movff	___aodiv@quotient+3,?___aodiv+3
 14666  003840  C028  F016         	movff	___aodiv@quotient+4,?___aodiv+4
 14667  003844  C029  F017         	movff	___aodiv@quotient+5,?___aodiv+5
 14668  003848  C02A  F018         	movff	___aodiv@quotient+6,?___aodiv+6
 14669  00384C  C02B  F019         	movff	___aodiv@quotient+7,?___aodiv+7
 14670                           
 14671                           ; BSR set to: 0
 14672  003850  0012               	return		;funcret
 14673  003852                     __end_of___aodiv:
 14674                           	callstack 0
 14675                           
 14676 ;; *************** function _Paddle_draw *****************
 14677 ;; Defined at:
 14678 ;;		line 55 in file "class/paddle.c"
 14679 ;; Parameters:    Size  Location     Type
 14680 ;;  p               2   36[COMRAM] PTR struct Paddle
 14681 ;;		 -> g1(240), 
 14682 ;; Auto vars:     Size  Location     Type
 14683 ;;		None
 14684 ;; Return value:  Size  Location     Type
 14685 ;;                  1    wreg      void 
 14686 ;; Registers used:
 14687 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14688 ;; Tracked objects:
 14689 ;;		On entry : 3F/0
 14690 ;;		On exit  : 0/0
 14691 ;;		Unchanged: 0/0
 14692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14693 ;;      Params:         2       0       0       0       0       0       0
 14694 ;;      Locals:         0       0       0       0       0       0       0
 14695 ;;      Temps:          4       0       0       0       0       0       0
 14696 ;;      Totals:         6       0       0       0       0       0       0
 14697 ;;Total ram usage:        6 bytes
 14698 ;; Hardware stack levels used: 1
 14699 ;; Hardware stack levels required when called: 5
 14700 ;; This function calls:
 14701 ;;		_LCD_DrawRect
 14702 ;; This function is called by:
 14703 ;;		_Menu_inGameDraw
 14704 ;;		_displayController
 14705 ;; This function uses a non-reentrant model
 14706 ;;
 14707                           
 14708                           	psect	text66
 14709  003AD0                     __ptext66:
 14710                           	callstack 0
 14711  003AD0                     _Paddle_draw:
 14712                           	callstack 21
 14713                           
 14714                           ; BSR set to: 0
 14715                           ;class/paddle.c: 55: void Paddle_draw(struct Paddle* p);class/paddle.c: 56: {;class/padd
      +                          le.c: 58:     LCD_DrawRect(p->oldx,p->oldy,p->oldx+50,p->oldy+10,1,0b0000000000000000);
 14716                           
 14717                           ; BSR set to: 0
 14718                           ;incstack = 0
 14719  003AD0  EE20 F004          	lfsr	2,4
 14720  003AD4  5025               	movf	Paddle_draw@p^0,w,c
 14721  003AD6  26D9               	addwf	fsr2l,f,c
 14722  003AD8  5026               	movf	(Paddle_draw@p+1)^0,w,c
 14723  003ADA  22DA               	addwfc	fsr2h,f,c
 14724  003ADC  CFDE F012          	movff	postinc2,LCD_DrawRect@posX1
 14725  003AE0  CFDD F013          	movff	postdec2,LCD_DrawRect@posX1+1
 14726  003AE4  EE20 F006          	lfsr	2,6
 14727  003AE8  5025               	movf	Paddle_draw@p^0,w,c
 14728  003AEA  26D9               	addwf	fsr2l,f,c
 14729  003AEC  5026               	movf	(Paddle_draw@p+1)^0,w,c
 14730  003AEE  22DA               	addwfc	fsr2h,f,c
 14731  003AF0  CFDE F014          	movff	postinc2,LCD_DrawRect@posY1
 14732  003AF4  CFDD F015          	movff	postdec2,LCD_DrawRect@posY1+1
 14733  003AF8  EE20 F004          	lfsr	2,4
 14734  003AFC  5025               	movf	Paddle_draw@p^0,w,c
 14735  003AFE  26D9               	addwf	fsr2l,f,c
 14736  003B00  5026               	movf	(Paddle_draw@p+1)^0,w,c
 14737  003B02  22DA               	addwfc	fsr2h,f,c
 14738  003B04  CFDE F027          	movff	postinc2,??_Paddle_draw
 14739  003B08  CFDD F028          	movff	postdec2,??_Paddle_draw+1
 14740  003B0C  0E32               	movlw	50
 14741  003B0E  2427               	addwf	??_Paddle_draw^0,w,c
 14742  003B10  6E16               	movwf	LCD_DrawRect@posX2^0,c
 14743  003B12  0E00               	movlw	0
 14744  003B14  2028               	addwfc	(??_Paddle_draw+1)^0,w,c
 14745  003B16  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 14746  003B18  EE20 F006          	lfsr	2,6
 14747  003B1C  5025               	movf	Paddle_draw@p^0,w,c
 14748  003B1E  26D9               	addwf	fsr2l,f,c
 14749  003B20  5026               	movf	(Paddle_draw@p+1)^0,w,c
 14750  003B22  22DA               	addwfc	fsr2h,f,c
 14751  003B24  CFDE F029          	movff	postinc2,??_Paddle_draw+2
 14752  003B28  CFDD F02A          	movff	postdec2,??_Paddle_draw+3
 14753  003B2C  0E0A               	movlw	10
 14754  003B2E  2429               	addwf	(??_Paddle_draw+2)^0,w,c
 14755  003B30  6E18               	movwf	LCD_DrawRect@posY2^0,c
 14756  003B32  0E00               	movlw	0
 14757  003B34  202A               	addwfc	(??_Paddle_draw+3)^0,w,c
 14758  003B36  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 14759  003B38  0E01               	movlw	1
 14760  003B3A  6E1A               	movwf	LCD_DrawRect@fill^0,c
 14761  003B3C  0E00               	movlw	0
 14762  003B3E  6E1C               	movwf	(LCD_DrawRect@color+1)^0,c
 14763  003B40  0E00               	movlw	0
 14764  003B42  6E1B               	movwf	LCD_DrawRect@color^0,c
 14765  003B44  EC31  F013         	call	_LCD_DrawRect	;wreg free
 14766                           
 14767                           ;class/paddle.c: 60:     p->oldx=p->x;
 14768  003B48  C025  FFD9         	movff	Paddle_draw@p,fsr2l
 14769  003B4C  C026  FFDA         	movff	Paddle_draw@p+1,fsr2h
 14770  003B50  EE10 F004          	lfsr	1,4
 14771  003B54  5025               	movf	Paddle_draw@p^0,w,c
 14772  003B56  26E1               	addwf	fsr1l,f,c
 14773  003B58  5026               	movf	(Paddle_draw@p+1)^0,w,c
 14774  003B5A  22E2               	addwfc	fsr1h,f,c
 14775  003B5C  CFDE FFE6          	movff	postinc2,postinc1
 14776  003B60  CFDD FFE5          	movff	postdec2,postdec1
 14777                           
 14778                           ;class/paddle.c: 61:     p->oldy=p->y;
 14779  003B64  EE20 F002          	lfsr	2,2
 14780  003B68  5025               	movf	Paddle_draw@p^0,w,c
 14781  003B6A  26D9               	addwf	fsr2l,f,c
 14782  003B6C  5026               	movf	(Paddle_draw@p+1)^0,w,c
 14783  003B6E  22DA               	addwfc	fsr2h,f,c
 14784  003B70  EE10 F006          	lfsr	1,6
 14785  003B74  5025               	movf	Paddle_draw@p^0,w,c
 14786  003B76  26E1               	addwf	fsr1l,f,c
 14787  003B78  5026               	movf	(Paddle_draw@p+1)^0,w,c
 14788  003B7A  22E2               	addwfc	fsr1h,f,c
 14789  003B7C  CFDE FFE6          	movff	postinc2,postinc1
 14790  003B80  CFDD FFE5          	movff	postdec2,postdec1
 14791                           
 14792                           ;class/paddle.c: 63:     LCD_DrawRect(p->x,p->y,p->x+50,p->y+10,1,p->color);
 14793  003B84  C025  FFD9         	movff	Paddle_draw@p,fsr2l
 14794  003B88  C026  FFDA         	movff	Paddle_draw@p+1,fsr2h
 14795  003B8C  CFDE F012          	movff	postinc2,LCD_DrawRect@posX1
 14796  003B90  CFDD F013          	movff	postdec2,LCD_DrawRect@posX1+1
 14797  003B94  EE20 F002          	lfsr	2,2
 14798  003B98  5025               	movf	Paddle_draw@p^0,w,c
 14799  003B9A  26D9               	addwf	fsr2l,f,c
 14800  003B9C  5026               	movf	(Paddle_draw@p+1)^0,w,c
 14801  003B9E  22DA               	addwfc	fsr2h,f,c
 14802  003BA0  CFDE F014          	movff	postinc2,LCD_DrawRect@posY1
 14803  003BA4  CFDD F015          	movff	postdec2,LCD_DrawRect@posY1+1
 14804  003BA8  C025  FFD9         	movff	Paddle_draw@p,fsr2l
 14805  003BAC  C026  FFDA         	movff	Paddle_draw@p+1,fsr2h
 14806  003BB0  CFDE F027          	movff	postinc2,??_Paddle_draw
 14807  003BB4  CFDD F028          	movff	postdec2,??_Paddle_draw+1
 14808  003BB8  0E32               	movlw	50
 14809  003BBA  2427               	addwf	??_Paddle_draw^0,w,c
 14810  003BBC  6E16               	movwf	LCD_DrawRect@posX2^0,c
 14811  003BBE  0E00               	movlw	0
 14812  003BC0  2028               	addwfc	(??_Paddle_draw+1)^0,w,c
 14813  003BC2  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 14814  003BC4  EE20 F002          	lfsr	2,2
 14815  003BC8  5025               	movf	Paddle_draw@p^0,w,c
 14816  003BCA  26D9               	addwf	fsr2l,f,c
 14817  003BCC  5026               	movf	(Paddle_draw@p+1)^0,w,c
 14818  003BCE  22DA               	addwfc	fsr2h,f,c
 14819  003BD0  CFDE F029          	movff	postinc2,??_Paddle_draw+2
 14820  003BD4  CFDD F02A          	movff	postdec2,??_Paddle_draw+3
 14821  003BD8  0E0A               	movlw	10
 14822  003BDA  2429               	addwf	(??_Paddle_draw+2)^0,w,c
 14823  003BDC  6E18               	movwf	LCD_DrawRect@posY2^0,c
 14824  003BDE  0E00               	movlw	0
 14825  003BE0  202A               	addwfc	(??_Paddle_draw+3)^0,w,c
 14826  003BE2  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 14827  003BE4  0E01               	movlw	1
 14828  003BE6  6E1A               	movwf	LCD_DrawRect@fill^0,c
 14829  003BE8  EE20 F008          	lfsr	2,8
 14830  003BEC  5025               	movf	Paddle_draw@p^0,w,c
 14831  003BEE  26D9               	addwf	fsr2l,f,c
 14832  003BF0  5026               	movf	(Paddle_draw@p+1)^0,w,c
 14833  003BF2  22DA               	addwfc	fsr2h,f,c
 14834  003BF4  CFDE F01B          	movff	postinc2,LCD_DrawRect@color
 14835  003BF8  CFDD F01C          	movff	postdec2,LCD_DrawRect@color+1
 14836  003BFC  EC31  F013         	call	_LCD_DrawRect	;wreg free
 14837  003C00  0012               	return		;funcret
 14838  003C02                     __end_of_Paddle_draw:
 14839                           	callstack 0
 14840                           
 14841 ;; *************** function _LCD_Fill *****************
 14842 ;; Defined at:
 14843 ;;		line 218 in file "libraries/lcd_highlevel.c"
 14844 ;; Parameters:    Size  Location     Type
 14845 ;;  color           2   17[COMRAM] unsigned short 
 14846 ;; Auto vars:     Size  Location     Type
 14847 ;;  page            2   23[COMRAM] unsigned short 
 14848 ;;  column          2   21[COMRAM] unsigned short 
 14849 ;;  colorL          1   20[COMRAM] unsigned char 
 14850 ;;  colorH          1   19[COMRAM] unsigned char 
 14851 ;; Return value:  Size  Location     Type
 14852 ;;                  1    wreg      void 
 14853 ;; Registers used:
 14854 ;;		wreg, status,2, status,0
 14855 ;; Tracked objects:
 14856 ;;		On entry : 0/0
 14857 ;;		On exit  : 0/0
 14858 ;;		Unchanged: 0/0
 14859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14860 ;;      Params:         2       0       0       0       0       0       0
 14861 ;;      Locals:         6       0       0       0       0       0       0
 14862 ;;      Temps:          0       0       0       0       0       0       0
 14863 ;;      Totals:         8       0       0       0       0       0       0
 14864 ;;Total ram usage:        8 bytes
 14865 ;; Hardware stack levels used: 1
 14866 ;; Hardware stack levels required when called: 4
 14867 ;; This function calls:
 14868 ;;		Nothing
 14869 ;; This function is called by:
 14870 ;;		_Factory_init
 14871 ;;		_Menu_welcomeDraw
 14872 ;;		_Menu_parametersDraw
 14873 ;;		_Menu_inGameDraw
 14874 ;;		_Menu_endGame
 14875 ;; This function uses a non-reentrant model
 14876 ;;
 14877                           
 14878                           	psect	text67
 14879  004930                     __ptext67:
 14880                           	callstack 0
 14881  004930                     _LCD_Fill:
 14882                           	callstack 21
 14883                           
 14884                           ;libraries/lcd_highlevel.c: 218: void LCD_Fill(uint16_t color);libraries/lcd_highlevel.c
      +                          : 219: {;libraries/lcd_highlevel.c: 220:   uint16_t column;;libraries/lcd_highlevel.c: 2
      +                          21:   uint16_t page;;libraries/lcd_highlevel.c: 222:   uint8_t colorH, colorL;;libraries
      +                          /lcd_highlevel.c: 223:   colorH = color >> 8;
 14885                           
 14886                           ;incstack = 0
 14887  004930  C013  F014         	movff	LCD_Fill@color+1,LCD_Fill@colorH
 14888                           
 14889                           ;libraries/lcd_highlevel.c: 224:   colorL = color;
 14890  004934  C012  F015         	movff	LCD_Fill@color,LCD_Fill@colorL
 14891                           
 14892                           ;libraries/lcd_highlevel.c: 226:   PORTA = 0x2A; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
 14893  004938  0E2A               	movlw	42
 14894  00493A  6E80               	movwf	128,c	;volatile
 14895  00493C  988B               	bcf	3979,4,c	;volatile
 14896  00493E  968B               	bcf	3979,3,c	;volatile
 14897  004940  868B               	bsf	3979,3,c	;volatile
 14898  004942  888B               	bsf	3979,4,c	;volatile
 14899                           
 14900                           ;libraries/lcd_highlevel.c: 227:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
 14901  004944  0E00               	movlw	0
 14902  004946  6E80               	movwf	128,c	;volatile
 14903  004948  968B               	bcf	3979,3,c	;volatile
 14904  00494A  868B               	bsf	3979,3,c	;volatile
 14905                           
 14906                           ;libraries/lcd_highlevel.c: 228:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
 14907  00494C  0E00               	movlw	0
 14908  00494E  6E80               	movwf	128,c	;volatile
 14909  004950  968B               	bcf	3979,3,c	;volatile
 14910  004952  868B               	bsf	3979,3,c	;volatile
 14911                           
 14912                           ;libraries/lcd_highlevel.c: 229:   PORTA = (240 -1) >> 8; LATC3 = 0; LATC3 = 1;;
 14913  004954  0E00               	movlw	0
 14914  004956  6E80               	movwf	128,c	;volatile
 14915  004958  968B               	bcf	3979,3,c	;volatile
 14916  00495A  868B               	bsf	3979,3,c	;volatile
 14917                           
 14918                           ;libraries/lcd_highlevel.c: 230:   PORTA = (240 -1); LATC3 = 0; LATC3 = 1;;
 14919  00495C  0EEF               	movlw	239
 14920  00495E  6E80               	movwf	128,c	;volatile
 14921  004960  968B               	bcf	3979,3,c	;volatile
 14922  004962  868B               	bsf	3979,3,c	;volatile
 14923                           
 14924                           ;libraries/lcd_highlevel.c: 232:   PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
 14925  004964  0E2B               	movlw	43
 14926  004966  6E80               	movwf	128,c	;volatile
 14927  004968  988B               	bcf	3979,4,c	;volatile
 14928  00496A  968B               	bcf	3979,3,c	;volatile
 14929  00496C  868B               	bsf	3979,3,c	;volatile
 14930  00496E  888B               	bsf	3979,4,c	;volatile
 14931                           
 14932                           ;libraries/lcd_highlevel.c: 233:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
 14933  004970  0E00               	movlw	0
 14934  004972  6E80               	movwf	128,c	;volatile
 14935  004974  968B               	bcf	3979,3,c	;volatile
 14936  004976  868B               	bsf	3979,3,c	;volatile
 14937                           
 14938                           ;libraries/lcd_highlevel.c: 234:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
 14939  004978  0E00               	movlw	0
 14940  00497A  6E80               	movwf	128,c	;volatile
 14941  00497C  968B               	bcf	3979,3,c	;volatile
 14942  00497E  868B               	bsf	3979,3,c	;volatile
 14943                           
 14944                           ;libraries/lcd_highlevel.c: 235:   PORTA = (320 -1) >> 8; LATC3 = 0; LATC3 = 1;;
 14945  004980  0E01               	movlw	1
 14946  004982  6E80               	movwf	128,c	;volatile
 14947  004984  968B               	bcf	3979,3,c	;volatile
 14948  004986  868B               	bsf	3979,3,c	;volatile
 14949                           
 14950                           ;libraries/lcd_highlevel.c: 236:   PORTA = (320 -1); LATC3 = 0; LATC3 = 1;;
 14951  004988  0E3F               	movlw	63
 14952  00498A  6E80               	movwf	128,c	;volatile
 14953  00498C  968B               	bcf	3979,3,c	;volatile
 14954  00498E  868B               	bsf	3979,3,c	;volatile
 14955                           
 14956                           ;libraries/lcd_highlevel.c: 238:   PORTA = 0x2C; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
 14957  004990  0E2C               	movlw	44
 14958  004992  6E80               	movwf	128,c	;volatile
 14959  004994  988B               	bcf	3979,4,c	;volatile
 14960  004996  968B               	bcf	3979,3,c	;volatile
 14961  004998  868B               	bsf	3979,3,c	;volatile
 14962  00499A  888B               	bsf	3979,4,c	;volatile
 14963                           
 14964                           ;libraries/lcd_highlevel.c: 239:   for(column=0; column<320; column++)
 14965  00499C  0E00               	movlw	0
 14966  00499E  6E17               	movwf	(LCD_Fill@column+1)^0,c
 14967  0049A0  0E00               	movlw	0
 14968  0049A2  6E16               	movwf	LCD_Fill@column^0,c
 14969  0049A4                     l6552:
 14970                           
 14971                           ;libraries/lcd_highlevel.c: 240:   {;libraries/lcd_highlevel.c: 241:     for(page=0; pag
      +                          e<240; page++)
 14972  0049A4  0E00               	movlw	0
 14973  0049A6  6E19               	movwf	(LCD_Fill@page+1)^0,c
 14974  0049A8  0E00               	movlw	0
 14975  0049AA  6E18               	movwf	LCD_Fill@page^0,c
 14976  0049AC                     l226:
 14977                           
 14978                           ;libraries/lcd_highlevel.c: 242:     {;libraries/lcd_highlevel.c: 243:       PORTA = col
      +                          orH;
 14979  0049AC  C014  FF80         	movff	LCD_Fill@colorH,3968	;volatile
 14980                           
 14981                           ;libraries/lcd_highlevel.c: 244:       LATC3 = 0;
 14982  0049B0  968B               	bcf	3979,3,c	;volatile
 14983                           
 14984                           ;libraries/lcd_highlevel.c: 245:       LATC3 = 1;
 14985  0049B2  868B               	bsf	3979,3,c	;volatile
 14986                           
 14987                           ;libraries/lcd_highlevel.c: 246:       PORTA = colorL;
 14988  0049B4  C015  FF80         	movff	LCD_Fill@colorL,3968	;volatile
 14989                           
 14990                           ;libraries/lcd_highlevel.c: 247:       LATC3 = 0;
 14991  0049B8  968B               	bcf	3979,3,c	;volatile
 14992                           
 14993                           ;libraries/lcd_highlevel.c: 248:       LATC3 = 1;
 14994  0049BA  868B               	bsf	3979,3,c	;volatile
 14995                           
 14996                           ;libraries/lcd_highlevel.c: 249:     }
 14997  0049BC  4A18               	infsnz	LCD_Fill@page^0,f,c
 14998  0049BE  2A19               	incf	(LCD_Fill@page+1)^0,f,c
 14999  0049C0  5019               	movf	(LCD_Fill@page+1)^0,w,c
 15000  0049C2  E104               	bnz	u4010
 15001  0049C4  0EF0               	movlw	240
 15002  0049C6  5C18               	subwf	LCD_Fill@page^0,w,c
 15003  0049C8  A0D8               	btfss	status,0,c
 15004  0049CA  D7F0               	goto	l226
 15005  0049CC                     u4010:
 15006                           
 15007                           ;libraries/lcd_highlevel.c: 250:   }
 15008  0049CC  4A16               	infsnz	LCD_Fill@column^0,f,c
 15009  0049CE  2A17               	incf	(LCD_Fill@column+1)^0,f,c
 15010  0049D0  0E40               	movlw	64
 15011  0049D2  5C16               	subwf	LCD_Fill@column^0,w,c
 15012  0049D4  0E01               	movlw	1
 15013  0049D6  5817               	subwfb	(LCD_Fill@column+1)^0,w,c
 15014  0049D8  B0D8               	btfsc	status,0,c
 15015  0049DA  0012               	return	
 15016  0049DC  D7E3               	goto	l6552
 15017  0049DE                     __end_of_LCD_Fill:
 15018                           	callstack 0
 15019                           
 15020 ;; *************** function _LCD_ButtonDraw *****************
 15021 ;; Defined at:
 15022 ;;		line 462 in file "libraries/lcd_highlevel.c"
 15023 ;; Parameters:    Size  Location     Type
 15024 ;;  button          2   65[COMRAM] PTR struct .
 15025 ;;		 -> g1(240), 
 15026 ;; Auto vars:     Size  Location     Type
 15027 ;;  bmpPtr          2   56[BANK0 ] PTR struct .
 15028 ;;		 -> STR_9(9), STR_8(2), STR_7(9), STR_6(11), 
 15029 ;;		 -> STR_5(9), STR_4(9), 
 15030 ;;  yText           2   53[BANK0 ] unsigned short 
 15031 ;;  xText           2   51[BANK0 ] unsigned short 
 15032 ;;  y2              2   49[BANK0 ] unsigned short 
 15033 ;;  y1              2   47[BANK0 ] unsigned short 
 15034 ;;  x2              2   45[BANK0 ] unsigned short 
 15035 ;;  x1              2   43[BANK0 ] unsigned short 
 15036 ;;  width           2   41[BANK0 ] unsigned short 
 15037 ;;  i               1   55[BANK0 ] unsigned char 
 15038 ;;  tempChar        1   40[BANK0 ] unsigned char 
 15039 ;; Return value:  Size  Location     Type
 15040 ;;                  1    wreg      void 
 15041 ;; Registers used:
 15042 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15043 ;; Tracked objects:
 15044 ;;		On entry : 0/0
 15045 ;;		On exit  : 0/0
 15046 ;;		Unchanged: 0/0
 15047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15048 ;;      Params:         2       0       0       0       0       0       0
 15049 ;;      Locals:         0      18       0       0       0       0       0
 15050 ;;      Temps:          0      12       0       0       0       0       0
 15051 ;;      Totals:         2      30       0       0       0       0       0
 15052 ;;Total ram usage:       32 bytes
 15053 ;; Hardware stack levels used: 1
 15054 ;; Hardware stack levels required when called: 6
 15055 ;; This function calls:
 15056 ;;		_LCD_Bitmap
 15057 ;;		_LCD_ButtonUpdate
 15058 ;;		_LCD_DrawRect
 15059 ;;		_LCD_DrawText
 15060 ;;		_strlen
 15061 ;; This function is called by:
 15062 ;;		_Menu_welcomeDraw
 15063 ;;		_Menu_parametersDraw
 15064 ;;		_Menu_inGameDraw
 15065 ;;		_Menu_endGame
 15066 ;; This function uses a non-reentrant model
 15067 ;;
 15068                           
 15069                           	psect	text68
 15070  000E4E                     __ptext68:
 15071                           	callstack 0
 15072  000E4E                     _LCD_ButtonDraw:
 15073                           	callstack 19
 15074                           
 15075                           ;libraries/lcd_highlevel.c: 462: void LCD_ButtonDraw(btn_t * button);libraries/lcd_highl
      +                          evel.c: 463: {;libraries/lcd_highlevel.c: 464:   uint16_t x1,x2,y1,y2;;libraries/lcd_hig
      +                          hlevel.c: 465:   uint16_t xText,yText;;libraries/lcd_highlevel.c: 466:   uint8_t i, temp
      +                          Char;;libraries/lcd_highlevel.c: 467:   uint16_t width=0;
 15076                           
 15077                           ;incstack = 0
 15078  000E4E  0E00               	movlw	0
 15079  000E50  0100               	movlb	0	; () banked
 15080  000E52  6FD4               	movwf	(LCD_ButtonDraw@width+1)& (0+255),b
 15081  000E54  0E00               	movlw	0
 15082  000E56  6FD3               	movwf	LCD_ButtonDraw@width& (0+255),b
 15083                           
 15084                           ; BSR set to: 0
 15085                           ;libraries/lcd_highlevel.c: 468:   BMP_STRUCT *bmpPtr;;libraries/lcd_highlevel.c: 470:  
      +                           x1 = button->posX;
 15086  000E58  C042  FFD9         	movff	LCD_ButtonDraw@button,fsr2l
 15087  000E5C  C043  FFDA         	movff	LCD_ButtonDraw@button+1,fsr2h
 15088  000E60  CFDE F0D5          	movff	postinc2,LCD_ButtonDraw@x1
 15089  000E64  CFDD F0D6          	movff	postdec2,LCD_ButtonDraw@x1+1
 15090                           
 15091                           ; BSR set to: 0
 15092                           ;libraries/lcd_highlevel.c: 471:   x2 = button->posX + button->width;
 15093  000E68  EE20 F004          	lfsr	2,4
 15094  000E6C  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15095  000E6E  26D9               	addwf	fsr2l,f,c
 15096  000E70  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15097  000E72  22DA               	addwfc	fsr2h,f,c
 15098  000E74  CFDE F0C6          	movff	postinc2,??_LCD_ButtonDraw
 15099  000E78  CFDD F0C7          	movff	postdec2,??_LCD_ButtonDraw+1
 15100  000E7C  C042  FFD9         	movff	LCD_ButtonDraw@button,fsr2l
 15101  000E80  C043  FFDA         	movff	LCD_ButtonDraw@button+1,fsr2h
 15102  000E84  CFDE F0C8          	movff	postinc2,??_LCD_ButtonDraw+2
 15103  000E88  CFDD F0C9          	movff	postdec2,??_LCD_ButtonDraw+3
 15104  000E8C  51C6               	movf	??_LCD_ButtonDraw& (0+255),w,b
 15105  000E8E  25C8               	addwf	(??_LCD_ButtonDraw+2)& (0+255),w,b
 15106  000E90  6FD7               	movwf	LCD_ButtonDraw@x2& (0+255),b
 15107  000E92  51C7               	movf	(??_LCD_ButtonDraw+1)& (0+255),w,b
 15108  000E94  21C9               	addwfc	(??_LCD_ButtonDraw+3)& (0+255),w,b
 15109  000E96  6FD8               	movwf	(LCD_ButtonDraw@x2+1)& (0+255),b
 15110                           
 15111                           ; BSR set to: 0
 15112                           ;libraries/lcd_highlevel.c: 472:   y1 = button->posY;
 15113  000E98  EE20 F002          	lfsr	2,2
 15114  000E9C  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15115  000E9E  26D9               	addwf	fsr2l,f,c
 15116  000EA0  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15117  000EA2  22DA               	addwfc	fsr2h,f,c
 15118  000EA4  CFDE F0D9          	movff	postinc2,LCD_ButtonDraw@y1
 15119  000EA8  CFDD F0DA          	movff	postdec2,LCD_ButtonDraw@y1+1
 15120                           
 15121                           ; BSR set to: 0
 15122                           ;libraries/lcd_highlevel.c: 473:   y2 = button->posY + button->height;
 15123  000EAC  EE20 F006          	lfsr	2,6
 15124  000EB0  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15125  000EB2  26D9               	addwf	fsr2l,f,c
 15126  000EB4  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15127  000EB6  22DA               	addwfc	fsr2h,f,c
 15128  000EB8  CFDE F0C6          	movff	postinc2,??_LCD_ButtonDraw
 15129  000EBC  CFDD F0C7          	movff	postdec2,??_LCD_ButtonDraw+1
 15130  000EC0  EE20 F002          	lfsr	2,2
 15131  000EC4  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15132  000EC6  26D9               	addwf	fsr2l,f,c
 15133  000EC8  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15134  000ECA  22DA               	addwfc	fsr2h,f,c
 15135  000ECC  CFDE F0C8          	movff	postinc2,??_LCD_ButtonDraw+2
 15136  000ED0  CFDD F0C9          	movff	postdec2,??_LCD_ButtonDraw+3
 15137  000ED4  51C6               	movf	??_LCD_ButtonDraw& (0+255),w,b
 15138  000ED6  25C8               	addwf	(??_LCD_ButtonDraw+2)& (0+255),w,b
 15139  000ED8  6FDB               	movwf	LCD_ButtonDraw@y2& (0+255),b
 15140  000EDA  51C7               	movf	(??_LCD_ButtonDraw+1)& (0+255),w,b
 15141  000EDC  21C9               	addwfc	(??_LCD_ButtonDraw+3)& (0+255),w,b
 15142  000EDE  6FDC               	movwf	(LCD_ButtonDraw@y2+1)& (0+255),b
 15143                           
 15144                           ; BSR set to: 0
 15145                           ;libraries/lcd_highlevel.c: 474:   if(button->bgColor != button->txtColor)
 15146  000EE0  EE20 F008          	lfsr	2,8
 15147  000EE4  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15148  000EE6  26D9               	addwf	fsr2l,f,c
 15149  000EE8  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15150  000EEA  22DA               	addwfc	fsr2h,f,c
 15151  000EEC  EE10 F00A          	lfsr	1,10
 15152  000EF0  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15153  000EF2  26E1               	addwf	fsr1l,f,c
 15154  000EF4  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15155  000EF6  22E2               	addwfc	fsr1h,f,c
 15156  000EF8  50DE               	movf	postinc2,w,c
 15157  000EFA  18E6               	xorwf	postinc1,w,c
 15158  000EFC  E104               	bnz	u6310
 15159  000EFE  50DE               	movf	postinc2,w,c
 15160  000F00  18E6               	xorwf	postinc1,w,c
 15161  000F02  B4D8               	btfsc	status,2,c
 15162  000F04  D03C               	goto	l8592
 15163  000F06                     u6310:
 15164                           
 15165                           ; BSR set to: 0
 15166                           ;libraries/lcd_highlevel.c: 475:   {;libraries/lcd_highlevel.c: 476:     LCD_DrawRect(x1
      +                          , y1, x2, y2, 1, button->bgColor);
 15167  000F06  C0D5  F012         	movff	LCD_ButtonDraw@x1,LCD_DrawRect@posX1
 15168  000F0A  C0D6  F013         	movff	LCD_ButtonDraw@x1+1,LCD_DrawRect@posX1+1
 15169  000F0E  C0D9  F014         	movff	LCD_ButtonDraw@y1,LCD_DrawRect@posY1
 15170  000F12  C0DA  F015         	movff	LCD_ButtonDraw@y1+1,LCD_DrawRect@posY1+1
 15171  000F16  C0D7  F016         	movff	LCD_ButtonDraw@x2,LCD_DrawRect@posX2
 15172  000F1A  C0D8  F017         	movff	LCD_ButtonDraw@x2+1,LCD_DrawRect@posX2+1
 15173  000F1E  C0DB  F018         	movff	LCD_ButtonDraw@y2,LCD_DrawRect@posY2
 15174  000F22  C0DC  F019         	movff	LCD_ButtonDraw@y2+1,LCD_DrawRect@posY2+1
 15175  000F26  0E01               	movlw	1
 15176  000F28  6E1A               	movwf	LCD_DrawRect@fill^0,c
 15177  000F2A  EE20 F00A          	lfsr	2,10
 15178  000F2E  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15179  000F30  26D9               	addwf	fsr2l,f,c
 15180  000F32  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15181  000F34  22DA               	addwfc	fsr2h,f,c
 15182  000F36  CFDE F01B          	movff	postinc2,LCD_DrawRect@color
 15183  000F3A  CFDD F01C          	movff	postdec2,LCD_DrawRect@color+1
 15184  000F3E  EC31  F013         	call	_LCD_DrawRect	;wreg free
 15185                           
 15186                           ;libraries/lcd_highlevel.c: 477:     LCD_DrawRect(x1, y1, x2, y2, 0, button->txtColor);
 15187  000F42  C0D5  F012         	movff	LCD_ButtonDraw@x1,LCD_DrawRect@posX1
 15188  000F46  C0D6  F013         	movff	LCD_ButtonDraw@x1+1,LCD_DrawRect@posX1+1
 15189  000F4A  C0D9  F014         	movff	LCD_ButtonDraw@y1,LCD_DrawRect@posY1
 15190  000F4E  C0DA  F015         	movff	LCD_ButtonDraw@y1+1,LCD_DrawRect@posY1+1
 15191  000F52  C0D7  F016         	movff	LCD_ButtonDraw@x2,LCD_DrawRect@posX2
 15192  000F56  C0D8  F017         	movff	LCD_ButtonDraw@x2+1,LCD_DrawRect@posX2+1
 15193  000F5A  C0DB  F018         	movff	LCD_ButtonDraw@y2,LCD_DrawRect@posY2
 15194  000F5E  C0DC  F019         	movff	LCD_ButtonDraw@y2+1,LCD_DrawRect@posY2+1
 15195  000F62  0E00               	movlw	0
 15196  000F64  6E1A               	movwf	LCD_DrawRect@fill^0,c
 15197  000F66  EE20 F008          	lfsr	2,8
 15198  000F6A  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15199  000F6C  26D9               	addwf	fsr2l,f,c
 15200  000F6E  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15201  000F70  22DA               	addwfc	fsr2h,f,c
 15202  000F72  CFDE F01B          	movff	postinc2,LCD_DrawRect@color
 15203  000F76  CFDD F01C          	movff	postdec2,LCD_DrawRect@color+1
 15204  000F7A  EC31  F013         	call	_LCD_DrawRect	;wreg free
 15205  000F7E                     l8592:
 15206                           
 15207                           ;libraries/lcd_highlevel.c: 482:   if((button->text[0] == 'B')&&(button->text[1] == 'M')
      +                          )
 15208  000F7E  EE20 F00C          	lfsr	2,12
 15209  000F82  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15210  000F84  26D9               	addwf	fsr2l,f,c
 15211  000F86  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15212  000F88  22DA               	addwfc	fsr2h,f,c
 15213  000F8A  CFDE FFF6          	movff	postinc2,tblptrl
 15214  000F8E  CFDD FFF7          	movff	postdec2,tblptrh
 15215  000F92                     	if	0	;tblptru may be non-zero
 15216  000F92                     	endif
 15217  000F92                     	if	0	;tblptru may be non-zero
 15218  000F92                     	endif
 15219  000F92  0008               	tblrd		*
 15220  000F94  50F5               	movf	tablat,w,c
 15221  000F96  0A42               	xorlw	66
 15222  000F98  A4D8               	btfss	status,2,c
 15223  000F9A  D0AB               	goto	l8604
 15224  000F9C  EE20 F00C          	lfsr	2,12
 15225  000FA0  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15226  000FA2  26D9               	addwf	fsr2l,f,c
 15227  000FA4  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15228  000FA6  22DA               	addwfc	fsr2h,f,c
 15229  000FA8  CFDE F0C6          	movff	postinc2,??_LCD_ButtonDraw
 15230  000FAC  CFDD F0C7          	movff	postdec2,??_LCD_ButtonDraw+1
 15231  000FB0  0E01               	movlw	1
 15232  000FB2  0100               	movlb	0	; () banked
 15233  000FB4  27C6               	addwf	??_LCD_ButtonDraw& (0+255),f,b
 15234  000FB6  0E00               	movlw	0
 15235  000FB8  23C7               	addwfc	(??_LCD_ButtonDraw+1)& (0+255),f,b
 15236  000FBA  C0C6  FFF6         	movff	??_LCD_ButtonDraw,tblptrl
 15237  000FBE  C0C7  FFF7         	movff	??_LCD_ButtonDraw+1,tblptrh
 15238  000FC2                     	if	0	;tblptru may be non-zero
 15239  000FC2                     	endif
 15240  000FC2                     	if	0	;tblptru may be non-zero
 15241  000FC2                     	endif
 15242  000FC2  0008               	tblrd		*
 15243  000FC4  50F5               	movf	tablat,w,c
 15244  000FC6  0A4D               	xorlw	77
 15245  000FC8  A4D8               	btfss	status,2,c
 15246  000FCA  D093               	goto	l8604
 15247                           
 15248                           ; BSR set to: 0
 15249                           ;libraries/lcd_highlevel.c: 483:   {;libraries/lcd_highlevel.c: 484:     bmpPtr = (BMP_S
      +                          TRUCT *)button->text;
 15250  000FCC  EE20 F00C          	lfsr	2,12
 15251  000FD0  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15252  000FD2  26D9               	addwf	fsr2l,f,c
 15253  000FD4  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15254  000FD6  22DA               	addwfc	fsr2h,f,c
 15255  000FD8  CFDE F0E2          	movff	postinc2,LCD_ButtonDraw@bmpPtr
 15256  000FDC  CFDD F0E3          	movff	postdec2,LCD_ButtonDraw@bmpPtr+1
 15257                           
 15258                           ; BSR set to: 0
 15259                           ;libraries/lcd_highlevel.c: 485:     yText = button->height / 2 + button->posY - (bmpPtr
      +                          ->biHeight / 2);
 15260  000FE0  EE20 F002          	lfsr	2,2
 15261  000FE4  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15262  000FE6  26D9               	addwf	fsr2l,f,c
 15263  000FE8  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15264  000FEA  22DA               	addwfc	fsr2h,f,c
 15265  000FEC  CFDE F0C6          	movff	postinc2,??_LCD_ButtonDraw
 15266  000FF0  CFDD F0C7          	movff	postdec2,??_LCD_ButtonDraw+1
 15267  000FF4  0E16               	movlw	22
 15268  000FF6  25E2               	addwf	LCD_ButtonDraw@bmpPtr& (0+255),w,b
 15269  000FF8  6FC8               	movwf	(??_LCD_ButtonDraw+2)& (0+255),b
 15270  000FFA  0E00               	movlw	0
 15271  000FFC  21E3               	addwfc	(LCD_ButtonDraw@bmpPtr+1)& (0+255),w,b
 15272  000FFE  6FC9               	movwf	(??_LCD_ButtonDraw+3)& (0+255),b
 15273  001000  C0C8  FFF6         	movff	??_LCD_ButtonDraw+2,tblptrl
 15274  001004  C0C9  FFF7         	movff	??_LCD_ButtonDraw+3,tblptrh
 15275  001008                     	if	0	;tblptru may be non-zero
 15276  001008                     	endif
 15277  001008                     	if	0	;tblptru may be non-zero
 15278  001008                     	endif
 15279  001008  0009               	tblrd		*+
 15280  00100A  CFF5 F0CA          	movff	tablat,??_LCD_ButtonDraw+4
 15281  00100E  0009               	tblrd		*+
 15282  001010  CFF5 F0CB          	movff	tablat,??_LCD_ButtonDraw+5
 15283  001014  0009               	tblrd		*+
 15284  001016  CFF5 F0CC          	movff	tablat,??_LCD_ButtonDraw+6
 15285  00101A  0009               	tblrd		*+
 15286  00101C  CFF5 F0CD          	movff	tablat,??_LCD_ButtonDraw+7
 15287  001020  90D8               	bcf	status,0,c
 15288  001022  33CD               	rrcf	(??_LCD_ButtonDraw+7)& (0+255),f,b
 15289  001024  33CC               	rrcf	(??_LCD_ButtonDraw+6)& (0+255),f,b
 15290  001026  33CB               	rrcf	(??_LCD_ButtonDraw+5)& (0+255),f,b
 15291  001028  33CA               	rrcf	(??_LCD_ButtonDraw+4)& (0+255),f,b
 15292  00102A  EE20 F006          	lfsr	2,6
 15293  00102E  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15294  001030  26D9               	addwf	fsr2l,f,c
 15295  001032  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15296  001034  22DA               	addwfc	fsr2h,f,c
 15297  001036  CFDE F0CE          	movff	postinc2,??_LCD_ButtonDraw+8
 15298  00103A  CFDD F0CF          	movff	postdec2,??_LCD_ButtonDraw+9
 15299  00103E  90D8               	bcf	status,0,c
 15300  001040  31CF               	rrcf	(??_LCD_ButtonDraw+9)& (0+255),w,b
 15301  001042  6FD1               	movwf	(??_LCD_ButtonDraw+11)& (0+255),b
 15302  001044  31CE               	rrcf	(??_LCD_ButtonDraw+8)& (0+255),w,b
 15303  001046  6FD0               	movwf	(??_LCD_ButtonDraw+10)& (0+255),b
 15304  001048  51CA               	movf	(??_LCD_ButtonDraw+4)& (0+255),w,b
 15305  00104A  5FD0               	subwf	(??_LCD_ButtonDraw+10)& (0+255),f,b
 15306  00104C  51CB               	movf	(??_LCD_ButtonDraw+5)& (0+255),w,b
 15307  00104E  5BD1               	subwfb	(??_LCD_ButtonDraw+11)& (0+255),f,b
 15308  001050  51C6               	movf	??_LCD_ButtonDraw& (0+255),w,b
 15309  001052  25D0               	addwf	(??_LCD_ButtonDraw+10)& (0+255),w,b
 15310  001054  6FDF               	movwf	LCD_ButtonDraw@yText& (0+255),b
 15311  001056  51C7               	movf	(??_LCD_ButtonDraw+1)& (0+255),w,b
 15312  001058  21D1               	addwfc	(??_LCD_ButtonDraw+11)& (0+255),w,b
 15313  00105A  6FE0               	movwf	(LCD_ButtonDraw@yText+1)& (0+255),b
 15314                           
 15315                           ; BSR set to: 0
 15316                           ;libraries/lcd_highlevel.c: 486:     xText = button->width / 2 + button->posX - (bmpPtr-
      +                          >biWidth / 2);
 15317  00105C  C042  FFD9         	movff	LCD_ButtonDraw@button,fsr2l
 15318  001060  C043  FFDA         	movff	LCD_ButtonDraw@button+1,fsr2h
 15319  001064  CFDE F0C6          	movff	postinc2,??_LCD_ButtonDraw
 15320  001068  CFDD F0C7          	movff	postdec2,??_LCD_ButtonDraw+1
 15321  00106C  0E12               	movlw	18
 15322  00106E  25E2               	addwf	LCD_ButtonDraw@bmpPtr& (0+255),w,b
 15323  001070  6FC8               	movwf	(??_LCD_ButtonDraw+2)& (0+255),b
 15324  001072  0E00               	movlw	0
 15325  001074  21E3               	addwfc	(LCD_ButtonDraw@bmpPtr+1)& (0+255),w,b
 15326  001076  6FC9               	movwf	(??_LCD_ButtonDraw+3)& (0+255),b
 15327  001078  C0C8  FFF6         	movff	??_LCD_ButtonDraw+2,tblptrl
 15328  00107C  C0C9  FFF7         	movff	??_LCD_ButtonDraw+3,tblptrh
 15329  001080                     	if	0	;tblptru may be non-zero
 15330  001080                     	endif
 15331  001080                     	if	0	;tblptru may be non-zero
 15332  001080                     	endif
 15333  001080  0009               	tblrd		*+
 15334  001082  CFF5 F0CA          	movff	tablat,??_LCD_ButtonDraw+4
 15335  001086  0009               	tblrd		*+
 15336  001088  CFF5 F0CB          	movff	tablat,??_LCD_ButtonDraw+5
 15337  00108C  0009               	tblrd		*+
 15338  00108E  CFF5 F0CC          	movff	tablat,??_LCD_ButtonDraw+6
 15339  001092  0009               	tblrd		*+
 15340  001094  CFF5 F0CD          	movff	tablat,??_LCD_ButtonDraw+7
 15341  001098  90D8               	bcf	status,0,c
 15342  00109A  33CD               	rrcf	(??_LCD_ButtonDraw+7)& (0+255),f,b
 15343  00109C  33CC               	rrcf	(??_LCD_ButtonDraw+6)& (0+255),f,b
 15344  00109E  33CB               	rrcf	(??_LCD_ButtonDraw+5)& (0+255),f,b
 15345  0010A0  33CA               	rrcf	(??_LCD_ButtonDraw+4)& (0+255),f,b
 15346  0010A2  EE20 F004          	lfsr	2,4
 15347  0010A6  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15348  0010A8  26D9               	addwf	fsr2l,f,c
 15349  0010AA  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15350  0010AC  22DA               	addwfc	fsr2h,f,c
 15351  0010AE  CFDE F0CE          	movff	postinc2,??_LCD_ButtonDraw+8
 15352  0010B2  CFDD F0CF          	movff	postdec2,??_LCD_ButtonDraw+9
 15353  0010B6  90D8               	bcf	status,0,c
 15354  0010B8  31CF               	rrcf	(??_LCD_ButtonDraw+9)& (0+255),w,b
 15355  0010BA  6FD1               	movwf	(??_LCD_ButtonDraw+11)& (0+255),b
 15356  0010BC  31CE               	rrcf	(??_LCD_ButtonDraw+8)& (0+255),w,b
 15357  0010BE  6FD0               	movwf	(??_LCD_ButtonDraw+10)& (0+255),b
 15358  0010C0  51CA               	movf	(??_LCD_ButtonDraw+4)& (0+255),w,b
 15359  0010C2  5FD0               	subwf	(??_LCD_ButtonDraw+10)& (0+255),f,b
 15360  0010C4  51CB               	movf	(??_LCD_ButtonDraw+5)& (0+255),w,b
 15361  0010C6  5BD1               	subwfb	(??_LCD_ButtonDraw+11)& (0+255),f,b
 15362  0010C8  51C6               	movf	??_LCD_ButtonDraw& (0+255),w,b
 15363  0010CA  25D0               	addwf	(??_LCD_ButtonDraw+10)& (0+255),w,b
 15364  0010CC  6FDD               	movwf	LCD_ButtonDraw@xText& (0+255),b
 15365  0010CE  51C7               	movf	(??_LCD_ButtonDraw+1)& (0+255),w,b
 15366  0010D0  21D1               	addwfc	(??_LCD_ButtonDraw+11)& (0+255),w,b
 15367  0010D2  6FDE               	movwf	(LCD_ButtonDraw@xText+1)& (0+255),b
 15368                           
 15369                           ; BSR set to: 0
 15370                           ;libraries/lcd_highlevel.c: 487:     LCD_Bitmap((const uint8_t *)bmpPtr,xText,yText);
 15371  0010D4  C0E2  F027         	movff	LCD_ButtonDraw@bmpPtr,LCD_Bitmap@bmpPtr
 15372  0010D8  C0E3  F028         	movff	LCD_ButtonDraw@bmpPtr+1,LCD_Bitmap@bmpPtr+1
 15373  0010DC  C0DD  F029         	movff	LCD_ButtonDraw@xText,LCD_Bitmap@posX
 15374  0010E0  C0DE  F02A         	movff	LCD_ButtonDraw@xText+1,LCD_Bitmap@posX+1
 15375  0010E4  C0DF  F02B         	movff	LCD_ButtonDraw@yText,LCD_Bitmap@posY
 15376  0010E8  C0E0  F02C         	movff	LCD_ButtonDraw@yText+1,LCD_Bitmap@posY+1
 15377  0010EC  EC8E  F004         	call	_LCD_Bitmap	;wreg free
 15378                           
 15379                           ;libraries/lcd_highlevel.c: 488:   }
 15380  0010F0  D102               	goto	l8620
 15381  0010F2                     l8604:
 15382                           
 15383                           ;libraries/lcd_highlevel.c: 493:   {;libraries/lcd_highlevel.c: 494:     yText = button-
      +                          >height / 2 + button->posY - (button->font->height / 2);
 15384  0010F2  EE20 F002          	lfsr	2,2
 15385  0010F6  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15386  0010F8  26D9               	addwf	fsr2l,f,c
 15387  0010FA  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15388  0010FC  22DA               	addwfc	fsr2h,f,c
 15389  0010FE  CFDE F0C6          	movff	postinc2,??_LCD_ButtonDraw
 15390  001102  CFDD F0C7          	movff	postdec2,??_LCD_ButtonDraw+1
 15391  001106  EE20 F006          	lfsr	2,6
 15392  00110A  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15393  00110C  26D9               	addwf	fsr2l,f,c
 15394  00110E  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15395  001110  22DA               	addwfc	fsr2h,f,c
 15396  001112  CFDE F0C8          	movff	postinc2,??_LCD_ButtonDraw+2
 15397  001116  CFDD F0C9          	movff	postdec2,??_LCD_ButtonDraw+3
 15398  00111A  90D8               	bcf	status,0,c
 15399  00111C  0100               	movlb	0	; () banked
 15400  00111E  31C9               	rrcf	(??_LCD_ButtonDraw+3)& (0+255),w,b
 15401  001120  6FCB               	movwf	(??_LCD_ButtonDraw+5)& (0+255),b
 15402  001122  31C8               	rrcf	(??_LCD_ButtonDraw+2)& (0+255),w,b
 15403  001124  6FCA               	movwf	(??_LCD_ButtonDraw+4)& (0+255),b
 15404  001126  EE20 F00E          	lfsr	2,14
 15405  00112A  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15406  00112C  26D9               	addwf	fsr2l,f,c
 15407  00112E  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15408  001130  22DA               	addwfc	fsr2h,f,c
 15409  001132  CFDE FFF6          	movff	postinc2,tblptrl
 15410  001136  CFDD FFF7          	movff	postdec2,tblptrh
 15411  00113A                     	if	0	;tblptru may be non-zero
 15412  00113A                     	endif
 15413  00113A                     	if	0	;tblptru may be non-zero
 15414  00113A                     	endif
 15415  00113A  0008               	tblrd		*
 15416  00113C  CFF5 F0CC          	movff	tablat,??_LCD_ButtonDraw+6
 15417  001140  90D8               	bcf	status,0,c
 15418  001142  33CC               	rrcf	(??_LCD_ButtonDraw+6)& (0+255),f,b
 15419  001144  51CC               	movf	(??_LCD_ButtonDraw+6)& (0+255),w,b
 15420  001146  5FCA               	subwf	(??_LCD_ButtonDraw+4)& (0+255),f,b
 15421  001148  0E00               	movlw	0
 15422  00114A  5BCB               	subwfb	(??_LCD_ButtonDraw+5)& (0+255),f,b
 15423  00114C  51C6               	movf	??_LCD_ButtonDraw& (0+255),w,b
 15424  00114E  25CA               	addwf	(??_LCD_ButtonDraw+4)& (0+255),w,b
 15425  001150  6FDF               	movwf	LCD_ButtonDraw@yText& (0+255),b
 15426  001152  51C7               	movf	(??_LCD_ButtonDraw+1)& (0+255),w,b
 15427  001154  21CB               	addwfc	(??_LCD_ButtonDraw+5)& (0+255),w,b
 15428  001156  6FE0               	movwf	(LCD_ButtonDraw@yText+1)& (0+255),b
 15429                           
 15430                           ; BSR set to: 0
 15431                           ;libraries/lcd_highlevel.c: 495:     for(i=0;i<strlen(button->text);i++)
 15432  001158  0E00               	movlw	0
 15433  00115A  6FE1               	movwf	LCD_ButtonDraw@i& (0+255),b
 15434  00115C  D05C               	goto	l8614
 15435  00115E                     l8608:
 15436                           
 15437                           ; BSR set to: 0
 15438                           ;libraries/lcd_highlevel.c: 496:     {;libraries/lcd_highlevel.c: 497:       tempChar = 
      +                          (button->text[i]) - button->font->start_char;
 15439  00115E  EE20 F00E          	lfsr	2,14
 15440  001162  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15441  001164  26D9               	addwf	fsr2l,f,c
 15442  001166  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15443  001168  22DA               	addwfc	fsr2h,f,c
 15444  00116A  CFDE F0C6          	movff	postinc2,??_LCD_ButtonDraw
 15445  00116E  CFDD F0C7          	movff	postdec2,??_LCD_ButtonDraw+1
 15446  001172  0E01               	movlw	1
 15447  001174  27C6               	addwf	??_LCD_ButtonDraw& (0+255),f,b
 15448  001176  0E00               	movlw	0
 15449  001178  23C7               	addwfc	(??_LCD_ButtonDraw+1)& (0+255),f,b
 15450  00117A  C0C6  FFF6         	movff	??_LCD_ButtonDraw,tblptrl
 15451  00117E  C0C7  FFF7         	movff	??_LCD_ButtonDraw+1,tblptrh
 15452  001182                     	if	0	;tblptru may be non-zero
 15453  001182                     	endif
 15454  001182                     	if	0	;tblptru may be non-zero
 15455  001182                     	endif
 15456  001182  0008               	tblrd		*
 15457  001184  CFF5 F0C8          	movff	tablat,??_LCD_ButtonDraw+2
 15458  001188  EE20 F00C          	lfsr	2,12
 15459  00118C  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15460  00118E  26D9               	addwf	fsr2l,f,c
 15461  001190  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15462  001192  22DA               	addwfc	fsr2h,f,c
 15463  001194  CFDE F0C9          	movff	postinc2,??_LCD_ButtonDraw+3
 15464  001198  CFDD F0CA          	movff	postdec2,??_LCD_ButtonDraw+4
 15465  00119C  51E1               	movf	LCD_ButtonDraw@i& (0+255),w,b
 15466  00119E  27C9               	addwf	(??_LCD_ButtonDraw+3)& (0+255),f,b
 15467  0011A0  0E00               	movlw	0
 15468  0011A2  23CA               	addwfc	(??_LCD_ButtonDraw+4)& (0+255),f,b
 15469  0011A4  C0C9  FFF6         	movff	??_LCD_ButtonDraw+3,tblptrl
 15470  0011A8  C0CA  FFF7         	movff	??_LCD_ButtonDraw+4,tblptrh
 15471  0011AC                     	if	0	;tblptru may be non-zero
 15472  0011AC                     	endif
 15473  0011AC                     	if	0	;tblptru may be non-zero
 15474  0011AC                     	endif
 15475  0011AC  0008               	tblrd		*
 15476  0011AE  CFF5 F0CB          	movff	tablat,??_LCD_ButtonDraw+5
 15477  0011B2  51C8               	movf	(??_LCD_ButtonDraw+2)& (0+255),w,b
 15478  0011B4  5DCB               	subwf	(??_LCD_ButtonDraw+5)& (0+255),w,b
 15479  0011B6  6FD2               	movwf	LCD_ButtonDraw@tempChar& (0+255),b
 15480                           
 15481                           ; BSR set to: 0
 15482                           ;libraries/lcd_highlevel.c: 498:       width += button->font->descriptor[tempChar].width
      +                          +2;
 15483  0011B8  51D2               	movf	LCD_ButtonDraw@tempChar& (0+255),w,b
 15484  0011BA  0D03               	mullw	3
 15485  0011BC  EE20 F00E          	lfsr	2,14
 15486  0011C0  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15487  0011C2  26D9               	addwf	fsr2l,f,c
 15488  0011C4  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15489  0011C6  22DA               	addwfc	fsr2h,f,c
 15490  0011C8  CFDE F0C6          	movff	postinc2,??_LCD_ButtonDraw
 15491  0011CC  CFDD F0C7          	movff	postdec2,??_LCD_ButtonDraw+1
 15492  0011D0  0E03               	movlw	3
 15493  0011D2  27C6               	addwf	??_LCD_ButtonDraw& (0+255),f,b
 15494  0011D4  0E00               	movlw	0
 15495  0011D6  23C7               	addwfc	(??_LCD_ButtonDraw+1)& (0+255),f,b
 15496  0011D8  C0C6  FFF6         	movff	??_LCD_ButtonDraw,tblptrl
 15497  0011DC  C0C7  FFF7         	movff	??_LCD_ButtonDraw+1,tblptrh
 15498  0011E0                     	if	0	;tblptru may be non-zero
 15499  0011E0                     	endif
 15500  0011E0                     	if	0	;tblptru may be non-zero
 15501  0011E0                     	endif
 15502  0011E0  0009               	tblrd		*+
 15503  0011E2  CFF5 F0C8          	movff	tablat,??_LCD_ButtonDraw+2
 15504  0011E6  0009               	tblrd		*+
 15505  0011E8  CFF5 F0C9          	movff	tablat,??_LCD_ButtonDraw+3
 15506  0011EC  50F3               	movf	243,w,c
 15507  0011EE  27C8               	addwf	(??_LCD_ButtonDraw+2)& (0+255),f,b
 15508  0011F0  50F4               	movf	244,w,c
 15509  0011F2  23C9               	addwfc	(??_LCD_ButtonDraw+3)& (0+255),f,b
 15510  0011F4  C0C8  FFF6         	movff	??_LCD_ButtonDraw+2,tblptrl
 15511  0011F8  C0C9  FFF7         	movff	??_LCD_ButtonDraw+3,tblptrh
 15512  0011FC                     	if	0	;tblptru may be non-zero
 15513  0011FC                     	endif
 15514  0011FC                     	if	0	;tblptru may be non-zero
 15515  0011FC                     	endif
 15516  0011FC  0008               	tblrd		*
 15517  0011FE  50F5               	movf	tablat,w,c
 15518  001200  6FCA               	movwf	(??_LCD_ButtonDraw+4)& (0+255),b
 15519  001202  6BCB               	clrf	(??_LCD_ButtonDraw+5)& (0+255),b
 15520  001204  0E02               	movlw	2
 15521  001206  27CA               	addwf	(??_LCD_ButtonDraw+4)& (0+255),f,b
 15522  001208  0E00               	movlw	0
 15523  00120A  23CB               	addwfc	(??_LCD_ButtonDraw+5)& (0+255),f,b
 15524  00120C  51CA               	movf	(??_LCD_ButtonDraw+4)& (0+255),w,b
 15525  00120E  27D3               	addwf	LCD_ButtonDraw@width& (0+255),f,b
 15526  001210  51CB               	movf	(??_LCD_ButtonDraw+5)& (0+255),w,b
 15527  001212  23D4               	addwfc	(LCD_ButtonDraw@width+1)& (0+255),f,b
 15528                           
 15529                           ; BSR set to: 0
 15530                           ;libraries/lcd_highlevel.c: 499:     }
 15531  001214  2BE1               	incf	LCD_ButtonDraw@i& (0+255),f,b
 15532  001216                     l8614:
 15533                           
 15534                           ; BSR set to: 0
 15535  001216  EE20 F00C          	lfsr	2,12
 15536  00121A  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15537  00121C  26D9               	addwf	fsr2l,f,c
 15538  00121E  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15539  001220  22DA               	addwfc	fsr2h,f,c
 15540  001222  CFDE F012          	movff	postinc2,strlen@s
 15541  001226  CFDD F013          	movff	postdec2,strlen@s+1
 15542  00122A  ECF8  F02A         	call	_strlen	;wreg free
 15543  00122E  0100               	movlb	0	; () banked
 15544  001230  51E1               	movf	LCD_ButtonDraw@i& (0+255),w,b
 15545  001232  6FC6               	movwf	??_LCD_ButtonDraw& (0+255),b
 15546  001234  6BC7               	clrf	(??_LCD_ButtonDraw+1)& (0+255),b
 15547  001236  5012               	movf	?_strlen^0,w,c
 15548  001238  5DC6               	subwf	??_LCD_ButtonDraw& (0+255),w,b
 15549  00123A  5013               	movf	(?_strlen+1)^0,w,c
 15550  00123C  59C7               	subwfb	(??_LCD_ButtonDraw+1)& (0+255),w,b
 15551  00123E  A0D8               	btfss	status,0,c
 15552  001240  D78E               	goto	l8608
 15553                           
 15554                           ; BSR set to: 0
 15555                           ;libraries/lcd_highlevel.c: 500:     xText = button->width / 2 + button->posX - (width /
      +                           2);
 15556  001242  C042  FFD9         	movff	LCD_ButtonDraw@button,fsr2l
 15557  001246  C043  FFDA         	movff	LCD_ButtonDraw@button+1,fsr2h
 15558  00124A  CFDE F0C6          	movff	postinc2,??_LCD_ButtonDraw
 15559  00124E  CFDD F0C7          	movff	postdec2,??_LCD_ButtonDraw+1
 15560  001252  90D8               	bcf	status,0,c
 15561  001254  31D4               	rrcf	(LCD_ButtonDraw@width+1)& (0+255),w,b
 15562  001256  6FC9               	movwf	(??_LCD_ButtonDraw+3)& (0+255),b
 15563  001258  31D3               	rrcf	LCD_ButtonDraw@width& (0+255),w,b
 15564  00125A  6FC8               	movwf	(??_LCD_ButtonDraw+2)& (0+255),b
 15565  00125C  EE20 F004          	lfsr	2,4
 15566  001260  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15567  001262  26D9               	addwf	fsr2l,f,c
 15568  001264  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15569  001266  22DA               	addwfc	fsr2h,f,c
 15570  001268  CFDE F0CA          	movff	postinc2,??_LCD_ButtonDraw+4
 15571  00126C  CFDD F0CB          	movff	postdec2,??_LCD_ButtonDraw+5
 15572  001270  90D8               	bcf	status,0,c
 15573  001272  31CB               	rrcf	(??_LCD_ButtonDraw+5)& (0+255),w,b
 15574  001274  6FCD               	movwf	(??_LCD_ButtonDraw+7)& (0+255),b
 15575  001276  31CA               	rrcf	(??_LCD_ButtonDraw+4)& (0+255),w,b
 15576  001278  6FCC               	movwf	(??_LCD_ButtonDraw+6)& (0+255),b
 15577  00127A  51C8               	movf	(??_LCD_ButtonDraw+2)& (0+255),w,b
 15578  00127C  5FCC               	subwf	(??_LCD_ButtonDraw+6)& (0+255),f,b
 15579  00127E  51C9               	movf	(??_LCD_ButtonDraw+3)& (0+255),w,b
 15580  001280  5BCD               	subwfb	(??_LCD_ButtonDraw+7)& (0+255),f,b
 15581  001282  51C6               	movf	??_LCD_ButtonDraw& (0+255),w,b
 15582  001284  25CC               	addwf	(??_LCD_ButtonDraw+6)& (0+255),w,b
 15583  001286  6FDD               	movwf	LCD_ButtonDraw@xText& (0+255),b
 15584  001288  51C7               	movf	(??_LCD_ButtonDraw+1)& (0+255),w,b
 15585  00128A  21CD               	addwfc	(??_LCD_ButtonDraw+7)& (0+255),w,b
 15586  00128C  6FDE               	movwf	(LCD_ButtonDraw@xText+1)& (0+255),b
 15587                           
 15588                           ; BSR set to: 0
 15589                           ;libraries/lcd_highlevel.c: 501:     LCD_DrawText(button->text, button->font,A_LEFT,
 15590  00128E  EE20 F00C          	lfsr	2,12
 15591  001292  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15592  001294  26D9               	addwf	fsr2l,f,c
 15593  001296  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15594  001298  22DA               	addwfc	fsr2h,f,c
 15595  00129A  CFDE F020          	movff	postinc2,LCD_DrawText@msg
 15596  00129E  CFDD F021          	movff	postdec2,LCD_DrawText@msg+1
 15597  0012A2  EE20 F00E          	lfsr	2,14
 15598  0012A6  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15599  0012A8  26D9               	addwf	fsr2l,f,c
 15600  0012AA  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15601  0012AC  22DA               	addwfc	fsr2h,f,c
 15602  0012AE  CFDE F022          	movff	postinc2,LCD_DrawText@font
 15603  0012B2  CFDD F023          	movff	postdec2,LCD_DrawText@font+1
 15604  0012B6  0E00               	movlw	0
 15605  0012B8  6E24               	movwf	LCD_DrawText@align^0,c
 15606  0012BA  C0DD  F025         	movff	LCD_ButtonDraw@xText,LCD_DrawText@posX
 15607  0012BE  C0DE  F026         	movff	LCD_ButtonDraw@xText+1,LCD_DrawText@posX+1
 15608  0012C2  C0DF  F027         	movff	LCD_ButtonDraw@yText,LCD_DrawText@posY
 15609  0012C6  C0E0  F028         	movff	LCD_ButtonDraw@yText+1,LCD_DrawText@posY+1
 15610  0012CA  EE20 F008          	lfsr	2,8
 15611  0012CE  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15612  0012D0  26D9               	addwf	fsr2l,f,c
 15613  0012D2  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15614  0012D4  22DA               	addwfc	fsr2h,f,c
 15615  0012D6  CFDE F029          	movff	postinc2,LCD_DrawText@color
 15616  0012DA  CFDD F02A          	movff	postdec2,LCD_DrawText@color+1
 15617  0012DE  EE20 F00A          	lfsr	2,10
 15618  0012E2  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15619  0012E4  26D9               	addwf	fsr2l,f,c
 15620  0012E6  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15621  0012E8  22DA               	addwfc	fsr2h,f,c
 15622  0012EA  CFDE F02B          	movff	postinc2,LCD_DrawText@bg_color
 15623  0012EE  CFDD F02C          	movff	postdec2,LCD_DrawText@bg_color+1
 15624  0012F2  EC82  F00F         	call	_LCD_DrawText	;wreg free
 15625  0012F6                     l8620:
 15626                           
 15627                           ;libraries/lcd_highlevel.c: 504:   LCD_ButtonUpdate(button);
 15628  0012F6  C042  F025         	movff	LCD_ButtonDraw@button,LCD_ButtonUpdate@button
 15629  0012FA  C043  F026         	movff	LCD_ButtonDraw@button+1,LCD_ButtonUpdate@button+1
 15630  0012FE  EC44  F018         	call	_LCD_ButtonUpdate	;wreg free
 15631  001302  0012               	return		;funcret
 15632  001304                     __end_of_LCD_ButtonDraw:
 15633                           	callstack 0
 15634                           
 15635 ;; *************** function _LCD_DrawText *****************
 15636 ;; Defined at:
 15637 ;;		line 713 in file "libraries/lcd_highlevel.c"
 15638 ;; Parameters:    Size  Location     Type
 15639 ;;  msg             2   31[COMRAM] PTR const unsigned char 
 15640 ;;		 -> g1.str(2), STR_15(13), STR_14(13), STR_13(6), 
 15641 ;;		 -> STR_12(11), STR_11(11), STR_10(8), STR_9(9), 
 15642 ;;		 -> STR_8(2), STR_7(9), STR_6(11), STR_5(9), 
 15643 ;;		 -> STR_4(9), g1(240), STR_1(10), 
 15644 ;;  font            2   33[COMRAM] PTR const struct .
 15645 ;;		 -> arialNarrow_12ptFontInfo(7), 
 15646 ;;  align           1   35[COMRAM] enum E355
 15647 ;;  posX            2   36[COMRAM] unsigned short 
 15648 ;;  posY            2   38[COMRAM] unsigned short 
 15649 ;;  color           2   40[COMRAM] unsigned short 
 15650 ;;  bg_color        2   42[COMRAM] unsigned short 
 15651 ;; Auto vars:     Size  Location     Type
 15652 ;;  posXEnd         2   58[COMRAM] unsigned short 
 15653 ;;  posYEnd         2   56[COMRAM] unsigned short 
 15654 ;;  yOffset         2   52[COMRAM] unsigned short 
 15655 ;;  offset          2   50[COMRAM] unsigned short 
 15656 ;;  width           1   64[COMRAM] unsigned char 
 15657 ;;  x               1   63[COMRAM] unsigned char 
 15658 ;;  tempChar        1   62[COMRAM] char 
 15659 ;;  i               1   61[COMRAM] unsigned char 
 15660 ;;  y               1   60[COMRAM] unsigned char 
 15661 ;;  fontPixel       1   55[COMRAM] unsigned char 
 15662 ;;  fontByte        1   54[COMRAM] unsigned char 
 15663 ;; Return value:  Size  Location     Type
 15664 ;;                  1    wreg      void 
 15665 ;; Registers used:
 15666 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15667 ;; Tracked objects:
 15668 ;;		On entry : 0/0
 15669 ;;		On exit  : 0/0
 15670 ;;		Unchanged: 0/0
 15671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15672 ;;      Params:        13       0       0       0       0       0       0
 15673 ;;      Locals:        15       0       0       0       0       0       0
 15674 ;;      Temps:          6       0       0       0       0       0       0
 15675 ;;      Totals:        34       0       0       0       0       0       0
 15676 ;;Total ram usage:       34 bytes
 15677 ;; Hardware stack levels used: 1
 15678 ;; Hardware stack levels required when called: 5
 15679 ;; This function calls:
 15680 ;;		___awdiv
 15681 ;;		___wmul
 15682 ;;		_strlen
 15683 ;; This function is called by:
 15684 ;;		_Factory_init
 15685 ;;		_Score_draw
 15686 ;;		_Menu_welcomeDraw
 15687 ;;		_Menu_parametersDraw
 15688 ;;		_Menu_endGame
 15689 ;;		_LCD_ButtonDraw
 15690 ;; This function uses a non-reentrant model
 15691 ;;
 15692                           
 15693                           	psect	text69
 15694  001F04                     __ptext69:
 15695                           	callstack 0
 15696  001F04                     _LCD_DrawText:
 15697                           	callstack 20
 15698                           
 15699                           ;libraries/lcd_highlevel.c: 713: void LCD_DrawText(const uint8_t * msg,const FONT_INFO *
      +                           font, ALIGN align,;libraries/lcd_highlevel.c: 714:         uint16_t posX, uint16_t posY
      +                          , uint16_t color, uint16_t bg_color);libraries/lcd_highlevel.c: 715: {;libraries/lcd_hig
      +                          hlevel.c: 716:   uint8_t x,y,i;;libraries/lcd_highlevel.c: 717:   int8_t tempChar;;libra
      +                          ries/lcd_highlevel.c: 718:   uint16_t offset;;libraries/lcd_highlevel.c: 719:   uint8_t 
      +                          width=0;
 15700                           
 15701                           ;incstack = 0
 15702  001F04  0E00               	movlw	0
 15703  001F06  6E41               	movwf	LCD_DrawText@width^0,c
 15704                           
 15705                           ;libraries/lcd_highlevel.c: 720:   uint8_t fontByte,fontPixel;;libraries/lcd_highlevel.c
      +                          : 721:   uint16_t posYEnd, posXEnd, yOffset;;libraries/lcd_highlevel.c: 725:   for(i=0;i
      +                          <strlen(msg);i++)
 15706  001F08  0E00               	movlw	0
 15707  001F0A  6E3E               	movwf	LCD_DrawText@i^0,c
 15708  001F0C  D04F               	goto	l8422
 15709  001F0E                     l8416:
 15710                           
 15711                           ;libraries/lcd_highlevel.c: 726:   {;libraries/lcd_highlevel.c: 727:     tempChar = (msg
      +                          [i]) - font->start_char;
 15712  001F0E  0E01               	movlw	1
 15713  001F10  2422               	addwf	LCD_DrawText@font^0,w,c
 15714  001F12  6E2D               	movwf	??_LCD_DrawText^0,c
 15715  001F14  0E00               	movlw	0
 15716  001F16  2023               	addwfc	(LCD_DrawText@font+1)^0,w,c
 15717  001F18  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 15718  001F1A  C02D  FFF6         	movff	??_LCD_DrawText,tblptrl
 15719  001F1E  C02E  FFF7         	movff	??_LCD_DrawText+1,tblptrh
 15720  001F22                     	if	0	;tblptru may be non-zero
 15721  001F22                     	endif
 15722  001F22                     	if	0	;tblptru may be non-zero
 15723  001F22                     	endif
 15724  001F22  0008               	tblrd		*
 15725  001F24  CFF5 F02F          	movff	tablat,??_LCD_DrawText+2
 15726  001F28  503E               	movf	LCD_DrawText@i^0,w,c
 15727  001F2A  2420               	addwf	LCD_DrawText@msg^0,w,c
 15728  001F2C  6E30               	movwf	(??_LCD_DrawText+3)^0,c
 15729  001F2E  0E00               	movlw	0
 15730  001F30  2021               	addwfc	(LCD_DrawText@msg+1)^0,w,c
 15731  001F32  6E31               	movwf	(??_LCD_DrawText+4)^0,c
 15732  001F34  C030  FFF6         	movff	??_LCD_DrawText+3,tblptrl
 15733  001F38  C031  FFF7         	movff	??_LCD_DrawText+4,tblptrh
 15734  001F3C  6AF8               	clrf	tblptru,c
 15735  001F3E  0E05               	movlw	(high __ramtop+-1)
 15736  001F40  64F7               	cpfsgt	tblptrh,c
 15737  001F42  D003               	bra	u6187
 15738  001F44  0008               	tblrd		*
 15739  001F46  50F5               	movf	tablat,w,c
 15740  001F48  D005               	bra	u6180
 15741  001F4A                     u6187:
 15742  001F4A  CFF6 FFE1          	movff	tblptrl,fsr1l
 15743  001F4E  CFF7 FFE2          	movff	tblptrh,fsr1h
 15744  001F52  50E7               	movf	indf1,w,c
 15745  001F54                     u6180:
 15746  001F54  6E32               	movwf	(??_LCD_DrawText+5)^0,c
 15747  001F56  502F               	movf	(??_LCD_DrawText+2)^0,w,c
 15748  001F58  5C32               	subwf	(??_LCD_DrawText+5)^0,w,c
 15749  001F5A  6E3F               	movwf	LCD_DrawText@tempChar^0,c
 15750                           
 15751                           ;libraries/lcd_highlevel.c: 728:     width += font->descriptor[tempChar].width+2;
 15752  001F5C  503F               	movf	LCD_DrawText@tempChar^0,w,c
 15753  001F5E  6E1A               	movwf	___wmul@multiplier^0,c
 15754  001F60  6A1B               	clrf	(___wmul@multiplier+1)^0,c
 15755  001F62  BE1A               	btfsc	___wmul@multiplier^0,7,c
 15756  001F64  061B               	decf	(___wmul@multiplier+1)^0,f,c
 15757  001F66  0E00               	movlw	0
 15758  001F68  6E1D               	movwf	(___wmul@multiplicand+1)^0,c
 15759  001F6A  0E03               	movlw	3
 15760  001F6C  6E1C               	movwf	___wmul@multiplicand^0,c
 15761  001F6E  EC75  F02C         	call	___wmul	;wreg free
 15762  001F72  0E03               	movlw	3
 15763  001F74  2422               	addwf	LCD_DrawText@font^0,w,c
 15764  001F76  6E2D               	movwf	??_LCD_DrawText^0,c
 15765  001F78  0E00               	movlw	0
 15766  001F7A  2023               	addwfc	(LCD_DrawText@font+1)^0,w,c
 15767  001F7C  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 15768  001F7E  C02D  FFF6         	movff	??_LCD_DrawText,tblptrl
 15769  001F82  C02E  FFF7         	movff	??_LCD_DrawText+1,tblptrh
 15770  001F86                     	if	0	;tblptru may be non-zero
 15771  001F86                     	endif
 15772  001F86                     	if	0	;tblptru may be non-zero
 15773  001F86                     	endif
 15774  001F86  0009               	tblrd		*+
 15775  001F88  CFF5 F02F          	movff	tablat,??_LCD_DrawText+2
 15776  001F8C  0009               	tblrd		*+
 15777  001F8E  CFF5 F030          	movff	tablat,??_LCD_DrawText+3
 15778  001F92  501A               	movf	?___wmul^0,w,c
 15779  001F94  262F               	addwf	(??_LCD_DrawText+2)^0,f,c
 15780  001F96  501B               	movf	(?___wmul+1)^0,w,c
 15781  001F98  2230               	addwfc	(??_LCD_DrawText+3)^0,f,c
 15782  001F9A  C02F  FFF6         	movff	??_LCD_DrawText+2,tblptrl
 15783  001F9E  C030  FFF7         	movff	??_LCD_DrawText+3,tblptrh
 15784  001FA2                     	if	0	;tblptru may be non-zero
 15785  001FA2                     	endif
 15786  001FA2                     	if	0	;tblptru may be non-zero
 15787  001FA2                     	endif
 15788  001FA2  0008               	tblrd		*
 15789  001FA4  50F5               	movf	tablat,w,c
 15790  001FA6  0F02               	addlw	2
 15791  001FA8  2641               	addwf	LCD_DrawText@width^0,f,c
 15792                           
 15793                           ;libraries/lcd_highlevel.c: 729:   }
 15794  001FAA  2A3E               	incf	LCD_DrawText@i^0,f,c
 15795  001FAC                     l8422:
 15796  001FAC  C020  F012         	movff	LCD_DrawText@msg,strlen@s
 15797  001FB0  C021  F013         	movff	LCD_DrawText@msg+1,strlen@s+1
 15798  001FB4  ECF8  F02A         	call	_strlen	;wreg free
 15799  001FB8  503E               	movf	LCD_DrawText@i^0,w,c
 15800  001FBA  6E2D               	movwf	??_LCD_DrawText^0,c
 15801  001FBC  6A2E               	clrf	(??_LCD_DrawText+1)^0,c
 15802  001FBE  5012               	movf	?_strlen^0,w,c
 15803  001FC0  5C2D               	subwf	??_LCD_DrawText^0,w,c
 15804  001FC2  5013               	movf	(?_strlen+1)^0,w,c
 15805  001FC4  582E               	subwfb	(??_LCD_DrawText+1)^0,w,c
 15806  001FC6  A0D8               	btfss	status,0,c
 15807  001FC8  D7A2               	goto	l8416
 15808                           
 15809                           ;libraries/lcd_highlevel.c: 730:   if(align == A_RIGHT)
 15810  001FCA  0424               	decf	LCD_DrawText@align^0,w,c
 15811  001FCC  A4D8               	btfss	status,2,c
 15812  001FCE  D002               	goto	l8428
 15813                           
 15814                           ;libraries/lcd_highlevel.c: 731:   {;libraries/lcd_highlevel.c: 732:     posX = posX - w
      +                          idth;
 15815  001FD0  5041               	movf	LCD_DrawText@width^0,w,c
 15816  001FD2  D009               	goto	L9
 15817  001FD4                     l8428:
 15818  001FD4  0E02               	movlw	2
 15819  001FD6  1824               	xorwf	LCD_DrawText@align^0,w,c
 15820  001FD8  A4D8               	btfss	status,2,c
 15821  001FDA  D00B               	goto	l8432
 15822                           
 15823                           ;libraries/lcd_highlevel.c: 735:   {;libraries/lcd_highlevel.c: 736:     posX = posX - w
      +                          idth / 2;
 15824  001FDC  C041  F02D         	movff	LCD_DrawText@width,??_LCD_DrawText
 15825  001FE0  90D8               	bcf	status,0,c
 15826  001FE2  322D               	rrcf	??_LCD_DrawText^0,f,c
 15827  001FE4  502D               	movf	??_LCD_DrawText^0,w,c
 15828  001FE6                     L9:
 15829  001FE6  5C25               	subwf	LCD_DrawText@posX^0,w,c
 15830  001FE8  6E25               	movwf	LCD_DrawText@posX^0,c
 15831  001FEA  5026               	movf	(LCD_DrawText@posX+1)^0,w,c
 15832  001FEC  A0D8               	btfss	status,0,c
 15833  001FEE  0426               	decf	(LCD_DrawText@posX+1)^0,w,c
 15834  001FF0  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 15835  001FF2                     l8432:
 15836                           
 15837                           ;libraries/lcd_highlevel.c: 740:   {;libraries/lcd_highlevel.c: 741:     tempChar = (*ms
      +                          g) - font->start_char;
 15838  001FF2  0E01               	movlw	1
 15839  001FF4  2422               	addwf	LCD_DrawText@font^0,w,c
 15840  001FF6  6E2D               	movwf	??_LCD_DrawText^0,c
 15841  001FF8  0E00               	movlw	0
 15842  001FFA  2023               	addwfc	(LCD_DrawText@font+1)^0,w,c
 15843  001FFC  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 15844  001FFE  C02D  FFF6         	movff	??_LCD_DrawText,tblptrl
 15845  002002  C02E  FFF7         	movff	??_LCD_DrawText+1,tblptrh
 15846  002006                     	if	0	;tblptru may be non-zero
 15847  002006                     	endif
 15848  002006                     	if	0	;tblptru may be non-zero
 15849  002006                     	endif
 15850  002006  0008               	tblrd		*
 15851  002008  CFF5 F02F          	movff	tablat,??_LCD_DrawText+2
 15852  00200C  C020  FFF6         	movff	LCD_DrawText@msg,tblptrl
 15853  002010  C021  FFF7         	movff	LCD_DrawText@msg+1,tblptrh
 15854  002014  6AF8               	clrf	tblptru,c
 15855  002016  0E05               	movlw	(high __ramtop+-1)
 15856  002018  64F7               	cpfsgt	tblptrh,c
 15857  00201A  D003               	bra	u6227
 15858  00201C  0008               	tblrd		*
 15859  00201E  50F5               	movf	tablat,w,c
 15860  002020  D005               	bra	u6220
 15861  002022                     u6227:
 15862  002022  CFF6 FFE1          	movff	tblptrl,fsr1l
 15863  002026  CFF7 FFE2          	movff	tblptrh,fsr1h
 15864  00202A  50E7               	movf	indf1,w,c
 15865  00202C                     u6220:
 15866  00202C  6E30               	movwf	(??_LCD_DrawText+3)^0,c
 15867  00202E  502F               	movf	(??_LCD_DrawText+2)^0,w,c
 15868  002030  5C30               	subwf	(??_LCD_DrawText+3)^0,w,c
 15869  002032  6E3F               	movwf	LCD_DrawText@tempChar^0,c
 15870                           
 15871                           ;libraries/lcd_highlevel.c: 742:     offset = font->descriptor[tempChar].offset;
 15872  002034  503F               	movf	LCD_DrawText@tempChar^0,w,c
 15873  002036  6E1A               	movwf	___wmul@multiplier^0,c
 15874  002038  6A1B               	clrf	(___wmul@multiplier+1)^0,c
 15875  00203A  BE1A               	btfsc	___wmul@multiplier^0,7,c
 15876  00203C  061B               	decf	(___wmul@multiplier+1)^0,f,c
 15877  00203E  0E00               	movlw	0
 15878  002040  6E1D               	movwf	(___wmul@multiplicand+1)^0,c
 15879  002042  0E03               	movlw	3
 15880  002044  6E1C               	movwf	___wmul@multiplicand^0,c
 15881  002046  EC75  F02C         	call	___wmul	;wreg free
 15882  00204A  0E03               	movlw	3
 15883  00204C  2422               	addwf	LCD_DrawText@font^0,w,c
 15884  00204E  6E2D               	movwf	??_LCD_DrawText^0,c
 15885  002050  0E00               	movlw	0
 15886  002052  2023               	addwfc	(LCD_DrawText@font+1)^0,w,c
 15887  002054  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 15888  002056  C02D  FFF6         	movff	??_LCD_DrawText,tblptrl
 15889  00205A  C02E  FFF7         	movff	??_LCD_DrawText+1,tblptrh
 15890  00205E                     	if	0	;tblptru may be non-zero
 15891  00205E                     	endif
 15892  00205E                     	if	0	;tblptru may be non-zero
 15893  00205E                     	endif
 15894  00205E  0009               	tblrd		*+
 15895  002060  CFF5 F02F          	movff	tablat,??_LCD_DrawText+2
 15896  002064  0009               	tblrd		*+
 15897  002066  CFF5 F030          	movff	tablat,??_LCD_DrawText+3
 15898  00206A  501A               	movf	?___wmul^0,w,c
 15899  00206C  262F               	addwf	(??_LCD_DrawText+2)^0,f,c
 15900  00206E  501B               	movf	(?___wmul+1)^0,w,c
 15901  002070  2230               	addwfc	(??_LCD_DrawText+3)^0,f,c
 15902  002072  0E01               	movlw	1
 15903  002074  262F               	addwf	(??_LCD_DrawText+2)^0,f,c
 15904  002076  0E00               	movlw	0
 15905  002078  2230               	addwfc	(??_LCD_DrawText+3)^0,f,c
 15906  00207A  C02F  FFF6         	movff	??_LCD_DrawText+2,tblptrl
 15907  00207E  C030  FFF7         	movff	??_LCD_DrawText+3,tblptrh
 15908  002082                     	if	0	;tblptru may be non-zero
 15909  002082                     	endif
 15910  002082                     	if	0	;tblptru may be non-zero
 15911  002082                     	endif
 15912  002082  0009               	tblrd		*+
 15913  002084  CFF5 F033          	movff	tablat,LCD_DrawText@offset
 15914  002088  000A               	tblrd		*-
 15915  00208A  CFF5 F034          	movff	tablat,LCD_DrawText@offset+1
 15916                           
 15917                           ;libraries/lcd_highlevel.c: 743:     width = font->descriptor[tempChar].width;
 15918  00208E  503F               	movf	LCD_DrawText@tempChar^0,w,c
 15919  002090  6E1A               	movwf	___wmul@multiplier^0,c
 15920  002092  6A1B               	clrf	(___wmul@multiplier+1)^0,c
 15921  002094  BE1A               	btfsc	___wmul@multiplier^0,7,c
 15922  002096  061B               	decf	(___wmul@multiplier+1)^0,f,c
 15923  002098  0E00               	movlw	0
 15924  00209A  6E1D               	movwf	(___wmul@multiplicand+1)^0,c
 15925  00209C  0E03               	movlw	3
 15926  00209E  6E1C               	movwf	___wmul@multiplicand^0,c
 15927  0020A0  EC75  F02C         	call	___wmul	;wreg free
 15928  0020A4  0E03               	movlw	3
 15929  0020A6  2422               	addwf	LCD_DrawText@font^0,w,c
 15930  0020A8  6E2D               	movwf	??_LCD_DrawText^0,c
 15931  0020AA  0E00               	movlw	0
 15932  0020AC  2023               	addwfc	(LCD_DrawText@font+1)^0,w,c
 15933  0020AE  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 15934  0020B0  C02D  FFF6         	movff	??_LCD_DrawText,tblptrl
 15935  0020B4  C02E  FFF7         	movff	??_LCD_DrawText+1,tblptrh
 15936  0020B8                     	if	0	;tblptru may be non-zero
 15937  0020B8                     	endif
 15938  0020B8                     	if	0	;tblptru may be non-zero
 15939  0020B8                     	endif
 15940  0020B8  0009               	tblrd		*+
 15941  0020BA  CFF5 F02F          	movff	tablat,??_LCD_DrawText+2
 15942  0020BE  0009               	tblrd		*+
 15943  0020C0  CFF5 F030          	movff	tablat,??_LCD_DrawText+3
 15944  0020C4  501A               	movf	?___wmul^0,w,c
 15945  0020C6  262F               	addwf	(??_LCD_DrawText+2)^0,f,c
 15946  0020C8  501B               	movf	(?___wmul+1)^0,w,c
 15947  0020CA  2230               	addwfc	(??_LCD_DrawText+3)^0,f,c
 15948  0020CC  C02F  FFF6         	movff	??_LCD_DrawText+2,tblptrl
 15949  0020D0  C030  FFF7         	movff	??_LCD_DrawText+3,tblptrh
 15950  0020D4                     	if	0	;tblptru may be non-zero
 15951  0020D4                     	endif
 15952  0020D4                     	if	0	;tblptru may be non-zero
 15953  0020D4                     	endif
 15954  0020D4  0008               	tblrd		*
 15955  0020D6  CFF5 F041          	movff	tablat,LCD_DrawText@width
 15956                           
 15957                           ;libraries/lcd_highlevel.c: 748:     PORTA = 0x2A; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 15958  0020DA  0E2A               	movlw	42
 15959  0020DC  6E80               	movwf	128,c	;volatile
 15960  0020DE  988B               	bcf	3979,4,c	;volatile
 15961  0020E0  968B               	bcf	3979,3,c	;volatile
 15962  0020E2  868B               	bsf	3979,3,c	;volatile
 15963  0020E4  888B               	bsf	3979,4,c	;volatile
 15964                           
 15965                           ;libraries/lcd_highlevel.c: 749:     PORTA = posX>>8; LATC3 = 0; LATC3 = 1;;
 15966  0020E6  C026  FF80         	movff	LCD_DrawText@posX+1,3968	;volatile
 15967  0020EA  968B               	bcf	3979,3,c	;volatile
 15968  0020EC  868B               	bsf	3979,3,c	;volatile
 15969                           
 15970                           ;libraries/lcd_highlevel.c: 750:     PORTA = posX; LATC3 = 0; LATC3 = 1;;
 15971  0020EE  C025  FF80         	movff	LCD_DrawText@posX,3968	;volatile
 15972  0020F2  968B               	bcf	3979,3,c	;volatile
 15973  0020F4  868B               	bsf	3979,3,c	;volatile
 15974                           
 15975                           ;libraries/lcd_highlevel.c: 751:     posXEnd = posX+width-1+2;
 15976  0020F6  5041               	movf	LCD_DrawText@width^0,w,c
 15977  0020F8  2425               	addwf	LCD_DrawText@posX^0,w,c
 15978  0020FA  6E2D               	movwf	??_LCD_DrawText^0,c
 15979  0020FC  0E00               	movlw	0
 15980  0020FE  2026               	addwfc	(LCD_DrawText@posX+1)^0,w,c
 15981  002100  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 15982  002102  0E01               	movlw	1
 15983  002104  242D               	addwf	??_LCD_DrawText^0,w,c
 15984  002106  6E3B               	movwf	LCD_DrawText@posXEnd^0,c
 15985  002108  0E00               	movlw	0
 15986  00210A  202E               	addwfc	(??_LCD_DrawText+1)^0,w,c
 15987  00210C  6E3C               	movwf	(LCD_DrawText@posXEnd+1)^0,c
 15988                           
 15989                           ;libraries/lcd_highlevel.c: 752:     PORTA = posXEnd>>8; LATC3 = 0; LATC3 = 1;;
 15990  00210E  C03C  FF80         	movff	LCD_DrawText@posXEnd+1,3968	;volatile
 15991  002112  968B               	bcf	3979,3,c	;volatile
 15992  002114  868B               	bsf	3979,3,c	;volatile
 15993                           
 15994                           ;libraries/lcd_highlevel.c: 753:     PORTA = posXEnd; LATC3 = 0; LATC3 = 1;;
 15995  002116  C03B  FF80         	movff	LCD_DrawText@posXEnd,3968	;volatile
 15996  00211A  968B               	bcf	3979,3,c	;volatile
 15997  00211C  868B               	bsf	3979,3,c	;volatile
 15998                           
 15999                           ;libraries/lcd_highlevel.c: 755:     PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 16000  00211E  0E2B               	movlw	43
 16001  002120  6E80               	movwf	128,c	;volatile
 16002  002122  988B               	bcf	3979,4,c	;volatile
 16003  002124  968B               	bcf	3979,3,c	;volatile
 16004  002126  868B               	bsf	3979,3,c	;volatile
 16005  002128  888B               	bsf	3979,4,c	;volatile
 16006                           
 16007                           ;libraries/lcd_highlevel.c: 756:     PORTA = posY>>8; LATC3 = 0; LATC3 = 1;;
 16008  00212A  C028  FF80         	movff	LCD_DrawText@posY+1,3968	;volatile
 16009  00212E  968B               	bcf	3979,3,c	;volatile
 16010  002130  868B               	bsf	3979,3,c	;volatile
 16011                           
 16012                           ;libraries/lcd_highlevel.c: 757:     PORTA = posY; LATC3 = 0; LATC3 = 1;;
 16013  002132  C027  FF80         	movff	LCD_DrawText@posY,3968	;volatile
 16014  002136  968B               	bcf	3979,3,c	;volatile
 16015  002138  868B               	bsf	3979,3,c	;volatile
 16016                           
 16017                           ;libraries/lcd_highlevel.c: 758:     posYEnd = posY + font->height-1;
 16018  00213A  C022  FFF6         	movff	LCD_DrawText@font,tblptrl
 16019  00213E  C023  FFF7         	movff	LCD_DrawText@font+1,tblptrh
 16020  002142                     	if	0	;tblptru may be non-zero
 16021  002142                     	endif
 16022  002142                     	if	0	;tblptru may be non-zero
 16023  002142                     	endif
 16024  002142  0008               	tblrd		*
 16025  002144  50F5               	movf	tablat,w,c
 16026  002146  2427               	addwf	LCD_DrawText@posY^0,w,c
 16027  002148  6E2D               	movwf	??_LCD_DrawText^0,c
 16028  00214A  0E00               	movlw	0
 16029  00214C  2028               	addwfc	(LCD_DrawText@posY+1)^0,w,c
 16030  00214E  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 16031  002150  0EFF               	movlw	255
 16032  002152  242D               	addwf	??_LCD_DrawText^0,w,c
 16033  002154  6E39               	movwf	LCD_DrawText@posYEnd^0,c
 16034  002156  0EFF               	movlw	255
 16035  002158  202E               	addwfc	(??_LCD_DrawText+1)^0,w,c
 16036  00215A  6E3A               	movwf	(LCD_DrawText@posYEnd+1)^0,c
 16037                           
 16038                           ;libraries/lcd_highlevel.c: 759:     PORTA = posYEnd>>8; LATC3 = 0; LATC3 = 1;;
 16039  00215C  C03A  FF80         	movff	LCD_DrawText@posYEnd+1,3968	;volatile
 16040  002160  968B               	bcf	3979,3,c	;volatile
 16041  002162  868B               	bsf	3979,3,c	;volatile
 16042                           
 16043                           ;libraries/lcd_highlevel.c: 760:     PORTA = posYEnd; LATC3 = 0; LATC3 = 1;;
 16044  002164  C039  FF80         	movff	LCD_DrawText@posYEnd,3968	;volatile
 16045  002168  968B               	bcf	3979,3,c	;volatile
 16046  00216A  868B               	bsf	3979,3,c	;volatile
 16047                           
 16048                           ;libraries/lcd_highlevel.c: 761:     PORTA = 0x2C; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 16049  00216C  0E2C               	movlw	44
 16050  00216E  6E80               	movwf	128,c	;volatile
 16051  002170  988B               	bcf	3979,4,c	;volatile
 16052  002172  968B               	bcf	3979,3,c	;volatile
 16053  002174  868B               	bsf	3979,3,c	;volatile
 16054  002176  888B               	bsf	3979,4,c	;volatile
 16055                           
 16056                           ;libraries/lcd_highlevel.c: 763:     for(y=0;y<font->height;y++)
 16057  002178  0E00               	movlw	0
 16058  00217A  6E3D               	movwf	LCD_DrawText@y^0,c
 16059  00217C  D07D               	goto	l8550
 16060  00217E                     l8522:
 16061                           
 16062                           ;libraries/lcd_highlevel.c: 764:     {;libraries/lcd_highlevel.c: 765:       yOffset = o
      +                          ffset + (y * ((width+7)/8));
 16063  00217E  C03D  F01A         	movff	LCD_DrawText@y,___wmul@multiplier
 16064  002182  6A1B               	clrf	(___wmul@multiplier+1)^0,c
 16065  002184  0E00               	movlw	0
 16066  002186  6E15               	movwf	(___awdiv@divisor+1)^0,c
 16067  002188  0E08               	movlw	8
 16068  00218A  6E14               	movwf	___awdiv@divisor^0,c
 16069  00218C  0E07               	movlw	7
 16070  00218E  2441               	addwf	LCD_DrawText@width^0,w,c
 16071  002190  6E12               	movwf	___awdiv@dividend^0,c
 16072  002192  6A13               	clrf	(___awdiv@dividend+1)^0,c
 16073  002194  0E00               	movlw	0
 16074  002196  2213               	addwfc	(___awdiv@dividend+1)^0,f,c
 16075  002198  ECF7  F027         	call	___awdiv	;wreg free
 16076  00219C  C012  F01C         	movff	?___awdiv,___wmul@multiplicand
 16077  0021A0  C013  F01D         	movff	?___awdiv+1,___wmul@multiplicand+1
 16078  0021A4  EC75  F02C         	call	___wmul	;wreg free
 16079  0021A8  5033               	movf	LCD_DrawText@offset^0,w,c
 16080  0021AA  241A               	addwf	?___wmul^0,w,c
 16081  0021AC  6E35               	movwf	LCD_DrawText@yOffset^0,c
 16082  0021AE  5034               	movf	(LCD_DrawText@offset+1)^0,w,c
 16083  0021B0  201B               	addwfc	(?___wmul+1)^0,w,c
 16084  0021B2  6E36               	movwf	(LCD_DrawText@yOffset+1)^0,c
 16085                           
 16086                           ;libraries/lcd_highlevel.c: 766:       for(x=0;x<width;x++)
 16087  0021B4  0E00               	movlw	0
 16088  0021B6  6E40               	movwf	LCD_DrawText@x^0,c
 16089  0021B8  D04C               	goto	l8536
 16090  0021BA                     l8526:
 16091                           
 16092                           ;libraries/lcd_highlevel.c: 767:       {;libraries/lcd_highlevel.c: 768:         fontByt
      +                          e = font->bitmap[yOffset + (x/8)];
 16093  0021BA  0E05               	movlw	5
 16094  0021BC  2422               	addwf	LCD_DrawText@font^0,w,c
 16095  0021BE  6E2D               	movwf	??_LCD_DrawText^0,c
 16096  0021C0  0E00               	movlw	0
 16097  0021C2  2023               	addwfc	(LCD_DrawText@font+1)^0,w,c
 16098  0021C4  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 16099  0021C6  C02D  FFF6         	movff	??_LCD_DrawText,tblptrl
 16100  0021CA  C02E  FFF7         	movff	??_LCD_DrawText+1,tblptrh
 16101  0021CE                     	if	0	;tblptru may be non-zero
 16102  0021CE                     	endif
 16103  0021CE                     	if	0	;tblptru may be non-zero
 16104  0021CE                     	endif
 16105  0021CE  0009               	tblrd		*+
 16106  0021D0  CFF5 F02F          	movff	tablat,??_LCD_DrawText+2
 16107  0021D4  0009               	tblrd		*+
 16108  0021D6  CFF5 F030          	movff	tablat,??_LCD_DrawText+3
 16109  0021DA  C040  F031         	movff	LCD_DrawText@x,??_LCD_DrawText+4
 16110  0021DE  90D8               	bcf	status,0,c
 16111  0021E0  3231               	rrcf	(??_LCD_DrawText+4)^0,f,c
 16112  0021E2  90D8               	bcf	status,0,c
 16113  0021E4  3231               	rrcf	(??_LCD_DrawText+4)^0,f,c
 16114  0021E6  90D8               	bcf	status,0,c
 16115  0021E8  3231               	rrcf	(??_LCD_DrawText+4)^0,f,c
 16116  0021EA  5031               	movf	(??_LCD_DrawText+4)^0,w,c
 16117  0021EC  262F               	addwf	(??_LCD_DrawText+2)^0,f,c
 16118  0021EE  0E00               	movlw	0
 16119  0021F0  2230               	addwfc	(??_LCD_DrawText+3)^0,f,c
 16120  0021F2  5035               	movf	LCD_DrawText@yOffset^0,w,c
 16121  0021F4  262F               	addwf	(??_LCD_DrawText+2)^0,f,c
 16122  0021F6  5036               	movf	(LCD_DrawText@yOffset+1)^0,w,c
 16123  0021F8  2230               	addwfc	(??_LCD_DrawText+3)^0,f,c
 16124  0021FA  C02F  FFF6         	movff	??_LCD_DrawText+2,tblptrl
 16125  0021FE  C030  FFF7         	movff	??_LCD_DrawText+3,tblptrh
 16126  002202                     	if	0	;tblptru may be non-zero
 16127  002202                     	endif
 16128  002202                     	if	0	;tblptru may be non-zero
 16129  002202                     	endif
 16130  002202  0008               	tblrd		*
 16131  002204  CFF5 F037          	movff	tablat,LCD_DrawText@fontByte
 16132                           
 16133                           ;libraries/lcd_highlevel.c: 769:         fontPixel = fontByte & (0x80 >> (x%8));
 16134  002208  C040  F02D         	movff	LCD_DrawText@x,??_LCD_DrawText
 16135  00220C  0E07               	movlw	7
 16136  00220E  162D               	andwf	??_LCD_DrawText^0,f,c
 16137  002210  0E80               	movlw	128
 16138  002212  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 16139  002214  0E00               	movlw	0
 16140  002216  6E2F               	movwf	(??_LCD_DrawText+2)^0,c
 16141  002218  2A2D               	incf	??_LCD_DrawText^0,f,c
 16142  00221A  D003               	goto	u6234
 16143  00221C                     u6235:
 16144  00221C  342F               	rlcf	(??_LCD_DrawText+2)^0,w,c
 16145  00221E  322F               	rrcf	(??_LCD_DrawText+2)^0,f,c
 16146  002220  322E               	rrcf	(??_LCD_DrawText+1)^0,f,c
 16147  002222                     u6234:
 16148  002222  2E2D               	decfsz	??_LCD_DrawText^0,f,c
 16149  002224  D7FB               	goto	u6235
 16150  002226  502E               	movf	(??_LCD_DrawText+1)^0,w,c
 16151  002228  1437               	andwf	LCD_DrawText@fontByte^0,w,c
 16152  00222A  6E38               	movwf	LCD_DrawText@fontPixel^0,c
 16153                           
 16154                           ;libraries/lcd_highlevel.c: 770:         if(fontPixel != 0)
 16155  00222C  5038               	movf	LCD_DrawText@fontPixel^0,w,c
 16156  00222E  B4D8               	btfsc	status,2,c
 16157  002230  D007               	goto	l315
 16158                           
 16159                           ;libraries/lcd_highlevel.c: 771:         {;libraries/lcd_highlevel.c: 772:           POR
      +                          TA = color>>8; LATC3 = 0; LATC3 = 1;;
 16160  002232  C02A  FF80         	movff	LCD_DrawText@color+1,3968	;volatile
 16161  002236  968B               	bcf	3979,3,c	;volatile
 16162  002238  868B               	bsf	3979,3,c	;volatile
 16163                           
 16164                           ;libraries/lcd_highlevel.c: 773:           PORTA = color; LATC3 = 0; LATC3 = 1;;
 16165  00223A  C029  FF80         	movff	LCD_DrawText@color,3968	;volatile
 16166  00223E  D006               	goto	L10
 16167  002240                     l315:
 16168                           
 16169                           ;libraries/lcd_highlevel.c: 776:         {;libraries/lcd_highlevel.c: 777:           POR
      +                          TA = bg_color>>8; LATC3 = 0; LATC3 = 1;;
 16170  002240  C02C  FF80         	movff	LCD_DrawText@bg_color+1,3968	;volatile
 16171  002244  968B               	bcf	3979,3,c	;volatile
 16172  002246  868B               	bsf	3979,3,c	;volatile
 16173                           
 16174                           ;libraries/lcd_highlevel.c: 778:           PORTA = bg_color; LATC3 = 0; LATC3 = 1;;
 16175  002248  C02B  FF80         	movff	LCD_DrawText@bg_color,3968	;volatile
 16176  00224C                     L10:
 16177  00224C  968B               	bcf	3979,3,c	;volatile
 16178  00224E  868B               	bsf	3979,3,c	;volatile
 16179                           
 16180                           ;libraries/lcd_highlevel.c: 780:       }
 16181  002250  2A40               	incf	LCD_DrawText@x^0,f,c
 16182  002252                     l8536:
 16183  002252  5041               	movf	LCD_DrawText@width^0,w,c
 16184  002254  5C40               	subwf	LCD_DrawText@x^0,w,c
 16185  002256  A0D8               	btfss	status,0,c
 16186  002258  D7B0               	goto	l8526
 16187                           
 16188                           ;libraries/lcd_highlevel.c: 781:       for(x=0;x<2;x++)
 16189  00225A  0E00               	movlw	0
 16190  00225C  6E40               	movwf	LCD_DrawText@x^0,c
 16191  00225E                     l318:
 16192                           
 16193                           ;libraries/lcd_highlevel.c: 782:       {;libraries/lcd_highlevel.c: 783:         PORTA =
      +                           bg_color>>8; LATC3 = 0; LATC3 = 1;;
 16194  00225E  C02C  FF80         	movff	LCD_DrawText@bg_color+1,3968	;volatile
 16195  002262  968B               	bcf	3979,3,c	;volatile
 16196  002264  868B               	bsf	3979,3,c	;volatile
 16197                           
 16198                           ;libraries/lcd_highlevel.c: 784:         PORTA = bg_color; LATC3 = 0; LATC3 = 1;;
 16199  002266  C02B  FF80         	movff	LCD_DrawText@bg_color,3968	;volatile
 16200  00226A  968B               	bcf	3979,3,c	;volatile
 16201  00226C  868B               	bsf	3979,3,c	;volatile
 16202                           
 16203                           ;libraries/lcd_highlevel.c: 785:       }
 16204  00226E  2A40               	incf	LCD_DrawText@x^0,f,c
 16205  002270  0E01               	movlw	1
 16206  002272  6440               	cpfsgt	LCD_DrawText@x^0,c
 16207  002274  D7F4               	goto	l318
 16208                           
 16209                           ;libraries/lcd_highlevel.c: 786:     }
 16210  002276  2A3D               	incf	LCD_DrawText@y^0,f,c
 16211  002278                     l8550:
 16212  002278  C022  FFF6         	movff	LCD_DrawText@font,tblptrl
 16213  00227C  C023  FFF7         	movff	LCD_DrawText@font+1,tblptrh
 16214  002280                     	if	0	;tblptru may be non-zero
 16215  002280                     	endif
 16216  002280                     	if	0	;tblptru may be non-zero
 16217  002280                     	endif
 16218  002280  0009               	tblrd		*+
 16219  002282  50F5               	movf	tablat,w,c
 16220  002284  5C3D               	subwf	LCD_DrawText@y^0,w,c
 16221  002286  A0D8               	btfss	status,0,c
 16222  002288  D77A               	goto	l8522
 16223                           
 16224                           ;libraries/lcd_highlevel.c: 787:     posX = posX + 2 + width;
 16225  00228A  5041               	movf	LCD_DrawText@width^0,w,c
 16226  00228C  2425               	addwf	LCD_DrawText@posX^0,w,c
 16227  00228E  6E2D               	movwf	??_LCD_DrawText^0,c
 16228  002290  0E00               	movlw	0
 16229  002292  2026               	addwfc	(LCD_DrawText@posX+1)^0,w,c
 16230  002294  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 16231  002296  0E02               	movlw	2
 16232  002298  242D               	addwf	??_LCD_DrawText^0,w,c
 16233  00229A  6E25               	movwf	LCD_DrawText@posX^0,c
 16234  00229C  0E00               	movlw	0
 16235  00229E  202E               	addwfc	(??_LCD_DrawText+1)^0,w,c
 16236  0022A0  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 16237                           
 16238                           ;libraries/lcd_highlevel.c: 788:     msg++;
 16239  0022A2  4A20               	infsnz	LCD_DrawText@msg^0,f,c
 16240  0022A4  2A21               	incf	(LCD_DrawText@msg+1)^0,f,c
 16241                           
 16242                           ;libraries/lcd_highlevel.c: 789:  }while(*msg != 0);
 16243  0022A6  C020  FFF6         	movff	LCD_DrawText@msg,tblptrl
 16244  0022AA  C021  FFF7         	movff	LCD_DrawText@msg+1,tblptrh
 16245  0022AE  6AF8               	clrf	tblptru,c
 16246  0022B0  0E05               	movlw	(high __ramtop+-1)
 16247  0022B2  64F7               	cpfsgt	tblptrh,c
 16248  0022B4  D003               	bra	u6287
 16249  0022B6  0008               	tblrd		*
 16250  0022B8  50F5               	movf	tablat,w,c
 16251  0022BA  D005               	bra	u6280
 16252  0022BC                     u6287:
 16253  0022BC  CFF6 FFE1          	movff	tblptrl,fsr1l
 16254  0022C0  CFF7 FFE2          	movff	tblptrh,fsr1h
 16255  0022C4  50E7               	movf	indf1,w,c
 16256  0022C6                     u6280:
 16257  0022C6  0900               	iorlw	0
 16258  0022C8  B4D8               	btfsc	status,2,c
 16259  0022CA  0012               	return	
 16260  0022CC  D692               	goto	l8432
 16261  0022CE                     __end_of_LCD_DrawText:
 16262                           	callstack 0
 16263                           
 16264 ;; *************** function _strlen *****************
 16265 ;; Defined at:
 16266 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\strlen.c"
 16267 ;; Parameters:    Size  Location     Type
 16268 ;;  s               2   17[COMRAM] PTR const unsigned char 
 16269 ;;		 -> g1.str(2), dbuf(32), STR_15(13), STR_14(13), 
 16270 ;;		 -> STR_13(6), STR_12(11), STR_11(11), STR_10(8), 
 16271 ;;		 -> STR_9(9), STR_8(2), STR_7(9), STR_6(11), 
 16272 ;;		 -> STR_5(9), STR_4(9), g1(240), STR_1(10), 
 16273 ;; Auto vars:     Size  Location     Type
 16274 ;;  a               2   19[COMRAM] PTR const unsigned char 
 16275 ;;		 -> g1.str(2), dbuf(32), STR_15(13), STR_14(13), 
 16276 ;;		 -> STR_13(6), STR_12(11), STR_11(11), STR_10(8), 
 16277 ;;		 -> STR_9(9), STR_8(2), STR_7(9), STR_6(11), 
 16278 ;;		 -> STR_5(9), STR_4(9), g1(240), STR_1(10), 
 16279 ;; Return value:  Size  Location     Type
 16280 ;;                  2   17[COMRAM] unsigned int 
 16281 ;; Registers used:
 16282 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru
 16283 ;; Tracked objects:
 16284 ;;		On entry : 0/0
 16285 ;;		On exit  : 0/0
 16286 ;;		Unchanged: 0/0
 16287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16288 ;;      Params:         2       0       0       0       0       0       0
 16289 ;;      Locals:         2       0       0       0       0       0       0
 16290 ;;      Temps:          0       0       0       0       0       0       0
 16291 ;;      Totals:         4       0       0       0       0       0       0
 16292 ;;Total ram usage:        4 bytes
 16293 ;; Hardware stack levels used: 1
 16294 ;; Hardware stack levels required when called: 4
 16295 ;; This function calls:
 16296 ;;		Nothing
 16297 ;; This function is called by:
 16298 ;;		_LCD_ButtonDraw
 16299 ;;		_LCD_DrawText
 16300 ;;		_pad
 16301 ;; This function uses a non-reentrant model
 16302 ;;
 16303                           
 16304                           	psect	text70
 16305  0055F0                     __ptext70:
 16306                           	callstack 0
 16307  0055F0                     _strlen:
 16308                           	callstack 16
 16309                           
 16310                           ;incstack = 0
 16311  0055F0  C012  F014         	movff	strlen@s,strlen@a
 16312  0055F4  C013  F015         	movff	strlen@s+1,strlen@a+1
 16313  0055F8  D002               	goto	l8188
 16314  0055FA                     l8186:
 16315  0055FA  4A12               	infsnz	strlen@s^0,f,c
 16316  0055FC  2A13               	incf	(strlen@s+1)^0,f,c
 16317  0055FE                     l8188:
 16318  0055FE  C012  FFF6         	movff	strlen@s,tblptrl
 16319  005602  C013  FFF7         	movff	strlen@s+1,tblptrh
 16320  005606  6AF8               	clrf	tblptru,c
 16321  005608  0E05               	movlw	(high __ramtop+-1)
 16322  00560A  64F7               	cpfsgt	tblptrh,c
 16323  00560C  D003               	bra	u5787
 16324  00560E  0008               	tblrd		*
 16325  005610  50F5               	movf	tablat,w,c
 16326  005612  D005               	bra	u5780
 16327  005614                     u5787:
 16328  005614  CFF6 FFE1          	movff	tblptrl,fsr1l
 16329  005618  CFF7 FFE2          	movff	tblptrh,fsr1h
 16330  00561C  50E7               	movf	indf1,w,c
 16331  00561E                     u5780:
 16332  00561E  0900               	iorlw	0
 16333  005620  A4D8               	btfss	status,2,c
 16334  005622  D7EB               	goto	l8186
 16335  005624  5014               	movf	strlen@a^0,w,c
 16336  005626  5C12               	subwf	strlen@s^0,w,c
 16337  005628  6E12               	movwf	?_strlen^0,c
 16338  00562A  5015               	movf	(strlen@a+1)^0,w,c
 16339  00562C  5813               	subwfb	(strlen@s+1)^0,w,c
 16340  00562E  6E13               	movwf	(?_strlen+1)^0,c
 16341  005630  0012               	return		;funcret
 16342  005632                     __end_of_strlen:
 16343                           	callstack 0
 16344                           
 16345 ;; *************** function ___awdiv *****************
 16346 ;; Defined at:
 16347 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
 16348 ;; Parameters:    Size  Location     Type
 16349 ;;  dividend        2   17[COMRAM] int 
 16350 ;;  divisor         2   19[COMRAM] int 
 16351 ;; Auto vars:     Size  Location     Type
 16352 ;;  quotient        2   23[COMRAM] int 
 16353 ;;  sign            1   22[COMRAM] unsigned char 
 16354 ;;  counter         1   21[COMRAM] unsigned char 
 16355 ;; Return value:  Size  Location     Type
 16356 ;;                  2   17[COMRAM] int 
 16357 ;; Registers used:
 16358 ;;		wreg, status,2, status,0
 16359 ;; Tracked objects:
 16360 ;;		On entry : 0/0
 16361 ;;		On exit  : 0/0
 16362 ;;		Unchanged: 0/0
 16363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16364 ;;      Params:         4       0       0       0       0       0       0
 16365 ;;      Locals:         4       0       0       0       0       0       0
 16366 ;;      Temps:          0       0       0       0       0       0       0
 16367 ;;      Totals:         8       0       0       0       0       0       0
 16368 ;;Total ram usage:        8 bytes
 16369 ;; Hardware stack levels used: 1
 16370 ;; Hardware stack levels required when called: 4
 16371 ;; This function calls:
 16372 ;;		Nothing
 16373 ;; This function is called by:
 16374 ;;		_LCD_DrawText
 16375 ;; This function uses a non-reentrant model
 16376 ;;
 16377                           
 16378                           	psect	text71
 16379  004FEE                     __ptext71:
 16380                           	callstack 0
 16381  004FEE                     ___awdiv:
 16382                           	callstack 20
 16383                           
 16384                           ;incstack = 0
 16385  004FEE  0E00               	movlw	0
 16386  004FF0  6E17               	movwf	___awdiv@sign^0,c
 16387  004FF2  AE15               	btfss	(___awdiv@divisor+1)^0,7,c
 16388  004FF4  D006               	goto	l5800
 16389  004FF6  6C14               	negf	___awdiv@divisor^0,c
 16390  004FF8  1E15               	comf	(___awdiv@divisor+1)^0,f,c
 16391  004FFA  B0D8               	btfsc	status,0,c
 16392  004FFC  2A15               	incf	(___awdiv@divisor+1)^0,f,c
 16393  004FFE  0E01               	movlw	1
 16394  005000  6E17               	movwf	___awdiv@sign^0,c
 16395  005002                     l5800:
 16396  005002  AE13               	btfss	(___awdiv@dividend+1)^0,7,c
 16397  005004  D006               	goto	l5806
 16398  005006  6C12               	negf	___awdiv@dividend^0,c
 16399  005008  1E13               	comf	(___awdiv@dividend+1)^0,f,c
 16400  00500A  B0D8               	btfsc	status,0,c
 16401  00500C  2A13               	incf	(___awdiv@dividend+1)^0,f,c
 16402  00500E  0E01               	movlw	1
 16403  005010  1A17               	xorwf	___awdiv@sign^0,f,c
 16404  005012                     l5806:
 16405  005012  0E00               	movlw	0
 16406  005014  6E19               	movwf	(___awdiv@quotient+1)^0,c
 16407  005016  0E00               	movlw	0
 16408  005018  6E18               	movwf	___awdiv@quotient^0,c
 16409  00501A  5014               	movf	___awdiv@divisor^0,w,c
 16410  00501C  1015               	iorwf	(___awdiv@divisor+1)^0,w,c
 16411  00501E  B4D8               	btfsc	status,2,c
 16412  005020  D01C               	goto	l5828
 16413  005022  0E01               	movlw	1
 16414  005024  6E16               	movwf	___awdiv@counter^0,c
 16415  005026  D004               	goto	l5814
 16416  005028                     l5812:
 16417  005028  90D8               	bcf	status,0,c
 16418  00502A  3614               	rlcf	___awdiv@divisor^0,f,c
 16419  00502C  3615               	rlcf	(___awdiv@divisor+1)^0,f,c
 16420  00502E  2A16               	incf	___awdiv@counter^0,f,c
 16421  005030                     l5814:
 16422  005030  AE15               	btfss	(___awdiv@divisor+1)^0,7,c
 16423  005032  D7FA               	goto	l5812
 16424  005034                     u3470:
 16425  005034  90D8               	bcf	status,0,c
 16426  005036  3618               	rlcf	___awdiv@quotient^0,f,c
 16427  005038  3619               	rlcf	(___awdiv@quotient+1)^0,f,c
 16428  00503A  5014               	movf	___awdiv@divisor^0,w,c
 16429  00503C  5C12               	subwf	___awdiv@dividend^0,w,c
 16430  00503E  5015               	movf	(___awdiv@divisor+1)^0,w,c
 16431  005040  5813               	subwfb	(___awdiv@dividend+1)^0,w,c
 16432  005042  A0D8               	btfss	status,0,c
 16433  005044  D005               	goto	l5824
 16434  005046  5014               	movf	___awdiv@divisor^0,w,c
 16435  005048  5E12               	subwf	___awdiv@dividend^0,f,c
 16436  00504A  5015               	movf	(___awdiv@divisor+1)^0,w,c
 16437  00504C  5A13               	subwfb	(___awdiv@dividend+1)^0,f,c
 16438  00504E  8018               	bsf	___awdiv@quotient^0,0,c
 16439  005050                     l5824:
 16440  005050  90D8               	bcf	status,0,c
 16441  005052  3215               	rrcf	(___awdiv@divisor+1)^0,f,c
 16442  005054  3214               	rrcf	___awdiv@divisor^0,f,c
 16443  005056  2E16               	decfsz	___awdiv@counter^0,f,c
 16444  005058  D7ED               	goto	u3470
 16445  00505A                     l5828:
 16446  00505A  5017               	movf	___awdiv@sign^0,w,c
 16447  00505C  B4D8               	btfsc	status,2,c
 16448  00505E  D004               	goto	l5832
 16449  005060  6C18               	negf	___awdiv@quotient^0,c
 16450  005062  1E19               	comf	(___awdiv@quotient+1)^0,f,c
 16451  005064  B0D8               	btfsc	status,0,c
 16452  005066  2A19               	incf	(___awdiv@quotient+1)^0,f,c
 16453  005068                     l5832:
 16454  005068  C018  F012         	movff	___awdiv@quotient,?___awdiv
 16455  00506C  C019  F013         	movff	___awdiv@quotient+1,?___awdiv+1
 16456  005070  0012               	return		;funcret
 16457  005072                     __end_of___awdiv:
 16458                           	callstack 0
 16459                           
 16460 ;; *************** function _LCD_ButtonUpdate *****************
 16461 ;; Defined at:
 16462 ;;		line 425 in file "libraries/lcd_highlevel.c"
 16463 ;; Parameters:    Size  Location     Type
 16464 ;;  button          2   36[COMRAM] PTR struct .
 16465 ;;		 -> g1(240), 
 16466 ;; Auto vars:     Size  Location     Type
 16467 ;;  y2              2   52[COMRAM] unsigned short 
 16468 ;;  x1              2   50[COMRAM] unsigned short 
 16469 ;;  y1              2   48[COMRAM] unsigned short 
 16470 ;;  x2              2   46[COMRAM] unsigned short 
 16471 ;;  colorIn         2   44[COMRAM] unsigned short 
 16472 ;;  colorOut        2   42[COMRAM] unsigned short 
 16473 ;; Return value:  Size  Location     Type
 16474 ;;                  1    wreg      void 
 16475 ;; Registers used:
 16476 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16477 ;; Tracked objects:
 16478 ;;		On entry : 0/0
 16479 ;;		On exit  : 0/0
 16480 ;;		Unchanged: 0/0
 16481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16482 ;;      Params:         2       0       0       0       0       0       0
 16483 ;;      Locals:        12       0       0       0       0       0       0
 16484 ;;      Temps:          4       0       0       0       0       0       0
 16485 ;;      Totals:        18       0       0       0       0       0       0
 16486 ;;Total ram usage:       18 bytes
 16487 ;; Hardware stack levels used: 1
 16488 ;; Hardware stack levels required when called: 5
 16489 ;; This function calls:
 16490 ;;		_LCD_DrawRect
 16491 ;;		_LCD_Read
 16492 ;; This function is called by:
 16493 ;;		_LCD_ButtonDraw
 16494 ;; This function uses a non-reentrant model
 16495 ;;
 16496                           
 16497                           	psect	text72
 16498  003088                     __ptext72:
 16499                           	callstack 0
 16500  003088                     _LCD_ButtonUpdate:
 16501                           	callstack 19
 16502                           
 16503                           ;libraries/lcd_highlevel.c: 425: void LCD_ButtonUpdate(btn_t * button);libraries/lcd_hig
      +                          hlevel.c: 426: {;libraries/lcd_highlevel.c: 427:   uint16_t x1,x2,y1,y2;;libraries/lcd_h
      +                          ighlevel.c: 428:   uint16_t colorOut, colorIn;;libraries/lcd_highlevel.c: 430:   x1 = bu
      +                          tton->posX;
 16504                           
 16505                           ;incstack = 0
 16506  003088  C025  FFD9         	movff	LCD_ButtonUpdate@button,fsr2l
 16507  00308C  C026  FFDA         	movff	LCD_ButtonUpdate@button+1,fsr2h
 16508  003090  CFDE F033          	movff	postinc2,LCD_ButtonUpdate@x1
 16509  003094  CFDD F034          	movff	postdec2,LCD_ButtonUpdate@x1+1
 16510                           
 16511                           ;libraries/lcd_highlevel.c: 431:   x2 = button->posX + button->width;
 16512  003098  EE20 F004          	lfsr	2,4
 16513  00309C  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 16514  00309E  26D9               	addwf	fsr2l,f,c
 16515  0030A0  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 16516  0030A2  22DA               	addwfc	fsr2h,f,c
 16517  0030A4  CFDE F027          	movff	postinc2,??_LCD_ButtonUpdate
 16518  0030A8  CFDD F028          	movff	postdec2,??_LCD_ButtonUpdate+1
 16519  0030AC  C025  FFD9         	movff	LCD_ButtonUpdate@button,fsr2l
 16520  0030B0  C026  FFDA         	movff	LCD_ButtonUpdate@button+1,fsr2h
 16521  0030B4  CFDE F029          	movff	postinc2,??_LCD_ButtonUpdate+2
 16522  0030B8  CFDD F02A          	movff	postdec2,??_LCD_ButtonUpdate+3
 16523  0030BC  5027               	movf	??_LCD_ButtonUpdate^0,w,c
 16524  0030BE  2429               	addwf	(??_LCD_ButtonUpdate+2)^0,w,c
 16525  0030C0  6E2F               	movwf	LCD_ButtonUpdate@x2^0,c
 16526  0030C2  5028               	movf	(??_LCD_ButtonUpdate+1)^0,w,c
 16527  0030C4  202A               	addwfc	(??_LCD_ButtonUpdate+3)^0,w,c
 16528  0030C6  6E30               	movwf	(LCD_ButtonUpdate@x2+1)^0,c
 16529                           
 16530                           ;libraries/lcd_highlevel.c: 432:   y1 = button->posY;
 16531  0030C8  EE20 F002          	lfsr	2,2
 16532  0030CC  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 16533  0030CE  26D9               	addwf	fsr2l,f,c
 16534  0030D0  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 16535  0030D2  22DA               	addwfc	fsr2h,f,c
 16536  0030D4  CFDE F031          	movff	postinc2,LCD_ButtonUpdate@y1
 16537  0030D8  CFDD F032          	movff	postdec2,LCD_ButtonUpdate@y1+1
 16538                           
 16539                           ;libraries/lcd_highlevel.c: 433:   y2 = button->posY + button->height;
 16540  0030DC  EE20 F006          	lfsr	2,6
 16541  0030E0  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 16542  0030E2  26D9               	addwf	fsr2l,f,c
 16543  0030E4  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 16544  0030E6  22DA               	addwfc	fsr2h,f,c
 16545  0030E8  CFDE F027          	movff	postinc2,??_LCD_ButtonUpdate
 16546  0030EC  CFDD F028          	movff	postdec2,??_LCD_ButtonUpdate+1
 16547  0030F0  EE20 F002          	lfsr	2,2
 16548  0030F4  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 16549  0030F6  26D9               	addwf	fsr2l,f,c
 16550  0030F8  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 16551  0030FA  22DA               	addwfc	fsr2h,f,c
 16552  0030FC  CFDE F029          	movff	postinc2,??_LCD_ButtonUpdate+2
 16553  003100  CFDD F02A          	movff	postdec2,??_LCD_ButtonUpdate+3
 16554  003104  5027               	movf	??_LCD_ButtonUpdate^0,w,c
 16555  003106  2429               	addwf	(??_LCD_ButtonUpdate+2)^0,w,c
 16556  003108  6E35               	movwf	LCD_ButtonUpdate@y2^0,c
 16557  00310A  5028               	movf	(??_LCD_ButtonUpdate+1)^0,w,c
 16558  00310C  202A               	addwfc	(??_LCD_ButtonUpdate+3)^0,w,c
 16559  00310E  6E36               	movwf	(LCD_ButtonUpdate@y2+1)^0,c
 16560                           
 16561                           ;libraries/lcd_highlevel.c: 435:   if(button->pressed == 0)
 16562  003110  EE20 F010          	lfsr	2,16
 16563  003114  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 16564  003116  26D9               	addwf	fsr2l,f,c
 16565  003118  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 16566  00311A  22DA               	addwfc	fsr2h,f,c
 16567  00311C  50DF               	movf	indf2,w,c
 16568  00311E  A4D8               	btfss	status,2,c
 16569  003120  D00D               	goto	l6152
 16570                           
 16571                           ;libraries/lcd_highlevel.c: 436:   {;libraries/lcd_highlevel.c: 437:     colorOut = butt
      +                          on->txtColor;
 16572  003122  EE20 F008          	lfsr	2,8
 16573  003126  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 16574  003128  26D9               	addwf	fsr2l,f,c
 16575  00312A  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 16576  00312C  22DA               	addwfc	fsr2h,f,c
 16577  00312E  CFDE F02B          	movff	postinc2,LCD_ButtonUpdate@colorOut
 16578  003132  CFDD F02C          	movff	postdec2,LCD_ButtonUpdate@colorOut+1
 16579                           
 16580                           ;libraries/lcd_highlevel.c: 438:     colorIn = button->bgColor;
 16581  003136  EE20 F00A          	lfsr	2,10
 16582  00313A  D012               	goto	L11
 16583  00313C                     l6152:
 16584                           
 16585                           ;libraries/lcd_highlevel.c: 441:   {;libraries/lcd_highlevel.c: 443:     colorOut = LCD_
      +                          Read(x1,y2+1);
 16586  00313C  C033  F012         	movff	LCD_ButtonUpdate@x1,LCD_Read@posX
 16587  003140  C034  F013         	movff	LCD_ButtonUpdate@x1+1,LCD_Read@posX+1
 16588  003144  0E01               	movlw	1
 16589  003146  2435               	addwf	LCD_ButtonUpdate@y2^0,w,c
 16590  003148  6E14               	movwf	LCD_Read@posY^0,c
 16591  00314A  0E00               	movlw	0
 16592  00314C  2036               	addwfc	(LCD_ButtonUpdate@y2+1)^0,w,c
 16593  00314E  6E15               	movwf	(LCD_Read@posY+1)^0,c
 16594  003150  ECC9  F01C         	call	_LCD_Read	;wreg free
 16595  003154  C012  F02B         	movff	?_LCD_Read,LCD_ButtonUpdate@colorOut
 16596  003158  C013  F02C         	movff	?_LCD_Read+1,LCD_ButtonUpdate@colorOut+1
 16597                           
 16598                           ;libraries/lcd_highlevel.c: 444:     colorIn = button->txtColor;
 16599  00315C  EE20 F008          	lfsr	2,8
 16600  003160                     L11:
 16601  003160  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 16602  003162  26D9               	addwf	fsr2l,f,c
 16603  003164  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 16604  003166  22DA               	addwfc	fsr2h,f,c
 16605  003168  CFDE F02D          	movff	postinc2,LCD_ButtonUpdate@colorIn
 16606  00316C  CFDD F02E          	movff	postdec2,LCD_ButtonUpdate@colorIn+1
 16607                           
 16608                           ;libraries/lcd_highlevel.c: 446:   if(button->bgColor != button->txtColor)
 16609  003170  EE20 F008          	lfsr	2,8
 16610  003174  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 16611  003176  26D9               	addwf	fsr2l,f,c
 16612  003178  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 16613  00317A  22DA               	addwfc	fsr2h,f,c
 16614  00317C  EE10 F00A          	lfsr	1,10
 16615  003180  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 16616  003182  26E1               	addwf	fsr1l,f,c
 16617  003184  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 16618  003186  22E2               	addwfc	fsr1h,f,c
 16619  003188  50DE               	movf	postinc2,w,c
 16620  00318A  18E6               	xorwf	postinc1,w,c
 16621  00318C  E104               	bnz	u3810
 16622  00318E  50DE               	movf	postinc2,w,c
 16623  003190  18E6               	xorwf	postinc1,w,c
 16624  003192  B4D8               	btfsc	status,2,c
 16625  003194  0012               	return	
 16626  003196                     u3810:
 16627                           
 16628                           ;libraries/lcd_highlevel.c: 447:   {;libraries/lcd_highlevel.c: 449:     LCD_DrawRect(x1
      +                          +3, y2+1, x2+3, y2+3, 1, colorOut);
 16629  003196  0E03               	movlw	3
 16630  003198  2433               	addwf	LCD_ButtonUpdate@x1^0,w,c
 16631  00319A  6E12               	movwf	LCD_DrawRect@posX1^0,c
 16632  00319C  0E00               	movlw	0
 16633  00319E  2034               	addwfc	(LCD_ButtonUpdate@x1+1)^0,w,c
 16634  0031A0  6E13               	movwf	(LCD_DrawRect@posX1+1)^0,c
 16635  0031A2  0E01               	movlw	1
 16636  0031A4  2435               	addwf	LCD_ButtonUpdate@y2^0,w,c
 16637  0031A6  6E14               	movwf	LCD_DrawRect@posY1^0,c
 16638  0031A8  0E00               	movlw	0
 16639  0031AA  2036               	addwfc	(LCD_ButtonUpdate@y2+1)^0,w,c
 16640  0031AC  6E15               	movwf	(LCD_DrawRect@posY1+1)^0,c
 16641  0031AE  0E03               	movlw	3
 16642  0031B0  242F               	addwf	LCD_ButtonUpdate@x2^0,w,c
 16643  0031B2  6E16               	movwf	LCD_DrawRect@posX2^0,c
 16644  0031B4  0E00               	movlw	0
 16645  0031B6  2030               	addwfc	(LCD_ButtonUpdate@x2+1)^0,w,c
 16646  0031B8  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 16647  0031BA  0E03               	movlw	3
 16648  0031BC  2435               	addwf	LCD_ButtonUpdate@y2^0,w,c
 16649  0031BE  6E18               	movwf	LCD_DrawRect@posY2^0,c
 16650  0031C0  0E00               	movlw	0
 16651  0031C2  2036               	addwfc	(LCD_ButtonUpdate@y2+1)^0,w,c
 16652  0031C4  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 16653  0031C6  0E01               	movlw	1
 16654  0031C8  6E1A               	movwf	LCD_DrawRect@fill^0,c
 16655  0031CA  C02B  F01B         	movff	LCD_ButtonUpdate@colorOut,LCD_DrawRect@color
 16656  0031CE  C02C  F01C         	movff	LCD_ButtonUpdate@colorOut+1,LCD_DrawRect@color+1
 16657  0031D2  EC31  F013         	call	_LCD_DrawRect	;wreg free
 16658                           
 16659                           ;libraries/lcd_highlevel.c: 450:     LCD_DrawRect(x2+1, y1+3, x2+3, y2+3, 1, colorOut);
 16660  0031D6  0E01               	movlw	1
 16661  0031D8  242F               	addwf	LCD_ButtonUpdate@x2^0,w,c
 16662  0031DA  6E12               	movwf	LCD_DrawRect@posX1^0,c
 16663  0031DC  0E00               	movlw	0
 16664  0031DE  2030               	addwfc	(LCD_ButtonUpdate@x2+1)^0,w,c
 16665  0031E0  6E13               	movwf	(LCD_DrawRect@posX1+1)^0,c
 16666  0031E2  0E03               	movlw	3
 16667  0031E4  2431               	addwf	LCD_ButtonUpdate@y1^0,w,c
 16668  0031E6  6E14               	movwf	LCD_DrawRect@posY1^0,c
 16669  0031E8  0E00               	movlw	0
 16670  0031EA  2032               	addwfc	(LCD_ButtonUpdate@y1+1)^0,w,c
 16671  0031EC  6E15               	movwf	(LCD_DrawRect@posY1+1)^0,c
 16672  0031EE  0E03               	movlw	3
 16673  0031F0  242F               	addwf	LCD_ButtonUpdate@x2^0,w,c
 16674  0031F2  6E16               	movwf	LCD_DrawRect@posX2^0,c
 16675  0031F4  0E00               	movlw	0
 16676  0031F6  2030               	addwfc	(LCD_ButtonUpdate@x2+1)^0,w,c
 16677  0031F8  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 16678  0031FA  0E03               	movlw	3
 16679  0031FC  2435               	addwf	LCD_ButtonUpdate@y2^0,w,c
 16680  0031FE  6E18               	movwf	LCD_DrawRect@posY2^0,c
 16681  003200  0E00               	movlw	0
 16682  003202  2036               	addwfc	(LCD_ButtonUpdate@y2+1)^0,w,c
 16683  003204  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 16684  003206  0E01               	movlw	1
 16685  003208  6E1A               	movwf	LCD_DrawRect@fill^0,c
 16686  00320A  C02B  F01B         	movff	LCD_ButtonUpdate@colorOut,LCD_DrawRect@color
 16687  00320E  C02C  F01C         	movff	LCD_ButtonUpdate@colorOut+1,LCD_DrawRect@color+1
 16688  003212  EC31  F013         	call	_LCD_DrawRect	;wreg free
 16689                           
 16690                           ;libraries/lcd_highlevel.c: 451:     LCD_DrawRect(x1+1, y1+1, x2-1, y1+2, 1, colorIn);
 16691  003216  0E01               	movlw	1
 16692  003218  2433               	addwf	LCD_ButtonUpdate@x1^0,w,c
 16693  00321A  6E12               	movwf	LCD_DrawRect@posX1^0,c
 16694  00321C  0E00               	movlw	0
 16695  00321E  2034               	addwfc	(LCD_ButtonUpdate@x1+1)^0,w,c
 16696  003220  6E13               	movwf	(LCD_DrawRect@posX1+1)^0,c
 16697  003222  0E01               	movlw	1
 16698  003224  2431               	addwf	LCD_ButtonUpdate@y1^0,w,c
 16699  003226  6E14               	movwf	LCD_DrawRect@posY1^0,c
 16700  003228  0E00               	movlw	0
 16701  00322A  2032               	addwfc	(LCD_ButtonUpdate@y1+1)^0,w,c
 16702  00322C  6E15               	movwf	(LCD_DrawRect@posY1+1)^0,c
 16703  00322E  0EFF               	movlw	255
 16704  003230  242F               	addwf	LCD_ButtonUpdate@x2^0,w,c
 16705  003232  6E16               	movwf	LCD_DrawRect@posX2^0,c
 16706  003234  0EFF               	movlw	255
 16707  003236  2030               	addwfc	(LCD_ButtonUpdate@x2+1)^0,w,c
 16708  003238  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 16709  00323A  0E02               	movlw	2
 16710  00323C  2431               	addwf	LCD_ButtonUpdate@y1^0,w,c
 16711  00323E  6E18               	movwf	LCD_DrawRect@posY2^0,c
 16712  003240  0E00               	movlw	0
 16713  003242  2032               	addwfc	(LCD_ButtonUpdate@y1+1)^0,w,c
 16714  003244  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 16715  003246  0E01               	movlw	1
 16716  003248  6E1A               	movwf	LCD_DrawRect@fill^0,c
 16717  00324A  C02D  F01B         	movff	LCD_ButtonUpdate@colorIn,LCD_DrawRect@color
 16718  00324E  C02E  F01C         	movff	LCD_ButtonUpdate@colorIn+1,LCD_DrawRect@color+1
 16719  003252  EC31  F013         	call	_LCD_DrawRect	;wreg free
 16720                           
 16721                           ;libraries/lcd_highlevel.c: 452:     LCD_DrawRect(x1+1, y1+1, x1+2, y2-1, 1, colorIn);
 16722  003256  0E01               	movlw	1
 16723  003258  2433               	addwf	LCD_ButtonUpdate@x1^0,w,c
 16724  00325A  6E12               	movwf	LCD_DrawRect@posX1^0,c
 16725  00325C  0E00               	movlw	0
 16726  00325E  2034               	addwfc	(LCD_ButtonUpdate@x1+1)^0,w,c
 16727  003260  6E13               	movwf	(LCD_DrawRect@posX1+1)^0,c
 16728  003262  0E01               	movlw	1
 16729  003264  2431               	addwf	LCD_ButtonUpdate@y1^0,w,c
 16730  003266  6E14               	movwf	LCD_DrawRect@posY1^0,c
 16731  003268  0E00               	movlw	0
 16732  00326A  2032               	addwfc	(LCD_ButtonUpdate@y1+1)^0,w,c
 16733  00326C  6E15               	movwf	(LCD_DrawRect@posY1+1)^0,c
 16734  00326E  0E02               	movlw	2
 16735  003270  2433               	addwf	LCD_ButtonUpdate@x1^0,w,c
 16736  003272  6E16               	movwf	LCD_DrawRect@posX2^0,c
 16737  003274  0E00               	movlw	0
 16738  003276  2034               	addwfc	(LCD_ButtonUpdate@x1+1)^0,w,c
 16739  003278  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 16740  00327A  0EFF               	movlw	255
 16741  00327C  2435               	addwf	LCD_ButtonUpdate@y2^0,w,c
 16742  00327E  6E18               	movwf	LCD_DrawRect@posY2^0,c
 16743  003280  0EFF               	movlw	255
 16744  003282  2036               	addwfc	(LCD_ButtonUpdate@y2+1)^0,w,c
 16745  003284  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 16746  003286  0E01               	movlw	1
 16747  003288  6E1A               	movwf	LCD_DrawRect@fill^0,c
 16748  00328A  C02D  F01B         	movff	LCD_ButtonUpdate@colorIn,LCD_DrawRect@color
 16749  00328E  C02E  F01C         	movff	LCD_ButtonUpdate@colorIn+1,LCD_DrawRect@color+1
 16750  003292  EC31  F013         	call	_LCD_DrawRect	;wreg free
 16751  003296  0012               	return		;funcret
 16752  003298                     __end_of_LCD_ButtonUpdate:
 16753                           	callstack 0
 16754                           
 16755 ;; *************** function _LCD_Read *****************
 16756 ;; Defined at:
 16757 ;;		line 64 in file "libraries/lcd_lowlevel.c"
 16758 ;; Parameters:    Size  Location     Type
 16759 ;;  posX            2   17[COMRAM] unsigned short 
 16760 ;;  posY            2   19[COMRAM] unsigned short 
 16761 ;; Auto vars:     Size  Location     Type
 16762 ;;  temp16          2   25[COMRAM] unsigned short 
 16763 ;;  color           2   23[COMRAM] unsigned short 
 16764 ;; Return value:  Size  Location     Type
 16765 ;;                  2   17[COMRAM] unsigned short 
 16766 ;; Registers used:
 16767 ;;		wreg, status,2, status,0
 16768 ;; Tracked objects:
 16769 ;;		On entry : 0/0
 16770 ;;		On exit  : 0/0
 16771 ;;		Unchanged: 0/0
 16772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16773 ;;      Params:         4       0       0       0       0       0       0
 16774 ;;      Locals:         4       0       0       0       0       0       0
 16775 ;;      Temps:          2       0       0       0       0       0       0
 16776 ;;      Totals:        10       0       0       0       0       0       0
 16777 ;;Total ram usage:       10 bytes
 16778 ;; Hardware stack levels used: 1
 16779 ;; Hardware stack levels required when called: 4
 16780 ;; This function calls:
 16781 ;;		Nothing
 16782 ;; This function is called by:
 16783 ;;		_LCD_ButtonUpdate
 16784 ;; This function uses a non-reentrant model
 16785 ;;
 16786                           
 16787                           	psect	text73
 16788  003992                     __ptext73:
 16789                           	callstack 0
 16790  003992                     _LCD_Read:
 16791                           	callstack 19
 16792                           
 16793                           ;libraries/lcd_lowlevel.c: 64: uint16_t LCD_Read(uint16_t posX, uint16_t posY);libraries
      +                          /lcd_lowlevel.c: 65: {;libraries/lcd_lowlevel.c: 66:  uint16_t temp16;;libraries/lcd_low
      +                          level.c: 67:   uint16_t color;;libraries/lcd_lowlevel.c: 70:   PORTA = 0x2A; LATC4 = 0; 
      +                          LATC3 = 0; LATC3 = 1; LATC4 = 1;;
 16794                           
 16795                           ;incstack = 0
 16796  003992  0E2A               	movlw	42
 16797  003994  6E80               	movwf	128,c	;volatile
 16798  003996  988B               	bcf	3979,4,c	;volatile
 16799  003998  968B               	bcf	3979,3,c	;volatile
 16800  00399A  868B               	bsf	3979,3,c	;volatile
 16801  00399C  888B               	bsf	3979,4,c	;volatile
 16802                           
 16803                           ;libraries/lcd_lowlevel.c: 71:   PORTA = posX>>8; LATC3 = 0; LATC3 = 1;;
 16804  00399E  C013  FF80         	movff	LCD_Read@posX+1,3968	;volatile
 16805  0039A2  968B               	bcf	3979,3,c	;volatile
 16806  0039A4  868B               	bsf	3979,3,c	;volatile
 16807                           
 16808                           ;libraries/lcd_lowlevel.c: 72:   PORTA = posX; LATC3 = 0; LATC3 = 1;;
 16809  0039A6  C012  FF80         	movff	LCD_Read@posX,3968	;volatile
 16810  0039AA  968B               	bcf	3979,3,c	;volatile
 16811  0039AC  868B               	bsf	3979,3,c	;volatile
 16812                           
 16813                           ;libraries/lcd_lowlevel.c: 73:   PORTA = (240 -1) >> 8; LATC3 = 0; LATC3 = 1;;
 16814  0039AE  0E00               	movlw	0
 16815  0039B0  6E80               	movwf	128,c	;volatile
 16816  0039B2  968B               	bcf	3979,3,c	;volatile
 16817  0039B4  868B               	bsf	3979,3,c	;volatile
 16818                           
 16819                           ;libraries/lcd_lowlevel.c: 74:   PORTA = (240 -1); LATC3 = 0; LATC3 = 1;;
 16820  0039B6  0EEF               	movlw	239
 16821  0039B8  6E80               	movwf	128,c	;volatile
 16822  0039BA  968B               	bcf	3979,3,c	;volatile
 16823  0039BC  868B               	bsf	3979,3,c	;volatile
 16824                           
 16825                           ;libraries/lcd_lowlevel.c: 76:   PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 = 
      +                          1;;
 16826  0039BE  0E2B               	movlw	43
 16827  0039C0  6E80               	movwf	128,c	;volatile
 16828  0039C2  988B               	bcf	3979,4,c	;volatile
 16829  0039C4  968B               	bcf	3979,3,c	;volatile
 16830  0039C6  868B               	bsf	3979,3,c	;volatile
 16831  0039C8  888B               	bsf	3979,4,c	;volatile
 16832                           
 16833                           ;libraries/lcd_lowlevel.c: 77:   PORTA = posY>>8; LATC3 = 0; LATC3 = 1;;
 16834  0039CA  C015  FF80         	movff	LCD_Read@posY+1,3968	;volatile
 16835  0039CE  968B               	bcf	3979,3,c	;volatile
 16836  0039D0  868B               	bsf	3979,3,c	;volatile
 16837                           
 16838                           ;libraries/lcd_lowlevel.c: 78:   PORTA = posY; LATC3 = 0; LATC3 = 1;;
 16839  0039D2  C014  FF80         	movff	LCD_Read@posY,3968	;volatile
 16840  0039D6  968B               	bcf	3979,3,c	;volatile
 16841  0039D8  868B               	bsf	3979,3,c	;volatile
 16842                           
 16843                           ;libraries/lcd_lowlevel.c: 79:   PORTA = (320 -1) >> 8; LATC3 = 0; LATC3 = 1;;
 16844  0039DA  0E01               	movlw	1
 16845  0039DC  6E80               	movwf	128,c	;volatile
 16846  0039DE  968B               	bcf	3979,3,c	;volatile
 16847  0039E0  868B               	bsf	3979,3,c	;volatile
 16848                           
 16849                           ;libraries/lcd_lowlevel.c: 80:   PORTA = (320 -1); LATC3 = 0; LATC3 = 1;;
 16850  0039E2  0E3F               	movlw	63
 16851  0039E4  6E80               	movwf	128,c	;volatile
 16852  0039E6  968B               	bcf	3979,3,c	;volatile
 16853  0039E8  868B               	bsf	3979,3,c	;volatile
 16854                           
 16855                           ;libraries/lcd_lowlevel.c: 82:   PORTA = 0x2E; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 = 
      +                          1;;
 16856  0039EA  0E2E               	movlw	46
 16857  0039EC  6E80               	movwf	128,c	;volatile
 16858  0039EE  988B               	bcf	3979,4,c	;volatile
 16859  0039F0  968B               	bcf	3979,3,c	;volatile
 16860  0039F2  868B               	bsf	3979,3,c	;volatile
 16861  0039F4  888B               	bsf	3979,4,c	;volatile
 16862                           
 16863                           ;libraries/lcd_lowlevel.c: 83:  TRISA = 0xFF;
 16864  0039F6  6892               	setf	146,c	;volatile
 16865                           
 16866                           ;libraries/lcd_lowlevel.c: 84:  LATC2 = 0;
 16867  0039F8  948B               	bcf	3979,2,c	;volatile
 16868                           
 16869                           ;libraries/lcd_lowlevel.c: 85:   __nop();
 16870  0039FA  F000               	nop	
 16871                           
 16872                           ;libraries/lcd_lowlevel.c: 86:  LATC2 = 1;
 16873  0039FC  848B               	bsf	3979,2,c	;volatile
 16874                           
 16875                           ;libraries/lcd_lowlevel.c: 87:  TRISA = 0xFF;
 16876  0039FE  6892               	setf	146,c	;volatile
 16877                           
 16878                           ;libraries/lcd_lowlevel.c: 88:  LATC2 = 0;
 16879  003A00  948B               	bcf	3979,2,c	;volatile
 16880                           
 16881                           ;libraries/lcd_lowlevel.c: 89:   __nop();
 16882  003A02  F000               	nop	
 16883                           
 16884                           ;libraries/lcd_lowlevel.c: 90:  temp16 = PORTA;
 16885  003A04  CF80 F01A          	movff	3968,LCD_Read@temp16	;volatile
 16886  003A08  6A1B               	clrf	(LCD_Read@temp16+1)^0,c
 16887                           
 16888                           ;libraries/lcd_lowlevel.c: 91:  LATC2 = 1;
 16889  003A0A  848B               	bsf	3979,2,c	;volatile
 16890                           
 16891                           ;libraries/lcd_lowlevel.c: 92:   temp16 = temp16 >> 3;
 16892  003A0C  C01A  F016         	movff	LCD_Read@temp16,??_LCD_Read
 16893  003A10  C01B  F017         	movff	LCD_Read@temp16+1,??_LCD_Read+1
 16894  003A14  90D8               	bcf	status,0,c
 16895  003A16  3217               	rrcf	(??_LCD_Read+1)^0,f,c
 16896  003A18  3216               	rrcf	??_LCD_Read^0,f,c
 16897  003A1A  90D8               	bcf	status,0,c
 16898  003A1C  3217               	rrcf	(??_LCD_Read+1)^0,f,c
 16899  003A1E  3216               	rrcf	??_LCD_Read^0,f,c
 16900  003A20  90D8               	bcf	status,0,c
 16901  003A22  3217               	rrcf	(??_LCD_Read+1)^0,f,c
 16902  003A24  3216               	rrcf	??_LCD_Read^0,f,c
 16903  003A26  C016  F01A         	movff	??_LCD_Read,LCD_Read@temp16
 16904  003A2A  C017  F01B         	movff	??_LCD_Read+1,LCD_Read@temp16+1
 16905                           
 16906                           ;libraries/lcd_lowlevel.c: 93:   color = temp16 << 11;
 16907  003A2E  C01A  F016         	movff	LCD_Read@temp16,??_LCD_Read
 16908  003A32  C01B  F017         	movff	LCD_Read@temp16+1,??_LCD_Read+1
 16909  003A36  0E0B               	movlw	11
 16910  003A38                     u3385:
 16911  003A38  90D8               	bcf	status,0,c
 16912  003A3A  3616               	rlcf	??_LCD_Read^0,f,c
 16913  003A3C  3617               	rlcf	(??_LCD_Read+1)^0,f,c
 16914  003A3E  2EE8               	decfsz	wreg,f,c
 16915  003A40  D7FB               	goto	u3385
 16916  003A42  C016  F018         	movff	??_LCD_Read,LCD_Read@color
 16917  003A46  C017  F019         	movff	??_LCD_Read+1,LCD_Read@color+1
 16918                           
 16919                           ;libraries/lcd_lowlevel.c: 94:  LATC2 = 0;
 16920  003A4A  948B               	bcf	3979,2,c	;volatile
 16921                           
 16922                           ;libraries/lcd_lowlevel.c: 95:   __nop();
 16923  003A4C  F000               	nop	
 16924                           
 16925                           ;libraries/lcd_lowlevel.c: 96:  temp16 = PORTA;
 16926  003A4E  CF80 F01A          	movff	3968,LCD_Read@temp16	;volatile
 16927  003A52  6A1B               	clrf	(LCD_Read@temp16+1)^0,c
 16928                           
 16929                           ;libraries/lcd_lowlevel.c: 97:  LATC2 = 1;
 16930  003A54  848B               	bsf	3979,2,c	;volatile
 16931                           
 16932                           ;libraries/lcd_lowlevel.c: 98:   temp16 = temp16 >> 2;
 16933  003A56  C01A  F016         	movff	LCD_Read@temp16,??_LCD_Read
 16934  003A5A  C01B  F017         	movff	LCD_Read@temp16+1,??_LCD_Read+1
 16935  003A5E  90D8               	bcf	status,0,c
 16936  003A60  3217               	rrcf	(??_LCD_Read+1)^0,f,c
 16937  003A62  3216               	rrcf	??_LCD_Read^0,f,c
 16938  003A64  90D8               	bcf	status,0,c
 16939  003A66  3217               	rrcf	(??_LCD_Read+1)^0,f,c
 16940  003A68  3216               	rrcf	??_LCD_Read^0,f,c
 16941  003A6A  C016  F01A         	movff	??_LCD_Read,LCD_Read@temp16
 16942  003A6E  C017  F01B         	movff	??_LCD_Read+1,LCD_Read@temp16+1
 16943                           
 16944                           ;libraries/lcd_lowlevel.c: 99:   color |= temp16 << 5;
 16945  003A72  C01A  F016         	movff	LCD_Read@temp16,??_LCD_Read
 16946  003A76  C01B  F017         	movff	LCD_Read@temp16+1,??_LCD_Read+1
 16947  003A7A  0E05               	movlw	5
 16948  003A7C                     u3395:
 16949  003A7C  90D8               	bcf	status,0,c
 16950  003A7E  3616               	rlcf	??_LCD_Read^0,f,c
 16951  003A80  3617               	rlcf	(??_LCD_Read+1)^0,f,c
 16952  003A82  2EE8               	decfsz	wreg,f,c
 16953  003A84  D7FB               	goto	u3395
 16954  003A86  5016               	movf	??_LCD_Read^0,w,c
 16955  003A88  1218               	iorwf	LCD_Read@color^0,f,c
 16956  003A8A  5017               	movf	(??_LCD_Read+1)^0,w,c
 16957  003A8C  1219               	iorwf	(LCD_Read@color+1)^0,f,c
 16958                           
 16959                           ;libraries/lcd_lowlevel.c: 100:  LATC2 = 0;
 16960  003A8E  948B               	bcf	3979,2,c	;volatile
 16961                           
 16962                           ;libraries/lcd_lowlevel.c: 101:   __nop();
 16963  003A90  F000               	nop	
 16964                           
 16965                           ;libraries/lcd_lowlevel.c: 102:  temp16 |= PORTA;
 16966  003A92  5080               	movf	128,w,c	;volatile
 16967  003A94  121A               	iorwf	LCD_Read@temp16^0,f,c
 16968                           
 16969                           ;libraries/lcd_lowlevel.c: 103:  LATC2 = 1;
 16970  003A96  848B               	bsf	3979,2,c	;volatile
 16971                           
 16972                           ;libraries/lcd_lowlevel.c: 104:   temp16 = temp16 >> 3;
 16973  003A98  C01A  F016         	movff	LCD_Read@temp16,??_LCD_Read
 16974  003A9C  C01B  F017         	movff	LCD_Read@temp16+1,??_LCD_Read+1
 16975  003AA0  90D8               	bcf	status,0,c
 16976  003AA2  3217               	rrcf	(??_LCD_Read+1)^0,f,c
 16977  003AA4  3216               	rrcf	??_LCD_Read^0,f,c
 16978  003AA6  90D8               	bcf	status,0,c
 16979  003AA8  3217               	rrcf	(??_LCD_Read+1)^0,f,c
 16980  003AAA  3216               	rrcf	??_LCD_Read^0,f,c
 16981  003AAC  90D8               	bcf	status,0,c
 16982  003AAE  3217               	rrcf	(??_LCD_Read+1)^0,f,c
 16983  003AB0  3216               	rrcf	??_LCD_Read^0,f,c
 16984  003AB2  C016  F01A         	movff	??_LCD_Read,LCD_Read@temp16
 16985  003AB6  C017  F01B         	movff	??_LCD_Read+1,LCD_Read@temp16+1
 16986                           
 16987                           ;libraries/lcd_lowlevel.c: 105:   color |= temp16;
 16988  003ABA  501A               	movf	LCD_Read@temp16^0,w,c
 16989  003ABC  1218               	iorwf	LCD_Read@color^0,f,c
 16990  003ABE  501B               	movf	(LCD_Read@temp16+1)^0,w,c
 16991  003AC0  1219               	iorwf	(LCD_Read@color+1)^0,f,c
 16992                           
 16993                           ;libraries/lcd_lowlevel.c: 106:  TRISA = 0x00;
 16994  003AC2  0E00               	movlw	0
 16995  003AC4  6E92               	movwf	146,c	;volatile
 16996                           
 16997                           ;libraries/lcd_lowlevel.c: 107:  return color;
 16998  003AC6  C018  F012         	movff	LCD_Read@color,?_LCD_Read
 16999  003ACA  C019  F013         	movff	LCD_Read@color+1,?_LCD_Read+1
 17000  003ACE  0012               	return		;funcret
 17001  003AD0                     __end_of_LCD_Read:
 17002                           	callstack 0
 17003                           
 17004 ;; *************** function _LCD_Bitmap *****************
 17005 ;; Defined at:
 17006 ;;		line 823 in file "libraries/lcd_highlevel.c"
 17007 ;; Parameters:    Size  Location     Type
 17008 ;;  bmpPtr          2   38[COMRAM] PTR const unsigned char 
 17009 ;;		 -> STR_9(9), STR_8(2), STR_7(9), STR_6(11), 
 17010 ;;		 -> STR_5(9), STR_4(9), 
 17011 ;;  posX            2   40[COMRAM] unsigned short 
 17012 ;;  posY            2   42[COMRAM] unsigned short 
 17013 ;; Auto vars:     Size  Location     Type
 17014 ;;  bfOffBits       4    0[BANK0 ] unsigned long 
 17015 ;;  i               2   26[BANK0 ] unsigned short 
 17016 ;;  jumpColor       2   24[BANK0 ] unsigned short 
 17017 ;;  biWidth         2   22[BANK0 ] unsigned short 
 17018 ;;  newY            2   19[BANK0 ] unsigned short 
 17019 ;;  strPtr          2   17[BANK0 ] PTR struct .
 17020 ;;		 -> STR_9(9), STR_8(2), STR_7(9), STR_6(11), 
 17021 ;;		 -> STR_5(9), STR_4(9), 
 17022 ;;  color           2   15[BANK0 ] unsigned short 
 17023 ;;  curXPos         2   13[BANK0 ] unsigned short 
 17024 ;;  biHeight        2   11[BANK0 ] unsigned short 
 17025 ;;  colorTablePt    2    9[BANK0 ] PTR unsigned char 
 17026 ;;		 -> STR_9(9), STR_8(2), STR_7(9), STR_6(11), 
 17027 ;;		 -> STR_5(9), STR_4(9), 
 17028 ;;  curYPos         2    7[BANK0 ] unsigned short 
 17029 ;;  jumpCount       2    5[BANK0 ] unsigned short 
 17030 ;;  pixelCount      1   21[BANK0 ] unsigned char 
 17031 ;;  endOfImage      1    4[BANK0 ] unsigned char 
 17032 ;; Return value:  Size  Location     Type
 17033 ;;                  1    wreg      unsigned char 
 17034 ;; Registers used:
 17035 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17036 ;; Tracked objects:
 17037 ;;		On entry : 3F/0
 17038 ;;		On exit  : 3F/0
 17039 ;;		Unchanged: 0/0
 17040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17041 ;;      Params:         6       0       0       0       0       0       0
 17042 ;;      Locals:         0      28       0       0       0       0       0
 17043 ;;      Temps:          4       0       0       0       0       0       0
 17044 ;;      Totals:        10      28       0       0       0       0       0
 17045 ;;Total ram usage:       38 bytes
 17046 ;; Hardware stack levels used: 1
 17047 ;; Hardware stack levels required when called: 5
 17048 ;; This function calls:
 17049 ;;		_RGB2LCD
 17050 ;;		___lwdiv
 17051 ;;		___lwmod
 17052 ;;		___wmul
 17053 ;; This function is called by:
 17054 ;;		_LCD_ButtonDraw
 17055 ;; This function uses a non-reentrant model
 17056 ;;
 17057                           
 17058                           	psect	text74
 17059  00091C                     __ptext74:
 17060                           	callstack 0
 17061  00091C                     _LCD_Bitmap:
 17062                           	callstack 19
 17063                           
 17064                           ; BSR set to: 0
 17065                           ;libraries/lcd_highlevel.c: 823: uint8_t LCD_Bitmap(const uint8_t * bmpPtr, uint16_t pos
      +                          X, uint16_t posY);libraries/lcd_highlevel.c: 824: {;libraries/lcd_highlevel.c: 825:   ui
      +                          nt32_t bfOffBits;;libraries/lcd_highlevel.c: 826:   uint16_t biWidth, biHeight;;librarie
      +                          s/lcd_highlevel.c: 827:   uint8_t * colorTablePtr;;libraries/lcd_highlevel.c: 828:   uin
      +                          t8_t endOfImage;;libraries/lcd_highlevel.c: 829:   uint16_t i,curXPos,curYPos;;libraries
      +                          /lcd_highlevel.c: 830:   uint8_t pixelCount;;libraries/lcd_highlevel.c: 831:   uint16_t 
      +                          color;
 17066                           
 17067                           ;incstack = 0
 17068  00091C  C027  F0BB         	movff	LCD_Bitmap@bmpPtr,LCD_Bitmap@strPtr
 17069  000920  C028  F0BC         	movff	LCD_Bitmap@bmpPtr+1,LCD_Bitmap@strPtr+1
 17070                           
 17071                           ; BSR set to: 0
 17072                           ;libraries/lcd_highlevel.c: 839:   bfOffBits = strPtr->bfOffBits;
 17073  000924  0E0A               	movlw	10
 17074  000926  25BB               	addwf	LCD_Bitmap@strPtr& (0+255),w,b
 17075  000928  6E2D               	movwf	??_LCD_Bitmap^0,c
 17076  00092A  0E00               	movlw	0
 17077  00092C  21BC               	addwfc	(LCD_Bitmap@strPtr+1)& (0+255),w,b
 17078  00092E  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17079  000930  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 17080  000934  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 17081  000938                     	if	0	;tblptru may be non-zero
 17082  000938                     	endif
 17083  000938                     	if	0	;tblptru may be non-zero
 17084  000938                     	endif
 17085  000938  0009               	tblrd		*+
 17086  00093A  CFF5 F0AA          	movff	tablat,LCD_Bitmap@bfOffBits
 17087  00093E  0009               	tblrd		*+
 17088  000940  CFF5 F0AB          	movff	tablat,LCD_Bitmap@bfOffBits+1
 17089  000944  0009               	tblrd		*+
 17090  000946  CFF5 F0AC          	movff	tablat,LCD_Bitmap@bfOffBits+2
 17091  00094A  000A               	tblrd		*-
 17092  00094C  CFF5 F0AD          	movff	tablat,LCD_Bitmap@bfOffBits+3
 17093                           
 17094                           ; BSR set to: 0
 17095                           ;libraries/lcd_highlevel.c: 840:   biWidth = strPtr->biWidth;
 17096  000950  0E12               	movlw	18
 17097  000952  25BB               	addwf	LCD_Bitmap@strPtr& (0+255),w,b
 17098  000954  6E2D               	movwf	??_LCD_Bitmap^0,c
 17099  000956  0E00               	movlw	0
 17100  000958  21BC               	addwfc	(LCD_Bitmap@strPtr+1)& (0+255),w,b
 17101  00095A  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17102  00095C  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 17103  000960  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 17104  000964                     	if	0	;tblptru may be non-zero
 17105  000964                     	endif
 17106  000964                     	if	0	;tblptru may be non-zero
 17107  000964                     	endif
 17108  000964  0009               	tblrd		*+
 17109  000966  CFF5 F0C0          	movff	tablat,LCD_Bitmap@biWidth
 17110  00096A  000A               	tblrd		*-
 17111  00096C  CFF5 F0C1          	movff	tablat,LCD_Bitmap@biWidth+1
 17112                           
 17113                           ; BSR set to: 0
 17114                           ;libraries/lcd_highlevel.c: 841:   biHeight = strPtr->biHeight;
 17115  000970  0E16               	movlw	22
 17116  000972  25BB               	addwf	LCD_Bitmap@strPtr& (0+255),w,b
 17117  000974  6E2D               	movwf	??_LCD_Bitmap^0,c
 17118  000976  0E00               	movlw	0
 17119  000978  21BC               	addwfc	(LCD_Bitmap@strPtr+1)& (0+255),w,b
 17120  00097A  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17121  00097C  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 17122  000980  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 17123  000984                     	if	0	;tblptru may be non-zero
 17124  000984                     	endif
 17125  000984                     	if	0	;tblptru may be non-zero
 17126  000984                     	endif
 17127  000984  0009               	tblrd		*+
 17128  000986  CFF5 F0B5          	movff	tablat,LCD_Bitmap@biHeight
 17129  00098A  000A               	tblrd		*-
 17130  00098C  CFF5 F0B6          	movff	tablat,LCD_Bitmap@biHeight+1
 17131                           
 17132                           ; BSR set to: 0
 17133                           ;libraries/lcd_highlevel.c: 842:   if((strPtr->biBitCount != 8) ||
 17134  000990  0E1C               	movlw	28
 17135  000992  25BB               	addwf	LCD_Bitmap@strPtr& (0+255),w,b
 17136  000994  6E2D               	movwf	??_LCD_Bitmap^0,c
 17137  000996  0E00               	movlw	0
 17138  000998  21BC               	addwfc	(LCD_Bitmap@strPtr+1)& (0+255),w,b
 17139  00099A  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17140  00099C  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 17141  0009A0  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 17142  0009A4                     	if	0	;tblptru may be non-zero
 17143  0009A4                     	endif
 17144  0009A4                     	if	0	;tblptru may be non-zero
 17145  0009A4                     	endif
 17146  0009A4  0009               	tblrd		*+
 17147  0009A6  0E08               	movlw	8
 17148  0009A8  18F5               	xorwf	tablat,w,c
 17149  0009AA  0009               	tblrd		*+
 17150  0009AC  10F5               	iorwf	tablat,w,c
 17151  0009AE  A4D8               	btfss	status,2,c
 17152  0009B0  0012               	return	
 17153                           
 17154                           ; BSR set to: 0
 17155  0009B2  0E1E               	movlw	30
 17156  0009B4  25BB               	addwf	LCD_Bitmap@strPtr& (0+255),w,b
 17157  0009B6  6E2D               	movwf	??_LCD_Bitmap^0,c
 17158  0009B8  0E00               	movlw	0
 17159  0009BA  21BC               	addwfc	(LCD_Bitmap@strPtr+1)& (0+255),w,b
 17160  0009BC  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17161  0009BE  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 17162  0009C2  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 17163  0009C6                     	if	0	;tblptru may be non-zero
 17164  0009C6                     	endif
 17165  0009C6                     	if	0	;tblptru may be non-zero
 17166  0009C6                     	endif
 17167  0009C6  0009               	tblrd		*+
 17168  0009C8  04F5               	decf	tablat,w,c
 17169  0009CA  0009               	tblrd		*+
 17170  0009CC  10F5               	iorwf	tablat,w,c
 17171  0009CE  0009               	tblrd		*+
 17172  0009D0  10F5               	iorwf	tablat,w,c
 17173  0009D2  0009               	tblrd		*+
 17174  0009D4  10F5               	iorwf	tablat,w,c
 17175  0009D6  A4D8               	btfss	status,2,c
 17176  0009D8  0012               	return	
 17177                           
 17178                           ; BSR set to: 0
 17179                           ;libraries/lcd_highlevel.c: 847:   if(((posX + biWidth) > (240)) ||
 17180  0009DA  51C0               	movf	LCD_Bitmap@biWidth& (0+255),w,b
 17181  0009DC  2429               	addwf	LCD_Bitmap@posX^0,w,c
 17182  0009DE  6E2D               	movwf	??_LCD_Bitmap^0,c
 17183  0009E0  51C1               	movf	(LCD_Bitmap@biWidth+1)& (0+255),w,b
 17184  0009E2  202A               	addwfc	(LCD_Bitmap@posX+1)^0,w,c
 17185  0009E4  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17186  0009E6  502E               	movf	(??_LCD_Bitmap+1)^0,w,c
 17187  0009E8  E103               	bnz	u3841
 17188  0009EA  0EF1               	movlw	241
 17189  0009EC  5C2D               	subwf	??_LCD_Bitmap^0,w,c
 17190  0009EE  B0D8               	btfsc	status,0,c
 17191  0009F0                     u3841:
 17192  0009F0  0012               	return	
 17193                           
 17194                           ; BSR set to: 0
 17195  0009F2  51B5               	movf	LCD_Bitmap@biHeight& (0+255),w,b
 17196  0009F4  242B               	addwf	LCD_Bitmap@posY^0,w,c
 17197  0009F6  6E2D               	movwf	??_LCD_Bitmap^0,c
 17198  0009F8  51B6               	movf	(LCD_Bitmap@biHeight+1)& (0+255),w,b
 17199  0009FA  202C               	addwfc	(LCD_Bitmap@posY+1)^0,w,c
 17200  0009FC  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17201  0009FE  0E41               	movlw	65
 17202  000A00  5C2D               	subwf	??_LCD_Bitmap^0,w,c
 17203  000A02  0E01               	movlw	1
 17204  000A04  582E               	subwfb	(??_LCD_Bitmap+1)^0,w,c
 17205  000A06  B0D8               	btfsc	status,0,c
 17206  000A08  0012               	return	
 17207                           
 17208                           ; BSR set to: 0
 17209                           ;libraries/lcd_highlevel.c: 853:   PORTA = 0x36; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
 17210  000A0A  0E36               	movlw	54
 17211  000A0C  6E80               	movwf	128,c	;volatile
 17212                           
 17213                           ; BSR set to: 0
 17214  000A0E  988B               	bcf	3979,4,c	;volatile
 17215                           
 17216                           ; BSR set to: 0
 17217  000A10  968B               	bcf	3979,3,c	;volatile
 17218                           
 17219                           ; BSR set to: 0
 17220  000A12  868B               	bsf	3979,3,c	;volatile
 17221                           
 17222                           ; BSR set to: 0
 17223  000A14  888B               	bsf	3979,4,c	;volatile
 17224                           
 17225                           ;libraries/lcd_highlevel.c: 855:   PORTA = 0b10000000; LATC3 = 0; LATC3 = 1;;
 17226  000A16  0E80               	movlw	128
 17227  000A18  6E80               	movwf	128,c	;volatile
 17228                           
 17229                           ; BSR set to: 0
 17230  000A1A  968B               	bcf	3979,3,c	;volatile
 17231                           
 17232                           ; BSR set to: 0
 17233  000A1C  868B               	bsf	3979,3,c	;volatile
 17234                           
 17235                           ; BSR set to: 0
 17236                           ;libraries/lcd_highlevel.c: 857:   colorTablePtr = (uint8_t *)bmpPtr + 54;
 17237  000A1E  0E36               	movlw	54
 17238  000A20  2427               	addwf	LCD_Bitmap@bmpPtr^0,w,c
 17239  000A22  6FB3               	movwf	LCD_Bitmap@colorTablePtr& (0+255),b
 17240  000A24  0E00               	movlw	0
 17241  000A26  2028               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,w,c
 17242  000A28  6FB4               	movwf	(LCD_Bitmap@colorTablePtr+1)& (0+255),b
 17243                           
 17244                           ; BSR set to: 0
 17245                           ;libraries/lcd_highlevel.c: 858:   bmpPtr += bfOffBits;
 17246  000A2A  51AA               	movf	LCD_Bitmap@bfOffBits& (0+255),w,b
 17247  000A2C  2627               	addwf	LCD_Bitmap@bmpPtr^0,f,c
 17248  000A2E  51AB               	movf	(LCD_Bitmap@bfOffBits+1)& (0+255),w,b
 17249  000A30  2228               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,f,c
 17250                           
 17251                           ;libraries/lcd_highlevel.c: 859:   endOfImage = 0;
 17252  000A32  0E00               	movlw	0
 17253  000A34  6FAE               	movwf	LCD_Bitmap@endOfImage& (0+255),b
 17254                           
 17255                           ; BSR set to: 0
 17256                           ;libraries/lcd_highlevel.c: 860:   jumpColor = RGB2LCD(colorTablePtr);
 17257  000A36  C0B3  F012         	movff	LCD_Bitmap@colorTablePtr,RGB2LCD@colorTableEntry
 17258  000A3A  C0B4  F013         	movff	LCD_Bitmap@colorTablePtr+1,RGB2LCD@colorTableEntry+1
 17259  000A3E  ECE3  F023         	call	_RGB2LCD	;wreg free
 17260  000A42  C012  F0C2         	movff	?_RGB2LCD,LCD_Bitmap@jumpColor
 17261  000A46  C013  F0C3         	movff	?_RGB2LCD+1,LCD_Bitmap@jumpColor+1
 17262                           
 17263                           ; BSR set to: 0
 17264                           ;libraries/lcd_highlevel.c: 862:   PORTA = 0x2A; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
 17265  000A4A  0E2A               	movlw	42
 17266  000A4C  6E80               	movwf	128,c	;volatile
 17267                           
 17268                           ; BSR set to: 0
 17269  000A4E  988B               	bcf	3979,4,c	;volatile
 17270                           
 17271                           ; BSR set to: 0
 17272  000A50  968B               	bcf	3979,3,c	;volatile
 17273                           
 17274                           ; BSR set to: 0
 17275  000A52  868B               	bsf	3979,3,c	;volatile
 17276                           
 17277                           ; BSR set to: 0
 17278  000A54  888B               	bsf	3979,4,c	;volatile
 17279                           
 17280                           ; BSR set to: 0
 17281                           ;libraries/lcd_highlevel.c: 863:   PORTA = posX>>8; LATC3 = 0; LATC3 = 1;;
 17282  000A56  C02A  FF80         	movff	LCD_Bitmap@posX+1,3968	;volatile
 17283                           
 17284                           ; BSR set to: 0
 17285  000A5A  968B               	bcf	3979,3,c	;volatile
 17286                           
 17287                           ; BSR set to: 0
 17288  000A5C  868B               	bsf	3979,3,c	;volatile
 17289                           
 17290                           ; BSR set to: 0
 17291                           ;libraries/lcd_highlevel.c: 864:   PORTA = posX; LATC3 = 0; LATC3 = 1;;
 17292  000A5E  C029  FF80         	movff	LCD_Bitmap@posX,3968	;volatile
 17293                           
 17294                           ; BSR set to: 0
 17295  000A62  968B               	bcf	3979,3,c	;volatile
 17296                           
 17297                           ; BSR set to: 0
 17298  000A64  868B               	bsf	3979,3,c	;volatile
 17299                           
 17300                           ; BSR set to: 0
 17301                           ;libraries/lcd_highlevel.c: 865:   posX = posX + biWidth-1;
 17302  000A66  51C0               	movf	LCD_Bitmap@biWidth& (0+255),w,b
 17303  000A68  2429               	addwf	LCD_Bitmap@posX^0,w,c
 17304  000A6A  6E2D               	movwf	??_LCD_Bitmap^0,c
 17305  000A6C  51C1               	movf	(LCD_Bitmap@biWidth+1)& (0+255),w,b
 17306  000A6E  202A               	addwfc	(LCD_Bitmap@posX+1)^0,w,c
 17307  000A70  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17308  000A72  0EFF               	movlw	255
 17309  000A74  242D               	addwf	??_LCD_Bitmap^0,w,c
 17310  000A76  6E29               	movwf	LCD_Bitmap@posX^0,c
 17311  000A78  0EFF               	movlw	255
 17312  000A7A  202E               	addwfc	(??_LCD_Bitmap+1)^0,w,c
 17313  000A7C  6E2A               	movwf	(LCD_Bitmap@posX+1)^0,c
 17314                           
 17315                           ; BSR set to: 0
 17316                           ;libraries/lcd_highlevel.c: 866:   PORTA = posX>>8; LATC3 = 0; LATC3 = 1;;
 17317  000A7E  C02A  FF80         	movff	LCD_Bitmap@posX+1,3968	;volatile
 17318                           
 17319                           ; BSR set to: 0
 17320  000A82  968B               	bcf	3979,3,c	;volatile
 17321                           
 17322                           ; BSR set to: 0
 17323  000A84  868B               	bsf	3979,3,c	;volatile
 17324                           
 17325                           ; BSR set to: 0
 17326                           ;libraries/lcd_highlevel.c: 867:   PORTA = posX; LATC3 = 0; LATC3 = 1;;
 17327  000A86  C029  FF80         	movff	LCD_Bitmap@posX,3968	;volatile
 17328                           
 17329                           ; BSR set to: 0
 17330  000A8A  968B               	bcf	3979,3,c	;volatile
 17331                           
 17332                           ; BSR set to: 0
 17333  000A8C  868B               	bsf	3979,3,c	;volatile
 17334                           
 17335                           ; BSR set to: 0
 17336                           ;libraries/lcd_highlevel.c: 869:   PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
 17337  000A8E  0E2B               	movlw	43
 17338  000A90  6E80               	movwf	128,c	;volatile
 17339                           
 17340                           ; BSR set to: 0
 17341  000A92  988B               	bcf	3979,4,c	;volatile
 17342                           
 17343                           ; BSR set to: 0
 17344  000A94  968B               	bcf	3979,3,c	;volatile
 17345                           
 17346                           ; BSR set to: 0
 17347  000A96  868B               	bsf	3979,3,c	;volatile
 17348                           
 17349                           ; BSR set to: 0
 17350  000A98  888B               	bsf	3979,4,c	;volatile
 17351                           
 17352                           ; BSR set to: 0
 17353                           ;libraries/lcd_highlevel.c: 870:   newY = 320 - posY - biHeight;
 17354  000A9A  C02B  F02D         	movff	LCD_Bitmap@posY,??_LCD_Bitmap
 17355  000A9E  C02C  F02E         	movff	LCD_Bitmap@posY+1,??_LCD_Bitmap+1
 17356  000AA2  1E2D               	comf	??_LCD_Bitmap^0,f,c
 17357  000AA4  1E2E               	comf	(??_LCD_Bitmap+1)^0,f,c
 17358  000AA6  4A2D               	infsnz	??_LCD_Bitmap^0,f,c
 17359  000AA8  2A2E               	incf	(??_LCD_Bitmap+1)^0,f,c
 17360  000AAA  51B5               	movf	LCD_Bitmap@biHeight& (0+255),w,b
 17361  000AAC  5E2D               	subwf	??_LCD_Bitmap^0,f,c
 17362  000AAE  51B6               	movf	(LCD_Bitmap@biHeight+1)& (0+255),w,b
 17363  000AB0  5A2E               	subwfb	(??_LCD_Bitmap+1)^0,f,c
 17364  000AB2  0E40               	movlw	64
 17365  000AB4  242D               	addwf	??_LCD_Bitmap^0,w,c
 17366  000AB6  6FBD               	movwf	LCD_Bitmap@newY& (0+255),b
 17367  000AB8  0E01               	movlw	1
 17368  000ABA  202E               	addwfc	(??_LCD_Bitmap+1)^0,w,c
 17369  000ABC  6FBE               	movwf	(LCD_Bitmap@newY+1)& (0+255),b
 17370                           
 17371                           ; BSR set to: 0
 17372                           ;libraries/lcd_highlevel.c: 871:   PORTA = newY>>8; LATC3 = 0; LATC3 = 1;;
 17373  000ABE  C0BE  FF80         	movff	LCD_Bitmap@newY+1,3968	;volatile
 17374                           
 17375                           ; BSR set to: 0
 17376  000AC2  968B               	bcf	3979,3,c	;volatile
 17377                           
 17378                           ; BSR set to: 0
 17379  000AC4  868B               	bsf	3979,3,c	;volatile
 17380                           
 17381                           ; BSR set to: 0
 17382                           ;libraries/lcd_highlevel.c: 872:   PORTA = newY; LATC3 = 0; LATC3 = 1;;
 17383  000AC6  C0BD  FF80         	movff	LCD_Bitmap@newY,3968	;volatile
 17384                           
 17385                           ; BSR set to: 0
 17386  000ACA  968B               	bcf	3979,3,c	;volatile
 17387                           
 17388                           ; BSR set to: 0
 17389  000ACC  868B               	bsf	3979,3,c	;volatile
 17390                           
 17391                           ; BSR set to: 0
 17392                           ;libraries/lcd_highlevel.c: 873:   newY = newY + biHeight-1;
 17393  000ACE  51B5               	movf	LCD_Bitmap@biHeight& (0+255),w,b
 17394  000AD0  25BD               	addwf	LCD_Bitmap@newY& (0+255),w,b
 17395  000AD2  6E2D               	movwf	??_LCD_Bitmap^0,c
 17396  000AD4  51B6               	movf	(LCD_Bitmap@biHeight+1)& (0+255),w,b
 17397  000AD6  21BE               	addwfc	(LCD_Bitmap@newY+1)& (0+255),w,b
 17398  000AD8  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17399  000ADA  0EFF               	movlw	255
 17400  000ADC  242D               	addwf	??_LCD_Bitmap^0,w,c
 17401  000ADE  6FBD               	movwf	LCD_Bitmap@newY& (0+255),b
 17402  000AE0  0EFF               	movlw	255
 17403  000AE2  202E               	addwfc	(??_LCD_Bitmap+1)^0,w,c
 17404  000AE4  6FBE               	movwf	(LCD_Bitmap@newY+1)& (0+255),b
 17405                           
 17406                           ; BSR set to: 0
 17407                           ;libraries/lcd_highlevel.c: 874:   PORTA = newY>>8; LATC3 = 0; LATC3 = 1;;
 17408  000AE6  C0BE  FF80         	movff	LCD_Bitmap@newY+1,3968	;volatile
 17409                           
 17410                           ; BSR set to: 0
 17411  000AEA  968B               	bcf	3979,3,c	;volatile
 17412                           
 17413                           ; BSR set to: 0
 17414  000AEC  868B               	bsf	3979,3,c	;volatile
 17415                           
 17416                           ; BSR set to: 0
 17417                           ;libraries/lcd_highlevel.c: 875:   PORTA = newY; LATC3 = 0; LATC3 = 1;;
 17418  000AEE  C0BD  FF80         	movff	LCD_Bitmap@newY,3968	;volatile
 17419                           
 17420                           ; BSR set to: 0
 17421  000AF2  968B               	bcf	3979,3,c	;volatile
 17422                           
 17423                           ; BSR set to: 0
 17424  000AF4  868B               	bsf	3979,3,c	;volatile
 17425                           
 17426                           ; BSR set to: 0
 17427                           ;libraries/lcd_highlevel.c: 877:   PORTA = 0x2C; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
 17428  000AF6  0E2C               	movlw	44
 17429  000AF8  6E80               	movwf	128,c	;volatile
 17430                           
 17431                           ; BSR set to: 0
 17432  000AFA  988B               	bcf	3979,4,c	;volatile
 17433                           
 17434                           ; BSR set to: 0
 17435  000AFC  968B               	bcf	3979,3,c	;volatile
 17436                           
 17437                           ; BSR set to: 0
 17438  000AFE  868B               	bsf	3979,3,c	;volatile
 17439                           
 17440                           ; BSR set to: 0
 17441  000B00  888B               	bsf	3979,4,c	;volatile
 17442                           
 17443                           ; BSR set to: 0
 17444                           ;libraries/lcd_highlevel.c: 878:   curXPos = 0;
 17445  000B02  0E00               	movlw	0
 17446  000B04  6FB8               	movwf	(LCD_Bitmap@curXPos+1)& (0+255),b
 17447  000B06  0E00               	movlw	0
 17448  000B08  6FB7               	movwf	LCD_Bitmap@curXPos& (0+255),b
 17449                           
 17450                           ; BSR set to: 0
 17451                           ;libraries/lcd_highlevel.c: 879:   curYPos = 0;
 17452  000B0A  0E00               	movlw	0
 17453  000B0C  6FB2               	movwf	(LCD_Bitmap@curYPos+1)& (0+255),b
 17454  000B0E  0E00               	movlw	0
 17455  000B10  6FB1               	movwf	LCD_Bitmap@curYPos& (0+255),b
 17456  000B12                     l6284:
 17457                           
 17458                           ; BSR set to: 0
 17459                           ;libraries/lcd_highlevel.c: 881:   {;libraries/lcd_highlevel.c: 882:     if(bmpPtr[0] ==
      +                           0)
 17460  000B12  C027  FFF6         	movff	LCD_Bitmap@bmpPtr,tblptrl
 17461  000B16  C028  FFF7         	movff	LCD_Bitmap@bmpPtr+1,tblptrh
 17462  000B1A                     	if	0	;tblptru may be non-zero
 17463  000B1A                     	endif
 17464  000B1A                     	if	0	;tblptru may be non-zero
 17465  000B1A                     	endif
 17466  000B1A  0008               	tblrd		*
 17467  000B1C  50F5               	movf	tablat,w,c
 17468  000B1E  0900               	iorlw	0
 17469  000B20  B4D8               	btfsc	status,2,c
 17470  000B22  D128               	goto	l6370
 17471  000B24  D144               	goto	l6372
 17472  000B26                     l6288:
 17473                           
 17474                           ; BSR set to: 0
 17475                           ;libraries/lcd_highlevel.c: 887:           bmpPtr += 2;
 17476  000B26  0E02               	movlw	2
 17477  000B28  2627               	addwf	LCD_Bitmap@bmpPtr^0,f,c
 17478  000B2A  0E00               	movlw	0
 17479  000B2C  2228               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,f,c
 17480                           
 17481                           ; BSR set to: 0
 17482                           ;libraries/lcd_highlevel.c: 888:           for(i=0;i<biWidth - curXPos;i++)
 17483  000B2E  0E00               	movlw	0
 17484  000B30  6FC5               	movwf	(LCD_Bitmap@i+1)& (0+255),b
 17485  000B32  0E00               	movlw	0
 17486  000B34  6FC4               	movwf	LCD_Bitmap@i& (0+255),b
 17487  000B36  D00A               	goto	l6294
 17488  000B38                     l340:
 17489                           
 17490                           ; BSR set to: 0
 17491                           ;libraries/lcd_highlevel.c: 889:           {;libraries/lcd_highlevel.c: 890:            
      +                           PORTA = jumpColor >> 8; LATC3 = 0; LATC3 = 1;;
 17492  000B38  C0C3  FF80         	movff	LCD_Bitmap@jumpColor+1,3968	;volatile
 17493  000B3C  968B               	bcf	3979,3,c	;volatile
 17494  000B3E  868B               	bsf	3979,3,c	;volatile
 17495                           
 17496                           ;libraries/lcd_highlevel.c: 891:             PORTA = jumpColor; LATC3 = 0; LATC3 = 1;;
 17497  000B40  C0C2  FF80         	movff	LCD_Bitmap@jumpColor,3968	;volatile
 17498  000B44  968B               	bcf	3979,3,c	;volatile
 17499  000B46  868B               	bsf	3979,3,c	;volatile
 17500                           
 17501                           ; BSR set to: 0
 17502                           ;libraries/lcd_highlevel.c: 892:           }
 17503  000B48  4BC4               	infsnz	LCD_Bitmap@i& (0+255),f,b
 17504  000B4A  2BC5               	incf	(LCD_Bitmap@i+1)& (0+255),f,b
 17505  000B4C                     l6294:
 17506                           
 17507                           ; BSR set to: 0
 17508  000B4C  51B7               	movf	LCD_Bitmap@curXPos& (0+255),w,b
 17509  000B4E  5DC0               	subwf	LCD_Bitmap@biWidth& (0+255),w,b
 17510  000B50  6E2D               	movwf	??_LCD_Bitmap^0,c
 17511  000B52  51B8               	movf	(LCD_Bitmap@curXPos+1)& (0+255),w,b
 17512  000B54  59C1               	subwfb	(LCD_Bitmap@biWidth+1)& (0+255),w,b
 17513  000B56  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17514  000B58  502D               	movf	??_LCD_Bitmap^0,w,c
 17515  000B5A  5DC4               	subwf	LCD_Bitmap@i& (0+255),w,b
 17516  000B5C  502E               	movf	(??_LCD_Bitmap+1)^0,w,c
 17517  000B5E  59C5               	subwfb	(LCD_Bitmap@i+1)& (0+255),w,b
 17518  000B60  A0D8               	btfss	status,0,c
 17519  000B62  D7EA               	goto	l340
 17520                           
 17521                           ; BSR set to: 0
 17522                           ;libraries/lcd_highlevel.c: 893:           curXPos = 0;
 17523  000B64  0E00               	movlw	0
 17524  000B66  6FB8               	movwf	(LCD_Bitmap@curXPos+1)& (0+255),b
 17525  000B68  0E00               	movlw	0
 17526  000B6A  6FB7               	movwf	LCD_Bitmap@curXPos& (0+255),b
 17527                           
 17528                           ; BSR set to: 0
 17529                           ;libraries/lcd_highlevel.c: 894:           curYPos++;
 17530  000B6C  4BB1               	infsnz	LCD_Bitmap@curYPos& (0+255),f,b
 17531  000B6E  2BB2               	incf	(LCD_Bitmap@curYPos+1)& (0+255),f,b
 17532                           
 17533                           ;libraries/lcd_highlevel.c: 895:         break;
 17534  000B70  D160               	goto	l6396
 17535  000B72                     l6300:
 17536                           
 17537                           ; BSR set to: 0
 17538                           ;libraries/lcd_highlevel.c: 897:           for(i=0;i<biWidth - curXPos;i++)
 17539  000B72  0E00               	movlw	0
 17540  000B74  6FC5               	movwf	(LCD_Bitmap@i+1)& (0+255),b
 17541  000B76  0E00               	movlw	0
 17542  000B78  6FC4               	movwf	LCD_Bitmap@i& (0+255),b
 17543  000B7A  D00A               	goto	l6304
 17544  000B7C                     l345:
 17545                           
 17546                           ; BSR set to: 0
 17547                           ;libraries/lcd_highlevel.c: 898:           {;libraries/lcd_highlevel.c: 899:            
      +                           PORTA = jumpColor >> 8; LATC3 = 0; LATC3 = 1;;
 17548  000B7C  C0C3  FF80         	movff	LCD_Bitmap@jumpColor+1,3968	;volatile
 17549  000B80  968B               	bcf	3979,3,c	;volatile
 17550  000B82  868B               	bsf	3979,3,c	;volatile
 17551                           
 17552                           ;libraries/lcd_highlevel.c: 900:             PORTA = jumpColor; LATC3 = 0; LATC3 = 1;;
 17553  000B84  C0C2  FF80         	movff	LCD_Bitmap@jumpColor,3968	;volatile
 17554  000B88  968B               	bcf	3979,3,c	;volatile
 17555  000B8A  868B               	bsf	3979,3,c	;volatile
 17556                           
 17557                           ; BSR set to: 0
 17558                           ;libraries/lcd_highlevel.c: 901:           }
 17559  000B8C  4BC4               	infsnz	LCD_Bitmap@i& (0+255),f,b
 17560  000B8E  2BC5               	incf	(LCD_Bitmap@i+1)& (0+255),f,b
 17561  000B90                     l6304:
 17562                           
 17563                           ; BSR set to: 0
 17564  000B90  51B7               	movf	LCD_Bitmap@curXPos& (0+255),w,b
 17565  000B92  5DC0               	subwf	LCD_Bitmap@biWidth& (0+255),w,b
 17566  000B94  6E2D               	movwf	??_LCD_Bitmap^0,c
 17567  000B96  51B8               	movf	(LCD_Bitmap@curXPos+1)& (0+255),w,b
 17568  000B98  59C1               	subwfb	(LCD_Bitmap@biWidth+1)& (0+255),w,b
 17569  000B9A  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17570  000B9C  502D               	movf	??_LCD_Bitmap^0,w,c
 17571  000B9E  5DC4               	subwf	LCD_Bitmap@i& (0+255),w,b
 17572  000BA0  502E               	movf	(??_LCD_Bitmap+1)^0,w,c
 17573  000BA2  59C5               	subwfb	(LCD_Bitmap@i+1)& (0+255),w,b
 17574  000BA4  A0D8               	btfss	status,0,c
 17575  000BA6  D7EA               	goto	l345
 17576                           
 17577                           ; BSR set to: 0
 17578                           ;libraries/lcd_highlevel.c: 902:           for(i=0;i<(biHeight - curYPos -1)*biWidth;i++
      +                          )
 17579  000BA8  0E00               	movlw	0
 17580  000BAA  6FC5               	movwf	(LCD_Bitmap@i+1)& (0+255),b
 17581  000BAC  0E00               	movlw	0
 17582  000BAE  6FC4               	movwf	LCD_Bitmap@i& (0+255),b
 17583  000BB0  D00A               	goto	l6310
 17584  000BB2                     l348:
 17585                           
 17586                           ; BSR set to: 0
 17587                           ;libraries/lcd_highlevel.c: 903:           {;libraries/lcd_highlevel.c: 904:            
      +                           PORTA = jumpColor >> 8; LATC3 = 0; LATC3 = 1;;
 17588  000BB2  C0C3  FF80         	movff	LCD_Bitmap@jumpColor+1,3968	;volatile
 17589  000BB6  968B               	bcf	3979,3,c	;volatile
 17590  000BB8  868B               	bsf	3979,3,c	;volatile
 17591                           
 17592                           ;libraries/lcd_highlevel.c: 905:             PORTA = jumpColor; LATC3 = 0; LATC3 = 1;;
 17593  000BBA  C0C2  FF80         	movff	LCD_Bitmap@jumpColor,3968	;volatile
 17594  000BBE  968B               	bcf	3979,3,c	;volatile
 17595  000BC0  868B               	bsf	3979,3,c	;volatile
 17596                           
 17597                           ; BSR set to: 0
 17598                           ;libraries/lcd_highlevel.c: 906:           }
 17599  000BC2  4BC4               	infsnz	LCD_Bitmap@i& (0+255),f,b
 17600  000BC4  2BC5               	incf	(LCD_Bitmap@i+1)& (0+255),f,b
 17601  000BC6                     l6310:
 17602                           
 17603                           ; BSR set to: 0
 17604  000BC6  51B1               	movf	LCD_Bitmap@curYPos& (0+255),w,b
 17605  000BC8  5DB5               	subwf	LCD_Bitmap@biHeight& (0+255),w,b
 17606  000BCA  6E2D               	movwf	??_LCD_Bitmap^0,c
 17607  000BCC  51B2               	movf	(LCD_Bitmap@curYPos+1)& (0+255),w,b
 17608  000BCE  59B6               	subwfb	(LCD_Bitmap@biHeight+1)& (0+255),w,b
 17609  000BD0  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17610  000BD2  0EFF               	movlw	255
 17611  000BD4  242D               	addwf	??_LCD_Bitmap^0,w,c
 17612  000BD6  6E1A               	movwf	___wmul@multiplier^0,c
 17613  000BD8  0EFF               	movlw	255
 17614  000BDA  202E               	addwfc	(??_LCD_Bitmap+1)^0,w,c
 17615  000BDC  6E1B               	movwf	(___wmul@multiplier+1)^0,c
 17616  000BDE  C0C0  F01C         	movff	LCD_Bitmap@biWidth,___wmul@multiplicand
 17617  000BE2  C0C1  F01D         	movff	LCD_Bitmap@biWidth+1,___wmul@multiplicand+1
 17618  000BE6  EC75  F02C         	call	___wmul	;wreg free
 17619  000BEA  501A               	movf	?___wmul^0,w,c
 17620  000BEC  0100               	movlb	0	; () banked
 17621  000BEE  5DC4               	subwf	LCD_Bitmap@i& (0+255),w,b
 17622  000BF0  501B               	movf	(?___wmul+1)^0,w,c
 17623  000BF2  59C5               	subwfb	(LCD_Bitmap@i+1)& (0+255),w,b
 17624  000BF4  A0D8               	btfss	status,0,c
 17625  000BF6  D7DD               	goto	l348
 17626                           
 17627                           ; BSR set to: 0
 17628                           ;libraries/lcd_highlevel.c: 907:           endOfImage = 1;
 17629  000BF8  0E01               	movlw	1
 17630  000BFA  6FAE               	movwf	LCD_Bitmap@endOfImage& (0+255),b
 17631                           
 17632                           ;libraries/lcd_highlevel.c: 908:         break;
 17633  000BFC  D11A               	goto	l6396
 17634  000BFE                     l6314:
 17635                           
 17636                           ; BSR set to: 0
 17637                           ;libraries/lcd_highlevel.c: 910:           jumpCount = bmpPtr[2] + (bmpPtr[3]*biWidth);
 17638  000BFE  0E03               	movlw	3
 17639  000C00  2427               	addwf	LCD_Bitmap@bmpPtr^0,w,c
 17640  000C02  6E2D               	movwf	??_LCD_Bitmap^0,c
 17641  000C04  0E00               	movlw	0
 17642  000C06  2028               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,w,c
 17643  000C08  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17644  000C0A  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 17645  000C0E  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 17646  000C12                     	if	0	;tblptru may be non-zero
 17647  000C12                     	endif
 17648  000C12                     	if	0	;tblptru may be non-zero
 17649  000C12                     	endif
 17650  000C12  0008               	tblrd		*
 17651  000C14  50F5               	movf	tablat,w,c
 17652  000C16  6E1A               	movwf	___wmul@multiplier^0,c
 17653  000C18  6A1B               	clrf	(___wmul@multiplier+1)^0,c
 17654  000C1A  C0C0  F01C         	movff	LCD_Bitmap@biWidth,___wmul@multiplicand
 17655  000C1E  C0C1  F01D         	movff	LCD_Bitmap@biWidth+1,___wmul@multiplicand+1
 17656  000C22  EC75  F02C         	call	___wmul	;wreg free
 17657  000C26  0E02               	movlw	2
 17658  000C28  2427               	addwf	LCD_Bitmap@bmpPtr^0,w,c
 17659  000C2A  6E2F               	movwf	(??_LCD_Bitmap+2)^0,c
 17660  000C2C  0E00               	movlw	0
 17661  000C2E  2028               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,w,c
 17662  000C30  6E30               	movwf	(??_LCD_Bitmap+3)^0,c
 17663  000C32  C02F  FFF6         	movff	??_LCD_Bitmap+2,tblptrl
 17664  000C36  C030  FFF7         	movff	??_LCD_Bitmap+3,tblptrh
 17665  000C3A                     	if	0	;tblptru may be non-zero
 17666  000C3A                     	endif
 17667  000C3A                     	if	0	;tblptru may be non-zero
 17668  000C3A                     	endif
 17669  000C3A  0008               	tblrd		*
 17670  000C3C  50F5               	movf	tablat,w,c
 17671  000C3E  241A               	addwf	?___wmul^0,w,c
 17672  000C40  0100               	movlb	0	; () banked
 17673  000C42  6FAF               	movwf	LCD_Bitmap@jumpCount& (0+255),b
 17674  000C44  0E00               	movlw	0
 17675  000C46  201B               	addwfc	(?___wmul+1)^0,w,c
 17676  000C48  6FB0               	movwf	(LCD_Bitmap@jumpCount+1)& (0+255),b
 17677                           
 17678                           ; BSR set to: 0
 17679                           ;libraries/lcd_highlevel.c: 911:           for(i=0;i<jumpCount;i++)
 17680  000C4A  0E00               	movlw	0
 17681  000C4C  6FC5               	movwf	(LCD_Bitmap@i+1)& (0+255),b
 17682  000C4E  0E00               	movlw	0
 17683  000C50  6FC4               	movwf	LCD_Bitmap@i& (0+255),b
 17684  000C52  D00C               	goto	l6332
 17685  000C54                     l6318:
 17686                           
 17687                           ; BSR set to: 0
 17688                           ;libraries/lcd_highlevel.c: 912:           {;libraries/lcd_highlevel.c: 913:            
      +                           curXPos++;
 17689  000C54  4BB7               	infsnz	LCD_Bitmap@curXPos& (0+255),f,b
 17690  000C56  2BB8               	incf	(LCD_Bitmap@curXPos+1)& (0+255),f,b
 17691                           
 17692                           ; BSR set to: 0
 17693                           ;libraries/lcd_highlevel.c: 914:             PORTA = jumpColor >> 8; LATC3 = 0; LATC3 = 
      +                          1;;
 17694  000C58  C0C3  FF80         	movff	LCD_Bitmap@jumpColor+1,3968	;volatile
 17695                           
 17696                           ; BSR set to: 0
 17697  000C5C  968B               	bcf	3979,3,c	;volatile
 17698                           
 17699                           ; BSR set to: 0
 17700  000C5E  868B               	bsf	3979,3,c	;volatile
 17701                           
 17702                           ; BSR set to: 0
 17703                           ;libraries/lcd_highlevel.c: 915:             PORTA = jumpColor; LATC3 = 0; LATC3 = 1;;
 17704  000C60  C0C2  FF80         	movff	LCD_Bitmap@jumpColor,3968	;volatile
 17705                           
 17706                           ; BSR set to: 0
 17707  000C64  968B               	bcf	3979,3,c	;volatile
 17708                           
 17709                           ; BSR set to: 0
 17710  000C66  868B               	bsf	3979,3,c	;volatile
 17711                           
 17712                           ;libraries/lcd_highlevel.c: 916:           }
 17713  000C68  4BC4               	infsnz	LCD_Bitmap@i& (0+255),f,b
 17714  000C6A  2BC5               	incf	(LCD_Bitmap@i+1)& (0+255),f,b
 17715  000C6C                     l6332:
 17716                           
 17717                           ; BSR set to: 0
 17718  000C6C  51AF               	movf	LCD_Bitmap@jumpCount& (0+255),w,b
 17719  000C6E  5DC4               	subwf	LCD_Bitmap@i& (0+255),w,b
 17720  000C70  51B0               	movf	(LCD_Bitmap@jumpCount+1)& (0+255),w,b
 17721  000C72  59C5               	subwfb	(LCD_Bitmap@i+1)& (0+255),w,b
 17722  000C74  A0D8               	btfss	status,0,c
 17723  000C76  D7EE               	goto	l6318
 17724                           
 17725                           ; BSR set to: 0
 17726                           ;libraries/lcd_highlevel.c: 917:           curYPos = curYPos + (jumpCount / biWidth);
 17727  000C78  C0AF  F020         	movff	LCD_Bitmap@jumpCount,___lwdiv@dividend
 17728  000C7C  C0B0  F021         	movff	LCD_Bitmap@jumpCount+1,___lwdiv@dividend+1
 17729  000C80  C0C0  F022         	movff	LCD_Bitmap@biWidth,___lwdiv@divisor
 17730  000C84  C0C1  F023         	movff	LCD_Bitmap@biWidth+1,___lwdiv@divisor+1
 17731  000C88  EC16  F02A         	call	___lwdiv	;wreg free
 17732  000C8C  0100               	movlb	0	; () banked
 17733  000C8E  51B1               	movf	LCD_Bitmap@curYPos& (0+255),w,b
 17734  000C90  2420               	addwf	?___lwdiv^0,w,c
 17735  000C92  6FB1               	movwf	LCD_Bitmap@curYPos& (0+255),b
 17736  000C94  51B2               	movf	(LCD_Bitmap@curYPos+1)& (0+255),w,b
 17737  000C96  2021               	addwfc	(?___lwdiv+1)^0,w,c
 17738  000C98  6FB2               	movwf	(LCD_Bitmap@curYPos+1)& (0+255),b
 17739                           
 17740                           ;libraries/lcd_highlevel.c: 918:           curXPos = curXPos % biWidth;
 17741  000C9A  C0B7  F012         	movff	LCD_Bitmap@curXPos,___lwmod@dividend
 17742  000C9E  C0B8  F013         	movff	LCD_Bitmap@curXPos+1,___lwmod@dividend+1
 17743  000CA2  C0C0  F014         	movff	LCD_Bitmap@biWidth,___lwmod@divisor
 17744  000CA6  C0C1  F015         	movff	LCD_Bitmap@biWidth+1,___lwmod@divisor+1
 17745  000CAA  EC19  F02B         	call	___lwmod	;wreg free
 17746  000CAE  C012  F0B7         	movff	?___lwmod,LCD_Bitmap@curXPos
 17747  000CB2  C013  F0B8         	movff	?___lwmod+1,LCD_Bitmap@curXPos+1
 17748                           
 17749                           ; BSR set to: 0
 17750                           ;libraries/lcd_highlevel.c: 919:           bmpPtr += 4;
 17751  000CB6  0E04               	movlw	4
 17752  000CB8  D0B9               	goto	L12
 17753  000CBA                     l6338:
 17754                           
 17755                           ; BSR set to: 0
 17756                           ;libraries/lcd_highlevel.c: 922:           pixelCount = bmpPtr[1];
 17757  000CBA  0E01               	movlw	1
 17758  000CBC  2427               	addwf	LCD_Bitmap@bmpPtr^0,w,c
 17759  000CBE  6E2D               	movwf	??_LCD_Bitmap^0,c
 17760  000CC0  0E00               	movlw	0
 17761  000CC2  2028               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,w,c
 17762  000CC4  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17763  000CC6  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 17764  000CCA  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 17765  000CCE                     	if	0	;tblptru may be non-zero
 17766  000CCE                     	endif
 17767  000CCE                     	if	0	;tblptru may be non-zero
 17768  000CCE                     	endif
 17769  000CCE  0008               	tblrd		*
 17770  000CD0  CFF5 F0BF          	movff	tablat,LCD_Bitmap@pixelCount
 17771                           
 17772                           ; BSR set to: 0
 17773                           ;libraries/lcd_highlevel.c: 923:           for(i=0;i < pixelCount;i++)
 17774  000CD4  0E00               	movlw	0
 17775  000CD6  6FC5               	movwf	(LCD_Bitmap@i+1)& (0+255),b
 17776  000CD8  0E00               	movlw	0
 17777  000CDA  6FC4               	movwf	LCD_Bitmap@i& (0+255),b
 17778  000CDC  D02D               	goto	l6360
 17779  000CDE                     l6342:
 17780                           
 17781                           ; BSR set to: 0
 17782                           ;libraries/lcd_highlevel.c: 924:           {;libraries/lcd_highlevel.c: 925:            
      +                           color = RGB2LCD(colorTablePtr+(bmpPtr[2+i]*4));
 17783  000CDE  51C4               	movf	LCD_Bitmap@i& (0+255),w,b
 17784  000CE0  2427               	addwf	LCD_Bitmap@bmpPtr^0,w,c
 17785  000CE2  6E2D               	movwf	??_LCD_Bitmap^0,c
 17786  000CE4  51C5               	movf	(LCD_Bitmap@i+1)& (0+255),w,b
 17787  000CE6  2028               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,w,c
 17788  000CE8  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17789  000CEA  0E02               	movlw	2
 17790  000CEC  262D               	addwf	??_LCD_Bitmap^0,f,c
 17791  000CEE  0E00               	movlw	0
 17792  000CF0  222E               	addwfc	(??_LCD_Bitmap+1)^0,f,c
 17793  000CF2  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 17794  000CF6  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 17795  000CFA                     	if	0	;tblptru may be non-zero
 17796  000CFA                     	endif
 17797  000CFA                     	if	0	;tblptru may be non-zero
 17798  000CFA                     	endif
 17799  000CFA  0008               	tblrd		*
 17800  000CFC  50F5               	movf	tablat,w,c
 17801  000CFE  0D04               	mullw	4
 17802  000D00  CFF3 F02F          	movff	prodl,??_LCD_Bitmap+2
 17803  000D04  CFF4 F030          	movff	prodh,??_LCD_Bitmap+3
 17804  000D08  502F               	movf	(??_LCD_Bitmap+2)^0,w,c
 17805  000D0A  25B3               	addwf	LCD_Bitmap@colorTablePtr& (0+255),w,b
 17806  000D0C  6E12               	movwf	RGB2LCD@colorTableEntry^0,c
 17807  000D0E  5030               	movf	(??_LCD_Bitmap+3)^0,w,c
 17808  000D10  21B4               	addwfc	(LCD_Bitmap@colorTablePtr+1)& (0+255),w,b
 17809  000D12  6E13               	movwf	(RGB2LCD@colorTableEntry+1)^0,c
 17810  000D14  ECE3  F023         	call	_RGB2LCD	;wreg free
 17811  000D18  C012  F0B9         	movff	?_RGB2LCD,LCD_Bitmap@color
 17812  000D1C  C013  F0BA         	movff	?_RGB2LCD+1,LCD_Bitmap@color+1
 17813                           
 17814                           ; BSR set to: 0
 17815                           ;libraries/lcd_highlevel.c: 926:             curXPos++;
 17816  000D20  4BB7               	infsnz	LCD_Bitmap@curXPos& (0+255),f,b
 17817  000D22  2BB8               	incf	(LCD_Bitmap@curXPos+1)& (0+255),f,b
 17818                           
 17819                           ; BSR set to: 0
 17820                           ;libraries/lcd_highlevel.c: 927:             PORTA = color >> 8; LATC3 = 0; LATC3 = 1;;
 17821  000D24  C0BA  FF80         	movff	LCD_Bitmap@color+1,3968	;volatile
 17822                           
 17823                           ; BSR set to: 0
 17824  000D28  968B               	bcf	3979,3,c	;volatile
 17825                           
 17826                           ; BSR set to: 0
 17827  000D2A  868B               	bsf	3979,3,c	;volatile
 17828                           
 17829                           ; BSR set to: 0
 17830                           ;libraries/lcd_highlevel.c: 928:             PORTA = color; LATC3 = 0; LATC3 = 1;;
 17831  000D2C  C0B9  FF80         	movff	LCD_Bitmap@color,3968	;volatile
 17832                           
 17833                           ; BSR set to: 0
 17834  000D30  968B               	bcf	3979,3,c	;volatile
 17835                           
 17836                           ; BSR set to: 0
 17837  000D32  868B               	bsf	3979,3,c	;volatile
 17838                           
 17839                           ; BSR set to: 0
 17840                           ;libraries/lcd_highlevel.c: 929:           }
 17841  000D34  4BC4               	infsnz	LCD_Bitmap@i& (0+255),f,b
 17842  000D36  2BC5               	incf	(LCD_Bitmap@i+1)& (0+255),f,b
 17843  000D38                     l6360:
 17844                           
 17845                           ; BSR set to: 0
 17846  000D38  51BF               	movf	LCD_Bitmap@pixelCount& (0+255),w,b
 17847  000D3A  6E2D               	movwf	??_LCD_Bitmap^0,c
 17848  000D3C  6A2E               	clrf	(??_LCD_Bitmap+1)^0,c
 17849  000D3E  502D               	movf	??_LCD_Bitmap^0,w,c
 17850  000D40  5DC4               	subwf	LCD_Bitmap@i& (0+255),w,b
 17851  000D42  502E               	movf	(??_LCD_Bitmap+1)^0,w,c
 17852  000D44  59C5               	subwfb	(LCD_Bitmap@i+1)& (0+255),w,b
 17853  000D46  A0D8               	btfss	status,0,c
 17854  000D48  D7CA               	goto	l6342
 17855                           
 17856                           ; BSR set to: 0
 17857                           ;libraries/lcd_highlevel.c: 930:           if(pixelCount < 255)
 17858  000D4A  29BF               	incf	LCD_Bitmap@pixelCount& (0+255),w,b
 17859  000D4C  B4D8               	btfsc	status,2,c
 17860  000D4E  D00E               	goto	l6366
 17861                           
 17862                           ; BSR set to: 0
 17863                           ;libraries/lcd_highlevel.c: 931:           {;libraries/lcd_highlevel.c: 932:            
      +                           pixelCount = (pixelCount+1) & 0xFE;
 17864  000D50  29BF               	incf	LCD_Bitmap@pixelCount& (0+255),w,b
 17865  000D52  0BFE               	andlw	254
 17866  000D54  6FBF               	movwf	LCD_Bitmap@pixelCount& (0+255),b
 17867                           
 17868                           ;libraries/lcd_highlevel.c: 933:             bmpPtr+=pixelCount+2;
 17869  000D56  51BF               	movf	LCD_Bitmap@pixelCount& (0+255),w,b
 17870  000D58  6E2D               	movwf	??_LCD_Bitmap^0,c
 17871  000D5A  6A2E               	clrf	(??_LCD_Bitmap+1)^0,c
 17872  000D5C  0E02               	movlw	2
 17873  000D5E  262D               	addwf	??_LCD_Bitmap^0,f,c
 17874  000D60  0E00               	movlw	0
 17875  000D62  222E               	addwfc	(??_LCD_Bitmap+1)^0,f,c
 17876  000D64  502D               	movf	??_LCD_Bitmap^0,w,c
 17877  000D66  2627               	addwf	LCD_Bitmap@bmpPtr^0,f,c
 17878  000D68  502E               	movf	(??_LCD_Bitmap+1)^0,w,c
 17879  000D6A  D062               	goto	L13
 17880  000D6C                     l6366:
 17881                           
 17882                           ; BSR set to: 0
 17883                           ;libraries/lcd_highlevel.c: 936:           {;libraries/lcd_highlevel.c: 937:            
      +                             bmpPtr += 258;
 17884  000D6C  0E02               	movlw	2
 17885  000D6E  2627               	addwf	LCD_Bitmap@bmpPtr^0,f,c
 17886  000D70  0E01               	movlw	1
 17887  000D72  D05E               	goto	L13
 17888  000D74                     l6370:
 17889                           
 17890                           ; BSR set to: 0
 17891  000D74  0E01               	movlw	1
 17892  000D76  2427               	addwf	LCD_Bitmap@bmpPtr^0,w,c
 17893  000D78  6E2D               	movwf	??_LCD_Bitmap^0,c
 17894  000D7A  0E00               	movlw	0
 17895  000D7C  2028               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,w,c
 17896  000D7E  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17897  000D80  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 17898  000D84  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 17899  000D88                     	if	0	;tblptru may be non-zero
 17900  000D88                     	endif
 17901  000D88                     	if	0	;tblptru may be non-zero
 17902  000D88                     	endif
 17903  000D88  0008               	tblrd		*
 17904  000D8A  50F5               	movf	tablat,w,c
 17905  000D8C  6E2F               	movwf	(??_LCD_Bitmap+2)^0,c
 17906  000D8E  6A30               	clrf	(??_LCD_Bitmap+3)^0,c
 17907                           
 17908                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17909                           ; Switch size 1, requested type "simple"
 17910                           ; Number of cases is 1, Range of values is 0 to 0
 17911                           ; switch strategies available:
 17912                           ; Name         Instructions Cycles
 17913                           ; simple_byte            4     3 (average)
 17914                           ;	Chosen strategy is simple_byte
 17915  000D90  5030               	movf	(??_LCD_Bitmap+3)^0,w,c
 17916  000D92  0A00               	xorlw	0	; case 0
 17917  000D94  A4D8               	btfss	status,2,c
 17918  000D96  D791               	goto	l6338
 17919                           
 17920                           ; BSR set to: 0
 17921                           ; Switch size 1, requested type "simple"
 17922                           ; Number of cases is 3, Range of values is 0 to 2
 17923                           ; switch strategies available:
 17924                           ; Name         Instructions Cycles
 17925                           ; simple_byte           10     6 (average)
 17926                           ;	Chosen strategy is simple_byte
 17927  000D98  502F               	movf	(??_LCD_Bitmap+2)^0,w,c
 17928  000D9A  0A00               	xorlw	0	; case 0
 17929  000D9C  B4D8               	btfsc	status,2,c
 17930  000D9E  D6C3               	goto	l6288
 17931  000DA0  0A01               	xorlw	1	; case 1
 17932  000DA2  B4D8               	btfsc	status,2,c
 17933  000DA4  D6E6               	goto	l6300
 17934  000DA6  0A03               	xorlw	3	; case 2
 17935  000DA8  B4D8               	btfsc	status,2,c
 17936  000DAA  D729               	goto	l6314
 17937  000DAC  D786               	goto	l6338
 17938  000DAE                     l6372:
 17939                           
 17940                           ; BSR set to: 0
 17941                           ;libraries/lcd_highlevel.c: 943:     {;libraries/lcd_highlevel.c: 944:       pixelCount 
      +                          = bmpPtr[0];
 17942  000DAE  C027  FFF6         	movff	LCD_Bitmap@bmpPtr,tblptrl
 17943  000DB2  C028  FFF7         	movff	LCD_Bitmap@bmpPtr+1,tblptrh
 17944  000DB6                     	if	0	;tblptru may be non-zero
 17945  000DB6                     	endif
 17946  000DB6                     	if	0	;tblptru may be non-zero
 17947  000DB6                     	endif
 17948  000DB6  0008               	tblrd		*
 17949  000DB8  CFF5 F0BF          	movff	tablat,LCD_Bitmap@pixelCount
 17950                           
 17951                           ; BSR set to: 0
 17952                           ;libraries/lcd_highlevel.c: 945:       color = RGB2LCD(colorTablePtr+(bmpPtr[1]*4));
 17953  000DBC  0E01               	movlw	1
 17954  000DBE  2427               	addwf	LCD_Bitmap@bmpPtr^0,w,c
 17955  000DC0  6E2D               	movwf	??_LCD_Bitmap^0,c
 17956  000DC2  0E00               	movlw	0
 17957  000DC4  2028               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,w,c
 17958  000DC6  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17959  000DC8  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 17960  000DCC  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 17961  000DD0                     	if	0	;tblptru may be non-zero
 17962  000DD0                     	endif
 17963  000DD0                     	if	0	;tblptru may be non-zero
 17964  000DD0                     	endif
 17965  000DD0  0008               	tblrd		*
 17966  000DD2  50F5               	movf	tablat,w,c
 17967  000DD4  0D04               	mullw	4
 17968  000DD6  CFF3 F02F          	movff	prodl,??_LCD_Bitmap+2
 17969  000DDA  CFF4 F030          	movff	prodh,??_LCD_Bitmap+3
 17970  000DDE  502F               	movf	(??_LCD_Bitmap+2)^0,w,c
 17971  000DE0  25B3               	addwf	LCD_Bitmap@colorTablePtr& (0+255),w,b
 17972  000DE2  6E12               	movwf	RGB2LCD@colorTableEntry^0,c
 17973  000DE4  5030               	movf	(??_LCD_Bitmap+3)^0,w,c
 17974  000DE6  21B4               	addwfc	(LCD_Bitmap@colorTablePtr+1)& (0+255),w,b
 17975  000DE8  6E13               	movwf	(RGB2LCD@colorTableEntry+1)^0,c
 17976  000DEA  ECE3  F023         	call	_RGB2LCD	;wreg free
 17977  000DEE  C012  F0B9         	movff	?_RGB2LCD,LCD_Bitmap@color
 17978  000DF2  C013  F0BA         	movff	?_RGB2LCD+1,LCD_Bitmap@color+1
 17979                           
 17980                           ; BSR set to: 0
 17981                           ;libraries/lcd_highlevel.c: 946:       for(i=0;i < pixelCount;i++)
 17982  000DF6  0E00               	movlw	0
 17983  000DF8  6FC5               	movwf	(LCD_Bitmap@i+1)& (0+255),b
 17984  000DFA  0E00               	movlw	0
 17985  000DFC  6FC4               	movwf	LCD_Bitmap@i& (0+255),b
 17986  000DFE  D00C               	goto	l6392
 17987  000E00                     l6378:
 17988                           
 17989                           ; BSR set to: 0
 17990                           ;libraries/lcd_highlevel.c: 947:       {;libraries/lcd_highlevel.c: 948:         curXPos
      +                          ++;
 17991  000E00  4BB7               	infsnz	LCD_Bitmap@curXPos& (0+255),f,b
 17992  000E02  2BB8               	incf	(LCD_Bitmap@curXPos+1)& (0+255),f,b
 17993                           
 17994                           ; BSR set to: 0
 17995                           ;libraries/lcd_highlevel.c: 949:         PORTA = color >> 8; LATC3 = 0; LATC3 = 1;;
 17996  000E04  C0BA  FF80         	movff	LCD_Bitmap@color+1,3968	;volatile
 17997                           
 17998                           ; BSR set to: 0
 17999  000E08  968B               	bcf	3979,3,c	;volatile
 18000                           
 18001                           ; BSR set to: 0
 18002  000E0A  868B               	bsf	3979,3,c	;volatile
 18003                           
 18004                           ; BSR set to: 0
 18005                           ;libraries/lcd_highlevel.c: 950:         PORTA = color; LATC3 = 0; LATC3 = 1;;
 18006  000E0C  C0B9  FF80         	movff	LCD_Bitmap@color,3968	;volatile
 18007                           
 18008                           ; BSR set to: 0
 18009  000E10  968B               	bcf	3979,3,c	;volatile
 18010                           
 18011                           ; BSR set to: 0
 18012  000E12  868B               	bsf	3979,3,c	;volatile
 18013                           
 18014                           ;libraries/lcd_highlevel.c: 951:       }
 18015  000E14  4BC4               	infsnz	LCD_Bitmap@i& (0+255),f,b
 18016  000E16  2BC5               	incf	(LCD_Bitmap@i+1)& (0+255),f,b
 18017  000E18                     l6392:
 18018                           
 18019                           ; BSR set to: 0
 18020  000E18  51BF               	movf	LCD_Bitmap@pixelCount& (0+255),w,b
 18021  000E1A  6E2D               	movwf	??_LCD_Bitmap^0,c
 18022  000E1C  6A2E               	clrf	(??_LCD_Bitmap+1)^0,c
 18023  000E1E  502D               	movf	??_LCD_Bitmap^0,w,c
 18024  000E20  5DC4               	subwf	LCD_Bitmap@i& (0+255),w,b
 18025  000E22  502E               	movf	(??_LCD_Bitmap+1)^0,w,c
 18026  000E24  59C5               	subwfb	(LCD_Bitmap@i+1)& (0+255),w,b
 18027  000E26  A0D8               	btfss	status,0,c
 18028  000E28  D7EB               	goto	l6378
 18029                           
 18030                           ; BSR set to: 0
 18031                           ;libraries/lcd_highlevel.c: 952:       bmpPtr+=2;
 18032  000E2A  0E02               	movlw	2
 18033  000E2C                     L12:
 18034  000E2C  2627               	addwf	LCD_Bitmap@bmpPtr^0,f,c
 18035  000E2E  0E00               	movlw	0
 18036  000E30                     L13:
 18037  000E30  2228               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,f,c
 18038  000E32                     l6396:
 18039                           
 18040                           ; BSR set to: 0
 18041                           ;libraries/lcd_highlevel.c: 954:   }while(endOfImage == 0);
 18042  000E32  51AE               	movf	LCD_Bitmap@endOfImage& (0+255),w,b
 18043  000E34  B4D8               	btfsc	status,2,c
 18044  000E36  D66D               	goto	l6284
 18045                           
 18046                           ; BSR set to: 0
 18047                           ;libraries/lcd_highlevel.c: 955:   PORTA = 0x36; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
 18048  000E38  0E36               	movlw	54
 18049  000E3A  6E80               	movwf	128,c	;volatile
 18050                           
 18051                           ; BSR set to: 0
 18052  000E3C  988B               	bcf	3979,4,c	;volatile
 18053                           
 18054                           ; BSR set to: 0
 18055  000E3E  968B               	bcf	3979,3,c	;volatile
 18056                           
 18057                           ; BSR set to: 0
 18058  000E40  868B               	bsf	3979,3,c	;volatile
 18059                           
 18060                           ; BSR set to: 0
 18061  000E42  888B               	bsf	3979,4,c	;volatile
 18062                           
 18063                           ;libraries/lcd_highlevel.c: 957:   PORTA = 0b00000000; LATC3 = 0; LATC3 = 1;;
 18064  000E44  0E00               	movlw	0
 18065  000E46  6E80               	movwf	128,c	;volatile
 18066                           
 18067                           ; BSR set to: 0
 18068  000E48  968B               	bcf	3979,3,c	;volatile
 18069                           
 18070                           ; BSR set to: 0
 18071  000E4A  868B               	bsf	3979,3,c	;volatile
 18072                           
 18073                           ; BSR set to: 0
 18074  000E4C  0012               	return		;funcret
 18075  000E4E                     __end_of_LCD_Bitmap:
 18076                           	callstack 0
 18077                           
 18078 ;; *************** function ___wmul *****************
 18079 ;; Defined at:
 18080 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul16.c"
 18081 ;; Parameters:    Size  Location     Type
 18082 ;;  multiplier      2   25[COMRAM] unsigned int 
 18083 ;;  multiplicand    2   27[COMRAM] unsigned int 
 18084 ;; Auto vars:     Size  Location     Type
 18085 ;;  product         2   29[COMRAM] unsigned int 
 18086 ;; Return value:  Size  Location     Type
 18087 ;;                  2   25[COMRAM] unsigned int 
 18088 ;; Registers used:
 18089 ;;		wreg, status,2, status,0, prodl, prodh
 18090 ;; Tracked objects:
 18091 ;;		On entry : 0/0
 18092 ;;		On exit  : 0/0
 18093 ;;		Unchanged: 0/0
 18094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18095 ;;      Params:         4       0       0       0       0       0       0
 18096 ;;      Locals:         2       0       0       0       0       0       0
 18097 ;;      Temps:          0       0       0       0       0       0       0
 18098 ;;      Totals:         6       0       0       0       0       0       0
 18099 ;;Total ram usage:        6 bytes
 18100 ;; Hardware stack levels used: 1
 18101 ;; Hardware stack levels required when called: 4
 18102 ;; This function calls:
 18103 ;;		Nothing
 18104 ;; This function is called by:
 18105 ;;		_LCD_SliderUpdate
 18106 ;;		_LCD_DrawText
 18107 ;;		_LCD_Bitmap
 18108 ;;		_touchScreenController
 18109 ;;		_XF_init
 18110 ;; This function uses a non-reentrant model
 18111 ;;
 18112                           
 18113                           	psect	text75
 18114  0058EA                     __ptext75:
 18115                           	callstack 0
 18116  0058EA                     ___wmul:
 18117                           	callstack 21
 18118                           
 18119                           ; BSR set to: 0
 18120                           ;incstack = 0
 18121  0058EA  501A               	movf	___wmul@multiplier^0,w,c
 18122  0058EC  021C               	mulwf	___wmul@multiplicand^0,c
 18123  0058EE  CFF3 F01E          	movff	prodl,___wmul@product
 18124  0058F2  CFF4 F01F          	movff	prodh,___wmul@product+1
 18125  0058F6  501A               	movf	___wmul@multiplier^0,w,c
 18126  0058F8  021D               	mulwf	(___wmul@multiplicand+1)^0,c
 18127  0058FA  50F3               	movf	243,w,c
 18128  0058FC  261F               	addwf	(___wmul@product+1)^0,f,c
 18129  0058FE  501B               	movf	(___wmul@multiplier+1)^0,w,c
 18130  005900  021C               	mulwf	___wmul@multiplicand^0,c
 18131  005902  50F3               	movf	243,w,c
 18132  005904  261F               	addwf	(___wmul@product+1)^0,f,c
 18133  005906  C01E  F01A         	movff	___wmul@product,?___wmul
 18134  00590A  C01F  F01B         	movff	___wmul@product+1,?___wmul+1
 18135  00590E  0012               	return		;funcret
 18136  005910                     __end_of___wmul:
 18137                           	callstack 0
 18138                           
 18139 ;; *************** function ___lwmod *****************
 18140 ;; Defined at:
 18141 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lwmod.c"
 18142 ;; Parameters:    Size  Location     Type
 18143 ;;  dividend        2   17[COMRAM] unsigned int 
 18144 ;;  divisor         2   19[COMRAM] unsigned int 
 18145 ;; Auto vars:     Size  Location     Type
 18146 ;;  counter         1   21[COMRAM] unsigned char 
 18147 ;; Return value:  Size  Location     Type
 18148 ;;                  2   17[COMRAM] unsigned int 
 18149 ;; Registers used:
 18150 ;;		wreg, status,2, status,0
 18151 ;; Tracked objects:
 18152 ;;		On entry : 3F/0
 18153 ;;		On exit  : 3F/0
 18154 ;;		Unchanged: 3F/0
 18155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18156 ;;      Params:         4       0       0       0       0       0       0
 18157 ;;      Locals:         1       0       0       0       0       0       0
 18158 ;;      Temps:          0       0       0       0       0       0       0
 18159 ;;      Totals:         5       0       0       0       0       0       0
 18160 ;;Total ram usage:        5 bytes
 18161 ;; Hardware stack levels used: 1
 18162 ;; Hardware stack levels required when called: 4
 18163 ;; This function calls:
 18164 ;;		Nothing
 18165 ;; This function is called by:
 18166 ;;		_LCD_Bitmap
 18167 ;; This function uses a non-reentrant model
 18168 ;;
 18169                           
 18170                           	psect	text76
 18171  005632                     __ptext76:
 18172                           	callstack 0
 18173  005632                     ___lwmod:
 18174                           	callstack 19
 18175                           
 18176                           ; BSR set to: 0
 18177                           
 18178                           ;incstack = 0
 18179  005632  5014               	movf	___lwmod@divisor^0,w,c
 18180  005634  1015               	iorwf	(___lwmod@divisor+1)^0,w,c
 18181  005636  B4D8               	btfsc	status,2,c
 18182  005638  D018               	goto	l1375
 18183                           
 18184                           ; BSR set to: 0
 18185  00563A  0E01               	movlw	1
 18186  00563C  6E16               	movwf	___lwmod@counter^0,c
 18187  00563E  D004               	goto	l5900
 18188  005640                     l5898:
 18189                           
 18190                           ; BSR set to: 0
 18191  005640  90D8               	bcf	status,0,c
 18192  005642  3614               	rlcf	___lwmod@divisor^0,f,c
 18193  005644  3615               	rlcf	(___lwmod@divisor+1)^0,f,c
 18194  005646  2A16               	incf	___lwmod@counter^0,f,c
 18195  005648                     l5900:
 18196                           
 18197                           ; BSR set to: 0
 18198  005648  AE15               	btfss	(___lwmod@divisor+1)^0,7,c
 18199  00564A  D7FA               	goto	l5898
 18200  00564C                     u3600:
 18201                           
 18202                           ; BSR set to: 0
 18203  00564C  5014               	movf	___lwmod@divisor^0,w,c
 18204  00564E  5C12               	subwf	___lwmod@dividend^0,w,c
 18205  005650  5015               	movf	(___lwmod@divisor+1)^0,w,c
 18206  005652  5813               	subwfb	(___lwmod@dividend+1)^0,w,c
 18207  005654  A0D8               	btfss	status,0,c
 18208  005656  D004               	goto	l5906
 18209                           
 18210                           ; BSR set to: 0
 18211  005658  5014               	movf	___lwmod@divisor^0,w,c
 18212  00565A  5E12               	subwf	___lwmod@dividend^0,f,c
 18213  00565C  5015               	movf	(___lwmod@divisor+1)^0,w,c
 18214  00565E  5A13               	subwfb	(___lwmod@dividend+1)^0,f,c
 18215  005660                     l5906:
 18216                           
 18217                           ; BSR set to: 0
 18218  005660  90D8               	bcf	status,0,c
 18219  005662  3215               	rrcf	(___lwmod@divisor+1)^0,f,c
 18220  005664  3214               	rrcf	___lwmod@divisor^0,f,c
 18221                           
 18222                           ; BSR set to: 0
 18223  005666  2E16               	decfsz	___lwmod@counter^0,f,c
 18224  005668  D7F1               	goto	u3600
 18225  00566A                     l1375:
 18226                           
 18227                           ; BSR set to: 0
 18228  00566A  C012  F012         	movff	___lwmod@dividend,?___lwmod
 18229  00566E  C013  F013         	movff	___lwmod@dividend+1,?___lwmod+1
 18230                           
 18231                           ; BSR set to: 0
 18232  005672  0012               	return		;funcret
 18233  005674                     __end_of___lwmod:
 18234                           	callstack 0
 18235                           
 18236 ;; *************** function ___lwdiv *****************
 18237 ;; Defined at:
 18238 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lwdiv.c"
 18239 ;; Parameters:    Size  Location     Type
 18240 ;;  dividend        2   31[COMRAM] unsigned int 
 18241 ;;  divisor         2   33[COMRAM] unsigned int 
 18242 ;; Auto vars:     Size  Location     Type
 18243 ;;  quotient        2   35[COMRAM] unsigned int 
 18244 ;;  counter         1   37[COMRAM] unsigned char 
 18245 ;; Return value:  Size  Location     Type
 18246 ;;                  2   31[COMRAM] unsigned int 
 18247 ;; Registers used:
 18248 ;;		wreg, status,2, status,0
 18249 ;; Tracked objects:
 18250 ;;		On entry : 0/0
 18251 ;;		On exit  : 0/0
 18252 ;;		Unchanged: 0/0
 18253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18254 ;;      Params:         4       0       0       0       0       0       0
 18255 ;;      Locals:         3       0       0       0       0       0       0
 18256 ;;      Temps:          0       0       0       0       0       0       0
 18257 ;;      Totals:         7       0       0       0       0       0       0
 18258 ;;Total ram usage:        7 bytes
 18259 ;; Hardware stack levels used: 1
 18260 ;; Hardware stack levels required when called: 4
 18261 ;; This function calls:
 18262 ;;		Nothing
 18263 ;; This function is called by:
 18264 ;;		_LCD_SliderUpdate
 18265 ;;		_LCD_Bitmap
 18266 ;; This function uses a non-reentrant model
 18267 ;;
 18268                           
 18269                           	psect	text77
 18270  00542C                     __ptext77:
 18271                           	callstack 0
 18272  00542C                     ___lwdiv:
 18273                           	callstack 21
 18274                           
 18275                           ; BSR set to: 0
 18276                           ;incstack = 0
 18277  00542C  0E00               	movlw	0
 18278  00542E  6E25               	movwf	(___lwdiv@quotient+1)^0,c
 18279  005430  0E00               	movlw	0
 18280  005432  6E24               	movwf	___lwdiv@quotient^0,c
 18281  005434  5022               	movf	___lwdiv@divisor^0,w,c
 18282  005436  1023               	iorwf	(___lwdiv@divisor+1)^0,w,c
 18283  005438  B4D8               	btfsc	status,2,c
 18284  00543A  D01C               	goto	l1365
 18285  00543C  0E01               	movlw	1
 18286  00543E  6E26               	movwf	___lwdiv@counter^0,c
 18287  005440  D004               	goto	l5880
 18288  005442                     l5878:
 18289  005442  90D8               	bcf	status,0,c
 18290  005444  3622               	rlcf	___lwdiv@divisor^0,f,c
 18291  005446  3623               	rlcf	(___lwdiv@divisor+1)^0,f,c
 18292  005448  2A26               	incf	___lwdiv@counter^0,f,c
 18293  00544A                     l5880:
 18294  00544A  AE23               	btfss	(___lwdiv@divisor+1)^0,7,c
 18295  00544C  D7FA               	goto	l5878
 18296  00544E                     u3570:
 18297  00544E  90D8               	bcf	status,0,c
 18298  005450  3624               	rlcf	___lwdiv@quotient^0,f,c
 18299  005452  3625               	rlcf	(___lwdiv@quotient+1)^0,f,c
 18300  005454  5022               	movf	___lwdiv@divisor^0,w,c
 18301  005456  5C20               	subwf	___lwdiv@dividend^0,w,c
 18302  005458  5023               	movf	(___lwdiv@divisor+1)^0,w,c
 18303  00545A  5821               	subwfb	(___lwdiv@dividend+1)^0,w,c
 18304  00545C  A0D8               	btfss	status,0,c
 18305  00545E  D005               	goto	l5890
 18306  005460  5022               	movf	___lwdiv@divisor^0,w,c
 18307  005462  5E20               	subwf	___lwdiv@dividend^0,f,c
 18308  005464  5023               	movf	(___lwdiv@divisor+1)^0,w,c
 18309  005466  5A21               	subwfb	(___lwdiv@dividend+1)^0,f,c
 18310  005468  8024               	bsf	___lwdiv@quotient^0,0,c
 18311  00546A                     l5890:
 18312  00546A  90D8               	bcf	status,0,c
 18313  00546C  3223               	rrcf	(___lwdiv@divisor+1)^0,f,c
 18314  00546E  3222               	rrcf	___lwdiv@divisor^0,f,c
 18315  005470  2E26               	decfsz	___lwdiv@counter^0,f,c
 18316  005472  D7ED               	goto	u3570
 18317  005474                     l1365:
 18318  005474  C024  F020         	movff	___lwdiv@quotient,?___lwdiv
 18319  005478  C025  F021         	movff	___lwdiv@quotient+1,?___lwdiv+1
 18320  00547C  0012               	return		;funcret
 18321  00547E                     __end_of___lwdiv:
 18322                           	callstack 0
 18323                           
 18324 ;; *************** function _RGB2LCD *****************
 18325 ;; Defined at:
 18326 ;;		line 799 in file "libraries/lcd_highlevel.c"
 18327 ;; Parameters:    Size  Location     Type
 18328 ;;  colorTableEn    2   17[COMRAM] PTR unsigned char 
 18329 ;;		 -> STR_9(9), STR_8(2), STR_7(9), STR_6(11), 
 18330 ;;		 -> STR_5(9), STR_4(9), 
 18331 ;; Auto vars:     Size  Location     Type
 18332 ;;  color           2   29[COMRAM] unsigned short 
 18333 ;;  blue            2   27[COMRAM] unsigned short 
 18334 ;;  green           2   25[COMRAM] unsigned short 
 18335 ;;  red             2   23[COMRAM] unsigned short 
 18336 ;; Return value:  Size  Location     Type
 18337 ;;                  2   17[COMRAM] unsigned short 
 18338 ;; Registers used:
 18339 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 18340 ;; Tracked objects:
 18341 ;;		On entry : 3F/0
 18342 ;;		On exit  : 3F/0
 18343 ;;		Unchanged: 3F/0
 18344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18345 ;;      Params:         2       0       0       0       0       0       0
 18346 ;;      Locals:         8       0       0       0       0       0       0
 18347 ;;      Temps:          4       0       0       0       0       0       0
 18348 ;;      Totals:        14       0       0       0       0       0       0
 18349 ;;Total ram usage:       14 bytes
 18350 ;; Hardware stack levels used: 1
 18351 ;; Hardware stack levels required when called: 4
 18352 ;; This function calls:
 18353 ;;		Nothing
 18354 ;; This function is called by:
 18355 ;;		_LCD_Bitmap
 18356 ;; This function uses a non-reentrant model
 18357 ;;
 18358                           
 18359                           	psect	text78
 18360  0047C6                     __ptext78:
 18361                           	callstack 0
 18362  0047C6                     _RGB2LCD:
 18363                           	callstack 19
 18364                           
 18365                           ; BSR set to: 0
 18366                           ;libraries/lcd_highlevel.c: 799: uint16_t RGB2LCD(uint8_t * colorTableEntry);libraries/l
      +                          cd_highlevel.c: 800: {;libraries/lcd_highlevel.c: 801:     uint16_t red,green,blue;;libr
      +                          aries/lcd_highlevel.c: 802:     uint16_t color;;libraries/lcd_highlevel.c: 804:     red 
      +                          = colorTableEntry[2] >> 3;
 18367                           
 18368                           ;incstack = 0
 18369  0047C6  0E02               	movlw	2
 18370  0047C8  2412               	addwf	RGB2LCD@colorTableEntry^0,w,c
 18371  0047CA  6E14               	movwf	??_RGB2LCD^0,c
 18372  0047CC  0E00               	movlw	0
 18373  0047CE  2013               	addwfc	(RGB2LCD@colorTableEntry+1)^0,w,c
 18374  0047D0  6E15               	movwf	(??_RGB2LCD+1)^0,c
 18375  0047D2  C014  FFF6         	movff	??_RGB2LCD,tblptrl
 18376  0047D6  C015  FFF7         	movff	??_RGB2LCD+1,tblptrh
 18377  0047DA                     	if	0	;tblptru may be non-zero
 18378  0047DA                     	endif
 18379  0047DA                     	if	0	;tblptru may be non-zero
 18380  0047DA                     	endif
 18381  0047DA  0008               	tblrd		*
 18382  0047DC  CFF5 F016          	movff	tablat,??_RGB2LCD+2
 18383  0047E0  90D8               	bcf	status,0,c
 18384  0047E2  3216               	rrcf	(??_RGB2LCD+2)^0,f,c
 18385  0047E4  90D8               	bcf	status,0,c
 18386  0047E6  3216               	rrcf	(??_RGB2LCD+2)^0,f,c
 18387  0047E8  90D8               	bcf	status,0,c
 18388  0047EA  3216               	rrcf	(??_RGB2LCD+2)^0,f,c
 18389  0047EC  5016               	movf	(??_RGB2LCD+2)^0,w,c
 18390  0047EE  6E18               	movwf	RGB2LCD@red^0,c
 18391  0047F0  6A19               	clrf	(RGB2LCD@red+1)^0,c
 18392                           
 18393                           ;libraries/lcd_highlevel.c: 805:     green = colorTableEntry[1] >> 2;
 18394  0047F2  0E01               	movlw	1
 18395  0047F4  2412               	addwf	RGB2LCD@colorTableEntry^0,w,c
 18396  0047F6  6E14               	movwf	??_RGB2LCD^0,c
 18397  0047F8  0E00               	movlw	0
 18398  0047FA  2013               	addwfc	(RGB2LCD@colorTableEntry+1)^0,w,c
 18399  0047FC  6E15               	movwf	(??_RGB2LCD+1)^0,c
 18400  0047FE  C014  FFF6         	movff	??_RGB2LCD,tblptrl
 18401  004802  C015  FFF7         	movff	??_RGB2LCD+1,tblptrh
 18402  004806                     	if	0	;tblptru may be non-zero
 18403  004806                     	endif
 18404  004806                     	if	0	;tblptru may be non-zero
 18405  004806                     	endif
 18406  004806  0008               	tblrd		*
 18407  004808  CFF5 F016          	movff	tablat,??_RGB2LCD+2
 18408  00480C  90D8               	bcf	status,0,c
 18409  00480E  3216               	rrcf	(??_RGB2LCD+2)^0,f,c
 18410  004810  90D8               	bcf	status,0,c
 18411  004812  3216               	rrcf	(??_RGB2LCD+2)^0,f,c
 18412  004814  5016               	movf	(??_RGB2LCD+2)^0,w,c
 18413  004816  6E1A               	movwf	RGB2LCD@green^0,c
 18414  004818  6A1B               	clrf	(RGB2LCD@green+1)^0,c
 18415                           
 18416                           ;libraries/lcd_highlevel.c: 806:     blue = colorTableEntry[0] >> 3;
 18417  00481A  C012  FFF6         	movff	RGB2LCD@colorTableEntry,tblptrl
 18418  00481E  C013  FFF7         	movff	RGB2LCD@colorTableEntry+1,tblptrh
 18419  004822                     	if	0	;tblptru may be non-zero
 18420  004822                     	endif
 18421  004822                     	if	0	;tblptru may be non-zero
 18422  004822                     	endif
 18423  004822  0008               	tblrd		*
 18424  004824  CFF5 F014          	movff	tablat,??_RGB2LCD
 18425  004828  90D8               	bcf	status,0,c
 18426  00482A  3214               	rrcf	??_RGB2LCD^0,f,c
 18427  00482C  90D8               	bcf	status,0,c
 18428  00482E  3214               	rrcf	??_RGB2LCD^0,f,c
 18429  004830  90D8               	bcf	status,0,c
 18430  004832  3214               	rrcf	??_RGB2LCD^0,f,c
 18431  004834  5014               	movf	??_RGB2LCD^0,w,c
 18432  004836  6E1C               	movwf	RGB2LCD@blue^0,c
 18433  004838  6A1D               	clrf	(RGB2LCD@blue+1)^0,c
 18434                           
 18435                           ; BSR set to: 0
 18436                           ;libraries/lcd_highlevel.c: 807:     color = (red << 11) | (green << 5) | (blue << 0);
 18437  00483A  C01A  F014         	movff	RGB2LCD@green,??_RGB2LCD
 18438  00483E  C01B  F015         	movff	RGB2LCD@green+1,??_RGB2LCD+1
 18439  004842  0E05               	movlw	5
 18440  004844                     u3405:
 18441  004844  90D8               	bcf	status,0,c
 18442  004846  3614               	rlcf	??_RGB2LCD^0,f,c
 18443  004848  3615               	rlcf	(??_RGB2LCD+1)^0,f,c
 18444  00484A  2EE8               	decfsz	wreg,f,c
 18445  00484C  D7FB               	goto	u3405
 18446  00484E  C018  F016         	movff	RGB2LCD@red,??_RGB2LCD+2
 18447  004852  C019  F017         	movff	RGB2LCD@red+1,??_RGB2LCD+3
 18448  004856  0E0B               	movlw	11
 18449  004858                     u3415:
 18450  004858  90D8               	bcf	status,0,c
 18451  00485A  3616               	rlcf	(??_RGB2LCD+2)^0,f,c
 18452  00485C  3617               	rlcf	(??_RGB2LCD+3)^0,f,c
 18453  00485E  2EE8               	decfsz	wreg,f,c
 18454  004860  D7FB               	goto	u3415
 18455  004862  5014               	movf	??_RGB2LCD^0,w,c
 18456  004864  1216               	iorwf	(??_RGB2LCD+2)^0,f,c
 18457  004866  5015               	movf	(??_RGB2LCD+1)^0,w,c
 18458  004868  1217               	iorwf	(??_RGB2LCD+3)^0,f,c
 18459  00486A  501C               	movf	RGB2LCD@blue^0,w,c
 18460  00486C  1016               	iorwf	(??_RGB2LCD+2)^0,w,c
 18461  00486E  6E1E               	movwf	RGB2LCD@color^0,c
 18462  004870  501D               	movf	(RGB2LCD@blue+1)^0,w,c
 18463  004872  1017               	iorwf	(??_RGB2LCD+3)^0,w,c
 18464  004874  6E1F               	movwf	(RGB2LCD@color+1)^0,c
 18465                           
 18466                           ; BSR set to: 0
 18467                           ;libraries/lcd_highlevel.c: 808:     return color;
 18468  004876  C01E  F012         	movff	RGB2LCD@color,?_RGB2LCD
 18469  00487A  C01F  F013         	movff	RGB2LCD@color+1,?_RGB2LCD+1
 18470                           
 18471                           ; BSR set to: 0
 18472  00487E  0012               	return		;funcret
 18473  004880                     __end_of_RGB2LCD:
 18474                           	callstack 0
 18475                           
 18476 ;; *************** function _Ball_draw *****************
 18477 ;; Defined at:
 18478 ;;		line 27 in file "class/ball.c"
 18479 ;; Parameters:    Size  Location     Type
 18480 ;;  b               2   36[COMRAM] PTR struct Ball
 18481 ;;		 -> g1(240), 
 18482 ;; Auto vars:     Size  Location     Type
 18483 ;;		None
 18484 ;; Return value:  Size  Location     Type
 18485 ;;                  1    wreg      void 
 18486 ;; Registers used:
 18487 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 18488 ;; Tracked objects:
 18489 ;;		On entry : 3F/0
 18490 ;;		On exit  : 0/0
 18491 ;;		Unchanged: 0/0
 18492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18493 ;;      Params:         2       0       0       0       0       0       0
 18494 ;;      Locals:         0       0       0       0       0       0       0
 18495 ;;      Temps:          8       0       0       0       0       0       0
 18496 ;;      Totals:        10       0       0       0       0       0       0
 18497 ;;Total ram usage:       10 bytes
 18498 ;; Hardware stack levels used: 1
 18499 ;; Hardware stack levels required when called: 5
 18500 ;; This function calls:
 18501 ;;		_LCD_DrawRect
 18502 ;; This function is called by:
 18503 ;;		_Menu_inGameDraw
 18504 ;;		_displayController
 18505 ;; This function uses a non-reentrant model
 18506 ;;
 18507                           
 18508                           	psect	text79
 18509  003464                     __ptext79:
 18510                           	callstack 0
 18511  003464                     _Ball_draw:
 18512                           	callstack 21
 18513                           
 18514                           ; BSR set to: 0
 18515                           ;class/ball.c: 27: void Ball_draw(struct Ball* b);class/ball.c: 28: {;class/ball.c: 29: 
      +                              LCD_DrawRect(b->oldx-8,b->oldy-8,b->oldx+8,b->oldy+8,1,0b0000000000000000);
 18516                           
 18517                           ; BSR set to: 0
 18518                           ;incstack = 0
 18519  003464  EE20 F004          	lfsr	2,4
 18520  003468  5025               	movf	Ball_draw@b^0,w,c
 18521  00346A  26D9               	addwf	fsr2l,f,c
 18522  00346C  5026               	movf	(Ball_draw@b+1)^0,w,c
 18523  00346E  22DA               	addwfc	fsr2h,f,c
 18524  003470  CFDE F027          	movff	postinc2,??_Ball_draw
 18525  003474  CFDD F028          	movff	postdec2,??_Ball_draw+1
 18526  003478  0EF8               	movlw	248
 18527  00347A  2427               	addwf	??_Ball_draw^0,w,c
 18528  00347C  6E12               	movwf	LCD_DrawRect@posX1^0,c
 18529  00347E  0EFF               	movlw	255
 18530  003480  2028               	addwfc	(??_Ball_draw+1)^0,w,c
 18531  003482  6E13               	movwf	(LCD_DrawRect@posX1+1)^0,c
 18532  003484  EE20 F006          	lfsr	2,6
 18533  003488  5025               	movf	Ball_draw@b^0,w,c
 18534  00348A  26D9               	addwf	fsr2l,f,c
 18535  00348C  5026               	movf	(Ball_draw@b+1)^0,w,c
 18536  00348E  22DA               	addwfc	fsr2h,f,c
 18537  003490  CFDE F029          	movff	postinc2,??_Ball_draw+2
 18538  003494  CFDD F02A          	movff	postdec2,??_Ball_draw+3
 18539  003498  0EF8               	movlw	248
 18540  00349A  2429               	addwf	(??_Ball_draw+2)^0,w,c
 18541  00349C  6E14               	movwf	LCD_DrawRect@posY1^0,c
 18542  00349E  0EFF               	movlw	255
 18543  0034A0  202A               	addwfc	(??_Ball_draw+3)^0,w,c
 18544  0034A2  6E15               	movwf	(LCD_DrawRect@posY1+1)^0,c
 18545  0034A4  EE20 F004          	lfsr	2,4
 18546  0034A8  5025               	movf	Ball_draw@b^0,w,c
 18547  0034AA  26D9               	addwf	fsr2l,f,c
 18548  0034AC  5026               	movf	(Ball_draw@b+1)^0,w,c
 18549  0034AE  22DA               	addwfc	fsr2h,f,c
 18550  0034B0  CFDE F02B          	movff	postinc2,??_Ball_draw+4
 18551  0034B4  CFDD F02C          	movff	postdec2,??_Ball_draw+5
 18552  0034B8  0E08               	movlw	8
 18553  0034BA  242B               	addwf	(??_Ball_draw+4)^0,w,c
 18554  0034BC  6E16               	movwf	LCD_DrawRect@posX2^0,c
 18555  0034BE  0E00               	movlw	0
 18556  0034C0  202C               	addwfc	(??_Ball_draw+5)^0,w,c
 18557  0034C2  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 18558  0034C4  EE20 F006          	lfsr	2,6
 18559  0034C8  5025               	movf	Ball_draw@b^0,w,c
 18560  0034CA  26D9               	addwf	fsr2l,f,c
 18561  0034CC  5026               	movf	(Ball_draw@b+1)^0,w,c
 18562  0034CE  22DA               	addwfc	fsr2h,f,c
 18563  0034D0  CFDE F02D          	movff	postinc2,??_Ball_draw+6
 18564  0034D4  CFDD F02E          	movff	postdec2,??_Ball_draw+7
 18565  0034D8  0E08               	movlw	8
 18566  0034DA  242D               	addwf	(??_Ball_draw+6)^0,w,c
 18567  0034DC  6E18               	movwf	LCD_DrawRect@posY2^0,c
 18568  0034DE  0E00               	movlw	0
 18569  0034E0  202E               	addwfc	(??_Ball_draw+7)^0,w,c
 18570  0034E2  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 18571  0034E4  0E01               	movlw	1
 18572  0034E6  6E1A               	movwf	LCD_DrawRect@fill^0,c
 18573  0034E8  0E00               	movlw	0
 18574  0034EA  6E1C               	movwf	(LCD_DrawRect@color+1)^0,c
 18575  0034EC  0E00               	movlw	0
 18576  0034EE  6E1B               	movwf	LCD_DrawRect@color^0,c
 18577  0034F0  EC31  F013         	call	_LCD_DrawRect	;wreg free
 18578                           
 18579                           ;class/ball.c: 30:     b->oldx=b->x;
 18580  0034F4  C025  FFD9         	movff	Ball_draw@b,fsr2l
 18581  0034F8  C026  FFDA         	movff	Ball_draw@b+1,fsr2h
 18582  0034FC  EE10 F004          	lfsr	1,4
 18583  003500  5025               	movf	Ball_draw@b^0,w,c
 18584  003502  26E1               	addwf	fsr1l,f,c
 18585  003504  5026               	movf	(Ball_draw@b+1)^0,w,c
 18586  003506  22E2               	addwfc	fsr1h,f,c
 18587  003508  CFDE FFE6          	movff	postinc2,postinc1
 18588  00350C  CFDD FFE5          	movff	postdec2,postdec1
 18589                           
 18590                           ;class/ball.c: 31:     b->oldy=b->y;
 18591  003510  EE20 F002          	lfsr	2,2
 18592  003514  5025               	movf	Ball_draw@b^0,w,c
 18593  003516  26D9               	addwf	fsr2l,f,c
 18594  003518  5026               	movf	(Ball_draw@b+1)^0,w,c
 18595  00351A  22DA               	addwfc	fsr2h,f,c
 18596  00351C  EE10 F006          	lfsr	1,6
 18597  003520  5025               	movf	Ball_draw@b^0,w,c
 18598  003522  26E1               	addwf	fsr1l,f,c
 18599  003524  5026               	movf	(Ball_draw@b+1)^0,w,c
 18600  003526  22E2               	addwfc	fsr1h,f,c
 18601  003528  CFDE FFE6          	movff	postinc2,postinc1
 18602  00352C  CFDD FFE5          	movff	postdec2,postdec1
 18603                           
 18604                           ;class/ball.c: 32:     LCD_DrawRect(b->x-8,b->y-8,b->x+8,b->y+8,1,0b1111100000000000);
 18605  003530  C025  FFD9         	movff	Ball_draw@b,fsr2l
 18606  003534  C026  FFDA         	movff	Ball_draw@b+1,fsr2h
 18607  003538  CFDE F027          	movff	postinc2,??_Ball_draw
 18608  00353C  CFDD F028          	movff	postdec2,??_Ball_draw+1
 18609  003540  0EF8               	movlw	248
 18610  003542  2427               	addwf	??_Ball_draw^0,w,c
 18611  003544  6E12               	movwf	LCD_DrawRect@posX1^0,c
 18612  003546  0EFF               	movlw	255
 18613  003548  2028               	addwfc	(??_Ball_draw+1)^0,w,c
 18614  00354A  6E13               	movwf	(LCD_DrawRect@posX1+1)^0,c
 18615  00354C  EE20 F002          	lfsr	2,2
 18616  003550  5025               	movf	Ball_draw@b^0,w,c
 18617  003552  26D9               	addwf	fsr2l,f,c
 18618  003554  5026               	movf	(Ball_draw@b+1)^0,w,c
 18619  003556  22DA               	addwfc	fsr2h,f,c
 18620  003558  CFDE F029          	movff	postinc2,??_Ball_draw+2
 18621  00355C  CFDD F02A          	movff	postdec2,??_Ball_draw+3
 18622  003560  0EF8               	movlw	248
 18623  003562  2429               	addwf	(??_Ball_draw+2)^0,w,c
 18624  003564  6E14               	movwf	LCD_DrawRect@posY1^0,c
 18625  003566  0EFF               	movlw	255
 18626  003568  202A               	addwfc	(??_Ball_draw+3)^0,w,c
 18627  00356A  6E15               	movwf	(LCD_DrawRect@posY1+1)^0,c
 18628  00356C  C025  FFD9         	movff	Ball_draw@b,fsr2l
 18629  003570  C026  FFDA         	movff	Ball_draw@b+1,fsr2h
 18630  003574  CFDE F02B          	movff	postinc2,??_Ball_draw+4
 18631  003578  CFDD F02C          	movff	postdec2,??_Ball_draw+5
 18632  00357C  0E08               	movlw	8
 18633  00357E  242B               	addwf	(??_Ball_draw+4)^0,w,c
 18634  003580  6E16               	movwf	LCD_DrawRect@posX2^0,c
 18635  003582  0E00               	movlw	0
 18636  003584  202C               	addwfc	(??_Ball_draw+5)^0,w,c
 18637  003586  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 18638  003588  EE20 F002          	lfsr	2,2
 18639  00358C  5025               	movf	Ball_draw@b^0,w,c
 18640  00358E  26D9               	addwf	fsr2l,f,c
 18641  003590  5026               	movf	(Ball_draw@b+1)^0,w,c
 18642  003592  22DA               	addwfc	fsr2h,f,c
 18643  003594  CFDE F02D          	movff	postinc2,??_Ball_draw+6
 18644  003598  CFDD F02E          	movff	postdec2,??_Ball_draw+7
 18645  00359C  0E08               	movlw	8
 18646  00359E  242D               	addwf	(??_Ball_draw+6)^0,w,c
 18647  0035A0  6E18               	movwf	LCD_DrawRect@posY2^0,c
 18648  0035A2  0E00               	movlw	0
 18649  0035A4  202E               	addwfc	(??_Ball_draw+7)^0,w,c
 18650  0035A6  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 18651  0035A8  0E01               	movlw	1
 18652  0035AA  6E1A               	movwf	LCD_DrawRect@fill^0,c
 18653  0035AC  0EF8               	movlw	248
 18654  0035AE  6E1C               	movwf	(LCD_DrawRect@color+1)^0,c
 18655  0035B0  0E00               	movlw	0
 18656  0035B2  6E1B               	movwf	LCD_DrawRect@color^0,c
 18657  0035B4  EC31  F013         	call	_LCD_DrawRect	;wreg free
 18658  0035B8  0012               	return		;funcret
 18659  0035BA                     __end_of_Ball_draw:
 18660                           	callstack 0
 18661                           
 18662 ;; *************** function _LCD_DrawRect *****************
 18663 ;; Defined at:
 18664 ;;		line 584 in file "libraries/lcd_highlevel.c"
 18665 ;; Parameters:    Size  Location     Type
 18666 ;;  posX1           2   17[COMRAM] unsigned short 
 18667 ;;  posY1           2   19[COMRAM] unsigned short 
 18668 ;;  posX2           2   21[COMRAM] unsigned short 
 18669 ;;  posY2           2   23[COMRAM] unsigned short 
 18670 ;;  fill            1   25[COMRAM] unsigned char 
 18671 ;;  color           2   26[COMRAM] unsigned short 
 18672 ;; Auto vars:     Size  Location     Type
 18673 ;;  i               2   34[COMRAM] unsigned short 
 18674 ;;  temp            2   30[COMRAM] unsigned short 
 18675 ;;  j               2   28[COMRAM] unsigned short 
 18676 ;;  colorL          1   33[COMRAM] unsigned char 
 18677 ;;  colorH          1   32[COMRAM] unsigned char 
 18678 ;; Return value:  Size  Location     Type
 18679 ;;                  1    wreg      void 
 18680 ;; Registers used:
 18681 ;;		wreg, status,2, status,0
 18682 ;; Tracked objects:
 18683 ;;		On entry : 0/0
 18684 ;;		On exit  : 0/0
 18685 ;;		Unchanged: 0/0
 18686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18687 ;;      Params:        11       0       0       0       0       0       0
 18688 ;;      Locals:         8       0       0       0       0       0       0
 18689 ;;      Temps:          0       0       0       0       0       0       0
 18690 ;;      Totals:        19       0       0       0       0       0       0
 18691 ;;Total ram usage:       19 bytes
 18692 ;; Hardware stack levels used: 1
 18693 ;; Hardware stack levels required when called: 4
 18694 ;; This function calls:
 18695 ;;		Nothing
 18696 ;; This function is called by:
 18697 ;;		_Ball_draw
 18698 ;;		_Paddle_draw
 18699 ;;		_Menu_inGameDraw
 18700 ;;		_LCD_SliderUpdate
 18701 ;;		_LCD_SliderDraw
 18702 ;;		_LCD_ButtonUpdate
 18703 ;;		_LCD_ButtonDraw
 18704 ;;		_displayController
 18705 ;; This function uses a non-reentrant model
 18706 ;;
 18707                           
 18708                           	psect	text80
 18709  002662                     __ptext80:
 18710                           	callstack 0
 18711  002662                     _LCD_DrawRect:
 18712                           	callstack 21
 18713                           
 18714                           ;libraries/lcd_highlevel.c: 584: void LCD_DrawRect(uint16_t posX1,uint16_t posY1, uint16
      +                          _t posX2,;libraries/lcd_highlevel.c: 585:   uint16_t posY2,uint8_t fill,uint16_t color);
      +                          libraries/lcd_highlevel.c: 586: {;libraries/lcd_highlevel.c: 587:   uint16_t i;;librarie
      +                          s/lcd_highlevel.c: 588:   uint16_t j;;libraries/lcd_highlevel.c: 589:   uint16_t temp;;l
      +                          ibraries/lcd_highlevel.c: 590:   uint8_t colorH,colorL;;libraries/lcd_highlevel.c: 592: 
      +                            colorH = color>>8;
 18715                           
 18716                           ;incstack = 0
 18717  002662  C01C  F021         	movff	LCD_DrawRect@color+1,LCD_DrawRect@colorH
 18718                           
 18719                           ;libraries/lcd_highlevel.c: 593:   colorL = color;
 18720  002666  C01B  F022         	movff	LCD_DrawRect@color,LCD_DrawRect@colorL
 18721                           
 18722                           ;libraries/lcd_highlevel.c: 597:   if(posX1 > posX2)
 18723  00266A  5012               	movf	LCD_DrawRect@posX1^0,w,c
 18724  00266C  5C16               	subwf	LCD_DrawRect@posX2^0,w,c
 18725  00266E  5013               	movf	(LCD_DrawRect@posX1+1)^0,w,c
 18726  002670  5817               	subwfb	(LCD_DrawRect@posX2+1)^0,w,c
 18727  002672  B0D8               	btfsc	status,0,c
 18728  002674  D00C               	goto	l5330
 18729                           
 18730                           ;libraries/lcd_highlevel.c: 598:   {;libraries/lcd_highlevel.c: 599:     temp = posX1;
 18731  002676  C012  F01F         	movff	LCD_DrawRect@posX1,LCD_DrawRect@temp
 18732  00267A  C013  F020         	movff	LCD_DrawRect@posX1+1,LCD_DrawRect@temp+1
 18733                           
 18734                           ;libraries/lcd_highlevel.c: 600:     posX1 = posX2;
 18735  00267E  C016  F012         	movff	LCD_DrawRect@posX2,LCD_DrawRect@posX1
 18736  002682  C017  F013         	movff	LCD_DrawRect@posX2+1,LCD_DrawRect@posX1+1
 18737                           
 18738                           ;libraries/lcd_highlevel.c: 601:     posX2 = temp;
 18739  002686  C01F  F016         	movff	LCD_DrawRect@temp,LCD_DrawRect@posX2
 18740  00268A  C020  F017         	movff	LCD_DrawRect@temp+1,LCD_DrawRect@posX2+1
 18741  00268E                     l5330:
 18742                           
 18743                           ;libraries/lcd_highlevel.c: 603:   if(posY1 > posY2)
 18744  00268E  5014               	movf	LCD_DrawRect@posY1^0,w,c
 18745  002690  5C18               	subwf	LCD_DrawRect@posY2^0,w,c
 18746  002692  5015               	movf	(LCD_DrawRect@posY1+1)^0,w,c
 18747  002694  5819               	subwfb	(LCD_DrawRect@posY2+1)^0,w,c
 18748  002696  B0D8               	btfsc	status,0,c
 18749  002698  D00C               	goto	l5334
 18750                           
 18751                           ;libraries/lcd_highlevel.c: 604:   {;libraries/lcd_highlevel.c: 605:     temp = posY1;
 18752  00269A  C014  F01F         	movff	LCD_DrawRect@posY1,LCD_DrawRect@temp
 18753  00269E  C015  F020         	movff	LCD_DrawRect@posY1+1,LCD_DrawRect@temp+1
 18754                           
 18755                           ;libraries/lcd_highlevel.c: 606:     posY1 = posY2;
 18756  0026A2  C018  F014         	movff	LCD_DrawRect@posY2,LCD_DrawRect@posY1
 18757  0026A6  C019  F015         	movff	LCD_DrawRect@posY2+1,LCD_DrawRect@posY1+1
 18758                           
 18759                           ;libraries/lcd_highlevel.c: 607:     posY2 = temp;
 18760  0026AA  C01F  F018         	movff	LCD_DrawRect@temp,LCD_DrawRect@posY2
 18761  0026AE  C020  F019         	movff	LCD_DrawRect@temp+1,LCD_DrawRect@posY2+1
 18762  0026B2                     l5334:
 18763                           
 18764                           ;libraries/lcd_highlevel.c: 610:   if(fill==1)
 18765  0026B2  041A               	decf	LCD_DrawRect@fill^0,w,c
 18766  0026B4  A4D8               	btfss	status,2,c
 18767  0026B6  D055               	goto	l5416
 18768                           
 18769                           ;libraries/lcd_highlevel.c: 611:   {;libraries/lcd_highlevel.c: 613:     PORTA = 0x2A; L
      +                          ATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 = 1;;
 18770  0026B8  0E2A               	movlw	42
 18771  0026BA  6E80               	movwf	128,c	;volatile
 18772  0026BC  988B               	bcf	3979,4,c	;volatile
 18773  0026BE  968B               	bcf	3979,3,c	;volatile
 18774  0026C0  868B               	bsf	3979,3,c	;volatile
 18775  0026C2  888B               	bsf	3979,4,c	;volatile
 18776                           
 18777                           ;libraries/lcd_highlevel.c: 614:     PORTA = posX1>>8; LATC3 = 0; LATC3 = 1;;
 18778  0026C4  C013  FF80         	movff	LCD_DrawRect@posX1+1,3968	;volatile
 18779  0026C8  968B               	bcf	3979,3,c	;volatile
 18780  0026CA  868B               	bsf	3979,3,c	;volatile
 18781                           
 18782                           ;libraries/lcd_highlevel.c: 615:     PORTA = posX1; LATC3 = 0; LATC3 = 1;;
 18783  0026CC  C012  FF80         	movff	LCD_DrawRect@posX1,3968	;volatile
 18784  0026D0  968B               	bcf	3979,3,c	;volatile
 18785  0026D2  868B               	bsf	3979,3,c	;volatile
 18786                           
 18787                           ;libraries/lcd_highlevel.c: 616:     PORTA = posX2>>8; LATC3 = 0; LATC3 = 1;;
 18788  0026D4  C017  FF80         	movff	LCD_DrawRect@posX2+1,3968	;volatile
 18789  0026D8  968B               	bcf	3979,3,c	;volatile
 18790  0026DA  868B               	bsf	3979,3,c	;volatile
 18791                           
 18792                           ;libraries/lcd_highlevel.c: 617:     PORTA = posX2; LATC3 = 0; LATC3 = 1;;
 18793  0026DC  C016  FF80         	movff	LCD_DrawRect@posX2,3968	;volatile
 18794  0026E0  968B               	bcf	3979,3,c	;volatile
 18795  0026E2  868B               	bsf	3979,3,c	;volatile
 18796                           
 18797                           ;libraries/lcd_highlevel.c: 619:     PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 18798  0026E4  0E2B               	movlw	43
 18799  0026E6  6E80               	movwf	128,c	;volatile
 18800  0026E8  988B               	bcf	3979,4,c	;volatile
 18801  0026EA  968B               	bcf	3979,3,c	;volatile
 18802  0026EC  868B               	bsf	3979,3,c	;volatile
 18803  0026EE  888B               	bsf	3979,4,c	;volatile
 18804                           
 18805                           ;libraries/lcd_highlevel.c: 620:     PORTA = posY1>>8; LATC3 = 0; LATC3 = 1;;
 18806  0026F0  C015  FF80         	movff	LCD_DrawRect@posY1+1,3968	;volatile
 18807  0026F4  968B               	bcf	3979,3,c	;volatile
 18808  0026F6  868B               	bsf	3979,3,c	;volatile
 18809                           
 18810                           ;libraries/lcd_highlevel.c: 621:     PORTA = posY1; LATC3 = 0; LATC3 = 1;;
 18811  0026F8  C014  FF80         	movff	LCD_DrawRect@posY1,3968	;volatile
 18812  0026FC  968B               	bcf	3979,3,c	;volatile
 18813  0026FE  868B               	bsf	3979,3,c	;volatile
 18814                           
 18815                           ;libraries/lcd_highlevel.c: 622:     PORTA = (320 -1) >> 8; LATC3 = 0; LATC3 = 1;;
 18816  002700  0E01               	movlw	1
 18817  002702  6E80               	movwf	128,c	;volatile
 18818  002704  968B               	bcf	3979,3,c	;volatile
 18819  002706  868B               	bsf	3979,3,c	;volatile
 18820                           
 18821                           ;libraries/lcd_highlevel.c: 623:     PORTA = (320 -1); LATC3 = 0; LATC3 = 1;;
 18822  002708  0E3F               	movlw	63
 18823  00270A  6E80               	movwf	128,c	;volatile
 18824  00270C  968B               	bcf	3979,3,c	;volatile
 18825  00270E  868B               	bsf	3979,3,c	;volatile
 18826                           
 18827                           ;libraries/lcd_highlevel.c: 625:     PORTA = 0x2C; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 18828  002710  0E2C               	movlw	44
 18829  002712  6E80               	movwf	128,c	;volatile
 18830  002714  988B               	bcf	3979,4,c	;volatile
 18831  002716  968B               	bcf	3979,3,c	;volatile
 18832  002718  868B               	bsf	3979,3,c	;volatile
 18833  00271A  888B               	bsf	3979,4,c	;volatile
 18834                           
 18835                           ;libraries/lcd_highlevel.c: 626:     for(i=posX1;i<=posX2;i++)
 18836  00271C  C012  F023         	movff	LCD_DrawRect@posX1,LCD_DrawRect@i
 18837  002720  C013  F024         	movff	LCD_DrawRect@posX1+1,LCD_DrawRect@i+1
 18838  002724  D017               	goto	l5414
 18839  002726                     l283:
 18840                           
 18841                           ;libraries/lcd_highlevel.c: 627:     {;libraries/lcd_highlevel.c: 628:       for(j=posY1
      +                          ;j<=posY2;j++)
 18842  002726  C014  F01D         	movff	LCD_DrawRect@posY1,LCD_DrawRect@j
 18843  00272A  C015  F01E         	movff	LCD_DrawRect@posY1+1,LCD_DrawRect@j+1
 18844  00272E  D00A               	goto	l5410
 18845  002730                     l285:
 18846                           
 18847                           ;libraries/lcd_highlevel.c: 629:       {;libraries/lcd_highlevel.c: 630:         PORTA =
      +                           colorH; LATC3 = 0; LATC3 = 1;;
 18848  002730  C021  FF80         	movff	LCD_DrawRect@colorH,3968	;volatile
 18849  002734  968B               	bcf	3979,3,c	;volatile
 18850  002736  868B               	bsf	3979,3,c	;volatile
 18851                           
 18852                           ;libraries/lcd_highlevel.c: 631:         PORTA = colorL; LATC3 = 0; LATC3 = 1;;
 18853  002738  C022  FF80         	movff	LCD_DrawRect@colorL,3968	;volatile
 18854  00273C  968B               	bcf	3979,3,c	;volatile
 18855  00273E  868B               	bsf	3979,3,c	;volatile
 18856                           
 18857                           ;libraries/lcd_highlevel.c: 632:       }
 18858  002740  4A1D               	infsnz	LCD_DrawRect@j^0,f,c
 18859  002742  2A1E               	incf	(LCD_DrawRect@j+1)^0,f,c
 18860  002744                     l5410:
 18861  002744  501D               	movf	LCD_DrawRect@j^0,w,c
 18862  002746  5C18               	subwf	LCD_DrawRect@posY2^0,w,c
 18863  002748  501E               	movf	(LCD_DrawRect@j+1)^0,w,c
 18864  00274A  5819               	subwfb	(LCD_DrawRect@posY2+1)^0,w,c
 18865  00274C  B0D8               	btfsc	status,0,c
 18866  00274E  D7F0               	goto	l285
 18867                           
 18868                           ;libraries/lcd_highlevel.c: 633:     }
 18869  002750  4A23               	infsnz	LCD_DrawRect@i^0,f,c
 18870  002752  2A24               	incf	(LCD_DrawRect@i+1)^0,f,c
 18871  002754                     l5414:
 18872  002754  5023               	movf	LCD_DrawRect@i^0,w,c
 18873  002756  5C16               	subwf	LCD_DrawRect@posX2^0,w,c
 18874  002758  5024               	movf	(LCD_DrawRect@i+1)^0,w,c
 18875  00275A  5817               	subwfb	(LCD_DrawRect@posX2+1)^0,w,c
 18876  00275C  A0D8               	btfss	status,0,c
 18877  00275E  0012               	return	
 18878  002760  D7E2               	goto	l283
 18879  002762                     l5416:
 18880                           
 18881                           ;libraries/lcd_highlevel.c: 637:   {;libraries/lcd_highlevel.c: 639:     PORTA = 0x2A; L
      +                          ATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 = 1;;
 18882  002762  0E2A               	movlw	42
 18883  002764  6E80               	movwf	128,c	;volatile
 18884  002766  988B               	bcf	3979,4,c	;volatile
 18885  002768  968B               	bcf	3979,3,c	;volatile
 18886  00276A  868B               	bsf	3979,3,c	;volatile
 18887  00276C  888B               	bsf	3979,4,c	;volatile
 18888                           
 18889                           ;libraries/lcd_highlevel.c: 640:     PORTA = posX1>>8; LATC3 = 0; LATC3 = 1;;
 18890  00276E  C013  FF80         	movff	LCD_DrawRect@posX1+1,3968	;volatile
 18891  002772  968B               	bcf	3979,3,c	;volatile
 18892  002774  868B               	bsf	3979,3,c	;volatile
 18893                           
 18894                           ;libraries/lcd_highlevel.c: 641:     PORTA = posX1; LATC3 = 0; LATC3 = 1;;
 18895  002776  C012  FF80         	movff	LCD_DrawRect@posX1,3968	;volatile
 18896  00277A  968B               	bcf	3979,3,c	;volatile
 18897  00277C  868B               	bsf	3979,3,c	;volatile
 18898                           
 18899                           ;libraries/lcd_highlevel.c: 642:     PORTA = posX2>>8; LATC3 = 0; LATC3 = 1;;
 18900  00277E  C017  FF80         	movff	LCD_DrawRect@posX2+1,3968	;volatile
 18901  002782  968B               	bcf	3979,3,c	;volatile
 18902  002784  868B               	bsf	3979,3,c	;volatile
 18903                           
 18904                           ;libraries/lcd_highlevel.c: 643:     PORTA = posX2; LATC3 = 0; LATC3 = 1;;
 18905  002786  C016  FF80         	movff	LCD_DrawRect@posX2,3968	;volatile
 18906  00278A  968B               	bcf	3979,3,c	;volatile
 18907  00278C  868B               	bsf	3979,3,c	;volatile
 18908                           
 18909                           ;libraries/lcd_highlevel.c: 645:     PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 18910  00278E  0E2B               	movlw	43
 18911  002790  6E80               	movwf	128,c	;volatile
 18912  002792  988B               	bcf	3979,4,c	;volatile
 18913  002794  968B               	bcf	3979,3,c	;volatile
 18914  002796  868B               	bsf	3979,3,c	;volatile
 18915  002798  888B               	bsf	3979,4,c	;volatile
 18916                           
 18917                           ;libraries/lcd_highlevel.c: 646:     PORTA = posY1>>8; LATC3 = 0; LATC3 = 1;;
 18918  00279A  C015  FF80         	movff	LCD_DrawRect@posY1+1,3968	;volatile
 18919  00279E  968B               	bcf	3979,3,c	;volatile
 18920  0027A0  868B               	bsf	3979,3,c	;volatile
 18921                           
 18922                           ;libraries/lcd_highlevel.c: 647:     PORTA = posY1; LATC3 = 0; LATC3 = 1;;
 18923  0027A2  C014  FF80         	movff	LCD_DrawRect@posY1,3968	;volatile
 18924  0027A6  968B               	bcf	3979,3,c	;volatile
 18925  0027A8  868B               	bsf	3979,3,c	;volatile
 18926                           
 18927                           ;libraries/lcd_highlevel.c: 648:     PORTA = (320 -1) >> 8; LATC3 = 0; LATC3 = 1;;
 18928  0027AA  0E01               	movlw	1
 18929  0027AC  6E80               	movwf	128,c	;volatile
 18930  0027AE  968B               	bcf	3979,3,c	;volatile
 18931  0027B0  868B               	bsf	3979,3,c	;volatile
 18932                           
 18933                           ;libraries/lcd_highlevel.c: 649:     PORTA = (320 -1); LATC3 = 0; LATC3 = 1;;
 18934  0027B2  0E3F               	movlw	63
 18935  0027B4  6E80               	movwf	128,c	;volatile
 18936  0027B6  968B               	bcf	3979,3,c	;volatile
 18937  0027B8  868B               	bsf	3979,3,c	;volatile
 18938                           
 18939                           ;libraries/lcd_highlevel.c: 651:     PORTA = 0x2C; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 18940  0027BA  0E2C               	movlw	44
 18941  0027BC  6E80               	movwf	128,c	;volatile
 18942  0027BE  988B               	bcf	3979,4,c	;volatile
 18943  0027C0  968B               	bcf	3979,3,c	;volatile
 18944  0027C2  868B               	bsf	3979,3,c	;volatile
 18945  0027C4  888B               	bsf	3979,4,c	;volatile
 18946                           
 18947                           ;libraries/lcd_highlevel.c: 653:     for(i=posX1;i<=posX2;i++)
 18948  0027C6  C012  F023         	movff	LCD_DrawRect@posX1,LCD_DrawRect@i
 18949  0027CA  C013  F024         	movff	LCD_DrawRect@posX1+1,LCD_DrawRect@i+1
 18950  0027CE  D00A               	goto	l5490
 18951  0027D0                     l290:
 18952                           
 18953                           ;libraries/lcd_highlevel.c: 654:     {;libraries/lcd_highlevel.c: 655:       PORTA = col
      +                          orH; LATC3 = 0; LATC3 = 1;;
 18954  0027D0  C021  FF80         	movff	LCD_DrawRect@colorH,3968	;volatile
 18955  0027D4  968B               	bcf	3979,3,c	;volatile
 18956  0027D6  868B               	bsf	3979,3,c	;volatile
 18957                           
 18958                           ;libraries/lcd_highlevel.c: 656:       PORTA = colorL; LATC3 = 0; LATC3 = 1;;
 18959  0027D8  C022  FF80         	movff	LCD_DrawRect@colorL,3968	;volatile
 18960  0027DC  968B               	bcf	3979,3,c	;volatile
 18961  0027DE  868B               	bsf	3979,3,c	;volatile
 18962                           
 18963                           ;libraries/lcd_highlevel.c: 657:     }
 18964  0027E0  4A23               	infsnz	LCD_DrawRect@i^0,f,c
 18965  0027E2  2A24               	incf	(LCD_DrawRect@i+1)^0,f,c
 18966  0027E4                     l5490:
 18967  0027E4  5023               	movf	LCD_DrawRect@i^0,w,c
 18968  0027E6  5C16               	subwf	LCD_DrawRect@posX2^0,w,c
 18969  0027E8  5024               	movf	(LCD_DrawRect@i+1)^0,w,c
 18970  0027EA  5817               	subwfb	(LCD_DrawRect@posX2+1)^0,w,c
 18971  0027EC  B0D8               	btfsc	status,0,c
 18972  0027EE  D7F0               	goto	l290
 18973                           
 18974                           ;libraries/lcd_highlevel.c: 659:     PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 18975  0027F0  0E2B               	movlw	43
 18976  0027F2  6E80               	movwf	128,c	;volatile
 18977  0027F4  988B               	bcf	3979,4,c	;volatile
 18978  0027F6  968B               	bcf	3979,3,c	;volatile
 18979  0027F8  868B               	bsf	3979,3,c	;volatile
 18980  0027FA  888B               	bsf	3979,4,c	;volatile
 18981                           
 18982                           ;libraries/lcd_highlevel.c: 660:     PORTA = posY2>>8; LATC3 = 0; LATC3 = 1;;
 18983  0027FC  C019  FF80         	movff	LCD_DrawRect@posY2+1,3968	;volatile
 18984  002800  968B               	bcf	3979,3,c	;volatile
 18985  002802  868B               	bsf	3979,3,c	;volatile
 18986                           
 18987                           ;libraries/lcd_highlevel.c: 661:     PORTA = posY2; LATC3 = 0; LATC3 = 1;;
 18988  002804  C018  FF80         	movff	LCD_DrawRect@posY2,3968	;volatile
 18989  002808  968B               	bcf	3979,3,c	;volatile
 18990  00280A  868B               	bsf	3979,3,c	;volatile
 18991                           
 18992                           ;libraries/lcd_highlevel.c: 662:     PORTA = 0x2C; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 18993  00280C  0E2C               	movlw	44
 18994  00280E  6E80               	movwf	128,c	;volatile
 18995  002810  988B               	bcf	3979,4,c	;volatile
 18996  002812  968B               	bcf	3979,3,c	;volatile
 18997  002814  868B               	bsf	3979,3,c	;volatile
 18998  002816  888B               	bsf	3979,4,c	;volatile
 18999                           
 19000                           ;libraries/lcd_highlevel.c: 663:     for(i=posX1;i<=posX2;i++)
 19001  002818  C012  F023         	movff	LCD_DrawRect@posX1,LCD_DrawRect@i
 19002  00281C  C013  F024         	movff	LCD_DrawRect@posX1+1,LCD_DrawRect@i+1
 19003  002820  D00A               	goto	l5526
 19004  002822                     l293:
 19005                           
 19006                           ;libraries/lcd_highlevel.c: 664:     {;libraries/lcd_highlevel.c: 665:       PORTA = col
      +                          orH; LATC3 = 0; LATC3 = 1;;
 19007  002822  C021  FF80         	movff	LCD_DrawRect@colorH,3968	;volatile
 19008  002826  968B               	bcf	3979,3,c	;volatile
 19009  002828  868B               	bsf	3979,3,c	;volatile
 19010                           
 19011                           ;libraries/lcd_highlevel.c: 666:       PORTA = colorL; LATC3 = 0; LATC3 = 1;;
 19012  00282A  C022  FF80         	movff	LCD_DrawRect@colorL,3968	;volatile
 19013  00282E  968B               	bcf	3979,3,c	;volatile
 19014  002830  868B               	bsf	3979,3,c	;volatile
 19015                           
 19016                           ;libraries/lcd_highlevel.c: 667:     }
 19017  002832  4A23               	infsnz	LCD_DrawRect@i^0,f,c
 19018  002834  2A24               	incf	(LCD_DrawRect@i+1)^0,f,c
 19019  002836                     l5526:
 19020  002836  5023               	movf	LCD_DrawRect@i^0,w,c
 19021  002838  5C16               	subwf	LCD_DrawRect@posX2^0,w,c
 19022  00283A  5024               	movf	(LCD_DrawRect@i+1)^0,w,c
 19023  00283C  5817               	subwfb	(LCD_DrawRect@posX2+1)^0,w,c
 19024  00283E  B0D8               	btfsc	status,0,c
 19025  002840  D7F0               	goto	l293
 19026                           
 19027                           ;libraries/lcd_highlevel.c: 669:     PORTA = 0x2A; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 19028  002842  0E2A               	movlw	42
 19029  002844  6E80               	movwf	128,c	;volatile
 19030  002846  988B               	bcf	3979,4,c	;volatile
 19031  002848  968B               	bcf	3979,3,c	;volatile
 19032  00284A  868B               	bsf	3979,3,c	;volatile
 19033  00284C  888B               	bsf	3979,4,c	;volatile
 19034                           
 19035                           ;libraries/lcd_highlevel.c: 670:     PORTA = posX1>>8; LATC3 = 0; LATC3 = 1;;
 19036  00284E  C013  FF80         	movff	LCD_DrawRect@posX1+1,3968	;volatile
 19037  002852  968B               	bcf	3979,3,c	;volatile
 19038  002854  868B               	bsf	3979,3,c	;volatile
 19039                           
 19040                           ;libraries/lcd_highlevel.c: 671:     PORTA = posX1; LATC3 = 0; LATC3 = 1;;
 19041  002856  C012  FF80         	movff	LCD_DrawRect@posX1,3968	;volatile
 19042  00285A  968B               	bcf	3979,3,c	;volatile
 19043  00285C  868B               	bsf	3979,3,c	;volatile
 19044                           
 19045                           ;libraries/lcd_highlevel.c: 672:     PORTA = posX1>>8; LATC3 = 0; LATC3 = 1;;
 19046  00285E  C013  FF80         	movff	LCD_DrawRect@posX1+1,3968	;volatile
 19047  002862  968B               	bcf	3979,3,c	;volatile
 19048  002864  868B               	bsf	3979,3,c	;volatile
 19049                           
 19050                           ;libraries/lcd_highlevel.c: 673:     PORTA = posX1; LATC3 = 0; LATC3 = 1;;
 19051  002866  C012  FF80         	movff	LCD_DrawRect@posX1,3968	;volatile
 19052  00286A  968B               	bcf	3979,3,c	;volatile
 19053  00286C  868B               	bsf	3979,3,c	;volatile
 19054                           
 19055                           ;libraries/lcd_highlevel.c: 675:     PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 19056  00286E  0E2B               	movlw	43
 19057  002870  6E80               	movwf	128,c	;volatile
 19058  002872  988B               	bcf	3979,4,c	;volatile
 19059  002874  968B               	bcf	3979,3,c	;volatile
 19060  002876  868B               	bsf	3979,3,c	;volatile
 19061  002878  888B               	bsf	3979,4,c	;volatile
 19062                           
 19063                           ;libraries/lcd_highlevel.c: 676:     PORTA = posY1>>8; LATC3 = 0; LATC3 = 1;;
 19064  00287A  C015  FF80         	movff	LCD_DrawRect@posY1+1,3968	;volatile
 19065  00287E  968B               	bcf	3979,3,c	;volatile
 19066  002880  868B               	bsf	3979,3,c	;volatile
 19067                           
 19068                           ;libraries/lcd_highlevel.c: 677:     PORTA = posY1; LATC3 = 0; LATC3 = 1;;
 19069  002882  C014  FF80         	movff	LCD_DrawRect@posY1,3968	;volatile
 19070  002886  968B               	bcf	3979,3,c	;volatile
 19071  002888  868B               	bsf	3979,3,c	;volatile
 19072                           
 19073                           ;libraries/lcd_highlevel.c: 678:     PORTA = (320 -1) >> 8; LATC3 = 0; LATC3 = 1;;
 19074  00288A  0E01               	movlw	1
 19075  00288C  6E80               	movwf	128,c	;volatile
 19076  00288E  968B               	bcf	3979,3,c	;volatile
 19077  002890  868B               	bsf	3979,3,c	;volatile
 19078                           
 19079                           ;libraries/lcd_highlevel.c: 679:     PORTA = (320 -1); LATC3 = 0; LATC3 = 1;;
 19080  002892  0E3F               	movlw	63
 19081  002894  6E80               	movwf	128,c	;volatile
 19082  002896  968B               	bcf	3979,3,c	;volatile
 19083  002898  868B               	bsf	3979,3,c	;volatile
 19084                           
 19085                           ;libraries/lcd_highlevel.c: 680:     PORTA = 0x2C; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 19086  00289A  0E2C               	movlw	44
 19087  00289C  6E80               	movwf	128,c	;volatile
 19088  00289E  988B               	bcf	3979,4,c	;volatile
 19089  0028A0  968B               	bcf	3979,3,c	;volatile
 19090  0028A2  868B               	bsf	3979,3,c	;volatile
 19091  0028A4  888B               	bsf	3979,4,c	;volatile
 19092                           
 19093                           ;libraries/lcd_highlevel.c: 681:     for(i=posY1;i<=posY2;i++)
 19094  0028A6  C014  F023         	movff	LCD_DrawRect@posY1,LCD_DrawRect@i
 19095  0028AA  C015  F024         	movff	LCD_DrawRect@posY1+1,LCD_DrawRect@i+1
 19096  0028AE  D00A               	goto	l5602
 19097  0028B0                     l296:
 19098                           
 19099                           ;libraries/lcd_highlevel.c: 682:     {;libraries/lcd_highlevel.c: 683:       PORTA = col
      +                          orH; LATC3 = 0; LATC3 = 1;;
 19100  0028B0  C021  FF80         	movff	LCD_DrawRect@colorH,3968	;volatile
 19101  0028B4  968B               	bcf	3979,3,c	;volatile
 19102  0028B6  868B               	bsf	3979,3,c	;volatile
 19103                           
 19104                           ;libraries/lcd_highlevel.c: 684:       PORTA = colorL; LATC3 = 0; LATC3 = 1;;
 19105  0028B8  C022  FF80         	movff	LCD_DrawRect@colorL,3968	;volatile
 19106  0028BC  968B               	bcf	3979,3,c	;volatile
 19107  0028BE  868B               	bsf	3979,3,c	;volatile
 19108                           
 19109                           ;libraries/lcd_highlevel.c: 685:     }
 19110  0028C0  4A23               	infsnz	LCD_DrawRect@i^0,f,c
 19111  0028C2  2A24               	incf	(LCD_DrawRect@i+1)^0,f,c
 19112  0028C4                     l5602:
 19113  0028C4  5023               	movf	LCD_DrawRect@i^0,w,c
 19114  0028C6  5C18               	subwf	LCD_DrawRect@posY2^0,w,c
 19115  0028C8  5024               	movf	(LCD_DrawRect@i+1)^0,w,c
 19116  0028CA  5819               	subwfb	(LCD_DrawRect@posY2+1)^0,w,c
 19117  0028CC  B0D8               	btfsc	status,0,c
 19118  0028CE  D7F0               	goto	l296
 19119                           
 19120                           ;libraries/lcd_highlevel.c: 687:     PORTA = 0x2A; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 19121  0028D0  0E2A               	movlw	42
 19122  0028D2  6E80               	movwf	128,c	;volatile
 19123  0028D4  988B               	bcf	3979,4,c	;volatile
 19124  0028D6  968B               	bcf	3979,3,c	;volatile
 19125  0028D8  868B               	bsf	3979,3,c	;volatile
 19126  0028DA  888B               	bsf	3979,4,c	;volatile
 19127                           
 19128                           ;libraries/lcd_highlevel.c: 688:     PORTA = posX2>>8; LATC3 = 0; LATC3 = 1;;
 19129  0028DC  C017  FF80         	movff	LCD_DrawRect@posX2+1,3968	;volatile
 19130  0028E0  968B               	bcf	3979,3,c	;volatile
 19131  0028E2  868B               	bsf	3979,3,c	;volatile
 19132                           
 19133                           ;libraries/lcd_highlevel.c: 689:     PORTA = posX2; LATC3 = 0; LATC3 = 1;;
 19134  0028E4  C016  FF80         	movff	LCD_DrawRect@posX2,3968	;volatile
 19135  0028E8  968B               	bcf	3979,3,c	;volatile
 19136  0028EA  868B               	bsf	3979,3,c	;volatile
 19137                           
 19138                           ;libraries/lcd_highlevel.c: 690:     PORTA = posX2>>8; LATC3 = 0; LATC3 = 1;;
 19139  0028EC  C017  FF80         	movff	LCD_DrawRect@posX2+1,3968	;volatile
 19140  0028F0  968B               	bcf	3979,3,c	;volatile
 19141  0028F2  868B               	bsf	3979,3,c	;volatile
 19142                           
 19143                           ;libraries/lcd_highlevel.c: 691:     PORTA = posX2; LATC3 = 0; LATC3 = 1;;
 19144  0028F4  C016  FF80         	movff	LCD_DrawRect@posX2,3968	;volatile
 19145  0028F8  968B               	bcf	3979,3,c	;volatile
 19146  0028FA  868B               	bsf	3979,3,c	;volatile
 19147                           
 19148                           ;libraries/lcd_highlevel.c: 692:     PORTA = 0x2C; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 19149  0028FC  0E2C               	movlw	44
 19150  0028FE  6E80               	movwf	128,c	;volatile
 19151  002900  988B               	bcf	3979,4,c	;volatile
 19152  002902  968B               	bcf	3979,3,c	;volatile
 19153  002904  868B               	bsf	3979,3,c	;volatile
 19154  002906  888B               	bsf	3979,4,c	;volatile
 19155                           
 19156                           ;libraries/lcd_highlevel.c: 693:     for(i=posY1;i<=posY2;i++)
 19157  002908  C014  F023         	movff	LCD_DrawRect@posY1,LCD_DrawRect@i
 19158  00290C  C015  F024         	movff	LCD_DrawRect@posY1+1,LCD_DrawRect@i+1
 19159  002910  D00A               	goto	l5650
 19160  002912                     l299:
 19161                           
 19162                           ;libraries/lcd_highlevel.c: 694:     {;libraries/lcd_highlevel.c: 695:       PORTA = col
      +                          orH; LATC3 = 0; LATC3 = 1;;
 19163  002912  C021  FF80         	movff	LCD_DrawRect@colorH,3968	;volatile
 19164  002916  968B               	bcf	3979,3,c	;volatile
 19165  002918  868B               	bsf	3979,3,c	;volatile
 19166                           
 19167                           ;libraries/lcd_highlevel.c: 696:       PORTA = colorL; LATC3 = 0; LATC3 = 1;;
 19168  00291A  C022  FF80         	movff	LCD_DrawRect@colorL,3968	;volatile
 19169  00291E  968B               	bcf	3979,3,c	;volatile
 19170  002920  868B               	bsf	3979,3,c	;volatile
 19171                           
 19172                           ;libraries/lcd_highlevel.c: 697:     }
 19173  002922  4A23               	infsnz	LCD_DrawRect@i^0,f,c
 19174  002924  2A24               	incf	(LCD_DrawRect@i+1)^0,f,c
 19175  002926                     l5650:
 19176  002926  5023               	movf	LCD_DrawRect@i^0,w,c
 19177  002928  5C18               	subwf	LCD_DrawRect@posY2^0,w,c
 19178  00292A  5024               	movf	(LCD_DrawRect@i+1)^0,w,c
 19179  00292C  5819               	subwfb	(LCD_DrawRect@posY2+1)^0,w,c
 19180  00292E  A0D8               	btfss	status,0,c
 19181  002930  0012               	return	
 19182  002932  D7EF               	goto	l299
 19183  002934                     __end_of_LCD_DrawRect:
 19184                           	callstack 0
 19185                           
 19186 ;; *************** function _XF_popEvent *****************
 19187 ;; Defined at:
 19188 ;;		line 72 in file "xf/xf.c"
 19189 ;; Parameters:    Size  Location     Type
 19190 ;;  inISR           1    wreg     _Bool 
 19191 ;; Auto vars:     Size  Location     Type
 19192 ;;  inISR           1   24[COMRAM] _Bool 
 19193 ;;  ev              1   23[COMRAM] unsigned char 
 19194 ;; Return value:  Size  Location     Type
 19195 ;;                  1    wreg      unsigned char 
 19196 ;; Registers used:
 19197 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19198 ;; Tracked objects:
 19199 ;;		On entry : 0/0
 19200 ;;		On exit  : 0/0
 19201 ;;		Unchanged: 0/0
 19202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19203 ;;      Params:         0       0       0       0       0       0       0
 19204 ;;      Locals:         2       0       0       0       0       0       0
 19205 ;;      Temps:          0       0       0       0       0       0       0
 19206 ;;      Totals:         2       0       0       0       0       0       0
 19207 ;;Total ram usage:        2 bytes
 19208 ;; Hardware stack levels used: 1
 19209 ;; Hardware stack levels required when called: 5
 19210 ;; This function calls:
 19211 ;;		_ENTERCRITICAL
 19212 ;;		_LEAVECRITICAL
 19213 ;;		___awmod
 19214 ;; This function is called by:
 19215 ;;		_Factory_exec
 19216 ;; This function uses a non-reentrant model
 19217 ;;
 19218                           
 19219                           	psect	text81
 19220  0054D0                     __ptext81:
 19221                           	callstack 0
 19222  0054D0                     _XF_popEvent:
 19223                           	callstack 24
 19224                           
 19225                           ;incstack = 0
 19226                           ;XF_popEvent@inISR stored from wreg
 19227  0054D0  6E19               	movwf	XF_popEvent@inISR^0,c
 19228                           
 19229                           ;xf/xf.c: 76:     ENTERCRITICAL(inISR);
 19230  0054D2  5019               	movf	XF_popEvent@inISR^0,w,c
 19231  0054D4  ECF4  F02C         	call	_ENTERCRITICAL
 19232                           
 19233                           ;xf/xf.c: 77:     if(theXF.in == theXF.out)
 19234  0054D8  0100               	movlb	0	; () banked
 19235  0054DA  5185               	movf	(_theXF+37)& (0+255),w,b
 19236  0054DC  1984               	xorwf	(_theXF+36)& (0+255),w,b
 19237  0054DE  A4D8               	btfss	status,2,c
 19238  0054E0  D005               	goto	l7620
 19239                           
 19240                           ; BSR set to: 0
 19241                           ;xf/xf.c: 78:     {;xf/xf.c: 79:       LEAVECRITICAL(inISR);
 19242  0054E2  5019               	movf	XF_popEvent@inISR^0,w,c
 19243  0054E4  ECEE  F02C         	call	_LEAVECRITICAL
 19244                           
 19245                           ;xf/xf.c: 80:       return ev;
 19246  0054E8  0E00               	movlw	0
 19247  0054EA  0012               	return	
 19248  0054EC                     l7620:
 19249                           
 19250                           ; BSR set to: 0
 19251                           ;xf/xf.c: 82:     ev = theXF.eventQueue[theXF.out];
 19252  0054EC  5185               	movf	(_theXF+37)& (0+255),w,b
 19253  0054EE  0F78               	addlw	low (_theXF+24)
 19254  0054F0  6ED9               	movwf	fsr2l,c
 19255  0054F2  6ADA               	clrf	fsr2h,c
 19256  0054F4  50DF               	movf	indf2,w,c
 19257  0054F6  6E18               	movwf	XF_popEvent@ev^0,c
 19258                           
 19259                           ; BSR set to: 0
 19260                           ;xf/xf.c: 83:     theXF.out = (theXF.out + 1)%(uint8_t)sizeof(theXF.eventQueue);
 19261  0054F8  0E01               	movlw	1
 19262  0054FA  2585               	addwf	(_theXF+37)& (0+255),w,b
 19263  0054FC  6E12               	movwf	___awmod@dividend^0,c
 19264  0054FE  6A13               	clrf	(___awmod@dividend+1)^0,c
 19265  005500  0E00               	movlw	0
 19266  005502  2213               	addwfc	(___awmod@dividend+1)^0,f,c
 19267  005504  0E00               	movlw	0
 19268  005506  6E15               	movwf	(___awmod@divisor+1)^0,c
 19269  005508  0E0C               	movlw	12
 19270  00550A  6E14               	movwf	___awmod@divisor^0,c
 19271  00550C  ECF4  F028         	call	___awmod	;wreg free
 19272  005510  5012               	movf	?___awmod^0,w,c
 19273  005512  6F85               	movwf	(_theXF+37)& (0+255),b
 19274                           
 19275                           ; BSR set to: 0
 19276                           ;xf/xf.c: 84:     LEAVECRITICAL(inISR);
 19277  005514  5019               	movf	XF_popEvent@inISR^0,w,c
 19278  005516  ECEE  F02C         	call	_LEAVECRITICAL
 19279                           
 19280                           ;xf/xf.c: 85:     return ev;
 19281  00551A  5018               	movf	XF_popEvent@ev^0,w,c
 19282  00551C  0012               	return		;funcret
 19283  00551E                     __end_of_XF_popEvent:
 19284                           	callstack 0
 19285                           
 19286 ;; *************** function ___awmod *****************
 19287 ;; Defined at:
 19288 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awmod.c"
 19289 ;; Parameters:    Size  Location     Type
 19290 ;;  dividend        2   17[COMRAM] int 
 19291 ;;  divisor         2   19[COMRAM] int 
 19292 ;; Auto vars:     Size  Location     Type
 19293 ;;  sign            1   22[COMRAM] unsigned char 
 19294 ;;  counter         1   21[COMRAM] unsigned char 
 19295 ;; Return value:  Size  Location     Type
 19296 ;;                  2   17[COMRAM] int 
 19297 ;; Registers used:
 19298 ;;		wreg, status,2, status,0
 19299 ;; Tracked objects:
 19300 ;;		On entry : 3F/0
 19301 ;;		On exit  : 3F/0
 19302 ;;		Unchanged: 3F/0
 19303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19304 ;;      Params:         4       0       0       0       0       0       0
 19305 ;;      Locals:         2       0       0       0       0       0       0
 19306 ;;      Temps:          0       0       0       0       0       0       0
 19307 ;;      Totals:         6       0       0       0       0       0       0
 19308 ;;Total ram usage:        6 bytes
 19309 ;; Hardware stack levels used: 1
 19310 ;; Hardware stack levels required when called: 4
 19311 ;; This function calls:
 19312 ;;		Nothing
 19313 ;; This function is called by:
 19314 ;;		_XF_pushEvent
 19315 ;;		_XF_popEvent
 19316 ;; This function uses a non-reentrant model
 19317 ;;
 19318                           
 19319                           	psect	text82
 19320  0051E8                     __ptext82:
 19321                           	callstack 0
 19322  0051E8                     ___awmod:
 19323                           	callstack 20
 19324                           
 19325                           ; BSR set to: 0
 19326                           
 19327                           ;incstack = 0
 19328  0051E8  0E00               	movlw	0
 19329  0051EA  6E17               	movwf	___awmod@sign^0,c
 19330                           
 19331                           ; BSR set to: 0
 19332  0051EC  AE13               	btfss	(___awmod@dividend+1)^0,7,c
 19333  0051EE  D006               	goto	l5844
 19334                           
 19335                           ; BSR set to: 0
 19336  0051F0  6C12               	negf	___awmod@dividend^0,c
 19337  0051F2  1E13               	comf	(___awmod@dividend+1)^0,f,c
 19338  0051F4  B0D8               	btfsc	status,0,c
 19339  0051F6  2A13               	incf	(___awmod@dividend+1)^0,f,c
 19340                           
 19341                           ; BSR set to: 0
 19342  0051F8  0E01               	movlw	1
 19343  0051FA  6E17               	movwf	___awmod@sign^0,c
 19344  0051FC                     l5844:
 19345                           
 19346                           ; BSR set to: 0
 19347  0051FC  AE15               	btfss	(___awmod@divisor+1)^0,7,c
 19348  0051FE  D004               	goto	l5848
 19349                           
 19350                           ; BSR set to: 0
 19351  005200  6C14               	negf	___awmod@divisor^0,c
 19352  005202  1E15               	comf	(___awmod@divisor+1)^0,f,c
 19353  005204  B0D8               	btfsc	status,0,c
 19354  005206  2A15               	incf	(___awmod@divisor+1)^0,f,c
 19355  005208                     l5848:
 19356                           
 19357                           ; BSR set to: 0
 19358  005208  5014               	movf	___awmod@divisor^0,w,c
 19359  00520A  1015               	iorwf	(___awmod@divisor+1)^0,w,c
 19360  00520C  B4D8               	btfsc	status,2,c
 19361  00520E  D018               	goto	l5864
 19362                           
 19363                           ; BSR set to: 0
 19364  005210  0E01               	movlw	1
 19365  005212  6E16               	movwf	___awmod@counter^0,c
 19366  005214  D004               	goto	l5854
 19367  005216                     l5852:
 19368                           
 19369                           ; BSR set to: 0
 19370  005216  90D8               	bcf	status,0,c
 19371  005218  3614               	rlcf	___awmod@divisor^0,f,c
 19372  00521A  3615               	rlcf	(___awmod@divisor+1)^0,f,c
 19373  00521C  2A16               	incf	___awmod@counter^0,f,c
 19374  00521E                     l5854:
 19375                           
 19376                           ; BSR set to: 0
 19377  00521E  AE15               	btfss	(___awmod@divisor+1)^0,7,c
 19378  005220  D7FA               	goto	l5852
 19379  005222                     u3530:
 19380                           
 19381                           ; BSR set to: 0
 19382  005222  5014               	movf	___awmod@divisor^0,w,c
 19383  005224  5C12               	subwf	___awmod@dividend^0,w,c
 19384  005226  5015               	movf	(___awmod@divisor+1)^0,w,c
 19385  005228  5813               	subwfb	(___awmod@dividend+1)^0,w,c
 19386  00522A  A0D8               	btfss	status,0,c
 19387  00522C  D004               	goto	l5860
 19388                           
 19389                           ; BSR set to: 0
 19390  00522E  5014               	movf	___awmod@divisor^0,w,c
 19391  005230  5E12               	subwf	___awmod@dividend^0,f,c
 19392  005232  5015               	movf	(___awmod@divisor+1)^0,w,c
 19393  005234  5A13               	subwfb	(___awmod@dividend+1)^0,f,c
 19394  005236                     l5860:
 19395                           
 19396                           ; BSR set to: 0
 19397  005236  90D8               	bcf	status,0,c
 19398  005238  3215               	rrcf	(___awmod@divisor+1)^0,f,c
 19399  00523A  3214               	rrcf	___awmod@divisor^0,f,c
 19400                           
 19401                           ; BSR set to: 0
 19402  00523C  2E16               	decfsz	___awmod@counter^0,f,c
 19403  00523E  D7F1               	goto	u3530
 19404  005240                     l5864:
 19405                           
 19406                           ; BSR set to: 0
 19407  005240  5017               	movf	___awmod@sign^0,w,c
 19408  005242  B4D8               	btfsc	status,2,c
 19409  005244  D004               	goto	l5868
 19410                           
 19411                           ; BSR set to: 0
 19412  005246  6C12               	negf	___awmod@dividend^0,c
 19413  005248  1E13               	comf	(___awmod@dividend+1)^0,f,c
 19414  00524A  B0D8               	btfsc	status,0,c
 19415  00524C  2A13               	incf	(___awmod@dividend+1)^0,f,c
 19416  00524E                     l5868:
 19417                           
 19418                           ; BSR set to: 0
 19419  00524E  C012  F012         	movff	___awmod@dividend,?___awmod
 19420  005252  C013  F013         	movff	___awmod@dividend+1,?___awmod+1
 19421                           
 19422                           ; BSR set to: 0
 19423  005256  0012               	return		;funcret
 19424  005258                     __end_of___awmod:
 19425                           	callstack 0
 19426                           
 19427 ;; *************** function _LEAVECRITICAL *****************
 19428 ;; Defined at:
 19429 ;;		line 186 in file "xf/xf.c"
 19430 ;; Parameters:    Size  Location     Type
 19431 ;;  inISR           1    wreg     _Bool 
 19432 ;; Auto vars:     Size  Location     Type
 19433 ;;  inISR           1   17[COMRAM] _Bool 
 19434 ;; Return value:  Size  Location     Type
 19435 ;;                  1    wreg      void 
 19436 ;; Registers used:
 19437 ;;		wreg, status,2
 19438 ;; Tracked objects:
 19439 ;;		On entry : 0/0
 19440 ;;		On exit  : 0/0
 19441 ;;		Unchanged: 0/0
 19442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19443 ;;      Params:         0       0       0       0       0       0       0
 19444 ;;      Locals:         1       0       0       0       0       0       0
 19445 ;;      Temps:          0       0       0       0       0       0       0
 19446 ;;      Totals:         1       0       0       0       0       0       0
 19447 ;;Total ram usage:        1 bytes
 19448 ;; Hardware stack levels used: 1
 19449 ;; Hardware stack levels required when called: 4
 19450 ;; This function calls:
 19451 ;;		Nothing
 19452 ;; This function is called by:
 19453 ;;		_XF_pushEvent
 19454 ;;		_XF_popEvent
 19455 ;;		_XF_scheduleTimer
 19456 ;;		_XF_unscheduleTimer
 19457 ;; This function uses a non-reentrant model
 19458 ;;
 19459                           
 19460                           	psect	text83
 19461  0059DC                     __ptext83:
 19462                           	callstack 0
 19463  0059DC                     _LEAVECRITICAL:
 19464                           	callstack 22
 19465                           
 19466                           ; BSR set to: 0
 19467                           ;incstack = 0
 19468                           ;LEAVECRITICAL@inISR stored from wreg
 19469  0059DC  6E12               	movwf	LEAVECRITICAL@inISR^0,c
 19470                           
 19471                           ;xf/xf.c: 186: static void LEAVECRITICAL(_Bool inISR);xf/xf.c: 187: {;xf/xf.c: 188:     
      +                          if (inISR == 0)
 19472  0059DE  5012               	movf	LEAVECRITICAL@inISR^0,w,c
 19473  0059E0  A4D8               	btfss	status,2,c
 19474  0059E2  0012               	return	
 19475                           
 19476                           ;xf/xf.c: 189:     {;xf/xf.c: 190:       GIE = 1;
 19477  0059E4  8EF2               	bsf	4082,7,c	;volatile
 19478  0059E6  0012               	return		;funcret
 19479  0059E8                     __end_of_LEAVECRITICAL:
 19480                           	callstack 0
 19481                           
 19482 ;; *************** function _ENTERCRITICAL *****************
 19483 ;; Defined at:
 19484 ;;		line 172 in file "xf/xf.c"
 19485 ;; Parameters:    Size  Location     Type
 19486 ;;  inISR           1    wreg     _Bool 
 19487 ;; Auto vars:     Size  Location     Type
 19488 ;;  inISR           1   17[COMRAM] _Bool 
 19489 ;; Return value:  Size  Location     Type
 19490 ;;                  1    wreg      void 
 19491 ;; Registers used:
 19492 ;;		wreg, status,2
 19493 ;; Tracked objects:
 19494 ;;		On entry : 0/0
 19495 ;;		On exit  : 0/0
 19496 ;;		Unchanged: 0/0
 19497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19498 ;;      Params:         0       0       0       0       0       0       0
 19499 ;;      Locals:         1       0       0       0       0       0       0
 19500 ;;      Temps:          0       0       0       0       0       0       0
 19501 ;;      Totals:         1       0       0       0       0       0       0
 19502 ;;Total ram usage:        1 bytes
 19503 ;; Hardware stack levels used: 1
 19504 ;; Hardware stack levels required when called: 4
 19505 ;; This function calls:
 19506 ;;		Nothing
 19507 ;; This function is called by:
 19508 ;;		_XF_pushEvent
 19509 ;;		_XF_popEvent
 19510 ;;		_XF_scheduleTimer
 19511 ;;		_XF_unscheduleTimer
 19512 ;; This function uses a non-reentrant model
 19513 ;;
 19514                           
 19515                           	psect	text84
 19516  0059E8                     __ptext84:
 19517                           	callstack 0
 19518  0059E8                     _ENTERCRITICAL:
 19519                           	callstack 22
 19520                           
 19521                           ;incstack = 0
 19522                           ;ENTERCRITICAL@inISR stored from wreg
 19523  0059E8  6E12               	movwf	ENTERCRITICAL@inISR^0,c
 19524                           
 19525                           ;xf/xf.c: 172: static void ENTERCRITICAL(_Bool inISR);xf/xf.c: 173: {;xf/xf.c: 174:     
      +                          if (inISR == 0)
 19526  0059EA  5012               	movf	ENTERCRITICAL@inISR^0,w,c
 19527  0059EC  A4D8               	btfss	status,2,c
 19528  0059EE  0012               	return	
 19529                           
 19530                           ;xf/xf.c: 175:     {;xf/xf.c: 176:       GIE = 0;
 19531  0059F0  9EF2               	bcf	4082,7,c	;volatile
 19532  0059F2  0012               	return		;funcret
 19533  0059F4                     __end_of_ENTERCRITICAL:
 19534                           	callstack 0
 19535                           
 19536 ;; *************** function _isr *****************
 19537 ;; Defined at:
 19538 ;;		line 23 in file "main.c"
 19539 ;; Parameters:    Size  Location     Type
 19540 ;;		None
 19541 ;; Auto vars:     Size  Location     Type
 19542 ;;		None
 19543 ;; Return value:  Size  Location     Type
 19544 ;;                  1    wreg      void 
 19545 ;; Registers used:
 19546 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19547 ;; Tracked objects:
 19548 ;;		On entry : 0/0
 19549 ;;		On exit  : 0/0
 19550 ;;		Unchanged: 0/0
 19551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19552 ;;      Params:         0       0       0       0       0       0       0
 19553 ;;      Locals:         0       0       0       0       0       0       0
 19554 ;;      Temps:          4       0       0       0       0       0       0
 19555 ;;      Totals:         4       0       0       0       0       0       0
 19556 ;;Total ram usage:        4 bytes
 19557 ;; Hardware stack levels used: 1
 19558 ;; Hardware stack levels required when called: 3
 19559 ;; This function calls:
 19560 ;;		_XF_decrementAndQueueTimers
 19561 ;;		i2_XF_pushEvent
 19562 ;; This function is called by:
 19563 ;;		Interrupt level 2
 19564 ;; This function uses a non-reentrant model
 19565 ;;
 19566                           
 19567                           	psect	intcode
 19568  000008                     __pintcode:
 19569                           	callstack 0
 19570  000008                     _isr:
 19571                           	callstack 14
 19572                           
 19573                           ;incstack = 0
 19574  000008  824E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19575  00000A  CFD9 F00E          	movff	fsr2l,??_isr
 19576  00000E  CFDA F00F          	movff	fsr2h,??_isr+1
 19577  000012  CFF3 F010          	movff	prodl,??_isr+2
 19578  000016  CFF4 F011          	movff	prodh,??_isr+3
 19579                           
 19580                           ;main.c: 25:     if((INT1IF==1)&&(INT1IE==1))
 19581  00001A  B0F0               	btfsc	4080,0,c	;volatile
 19582  00001C  A6F0               	btfss	4080,3,c	;volatile
 19583  00001E  D013               	goto	i2l7910
 19584                           
 19585                           ;main.c: 26:     {;main.c: 27:         if(INTEDG1==0)
 19586  000020  BAF1               	btfsc	4081,5,c	;volatile
 19587  000022  D008               	goto	i2l769
 19588                           
 19589                           ;main.c: 28:         {;main.c: 29:             INTEDG1=1;
 19590  000024  8AF1               	bsf	4081,5,c	;volatile
 19591                           
 19592                           ;main.c: 30:             INT1IF=0;
 19593  000026  90F0               	bcf	4080,0,c	;volatile
 19594                           
 19595                           ;main.c: 31:             XF_pushEvent(evPress,1);
 19596  000028  0E01               	movlw	1
 19597  00002A  6E07               	movwf	i2XF_pushEvent@inISR^0,c
 19598  00002C  0E01               	movlw	1
 19599  00002E  EC3F  F02A         	call	i2_XF_pushEvent
 19600                           
 19601                           ;main.c: 33:         }
 19602  000032  D009               	goto	i2l7910
 19603  000034                     i2l769:
 19604  000034  AAF1               	btfss	4081,5,c	;volatile
 19605  000036  D007               	goto	i2l7910
 19606                           
 19607                           ;main.c: 35:         {;main.c: 36:             INTEDG1=0;
 19608  000038  9AF1               	bcf	4081,5,c	;volatile
 19609                           
 19610                           ;main.c: 37:             INT1IF=0;
 19611  00003A  90F0               	bcf	4080,0,c	;volatile
 19612                           
 19613                           ;main.c: 38:             XF_pushEvent(evRelease,1);
 19614  00003C  0E01               	movlw	1
 19615  00003E  6E07               	movwf	i2XF_pushEvent@inISR^0,c
 19616  000040  0E02               	movlw	2
 19617  000042  EC3F  F02A         	call	i2_XF_pushEvent
 19618  000046                     i2l7910:
 19619                           
 19620                           ;main.c: 41:     if((TMR0IF==1)&&(TMR0IE==1))
 19621  000046  B4F2               	btfsc	4082,2,c	;volatile
 19622  000048  AAF2               	btfss	4082,5,c	;volatile
 19623  00004A  D007               	goto	i2l773
 19624                           
 19625                           ;main.c: 42:     {;main.c: 43:         XF_decrementAndQueueTimers();
 19626  00004C  ECDD  F026         	call	_XF_decrementAndQueueTimers	;wreg free
 19627                           
 19628                           ;main.c: 44:         TMR0H=0xFB;
 19629  000050  0EFB               	movlw	251
 19630  000052  6ED7               	movwf	215,c	;volatile
 19631                           
 19632                           ;main.c: 45:         TMR0L=0x1D;
 19633  000054  0E1D               	movlw	29
 19634  000056  6ED6               	movwf	214,c	;volatile
 19635                           
 19636                           ;main.c: 46:         TMR0IF=0;
 19637  000058  94F2               	bcf	4082,2,c	;volatile
 19638  00005A                     i2l773:
 19639  00005A  C011  FFF4         	movff	??_isr+3,prodh
 19640  00005E  C010  FFF3         	movff	??_isr+2,prodl
 19641  000062  C00F  FFDA         	movff	??_isr+1,fsr2h
 19642  000066  C00E  FFD9         	movff	??_isr,fsr2l
 19643  00006A  924E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19644  00006C  0011               	retfie		f
 19645  00006E                     __end_of_isr:
 19646                           	callstack 0
 19647                           
 19648 ;; *************** function _XF_decrementAndQueueTimers *****************
 19649 ;; Defined at:
 19650 ;;		line 139 in file "xf/xf.c"
 19651 ;; Parameters:    Size  Location     Type
 19652 ;;		None
 19653 ;; Auto vars:     Size  Location     Type
 19654 ;;  i               2   11[COMRAM] int 
 19655 ;; Return value:  Size  Location     Type
 19656 ;;                  1    wreg      void 
 19657 ;; Registers used:
 19658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19659 ;; Tracked objects:
 19660 ;;		On entry : 0/0
 19661 ;;		On exit  : 0/0
 19662 ;;		Unchanged: 0/0
 19663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19664 ;;      Params:         0       0       0       0       0       0       0
 19665 ;;      Locals:         2       0       0       0       0       0       0
 19666 ;;      Temps:          2       0       0       0       0       0       0
 19667 ;;      Totals:         4       0       0       0       0       0       0
 19668 ;;Total ram usage:        4 bytes
 19669 ;; Hardware stack levels used: 1
 19670 ;; Hardware stack levels required when called: 2
 19671 ;; This function calls:
 19672 ;;		i2_XF_pushEvent
 19673 ;;		i2_XF_unscheduleTimer
 19674 ;; This function is called by:
 19675 ;;		_isr
 19676 ;; This function uses a non-reentrant model
 19677 ;;
 19678                           
 19679                           	psect	text86
 19680  004DBA                     __ptext86:
 19681                           	callstack 0
 19682  004DBA                     _XF_decrementAndQueueTimers:
 19683                           	callstack 14
 19684                           
 19685                           ;xf/xf.c: 141:     int i;;xf/xf.c: 142:     for (i=0; i<8; i++)
 19686                           
 19687                           ;incstack = 0
 19688  004DBA  0E00               	movlw	0
 19689  004DBC  6E0D               	movwf	(XF_decrementAndQueueTimers@i+1)^0,c
 19690  004DBE  0E00               	movlw	0
 19691  004DC0  6E0C               	movwf	XF_decrementAndQueueTimers@i^0,c
 19692  004DC2                     i2l7882:
 19693                           
 19694                           ;xf/xf.c: 143:     {;xf/xf.c: 144:         if (theXF.timerList[i].ev != NULLEVENT)
 19695  004DC2  500C               	movf	XF_decrementAndQueueTimers@i^0,w,c
 19696  004DC4  0D03               	mullw	3
 19697  004DC6  50F3               	movf	243,w,c
 19698  004DC8  0F62               	addlw	low (_theXF+2)
 19699  004DCA  6ED9               	movwf	fsr2l,c
 19700  004DCC  6ADA               	clrf	fsr2h,c
 19701  004DCE  50DF               	movf	indf2,w,c
 19702  004DD0  B4D8               	btfsc	status,2,c
 19703  004DD2  D031               	goto	i2l7892
 19704                           
 19705                           ;xf/xf.c: 145:         {;xf/xf.c: 147:             theXF.timerList[i].tm-=1;
 19706  004DD4  500C               	movf	XF_decrementAndQueueTimers@i^0,w,c
 19707  004DD6  0D03               	mullw	3
 19708  004DD8  50F3               	movf	243,w,c
 19709  004DDA  0F60               	addlw	low _theXF
 19710  004DDC  6ED9               	movwf	fsr2l,c
 19711  004DDE  6ADA               	clrf	fsr2h,c
 19712  004DE0  06DE               	decf	postinc2,f,c
 19713  004DE2  0E00               	movlw	0
 19714  004DE4  5ADD               	subwfb	postdec2,f,c
 19715                           
 19716                           ;xf/xf.c: 148:             if (theXF.timerList[i].tm ==0)
 19717  004DE6  500C               	movf	XF_decrementAndQueueTimers@i^0,w,c
 19718  004DE8  0D03               	mullw	3
 19719  004DEA  50F3               	movf	243,w,c
 19720  004DEC  0F60               	addlw	low _theXF
 19721  004DEE  6ED9               	movwf	fsr2l,c
 19722  004DF0  6ADA               	clrf	fsr2h,c
 19723  004DF2  50DE               	movf	postinc2,w,c
 19724  004DF4  10DE               	iorwf	postinc2,w,c
 19725  004DF6  A4D8               	btfss	status,2,c
 19726  004DF8  D01E               	goto	i2l7892
 19727                           
 19728                           ;xf/xf.c: 149:             {;xf/xf.c: 150:                 if(XF_pushEvent(theXF.timerLi
      +                          st[i].ev, 1) == 1)
 19729  004DFA  0E01               	movlw	1
 19730  004DFC  6E07               	movwf	i2XF_pushEvent@inISR^0,c
 19731  004DFE  500C               	movf	XF_decrementAndQueueTimers@i^0,w,c
 19732  004E00  0D03               	mullw	3
 19733  004E02  50F3               	movf	243,w,c
 19734  004E04  0F62               	addlw	low (_theXF+2)
 19735  004E06  6ED9               	movwf	fsr2l,c
 19736  004E08  6ADA               	clrf	fsr2h,c
 19737  004E0A  50DF               	movf	indf2,w,c
 19738  004E0C  EC3F  F02A         	call	i2_XF_pushEvent
 19739  004E10  06E8               	decf	wreg,f,c
 19740  004E12  A4D8               	btfss	status,2,c
 19741  004E14  D006               	goto	i2l7890
 19742                           
 19743                           ;xf/xf.c: 151:                 {;xf/xf.c: 152:                   XF_unscheduleTimer(i, 1
      +                          );
 19744  004E16  0E01               	movlw	1
 19745  004E18  6E02               	movwf	i2XF_unscheduleTimer@inISR^0,c
 19746  004E1A  500C               	movf	XF_decrementAndQueueTimers@i^0,w,c
 19747  004E1C  EC8E  F02B         	call	i2_XF_unscheduleTimer
 19748                           
 19749                           ;xf/xf.c: 153:                 }
 19750  004E20  D00A               	goto	i2l7892
 19751  004E22                     i2l7890:
 19752                           
 19753                           ;xf/xf.c: 155:                 {;xf/xf.c: 156:                   theXF.timerList[i].tm=1
      +                          ;
 19754  004E22  500C               	movf	XF_decrementAndQueueTimers@i^0,w,c
 19755  004E24  0D03               	mullw	3
 19756  004E26  50F3               	movf	243,w,c
 19757  004E28  0F60               	addlw	low _theXF
 19758  004E2A  6ED9               	movwf	fsr2l,c
 19759  004E2C  6ADA               	clrf	fsr2h,c
 19760  004E2E  0E01               	movlw	1
 19761  004E30  6EDE               	movwf	postinc2,c
 19762  004E32  0E00               	movlw	0
 19763  004E34  6EDD               	movwf	postdec2,c
 19764  004E36                     i2l7892:
 19765                           
 19766                           ;xf/xf.c: 160:     }
 19767  004E36  4A0C               	infsnz	XF_decrementAndQueueTimers@i^0,f,c
 19768  004E38  2A0D               	incf	(XF_decrementAndQueueTimers@i+1)^0,f,c
 19769  004E3A  BE0D               	btfsc	(XF_decrementAndQueueTimers@i+1)^0,7,c
 19770  004E3C  D7C2               	goto	i2l7882
 19771  004E3E  500D               	movf	(XF_decrementAndQueueTimers@i+1)^0,w,c
 19772  004E40  E105               	bnz	i2u567_40
 19773  004E42  0E08               	movlw	8
 19774  004E44  5C0C               	subwf	XF_decrementAndQueueTimers@i^0,w,c
 19775  004E46  B0D8               	btfsc	status,0,c
 19776  004E48  0012               	return	
 19777  004E4A  D7BB               	goto	i2l7882
 19778  004E4C                     i2u567_40:
 19779  004E4C  0012               	return		;funcret
 19780  004E4E                     __end_of_XF_decrementAndQueueTimers:
 19781                           	callstack 0
 19782                           
 19783 ;; *************** function i2_XF_unscheduleTimer *****************
 19784 ;; Defined at:
 19785 ;;		line 125 in file "xf/xf.c"
 19786 ;; Parameters:    Size  Location     Type
 19787 ;;  id              1    wreg     unsigned char 
 19788 ;;  inISR           1    1[COMRAM] _Bool 
 19789 ;; Auto vars:     Size  Location     Type
 19790 ;;  id              1    2[COMRAM] unsigned char 
 19791 ;; Return value:  Size  Location     Type
 19792 ;;                  1    wreg      void 
 19793 ;; Registers used:
 19794 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19795 ;; Tracked objects:
 19796 ;;		On entry : 0/0
 19797 ;;		On exit  : 0/0
 19798 ;;		Unchanged: 0/0
 19799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19800 ;;      Params:         1       0       0       0       0       0       0
 19801 ;;      Locals:         1       0       0       0       0       0       0
 19802 ;;      Temps:          0       0       0       0       0       0       0
 19803 ;;      Totals:         2       0       0       0       0       0       0
 19804 ;;Total ram usage:        2 bytes
 19805 ;; Hardware stack levels used: 1
 19806 ;; Hardware stack levels required when called: 1
 19807 ;; This function calls:
 19808 ;;		i2_ENTERCRITICAL
 19809 ;;		i2_LEAVECRITICAL
 19810 ;; This function is called by:
 19811 ;;		_XF_decrementAndQueueTimers
 19812 ;; This function uses a non-reentrant model
 19813 ;;
 19814                           
 19815                           	psect	text87
 19816  00571C                     __ptext87:
 19817                           	callstack 0
 19818  00571C                     i2_XF_unscheduleTimer:
 19819                           	callstack 14
 19820                           
 19821                           ;incstack = 0
 19822                           ;i2XF_unscheduleTimer@id stored from wreg
 19823  00571C  6E03               	movwf	i2XF_unscheduleTimer@id^0,c
 19824                           
 19825                           ;xf/xf.c: 125: void XF_unscheduleTimer(TimerID id, _Bool inISR);xf/xf.c: 126: {;xf/xf.c:
      +                           127:     ENTERCRITICAL(inISR);
 19826  00571E  5002               	movf	i2XF_unscheduleTimer@inISR^0,w,c
 19827  005720  EC00  F02D         	call	i2_ENTERCRITICAL
 19828                           
 19829                           ;xf/xf.c: 128:     theXF.timerList[id].tm = 0;
 19830  005724  5003               	movf	i2XF_unscheduleTimer@id^0,w,c
 19831  005726  0D03               	mullw	3
 19832  005728  50F3               	movf	243,w,c
 19833  00572A  0F60               	addlw	low _theXF
 19834  00572C  6ED9               	movwf	fsr2l,c
 19835  00572E  6ADA               	clrf	fsr2h,c
 19836  005730  0E00               	movlw	0
 19837  005732  6EDE               	movwf	postinc2,c
 19838  005734  0E00               	movlw	0
 19839  005736  6EDD               	movwf	postdec2,c
 19840                           
 19841                           ;xf/xf.c: 129:     theXF.timerList[id].ev = NULLEVENT;
 19842  005738  5003               	movf	i2XF_unscheduleTimer@id^0,w,c
 19843  00573A  0D03               	mullw	3
 19844  00573C  50F3               	movf	243,w,c
 19845  00573E  0F62               	addlw	low (_theXF+2)
 19846  005740  6ED9               	movwf	fsr2l,c
 19847  005742  6ADA               	clrf	fsr2h,c
 19848  005744  0E00               	movlw	0
 19849  005746  6EDF               	movwf	indf2,c
 19850                           
 19851                           ;xf/xf.c: 130:     LEAVECRITICAL(inISR);
 19852  005748  5002               	movf	i2XF_unscheduleTimer@inISR^0,w,c
 19853  00574A  ECFA  F02C         	call	i2_LEAVECRITICAL
 19854  00574E  0012               	return		;funcret
 19855  005750                     __end_ofi2_XF_unscheduleTimer:
 19856                           	callstack 0
 19857                           
 19858 ;; *************** function i2_XF_pushEvent *****************
 19859 ;; Defined at:
 19860 ;;		line 49 in file "xf/xf.c"
 19861 ;; Parameters:    Size  Location     Type
 19862 ;;  ev              1    wreg     unsigned char 
 19863 ;;  inISR           1    6[COMRAM] _Bool 
 19864 ;; Auto vars:     Size  Location     Type
 19865 ;;  ev              1    7[COMRAM] unsigned char 
 19866 ;;  temp            1    8[COMRAM] unsigned char 
 19867 ;; Return value:  Size  Location     Type
 19868 ;;                  1    wreg      _Bool 
 19869 ;; Registers used:
 19870 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19871 ;; Tracked objects:
 19872 ;;		On entry : 0/0
 19873 ;;		On exit  : 0/0
 19874 ;;		Unchanged: 0/0
 19875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19876 ;;      Params:         1       0       0       0       0       0       0
 19877 ;;      Locals:         2       0       0       0       0       0       0
 19878 ;;      Temps:          0       0       0       0       0       0       0
 19879 ;;      Totals:         3       0       0       0       0       0       0
 19880 ;;Total ram usage:        3 bytes
 19881 ;; Hardware stack levels used: 1
 19882 ;; Hardware stack levels required when called: 1
 19883 ;; This function calls:
 19884 ;;		i2_ENTERCRITICAL
 19885 ;;		i2_LEAVECRITICAL
 19886 ;;		i2___awmod
 19887 ;; This function is called by:
 19888 ;;		_XF_decrementAndQueueTimers
 19889 ;;		_isr
 19890 ;; This function uses a non-reentrant model
 19891 ;;
 19892                           
 19893                           	psect	text88
 19894  00547E                     __ptext88:
 19895                           	callstack 0
 19896  00547E                     i2_XF_pushEvent:
 19897                           	callstack 15
 19898                           
 19899                           ;incstack = 0
 19900                           ;i2XF_pushEvent@ev stored from wreg
 19901  00547E  6E08               	movwf	i2XF_pushEvent@ev^0,c
 19902                           
 19903                           ;xf/xf.c: 49: _Bool XF_pushEvent(Event ev, _Bool inISR);xf/xf.c: 50: {;xf/xf.c: 51:   ui
      +                          nt8_t temp;;xf/xf.c: 52:     ENTERCRITICAL(inISR);
 19904  005480  5007               	movf	i2XF_pushEvent@inISR^0,w,c
 19905  005482  EC00  F02D         	call	i2_ENTERCRITICAL
 19906                           
 19907                           ;xf/xf.c: 54:     temp = (theXF.in+1) % (uint8_t)sizeof(theXF.eventQueue);
 19908  005486  0E01               	movlw	1
 19909  005488  0100               	movlb	0	; () banked
 19910  00548A  2584               	addwf	(_theXF+36)& (0+255),w,b
 19911  00548C  6E01               	movwf	i2___awmod@dividend^0,c
 19912  00548E  6A02               	clrf	(i2___awmod@dividend+1)^0,c
 19913  005490  0E00               	movlw	0
 19914  005492  2202               	addwfc	(i2___awmod@dividend+1)^0,f,c
 19915  005494  0E00               	movlw	0
 19916  005496  6E04               	movwf	(i2___awmod@divisor+1)^0,c
 19917  005498  0E0C               	movlw	12
 19918  00549A  6E03               	movwf	i2___awmod@divisor^0,c
 19919  00549C  EC2C  F029         	call	i2___awmod	;wreg free
 19920  0054A0  5001               	movf	?i2___awmod^0,w,c
 19921  0054A2  6E09               	movwf	i2XF_pushEvent@temp^0,c
 19922                           
 19923                           ; BSR set to: 0
 19924                           ;xf/xf.c: 55:     if(temp == theXF.out)
 19925  0054A4  5009               	movf	i2XF_pushEvent@temp^0,w,c
 19926  0054A6  1985               	xorwf	(_theXF+37)& (0+255),w,b
 19927  0054A8  A4D8               	btfss	status,2,c
 19928  0054AA  D005               	goto	i2l7792
 19929                           
 19930                           ; BSR set to: 0
 19931                           ;xf/xf.c: 56:     {;xf/xf.c: 57:       LEAVECRITICAL(inISR);
 19932  0054AC  5007               	movf	i2XF_pushEvent@inISR^0,w,c
 19933  0054AE  ECFA  F02C         	call	i2_LEAVECRITICAL
 19934                           
 19935                           ;xf/xf.c: 58:       return 0;
 19936  0054B2  0E00               	movlw	0
 19937  0054B4  0012               	return	
 19938  0054B6                     i2l7792:
 19939                           
 19940                           ; BSR set to: 0
 19941                           ;xf/xf.c: 60:     theXF.eventQueue[theXF.in] = ev;
 19942  0054B6  5184               	movf	(_theXF+36)& (0+255),w,b
 19943  0054B8  0F78               	addlw	low (_theXF+24)
 19944  0054BA  6ED9               	movwf	fsr2l,c
 19945  0054BC  6ADA               	clrf	fsr2h,c
 19946  0054BE  C008  FFDF         	movff	i2XF_pushEvent@ev,indf2
 19947                           
 19948                           ; BSR set to: 0
 19949                           ;xf/xf.c: 61:     theXF.in = temp;
 19950  0054C2  C009  F084         	movff	i2XF_pushEvent@temp,_theXF+36
 19951                           
 19952                           ; BSR set to: 0
 19953                           ;xf/xf.c: 62:     LEAVECRITICAL(inISR);
 19954  0054C6  5007               	movf	i2XF_pushEvent@inISR^0,w,c
 19955  0054C8  ECFA  F02C         	call	i2_LEAVECRITICAL
 19956                           
 19957                           ;xf/xf.c: 63:     return 1;
 19958  0054CC  0E01               	movlw	1
 19959  0054CE  0012               	return		;funcret
 19960  0054D0                     __end_ofi2_XF_pushEvent:
 19961                           	callstack 0
 19962                           
 19963 ;; *************** function i2___awmod *****************
 19964 ;; Defined at:
 19965 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awmod.c"
 19966 ;; Parameters:    Size  Location     Type
 19967 ;;  dividend        2    0[COMRAM] int 
 19968 ;;  divisor         2    2[COMRAM] int 
 19969 ;; Auto vars:     Size  Location     Type
 19970 ;;  sign            1    5[COMRAM] unsigned char 
 19971 ;;  counter         1    4[COMRAM] unsigned char 
 19972 ;; Return value:  Size  Location     Type
 19973 ;;                  2    0[COMRAM] int 
 19974 ;; Registers used:
 19975 ;;		wreg, status,2, status,0
 19976 ;; Tracked objects:
 19977 ;;		On entry : 3F/0
 19978 ;;		On exit  : 3F/0
 19979 ;;		Unchanged: 3F/0
 19980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19981 ;;      Params:         4       0       0       0       0       0       0
 19982 ;;      Locals:         2       0       0       0       0       0       0
 19983 ;;      Temps:          0       0       0       0       0       0       0
 19984 ;;      Totals:         6       0       0       0       0       0       0
 19985 ;;Total ram usage:        6 bytes
 19986 ;; Hardware stack levels used: 1
 19987 ;; This function calls:
 19988 ;;		Nothing
 19989 ;; This function is called by:
 19990 ;;		i2_XF_pushEvent
 19991 ;; This function uses a non-reentrant model
 19992 ;;
 19993                           
 19994                           	psect	text89
 19995  005258                     __ptext89:
 19996                           	callstack 0
 19997  005258                     i2___awmod:
 19998                           	callstack 15
 19999                           
 20000                           ; BSR set to: 0
 20001                           
 20002                           ;incstack = 0
 20003  005258  0E00               	movlw	0
 20004  00525A  6E06               	movwf	i2___awmod@sign^0,c
 20005                           
 20006                           ; BSR set to: 0
 20007  00525C  AE02               	btfss	(i2___awmod@dividend+1)^0,7,c
 20008  00525E  D006               	goto	i2l7544
 20009                           
 20010                           ; BSR set to: 0
 20011  005260  6C01               	negf	i2___awmod@dividend^0,c
 20012  005262  1E02               	comf	(i2___awmod@dividend+1)^0,f,c
 20013  005264  B0D8               	btfsc	status,0,c
 20014  005266  2A02               	incf	(i2___awmod@dividend+1)^0,f,c
 20015                           
 20016                           ; BSR set to: 0
 20017  005268  0E01               	movlw	1
 20018  00526A  6E06               	movwf	i2___awmod@sign^0,c
 20019  00526C                     i2l7544:
 20020                           
 20021                           ; BSR set to: 0
 20022  00526C  AE04               	btfss	(i2___awmod@divisor+1)^0,7,c
 20023  00526E  D004               	goto	i2l7548
 20024                           
 20025                           ; BSR set to: 0
 20026  005270  6C03               	negf	i2___awmod@divisor^0,c
 20027  005272  1E04               	comf	(i2___awmod@divisor+1)^0,f,c
 20028  005274  B0D8               	btfsc	status,0,c
 20029  005276  2A04               	incf	(i2___awmod@divisor+1)^0,f,c
 20030  005278                     i2l7548:
 20031                           
 20032                           ; BSR set to: 0
 20033  005278  5003               	movf	i2___awmod@divisor^0,w,c
 20034  00527A  1004               	iorwf	(i2___awmod@divisor+1)^0,w,c
 20035  00527C  B4D8               	btfsc	status,2,c
 20036  00527E  D018               	goto	i2l7564
 20037                           
 20038                           ; BSR set to: 0
 20039  005280  0E01               	movlw	1
 20040  005282  6E05               	movwf	i2___awmod@counter^0,c
 20041  005284  D004               	goto	i2l7554
 20042  005286                     i2l7552:
 20043                           
 20044                           ; BSR set to: 0
 20045  005286  90D8               	bcf	status,0,c
 20046  005288  3603               	rlcf	i2___awmod@divisor^0,f,c
 20047  00528A  3604               	rlcf	(i2___awmod@divisor+1)^0,f,c
 20048  00528C  2A05               	incf	i2___awmod@counter^0,f,c
 20049  00528E                     i2l7554:
 20050                           
 20051                           ; BSR set to: 0
 20052  00528E  AE04               	btfss	(i2___awmod@divisor+1)^0,7,c
 20053  005290  D7FA               	goto	i2l7552
 20054  005292                     i2u540_40:
 20055                           
 20056                           ; BSR set to: 0
 20057  005292  5003               	movf	i2___awmod@divisor^0,w,c
 20058  005294  5C01               	subwf	i2___awmod@dividend^0,w,c
 20059  005296  5004               	movf	(i2___awmod@divisor+1)^0,w,c
 20060  005298  5802               	subwfb	(i2___awmod@dividend+1)^0,w,c
 20061  00529A  A0D8               	btfss	status,0,c
 20062  00529C  D004               	goto	i2l7560
 20063                           
 20064                           ; BSR set to: 0
 20065  00529E  5003               	movf	i2___awmod@divisor^0,w,c
 20066  0052A0  5E01               	subwf	i2___awmod@dividend^0,f,c
 20067  0052A2  5004               	movf	(i2___awmod@divisor+1)^0,w,c
 20068  0052A4  5A02               	subwfb	(i2___awmod@dividend+1)^0,f,c
 20069  0052A6                     i2l7560:
 20070                           
 20071                           ; BSR set to: 0
 20072  0052A6  90D8               	bcf	status,0,c
 20073  0052A8  3204               	rrcf	(i2___awmod@divisor+1)^0,f,c
 20074  0052AA  3203               	rrcf	i2___awmod@divisor^0,f,c
 20075                           
 20076                           ; BSR set to: 0
 20077  0052AC  2E05               	decfsz	i2___awmod@counter^0,f,c
 20078  0052AE  D7F1               	goto	i2u540_40
 20079  0052B0                     i2l7564:
 20080                           
 20081                           ; BSR set to: 0
 20082  0052B0  5006               	movf	i2___awmod@sign^0,w,c
 20083  0052B2  B4D8               	btfsc	status,2,c
 20084  0052B4  D004               	goto	i2l7568
 20085                           
 20086                           ; BSR set to: 0
 20087  0052B6  6C01               	negf	i2___awmod@dividend^0,c
 20088  0052B8  1E02               	comf	(i2___awmod@dividend+1)^0,f,c
 20089  0052BA  B0D8               	btfsc	status,0,c
 20090  0052BC  2A02               	incf	(i2___awmod@dividend+1)^0,f,c
 20091  0052BE                     i2l7568:
 20092                           
 20093                           ; BSR set to: 0
 20094  0052BE  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 20095  0052C2  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 20096                           
 20097                           ; BSR set to: 0
 20098  0052C6  0012               	return		;funcret
 20099  0052C8                     __end_ofi2___awmod:
 20100                           	callstack 0
 20101                           
 20102 ;; *************** function i2_LEAVECRITICAL *****************
 20103 ;; Defined at:
 20104 ;;		line 186 in file "xf/xf.c"
 20105 ;; Parameters:    Size  Location     Type
 20106 ;;  inISR           1    wreg     _Bool 
 20107 ;; Auto vars:     Size  Location     Type
 20108 ;;  inISR           1    0[COMRAM] _Bool 
 20109 ;; Return value:  Size  Location     Type
 20110 ;;                  1    wreg      void 
 20111 ;; Registers used:
 20112 ;;		wreg, status,2
 20113 ;; Tracked objects:
 20114 ;;		On entry : 0/0
 20115 ;;		On exit  : 0/0
 20116 ;;		Unchanged: 0/0
 20117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20118 ;;      Params:         0       0       0       0       0       0       0
 20119 ;;      Locals:         1       0       0       0       0       0       0
 20120 ;;      Temps:          0       0       0       0       0       0       0
 20121 ;;      Totals:         1       0       0       0       0       0       0
 20122 ;;Total ram usage:        1 bytes
 20123 ;; Hardware stack levels used: 1
 20124 ;; This function calls:
 20125 ;;		Nothing
 20126 ;; This function is called by:
 20127 ;;		i2_XF_pushEvent
 20128 ;;		i2_XF_unscheduleTimer
 20129 ;; This function uses a non-reentrant model
 20130 ;;
 20131                           
 20132                           	psect	text90
 20133  0059F4                     __ptext90:
 20134                           	callstack 0
 20135  0059F4                     i2_LEAVECRITICAL:
 20136                           	callstack 15
 20137                           
 20138                           ; BSR set to: 0
 20139                           ;incstack = 0
 20140                           ;i2LEAVECRITICAL@inISR stored from wreg
 20141  0059F4  6E01               	movwf	i2LEAVECRITICAL@inISR^0,c
 20142                           
 20143                           ;xf/xf.c: 186: static void LEAVECRITICAL(_Bool inISR);xf/xf.c: 187: {;xf/xf.c: 188:     
      +                          if (inISR == 0)
 20144  0059F6  5001               	movf	i2LEAVECRITICAL@inISR^0,w,c
 20145  0059F8  A4D8               	btfss	status,2,c
 20146  0059FA  0012               	return	
 20147                           
 20148                           ;xf/xf.c: 189:     {;xf/xf.c: 190:       GIE = 1;
 20149  0059FC  8EF2               	bsf	4082,7,c	;volatile
 20150  0059FE  0012               	return		;funcret
 20151  005A00                     __end_ofi2_LEAVECRITICAL:
 20152                           	callstack 0
 20153                           
 20154 ;; *************** function i2_ENTERCRITICAL *****************
 20155 ;; Defined at:
 20156 ;;		line 172 in file "xf/xf.c"
 20157 ;; Parameters:    Size  Location     Type
 20158 ;;  inISR           1    wreg     _Bool 
 20159 ;; Auto vars:     Size  Location     Type
 20160 ;;  inISR           1    0[COMRAM] _Bool 
 20161 ;; Return value:  Size  Location     Type
 20162 ;;                  1    wreg      void 
 20163 ;; Registers used:
 20164 ;;		wreg, status,2
 20165 ;; Tracked objects:
 20166 ;;		On entry : 0/0
 20167 ;;		On exit  : 0/0
 20168 ;;		Unchanged: 0/0
 20169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20170 ;;      Params:         0       0       0       0       0       0       0
 20171 ;;      Locals:         1       0       0       0       0       0       0
 20172 ;;      Temps:          0       0       0       0       0       0       0
 20173 ;;      Totals:         1       0       0       0       0       0       0
 20174 ;;Total ram usage:        1 bytes
 20175 ;; Hardware stack levels used: 1
 20176 ;; This function calls:
 20177 ;;		Nothing
 20178 ;; This function is called by:
 20179 ;;		i2_XF_pushEvent
 20180 ;;		i2_XF_unscheduleTimer
 20181 ;; This function uses a non-reentrant model
 20182 ;;
 20183                           
 20184                           	psect	text91
 20185  005A00                     __ptext91:
 20186                           	callstack 0
 20187  005A00                     i2_ENTERCRITICAL:
 20188                           	callstack 15
 20189                           
 20190                           ;incstack = 0
 20191                           ;i2ENTERCRITICAL@inISR stored from wreg
 20192  005A00  6E01               	movwf	i2ENTERCRITICAL@inISR^0,c
 20193                           
 20194                           ;xf/xf.c: 172: static void ENTERCRITICAL(_Bool inISR);xf/xf.c: 173: {;xf/xf.c: 174:     
      +                          if (inISR == 0)
 20195  005A02  5001               	movf	i2ENTERCRITICAL@inISR^0,w,c
 20196  005A04  A4D8               	btfss	status,2,c
 20197  005A06  0012               	return	
 20198                           
 20199                           ;xf/xf.c: 175:     {;xf/xf.c: 176:       GIE = 0;
 20200  005A08  9EF2               	bcf	4082,7,c	;volatile
 20201  005A0A  0012               	return		;funcret
 20202  005A0C                     __end_ofi2_ENTERCRITICAL:
 20203                           	callstack 0
 20204                           
 20205                           	psect	rparam
 20206  0000                     
 20207                           	psect	temp
 20208  00004E                     btemp:
 20209                           	callstack 0
 20210  00004E                     	ds	1
 20211  0000                     int$flags	set	btemp
 20212  0000                     wtemp8	set	btemp+1
 20213  0000                     ttemp5	set	btemp+1
 20214  0000                     ttemp6	set	btemp+4
 20215  0000                     ttemp7	set	btemp+8
 20216                           
 20217                           	psect	idloc
 20218                           
 20219                           ;Config register IDLOC0 @ 0x200000
 20220                           ;	unspecified, using default values
 20221  200000                     	org	2097152
 20222  200000  FF                 	db	255
 20223                           
 20224                           ;Config register IDLOC1 @ 0x200001
 20225                           ;	unspecified, using default values
 20226  200001                     	org	2097153
 20227  200001  FF                 	db	255
 20228                           
 20229                           ;Config register IDLOC2 @ 0x200002
 20230                           ;	unspecified, using default values
 20231  200002                     	org	2097154
 20232  200002  FF                 	db	255
 20233                           
 20234                           ;Config register IDLOC3 @ 0x200003
 20235                           ;	unspecified, using default values
 20236  200003                     	org	2097155
 20237  200003  FF                 	db	255
 20238                           
 20239                           ;Config register IDLOC4 @ 0x200004
 20240                           ;	unspecified, using default values
 20241  200004                     	org	2097156
 20242  200004  FF                 	db	255
 20243                           
 20244                           ;Config register IDLOC5 @ 0x200005
 20245                           ;	unspecified, using default values
 20246  200005                     	org	2097157
 20247  200005  FF                 	db	255
 20248                           
 20249                           ;Config register IDLOC6 @ 0x200006
 20250                           ;	unspecified, using default values
 20251  200006                     	org	2097158
 20252  200006  FF                 	db	255
 20253                           
 20254                           ;Config register IDLOC7 @ 0x200007
 20255                           ;	unspecified, using default values
 20256  200007                     	org	2097159
 20257  200007  FF                 	db	255
 20258                           
 20259                           	psect	config
 20260                           
 20261                           ; Padding undefined space
 20262  300000                     	org	3145728
 20263  300000  FF                 	db	255
 20264                           
 20265                           ;Config register CONFIG1H @ 0x300001
 20266                           ;	Oscillator Selection bits
 20267                           ;	FOSC = INTIO67, Internal oscillator block
 20268                           ;	4X PLL Enable
 20269                           ;	PLLCFG = ON, Oscillator multiplied by 4
 20270                           ;	Primary clock enable bit
 20271                           ;	PRICLKEN = ON, Primary clock is always enabled
 20272                           ;	Fail-Safe Clock Monitor Enable bit
 20273                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
 20274                           ;	Internal/External Oscillator Switchover bit
 20275                           ;	IESO = OFF, Oscillator Switchover mode disabled
 20276  300001                     	org	3145729
 20277  300001  38                 	db	56
 20278                           
 20279                           ;Config register CONFIG2L @ 0x300002
 20280                           ;	Power-up Timer Enable bit
 20281                           ;	PWRTEN = OFF, Power up timer disabled
 20282                           ;	Brown-out Reset Enable bits
 20283                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
 20284                           ;	Brown Out Reset Voltage bits
 20285                           ;	BORV = 190, VBOR set to 1.90 V nominal
 20286  300002                     	org	3145730
 20287  300002  1F                 	db	31
 20288                           
 20289                           ;Config register CONFIG2H @ 0x300003
 20290                           ;	Watchdog Timer Enable bits
 20291                           ;	WDTEN = SWON, WDT is controlled by SWDTEN bit of the WDTCON register
 20292                           ;	Watchdog Timer Postscale Select bits
 20293                           ;	WDTPS = 32768, 1:32768
 20294  300003                     	org	3145731
 20295  300003  3E                 	db	62
 20296                           
 20297                           ; Padding undefined space
 20298  300004                     	org	3145732
 20299  300004  FF                 	db	255
 20300                           
 20301                           ;Config register CONFIG3H @ 0x300005
 20302                           ;	CCP2 MUX bit
 20303                           ;	CCP2MX = PORTC1, CCP2 input/output is multiplexed with RC1
 20304                           ;	PORTB A/D Enable bit
 20305                           ;	PBADEN = OFF, PORTB<5:0> pins are configured as digital I/O on Reset
 20306                           ;	P3A/CCP3 Mux bit
 20307                           ;	CCP3MX = PORTB5, P3A/CCP3 input/output is multiplexed with RB5
 20308                           ;	HFINTOSC Fast Start-up
 20309                           ;	HFOFST = ON, HFINTOSC output and ready status are not delayed by the oscillator stable
      +                           status
 20310                           ;	Timer3 Clock input mux bit
 20311                           ;	T3CMX = PORTC0, T3CKI is on RC0
 20312                           ;	ECCP2 B output mux bit
 20313                           ;	P2BMX = PORTB5, P2B is on RB5
 20314                           ;	MCLR Pin Enable bit
 20315                           ;	MCLRE = EXTMCLR, MCLR pin enabled, RE3 input pin disabled
 20316  300005                     	org	3145733
 20317  300005  BD                 	db	189
 20318                           
 20319                           ;Config register CONFIG4L @ 0x300006
 20320                           ;	Stack Full/Underflow Reset Enable bit
 20321                           ;	STVREN = ON, Stack full/underflow will cause Reset
 20322                           ;	Single-Supply ICSP Enable bit
 20323                           ;	LVP = ON, Single-Supply ICSP enabled if MCLRE is also 1
 20324                           ;	Extended Instruction Set Enable bit
 20325                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
 20326                           ;	Background Debug
 20327                           ;	DEBUG = 0x1, unprogrammed default
 20328  300006                     	org	3145734
 20329  300006  85                 	db	133
 20330                           
 20331                           ; Padding undefined space
 20332  300007                     	org	3145735
 20333  300007  FF                 	db	255
 20334                           
 20335                           ;Config register CONFIG5L @ 0x300008
 20336                           ;	Code Protection Block 0
 20337                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
 20338                           ;	Code Protection Block 1
 20339                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
 20340                           ;	Code Protection Block 2
 20341                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
 20342                           ;	Code Protection Block 3
 20343                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
 20344  300008                     	org	3145736
 20345  300008  0F                 	db	15
 20346                           
 20347                           ;Config register CONFIG5H @ 0x300009
 20348                           ;	Boot Block Code Protection bit
 20349                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
 20350                           ;	Data EEPROM Code Protection bit
 20351                           ;	CPD = OFF, Data EEPROM not code-protected
 20352  300009                     	org	3145737
 20353  300009  C0                 	db	192
 20354                           
 20355                           ;Config register CONFIG6L @ 0x30000A
 20356                           ;	Write Protection Block 0
 20357                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
 20358                           ;	Write Protection Block 1
 20359                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
 20360                           ;	Write Protection Block 2
 20361                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
 20362                           ;	Write Protection Block 3
 20363                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
 20364  30000A                     	org	3145738
 20365  30000A  0F                 	db	15
 20366                           
 20367                           ;Config register CONFIG6H @ 0x30000B
 20368                           ;	Configuration Register Write Protection bit
 20369                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
 20370                           ;	Boot Block Write Protection bit
 20371                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
 20372                           ;	Data EEPROM Write Protection bit
 20373                           ;	WRTD = OFF, Data EEPROM not write-protected
 20374  30000B                     	org	3145739
 20375  30000B  E0                 	db	224
 20376                           
 20377                           ;Config register CONFIG7L @ 0x30000C
 20378                           ;	Table Read Protection Block 0
 20379                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
 20380                           ;	Table Read Protection Block 1
 20381                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
 20382                           ;	Table Read Protection Block 2
 20383                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
 20384                           ;	Table Read Protection Block 3
 20385                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
 20386  30000C                     	org	3145740
 20387  30000C  0F                 	db	15
 20388                           
 20389                           ;Config register CONFIG7H @ 0x30000D
 20390                           ;	Boot Block Table Read Protection bit
 20391                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
 20392  30000D                     	org	3145741
 20393  30000D  40                 	db	64
 20394                           tosu	equ	0xFFF
 20395                           tosh	equ	0xFFE
 20396                           tosl	equ	0xFFD
 20397                           stkptr	equ	0xFFC
 20398                           pclatu	equ	0xFFB
 20399                           pclath	equ	0xFFA
 20400                           pcl	equ	0xFF9
 20401                           tblptru	equ	0xFF8
 20402                           tblptrh	equ	0xFF7
 20403                           tblptrl	equ	0xFF6
 20404                           tablat	equ	0xFF5
 20405                           prodh	equ	0xFF4
 20406                           prodl	equ	0xFF3
 20407                           indf0	equ	0xFEF
 20408                           postinc0	equ	0xFEE
 20409                           postdec0	equ	0xFED
 20410                           preinc0	equ	0xFEC
 20411                           plusw0	equ	0xFEB
 20412                           fsr0h	equ	0xFEA
 20413                           fsr0l	equ	0xFE9
 20414                           wreg	equ	0xFE8
 20415                           indf1	equ	0xFE7
 20416                           postinc1	equ	0xFE6
 20417                           postdec1	equ	0xFE5
 20418                           preinc1	equ	0xFE4
 20419                           plusw1	equ	0xFE3
 20420                           fsr1h	equ	0xFE2
 20421                           fsr1l	equ	0xFE1
 20422                           bsr	equ	0xFE0
 20423                           indf2	equ	0xFDF
 20424                           postinc2	equ	0xFDE
 20425                           postdec2	equ	0xFDD
 20426                           preinc2	equ	0xFDC
 20427                           plusw2	equ	0xFDB
 20428                           fsr2h	equ	0xFDA
 20429                           fsr2l	equ	0xFD9
 20430                           status	equ	0xFD8

Data Sizes:
    Strings     124
    Constant    1867
    Data        0
    BSS         322
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     69      77
    BANK0           160     71     145
    BANK1           256      0     240
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    g1.font.bitmap	PTR const unsigned char  size(2) Largest target is 0
		 -> arialNarrow_12ptBitmaps(CODE[1575]), 

    g1.font.descriptor	PTR const struct . size(2) Largest target is 0
		 -> arialNarrow_12ptDescriptors(CODE[285]), 

    g1.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), 

    g1.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), 

    g1.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), 

    g1.font	PTR struct . size(2) Largest target is 0
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    g1.text	PTR const unsigned char  size(2) Largest target is 0
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    g1.fpPress	PTR FTN()void  size(2) Largest target is 0
		 -> Absolute function(), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 252
		 -> g1.str(BANK1[2]), dbuf(BANK0[32]), STR_15(CODE[13]), STR_14(CODE[13]), 
		 -> STR_13(CODE[6]), STR_12(CODE[11]), STR_11(CODE[11]), STR_10(CODE[8]), 
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), g1(BANK1[240]), STR_1(CODE[10]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 252
		 -> g1.str(BANK1[2]), dbuf(BANK0[32]), STR_15(CODE[13]), STR_14(CODE[13]), 
		 -> STR_13(CODE[6]), STR_12(CODE[11]), STR_11(CODE[11]), STR_10(CODE[8]), 
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), g1(BANK1[240]), STR_1(CODE[10]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_3(CODE[3]), STR_2(CODE[3]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 3
		 -> STR_3(CODE[3]), STR_2(CODE[3]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_3(CODE[3]), STR_2(CODE[3]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S5431_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    levelController@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    levelController@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    levelController@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    levelController@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    levelController@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    levelController@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    levelController@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    levelController@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    levelController@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    levelController@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    levelController@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    levelController@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    levelController@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    backlightController@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    backlightController@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    backlightController@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    backlightController@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    backlightController@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    backlightController@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    backlightController@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    backlightController@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    backlightController@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    backlightController@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    backlightController@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    backlightController@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    backlightController@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    checkCollision@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    checkCollision@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    checkCollision@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    checkCollision@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    checkCollision@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    checkCollision@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    checkCollision@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    checkCollision@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    checkCollision@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    checkCollision@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    checkCollision@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    checkCollision@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    checkCollision@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    mooveBall@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    mooveBall@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    mooveBall@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    mooveBall@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    mooveBall@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    mooveBall@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    mooveBall@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    mooveBall@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    mooveBall@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    mooveBall@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    mooveBall@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    mooveBall@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    mooveBall@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    moovePaddle2@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle2@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle2@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle2@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle2@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle2@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle2@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle2@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle2@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle2@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle2@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle2@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle2@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    moovePaddle1@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle1@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle1@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle1@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle1@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle1@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle1@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle1@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle1@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle1@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle1@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle1@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle1@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    gameControllerController@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerController@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerController@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerController@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerController@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerController@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerController@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerController@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerController@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerController@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerController@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerController@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerController@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    gameControllerSM@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerSM@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerSM@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerSM@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerSM@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerSM@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerSM@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerSM@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerSM@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerSM@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerSM@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerSM@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerSM@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    gameControllerInit@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    displayController@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    displayController@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    displayController@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    displayController@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    displayController@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    displayController@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    displayController@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    displayController@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    displayController@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    displayController@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    displayController@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    displayController@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    displayController@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    displaySM@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    displayInit@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    touchScreenController@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    touchScreenSM@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    sleepInit@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    LCD_Bitmap@colorTablePtr	PTR unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    LCD_Bitmap@bmpPtr	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    LCD_Bitmap@strPtr	PTR struct . size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    RGB2LCD@colorTableEntry	PTR unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    LCD_DrawText@font.bitmap	PTR const unsigned char  size(2) Largest target is 1575
		 -> arialNarrow_12ptBitmaps(CODE[1575]), 

    LCD_DrawText@font.descriptor	PTR const struct . size(2) Largest target is 285
		 -> arialNarrow_12ptDescriptors(CODE[285]), 

    LCD_DrawText@font	PTR const struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    LCD_DrawText@msg	PTR const unsigned char  size(2) Largest target is 252
		 -> g1.str(BANK1[2]), STR_15(CODE[13]), STR_14(CODE[13]), STR_13(CODE[6]), 
		 -> STR_12(CODE[11]), STR_11(CODE[11]), STR_10(CODE[8]), STR_9(CODE[9]), 
		 -> STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), STR_5(CODE[9]), 
		 -> STR_4(CODE[9]), g1(BANK1[240]), STR_1(CODE[10]), 

    LCD_InSlider@slider.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_InSlider@slider	PTR struct . size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    LCD_InButton@button.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_InButton@button.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_InButton@button.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_InButton@button.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    LCD_InButton@button.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    LCD_InButton@button	PTR struct . size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    LCD_ButtonDraw@button.font.bitmap	PTR const unsigned char  size(2) Largest target is 1575
		 -> arialNarrow_12ptBitmaps(CODE[1575]), 

    LCD_ButtonDraw@button.font.descriptor	PTR const struct . size(2) Largest target is 285
		 -> arialNarrow_12ptDescriptors(CODE[285]), 

    LCD_ButtonDraw@bmpPtr	PTR struct . size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    LCD_ButtonDraw@button.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonDraw@button.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonDraw@button.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonDraw@button.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    LCD_ButtonDraw@button.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    LCD_ButtonDraw@button	PTR struct . size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    LCD_ButtonUpdate@button.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonUpdate@button.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonUpdate@button.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonUpdate@button.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    LCD_ButtonUpdate@button.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    LCD_ButtonUpdate@button	PTR struct . size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    LCD_ButtonCreate@fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonCreate@fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonCreate@fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonCreate@button.font.bitmap	PTR const unsigned char  size(2) Largest target is 1575
		 -> arialNarrow_12ptBitmaps(CODE[1575]), 

    LCD_ButtonCreate@button.font.descriptor	PTR const struct . size(2) Largest target is 285
		 -> arialNarrow_12ptDescriptors(CODE[285]), 

    LCD_ButtonCreate@font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    LCD_ButtonCreate@textOrBmp	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    LCD_ButtonCreate@button.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonCreate@button.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonCreate@button.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonCreate@button.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    LCD_ButtonCreate@button.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    LCD_ButtonCreate@button	PTR struct . size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    LCD_SliderDraw@slider.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_SliderDraw@slider	PTR struct . size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    LCD_SliderUpdate@slider.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_SliderUpdate@slider	PTR struct . size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    LCD_SliderCreate@fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_SliderCreate@slider.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_SliderCreate@slider	PTR struct . size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Menu_endGame@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_endGame@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_endGame@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_endGame@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_endGame@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_endGame@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_endGame@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_endGame@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_endGame@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_endGame@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_endGame@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_endGame@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_endGame@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Menu_inGameDraw@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_inGameDraw@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_inGameDraw@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_inGameDraw@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_inGameDraw@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_inGameDraw@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_inGameDraw@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_inGameDraw@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_inGameDraw@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_inGameDraw@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_inGameDraw@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_inGameDraw@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_inGameDraw@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Menu_parametersDraw@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_parametersDraw@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_parametersDraw@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_parametersDraw@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_parametersDraw@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_parametersDraw@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_parametersDraw@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_parametersDraw@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_parametersDraw@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_parametersDraw@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_parametersDraw@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_parametersDraw@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_parametersDraw@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Menu_welcomeDraw@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_welcomeDraw@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_welcomeDraw@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_welcomeDraw@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_welcomeDraw@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_welcomeDraw@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_welcomeDraw@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_welcomeDraw@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_welcomeDraw@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_welcomeDraw@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_welcomeDraw@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_welcomeDraw@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_welcomeDraw@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    GameParameters_setY@s.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setY@s.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setY@s.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setY@s.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setY@s.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setY@s.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setY@s.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setY@s.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setY@s.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setY@s.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setY@s.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setY@s.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setY@s	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    GameParameters_setX@s.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setX@s.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setX@s.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setX@s.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setX@s.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setX@s.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setX@s.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setX@s.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setX@s.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setX@s.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setX@s.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setX@s.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setX@s	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    GameParameters_resetPos@s.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_resetPos@s.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_resetPos@s.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_resetPos@s.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_resetPos@s.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_resetPos@s.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_resetPos@s.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_resetPos@s.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_resetPos@s.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_resetPos@s.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_resetPos@s.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_resetPos@s.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_resetPos@s	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    GameParameters_setLevel@s.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setLevel@s.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setLevel@s.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setLevel@s.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setLevel@s.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setLevel@s.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setLevel@s.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setLevel@s.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setLevel@s.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setLevel@s.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setLevel@s.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setLevel@s.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setLevel@s	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    GameParameters_setBackLight@s.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setBackLight@s.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setBackLight@s.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setBackLight@s.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setBackLight@s.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setBackLight@s.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setBackLight@s.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setBackLight@s.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setBackLight@s.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setBackLight@s.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setBackLight@s.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setBackLight@s.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setBackLight@s	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    GameParameters_init@s.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_init@s.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_init@s.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_init@s.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_init@s.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_init@s.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_init@s.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_init@s.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_init@s.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_init@s.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_init@s.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_init@s.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_init@s	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Score_draw@s	PTR struct Score size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Score_init@s	PTR struct Score size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    g1.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    S135$fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    g1.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    g1.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    g1.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    g1.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    g1.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    g1.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    g1.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    g1.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    g1.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    S108$fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    S108$fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    S108$fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    S108$font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    g1.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    S108$text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    g1.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    S99$bitmap	PTR const unsigned char  size(2) Largest target is 1575
		 -> arialNarrow_12ptBitmaps(CODE[1575]), 

    arialNarrow_12ptFontInfo.bitmap	PTR const unsigned char  size(2) Largest target is 1575
		 -> arialNarrow_12ptBitmaps(CODE[1575]), 

    S99$descriptor	PTR const struct . size(2) Largest target is 285
		 -> arialNarrow_12ptDescriptors(CODE[285]), 

    arialNarrow_12ptFontInfo.descriptor	PTR const struct . size(2) Largest target is 285
		 -> arialNarrow_12ptDescriptors(CODE[285]), 

    Paddle_draw@p	PTR struct Paddle size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Paddle_addX@p	PTR struct Paddle size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Paddle_init@p	PTR struct Paddle size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Ball_draw@b	PTR struct Ball size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Ball_Update@b	PTR struct Ball size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Ball_init@b	PTR struct Ball size(2) Largest target is 252
		 -> g1(BANK1[240]), 


Critical Paths under _main in COMRAM

    _touchScreenInit->_XF_scheduleTimer
    _gameControllerInit->_gameControllerController
    _LCD_Init->_LCD_Lowlevel_Init
    _Factory_exec->_touchScreenSM
    _touchScreenSM->_touchScreenController
    _touchScreenController->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _XF_unscheduleTimer->_ENTERCRITICAL
    _XF_unscheduleTimer->_LEAVECRITICAL
    _sleepSM->_sleepController
    _gameControllerSM->_gameControllerController
    _gameControllerController->_LCD_SliderUpdate
    _moovePaddle2->_Paddle_addX
    _moovePaddle1->_Paddle_addX
    _mooveBall->_checkCollision
    _checkCollision->_XF_pushEvent
    _XF_pushEvent->___awmod
    _levelController->_GameParameters_setLevel
    _backlightController->_GameParameters_setBackLight
    _XF_scheduleTimer->_ENTERCRITICAL
    _XF_scheduleTimer->_LEAVECRITICAL
    _GameParameters_init->_LCD_ButtonCreate
    _displayController->_Menu_endGame
    _displayController->_Menu_welcomeDraw
    _Menu_welcomeDraw->_LCD_ButtonDraw
    _Menu_parametersDraw->_LCD_SliderDraw
    _LCD_SliderDraw->_LCD_SliderUpdate
    _LCD_SliderUpdate->___lwdiv
    _Menu_endGame->_LCD_ButtonDraw
    _Menu_inGameDraw->_LCD_ButtonDraw
    _Score_draw->_LCD_DrawText
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->___aodiv
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _Paddle_draw->_LCD_DrawRect
    _LCD_ButtonDraw->_LCD_DrawText
    _LCD_DrawText->___wmul
    _LCD_ButtonUpdate->_LCD_DrawRect
    _LCD_Bitmap->___lwdiv
    ___wmul->___awdiv
    ___lwdiv->___wmul
    _Ball_draw->_LCD_DrawRect
    _XF_popEvent->___awmod

Critical Paths under _isr in COMRAM

    _isr->_XF_decrementAndQueueTimers
    _XF_decrementAndQueueTimers->i2_XF_pushEvent
    i2_XF_unscheduleTimer->i2_ENTERCRITICAL
    i2_XF_unscheduleTimer->i2_LEAVECRITICAL
    i2_XF_pushEvent->i2___awmod

Critical Paths under _main in BANK0

    _main->_Factory_exec
    _main->_Factory_init
    _Factory_init->_sleepInit
    _sleepInit->_displayInit
    _displayInit->_displayController
    _Factory_exec->_displaySM
    _touchScreenSM->_touchScreenController
    _displaySM->_displayController
    _displayController->_Menu_endGame
    _displayController->_Menu_parametersDraw
    _Menu_welcomeDraw->_LCD_ButtonDraw
    _Menu_parametersDraw->_LCD_ButtonDraw
    _Menu_endGame->_LCD_ButtonDraw
    _Menu_inGameDraw->_LCD_ButtonDraw
    _Score_draw->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _LCD_ButtonDraw->_LCD_Bitmap

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  673070
                       _Factory_exec
                       _Factory_init
 ---------------------------------------------------------------------------------
 (1) _Factory_init                                         2     2      0  300461
                                             69 BANK0      2     2      0
                _GameParameters_init
                       _LCD_DrawText
                           _LCD_Fill
                           _LCD_Init
                            _XF_init
                          _sleepInit
 ---------------------------------------------------------------------------------
 (2) _sleepInit                                            2     0      2  278230
                                             67 BANK0      2     0      2
                        _displayInit
                 _gameControllerInit
                    _sleepController
                    _touchScreenInit
 ---------------------------------------------------------------------------------
 (3) _touchScreenInit                                      0     0      0    1618
                   _XF_scheduleTimer
                        _configTouch
 ---------------------------------------------------------------------------------
 (3) _gameControllerInit                                   2     0      2   50985
                                             59 COMRAM     2     0      2
           _gameControllerController
 ---------------------------------------------------------------------------------
 (3) _displayInit                                          2     0      2  225475
                                             65 BANK0      2     0      2
                  _displayController
 ---------------------------------------------------------------------------------
 (2) _XF_init                                              2     2      0     158
                                             17 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             2     2      0      90
                                             22 COMRAM     2     2      0
                  _LCD_Lowlevel_Init
 ---------------------------------------------------------------------------------
 (3) _LCD_Lowlevel_Init                                    5     5      0      60
                                             17 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (1) _Factory_exec                                         1     1      0  372609
                                             70 BANK0      1     1      0
                        _XF_popEvent
                          _displaySM
                   _gameControllerSM
                            _sleepSM
                      _touchScreenSM
 ---------------------------------------------------------------------------------
 (2) _touchScreenSM                                        5     3      2    5213
                                             68 COMRAM     1     1      0
                                             12 BANK0      4     2      2
              _touchScreenController
 ---------------------------------------------------------------------------------
 (3) _touchScreenController                               14    12      2    4937
                                             66 COMRAM     2     0      2
                                              0 BANK0     12    12      0
                _GameParameters_setX
                _GameParameters_setY
                   _XF_scheduleTimer
                 _XF_unscheduleTimer
                            ___fldiv
                            ___fltol
                           ___xxtofl
                      _configMeasure
                        _configTouch
 ---------------------------------------------------------------------------------
 (4) _configMeasure                                        1     1      0      44
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) ___xxtofl                                            14    10      4     398
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             10     6      4     305
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fldiv                                             25    17      8    1399
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) _XF_unscheduleTimer                                   2     1      1     258
                                             18 COMRAM     2     1      1
                      _ENTERCRITICAL
                      _LEAVECRITICAL
 ---------------------------------------------------------------------------------
 (4) _GameParameters_setY                                  4     0      4     196
                                             17 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (4) _GameParameters_setX                                  4     0      4     196
                                             17 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _sleepSM                                              3     3      0      22
                                             19 COMRAM     3     3      0
                    _sleepController
 ---------------------------------------------------------------------------------
 (3) _sleepController                                      2     2      0       0
                                             17 COMRAM     2     2      0
                     _configPinSleep
 ---------------------------------------------------------------------------------
 (4) _configPinSleep                                       0     0      0       0
                        _configTouch
 ---------------------------------------------------------------------------------
 (4) _configTouch                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _gameControllerSM                                     5     3      2   52867
                                             59 COMRAM     5     3      2
                   _XF_scheduleTimer
           _gameControllerController
 ---------------------------------------------------------------------------------
 (4) _gameControllerController                             5     2      3   50887
                                             54 COMRAM     5     2      3
                _GameParameters_init
            _GameParameters_resetPos
                       _LCD_InButton
                       _LCD_InSlider
                   _LCD_SliderUpdate
                       _XF_pushEvent
                   _XF_scheduleTimer
                _backlightController
                    _levelController
                          _mooveBall
                       _moovePaddle1
                       _moovePaddle2
 ---------------------------------------------------------------------------------
 (5) _moovePaddle2                                         8     6      2    3603
                                             27 COMRAM     8     6      2
                        _Paddle_addX
                       _XF_pushEvent
 ---------------------------------------------------------------------------------
 (5) _moovePaddle1                                         4     2      2    4505
                                             27 COMRAM     4     2      2
            _GameParameters_resetPos
                        _Paddle_addX
                       _XF_pushEvent
 ---------------------------------------------------------------------------------
 (6) _Paddle_addX                                         10     4      6    1176
                                             17 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (6) _GameParameters_resetPos                              2     0      2     880
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _mooveBall                                            2     0      2    6602
                                             36 COMRAM     2     0      2
                        _Ball_Update
                       _XF_pushEvent
                     _checkCollision
 ---------------------------------------------------------------------------------
 (6) _checkCollision                                      30    28      2    4055
                                             26 COMRAM    10     8      2
                       _XF_pushEvent
 ---------------------------------------------------------------------------------
 (6) _XF_pushEvent                                         3     2      1    2219
                                             23 COMRAM     3     2      1
                      _ENTERCRITICAL
                      _LEAVECRITICAL
                            ___awmod
 ---------------------------------------------------------------------------------
 (6) _Ball_Update                                          6     4      2     208
                                             17 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _levelController                                      4     2      2     774
                                             21 COMRAM     4     2      2
            _GameParameters_setLevel
 ---------------------------------------------------------------------------------
 (6) _GameParameters_setLevel                              4     0      4     500
                                             17 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (5) _backlightController                                  4     2      2    2824
                                             23 COMRAM     4     2      2
        _GameParameters_setBackLight
 ---------------------------------------------------------------------------------
 (6) _GameParameters_setBackLight                          6     2      4    1912
                                             17 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _XF_scheduleTimer                                     5     1      4    1618
                                             18 COMRAM     5     1      4
                      _ENTERCRITICAL
                      _LEAVECRITICAL
 ---------------------------------------------------------------------------------
 (5) _LCD_InSlider                                        10     4      6     676
                                             17 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (5) _LCD_InButton                                        10     4      6    2044
                                             17 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (5) _GameParameters_init                                  2     0      2    9968
                                             42 COMRAM     2     0      2
                          _Ball_init
                   _LCD_ButtonCreate
                   _LCD_SliderCreate
                        _Paddle_init
                         _Score_init
 ---------------------------------------------------------------------------------
 (6) _Score_init                                           2     0      2     120
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (6) _Paddle_init                                          4     0      4     502
                                             17 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (6) _LCD_SliderCreate                                    22     0     22    2156
                                             17 COMRAM    22     0     22
 ---------------------------------------------------------------------------------
 (6) _LCD_ButtonCreate                                    25     0     25    6478
                                             17 COMRAM    25     0     25
 ---------------------------------------------------------------------------------
 (6) _Ball_init                                            2     0      2     186
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _displaySM                                            5     3      2  313593
                                             65 BANK0      5     3      2
                    _Menu_inGameDraw
                  _displayController
 ---------------------------------------------------------------------------------
 (4) _displayController                                    5     2      3  225354
                                             60 BANK0      5     2      3
                          _Ball_draw
                       _LCD_DrawRect
                       _Menu_endGame
                _Menu_parametersDraw
                   _Menu_welcomeDraw
                        _Paddle_draw
                         _Score_draw
 ---------------------------------------------------------------------------------
 (5) _Menu_welcomeDraw                                     2     0      2   51010
                                             67 COMRAM     2     0      2
                     _LCD_ButtonDraw
                       _LCD_DrawText
                           _LCD_Fill
 ---------------------------------------------------------------------------------
 (5) _Menu_parametersDraw                                  2     0      2   73706
                                             58 BANK0      2     0      2
                     _LCD_ButtonDraw
                       _LCD_DrawText
                           _LCD_Fill
                     _LCD_SliderDraw
 ---------------------------------------------------------------------------------
 (6) _LCD_SliderDraw                                      14    12      2   22603
                                             54 COMRAM    14    12      2
                       _LCD_DrawRect
                   _LCD_SliderUpdate
 ---------------------------------------------------------------------------------
 (5) _LCD_SliderUpdate                                    16    14      2   13314
                                             38 COMRAM    16    14      2
                       _LCD_DrawRect
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _Menu_endGame                                         4     2      2   50979
                                             67 COMRAM     2     0      2
                                             58 BANK0      2     2      0
                     _LCD_ButtonDraw
                       _LCD_DrawText
                           _LCD_Fill
 ---------------------------------------------------------------------------------
 (3) _Menu_inGameDraw                                      2     0      2   87467
                                             58 BANK0      2     0      2
                          _Ball_draw
                     _LCD_ButtonDraw
                       _LCD_DrawRect
                           _LCD_Fill
                        _Paddle_draw
                         _Score_draw
 ---------------------------------------------------------------------------------
 (5) _Score_draw                                           2     0      2   20595
                                             43 BANK0      2     0      2
                       _LCD_DrawText
                            _sprintf
 ---------------------------------------------------------------------------------
 (6) _sprintf                                             15     9      6    8777
                                             30 BANK0     13     7      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (7) _vfprintf                                             6     2      4    8111
                                             63 COMRAM     2     2      0
                                             26 BANK0      4     0      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (8) _vfpfcnvrt                                           37    34      3    7638
                                             60 COMRAM     3     0      3
                                             18 BANK0      8     8      0
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (9) _dtoa                                                35    26      9    5863
                                             43 COMRAM    17     8      9
                                              0 BANK0     18    18      0
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (10) _pad                                                 9     5      4    3597
                                             30 COMRAM     9     5      4
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (11) _fputs                                               5     3      2    1537
                                             25 COMRAM     5     3      2
                              _fputc
 ---------------------------------------------------------------------------------
 (9) _fputc                                                8     5      3    1037
                                             17 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (10) _putch                                               1     1      0       0
 ---------------------------------------------------------------------------------
 (10) _abs                                                 4     2      2     183
                                             35 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (10) ___aomod                                            18     2     16     613
                                             17 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (10) ___aodiv                                            26    10     16     625
                                             17 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (5) _Paddle_draw                                          6     4      2    9349
                                             36 COMRAM     6     4      2
                       _LCD_DrawRect
 ---------------------------------------------------------------------------------
 (6) _LCD_Fill                                             8     6      2     563
                                             17 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (6) _LCD_ButtonDraw                                      32    30      2   38781
                                             65 COMRAM     2     0      2
                                             28 BANK0     30    30      0
                         _LCD_Bitmap
                   _LCD_ButtonUpdate
                       _LCD_DrawRect
                       _LCD_DrawText
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _LCD_DrawText                                        34    21     13   11452
                                             31 COMRAM    34    21     13
                            ___awdiv
                             ___wmul
                             _strlen
 ---------------------------------------------------------------------------------
 (11) _strlen                                              4     2      2     400
                                             17 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     452
                                             17 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (7) _LCD_ButtonUpdate                                    18    16      2    9996
                                             36 COMRAM    18    16      2
                       _LCD_DrawRect
                           _LCD_Read
 ---------------------------------------------------------------------------------
 (8) _LCD_Read                                            10     6      4     405
                                             17 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (7) _LCD_Bitmap                                          38    32      6    5862
                                             38 COMRAM    10     4      6
                                              0 BANK0     28    28      0
                            _RGB2LCD
                            ___lwdiv
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    2505
                                             25 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) ___lwmod                                              5     1      4     311
                                             17 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     706
                                             31 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (8) _RGB2LCD                                             14    12      2     386
                                             17 COMRAM    14    12      2
 ---------------------------------------------------------------------------------
 (5) _Ball_draw                                           10     8      2    9175
                                             36 COMRAM    10     8      2
                       _LCD_DrawRect
 ---------------------------------------------------------------------------------
 (6) _LCD_DrawRect                                        19     8     11    8759
                                             17 COMRAM    19     8     11
 ---------------------------------------------------------------------------------
 (2) _XF_popEvent                                          2     2      0     756
                                             23 COMRAM     2     2      0
                      _ENTERCRITICAL
                      _LEAVECRITICAL
                            ___awmod
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4     600
                                             17 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _LEAVECRITICAL                                        1     1      0      22
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _ENTERCRITICAL                                        1     1      0      22
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (14) _isr                                                 4     4      0    1542
                                             13 COMRAM     4     4      0
         _XF_decrementAndQueueTimers
                     i2_XF_pushEvent
 ---------------------------------------------------------------------------------
 (15) _XF_decrementAndQueueTimers                          4     4      0     939
                                              9 COMRAM     4     4      0
                     i2_XF_pushEvent
               i2_XF_unscheduleTimer
 ---------------------------------------------------------------------------------
 (16) i2_XF_unscheduleTimer                                2     1      1     158
                                              1 COMRAM     2     1      1
                    i2_ENTERCRITICAL
                    i2_LEAVECRITICAL
 ---------------------------------------------------------------------------------
 (15) i2_XF_pushEvent                                      3     2      1     603
                                              6 COMRAM     3     2      1
                    i2_ENTERCRITICAL
                    i2_LEAVECRITICAL
                          i2___awmod
 ---------------------------------------------------------------------------------
 (16) i2___awmod                                           6     2      4     348
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (16) i2_LEAVECRITICAL                                     1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (16) i2_ENTERCRITICAL                                     1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Factory_exec
     _XF_popEvent
       _ENTERCRITICAL
       _LEAVECRITICAL
       ___awmod
     _displaySM
       _Menu_inGameDraw
         _Ball_draw
           _LCD_DrawRect
         _LCD_ButtonDraw
           _LCD_Bitmap
             _RGB2LCD
             ___lwdiv
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___lwmod
             ___wmul
           _LCD_ButtonUpdate
             _LCD_DrawRect
             _LCD_Read
           _LCD_DrawRect
           _LCD_DrawText
             ___awdiv
             ___wmul
             _strlen
           _strlen
         _LCD_DrawRect
         _LCD_Fill
         _Paddle_draw
           _LCD_DrawRect
         _Score_draw
           _LCD_DrawText
           _sprintf
             _vfprintf
               _vfpfcnvrt
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _putch
                     _fputs
                       _fputc
                     _strlen
                 _fputc
       _displayController
         _Ball_draw
         _LCD_DrawRect
         _Menu_endGame
           _LCD_ButtonDraw
           _LCD_DrawText
           _LCD_Fill
         _Menu_parametersDraw
           _LCD_ButtonDraw
           _LCD_DrawText
           _LCD_Fill
           _LCD_SliderDraw
             _LCD_DrawRect
             _LCD_SliderUpdate
               _LCD_DrawRect
               ___lwdiv
               ___wmul
         _Menu_welcomeDraw
           _LCD_ButtonDraw
           _LCD_DrawText
           _LCD_Fill
         _Paddle_draw
         _Score_draw
     _gameControllerSM
       _XF_scheduleTimer
         _ENTERCRITICAL
         _LEAVECRITICAL
       _gameControllerController
         _GameParameters_init
           _Ball_init
           _LCD_ButtonCreate
           _LCD_SliderCreate
           _Paddle_init
           _Score_init
         _GameParameters_resetPos
         _LCD_InButton
         _LCD_InSlider
         _LCD_SliderUpdate
         _XF_pushEvent
           _ENTERCRITICAL
           _LEAVECRITICAL
           ___awmod
         _XF_scheduleTimer
         _backlightController
           _GameParameters_setBackLight
         _levelController
           _GameParameters_setLevel
         _mooveBall
           _Ball_Update
           _XF_pushEvent
           _checkCollision
             _XF_pushEvent
         _moovePaddle1
           _GameParameters_resetPos
           _Paddle_addX
           _XF_pushEvent
         _moovePaddle2
           _Paddle_addX
           _XF_pushEvent
     _sleepSM
       _sleepController
         _configPinSleep
           _configTouch
     _touchScreenSM
       _touchScreenController
         _GameParameters_setX
         _GameParameters_setY
         _XF_scheduleTimer
         _XF_unscheduleTimer
           _ENTERCRITICAL
           _LEAVECRITICAL
         ___fldiv
           ___xxtofl (ARG)
         ___fltol
           ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _configMeasure
         _configTouch
   _Factory_init
     _GameParameters_init
     _LCD_DrawText
     _LCD_Fill
     _LCD_Init
       _LCD_Lowlevel_Init
     _XF_init
     _sleepInit
       _displayInit
         _displayController
       _gameControllerInit
         _gameControllerController
       _sleepController
       _touchScreenInit
         _XF_scheduleTimer
         _configTouch

 _isr (ROOT)
   _XF_decrementAndQueueTimers
     i2_XF_pushEvent
       i2_ENTERCRITICAL
       i2_LEAVECRITICAL
       i2___awmod
     i2_XF_unscheduleTimer
       i2_ENTERCRITICAL
       i2_LEAVECRITICAL
   i2_XF_pushEvent

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      F0       6       93.8%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     47      91       4       90.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     45      4D       1       81.9%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1CE       9        0.0%
DATA                 0      0     1CE      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Wed Sep 08 08:59:01 2021

                      _LCD_ButtonDraw 0E4E                           ?_LCD_Bitmap 0027  
                        ___fldiv@aexp 0038                          ___fldiv@bexp 0037  
                    _LCD_ButtonCreate 3F56                          ___fldiv@sign 0030  
                        ?_displayInit 00EB                  __end_of_Factory_exec 5566  
                __end_of_Factory_init 470C                                    _g1 0100  
                        ___awdiv@sign 0017               __end_of_sleepController 5874  
                   ??i2_ENTERCRITICAL 0001              __end_of_Menu_welcomeDraw 4FEE  
                 ___wmul@multiplicand 001C                  backlightController@g 0018  
                    _LCD_ButtonUpdate 3088                         ?_LCD_InButton 0012  
                       ?_LCD_InSlider 0012                         ?_LCD_DrawRect 0012  
                       ?_LCD_DrawText 0020                                   l226 49AC  
                                 l315 2240                                   l340 0B38  
                                 l318 225E                                   l345 0B7C  
                                 l290 27D0                                   l283 2726  
                                 l348 0BB2                                   l532 329A  
                                 l293 2822                                   l285 2730  
                                 l542 33A8                                   l296 28B0  
                                 l538 32FA                                   l299 2912  
                                 l812 010E                                   l813 01B6  
                                 l818 04E2                                   l667 135A  
                                 l668 13AE                                   l829 082A  
                                 l669 1402                                   l858 2644  
                                 l778 5A10                                   l799 4A7E  
                                 _GIE 007F97                                   _PR2 000FBB  
                                 _abs 57E6                                   _pad 50F4  
                                 _isr 0008                  configMeasure@channel 0012  
                     ??_ENTERCRITICAL 0012                          ___awmod@sign 0017  
                                 wreg 000FE8                __size_of_touchScreenSM 005E  
                     __end_of_RGB2LCD 4880                          ___fltol@exp1 0042  
                    _touchScreenState 004D                           _Ball_Update 5072  
                       ??_Paddle_addX 0018                                  ?_abs 0024  
                                l4010 4F3C                                  l1365 5474  
                                l1470 2DAE                                  l1375 566A  
                                l1536 390E                                  l1529 3890  
                                l1458 2D44                                  l1628 580E  
                                l1469 2DB2                                  l1590 2ECC  
                                l1592 2ED4                                  l4160 2948  
                                l1579 511A                                  l5410 2744  
                                l5330 268E                                  l6130 19C4  
                                l7002 24D4                                  l6300 0B72  
                                l6108 17E0                                  l7020 25B2  
                                l5414 2754                                  l5334 26B2  
                                l6310 0BC6                                  l7014 2568  
                                l7102 5692                                  ?_pad 001F  
                                l5416 2762                                  l6304 0B90  
                                l6152 313C                                  l7008 251E  
                                l7040 450E                                  l5602 28C4  
                                l6314 0BFE                                  l7026 25FC  
                                l6332 0C6C                                  l7220 2C02  
                                l5526 2836                                  l6342 0CDE  
                                l6318 0C54                                  l7046 4558  
                                l6430 53C0                                  l6360 0D38  
                                l5800 5002                                  l8200 5834  
                                l7048 456C                                  l7056 4A38  
                                l7160 14BE                                  l7144 1306  
                                l7240 2C42                                  l7216 2BFE  
                                l7400 38C4                                  l5650 2926  
                                l5490 27E4                                  l6338 0CBA  
                                l6370 0D74                                  l8210 3736  
                                l7066 42A4                                  l7154 1458  
                                l7322 2E1A                                  l7410 3934  
                                l7402 38D0                                  l5900 5648  
                                l6372 0DAE                                  l6284 0B12  
                                l5812 5028                                  l8300 515C  
                                l7180 15E4                                  l7172 157A  
                                l7332 2E50                                  l7236 2C3E  
                                l7412 3940                                  l7404 38F6  
                                l6366 0D6C                                  l6294 0B4C  
                                l5814 5030                                  l5806 5012  
                                l8222 3784                                  l6470 4CEA  
                                l7334 2E52                                  l7326 2E44  
                                l7318 2DF6                                  l7262 2CA4  
                                l7254 2C8C                                  l6392 0E18  
                                l6288 0B26                                  l5832 5068  
                                l5824 5050                                  l6552 49A4  
                                l8224 3798                                  l8216 375E  
                                l8400 36C8                                  l6720 0384  
                                l7192 168E                                  l7176 15CE  
                                l7168 1524                                  l7280 2D1C  
                                l7272 2CF4                                  l7248 2C76  
                                l7520 3444                                  l5906 5660  
                                l6378 0E00                                  l8242 3830  
                                l8234 37F4                                  l8314 2EB0  
                                l6482 45F4                                  l7186 1636  
                                l7506 33D4                                  l5860 5236  
                                l5852 5216                                  l5844 51FC  
                                l7620 54EC                                  l6396 0E32  
                                l5828 505A                                  l8332 2EFC  
                                l6900 4AA2                                  l6724 0422  
                                l6716 0304                                  l6732 04FE  
                                l7460 584A                                  l7292 2D5A  
                                l7364 4774                                  l7348 472A  
                                l7428 3980                                  ?_isr 0001  
                                l5854 521E                                  l8422 1FAC  
                                l8238 380A                                  l8270 3CC8  
                                l8262 3C6C                                  l8254 3C2E  
                                l8342 2FF0                                  l8406 36DE  
                                l6638 56D6                                  l6750 076A  
                                l6742 064C                                  l6486 4626  
                                l7198 16E4                                  l7286 2D42  
                                l7382 47B4                                  l7374 478C  
                                l3998 4F02                                  l5864 5240  
                                l5848 5208                                  l5880 544A  
                                l8432 1FF2                                  l8416 1F0E  
                                l8264 3C80                                  l8176 4E62  
                                l8328 2EEE                                  l6728 049E  
                                l7464 5854                                  l7632 5786  
                                l7640 5798                                  l7376 4798  
                                l7368 4784                                  l7392 38A0  
                                l5890 546A                                  l8186 55FA  
                                l8522 217E                                  l8274 3CDE  
                                l8258 3C52                                  l8290 5112  
                                l8362 3054                                  l6754 07E6  
                                l6746 06CC                                  l7298 2D78  
                                l7482 32BE                                  l5868 524E  
                                l8188 55FE                                  l8428 1FD4  
                                l8620 12F6                                  l8604 10F2  
                                l8196 5822                                  l8292 5124  
                                l6764 08B8                                  l7740 4334  
                                l7476 32B6                                  l5878 5442  
                                l8526 21BA                                  l8550 2278  
                                l8614 1216                                  l8278 3D04  
                                l8286 5104                                  l8366 3068  
                                l8390 368A                                  l6758 0846  
                                l7734 4318                                  l7398 38BE  
                                l7486 32DC                                  l7590 51A4  
                                l8536 2252                                  l8608 115E  
                                l8296 5138                                  l6872 4B4A  
                                l6952 541C                                  l7752 4372  
                                l7496 3326                                  l5898 5640  
                                l8562 5578                                  l7578 517C  
                                l8396 36BE                                  l8564 5592  
                                l8804 4C54                                  l6948 53E4  
                                l6972 2362                                  l7772 43C8  
                                l8732 532E                                  l6990 2440  
                                l6966 2318                                  l7758 4390  
                                l8750 5368                                  l8592 0F7E  
                                l8680 4174                                  l8672 4140  
                                l8760 4BDE                                  l6984 23F6  
                                l7768 43B6                                  l8744 535E  
                                l8736 5338                                  l8674 414E  
                                l8770 4C0E                                  l6978 23AC  
                                l8738 5346                         ??_Paddle_draw 0027  
                                l8668 48F8                                  l8684 418E  
                                l8676 415C                                  l6996 248A  
                                l8694 41F2                                  l8782 4C3A  
                                l8774 4C1C                                  l8688 41A8  
                                l8776 4C2E                                  l8698 4200  
                                l8796 4C50                                  l8788 4C46  
                 __end_of_XF_popEvent 551E                                  STR_1 7FBD  
                                STR_2 7FF9                                  STR_3 7FF9  
                                STR_4 7FD9                                  STR_5 7FE2  
                                STR_6 7FB2                                  STR_7 7FD0  
                                STR_8 7FFC                                  STR_9 7FC7  
                       ??_Paddle_init 0016                                  _LATA 000F89  
                                u2400 4F2C                                  u4010 49CC  
                                u2410 4F68                                  u4101 0202  
                                u3405 4844                                  u4310 4A9E  
                                u5110 4718                                  u3415 4858  
                                u3600 564C                                  u6000 2E84  
                                u4080 00B6                                  u5040 2DA8  
                                u5120 4748                                  u3530 5222  
                                u4410 237C                                  u4090 015E  
                                u4171 054A                                  u6100 3032  
                                u5125 473E                                  u3470 5034  
                                u6030 2EC2                                  u4270 4B46  
                                u4510 24EE                                  u4430 23C6  
                                u6120 303E                                  u4360 5424  
                                u5080 2E04                                  u5160 479E  
                                u5240 394A                                  u3385 3A38  
                                u3570 544E                                  u3810 3196  
                                u6050 2EE8                                  u4530 2538  
                                u4450 2410                                  u4370 22E8  
                                u4610 44DE                                  u5090 2E28  
                                u3395 3A7C                                  u6220 202C  
                                u6060 2FFE                                  u6310 0F06  
                                u4550 2582                                  u4470 245A  
                                u4390 2332                                  u4630 4528  
                                u5430 519C                                  u6080 3020  
                                u6160 3622                                  u5440 51DC  
                                u3841 09F0                                  u6081 301E  
                                u6234 2222                                  u6090 302E  
                                u4570 25CC                                  u4490 24A4  
                                u5290 32F2                                  u6235 221C  
                                u6227 2022                                  u6180 1F54  
                                u4590 2616                                  u4670 4A52  
                                u6280 22C6                                  u6440 4BEE  
                                u6187 1F4A                                  u6460 4C36  
                                u6517 4662                                  u5910 3C84  
                                u5750 4E5A                                  u3990 45E2  
                                u5590 438A                                  u6287 22BC  
                                u5831 3764                                  u6527 294E  
                                u6537 4F08                                  u5850 379C  
                                u5770 4E9C                                  u6547 4F42  
                                u5780 561E                                  u5787 5614  
                                u5980 57F4                                  _RBPU 007F8F  
                                u5990 2E82                                  _WPUB 000F61  
                         displaySM@ev 00EF                           LCD_Bitmap@i 00C4  
                                abs@a 0024                                  _dbuf 008A  
                     ?_checkCollision 001B             __size_of_LCD_SliderCreate 00EE  
                                _main 5A0C                                  _dtoa 2E5A  
                    _XF_scheduleTimer 53DA                                  _prec 0048  
                                _nout 0086                                  pad@i 0024  
                                pad@p 0021                                  fsr1h 000FE2  
                                fsr2h 000FDA                                  indf1 000FE7  
                                indf2 000FDF                                  fsr1l 000FE1  
                                pad@w 0026                                  fsr2l 000FD9  
                                btemp 004E                      Menu_inGameDraw@g 00E4  
                      touchScreenSM@g 00B6                                  prodh 000FF4  
                                prodl 000FF3      __end_of_arialNarrow_12ptFontInfo 7F82  
                                start 006E                           RGB2LCD@blue 001C  
              __end_of_LCD_ButtonDraw 1304             __size_of_LCD_SliderUpdate 0402  
                     ___fldiv@new_exp 0031                        _LCD_SliderDraw 3E48  
                  LCD_InSlider@slider 0012                       __end_of_XF_init 51E8  
                        ___param_bank 000000                      _gameStateMachine 004C  
              LCD_ButtonCreate@height 0018                    XF_scheduleTimer@ev 0015  
                  XF_scheduleTimer@tm 0013                LCD_ButtonCreate@button 0028  
                               ??_abs 0026                                 ??_pad 0023  
                               ??_isr 000E                      __end_of_LCD_Fill 49DE  
                      ??_LCD_InButton 0018                      __end_of_LCD_Init 2BD2  
                    __end_of_LCD_Read 3AD0                        ??_LCD_InSlider 0018  
                      ??_LCD_DrawRect 001D           LCD_SliderCreate@cursorWidth 0020  
                      ??_LCD_DrawText 002D                         ___fltol@sign1 0041  
                     __end_of___aodiv 3852                                 ?_main 0001  
                               ?_dtoa 002C                       __end_of___aomod 3D26  
                     LCD_ButtonDraw@i 00E1                       __end_of___fldiv 2E5A  
                     __end_of___awdiv 5072                                 STR_10 7FEB  
                               STR_11 7F9C                                 STR_12 7FA7  
                               STR_13 7FF3                                 STR_14 7F8F  
                               STR_15 7F82                       __end_of___awmod 5258  
                               _ANSB1 0079C9                                 _ANSB2 0079CA  
                     __end_of___fltol 47C6                                 _T0CON 000FD5  
                     ___awdiv@divisor 0014                                 _LATB1 007C51  
                               _LATC0 007C58                                 _LATB2 007C52  
                               _LATB3 007C53                                 _LATC2 007C5A  
                               _LATB4 007C54                                 _LATC3 007C5B  
                               _LATC4 007C5C                                 _LATC5 007C5D  
                     __end_of___lwdiv 547E                       __end_of___lwmod 5674  
                               i2l773 005A                                 i2l769 0034  
                     ___awdiv@counter 0016                                 _PLLEN 007CDE  
                        vfpfcnvrt@fmt 003E                                 _TMR0H 000FD7  
                               _TMR0L 000FD6                                 _PORTA 000F80  
                     ??_configMeasure 0012                                 _TRISA 000F92  
                               _TRISC 000F94          __end_ofi2_XF_unscheduleTimer 5750  
                 LCD_Bitmap@bfOffBits 00AA                          LCD_Fill@page 0018  
                               _flags 004A                          displayInit@g 00EB  
                               _fputc 4E4E                                 _theXF 0060  
                               _fputs 5818                LCD_ButtonDraw@tempChar 00D2  
                 __size_of_LCD_Bitmap 0532                                 pad@fp 001F  
                               _width 0046                                 _putch 5A16  
                               dtoa@d 002D                                 dtoa@i 00BA  
                               dtoa@n 00B2                                 dtoa@p 00AC  
                               dtoa@s 00B0                                 dtoa@w 00AE  
                __end_of_XF_pushEvent 53DA                       __end_of_sleepSM 57B4  
                        Paddle_addX@p 0012                                 tablat 000FF5  
          ??_gameControllerController 003A                       touchScreenSM@ev 0045  
                               plusw2 000FDB           ?_XF_decrementAndQueueTimers 0001  
                               ttemp5 004F                                 ttemp6 0052  
                               ttemp7 0056                                 status 000FD8  
                               wtemp8 004F                          Paddle_draw@p 0025  
                     __end_of_sprintf 55F0                          RGB2LCD@color 001E  
                        RGB2LCD@green 001A                __end_of_LCD_SliderDraw 3F56  
                       ?_Menu_endGame 0044                          Paddle_init@p 0012  
            __size_of_touchScreenInit 001E               LCD_ButtonCreate@bgColor 001C  
                  __size_ofi2___awmod 0070                   __end_of_Paddle_addX 4650  
                     ?_LCD_ButtonDraw 0042                     ?_gameControllerSM 003C  
                 __end_of_Paddle_draw 3C02                         _touchScreenSM 532A  
                 __end_of_Paddle_init 4D24                    __size_of_Ball_draw 0156  
                        LCD_Read@posX 0012                          LCD_Read@posY 0014  
                  __size_of_Ball_init 0062                       __initialization 5750  
                     _levelController 44C4                    ??_gameControllerSM 003E  
                        __end_of_main 5A16                          __end_of_dtoa 3088  
             LCD_ButtonCreate@fpPress 0022                touchScreenController@g 0043  
              touchScreenController@i 00B2                      ?_sleepController 0001  
                    i2XF_pushEvent@ev 0008                i2XF_unscheduleTimer@id 0003  
                              ??_main 0046                                ??_dtoa 0035  
        GameParameters_setLevel@value 0014                         __activetblptr 000002  
                           ??_RGB2LCD 0014                           _XF_popEvent 54D0  
                              _ADCON0 000FC2                                _ADCON2 000FC0  
                    LCD_ButtonDraw@x1 00D5                      LCD_ButtonDraw@x2 00D7  
                    LCD_ButtonDraw@y1 00D9                      LCD_ButtonDraw@y2 00DB  
                              ?_fputc 0012                                ?_fputs 001A  
                              _ADRESH 000FC4                                _ADRESL 000FC3  
                              _CCPR2L 000F67                      ___awdiv@dividend 0012  
             _GameParameters_setLevel 59C6                                ?_putch 0001  
                              _INT1IE 007F83                                _INT1IF 007F80  
                  LCD_DrawRect@colorH 0021                    LCD_DrawRect@colorL 0022  
             _GameParameters_resetPos 5874                                i2l7560 52A6  
                              i2l7552 5286                                i2l7544 526C  
                              i2l7554 528E                                i2l7564 52B0  
                              i2l7548 5278                                i2l7910 0046  
                              i2l7568 52BE                                i2l7792 54B6  
                              i2l7890 4E22                                i2l7882 4DC2  
                              i2l7892 4E36                                _OSCCON 000FD3  
                           ??_XF_init 0012                                _TMR0IE 007F95  
                              _TMR0IF 007F92                                _TMR2IF 007CF1  
                      ??_Menu_endGame 00E4                                _TRISB1 007C99  
                              _TRISC0 007CA0                                _TRISB2 007C9A  
                              _TRISC1 007CA1                                _TRISB3 007C9B  
                              _TRISC2 007CA2                                _TRISB4 007C9C  
                              _TRISC3 007CA3                                _TRISC4 007CA4  
                              _TRISC5 007CA5                      __end_of___xxtofl 3992  
                     ?_LCD_SliderDraw 0037                   i2XF_pushEvent@inISR 0007  
                LCD_DrawText@bg_color 002B                            _Score_draw 43F8  
                          _Score_init 58C4                        ?_touchScreenSM 00B6  
                    ??_configPinSleep 0012                       i2_LEAVECRITICAL 59F4  
               __size_of_Factory_exec 0048                 __size_of_Factory_init 00BC  
                        vfprintf@cfmt 0040                   LCD_Bitmap@jumpColor 00C2  
                 LCD_Bitmap@jumpCount 00AF                   _Menu_parametersDraw 3D26  
                __size_of_configTouch 0022            __end_of_gameControllerInit 5984  
                           ??___aodiv 0022                             ??___aomod 0022  
                              ___wmul 58EA                             ??___fldiv 0028  
                           ??___awdiv 0016                             ??___awmod 0016  
                       LCD_Fill@color 0012                             ??___fltol 003D  
              LCD_ButtonUpdate@button 0025                             ??___lwdiv 0024  
                           ??___lwmod 0016            gameControllerController@ev 0039  
                LCD_DrawText@fontByte 0037          __size_of_GameParameters_init 03EE  
                              clear_0 5756                                clear_1 5762  
                              clear_2 576E          __size_of_GameParameters_setX 0016  
        __size_of_GameParameters_setY 0016                      ___awdiv@quotient 0018  
           LCD_ButtonCreate@textOrBmp 001E                 _touchScreenController 3298  
                     ___awmod@divisor 0014                                isa$std 000001  
                     ___awmod@counter 0016                  __size_of_displayInit 0016  
                              pad@buf 0020                                dtoa@fp 002C  
                              _strlen 55F0                         LCD_DrawRect@i 0023  
                       LCD_DrawRect@j 001D                                fputc@c 0012  
                              fputs@c 001C                                fputs@i 001D  
                              fputs@s 001A          ?_GameParameters_setBackLight 0012  
                       LCD_DrawText@i 003E                     __end_ofi2___awmod 52C8  
                       LCD_DrawText@x 0040                         LCD_DrawText@y 003D  
                LCD_DrawText@tempChar 003F                          __mediumconst 7836  
                              tblptrh 000FF7                             ??_sleepSM 0014  
                              tblptrl 000FF6                                tblptru 000FF8  
                   __end_of_Ball_draw 35BA                     __end_of_Ball_init 532A  
                ?_Menu_parametersDraw 00E4                                putch@c 0001  
                    __end_of_vfprintf 55AE                        i2___awmod@sign 0006  
                           ??_sprintf 0042              __end_of_LCD_ButtonCreate 4050  
                         _Paddle_addX 458E                          _Factory_exec 551E  
                        _Factory_init 4650                           _Paddle_draw 3AD0  
                         _Paddle_init 4C80                      XF_pushEvent@temp 001A  
                        ___xxtofl@arg 001C                 LCD_SliderCreate@width 0016  
                        ___xxtofl@exp 001B                          ___xxtofl@val 0012  
                __end_of_LCD_InButton 4BDA                 LCD_SliderCreate@steps 0022  
            __end_of_LCD_ButtonUpdate 3298                            __accesstop 0060  
             __end_of__initialization 5774                             ?_LCD_Fill 0012  
                    _LCD_SliderCreate 4050                             ?_LCD_Init 0001  
                           ?_LCD_Read 0012                  __end_of_LCD_InSlider 4B32  
             __end_of_levelController 458E                  __end_of_LCD_DrawRect 2934  
                __end_of_LCD_DrawText 22CE           __size_of_XF_unscheduleTimer 0034  
                     i2_ENTERCRITICAL 5A00                         ___rparam_used 000001  
                          ___fltol@f1 0039                         LCD_Read@color 0018  
                    _LCD_SliderUpdate 1714                    LEAVECRITICAL@inISR 0012  
                           LCD_Init@i 0018                        __pcstackCOMRAM 0001  
                        ??_LCD_Bitmap 002D                  i2_XF_unscheduleTimer 571C  
                   ??_touchScreenInit 0018           __end_of_backlightController 2662  
                       __end_of_fputc 4EDE                         __end_of_fputs 5848  
                 gameControllerInit@g 003C            LCD_ButtonCreate@fpReleased 0024  
                       __end_of_putch 5A18                     LCD_Bitmap@biWidth 00C0  
                   ?_Menu_welcomeDraw 0044                  LCD_Bitmap@endOfImage 00AE  
            __end_of_XF_scheduleTimer 542C                    ??_Menu_welcomeDraw 0046  
                   LCD_Bitmap@curXPos 00B7   __size_of_XF_decrementAndQueueTimers 0094  
                   LCD_Bitmap@curYPos 00B1                 __size_of_XF_pushEvent 0052  
           ??_GameParameters_setLevel 0016                 ??_Menu_parametersDraw 0045  
       ??_GameParameters_setBackLight 0016                          Ball_Update@b 0012  
           ??_GameParameters_resetPos 0014               _arialNarrow_12ptBitmaps 7837  
                    ??_checkCollision 001D                    __size_of_displaySM 00A6  
               __end_of_LEAVECRITICAL 59E8                    LCD_DrawText@offset 0033  
                             ??_fputc 0015                               ??_fputs 001C  
                        ?_Ball_Update 0012                               ??_putch 0012  
    __end_of_gameControllerController 1714             gameControllerController@g 0037  
             __end_ofi2_LEAVECRITICAL 5A00                        XF_pushEvent@ev 0019  
                          __pbssBANK0 0060                            __pbssBANK1 0100  
                  __end_of_LCD_Bitmap 0E4E                            ??_LCD_Fill 0014  
                          ??_LCD_Init 0017                            ??_LCD_Read 0016  
                     ??_touchScreenSM 00B8              LCD_ButtonCreate@txtColor 001A  
                         ?_Score_draw 00D5                           ?_Score_init 0012  
                  ENTERCRITICAL@inISR 0012              __size_of_Menu_inGameDraw 0096  
                         Score_draw@s 00D5                           Score_init@s 0012  
               ?i2_XF_unscheduleTimer 0002                               ?___wmul 001A  
              ?_touchScreenController 0043                          _XF_pushEvent 5388  
                  __size_of_mooveBall 0032                    __size_of_sleepInit 0026  
                             ?_strlen 0012                  __end_of_Menu_endGame 4930  
             __size_ofi2_XF_pushEvent 0052                               _RGB2LCD 47C6  
                             _INTEDG1 007F8D                  GameParameters_init@s 002B  
                           ?___xxtofl 0012                  GameParameters_setX@s 0012  
                GameParameters_setY@s 0012                    __size_of_vfpfcnvrt 0150  
               __end_of_ENTERCRITICAL 59F4                         ?_moovePaddle1 001C  
                       ?_moovePaddle2 001C               __end_ofi2_ENTERCRITICAL 5A0C  
                    ??_LCD_ButtonDraw 00C6                  Menu_parametersDraw@g 00E4  
 __end_of_arialNarrow_12ptDescriptors 7F7B           _arialNarrow_12ptDescriptors 7E5E  
                             _XF_init 5174                   LCD_ButtonDraw@xText 00DD  
                    ?_levelController 0016                   LCD_ButtonDraw@yText 00DF  
                 LCD_ButtonDraw@width 00D3                               __Hparam 0000  
                             __Lparam 0000                               ___aodiv 370A  
                   __end_of_displaySM 4C80                               ___aomod 3C02  
                             ___fldiv 2BD2                               ___awdiv 4FEE  
                             ___awmod 51E8                               ___fltol 470C  
                     __size_of___wmul 0026               LCD_ButtonUpdate@colorIn 002D  
                             ___lwdiv 542C                               ___lwmod 5632  
                           ?_vfprintf 00C4                        LCD_Bitmap@newY 00BD  
                      LCD_Bitmap@posX 0029                        LCD_Bitmap@posY 002B  
                      LCD_Fill@colorH 0014                        LCD_Fill@colorL 0015  
                             __pcinit 5750                        LCD_Fill@column 0016  
                             __ramtop 0600                               __ptext0 5A0C  
                             __ptext1 4650                               __ptext2 589E  
                             __ptext3 5932                               __ptext4 596E  
                             __ptext5 5984                               __ptext6 5174  
                             __ptext7 2934                               __ptext8 4EDE  
                             __ptext9 551E                       __size_of_strlen 0042  
           __size_of_gameControllerSM 00E4                             _T2CONbits 000FBA  
                        __size_of_abs 0032                          __size_of_pad 0080  
                        __size_of_isr 0066                          ?_XF_popEvent 0001  
                          ??___xxtofl 0016                  LCD_Bitmap@pixelCount 00BF  
                 __size_of_Score_draw 00CC                      ___awmod@dividend 0012  
                 __size_of_Score_init 0026                 LCD_DrawText@fontPixel 0038  
                             _sleepSM 5782                 __end_of_configMeasure 56B0  
               __size_of_LCD_InButton 00A8               XF_unscheduleTimer@inISR 0013  
                      ??_moovePaddle1 001E                        ??_moovePaddle2 001E  
               __size_of_LCD_InSlider 00A8                     Menu_welcomeDraw@g 0044  
               __size_of_LCD_DrawRect 02D2                               _sprintf 55AE  
               __size_of_LCD_DrawText 03CA                      ??_LCD_SliderDraw 0039  
                end_of_initialization 5774                      ?i2_LEAVECRITICAL 0001  
                 _GameParameters_init 1B16                   _GameParameters_setX 59B0  
                 _GameParameters_setY 599A                     __end_of_mooveBall 57E6  
                             fputc@fp 0014                         __Lmediumconst 7836  
                             fputs@fp 001B                        Paddle_addX@add 0016  
                   __end_of_sleepInit 58C4                   displayController@ev 00E8  
              ??i2_XF_unscheduleTimer 0003                     __end_of_vfpfcnvrt 370A  
                          _sleepState 0089                               postdec1 000FE5  
                             postdec2 000FDD                     _LCD_Lowlevel_Init 4EDE  
                             postinc0 000FEE                               postinc1 000FE6  
                             postinc2 000FDE                            ??_vfprintf 0040  
   __size_of_gameControllerController 0410                  ?_GameParameters_init 002B  
           ?_gameControllerController 0037                     ??_Menu_inGameDraw 0044  
                ?_GameParameters_setX 0012                    ?_LCD_Lowlevel_Init 0001  
                ?_GameParameters_setY 0012                               strlen@a 0014  
                             strlen@s 0012                          _LCD_InButton 4B32  
                           _PORTBbits 000F81              __end_of_LCD_SliderCreate 413E  
              LCD_SliderCreate@height 0018                          _LCD_InSlider 4A8A  
                        _displayState 0088                          _LCD_DrawRect 2662  
                        _LCD_DrawText 1F04                     XF_pushEvent@inISR 0018  
            __end_of_LCD_SliderUpdate 1B16                      XF_popEvent@inISR 0019  
              LCD_SliderCreate@slider 0026                   ??_LCD_Lowlevel_Init 0012  
                       ___xxtofl@sign 001A                    _gameControllerInit 596E  
            __size_of_sleepController 002C                        Factory_exec@ev 00F0  
                         ___fldiv@grs 0033                           ___fldiv@rem 002C  
                           i2___awmod 5258                      ?i2_ENTERCRITICAL 0001  
                   ?_LCD_ButtonCreate 0012                          ?_Paddle_addX 0012  
                        ?_Paddle_draw 0025                             _Ball_draw 3464  
                        ?_Paddle_init 0012                             _Ball_init 52C8  
                 ?_gameControllerInit 003C                  __size_of_Ball_Update 0082  
                  ??_LCD_ButtonCreate 002B                     ?_LCD_ButtonUpdate 0025  
                     _touchScreenInit 5932                     _displayController 413E  
                         _CCP2CONbits 000F66                            displaySM@g 00EB  
                      LCD_Read@temp16 001A       __end_of_arialNarrow_12ptBitmaps 7E5E  
              RGB2LCD@colorTableEntry 0012                         ??_configTouch 0012  
                  ??_LCD_ButtonUpdate 0027                     __size_of_LCD_Fill 00AE  
                   __size_of_LCD_Init 029E                     __size_of_LCD_Read 013E  
                  ?_displayController 00E6                            RGB2LCD@red 0018  
           __end_of_LCD_Lowlevel_Init 4F6A                    LCD_Lowlevel_Init@i 0013  
               LCD_ButtonCreate@fpOut 0026                     XF_scheduleTimer@i 0017  
               LCD_ButtonCreate@index 002A                 LCD_ButtonCreate@width 0016  
                       ??_displayInit 0046                 __size_of_Menu_endGame 00B0  
               ??_GameParameters_init 002D                 ??_GameParameters_setX 0016  
               ??_GameParameters_setY 0016                   ??_displayController 00E9  
                         vfpfcnvrt@ap 003F                           vfpfcnvrt@fp 003D  
                         vfpfcnvrt@ll 00BC                        __end_of___wmul 5910  
                ??_gameControllerInit 003E                    LCD_Bitmap@biHeight 00B5  
                XF_unscheduleTimer@id 0014                        i2_XF_pushEvent 547E  
                   ?_XF_scheduleTimer 0013                        __end_of_strlen 5632  
                       XF_popEvent@ev 0018                   start_initialization 5750  
                  ??_XF_scheduleTimer 0017                           __end_of_abs 5818  
                  LCD_InButton@button 0012                           __end_of_pad 5174  
                         __end_of_isr 006E                 XF_scheduleTimer@inISR 0016  
                          ?i2___awmod 0001                            ?_Ball_draw 0025  
                          ?_Ball_init 0012             __end_of_displayController 422C  
           __size_of_Menu_welcomeDraw 0084            __end_of_XF_unscheduleTimer 571C  
                        ??_Score_draw 0042                     LCD_DrawRect@color 001B  
                        _Menu_endGame 4880                          ??_Score_init 0014  
                   LCD_DrawRect@posX1 0012                     LCD_DrawRect@posX2 0016  
                   LCD_DrawRect@posY1 0014                     LCD_DrawRect@posY2 0018  
                  i2XF_pushEvent@temp 0009               ??_touchScreenController 00AA  
                         vfprintf@fmt 00C5                              ??___wmul 001E  
                __end_of_moovePaddle1 4A8A                  __end_of_moovePaddle2 4314  
                 LCD_DrawText@yOffset 0035                   __end_of_configTouch 5932  
              __end_ofi2_XF_pushEvent 54D0                   LCD_DrawText@posXEnd 003B  
                 LCD_DrawText@posYEnd 0039              _arialNarrow_12ptFontInfo 7F7B  
         __end_of_Menu_parametersDraw 3E48               __size_of_configPinSleep 001E  
                            ??_strlen 0014                  LCD_SliderCreate@posX 0012  
                LCD_SliderCreate@posY 0014                      _gameControllerSM 4314  
                 __end_of_displayInit 599A                             ___fldiv@a 0024  
                           ___fldiv@b 0020                              ?_RGB2LCD 0012  
        __size_of_backlightController 0394                           __pbssCOMRAM 0046  
              LCD_SliderUpdate@slider 0027                         Menu_endGame@g 0044  
         XF_decrementAndQueueTimers@i 000C                         __pcstackBANK0 00AA  
                  __end_of_Score_draw 44C4                  LCD_SliderDraw@slider 0037  
                  __end_of_Score_init 58EA                      ___aodiv@dividend 0012  
                  gameControllerSM@ev 0040               __end_of_touchScreenInit 5950  
                __size_of_XF_popEvent 004E                     __size_of___xxtofl 0140  
                       moovePaddle1@g 001C                         moovePaddle2@g 001C  
                    LCD_InButton@posX 0014                      LCD_InButton@posY 0016  
                    LCD_Bitmap@bmpPtr 0027                     LCD_DrawText@align 0024  
                            ?_XF_init 0001                     LCD_DrawText@color 0029  
                   ??_sleepController 0012                      LCD_Bitmap@strPtr 00BB  
        ??_XF_decrementAndQueueTimers 000A                     LCD_DrawText@width 0041  
               __end_of_touchScreenSM 5388               LCD_Bitmap@colorTablePtr 00B3  
                i2LEAVECRITICAL@inISR 0001                      LCD_SliderDraw@x1 003D  
                    LCD_SliderDraw@x2 003F                      LCD_SliderDraw@y1 0041  
                    LCD_SliderDraw@y2 0043            __size_of_LCD_Lowlevel_Init 008C  
                    ___lwdiv@dividend 0020                             _dtoa$5500 00AA  
                           __pintcode 0008                         __pmediumconst 7836  
                            ?___aodiv 0012                              ?___aomod 0012  
                            ?___fldiv 0020                              ?___awdiv 0012  
                    ___aodiv@quotient 0024                              ?___awmod 0012  
                            ?___fltol 0039                              ?___lwdiv 0020  
                            ?___lwmod 0012                __size_of_LEAVECRITICAL 000C  
                     ?i2_XF_pushEvent 0007                             _displaySM 4BDA  
                   __size_of_vfprintf 0048              ?_GameParameters_setLevel 0012  
 __end_of_GameParameters_setBackLight 56E8           _GameParameters_setBackLight 56B0  
            ?_GameParameters_resetPos 0012                            mooveBall@g 0025  
                            ?_sleepSM 0001                      levelController@g 0016  
                    ___lwdiv@quotient 0024           touchScreenController@valueX 00B4  
         touchScreenController@valueY 00B0                           ??i2___awmod 0005  
                            ?_sprintf 00C8                        __size_of_fputc 0090  
                      __size_of_fputs 0030                        __size_of_putch 0002  
                         ??_Ball_draw 0027                           ??_Ball_init 0014  
          __size_of_displayController 00EE                            sleepInit@g 00ED  
                            _LCD_Fill 4930                              _LCD_Init 2934  
                            _LCD_Read 3992                        ___wmul@product 001E  
                __size_of_Paddle_addX 00C2                  __size_of_Paddle_draw 0132  
                __size_of_Paddle_init 00A4                       _Menu_inGameDraw 4D24  
                i2ENTERCRITICAL@inISR 0001                    LCD_SliderUpdate@x1 0035  
                  LCD_SliderUpdate@x2 002F                    LCD_SliderUpdate@y1 0031  
                  LCD_SliderUpdate@y2 0033                    displayController@g 00E6  
             __size_of_checkCollision 08AA                             _mooveBall 57B4  
                         _configTouch 5910                              i2u540_40 5292  
                            XF_init@i 0012                             _sleepInit 589E  
                            i2u567_40 4E4C                __size_of_ENTERCRITICAL 000C  
            __size_of_levelController 00CA                           _displayInit 5984  
                           _vfpfcnvrt 35BA                            ?_displaySM 00EB  
                   ___wmul@multiplier 001A                     ?_LCD_SliderCreate 0012  
    GameParameters_setBackLight@value 0014                    LCD_ButtonUpdate@x1 0033  
                  LCD_ButtonUpdate@x2 002F                    LCD_ButtonUpdate@y1 0031  
                  LCD_ButtonUpdate@y2 0035                    ??_LCD_SliderCreate 0028  
                    __size_of_RGB2LCD 00BA                     ?_LCD_SliderUpdate 0027  
                    LCD_InSlider@posX 0014                      LCD_InSlider@posY 0016  
                LCD_ButtonCreate@font 0020                  LCD_ButtonCreate@posX 0012  
                LCD_ButtonCreate@posY 0014                  LCD_ButtonDraw@bmpPtr 00E2  
                    ?_touchScreenInit 0001                    ??_LCD_SliderUpdate 0029  
                LCD_ButtonDraw@button 0042                         _LEAVECRITICAL 59DC  
                       ?_Factory_exec 0001                         ?_Factory_init 0001  
                  i2___awmod@dividend 0001                      _Menu_welcomeDraw 4F6A  
                     checkCollision@g 001B                      __size_of_XF_init 0074  
               __size_of_moovePaddle1 00AC                 __size_of_moovePaddle2 00E8  
                    LCD_DrawRect@fill 001A                            ?_mooveBall 0025  
                            __Hrparam 0000                      LCD_DrawRect@temp 001F  
                          ?_sleepInit 00ED              __size_ofi2_LEAVECRITICAL 000C  
                          vfprintf@ap 00C7                              __Lrparam 0000  
                          vfprintf@fp 00C4             i2XF_unscheduleTimer@inISR 0002  
             __size_of_LCD_ButtonDraw 04B6         __size_ofi2_XF_unscheduleTimer 0034  
              __size_of_configMeasure 003C       __end_of_GameParameters_setLevel 59DC  
           __size_of_LCD_ButtonCreate 00FA                      __size_of___aodiv 0148  
     __end_of_GameParameters_resetPos 589E                      __size_of___aomod 0124  
                    __size_of___fldiv 0288                      __size_of___awdiv 0084  
                    __size_of___awmod 0070                      __size_of___fltol 00BA  
                          ?_vfpfcnvrt 003D                      __size_of___lwdiv 0052  
                    __size_of___lwmod 0042                        _configPinSleep 5950  
           __size_of_LCD_ButtonUpdate 0210                     gameControllerSM@g 003C  
                     ___aodiv@divisor 001A                      Paddle_addX@value 0014  
            LCD_ButtonUpdate@colorOut 002B                       ___aodiv@counter 0022  
            GameParameters_setX@value 0014                       LCD_Bitmap@color 00B9  
            GameParameters_setY@value 0014                      LCD_DrawText@font 0022  
                          sprintf@fmt 00CA                      LCD_DrawText@posX 0025  
                    LCD_DrawText@posY 0027              GameParameters_setLevel@s 0012  
                            ___xxtofl 3852                            Ball_draw@b 0025  
                     ___lwdiv@divisor 0022                            Ball_init@b 0012  
                     ___lwdiv@counter 0026                              __ptext10 532A  
                            __ptext11 3298                              __ptext20 5848  
                            __ptext12 5674                              __ptext21 5950  
                            __ptext13 3852                              __ptext30 0072  
                            __ptext22 5910                              __ptext14 470C  
                            __ptext31 5388                              __ptext23 4314  
                            __ptext15 2BD2                              __ptext40 1B16  
                            __ptext32 5072                              __ptext24 1304  
                            __ptext16 56E8                              __ptext41 58C4  
                            __ptext33 44C4                              __ptext25 422C  
                            __ptext17 599A                              __ptext50 3E48  
                            __ptext42 4C80                              __ptext34 59C6  
                            __ptext26 49DE                              __ptext18 59B0  
                            __ptext51 1714                              __ptext43 4050  
                            __ptext35 22CE                              __ptext27 458E  
                            __ptext19 5782                              __ptext60 5818  
                            __ptext52 4880                              __ptext44 3F56  
                            __ptext36 56B0                              __ptext28 5874  
                            __ptext61 4E4E                              __ptext53 4D24  
                            __ptext45 52C8                              __ptext37 53DA  
                            __ptext29 57B4                              __ptext70 55F0  
                            __ptext62 5A16                              __ptext54 43F8  
                            __ptext46 4BDA                              __ptext38 4A8A  
                            __ptext71 4FEE                              __ptext63 57E6  
                            __ptext55 55AE                              __ptext47 413E  
                            __ptext39 4B32                              __ptext80 2662  
                            __ptext72 3088                              __ptext64 3C02  
                            __ptext56 5566                              __ptext48 4F6A  
                            __ptext81 54D0                              __ptext73 3992  
                            __ptext65 370A                              __ptext57 35BA  
                            __ptext49 3D26                              __ptext90 59F4  
                            __ptext82 51E8                              __ptext74 091C  
                            __ptext66 3AD0                              __ptext58 2E5A  
                            __ptext91 5A00                              __ptext83 59DC  
                            __ptext75 58EA                              __ptext67 4930  
                            __ptext59 50F4                              __ptext84 59E8  
                            __ptext76 5632                              __ptext68 0E4E  
                            __ptext77 542C                              __ptext69 1F04  
                            __ptext86 4DBA                              __ptext78 47C6  
                            __ptext87 571C                              __ptext79 3464  
                            __ptext88 547E                              __ptext89 5258  
                    __size_of_sleepSM 0032                        ?_LEAVECRITICAL 0001  
                       _ENTERCRITICAL 59E8                         ??_Ball_Update 0014  
                      ??_Factory_exec 0046                        ??_Factory_init 00EF  
             __end_of_Menu_inGameDraw 4DBA                          _moovePaddle1 49DE  
                        _moovePaddle2 422C              GameParameters_resetPos@s 0012  
                    __size_of_sprintf 0042    __end_of_XF_decrementAndQueueTimers 4E4E  
          _XF_decrementAndQueueTimers 4DBA                         __size_of_main 000A  
                           sleepSM@ev 0016                         __size_of_dtoa 022E  
           __size_of_XF_scheduleTimer 0052              __end_of_gameControllerSM 43F8  
                 _backlightController 22CE           __end_of_GameParameters_init 1F04  
         __end_of_GameParameters_setX 59C6           __end_of_GameParameters_setY 59B0  
            __size_ofi2_ENTERCRITICAL 000C               __size_of_LCD_SliderDraw 010E  
        GameParameters_setBackLight@s 0012              _gameControllerController 1304  
                            isa$xinst 000000                            _LCD_Bitmap 091C  
      __size_of_touchScreenController 01CC                    _XF_unscheduleTimer 56E8  
       __end_of_touchScreenController 3464                              int$flags 004E  
              __end_of_configPinSleep 596E                              _vfprintf 5566  
                       ?_XF_pushEvent 0018           __size_of_gameControllerInit 0016  
                         ??_displaySM 00ED                      ___aomod@dividend 0012  
                 ?_XF_unscheduleTimer 0013                     i2___awmod@divisor 0003  
                   ??_levelController 0018                     i2___awmod@counter 0005  
                ?_backlightController 0018                       _sleepController 5848  
                      ?_ENTERCRITICAL 0001                         _configMeasure 5674  
                            intlevel2 0000                             sprintf@ap 00CE  
                     LCD_DrawText@msg 0020                      ___lwmod@dividend 0012  
                ??_XF_unscheduleTimer 0014                   __end_of_Ball_Update 50F4  
                      _checkCollision 0072                           ??_mooveBall 0027  
                         ??_sleepInit 0046                      ??i2_XF_pushEvent 0008  
                      ??_XF_pushEvent 0019                       ?_configPinSleep 0001  
                     ___aomod@divisor 001A                           ??_vfpfcnvrt 0040  
                     ___aomod@counter 0022                     ??i2_LEAVECRITICAL 0001  
                            sprintf@f 00CF                              sprintf@s 00C8  
               ??_backlightController 001A                         ??_XF_popEvent 0018  
                     ___lwmod@divisor 0014               LCD_SliderCreate@bgColor 001C  
                     ___lwmod@counter 0016                       ??_LEAVECRITICAL 0012  
                      ?_configMeasure 0001           LCD_SliderCreate@borderColor 001E  
        __size_of_Menu_parametersDraw 0122              LCD_SliderCreate@sldColor 001A  
             LCD_SliderCreate@fpPress 0024                      ?_Menu_inGameDraw 00E4  
                        ___aodiv@sign 0023      __size_of_GameParameters_setLevel 0016  
                     Paddle_init@team 0014                __end_of_checkCollision 091C  
    __size_of_GameParameters_resetPos 002A  __size_of_GameParameters_setBackLight 0038  
                        ___aomod@sign 0023                          ?_configTouch 0001  
