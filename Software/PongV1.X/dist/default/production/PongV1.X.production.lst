

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Tue Sep 07 15:42:20 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og9 
     1                           	processor	18LF25K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=2
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=2
    71                           	psect	text59,global,reloc=2,class=CODE,delta=1
    72                           	psect	text60,global,reloc=2,class=CODE,delta=1
    73                           	psect	text61,global,reloc=2,class=CODE,delta=1
    74                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=3
    75                           	psect	text63,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text64,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text65,global,reloc=2,class=CODE,delta=1,group=1
    78                           	psect	text66,global,reloc=2,class=CODE,delta=1,group=1
    79                           	psect	text67,global,reloc=2,class=CODE,delta=1,group=3
    80                           	psect	text68,global,reloc=2,class=CODE,delta=1,group=3
    81                           	psect	text69,global,reloc=2,class=CODE,delta=1,group=3
    82                           	psect	text70,global,reloc=2,class=CODE,delta=1,group=3
    83                           	psect	text71,global,reloc=2,class=CODE,delta=1,group=2
    84                           	psect	text72,global,reloc=2,class=CODE,delta=1,group=2
    85                           	psect	text73,global,reloc=2,class=CODE,delta=1
    86                           	psect	text74,global,reloc=2,class=CODE,delta=1,group=3
    87                           	psect	text75,global,reloc=2,class=CODE,delta=1,group=2
    88                           	psect	text76,global,reloc=2,class=CODE,delta=1,group=2
    89                           	psect	text77,global,reloc=2,class=CODE,delta=1
    90                           	psect	text78,global,reloc=2,class=CODE,delta=1
    91                           	psect	text79,global,reloc=2,class=CODE,delta=1
    92                           	psect	text80,global,reloc=2,class=CODE,delta=1
    93                           	psect	text81,global,reloc=2,class=CODE,delta=1
    94                           	psect	text82,global,reloc=2,class=CODE,delta=1,group=2
    95                           	psect	text83,global,reloc=2,class=CODE,delta=1
    96                           	psect	text84,global,reloc=2,class=CODE,delta=1
    97                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    98                           	psect	text86,global,reloc=2,class=CODE,delta=1
    99                           	psect	text87,global,reloc=2,class=CODE,delta=1
   100                           	psect	text88,global,reloc=2,class=CODE,delta=1
   101                           	psect	text89,global,reloc=2,class=CODE,delta=1
   102                           	psect	text90,global,reloc=2,class=CODE,delta=1
   103                           	psect	text91,global,reloc=2,class=CODE,delta=1
   104                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   105                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   106                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   107                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
   108                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
   109  0000                     
   110                           ; Version 2.32
   111                           ; Generated 02/02/2021 GMT
   112                           ; 
   113                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
   114                           ; All rights reserved.
   115                           ; 
   116                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   117                           ; 
   118                           ; Redistribution and use in source and binary forms, with or without modification, are
   119                           ; permitted provided that the following conditions are met:
   120                           ; 
   121                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   122                           ;        conditions and the following disclaimer.
   123                           ; 
   124                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   125                           ;        of conditions and the following disclaimer in the documentation and/or other
   126                           ;        materials provided with the distribution. Publication is not required when
   127                           ;        this file is used in an embedded application.
   128                           ; 
   129                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   130                           ;        software without specific prior written permission.
   131                           ; 
   132                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   133                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   134                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   135                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   136                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   137                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   138                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   139                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   140                           ; 
   141                           ; 
   142                           ; Code-generator required, PIC18LF25K22 Definitions
   143                           ; 
   144                           ; SFR Addresses
   145  0000                     
   146                           	psect	mediumconst
   147  007836                     __pmediumconst:
   148                           	callstack 0
   149  007836  00                 	db	0
   150  007837                     _arialNarrow_12ptBitmaps:
   151                           	callstack 0
   152  007837  00                 	db	0
   153  007838  00                 	db	0
   154  007839  00                 	db	0
   155  00783A  00                 	db	0
   156  00783B  00                 	db	0
   157  00783C  00                 	db	0
   158  00783D  00                 	db	0
   159  00783E  00                 	db	0
   160  00783F  00                 	db	0
   161  007840  00                 	db	0
   162  007841  00                 	db	0
   163  007842  00                 	db	0
   164  007843  00                 	db	0
   165  007844  00                 	db	0
   166  007845  00                 	db	0
   167  007846  00                 	db	0
   168  007847  C0                 	db	192
   169  007848  C0                 	db	192
   170  007849  C0                 	db	192
   171  00784A  C0                 	db	192
   172  00784B  C0                 	db	192
   173  00784C  C0                 	db	192
   174  00784D  C0                 	db	192
   175  00784E  C0                 	db	192
   176  00784F  00                 	db	0
   177  007850  C0                 	db	192
   178  007851  C0                 	db	192
   179  007852  00                 	db	0
   180  007853  00                 	db	0
   181  007854  00                 	db	0
   182  007855  00                 	db	0
   183  007856  D8                 	db	216
   184  007857  D8                 	db	216
   185  007858  D8                 	db	216
   186  007859  D8                 	db	216
   187  00785A  00                 	db	0
   188  00785B  00                 	db	0
   189  00785C  00                 	db	0
   190  00785D  00                 	db	0
   191  00785E  00                 	db	0
   192  00785F  00                 	db	0
   193  007860  00                 	db	0
   194  007861  00                 	db	0
   195  007862  00                 	db	0
   196  007863  00                 	db	0
   197  007864  00                 	db	0
   198  007865  12                 	db	18
   199  007866  12                 	db	18
   200  007867  24                 	db	36
   201  007868  FE                 	db	254
   202  007869  FE                 	db	254
   203  00786A  48                 	db	72
   204  00786B  FE                 	db	254
   205  00786C  FE                 	db	254
   206  00786D  48                 	db	72
   207  00786E  90                 	db	144
   208  00786F  90                 	db	144
   209  007870  00                 	db	0
   210  007871  00                 	db	0
   211  007872  00                 	db	0
   212  007873  10                 	db	16
   213  007874  7C                 	db	124
   214  007875  FC                 	db	252
   215  007876  D6                 	db	214
   216  007877  D0                 	db	208
   217  007878  F0                 	db	240
   218  007879  7C                 	db	124
   219  00787A  1E                 	db	30
   220  00787B  16                 	db	22
   221  00787C  D6                 	db	214
   222  00787D  7E                 	db	126
   223  00787E  7C                 	db	124
   224  00787F  10                 	db	16
   225  007880  00                 	db	0
   226  007881  00                 	db	0
   227  007882  00                 	db	0
   228  007883  00                 	db	0
   229  007884  61                 	db	97
   230  007885  00                 	db	0
   231  007886  91                 	db	145
   232  007887  00                 	db	0
   233  007888  92                 	db	146
   234  007889  00                 	db	0
   235  00788A  92                 	db	146
   236  00788B  00                 	db	0
   237  00788C  94                 	db	148
   238  00788D  00                 	db	0
   239  00788E  65                 	db	101
   240  00788F  80                 	db	128
   241  007890  06                 	db	6
   242  007891  40                 	db	64
   243  007892  0A                 	db	10
   244  007893  40                 	db	64
   245  007894  0A                 	db	10
   246  007895  40                 	db	64
   247  007896  12                 	db	18
   248  007897  40                 	db	64
   249  007898  11                 	db	17
   250  007899  80                 	db	128
   251  00789A  00                 	db	0
   252  00789B  00                 	db	0
   253  00789C  00                 	db	0
   254  00789D  00                 	db	0
   255  00789E  00                 	db	0
   256  00789F  00                 	db	0
   257  0078A0  00                 	db	0
   258  0078A1  38                 	db	56
   259  0078A2  7C                 	db	124
   260  0078A3  6C                 	db	108
   261  0078A4  7C                 	db	124
   262  0078A5  30                 	db	48
   263  0078A6  78                 	db	120
   264  0078A7  DA                 	db	218
   265  0078A8  CE                 	db	206
   266  0078A9  CE                 	db	206
   267  0078AA  FF                 	db	255
   268  0078AB  7A                 	db	122
   269  0078AC  00                 	db	0
   270  0078AD  00                 	db	0
   271  0078AE  00                 	db	0
   272  0078AF  00                 	db	0
   273  0078B0  C0                 	db	192
   274  0078B1  C0                 	db	192
   275  0078B2  C0                 	db	192
   276  0078B3  C0                 	db	192
   277  0078B4  00                 	db	0
   278  0078B5  00                 	db	0
   279  0078B6  00                 	db	0
   280  0078B7  00                 	db	0
   281  0078B8  00                 	db	0
   282  0078B9  00                 	db	0
   283  0078BA  00                 	db	0
   284  0078BB  00                 	db	0
   285  0078BC  00                 	db	0
   286  0078BD  00                 	db	0
   287  0078BE  00                 	db	0
   288  0078BF  10                 	db	16
   289  0078C0  20                 	db	32
   290  0078C1  60                 	db	96
   291  0078C2  60                 	db	96
   292  0078C3  C0                 	db	192
   293  0078C4  C0                 	db	192
   294  0078C5  C0                 	db	192
   295  0078C6  C0                 	db	192
   296  0078C7  C0                 	db	192
   297  0078C8  C0                 	db	192
   298  0078C9  60                 	db	96
   299  0078CA  60                 	db	96
   300  0078CB  20                 	db	32
   301  0078CC  10                 	db	16
   302  0078CD  00                 	db	0
   303  0078CE  80                 	db	128
   304  0078CF  40                 	db	64
   305  0078D0  60                 	db	96
   306  0078D1  20                 	db	32
   307  0078D2  30                 	db	48
   308  0078D3  30                 	db	48
   309  0078D4  30                 	db	48
   310  0078D5  30                 	db	48
   311  0078D6  30                 	db	48
   312  0078D7  30                 	db	48
   313  0078D8  60                 	db	96
   314  0078D9  60                 	db	96
   315  0078DA  40                 	db	64
   316  0078DB  80                 	db	128
   317  0078DC  00                 	db	0
   318  0078DD  20                 	db	32
   319  0078DE  A8                 	db	168
   320  0078DF  F8                 	db	248
   321  0078E0  20                 	db	32
   322  0078E1  50                 	db	80
   323  0078E2  50                 	db	80
   324  0078E3  00                 	db	0
   325  0078E4  00                 	db	0
   326  0078E5  00                 	db	0
   327  0078E6  00                 	db	0
   328  0078E7  00                 	db	0
   329  0078E8  00                 	db	0
   330  0078E9  00                 	db	0
   331  0078EA  00                 	db	0
   332  0078EB  00                 	db	0
   333  0078EC  00                 	db	0
   334  0078ED  00                 	db	0
   335  0078EE  00                 	db	0
   336  0078EF  30                 	db	48
   337  0078F0  30                 	db	48
   338  0078F1  30                 	db	48
   339  0078F2  FC                 	db	252
   340  0078F3  FC                 	db	252
   341  0078F4  30                 	db	48
   342  0078F5  30                 	db	48
   343  0078F6  30                 	db	48
   344  0078F7  00                 	db	0
   345  0078F8  00                 	db	0
   346  0078F9  00                 	db	0
   347  0078FA  00                 	db	0
   348  0078FB  00                 	db	0
   349  0078FC  00                 	db	0
   350  0078FD  00                 	db	0
   351  0078FE  00                 	db	0
   352  0078FF  00                 	db	0
   353  007900  00                 	db	0
   354  007901  00                 	db	0
   355  007902  00                 	db	0
   356  007903  00                 	db	0
   357  007904  C0                 	db	192
   358  007905  C0                 	db	192
   359  007906  40                 	db	64
   360  007907  40                 	db	64
   361  007908  80                 	db	128
   362  007909  00                 	db	0
   363  00790A  00                 	db	0
   364  00790B  00                 	db	0
   365  00790C  00                 	db	0
   366  00790D  00                 	db	0
   367  00790E  00                 	db	0
   368  00790F  00                 	db	0
   369  007910  F0                 	db	240
   370  007911  F0                 	db	240
   371  007912  00                 	db	0
   372  007913  00                 	db	0
   373  007914  00                 	db	0
   374  007915  00                 	db	0
   375  007916  00                 	db	0
   376  007917  00                 	db	0
   377  007918  00                 	db	0
   378  007919  00                 	db	0
   379  00791A  00                 	db	0
   380  00791B  00                 	db	0
   381  00791C  00                 	db	0
   382  00791D  00                 	db	0
   383  00791E  00                 	db	0
   384  00791F  00                 	db	0
   385  007920  00                 	db	0
   386  007921  00                 	db	0
   387  007922  C0                 	db	192
   388  007923  C0                 	db	192
   389  007924  00                 	db	0
   390  007925  00                 	db	0
   391  007926  00                 	db	0
   392  007927  00                 	db	0
   393  007928  30                 	db	48
   394  007929  30                 	db	48
   395  00792A  30                 	db	48
   396  00792B  60                 	db	96
   397  00792C  60                 	db	96
   398  00792D  60                 	db	96
   399  00792E  60                 	db	96
   400  00792F  60                 	db	96
   401  007930  C0                 	db	192
   402  007931  C0                 	db	192
   403  007932  C0                 	db	192
   404  007933  00                 	db	0
   405  007934  00                 	db	0
   406  007935  00                 	db	0
   407  007936  00                 	db	0
   408  007937  78                 	db	120
   409  007938  78                 	db	120
   410  007939  CC                 	db	204
   411  00793A  CC                 	db	204
   412  00793B  CC                 	db	204
   413  00793C  CC                 	db	204
   414  00793D  CC                 	db	204
   415  00793E  CC                 	db	204
   416  00793F  CC                 	db	204
   417  007940  78                 	db	120
   418  007941  78                 	db	120
   419  007942  00                 	db	0
   420  007943  00                 	db	0
   421  007944  00                 	db	0
   422  007945  00                 	db	0
   423  007946  30                 	db	48
   424  007947  30                 	db	48
   425  007948  70                 	db	112
   426  007949  F0                 	db	240
   427  00794A  B0                 	db	176
   428  00794B  30                 	db	48
   429  00794C  30                 	db	48
   430  00794D  30                 	db	48
   431  00794E  30                 	db	48
   432  00794F  30                 	db	48
   433  007950  30                 	db	48
   434  007951  00                 	db	0
   435  007952  00                 	db	0
   436  007953  00                 	db	0
   437  007954  00                 	db	0
   438  007955  38                 	db	56
   439  007956  7C                 	db	124
   440  007957  CC                 	db	204
   441  007958  CC                 	db	204
   442  007959  0C                 	db	12
   443  00795A  18                 	db	24
   444  00795B  38                 	db	56
   445  00795C  70                 	db	112
   446  00795D  60                 	db	96
   447  00795E  FC                 	db	252
   448  00795F  FC                 	db	252
   449  007960  00                 	db	0
   450  007961  00                 	db	0
   451  007962  00                 	db	0
   452  007963  00                 	db	0
   453  007964  78                 	db	120
   454  007965  FC                 	db	252
   455  007966  CC                 	db	204
   456  007967  0C                 	db	12
   457  007968  38                 	db	56
   458  007969  38                 	db	56
   459  00796A  0C                 	db	12
   460  00796B  0C                 	db	12
   461  00796C  CC                 	db	204
   462  00796D  F8                 	db	248
   463  00796E  78                 	db	120
   464  00796F  00                 	db	0
   465  007970  00                 	db	0
   466  007971  00                 	db	0
   467  007972  00                 	db	0
   468  007973  0C                 	db	12
   469  007974  1C                 	db	28
   470  007975  1C                 	db	28
   471  007976  3C                 	db	60
   472  007977  2C                 	db	44
   473  007978  6C                 	db	108
   474  007979  CC                 	db	204
   475  00797A  FE                 	db	254
   476  00797B  FE                 	db	254
   477  00797C  0C                 	db	12
   478  00797D  0C                 	db	12
   479  00797E  00                 	db	0
   480  00797F  00                 	db	0
   481  007980  00                 	db	0
   482  007981  00                 	db	0
   483  007982  7C                 	db	124
   484  007983  7C                 	db	124
   485  007984  60                 	db	96
   486  007985  D8                 	db	216
   487  007986  FC                 	db	252
   488  007987  CC                 	db	204
   489  007988  0C                 	db	12
   490  007989  CC                 	db	204
   491  00798A  CC                 	db	204
   492  00798B  78                 	db	120
   493  00798C  78                 	db	120
   494  00798D  00                 	db	0
   495  00798E  00                 	db	0
   496  00798F  00                 	db	0
   497  007990  00                 	db	0
   498  007991  70                 	db	112
   499  007992  78                 	db	120
   500  007993  D8                 	db	216
   501  007994  C0                 	db	192
   502  007995  F0                 	db	240
   503  007996  F8                 	db	248
   504  007997  D8                 	db	216
   505  007998  D8                 	db	216
   506  007999  D8                 	db	216
   507  00799A  78                 	db	120
   508  00799B  70                 	db	112
   509  00799C  00                 	db	0
   510  00799D  00                 	db	0
   511  00799E  00                 	db	0
   512  00799F  00                 	db	0
   513  0079A0  F8                 	db	248
   514  0079A1  F8                 	db	248
   515  0079A2  18                 	db	24
   516  0079A3  10                 	db	16
   517  0079A4  30                 	db	48
   518  0079A5  30                 	db	48
   519  0079A6  20                 	db	32
   520  0079A7  60                 	db	96
   521  0079A8  60                 	db	96
   522  0079A9  60                 	db	96
   523  0079AA  60                 	db	96
   524  0079AB  00                 	db	0
   525  0079AC  00                 	db	0
   526  0079AD  00                 	db	0
   527  0079AE  00                 	db	0
   528  0079AF  78                 	db	120
   529  0079B0  FC                 	db	252
   530  0079B1  CC                 	db	204
   531  0079B2  CC                 	db	204
   532  0079B3  78                 	db	120
   533  0079B4  78                 	db	120
   534  0079B5  CC                 	db	204
   535  0079B6  CC                 	db	204
   536  0079B7  CC                 	db	204
   537  0079B8  FC                 	db	252
   538  0079B9  78                 	db	120
   539  0079BA  00                 	db	0
   540  0079BB  00                 	db	0
   541  0079BC  00                 	db	0
   542  0079BD  00                 	db	0
   543  0079BE  70                 	db	112
   544  0079BF  F8                 	db	248
   545  0079C0  CC                 	db	204
   546  0079C1  CC                 	db	204
   547  0079C2  CC                 	db	204
   548  0079C3  FC                 	db	252
   549  0079C4  7C                 	db	124
   550  0079C5  0C                 	db	12
   551  0079C6  CC                 	db	204
   552  0079C7  F8                 	db	248
   553  0079C8  70                 	db	112
   554  0079C9  00                 	db	0
   555  0079CA  00                 	db	0
   556  0079CB  00                 	db	0
   557  0079CC  00                 	db	0
   558  0079CD  00                 	db	0
   559  0079CE  00                 	db	0
   560  0079CF  00                 	db	0
   561  0079D0  C0                 	db	192
   562  0079D1  C0                 	db	192
   563  0079D2  00                 	db	0
   564  0079D3  00                 	db	0
   565  0079D4  00                 	db	0
   566  0079D5  00                 	db	0
   567  0079D6  C0                 	db	192
   568  0079D7  C0                 	db	192
   569  0079D8  00                 	db	0
   570  0079D9  00                 	db	0
   571  0079DA  00                 	db	0
   572  0079DB  00                 	db	0
   573  0079DC  00                 	db	0
   574  0079DD  00                 	db	0
   575  0079DE  00                 	db	0
   576  0079DF  C0                 	db	192
   577  0079E0  C0                 	db	192
   578  0079E1  00                 	db	0
   579  0079E2  00                 	db	0
   580  0079E3  00                 	db	0
   581  0079E4  00                 	db	0
   582  0079E5  C0                 	db	192
   583  0079E6  C0                 	db	192
   584  0079E7  40                 	db	64
   585  0079E8  40                 	db	64
   586  0079E9  80                 	db	128
   587  0079EA  00                 	db	0
   588  0079EB  00                 	db	0
   589  0079EC  04                 	db	4
   590  0079ED  1C                 	db	28
   591  0079EE  38                 	db	56
   592  0079EF  F0                 	db	240
   593  0079F0  C0                 	db	192
   594  0079F1  F0                 	db	240
   595  0079F2  38                 	db	56
   596  0079F3  1C                 	db	28
   597  0079F4  04                 	db	4
   598  0079F5  00                 	db	0
   599  0079F6  00                 	db	0
   600  0079F7  00                 	db	0
   601  0079F8  00                 	db	0
   602  0079F9  00                 	db	0
   603  0079FA  00                 	db	0
   604  0079FB  00                 	db	0
   605  0079FC  00                 	db	0
   606  0079FD  FC                 	db	252
   607  0079FE  FC                 	db	252
   608  0079FF  00                 	db	0
   609  007A00  FC                 	db	252
   610  007A01  FC                 	db	252
   611  007A02  00                 	db	0
   612  007A03  00                 	db	0
   613  007A04  00                 	db	0
   614  007A05  00                 	db	0
   615  007A06  00                 	db	0
   616  007A07  00                 	db	0
   617  007A08  00                 	db	0
   618  007A09  00                 	db	0
   619  007A0A  80                 	db	128
   620  007A0B  E0                 	db	224
   621  007A0C  70                 	db	112
   622  007A0D  3C                 	db	60
   623  007A0E  0C                 	db	12
   624  007A0F  1C                 	db	28
   625  007A10  70                 	db	112
   626  007A11  E0                 	db	224
   627  007A12  80                 	db	128
   628  007A13  00                 	db	0
   629  007A14  00                 	db	0
   630  007A15  00                 	db	0
   631  007A16  00                 	db	0
   632  007A17  00                 	db	0
   633  007A18  78                 	db	120
   634  007A19  FC                 	db	252
   635  007A1A  CC                 	db	204
   636  007A1B  CC                 	db	204
   637  007A1C  1C                 	db	28
   638  007A1D  18                 	db	24
   639  007A1E  30                 	db	48
   640  007A1F  30                 	db	48
   641  007A20  00                 	db	0
   642  007A21  30                 	db	48
   643  007A22  30                 	db	48
   644  007A23  00                 	db	0
   645  007A24  00                 	db	0
   646  007A25  00                 	db	0
   647  007A26  00                 	db	0
   648  007A27  00                 	db	0
   649  007A28  0F                 	db	15
   650  007A29  C0                 	db	192
   651  007A2A  1F                 	db	31
   652  007A2B  E0                 	db	224
   653  007A2C  30                 	db	48
   654  007A2D  30                 	db	48
   655  007A2E  66                 	db	102
   656  007A2F  D8                 	db	216
   657  007A30  EF                 	db	239
   658  007A31  D8                 	db	216
   659  007A32  DD                 	db	221
   660  007A33  D8                 	db	216
   661  007A34  D8                 	db	216
   662  007A35  98                 	db	152
   663  007A36  D9                 	db	217
   664  007A37  98                 	db	152
   665  007A38  D9                 	db	217
   666  007A39  B0                 	db	176
   667  007A3A  DF                 	db	223
   668  007A3B  F0                 	db	240
   669  007A3C  6E                 	db	110
   670  007A3D  C8                 	db	200
   671  007A3E  70                 	db	112
   672  007A3F  10                 	db	16
   673  007A40  3F                 	db	63
   674  007A41  E0                 	db	224
   675  007A42  0F                 	db	15
   676  007A43  C0                 	db	192
   677  007A44  00                 	db	0
   678  007A45  00                 	db	0
   679  007A46  1C                 	db	28
   680  007A47  00                 	db	0
   681  007A48  1C                 	db	28
   682  007A49  00                 	db	0
   683  007A4A  1C                 	db	28
   684  007A4B  00                 	db	0
   685  007A4C  36                 	db	54
   686  007A4D  00                 	db	0
   687  007A4E  36                 	db	54
   688  007A4F  00                 	db	0
   689  007A50  36                 	db	54
   690  007A51  00                 	db	0
   691  007A52  63                 	db	99
   692  007A53  00                 	db	0
   693  007A54  7F                 	db	127
   694  007A55  00                 	db	0
   695  007A56  7F                 	db	127
   696  007A57  00                 	db	0
   697  007A58  C1                 	db	193
   698  007A59  80                 	db	128
   699  007A5A  C1                 	db	193
   700  007A5B  80                 	db	128
   701  007A5C  00                 	db	0
   702  007A5D  00                 	db	0
   703  007A5E  00                 	db	0
   704  007A5F  00                 	db	0
   705  007A60  00                 	db	0
   706  007A61  00                 	db	0
   707  007A62  00                 	db	0
   708  007A63  FC                 	db	252
   709  007A64  FE                 	db	254
   710  007A65  C6                 	db	198
   711  007A66  C6                 	db	198
   712  007A67  FC                 	db	252
   713  007A68  FC                 	db	252
   714  007A69  C6                 	db	198
   715  007A6A  C6                 	db	198
   716  007A6B  C6                 	db	198
   717  007A6C  FE                 	db	254
   718  007A6D  FC                 	db	252
   719  007A6E  00                 	db	0
   720  007A6F  00                 	db	0
   721  007A70  00                 	db	0
   722  007A71  00                 	db	0
   723  007A72  3C                 	db	60
   724  007A73  7E                 	db	126
   725  007A74  67                 	db	103
   726  007A75  C2                 	db	194
   727  007A76  C0                 	db	192
   728  007A77  C0                 	db	192
   729  007A78  C0                 	db	192
   730  007A79  C2                 	db	194
   731  007A7A  67                 	db	103
   732  007A7B  7E                 	db	126
   733  007A7C  3C                 	db	60
   734  007A7D  00                 	db	0
   735  007A7E  00                 	db	0
   736  007A7F  00                 	db	0
   737  007A80  00                 	db	0
   738  007A81  F8                 	db	248
   739  007A82  FC                 	db	252
   740  007A83  CE                 	db	206
   741  007A84  C6                 	db	198
   742  007A85  C6                 	db	198
   743  007A86  C6                 	db	198
   744  007A87  C6                 	db	198
   745  007A88  C6                 	db	198
   746  007A89  CE                 	db	206
   747  007A8A  FC                 	db	252
   748  007A8B  F8                 	db	248
   749  007A8C  00                 	db	0
   750  007A8D  00                 	db	0
   751  007A8E  00                 	db	0
   752  007A8F  00                 	db	0
   753  007A90  FE                 	db	254
   754  007A91  FE                 	db	254
   755  007A92  C0                 	db	192
   756  007A93  C0                 	db	192
   757  007A94  FE                 	db	254
   758  007A95  FE                 	db	254
   759  007A96  C0                 	db	192
   760  007A97  C0                 	db	192
   761  007A98  C0                 	db	192
   762  007A99  FE                 	db	254
   763  007A9A  FE                 	db	254
   764  007A9B  00                 	db	0
   765  007A9C  00                 	db	0
   766  007A9D  00                 	db	0
   767  007A9E  00                 	db	0
   768  007A9F  FC                 	db	252
   769  007AA0  FC                 	db	252
   770  007AA1  C0                 	db	192
   771  007AA2  C0                 	db	192
   772  007AA3  F8                 	db	248
   773  007AA4  F8                 	db	248
   774  007AA5  C0                 	db	192
   775  007AA6  C0                 	db	192
   776  007AA7  C0                 	db	192
   777  007AA8  C0                 	db	192
   778  007AA9  C0                 	db	192
   779  007AAA  00                 	db	0
   780  007AAB  00                 	db	0
   781  007AAC  00                 	db	0
   782  007AAD  00                 	db	0
   783  007AAE  3C                 	db	60
   784  007AAF  7E                 	db	126
   785  007AB0  67                 	db	103
   786  007AB1  C3                 	db	195
   787  007AB2  C0                 	db	192
   788  007AB3  CF                 	db	207
   789  007AB4  CF                 	db	207
   790  007AB5  C3                 	db	195
   791  007AB6  63                 	db	99
   792  007AB7  7F                 	db	127
   793  007AB8  3C                 	db	60
   794  007AB9  00                 	db	0
   795  007ABA  00                 	db	0
   796  007ABB  00                 	db	0
   797  007ABC  00                 	db	0
   798  007ABD  C6                 	db	198
   799  007ABE  C6                 	db	198
   800  007ABF  C6                 	db	198
   801  007AC0  C6                 	db	198
   802  007AC1  FE                 	db	254
   803  007AC2  FE                 	db	254
   804  007AC3  C6                 	db	198
   805  007AC4  C6                 	db	198
   806  007AC5  C6                 	db	198
   807  007AC6  C6                 	db	198
   808  007AC7  C6                 	db	198
   809  007AC8  00                 	db	0
   810  007AC9  00                 	db	0
   811  007ACA  00                 	db	0
   812  007ACB  00                 	db	0
   813  007ACC  C0                 	db	192
   814  007ACD  C0                 	db	192
   815  007ACE  C0                 	db	192
   816  007ACF  C0                 	db	192
   817  007AD0  C0                 	db	192
   818  007AD1  C0                 	db	192
   819  007AD2  C0                 	db	192
   820  007AD3  C0                 	db	192
   821  007AD4  C0                 	db	192
   822  007AD5  C0                 	db	192
   823  007AD6  C0                 	db	192
   824  007AD7  00                 	db	0
   825  007AD8  00                 	db	0
   826  007AD9  00                 	db	0
   827  007ADA  00                 	db	0
   828  007ADB  0C                 	db	12
   829  007ADC  0C                 	db	12
   830  007ADD  0C                 	db	12
   831  007ADE  0C                 	db	12
   832  007ADF  0C                 	db	12
   833  007AE0  0C                 	db	12
   834  007AE1  0C                 	db	12
   835  007AE2  CC                 	db	204
   836  007AE3  CC                 	db	204
   837  007AE4  FC                 	db	252
   838  007AE5  78                 	db	120
   839  007AE6  00                 	db	0
   840  007AE7  00                 	db	0
   841  007AE8  00                 	db	0
   842  007AE9  00                 	db	0
   843  007AEA  C3                 	db	195
   844  007AEB  C6                 	db	198
   845  007AEC  CC                 	db	204
   846  007AED  CC                 	db	204
   847  007AEE  D8                 	db	216
   848  007AEF  FC                 	db	252
   849  007AF0  EC                 	db	236
   850  007AF1  C6                 	db	198
   851  007AF2  C6                 	db	198
   852  007AF3  C3                 	db	195
   853  007AF4  C3                 	db	195
   854  007AF5  00                 	db	0
   855  007AF6  00                 	db	0
   856  007AF7  00                 	db	0
   857  007AF8  00                 	db	0
   858  007AF9  C0                 	db	192
   859  007AFA  C0                 	db	192
   860  007AFB  C0                 	db	192
   861  007AFC  C0                 	db	192
   862  007AFD  C0                 	db	192
   863  007AFE  C0                 	db	192
   864  007AFF  C0                 	db	192
   865  007B00  C0                 	db	192
   866  007B01  C0                 	db	192
   867  007B02  FE                 	db	254
   868  007B03  FE                 	db	254
   869  007B04  00                 	db	0
   870  007B05  00                 	db	0
   871  007B06  00                 	db	0
   872  007B07  00                 	db	0
   873  007B08  00                 	db	0
   874  007B09  E3                 	db	227
   875  007B0A  80                 	db	128
   876  007B0B  E3                 	db	227
   877  007B0C  80                 	db	128
   878  007B0D  E3                 	db	227
   879  007B0E  80                 	db	128
   880  007B0F  F7                 	db	247
   881  007B10  80                 	db	128
   882  007B11  D5                 	db	213
   883  007B12  80                 	db	128
   884  007B13  D5                 	db	213
   885  007B14  80                 	db	128
   886  007B15  D5                 	db	213
   887  007B16  80                 	db	128
   888  007B17  D5                 	db	213
   889  007B18  80                 	db	128
   890  007B19  DD                 	db	221
   891  007B1A  80                 	db	128
   892  007B1B  D9                 	db	217
   893  007B1C  80                 	db	128
   894  007B1D  C9                 	db	201
   895  007B1E  80                 	db	128
   896  007B1F  00                 	db	0
   897  007B20  00                 	db	0
   898  007B21  00                 	db	0
   899  007B22  00                 	db	0
   900  007B23  00                 	db	0
   901  007B24  00                 	db	0
   902  007B25  00                 	db	0
   903  007B26  C6                 	db	198
   904  007B27  E6                 	db	230
   905  007B28  E6                 	db	230
   906  007B29  E6                 	db	230
   907  007B2A  F6                 	db	246
   908  007B2B  D6                 	db	214
   909  007B2C  DE                 	db	222
   910  007B2D  DE                 	db	222
   911  007B2E  CE                 	db	206
   912  007B2F  CE                 	db	206
   913  007B30  C6                 	db	198
   914  007B31  00                 	db	0
   915  007B32  00                 	db	0
   916  007B33  00                 	db	0
   917  007B34  00                 	db	0
   918  007B35  3C                 	db	60
   919  007B36  7E                 	db	126
   920  007B37  67                 	db	103
   921  007B38  C3                 	db	195
   922  007B39  C3                 	db	195
   923  007B3A  C3                 	db	195
   924  007B3B  C3                 	db	195
   925  007B3C  C3                 	db	195
   926  007B3D  66                 	db	102
   927  007B3E  7E                 	db	126
   928  007B3F  3C                 	db	60
   929  007B40  00                 	db	0
   930  007B41  00                 	db	0
   931  007B42  00                 	db	0
   932  007B43  00                 	db	0
   933  007B44  FC                 	db	252
   934  007B45  FE                 	db	254
   935  007B46  C6                 	db	198
   936  007B47  C6                 	db	198
   937  007B48  C6                 	db	198
   938  007B49  FE                 	db	254
   939  007B4A  FC                 	db	252
   940  007B4B  C0                 	db	192
   941  007B4C  C0                 	db	192
   942  007B4D  C0                 	db	192
   943  007B4E  C0                 	db	192
   944  007B4F  00                 	db	0
   945  007B50  00                 	db	0
   946  007B51  00                 	db	0
   947  007B52  00                 	db	0
   948  007B53  00                 	db	0
   949  007B54  3C                 	db	60
   950  007B55  00                 	db	0
   951  007B56  7E                 	db	126
   952  007B57  00                 	db	0
   953  007B58  E7                 	db	231
   954  007B59  00                 	db	0
   955  007B5A  C3                 	db	195
   956  007B5B  00                 	db	0
   957  007B5C  C3                 	db	195
   958  007B5D  00                 	db	0
   959  007B5E  C3                 	db	195
   960  007B5F  00                 	db	0
   961  007B60  C3                 	db	195
   962  007B61  00                 	db	0
   963  007B62  CB                 	db	203
   964  007B63  00                 	db	0
   965  007B64  66                 	db	102
   966  007B65  00                 	db	0
   967  007B66  7F                 	db	127
   968  007B67  00                 	db	0
   969  007B68  3D                 	db	61
   970  007B69  80                 	db	128
   971  007B6A  00                 	db	0
   972  007B6B  80                 	db	128
   973  007B6C  00                 	db	0
   974  007B6D  00                 	db	0
   975  007B6E  00                 	db	0
   976  007B6F  00                 	db	0
   977  007B70  00                 	db	0
   978  007B71  FC                 	db	252
   979  007B72  FE                 	db	254
   980  007B73  C6                 	db	198
   981  007B74  C6                 	db	198
   982  007B75  FE                 	db	254
   983  007B76  FC                 	db	252
   984  007B77  CC                 	db	204
   985  007B78  C6                 	db	198
   986  007B79  C6                 	db	198
   987  007B7A  C6                 	db	198
   988  007B7B  C3                 	db	195
   989  007B7C  00                 	db	0
   990  007B7D  00                 	db	0
   991  007B7E  00                 	db	0
   992  007B7F  00                 	db	0
   993  007B80  7C                 	db	124
   994  007B81  FE                 	db	254
   995  007B82  C6                 	db	198
   996  007B83  C6                 	db	198
   997  007B84  F0                 	db	240
   998  007B85  7C                 	db	124
   999  007B86  0E                 	db	14
  1000  007B87  C6                 	db	198
  1001  007B88  C6                 	db	198
  1002  007B89  FE                 	db	254
  1003  007B8A  7C                 	db	124
  1004  007B8B  00                 	db	0
  1005  007B8C  00                 	db	0
  1006  007B8D  00                 	db	0
  1007  007B8E  00                 	db	0
  1008  007B8F  FF                 	db	255
  1009  007B90  FF                 	db	255
  1010  007B91  18                 	db	24
  1011  007B92  18                 	db	24
  1012  007B93  18                 	db	24
  1013  007B94  18                 	db	24
  1014  007B95  18                 	db	24
  1015  007B96  18                 	db	24
  1016  007B97  18                 	db	24
  1017  007B98  18                 	db	24
  1018  007B99  18                 	db	24
  1019  007B9A  00                 	db	0
  1020  007B9B  00                 	db	0
  1021  007B9C  00                 	db	0
  1022  007B9D  00                 	db	0
  1023  007B9E  C6                 	db	198
  1024  007B9F  C6                 	db	198
  1025  007BA0  C6                 	db	198
  1026  007BA1  C6                 	db	198
  1027  007BA2  C6                 	db	198
  1028  007BA3  C6                 	db	198
  1029  007BA4  C6                 	db	198
  1030  007BA5  C6                 	db	198
  1031  007BA6  C6                 	db	198
  1032  007BA7  7E                 	db	126
  1033  007BA8  38                 	db	56
  1034  007BA9  00                 	db	0
  1035  007BAA  00                 	db	0
  1036  007BAB  00                 	db	0
  1037  007BAC  00                 	db	0
  1038  007BAD  00                 	db	0
  1039  007BAE  C1                 	db	193
  1040  007BAF  80                 	db	128
  1041  007BB0  C1                 	db	193
  1042  007BB1  80                 	db	128
  1043  007BB2  63                 	db	99
  1044  007BB3  00                 	db	0
  1045  007BB4  63                 	db	99
  1046  007BB5  00                 	db	0
  1047  007BB6  63                 	db	99
  1048  007BB7  00                 	db	0
  1049  007BB8  36                 	db	54
  1050  007BB9  00                 	db	0
  1051  007BBA  36                 	db	54
  1052  007BBB  00                 	db	0
  1053  007BBC  36                 	db	54
  1054  007BBD  00                 	db	0
  1055  007BBE  1C                 	db	28
  1056  007BBF  00                 	db	0
  1057  007BC0  1C                 	db	28
  1058  007BC1  00                 	db	0
  1059  007BC2  1C                 	db	28
  1060  007BC3  00                 	db	0
  1061  007BC4  00                 	db	0
  1062  007BC5  00                 	db	0
  1063  007BC6  00                 	db	0
  1064  007BC7  00                 	db	0
  1065  007BC8  00                 	db	0
  1066  007BC9  00                 	db	0
  1067  007BCA  00                 	db	0
  1068  007BCB  00                 	db	0
  1069  007BCC  C4                 	db	196
  1070  007BCD  60                 	db	96
  1071  007BCE  C4                 	db	196
  1072  007BCF  60                 	db	96
  1073  007BD0  CA                 	db	202
  1074  007BD1  60                 	db	96
  1075  007BD2  6A                 	db	106
  1076  007BD3  C0                 	db	192
  1077  007BD4  6A                 	db	106
  1078  007BD5  C0                 	db	192
  1079  007BD6  6A                 	db	106
  1080  007BD7  C0                 	db	192
  1081  007BD8  6A                 	db	106
  1082  007BD9  C0                 	db	192
  1083  007BDA  6A                 	db	106
  1084  007BDB  C0                 	db	192
  1085  007BDC  31                 	db	49
  1086  007BDD  80                 	db	128
  1087  007BDE  31                 	db	49
  1088  007BDF  80                 	db	128
  1089  007BE0  31                 	db	49
  1090  007BE1  80                 	db	128
  1091  007BE2  00                 	db	0
  1092  007BE3  00                 	db	0
  1093  007BE4  00                 	db	0
  1094  007BE5  00                 	db	0
  1095  007BE6  00                 	db	0
  1096  007BE7  00                 	db	0
  1097  007BE8  00                 	db	0
  1098  007BE9  00                 	db	0
  1099  007BEA  C1                 	db	193
  1100  007BEB  80                 	db	128
  1101  007BEC  63                 	db	99
  1102  007BED  00                 	db	0
  1103  007BEE  36                 	db	54
  1104  007BEF  00                 	db	0
  1105  007BF0  36                 	db	54
  1106  007BF1  00                 	db	0
  1107  007BF2  1C                 	db	28
  1108  007BF3  00                 	db	0
  1109  007BF4  1C                 	db	28
  1110  007BF5  00                 	db	0
  1111  007BF6  1C                 	db	28
  1112  007BF7  00                 	db	0
  1113  007BF8  36                 	db	54
  1114  007BF9  00                 	db	0
  1115  007BFA  36                 	db	54
  1116  007BFB  00                 	db	0
  1117  007BFC  63                 	db	99
  1118  007BFD  00                 	db	0
  1119  007BFE  C1                 	db	193
  1120  007BFF  80                 	db	128
  1121  007C00  00                 	db	0
  1122  007C01  00                 	db	0
  1123  007C02  00                 	db	0
  1124  007C03  00                 	db	0
  1125  007C04  00                 	db	0
  1126  007C05  00                 	db	0
  1127  007C06  00                 	db	0
  1128  007C07  C3                 	db	195
  1129  007C08  66                 	db	102
  1130  007C09  66                 	db	102
  1131  007C0A  3C                 	db	60
  1132  007C0B  3C                 	db	60
  1133  007C0C  18                 	db	24
  1134  007C0D  18                 	db	24
  1135  007C0E  18                 	db	24
  1136  007C0F  18                 	db	24
  1137  007C10  18                 	db	24
  1138  007C11  18                 	db	24
  1139  007C12  00                 	db	0
  1140  007C13  00                 	db	0
  1141  007C14  00                 	db	0
  1142  007C15  00                 	db	0
  1143  007C16  FE                 	db	254
  1144  007C17  FE                 	db	254
  1145  007C18  06                 	db	6
  1146  007C19  0C                 	db	12
  1147  007C1A  18                 	db	24
  1148  007C1B  30                 	db	48
  1149  007C1C  30                 	db	48
  1150  007C1D  60                 	db	96
  1151  007C1E  C0                 	db	192
  1152  007C1F  FE                 	db	254
  1153  007C20  FE                 	db	254
  1154  007C21  00                 	db	0
  1155  007C22  00                 	db	0
  1156  007C23  00                 	db	0
  1157  007C24  00                 	db	0
  1158  007C25  E0                 	db	224
  1159  007C26  E0                 	db	224
  1160  007C27  C0                 	db	192
  1161  007C28  C0                 	db	192
  1162  007C29  C0                 	db	192
  1163  007C2A  C0                 	db	192
  1164  007C2B  C0                 	db	192
  1165  007C2C  C0                 	db	192
  1166  007C2D  C0                 	db	192
  1167  007C2E  C0                 	db	192
  1168  007C2F  C0                 	db	192
  1169  007C30  C0                 	db	192
  1170  007C31  E0                 	db	224
  1171  007C32  E0                 	db	224
  1172  007C33  00                 	db	0
  1173  007C34  C0                 	db	192
  1174  007C35  C0                 	db	192
  1175  007C36  C0                 	db	192
  1176  007C37  60                 	db	96
  1177  007C38  60                 	db	96
  1178  007C39  60                 	db	96
  1179  007C3A  60                 	db	96
  1180  007C3B  60                 	db	96
  1181  007C3C  30                 	db	48
  1182  007C3D  30                 	db	48
  1183  007C3E  30                 	db	48
  1184  007C3F  00                 	db	0
  1185  007C40  00                 	db	0
  1186  007C41  00                 	db	0
  1187  007C42  00                 	db	0
  1188  007C43  E0                 	db	224
  1189  007C44  E0                 	db	224
  1190  007C45  60                 	db	96
  1191  007C46  60                 	db	96
  1192  007C47  60                 	db	96
  1193  007C48  60                 	db	96
  1194  007C49  60                 	db	96
  1195  007C4A  60                 	db	96
  1196  007C4B  60                 	db	96
  1197  007C4C  60                 	db	96
  1198  007C4D  60                 	db	96
  1199  007C4E  60                 	db	96
  1200  007C4F  E0                 	db	224
  1201  007C50  E0                 	db	224
  1202  007C51  00                 	db	0
  1203  007C52  38                 	db	56
  1204  007C53  38                 	db	56
  1205  007C54  6C                 	db	108
  1206  007C55  6C                 	db	108
  1207  007C56  6C                 	db	108
  1208  007C57  C6                 	db	198
  1209  007C58  00                 	db	0
  1210  007C59  00                 	db	0
  1211  007C5A  00                 	db	0
  1212  007C5B  00                 	db	0
  1213  007C5C  00                 	db	0
  1214  007C5D  00                 	db	0
  1215  007C5E  00                 	db	0
  1216  007C5F  00                 	db	0
  1217  007C60  00                 	db	0
  1218  007C61  00                 	db	0
  1219  007C62  00                 	db	0
  1220  007C63  00                 	db	0
  1221  007C64  00                 	db	0
  1222  007C65  00                 	db	0
  1223  007C66  00                 	db	0
  1224  007C67  00                 	db	0
  1225  007C68  00                 	db	0
  1226  007C69  00                 	db	0
  1227  007C6A  00                 	db	0
  1228  007C6B  00                 	db	0
  1229  007C6C  00                 	db	0
  1230  007C6D  FE                 	db	254
  1231  007C6E  00                 	db	0
  1232  007C6F  00                 	db	0
  1233  007C70  C0                 	db	192
  1234  007C71  60                 	db	96
  1235  007C72  00                 	db	0
  1236  007C73  00                 	db	0
  1237  007C74  00                 	db	0
  1238  007C75  00                 	db	0
  1239  007C76  00                 	db	0
  1240  007C77  00                 	db	0
  1241  007C78  00                 	db	0
  1242  007C79  00                 	db	0
  1243  007C7A  00                 	db	0
  1244  007C7B  00                 	db	0
  1245  007C7C  00                 	db	0
  1246  007C7D  00                 	db	0
  1247  007C7E  00                 	db	0
  1248  007C7F  00                 	db	0
  1249  007C80  00                 	db	0
  1250  007C81  00                 	db	0
  1251  007C82  78                 	db	120
  1252  007C83  FC                 	db	252
  1253  007C84  CC                 	db	204
  1254  007C85  3C                 	db	60
  1255  007C86  FC                 	db	252
  1256  007C87  CC                 	db	204
  1257  007C88  FC                 	db	252
  1258  007C89  6C                 	db	108
  1259  007C8A  00                 	db	0
  1260  007C8B  00                 	db	0
  1261  007C8C  00                 	db	0
  1262  007C8D  00                 	db	0
  1263  007C8E  C0                 	db	192
  1264  007C8F  C0                 	db	192
  1265  007C90  C0                 	db	192
  1266  007C91  F8                 	db	248
  1267  007C92  FC                 	db	252
  1268  007C93  CC                 	db	204
  1269  007C94  CC                 	db	204
  1270  007C95  CC                 	db	204
  1271  007C96  CC                 	db	204
  1272  007C97  F8                 	db	248
  1273  007C98  F8                 	db	248
  1274  007C99  00                 	db	0
  1275  007C9A  00                 	db	0
  1276  007C9B  00                 	db	0
  1277  007C9C  00                 	db	0
  1278  007C9D  00                 	db	0
  1279  007C9E  00                 	db	0
  1280  007C9F  00                 	db	0
  1281  007CA0  70                 	db	112
  1282  007CA1  78                 	db	120
  1283  007CA2  D8                 	db	216
  1284  007CA3  C0                 	db	192
  1285  007CA4  C0                 	db	192
  1286  007CA5  D8                 	db	216
  1287  007CA6  78                 	db	120
  1288  007CA7  70                 	db	112
  1289  007CA8  00                 	db	0
  1290  007CA9  00                 	db	0
  1291  007CAA  00                 	db	0
  1292  007CAB  00                 	db	0
  1293  007CAC  0C                 	db	12
  1294  007CAD  0C                 	db	12
  1295  007CAE  0C                 	db	12
  1296  007CAF  7C                 	db	124
  1297  007CB0  FC                 	db	252
  1298  007CB1  CC                 	db	204
  1299  007CB2  CC                 	db	204
  1300  007CB3  CC                 	db	204
  1301  007CB4  CC                 	db	204
  1302  007CB5  FC                 	db	252
  1303  007CB6  7C                 	db	124
  1304  007CB7  00                 	db	0
  1305  007CB8  00                 	db	0
  1306  007CB9  00                 	db	0
  1307  007CBA  00                 	db	0
  1308  007CBB  00                 	db	0
  1309  007CBC  00                 	db	0
  1310  007CBD  00                 	db	0
  1311  007CBE  70                 	db	112
  1312  007CBF  F8                 	db	248
  1313  007CC0  D8                 	db	216
  1314  007CC1  F8                 	db	248
  1315  007CC2  C0                 	db	192
  1316  007CC3  D8                 	db	216
  1317  007CC4  F8                 	db	248
  1318  007CC5  70                 	db	112
  1319  007CC6  00                 	db	0
  1320  007CC7  00                 	db	0
  1321  007CC8  00                 	db	0
  1322  007CC9  00                 	db	0
  1323  007CCA  30                 	db	48
  1324  007CCB  70                 	db	112
  1325  007CCC  60                 	db	96
  1326  007CCD  F0                 	db	240
  1327  007CCE  F0                 	db	240
  1328  007CCF  60                 	db	96
  1329  007CD0  60                 	db	96
  1330  007CD1  60                 	db	96
  1331  007CD2  60                 	db	96
  1332  007CD3  60                 	db	96
  1333  007CD4  60                 	db	96
  1334  007CD5  00                 	db	0
  1335  007CD6  00                 	db	0
  1336  007CD7  00                 	db	0
  1337  007CD8  00                 	db	0
  1338  007CD9  00                 	db	0
  1339  007CDA  00                 	db	0
  1340  007CDB  00                 	db	0
  1341  007CDC  6C                 	db	108
  1342  007CDD  FC                 	db	252
  1343  007CDE  CC                 	db	204
  1344  007CDF  CC                 	db	204
  1345  007CE0  CC                 	db	204
  1346  007CE1  CC                 	db	204
  1347  007CE2  FC                 	db	252
  1348  007CE3  6C                 	db	108
  1349  007CE4  0C                 	db	12
  1350  007CE5  CC                 	db	204
  1351  007CE6  78                 	db	120
  1352  007CE7  00                 	db	0
  1353  007CE8  C0                 	db	192
  1354  007CE9  C0                 	db	192
  1355  007CEA  C0                 	db	192
  1356  007CEB  D8                 	db	216
  1357  007CEC  FC                 	db	252
  1358  007CED  CC                 	db	204
  1359  007CEE  CC                 	db	204
  1360  007CEF  CC                 	db	204
  1361  007CF0  CC                 	db	204
  1362  007CF1  CC                 	db	204
  1363  007CF2  CC                 	db	204
  1364  007CF3  00                 	db	0
  1365  007CF4  00                 	db	0
  1366  007CF5  00                 	db	0
  1367  007CF6  00                 	db	0
  1368  007CF7  C0                 	db	192
  1369  007CF8  C0                 	db	192
  1370  007CF9  00                 	db	0
  1371  007CFA  C0                 	db	192
  1372  007CFB  C0                 	db	192
  1373  007CFC  C0                 	db	192
  1374  007CFD  C0                 	db	192
  1375  007CFE  C0                 	db	192
  1376  007CFF  C0                 	db	192
  1377  007D00  C0                 	db	192
  1378  007D01  C0                 	db	192
  1379  007D02  00                 	db	0
  1380  007D03  00                 	db	0
  1381  007D04  00                 	db	0
  1382  007D05  00                 	db	0
  1383  007D06  30                 	db	48
  1384  007D07  30                 	db	48
  1385  007D08  00                 	db	0
  1386  007D09  30                 	db	48
  1387  007D0A  30                 	db	48
  1388  007D0B  30                 	db	48
  1389  007D0C  30                 	db	48
  1390  007D0D  30                 	db	48
  1391  007D0E  30                 	db	48
  1392  007D0F  30                 	db	48
  1393  007D10  30                 	db	48
  1394  007D11  30                 	db	48
  1395  007D12  F0                 	db	240
  1396  007D13  E0                 	db	224
  1397  007D14  00                 	db	0
  1398  007D15  C0                 	db	192
  1399  007D16  C0                 	db	192
  1400  007D17  C0                 	db	192
  1401  007D18  CC                 	db	204
  1402  007D19  D8                 	db	216
  1403  007D1A  F0                 	db	240
  1404  007D1B  F8                 	db	248
  1405  007D1C  D8                 	db	216
  1406  007D1D  D8                 	db	216
  1407  007D1E  CC                 	db	204
  1408  007D1F  CC                 	db	204
  1409  007D20  00                 	db	0
  1410  007D21  00                 	db	0
  1411  007D22  00                 	db	0
  1412  007D23  00                 	db	0
  1413  007D24  C0                 	db	192
  1414  007D25  C0                 	db	192
  1415  007D26  C0                 	db	192
  1416  007D27  C0                 	db	192
  1417  007D28  C0                 	db	192
  1418  007D29  C0                 	db	192
  1419  007D2A  C0                 	db	192
  1420  007D2B  C0                 	db	192
  1421  007D2C  C0                 	db	192
  1422  007D2D  C0                 	db	192
  1423  007D2E  C0                 	db	192
  1424  007D2F  00                 	db	0
  1425  007D30  00                 	db	0
  1426  007D31  00                 	db	0
  1427  007D32  00                 	db	0
  1428  007D33  00                 	db	0
  1429  007D34  00                 	db	0
  1430  007D35  00                 	db	0
  1431  007D36  00                 	db	0
  1432  007D37  00                 	db	0
  1433  007D38  00                 	db	0
  1434  007D39  00                 	db	0
  1435  007D3A  D9                 	db	217
  1436  007D3B  80                 	db	128
  1437  007D3C  FF                 	db	255
  1438  007D3D  C0                 	db	192
  1439  007D3E  CC                 	db	204
  1440  007D3F  C0                 	db	192
  1441  007D40  CC                 	db	204
  1442  007D41  C0                 	db	192
  1443  007D42  CC                 	db	204
  1444  007D43  C0                 	db	192
  1445  007D44  CC                 	db	204
  1446  007D45  C0                 	db	192
  1447  007D46  CC                 	db	204
  1448  007D47  C0                 	db	192
  1449  007D48  CC                 	db	204
  1450  007D49  C0                 	db	192
  1451  007D4A  00                 	db	0
  1452  007D4B  00                 	db	0
  1453  007D4C  00                 	db	0
  1454  007D4D  00                 	db	0
  1455  007D4E  00                 	db	0
  1456  007D4F  00                 	db	0
  1457  007D50  00                 	db	0
  1458  007D51  00                 	db	0
  1459  007D52  00                 	db	0
  1460  007D53  00                 	db	0
  1461  007D54  D8                 	db	216
  1462  007D55  FC                 	db	252
  1463  007D56  CC                 	db	204
  1464  007D57  CC                 	db	204
  1465  007D58  CC                 	db	204
  1466  007D59  CC                 	db	204
  1467  007D5A  CC                 	db	204
  1468  007D5B  CC                 	db	204
  1469  007D5C  00                 	db	0
  1470  007D5D  00                 	db	0
  1471  007D5E  00                 	db	0
  1472  007D5F  00                 	db	0
  1473  007D60  00                 	db	0
  1474  007D61  00                 	db	0
  1475  007D62  00                 	db	0
  1476  007D63  78                 	db	120
  1477  007D64  78                 	db	120
  1478  007D65  CC                 	db	204
  1479  007D66  CC                 	db	204
  1480  007D67  CC                 	db	204
  1481  007D68  CC                 	db	204
  1482  007D69  78                 	db	120
  1483  007D6A  78                 	db	120
  1484  007D6B  00                 	db	0
  1485  007D6C  00                 	db	0
  1486  007D6D  00                 	db	0
  1487  007D6E  00                 	db	0
  1488  007D6F  00                 	db	0
  1489  007D70  00                 	db	0
  1490  007D71  00                 	db	0
  1491  007D72  D8                 	db	216
  1492  007D73  FC                 	db	252
  1493  007D74  CC                 	db	204
  1494  007D75  CC                 	db	204
  1495  007D76  CC                 	db	204
  1496  007D77  CC                 	db	204
  1497  007D78  F8                 	db	248
  1498  007D79  D8                 	db	216
  1499  007D7A  C0                 	db	192
  1500  007D7B  C0                 	db	192
  1501  007D7C  C0                 	db	192
  1502  007D7D  00                 	db	0
  1503  007D7E  00                 	db	0
  1504  007D7F  00                 	db	0
  1505  007D80  00                 	db	0
  1506  007D81  6C                 	db	108
  1507  007D82  FC                 	db	252
  1508  007D83  CC                 	db	204
  1509  007D84  CC                 	db	204
  1510  007D85  CC                 	db	204
  1511  007D86  CC                 	db	204
  1512  007D87  FC                 	db	252
  1513  007D88  6C                 	db	108
  1514  007D89  0C                 	db	12
  1515  007D8A  0C                 	db	12
  1516  007D8B  0C                 	db	12
  1517  007D8C  00                 	db	0
  1518  007D8D  00                 	db	0
  1519  007D8E  00                 	db	0
  1520  007D8F  00                 	db	0
  1521  007D90  D0                 	db	208
  1522  007D91  F0                 	db	240
  1523  007D92  C0                 	db	192
  1524  007D93  C0                 	db	192
  1525  007D94  C0                 	db	192
  1526  007D95  C0                 	db	192
  1527  007D96  C0                 	db	192
  1528  007D97  C0                 	db	192
  1529  007D98  00                 	db	0
  1530  007D99  00                 	db	0
  1531  007D9A  00                 	db	0
  1532  007D9B  00                 	db	0
  1533  007D9C  00                 	db	0
  1534  007D9D  00                 	db	0
  1535  007D9E  00                 	db	0
  1536  007D9F  70                 	db	112
  1537  007DA0  F8                 	db	248
  1538  007DA1  C8                 	db	200
  1539  007DA2  E0                 	db	224
  1540  007DA3  38                 	db	56
  1541  007DA4  98                 	db	152
  1542  007DA5  F8                 	db	248
  1543  007DA6  70                 	db	112
  1544  007DA7  00                 	db	0
  1545  007DA8  00                 	db	0
  1546  007DA9  00                 	db	0
  1547  007DAA  00                 	db	0
  1548  007DAB  20                 	db	32
  1549  007DAC  60                 	db	96
  1550  007DAD  60                 	db	96
  1551  007DAE  F0                 	db	240
  1552  007DAF  F0                 	db	240
  1553  007DB0  60                 	db	96
  1554  007DB1  60                 	db	96
  1555  007DB2  60                 	db	96
  1556  007DB3  60                 	db	96
  1557  007DB4  70                 	db	112
  1558  007DB5  70                 	db	112
  1559  007DB6  00                 	db	0
  1560  007DB7  00                 	db	0
  1561  007DB8  00                 	db	0
  1562  007DB9  00                 	db	0
  1563  007DBA  00                 	db	0
  1564  007DBB  00                 	db	0
  1565  007DBC  00                 	db	0
  1566  007DBD  CC                 	db	204
  1567  007DBE  CC                 	db	204
  1568  007DBF  CC                 	db	204
  1569  007DC0  CC                 	db	204
  1570  007DC1  CC                 	db	204
  1571  007DC2  CC                 	db	204
  1572  007DC3  FC                 	db	252
  1573  007DC4  6C                 	db	108
  1574  007DC5  00                 	db	0
  1575  007DC6  00                 	db	0
  1576  007DC7  00                 	db	0
  1577  007DC8  00                 	db	0
  1578  007DC9  00                 	db	0
  1579  007DCA  00                 	db	0
  1580  007DCB  00                 	db	0
  1581  007DCC  C6                 	db	198
  1582  007DCD  C6                 	db	198
  1583  007DCE  6C                 	db	108
  1584  007DCF  6C                 	db	108
  1585  007DD0  6C                 	db	108
  1586  007DD1  38                 	db	56
  1587  007DD2  38                 	db	56
  1588  007DD3  38                 	db	56
  1589  007DD4  00                 	db	0
  1590  007DD5  00                 	db	0
  1591  007DD6  00                 	db	0
  1592  007DD7  00                 	db	0
  1593  007DD8  00                 	db	0
  1594  007DD9  00                 	db	0
  1595  007DDA  00                 	db	0
  1596  007DDB  00                 	db	0
  1597  007DDC  00                 	db	0
  1598  007DDD  00                 	db	0
  1599  007DDE  00                 	db	0
  1600  007DDF  DD                 	db	221
  1601  007DE0  80                 	db	128
  1602  007DE1  DD                 	db	221
  1603  007DE2  80                 	db	128
  1604  007DE3  DD                 	db	221
  1605  007DE4  80                 	db	128
  1606  007DE5  D5                 	db	213
  1607  007DE6  80                 	db	128
  1608  007DE7  55                 	db	85
  1609  007DE8  00                 	db	0
  1610  007DE9  77                 	db	119
  1611  007DEA  00                 	db	0
  1612  007DEB  77                 	db	119
  1613  007DEC  00                 	db	0
  1614  007DED  77                 	db	119
  1615  007DEE  00                 	db	0
  1616  007DEF  00                 	db	0
  1617  007DF0  00                 	db	0
  1618  007DF1  00                 	db	0
  1619  007DF2  00                 	db	0
  1620  007DF3  00                 	db	0
  1621  007DF4  00                 	db	0
  1622  007DF5  00                 	db	0
  1623  007DF6  00                 	db	0
  1624  007DF7  00                 	db	0
  1625  007DF8  00                 	db	0
  1626  007DF9  CC                 	db	204
  1627  007DFA  78                 	db	120
  1628  007DFB  78                 	db	120
  1629  007DFC  30                 	db	48
  1630  007DFD  30                 	db	48
  1631  007DFE  78                 	db	120
  1632  007DFF  78                 	db	120
  1633  007E00  CC                 	db	204
  1634  007E01  00                 	db	0
  1635  007E02  00                 	db	0
  1636  007E03  00                 	db	0
  1637  007E04  00                 	db	0
  1638  007E05  00                 	db	0
  1639  007E06  00                 	db	0
  1640  007E07  00                 	db	0
  1641  007E08  C6                 	db	198
  1642  007E09  C6                 	db	198
  1643  007E0A  6C                 	db	108
  1644  007E0B  6C                 	db	108
  1645  007E0C  6C                 	db	108
  1646  007E0D  38                 	db	56
  1647  007E0E  38                 	db	56
  1648  007E0F  38                 	db	56
  1649  007E10  30                 	db	48
  1650  007E11  F0                 	db	240
  1651  007E12  E0                 	db	224
  1652  007E13  00                 	db	0
  1653  007E14  00                 	db	0
  1654  007E15  00                 	db	0
  1655  007E16  00                 	db	0
  1656  007E17  FC                 	db	252
  1657  007E18  FC                 	db	252
  1658  007E19  18                 	db	24
  1659  007E1A  30                 	db	48
  1660  007E1B  30                 	db	48
  1661  007E1C  60                 	db	96
  1662  007E1D  FC                 	db	252
  1663  007E1E  FC                 	db	252
  1664  007E1F  00                 	db	0
  1665  007E20  00                 	db	0
  1666  007E21  00                 	db	0
  1667  007E22  00                 	db	0
  1668  007E23  30                 	db	48
  1669  007E24  70                 	db	112
  1670  007E25  60                 	db	96
  1671  007E26  60                 	db	96
  1672  007E27  60                 	db	96
  1673  007E28  60                 	db	96
  1674  007E29  C0                 	db	192
  1675  007E2A  C0                 	db	192
  1676  007E2B  60                 	db	96
  1677  007E2C  60                 	db	96
  1678  007E2D  60                 	db	96
  1679  007E2E  60                 	db	96
  1680  007E2F  70                 	db	112
  1681  007E30  30                 	db	48
  1682  007E31  00                 	db	0
  1683  007E32  C0                 	db	192
  1684  007E33  C0                 	db	192
  1685  007E34  C0                 	db	192
  1686  007E35  C0                 	db	192
  1687  007E36  C0                 	db	192
  1688  007E37  C0                 	db	192
  1689  007E38  C0                 	db	192
  1690  007E39  C0                 	db	192
  1691  007E3A  C0                 	db	192
  1692  007E3B  C0                 	db	192
  1693  007E3C  C0                 	db	192
  1694  007E3D  C0                 	db	192
  1695  007E3E  C0                 	db	192
  1696  007E3F  C0                 	db	192
  1697  007E40  00                 	db	0
  1698  007E41  C0                 	db	192
  1699  007E42  E0                 	db	224
  1700  007E43  60                 	db	96
  1701  007E44  60                 	db	96
  1702  007E45  60                 	db	96
  1703  007E46  60                 	db	96
  1704  007E47  30                 	db	48
  1705  007E48  30                 	db	48
  1706  007E49  60                 	db	96
  1707  007E4A  60                 	db	96
  1708  007E4B  60                 	db	96
  1709  007E4C  60                 	db	96
  1710  007E4D  E0                 	db	224
  1711  007E4E  C0                 	db	192
  1712  007E4F  00                 	db	0
  1713  007E50  00                 	db	0
  1714  007E51  00                 	db	0
  1715  007E52  00                 	db	0
  1716  007E53  00                 	db	0
  1717  007E54  E4                 	db	228
  1718  007E55  FC                 	db	252
  1719  007E56  9C                 	db	156
  1720  007E57  00                 	db	0
  1721  007E58  00                 	db	0
  1722  007E59  00                 	db	0
  1723  007E5A  00                 	db	0
  1724  007E5B  00                 	db	0
  1725  007E5C  00                 	db	0
  1726  007E5D  00                 	db	0
  1727  007E5E                     __end_of_arialNarrow_12ptBitmaps:
  1728                           	callstack 0
  1729  007E5E                     _arialNarrow_12ptDescriptors:
  1730                           	callstack 0
  1731  007E5E  08                 	db	8
  1732  007E5F  0000               	dw	0
  1733  007E61  02                 	db	2
  1734  007E62  000F               	dw	15
  1735  007E64  05                 	db	5
  1736  007E65  001E               	dw	30
  1737  007E67  07                 	db	7
  1738  007E68  002D               	dw	45
  1739  007E6A  07                 	db	7
  1740  007E6B  003C               	dw	60
  1741  007E6D  0A                 	db	10
  1742  007E6E  004B               	dw	75
  1743  007E70  08                 	db	8
  1744  007E71  0069               	dw	105
  1745  007E73  02                 	db	2
  1746  007E74  0078               	dw	120
  1747  007E76  04                 	db	4
  1748  007E77  0087               	dw	135
  1749  007E79  04                 	db	4
  1750  007E7A  0096               	dw	150
  1751  007E7C  05                 	db	5
  1752  007E7D  00A5               	dw	165
  1753  007E7F  06                 	db	6
  1754  007E80  00B4               	dw	180
  1755  007E82  02                 	db	2
  1756  007E83  00C3               	dw	195
  1757  007E85  04                 	db	4
  1758  007E86  00D2               	dw	210
  1759  007E88  02                 	db	2
  1760  007E89  00E1               	dw	225
  1761  007E8B  04                 	db	4
  1762  007E8C  00F0               	dw	240
  1763  007E8E  06                 	db	6
  1764  007E8F  00FF               	dw	255
  1765  007E91  04                 	db	4
  1766  007E92  010E               	dw	270
  1767  007E94  06                 	db	6
  1768  007E95  011D               	dw	285
  1769  007E97  06                 	db	6
  1770  007E98  012C               	dw	300
  1771  007E9A  07                 	db	7
  1772  007E9B  013B               	dw	315
  1773  007E9D  06                 	db	6
  1774  007E9E  014A               	dw	330
  1775  007EA0  05                 	db	5
  1776  007EA1  0159               	dw	345
  1777  007EA3  05                 	db	5
  1778  007EA4  0168               	dw	360
  1779  007EA6  06                 	db	6
  1780  007EA7  0177               	dw	375
  1781  007EA9  06                 	db	6
  1782  007EAA  0186               	dw	390
  1783  007EAC  02                 	db	2
  1784  007EAD  0195               	dw	405
  1785  007EAF  02                 	db	2
  1786  007EB0  01A4               	dw	420
  1787  007EB2  06                 	db	6
  1788  007EB3  01B3               	dw	435
  1789  007EB5  06                 	db	6
  1790  007EB6  01C2               	dw	450
  1791  007EB8  06                 	db	6
  1792  007EB9  01D1               	dw	465
  1793  007EBB  06                 	db	6
  1794  007EBC  01E0               	dw	480
  1795  007EBE  0D                 	db	13
  1796  007EBF  01EF               	dw	495
  1797  007EC1  09                 	db	9
  1798  007EC2  020D               	dw	525
  1799  007EC4  07                 	db	7
  1800  007EC5  022B               	dw	555
  1801  007EC7  08                 	db	8
  1802  007EC8  023A               	dw	570
  1803  007ECA  07                 	db	7
  1804  007ECB  0249               	dw	585
  1805  007ECD  07                 	db	7
  1806  007ECE  0258               	dw	600
  1807  007ED0  06                 	db	6
  1808  007ED1  0267               	dw	615
  1809  007ED3  08                 	db	8
  1810  007ED4  0276               	dw	630
  1811  007ED6  07                 	db	7
  1812  007ED7  0285               	dw	645
  1813  007ED9  02                 	db	2
  1814  007EDA  0294               	dw	660
  1815  007EDC  06                 	db	6
  1816  007EDD  02A3               	dw	675
  1817  007EDF  08                 	db	8
  1818  007EE0  02B2               	dw	690
  1819  007EE2  07                 	db	7
  1820  007EE3  02C1               	dw	705
  1821  007EE5  09                 	db	9
  1822  007EE6  02D0               	dw	720
  1823  007EE8  07                 	db	7
  1824  007EE9  02EE               	dw	750
  1825  007EEB  08                 	db	8
  1826  007EEC  02FD               	dw	765
  1827  007EEE  07                 	db	7
  1828  007EEF  030C               	dw	780
  1829  007EF1  09                 	db	9
  1830  007EF2  031B               	dw	795
  1831  007EF4  08                 	db	8
  1832  007EF5  0339               	dw	825
  1833  007EF7  07                 	db	7
  1834  007EF8  0348               	dw	840
  1835  007EFA  08                 	db	8
  1836  007EFB  0357               	dw	855
  1837  007EFD  07                 	db	7
  1838  007EFE  0366               	dw	870
  1839  007F00  09                 	db	9
  1840  007F01  0375               	dw	885
  1841  007F03  0B                 	db	11
  1842  007F04  0393               	dw	915
  1843  007F06  09                 	db	9
  1844  007F07  03B1               	dw	945
  1845  007F09  08                 	db	8
  1846  007F0A  03CF               	dw	975
  1847  007F0C  07                 	db	7
  1848  007F0D  03DE               	dw	990
  1849  007F0F  03                 	db	3
  1850  007F10  03ED               	dw	1005
  1851  007F12  04                 	db	4
  1852  007F13  03FC               	dw	1020
  1853  007F15  03                 	db	3
  1854  007F16  040B               	dw	1035
  1855  007F18  07                 	db	7
  1856  007F19  041A               	dw	1050
  1857  007F1B  07                 	db	7
  1858  007F1C  0429               	dw	1065
  1859  007F1E  03                 	db	3
  1860  007F1F  0438               	dw	1080
  1861  007F21  06                 	db	6
  1862  007F22  0447               	dw	1095
  1863  007F24  06                 	db	6
  1864  007F25  0456               	dw	1110
  1865  007F27  05                 	db	5
  1866  007F28  0465               	dw	1125
  1867  007F2A  06                 	db	6
  1868  007F2B  0474               	dw	1140
  1869  007F2D  05                 	db	5
  1870  007F2E  0483               	dw	1155
  1871  007F30  04                 	db	4
  1872  007F31  0492               	dw	1170
  1873  007F33  06                 	db	6
  1874  007F34  04A1               	dw	1185
  1875  007F36  06                 	db	6
  1876  007F37  04B0               	dw	1200
  1877  007F39  02                 	db	2
  1878  007F3A  04BF               	dw	1215
  1879  007F3C  04                 	db	4
  1880  007F3D  04CE               	dw	1230
  1881  007F3F  06                 	db	6
  1882  007F40  04DD               	dw	1245
  1883  007F42  02                 	db	2
  1884  007F43  04EC               	dw	1260
  1885  007F45  0A                 	db	10
  1886  007F46  04FB               	dw	1275
  1887  007F48  06                 	db	6
  1888  007F49  0519               	dw	1305
  1889  007F4B  06                 	db	6
  1890  007F4C  0528               	dw	1320
  1891  007F4E  06                 	db	6
  1892  007F4F  0537               	dw	1335
  1893  007F51  06                 	db	6
  1894  007F52  0546               	dw	1350
  1895  007F54  04                 	db	4
  1896  007F55  0555               	dw	1365
  1897  007F57  05                 	db	5
  1898  007F58  0564               	dw	1380
  1899  007F5A  04                 	db	4
  1900  007F5B  0573               	dw	1395
  1901  007F5D  06                 	db	6
  1902  007F5E  0582               	dw	1410
  1903  007F60  07                 	db	7
  1904  007F61  0591               	dw	1425
  1905  007F63  09                 	db	9
  1906  007F64  05A0               	dw	1440
  1907  007F66  06                 	db	6
  1908  007F67  05BE               	dw	1470
  1909  007F69  07                 	db	7
  1910  007F6A  05CD               	dw	1485
  1911  007F6C  06                 	db	6
  1912  007F6D  05DC               	dw	1500
  1913  007F6F  04                 	db	4
  1914  007F70  05EB               	dw	1515
  1915  007F72  02                 	db	2
  1916  007F73  05FA               	dw	1530
  1917  007F75  04                 	db	4
  1918  007F76  0609               	dw	1545
  1919  007F78  06                 	db	6
  1920  007F79  0618               	dw	1560
  1921  007F7B                     __end_of_arialNarrow_12ptDescriptors:
  1922                           	callstack 0
  1923  007F7B                     _arialNarrow_12ptFontInfo:
  1924                           	callstack 0
  1925  007F7B  0F                 	db	15
  1926  007F7C  20                 	db	32
  1927  007F7D  7E                 	db	126
  1928  007F7E  5E                 	db	low _arialNarrow_12ptDescriptors
  1929  007F7F  7E                 	db	high _arialNarrow_12ptDescriptors
  1930  007F80  37                 	db	low _arialNarrow_12ptBitmaps
  1931  007F81  78                 	db	high _arialNarrow_12ptBitmaps
  1932  007F82                     __end_of_arialNarrow_12ptFontInfo:
  1933                           	callstack 0
  1934  0000                     _ANSB2	set	31178
  1935  0000                     _ANSB1	set	31177
  1936  0000                     _WPUB	set	3937
  1937  0000                     _PORTBbits	set	3969
  1938  0000                     _ADRESL	set	4035
  1939  0000                     _ADRESH	set	4036
  1940  0000                     _ADCON0	set	4034
  1941  0000                     _LATA	set	3977
  1942  0000                     _TRISC	set	3988
  1943  0000                     _TRISA	set	3986
  1944  0000                     _PORTA	set	3968
  1945  0000                     _ADCON2	set	4032
  1946  0000                     _T2CONbits	set	4026
  1947  0000                     _CCPR2L	set	3943
  1948  0000                     _CCP2CONbits	set	3942
  1949  0000                     _PR2	set	4027
  1950  0000                     _TMR0L	set	4054
  1951  0000                     _TMR0H	set	4055
  1952  0000                     _T0CON	set	4053
  1953  0000                     _OSCCON	set	4051
  1954  0000                     _TMR0IF	set	32658
  1955  0000                     _LATB4	set	31828
  1956  0000                     _LATB1	set	31825
  1957  0000                     _INT1IF	set	32640
  1958  0000                     _TRISB4	set	31900
  1959  0000                     _LATB3	set	31827
  1960  0000                     _TRISB3	set	31899
  1961  0000                     _RBPU	set	32655
  1962  0000                     _TRISB1	set	31897
  1963  0000                     _LATB2	set	31826
  1964  0000                     _TRISB2	set	31898
  1965  0000                     _LATC2	set	31834
  1966  0000                     _LATC5	set	31837
  1967  0000                     _TRISC4	set	31908
  1968  0000                     _TRISC3	set	31907
  1969  0000                     _TRISC2	set	31906
  1970  0000                     _TRISC5	set	31909
  1971  0000                     _LATC3	set	31835
  1972  0000                     _LATC4	set	31836
  1973  0000                     _TMR2IF	set	31985
  1974  0000                     _TRISC1	set	31905
  1975  0000                     _TMR0IE	set	32661
  1976  0000                     _LATC0	set	31832
  1977  0000                     _TRISC0	set	31904
  1978  0000                     _INTEDG1	set	32653
  1979  0000                     _INT1IE	set	32643
  1980  0000                     _GIE	set	32663
  1981  0000                     _PLLEN	set	31966
  1982  007F82                     STR_14:
  1983  007F82  50                 	db	80	;'P'
  1984  007F83  4C                 	db	76	;'L'
  1985  007F84  41                 	db	65	;'A'
  1986  007F85  59                 	db	89	;'Y'
  1987  007F86  45                 	db	69	;'E'
  1988  007F87  52                 	db	82	;'R'
  1989  007F88  20                 	db	32
  1990  007F89  31                 	db	49	;'1'
  1991  007F8A  20                 	db	32
  1992  007F8B  57                 	db	87	;'W'
  1993  007F8C  49                 	db	73	;'I'
  1994  007F8D  4E                 	db	78	;'N'
  1995  007F8E  00                 	db	0
  1996  007F8F                     STR_13:
  1997  007F8F  50                 	db	80	;'P'
  1998  007F90  4C                 	db	76	;'L'
  1999  007F91  41                 	db	65	;'A'
  2000  007F92  59                 	db	89	;'Y'
  2001  007F93  45                 	db	69	;'E'
  2002  007F94  52                 	db	82	;'R'
  2003  007F95  20                 	db	32
  2004  007F96  32                 	db	50	;'2'
  2005  007F97  20                 	db	32
  2006  007F98  57                 	db	87	;'W'
  2007  007F99  49                 	db	73	;'I'
  2008  007F9A  4E                 	db	78	;'N'
  2009  007F9B  00                 	db	0
  2010  007F9C                     STR_10:
  2011  007F9C  50                 	db	80	;'P'
  2012  007F9D  41                 	db	65	;'A'
  2013  007F9E  52                 	db	82	;'R'
  2014  007F9F  41                 	db	65	;'A'
  2015  007FA0  4D                 	db	77	;'M'
  2016  007FA1  45                 	db	69	;'E'
  2017  007FA2  54                 	db	84	;'T'
  2018  007FA3  45                 	db	69	;'E'
  2019  007FA4  52                 	db	82	;'R'
  2020  007FA5  53                 	db	83	;'S'
  2021  007FA6  00                 	db	0
  2022  007FA7                     STR_11:
  2023  007FA7  4C                 	db	76	;'L'
  2024  007FA8  55                 	db	85	;'U'
  2025  007FA9  4D                 	db	77	;'M'
  2026  007FAA  49                 	db	73	;'I'
  2027  007FAB  4E                 	db	78	;'N'
  2028  007FAC  4F                 	db	79	;'O'
  2029  007FAD  53                 	db	83	;'S'
  2030  007FAE  49                 	db	73	;'I'
  2031  007FAF  54                 	db	84	;'T'
  2032  007FB0  59                 	db	89	;'Y'
  2033  007FB1  00                 	db	0
  2034  007FB2                     STR_4:
  2035  007FB2  50                 	db	80	;'P'
  2036  007FB3  61                 	db	97	;'a'
  2037  007FB4  72                 	db	114	;'r'
  2038  007FB5  61                 	db	97	;'a'
  2039  007FB6  6D                 	db	109	;'m'
  2040  007FB7  65                 	db	101	;'e'
  2041  007FB8  74                 	db	116	;'t'
  2042  007FB9  72                 	db	114	;'r'
  2043  007FBA  65                 	db	101	;'e'
  2044  007FBB  73                 	db	115	;'s'
  2045  007FBC  00                 	db	0
  2046  007FBD                     STR_1:
  2047  007FBD  4D                 	db	77	;'M'
  2048  007FBE  65                 	db	101	;'e'
  2049  007FBF  6E                 	db	110	;'n'
  2050  007FC0  75                 	db	117	;'u'
  2051  007FC1  53                 	db	83	;'S'
  2052  007FC2  74                 	db	116	;'t'
  2053  007FC3  61                 	db	97	;'a'
  2054  007FC4  72                 	db	114	;'r'
  2055  007FC5  74                 	db	116	;'t'
  2056  007FC6  00                 	db	0
  2057  007FC7                     STR_8:
  2058  007FC7  4E                 	db	78	;'N'
  2059  007FC8  65                 	db	101	;'e'
  2060  007FC9  77                 	db	119	;'w'
  2061  007FCA  20                 	db	32
  2062  007FCB  47                 	db	71	;'G'
  2063  007FCC  61                 	db	97	;'a'
  2064  007FCD  6D                 	db	109	;'m'
  2065  007FCE  65                 	db	101	;'e'
  2066  007FCF  00                 	db	0
  2067  007FD0                     STR_5:
  2068  007FD0  31                 	db	49	;'1'
  2069  007FD1  20                 	db	32
  2070  007FD2  50                 	db	80	;'P'
  2071  007FD3  6C                 	db	108	;'l'
  2072  007FD4  61                 	db	97	;'a'
  2073  007FD5  79                 	db	121	;'y'
  2074  007FD6  65                 	db	101	;'e'
  2075  007FD7  72                 	db	114	;'r'
  2076  007FD8  00                 	db	0
  2077  007FD9                     STR_6:
  2078  007FD9  32                 	db	50	;'2'
  2079  007FDA  20                 	db	32
  2080  007FDB  50                 	db	80	;'P'
  2081  007FDC  6C                 	db	108	;'l'
  2082  007FDD  61                 	db	97	;'a'
  2083  007FDE  79                 	db	121	;'y'
  2084  007FDF  65                 	db	101	;'e'
  2085  007FE0  72                 	db	114	;'r'
  2086  007FE1  00                 	db	0
  2087  007FE2                     STR_9:
  2088  007FE2  57                 	db	87	;'W'
  2089  007FE3  45                 	db	69	;'E'
  2090  007FE4  4C                 	db	76	;'L'
  2091  007FE5  43                 	db	67	;'C'
  2092  007FE6  4F                 	db	79	;'O'
  2093  007FE7  4D                 	db	77	;'M'
  2094  007FE8  45                 	db	69	;'E'
  2095  007FE9  00                 	db	0
  2096  007FEA                     STR_15:
  2097  007FEA  58                 	db	88	;'X'
  2098  007FEB  3A                 	db	58	;':'
  2099  007FEC  20                 	db	32
  2100  007FED  25                 	db	37
  2101  007FEE  64                 	db	100	;'d'
  2102  007FEF  00                 	db	0
  2103  007FF0                     STR_16:
  2104  007FF0  59                 	db	89	;'Y'
  2105  007FF1  3A                 	db	58	;':'
  2106  007FF2  20                 	db	32
  2107  007FF3  25                 	db	37
  2108  007FF4  64                 	db	100	;'d'
  2109  007FF5  00                 	db	0
  2110  007FF6                     STR_12:
  2111  007FF6  4C                 	db	76	;'L'
  2112  007FF7  45                 	db	69	;'E'
  2113  007FF8  56                 	db	86	;'V'
  2114  007FF9  45                 	db	69	;'E'
  2115  007FFA  4C                 	db	76	;'L'
  2116  007FFB  00                 	db	0
  2117  007FFC                     STR_7:
  2118  007FFC  58                 	db	88	;'X'
  2119  007FFD  00                 	db	0
  2120  007FFE  00                 	db	0	; dummy byte at the end
  2121  0000                     
  2122                           ; #config settings
  2123                           
  2124                           	psect	cinit
  2125  00562A                     __pcinit:
  2126                           	callstack 0
  2127  00562A                     start_initialization:
  2128                           	callstack 0
  2129  00562A                     __initialization:
  2130                           	callstack 0
  2131                           
  2132                           ; Clear objects allocated to BANK1 (216 bytes)
  2133  00562A  EE01  F000         	lfsr	0,__pbssBANK1
  2134  00562E  0ED8               	movlw	216
  2135  005630                     clear_0:
  2136  005630  6AEE               	clrf	postinc0,c
  2137  005632  06E8               	decf	wreg,f,c
  2138  005634  E1FD               	bnz	clear_0
  2139                           
  2140                           ; Clear objects allocated to BANK0 (75 bytes)
  2141  005636  EE00  F0B0         	lfsr	0,__pbssBANK0
  2142  00563A  0E4B               	movlw	75
  2143  00563C                     clear_1:
  2144  00563C  6AEE               	clrf	postinc0,c
  2145  00563E  06E8               	decf	wreg,f,c
  2146  005640  E1FD               	bnz	clear_1
  2147                           
  2148                           ; Clear objects allocated to COMRAM (7 bytes)
  2149  005642  EE00  F047         	lfsr	0,__pbssCOMRAM
  2150  005646  0E07               	movlw	7
  2151  005648                     clear_2:
  2152  005648  6AEE               	clrf	postinc0,c
  2153  00564A  06E8               	decf	wreg,f,c
  2154  00564C  E1FD               	bnz	clear_2
  2155  00564E                     end_of_initialization:
  2156                           	callstack 0
  2157  00564E                     __end_of__initialization:
  2158                           	callstack 0
  2159  00564E  904E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2160  005650  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2161  005652  0E00               	movlw	low (__Lmediumconst shr (0+16))
  2162  005654  6EF8               	movwf	tblptru,c
  2163  005656  0100               	movlb	0
  2164  005658  EF74  F02C         	goto	_main	;jump to C main() function
  2165                           
  2166                           	psect	bssCOMRAM
  2167  000047                     __pbssCOMRAM:
  2168                           	callstack 0
  2169  000047                     _width:
  2170                           	callstack 0
  2171  000047                     	ds	2
  2172  000049                     _prec:
  2173                           	callstack 0
  2174  000049                     	ds	2
  2175  00004B                     _flags:
  2176                           	callstack 0
  2177  00004B                     	ds	2
  2178  00004D                     _gameStateMachine:
  2179                           	callstack 0
  2180  00004D                     	ds	1
  2181                           
  2182                           	psect	bssBANK0
  2183  0000B0                     __pbssBANK0:
  2184                           	callstack 0
  2185  0000B0                     _theXF:
  2186                           	callstack 0
  2187  0000B0                     	ds	38
  2188  0000D6                     _nout:
  2189                           	callstack 0
  2190  0000D6                     	ds	2
  2191  0000D8                     _displayState:
  2192                           	callstack 0
  2193  0000D8                     	ds	1
  2194  0000D9                     _touchScreenState:
  2195                           	callstack 0
  2196  0000D9                     	ds	1
  2197  0000DA                     _sleepState:
  2198                           	callstack 0
  2199  0000DA                     	ds	1
  2200  0000DB                     _dbuf:
  2201                           	callstack 0
  2202  0000DB                     	ds	32
  2203                           
  2204                           	psect	bssBANK1
  2205  000100                     __pbssBANK1:
  2206                           	callstack 0
  2207  000100                     _g1:
  2208                           	callstack 0
  2209  000100                     	ds	216
  2210                           
  2211                           	psect	cstackBANK0
  2212  000060                     __pcstackBANK0:
  2213                           	callstack 0
  2214  000060                     _dtoa$5218:
  2215                           	callstack 0
  2216  000060                     LCD_Bitmap@bfOffBits:
  2217                           	callstack 0
  2218                           
  2219                           ; 4 bytes @ 0x0
  2220  000060                     	ds	2
  2221  000062                     dtoa@p:
  2222                           	callstack 0
  2223                           
  2224                           ; 2 bytes @ 0x2
  2225  000062                     	ds	2
  2226  000064                     LCD_Bitmap@endOfImage:
  2227                           	callstack 0
  2228  000064                     dtoa@w:
  2229                           	callstack 0
  2230                           
  2231                           ; 2 bytes @ 0x4
  2232  000064                     	ds	1
  2233  000065                     LCD_Bitmap@jumpCount:
  2234                           	callstack 0
  2235                           
  2236                           ; 2 bytes @ 0x5
  2237  000065                     	ds	1
  2238  000066                     dtoa@s:
  2239                           	callstack 0
  2240                           
  2241                           ; 2 bytes @ 0x6
  2242  000066                     	ds	1
  2243  000067                     LCD_Bitmap@curYPos:
  2244                           	callstack 0
  2245                           
  2246                           ; 2 bytes @ 0x7
  2247  000067                     	ds	1
  2248  000068                     dtoa@n:
  2249                           	callstack 0
  2250                           
  2251                           ; 8 bytes @ 0x8
  2252  000068                     	ds	1
  2253  000069                     LCD_Bitmap@colorTablePtr:
  2254                           	callstack 0
  2255                           
  2256                           ; 2 bytes @ 0x9
  2257  000069                     	ds	2
  2258  00006B                     LCD_Bitmap@biHeight:
  2259                           	callstack 0
  2260                           
  2261                           ; 2 bytes @ 0xB
  2262  00006B                     	ds	2
  2263  00006D                     LCD_Bitmap@curXPos:
  2264                           	callstack 0
  2265                           
  2266                           ; 2 bytes @ 0xD
  2267  00006D                     	ds	2
  2268  00006F                     LCD_Bitmap@color:
  2269                           	callstack 0
  2270                           
  2271                           ; 2 bytes @ 0xF
  2272  00006F                     	ds	1
  2273  000070                     dtoa@i:
  2274                           	callstack 0
  2275                           
  2276                           ; 2 bytes @ 0x10
  2277  000070                     	ds	1
  2278  000071                     LCD_Bitmap@strPtr:
  2279                           	callstack 0
  2280                           
  2281                           ; 2 bytes @ 0x11
  2282  000071                     	ds	1
  2283  000072                     vfpfcnvrt@ll:
  2284                           	callstack 0
  2285                           
  2286                           ; 8 bytes @ 0x12
  2287  000072                     	ds	1
  2288  000073                     LCD_Bitmap@pixelCount:
  2289                           	callstack 0
  2290                           
  2291                           ; 1 bytes @ 0x13
  2292  000073                     	ds	1
  2293  000074                     LCD_Bitmap@newY:
  2294                           	callstack 0
  2295                           
  2296                           ; 2 bytes @ 0x14
  2297  000074                     	ds	2
  2298  000076                     LCD_Bitmap@biWidth:
  2299                           	callstack 0
  2300                           
  2301                           ; 2 bytes @ 0x16
  2302  000076                     	ds	2
  2303  000078                     LCD_Bitmap@jumpColor:
  2304                           	callstack 0
  2305                           
  2306                           ; 2 bytes @ 0x18
  2307  000078                     	ds	2
  2308  00007A                     ?_vfprintf:
  2309                           	callstack 0
  2310  00007A                     vfprintf@fp:
  2311                           	callstack 0
  2312  00007A                     LCD_Bitmap@i:
  2313                           	callstack 0
  2314                           
  2315                           ; 2 bytes @ 0x1A
  2316  00007A                     	ds	1
  2317  00007B                     vfprintf@fmt:
  2318                           	callstack 0
  2319                           
  2320                           ; 2 bytes @ 0x1B
  2321  00007B                     	ds	1
  2322  00007C                     ??_LCD_ButtonDraw:
  2323                           
  2324                           ; 1 bytes @ 0x1C
  2325  00007C                     	ds	1
  2326  00007D                     vfprintf@ap:
  2327                           	callstack 0
  2328                           
  2329                           ; 1 bytes @ 0x1D
  2330  00007D                     	ds	1
  2331  00007E                     ?_sprintf:
  2332                           	callstack 0
  2333  00007E                     sprintf@s:
  2334                           	callstack 0
  2335                           
  2336                           ; 2 bytes @ 0x1E
  2337  00007E                     	ds	2
  2338  000080                     sprintf@fmt:
  2339                           	callstack 0
  2340                           
  2341                           ; 2 bytes @ 0x20
  2342  000080                     	ds	4
  2343  000084                     sprintf@ap:
  2344                           	callstack 0
  2345                           
  2346                           ; 1 bytes @ 0x24
  2347  000084                     	ds	1
  2348  000085                     sprintf@f:
  2349                           	callstack 0
  2350                           
  2351                           ; 6 bytes @ 0x25
  2352  000085                     	ds	3
  2353  000088                     LCD_ButtonDraw@tempChar:
  2354                           	callstack 0
  2355                           
  2356                           ; 1 bytes @ 0x28
  2357  000088                     	ds	1
  2358  000089                     LCD_ButtonDraw@width:
  2359                           	callstack 0
  2360                           
  2361                           ; 2 bytes @ 0x29
  2362  000089                     	ds	2
  2363  00008B                     Score_draw@s:
  2364                           	callstack 0
  2365  00008B                     LCD_ButtonDraw@x1:
  2366                           	callstack 0
  2367  00008B                     touchScreenController@g:
  2368                           	callstack 0
  2369                           
  2370                           ; 2 bytes @ 0x2B
  2371  00008B                     	ds	2
  2372  00008D                     ??_touchScreenController:
  2373  00008D                     Menu_inGameDraw@g:
  2374                           	callstack 0
  2375  00008D                     LCD_ButtonDraw@x2:
  2376                           	callstack 0
  2377                           
  2378                           ; 2 bytes @ 0x2D
  2379  00008D                     	ds	2
  2380  00008F                     LCD_ButtonDraw@y1:
  2381                           	callstack 0
  2382                           
  2383                           ; 2 bytes @ 0x2F
  2384  00008F                     	ds	2
  2385  000091                     LCD_ButtonDraw@y2:
  2386                           	callstack 0
  2387                           
  2388                           ; 2 bytes @ 0x31
  2389  000091                     	ds	2
  2390  000093                     LCD_ButtonDraw@xText:
  2391                           	callstack 0
  2392  000093                     touchScreenController@s:
  2393                           	callstack 0
  2394                           
  2395                           ; 20 bytes @ 0x33
  2396  000093                     	ds	2
  2397  000095                     LCD_ButtonDraw@yText:
  2398                           	callstack 0
  2399                           
  2400                           ; 2 bytes @ 0x35
  2401  000095                     	ds	2
  2402  000097                     LCD_ButtonDraw@i:
  2403                           	callstack 0
  2404                           
  2405                           ; 1 bytes @ 0x37
  2406  000097                     	ds	1
  2407  000098                     LCD_ButtonDraw@bmpPtr:
  2408                           	callstack 0
  2409                           
  2410                           ; 2 bytes @ 0x38
  2411  000098                     	ds	2
  2412  00009A                     
  2413                           ; 1 bytes @ 0x3A
  2414  00009A                     	ds	2
  2415  00009C                     displayController@g:
  2416                           	callstack 0
  2417                           
  2418                           ; 2 bytes @ 0x3C
  2419  00009C                     	ds	2
  2420  00009E                     displayController@ev:
  2421                           	callstack 0
  2422                           
  2423                           ; 1 bytes @ 0x3E
  2424  00009E                     	ds	1
  2425  00009F                     ??_displayController:
  2426                           
  2427                           ; 1 bytes @ 0x3F
  2428  00009F                     	ds	2
  2429  0000A1                     displayInit@g:
  2430                           	callstack 0
  2431  0000A1                     displaySM@g:
  2432                           	callstack 0
  2433                           
  2434                           ; 2 bytes @ 0x41
  2435  0000A1                     	ds	2
  2436  0000A3                     ??_displaySM:
  2437  0000A3                     sleepInit@g:
  2438                           	callstack 0
  2439                           
  2440                           ; 2 bytes @ 0x43
  2441  0000A3                     	ds	2
  2442  0000A5                     ??_Factory_init:
  2443  0000A5                     displaySM@ev:
  2444                           	callstack 0
  2445                           
  2446                           ; 1 bytes @ 0x45
  2447  0000A5                     	ds	2
  2448  0000A7                     touchScreenController@i:
  2449                           	callstack 0
  2450                           
  2451                           ; 2 bytes @ 0x47
  2452  0000A7                     	ds	2
  2453  0000A9                     touchScreenController@valueY:
  2454                           	callstack 0
  2455                           
  2456                           ; 2 bytes @ 0x49
  2457  0000A9                     	ds	2
  2458  0000AB                     touchScreenController@valueX:
  2459                           	callstack 0
  2460                           
  2461                           ; 2 bytes @ 0x4B
  2462  0000AB                     	ds	2
  2463  0000AD                     touchScreenSM@g:
  2464                           	callstack 0
  2465                           
  2466                           ; 2 bytes @ 0x4D
  2467  0000AD                     	ds	2
  2468  0000AF                     Factory_exec@ev:
  2469                           	callstack 0
  2470                           
  2471                           ; 1 bytes @ 0x4F
  2472  0000AF                     	ds	1
  2473                           
  2474                           	psect	cstackCOMRAM
  2475  000001                     __pcstackCOMRAM:
  2476                           	callstack 0
  2477  000001                     ?i2___awmod:
  2478                           	callstack 0
  2479  000001                     i2ENTERCRITICAL@inISR:
  2480                           	callstack 0
  2481  000001                     i2LEAVECRITICAL@inISR:
  2482                           	callstack 0
  2483  000001                     i2___awmod@dividend:
  2484                           	callstack 0
  2485                           
  2486                           ; 2 bytes @ 0x0
  2487  000001                     	ds	1
  2488  000002                     i2XF_unscheduleTimer@inISR:
  2489                           	callstack 0
  2490                           
  2491                           ; 1 bytes @ 0x1
  2492  000002                     	ds	1
  2493  000003                     i2XF_unscheduleTimer@id:
  2494                           	callstack 0
  2495  000003                     i2___awmod@divisor:
  2496                           	callstack 0
  2497                           
  2498                           ; 2 bytes @ 0x2
  2499  000003                     	ds	2
  2500  000005                     i2___awmod@counter:
  2501                           	callstack 0
  2502                           
  2503                           ; 1 bytes @ 0x4
  2504  000005                     	ds	1
  2505  000006                     i2___awmod@sign:
  2506                           	callstack 0
  2507                           
  2508                           ; 1 bytes @ 0x5
  2509  000006                     	ds	1
  2510  000007                     i2XF_pushEvent@inISR:
  2511                           	callstack 0
  2512                           
  2513                           ; 1 bytes @ 0x6
  2514  000007                     	ds	1
  2515  000008                     i2XF_pushEvent@ev:
  2516                           	callstack 0
  2517                           
  2518                           ; 1 bytes @ 0x7
  2519  000008                     	ds	1
  2520  000009                     i2XF_pushEvent@temp:
  2521                           	callstack 0
  2522                           
  2523                           ; 1 bytes @ 0x8
  2524  000009                     	ds	1
  2525  00000A                     
  2526                           ; 1 bytes @ 0x9
  2527  00000A                     	ds	2
  2528  00000C                     XF_decrementAndQueueTimers@i:
  2529                           	callstack 0
  2530                           
  2531                           ; 2 bytes @ 0xB
  2532  00000C                     	ds	2
  2533  00000E                     ??_isr:
  2534                           
  2535                           ; 1 bytes @ 0xD
  2536  00000E                     	ds	4
  2537  000012                     ??_LCD_Lowlevel_Init:
  2538  000012                     ??_sleepController:
  2539  000012                     ?_LCD_Read:
  2540                           	callstack 0
  2541  000012                     ?_strlen:
  2542                           	callstack 0
  2543  000012                     ?_RGB2LCD:
  2544                           	callstack 0
  2545  000012                     ?___awdiv:
  2546                           	callstack 0
  2547  000012                     ?___awmod:
  2548                           	callstack 0
  2549  000012                     ?___lwmod:
  2550                           	callstack 0
  2551  000012                     ?___xxtofl:
  2552                           	callstack 0
  2553  000012                     ?___aodiv:
  2554                           	callstack 0
  2555  000012                     ?___aomod:
  2556                           	callstack 0
  2557  000012                     configMeasure@channel:
  2558                           	callstack 0
  2559  000012                     ENTERCRITICAL@inISR:
  2560                           	callstack 0
  2561  000012                     LEAVECRITICAL@inISR:
  2562                           	callstack 0
  2563  000012                     Ball_init@b:
  2564                           	callstack 0
  2565  000012                     Ball_Update@b:
  2566                           	callstack 0
  2567  000012                     Paddle_init@p:
  2568                           	callstack 0
  2569  000012                     Paddle_addX@p:
  2570                           	callstack 0
  2571  000012                     Score_init@s:
  2572                           	callstack 0
  2573  000012                     GameParameters_setBackLight@s:
  2574                           	callstack 0
  2575  000012                     GameParameters_setLevel@s:
  2576                           	callstack 0
  2577  000012                     GameParameters_resetPos@s:
  2578                           	callstack 0
  2579  000012                     GameParameters_setX@s:
  2580                           	callstack 0
  2581  000012                     GameParameters_setY@s:
  2582                           	callstack 0
  2583  000012                     LCD_Fill@color:
  2584                           	callstack 0
  2585  000012                     LCD_SliderCreate@posX:
  2586                           	callstack 0
  2587  000012                     LCD_ButtonCreate@posX:
  2588                           	callstack 0
  2589  000012                     LCD_InButton@button:
  2590                           	callstack 0
  2591  000012                     LCD_InSlider@slider:
  2592                           	callstack 0
  2593  000012                     LCD_DrawRect@posX1:
  2594                           	callstack 0
  2595  000012                     RGB2LCD@colorTableEntry:
  2596                           	callstack 0
  2597  000012                     LCD_Read@posX:
  2598                           	callstack 0
  2599  000012                     XF_init@i:
  2600                           	callstack 0
  2601  000012                     ___awdiv@dividend:
  2602                           	callstack 0
  2603  000012                     ___awmod@dividend:
  2604                           	callstack 0
  2605  000012                     ___lwmod@dividend:
  2606                           	callstack 0
  2607  000012                     fputc@c:
  2608                           	callstack 0
  2609  000012                     strlen@s:
  2610                           	callstack 0
  2611  000012                     ___xxtofl@val:
  2612                           	callstack 0
  2613  000012                     ___aodiv@dividend:
  2614                           	callstack 0
  2615  000012                     ___aomod@dividend:
  2616                           	callstack 0
  2617                           
  2618                           ; 8 bytes @ 0x11
  2619  000012                     	ds	1
  2620  000013                     XF_unscheduleTimer@inISR:
  2621                           	callstack 0
  2622  000013                     XF_scheduleTimer@tm:
  2623                           	callstack 0
  2624  000013                     LCD_Lowlevel_Init@i:
  2625                           	callstack 0
  2626                           
  2627                           ; 4 bytes @ 0x12
  2628  000013                     	ds	1
  2629  000014                     ??_sleepSM:
  2630  000014                     ??_Ball_Update:
  2631  000014                     ??_RGB2LCD:
  2632  000014                     LCD_Fill@colorH:
  2633                           	callstack 0
  2634  000014                     XF_unscheduleTimer@id:
  2635                           	callstack 0
  2636  000014                     fputc@fp:
  2637                           	callstack 0
  2638  000014                     Paddle_init@team:
  2639                           	callstack 0
  2640  000014                     Paddle_addX@value:
  2641                           	callstack 0
  2642  000014                     GameParameters_setBackLight@value:
  2643                           	callstack 0
  2644  000014                     GameParameters_setLevel@value:
  2645                           	callstack 0
  2646  000014                     GameParameters_setX@value:
  2647                           	callstack 0
  2648  000014                     GameParameters_setY@value:
  2649                           	callstack 0
  2650  000014                     LCD_SliderCreate@posY:
  2651                           	callstack 0
  2652  000014                     LCD_ButtonCreate@posY:
  2653                           	callstack 0
  2654  000014                     LCD_InButton@posX:
  2655                           	callstack 0
  2656  000014                     LCD_InSlider@posX:
  2657                           	callstack 0
  2658  000014                     LCD_DrawRect@posY1:
  2659                           	callstack 0
  2660  000014                     LCD_Read@posY:
  2661                           	callstack 0
  2662  000014                     ___awdiv@divisor:
  2663                           	callstack 0
  2664  000014                     ___awmod@divisor:
  2665                           	callstack 0
  2666  000014                     ___lwmod@divisor:
  2667                           	callstack 0
  2668  000014                     strlen@a:
  2669                           	callstack 0
  2670                           
  2671                           ; 2 bytes @ 0x13
  2672  000014                     	ds	1
  2673  000015                     ??_fputc:
  2674  000015                     LCD_Fill@colorL:
  2675                           	callstack 0
  2676  000015                     XF_scheduleTimer@ev:
  2677                           	callstack 0
  2678                           
  2679                           ; 1 bytes @ 0x14
  2680  000015                     	ds	1
  2681  000016                     ??_LCD_Read:
  2682  000016                     ??___xxtofl:
  2683  000016                     sleepSM@ev:
  2684                           	callstack 0
  2685  000016                     XF_scheduleTimer@inISR:
  2686                           	callstack 0
  2687  000016                     ___awdiv@counter:
  2688                           	callstack 0
  2689  000016                     ___awmod@counter:
  2690                           	callstack 0
  2691  000016                     ___lwmod@counter:
  2692                           	callstack 0
  2693  000016                     Paddle_addX@add:
  2694                           	callstack 0
  2695  000016                     LCD_Fill@column:
  2696                           	callstack 0
  2697  000016                     LCD_SliderCreate@width:
  2698                           	callstack 0
  2699  000016                     LCD_ButtonCreate@width:
  2700                           	callstack 0
  2701  000016                     LCD_InButton@posY:
  2702                           	callstack 0
  2703  000016                     LCD_InSlider@posY:
  2704                           	callstack 0
  2705  000016                     LCD_DrawRect@posX2:
  2706                           	callstack 0
  2707  000016                     levelController@g:
  2708                           	callstack 0
  2709                           
  2710                           ; 2 bytes @ 0x15
  2711  000016                     	ds	1
  2712  000017                     ??_LCD_Init:
  2713  000017                     XF_scheduleTimer@i:
  2714                           	callstack 0
  2715  000017                     ___awdiv@sign:
  2716                           	callstack 0
  2717  000017                     ___awmod@sign:
  2718                           	callstack 0
  2719                           
  2720                           ; 1 bytes @ 0x16
  2721  000017                     	ds	1
  2722  000018                     ??_Paddle_addX:
  2723  000018                     ??_LCD_InButton:
  2724  000018                     ??_LCD_InSlider:
  2725  000018                     LCD_Init@i:
  2726                           	callstack 0
  2727  000018                     XF_pushEvent@inISR:
  2728                           	callstack 0
  2729  000018                     XF_popEvent@ev:
  2730                           	callstack 0
  2731  000018                     LCD_Fill@page:
  2732                           	callstack 0
  2733  000018                     LCD_SliderCreate@height:
  2734                           	callstack 0
  2735  000018                     LCD_ButtonCreate@height:
  2736                           	callstack 0
  2737  000018                     LCD_DrawRect@posY2:
  2738                           	callstack 0
  2739  000018                     RGB2LCD@red:
  2740                           	callstack 0
  2741  000018                     LCD_Read@color:
  2742                           	callstack 0
  2743  000018                     backlightController@g:
  2744                           	callstack 0
  2745  000018                     ___awdiv@quotient:
  2746                           	callstack 0
  2747                           
  2748                           ; 2 bytes @ 0x17
  2749  000018                     	ds	1
  2750  000019                     XF_pushEvent@ev:
  2751                           	callstack 0
  2752  000019                     XF_popEvent@inISR:
  2753                           	callstack 0
  2754                           
  2755                           ; 1 bytes @ 0x18
  2756  000019                     	ds	1
  2757  00001A                     ?___wmul:
  2758                           	callstack 0
  2759  00001A                     LCD_DrawRect@fill:
  2760                           	callstack 0
  2761  00001A                     XF_pushEvent@temp:
  2762                           	callstack 0
  2763  00001A                     ___xxtofl@sign:
  2764                           	callstack 0
  2765  00001A                     fputs@s:
  2766                           	callstack 0
  2767  00001A                     LCD_SliderCreate@sldColor:
  2768                           	callstack 0
  2769  00001A                     LCD_ButtonCreate@txtColor:
  2770                           	callstack 0
  2771  00001A                     RGB2LCD@green:
  2772                           	callstack 0
  2773  00001A                     LCD_Read@temp16:
  2774                           	callstack 0
  2775  00001A                     ___wmul@multiplier:
  2776                           	callstack 0
  2777  00001A                     ___aodiv@divisor:
  2778                           	callstack 0
  2779  00001A                     ___aomod@divisor:
  2780                           	callstack 0
  2781                           
  2782                           ; 8 bytes @ 0x19
  2783  00001A                     	ds	1
  2784  00001B                     ___xxtofl@exp:
  2785                           	callstack 0
  2786  00001B                     fputs@fp:
  2787                           	callstack 0
  2788  00001B                     LCD_DrawRect@color:
  2789                           	callstack 0
  2790  00001B                     checkCollision@g:
  2791                           	callstack 0
  2792                           
  2793                           ; 2 bytes @ 0x1A
  2794  00001B                     	ds	1
  2795  00001C                     fputs@c:
  2796                           	callstack 0
  2797  00001C                     LCD_SliderCreate@bgColor:
  2798                           	callstack 0
  2799  00001C                     LCD_ButtonCreate@bgColor:
  2800                           	callstack 0
  2801  00001C                     RGB2LCD@blue:
  2802                           	callstack 0
  2803  00001C                     moovePaddle1@g:
  2804                           	callstack 0
  2805  00001C                     moovePaddle2@g:
  2806                           	callstack 0
  2807  00001C                     ___wmul@multiplicand:
  2808                           	callstack 0
  2809  00001C                     ___xxtofl@arg:
  2810                           	callstack 0
  2811                           
  2812                           ; 4 bytes @ 0x1B
  2813  00001C                     	ds	1
  2814  00001D                     ??_checkCollision:
  2815  00001D                     LCD_DrawRect@j:
  2816                           	callstack 0
  2817  00001D                     fputs@i:
  2818                           	callstack 0
  2819                           
  2820                           ; 2 bytes @ 0x1C
  2821  00001D                     	ds	1
  2822  00001E                     ??_moovePaddle2:
  2823  00001E                     LCD_SliderCreate@borderColor:
  2824                           	callstack 0
  2825  00001E                     LCD_ButtonCreate@textOrBmp:
  2826                           	callstack 0
  2827  00001E                     RGB2LCD@color:
  2828                           	callstack 0
  2829  00001E                     ___wmul@product:
  2830                           	callstack 0
  2831                           
  2832                           ; 2 bytes @ 0x1D
  2833  00001E                     	ds	1
  2834  00001F                     ?_pad:
  2835                           	callstack 0
  2836  00001F                     pad@fp:
  2837                           	callstack 0
  2838  00001F                     LCD_DrawRect@temp:
  2839                           	callstack 0
  2840                           
  2841                           ; 2 bytes @ 0x1E
  2842  00001F                     	ds	1
  2843  000020                     ?___lwdiv:
  2844                           	callstack 0
  2845  000020                     ?___fldiv:
  2846                           	callstack 0
  2847  000020                     pad@buf:
  2848                           	callstack 0
  2849  000020                     LCD_SliderCreate@cursorWidth:
  2850                           	callstack 0
  2851  000020                     LCD_ButtonCreate@font:
  2852                           	callstack 0
  2853  000020                     LCD_DrawText@msg:
  2854                           	callstack 0
  2855  000020                     ___lwdiv@dividend:
  2856                           	callstack 0
  2857  000020                     ___fldiv@b:
  2858                           	callstack 0
  2859                           
  2860                           ; 4 bytes @ 0x1F
  2861  000020                     	ds	1
  2862  000021                     LCD_DrawRect@colorH:
  2863                           	callstack 0
  2864  000021                     pad@p:
  2865                           	callstack 0
  2866                           
  2867                           ; 2 bytes @ 0x20
  2868  000021                     	ds	1
  2869  000022                     LCD_DrawRect@colorL:
  2870                           	callstack 0
  2871  000022                     ___aodiv@counter:
  2872                           	callstack 0
  2873  000022                     ___aomod@counter:
  2874                           	callstack 0
  2875  000022                     LCD_SliderCreate@steps:
  2876                           	callstack 0
  2877  000022                     LCD_ButtonCreate@fpPress:
  2878                           	callstack 0
  2879  000022                     LCD_DrawText@font:
  2880                           	callstack 0
  2881  000022                     ___lwdiv@divisor:
  2882                           	callstack 0
  2883                           
  2884                           ; 2 bytes @ 0x21
  2885  000022                     	ds	1
  2886  000023                     ??_pad:
  2887  000023                     ___aodiv@sign:
  2888                           	callstack 0
  2889  000023                     ___aomod@sign:
  2890                           	callstack 0
  2891  000023                     LCD_DrawRect@i:
  2892                           	callstack 0
  2893                           
  2894                           ; 2 bytes @ 0x22
  2895  000023                     	ds	1
  2896  000024                     ?_abs:
  2897                           	callstack 0
  2898  000024                     LCD_DrawText@align:
  2899                           	callstack 0
  2900  000024                     LCD_SliderCreate@fpPress:
  2901                           	callstack 0
  2902  000024                     LCD_ButtonCreate@fpReleased:
  2903                           	callstack 0
  2904  000024                     ___lwdiv@quotient:
  2905                           	callstack 0
  2906  000024                     pad@i:
  2907                           	callstack 0
  2908  000024                     abs@a:
  2909                           	callstack 0
  2910  000024                     ___fldiv@a:
  2911                           	callstack 0
  2912  000024                     ___aodiv@quotient:
  2913                           	callstack 0
  2914                           
  2915                           ; 8 bytes @ 0x23
  2916  000024                     	ds	1
  2917  000025                     Ball_draw@b:
  2918                           	callstack 0
  2919  000025                     Paddle_draw@p:
  2920                           	callstack 0
  2921  000025                     LCD_ButtonUpdate@button:
  2922                           	callstack 0
  2923  000025                     LCD_DrawText@posX:
  2924                           	callstack 0
  2925  000025                     mooveBall@g:
  2926                           	callstack 0
  2927                           
  2928                           ; 2 bytes @ 0x24
  2929  000025                     	ds	1
  2930  000026                     ??_abs:
  2931  000026                     ___lwdiv@counter:
  2932                           	callstack 0
  2933  000026                     LCD_SliderCreate@slider:
  2934                           	callstack 0
  2935  000026                     LCD_ButtonCreate@fpOut:
  2936                           	callstack 0
  2937  000026                     pad@w:
  2938                           	callstack 0
  2939                           
  2940                           ; 2 bytes @ 0x25
  2941  000026                     	ds	1
  2942  000027                     ??_Ball_draw:
  2943  000027                     ??_Paddle_draw:
  2944  000027                     ??_LCD_ButtonUpdate:
  2945  000027                     LCD_SliderUpdate@slider:
  2946                           	callstack 0
  2947  000027                     LCD_DrawText@posY:
  2948                           	callstack 0
  2949  000027                     LCD_Bitmap@bmpPtr:
  2950                           	callstack 0
  2951                           
  2952                           ; 2 bytes @ 0x26
  2953  000027                     	ds	1
  2954  000028                     ??___fldiv:
  2955  000028                     LCD_ButtonCreate@button:
  2956                           	callstack 0
  2957                           
  2958                           ; 2 bytes @ 0x27
  2959  000028                     	ds	1
  2960  000029                     ??_LCD_SliderUpdate:
  2961  000029                     LCD_DrawText@color:
  2962                           	callstack 0
  2963  000029                     LCD_Bitmap@posX:
  2964                           	callstack 0
  2965                           
  2966                           ; 2 bytes @ 0x28
  2967  000029                     	ds	1
  2968  00002A                     LCD_ButtonCreate@index:
  2969                           	callstack 0
  2970                           
  2971                           ; 1 bytes @ 0x29
  2972  00002A                     	ds	1
  2973  00002B                     GameParameters_init@s:
  2974                           	callstack 0
  2975  00002B                     LCD_ButtonUpdate@colorOut:
  2976                           	callstack 0
  2977  00002B                     LCD_DrawText@bg_color:
  2978                           	callstack 0
  2979  00002B                     LCD_Bitmap@posY:
  2980                           	callstack 0
  2981                           
  2982                           ; 2 bytes @ 0x2A
  2983  00002B                     	ds	1
  2984  00002C                     ?_dtoa:
  2985                           	callstack 0
  2986  00002C                     dtoa@fp:
  2987                           	callstack 0
  2988  00002C                     ___fldiv@rem:
  2989                           	callstack 0
  2990                           
  2991                           ; 4 bytes @ 0x2B
  2992  00002C                     	ds	1
  2993  00002D                     ??_LCD_DrawText:
  2994  00002D                     ??_LCD_Bitmap:
  2995  00002D                     LCD_ButtonUpdate@colorIn:
  2996                           	callstack 0
  2997  00002D                     dtoa@d:
  2998                           	callstack 0
  2999                           
  3000                           ; 8 bytes @ 0x2C
  3001  00002D                     	ds	2
  3002  00002F                     LCD_SliderUpdate@x2:
  3003                           	callstack 0
  3004  00002F                     LCD_ButtonUpdate@x2:
  3005                           	callstack 0
  3006                           
  3007                           ; 2 bytes @ 0x2E
  3008  00002F                     	ds	1
  3009  000030                     ___fldiv@sign:
  3010                           	callstack 0
  3011                           
  3012                           ; 1 bytes @ 0x2F
  3013  000030                     	ds	1
  3014  000031                     LCD_SliderUpdate@y1:
  3015                           	callstack 0
  3016  000031                     LCD_ButtonUpdate@y1:
  3017                           	callstack 0
  3018  000031                     ___fldiv@new_exp:
  3019                           	callstack 0
  3020                           
  3021                           ; 2 bytes @ 0x30
  3022  000031                     	ds	2
  3023  000033                     LCD_SliderUpdate@y2:
  3024                           	callstack 0
  3025  000033                     LCD_ButtonUpdate@x1:
  3026                           	callstack 0
  3027  000033                     LCD_DrawText@offset:
  3028                           	callstack 0
  3029  000033                     ___fldiv@grs:
  3030                           	callstack 0
  3031                           
  3032                           ; 4 bytes @ 0x32
  3033  000033                     	ds	2
  3034  000035                     ??_dtoa:
  3035  000035                     LCD_SliderUpdate@x1:
  3036                           	callstack 0
  3037  000035                     LCD_ButtonUpdate@y2:
  3038                           	callstack 0
  3039  000035                     LCD_DrawText@yOffset:
  3040                           	callstack 0
  3041                           
  3042                           ; 2 bytes @ 0x34
  3043  000035                     	ds	2
  3044  000037                     LCD_DrawText@fontByte:
  3045                           	callstack 0
  3046  000037                     ___fldiv@bexp:
  3047                           	callstack 0
  3048  000037                     LCD_SliderDraw@slider:
  3049                           	callstack 0
  3050  000037                     gameControllerController@g:
  3051                           	callstack 0
  3052                           
  3053                           ; 2 bytes @ 0x36
  3054  000037                     	ds	1
  3055  000038                     LCD_DrawText@fontPixel:
  3056                           	callstack 0
  3057  000038                     ___fldiv@aexp:
  3058                           	callstack 0
  3059                           
  3060                           ; 1 bytes @ 0x37
  3061  000038                     	ds	1
  3062  000039                     ??_LCD_SliderDraw:
  3063  000039                     ?___fltol:
  3064                           	callstack 0
  3065  000039                     gameControllerController@ev:
  3066                           	callstack 0
  3067  000039                     LCD_DrawText@posYEnd:
  3068                           	callstack 0
  3069  000039                     ___fltol@f1:
  3070                           	callstack 0
  3071                           
  3072                           ; 4 bytes @ 0x38
  3073  000039                     	ds	1
  3074  00003A                     ??_gameControllerController:
  3075                           
  3076                           ; 1 bytes @ 0x39
  3077  00003A                     	ds	1
  3078  00003B                     LCD_DrawText@posXEnd:
  3079                           	callstack 0
  3080                           
  3081                           ; 2 bytes @ 0x3A
  3082  00003B                     	ds	1
  3083  00003C                     gameControllerInit@g:
  3084                           	callstack 0
  3085  00003C                     gameControllerSM@g:
  3086                           	callstack 0
  3087                           
  3088                           ; 2 bytes @ 0x3B
  3089  00003C                     	ds	1
  3090  00003D                     ??___fltol:
  3091  00003D                     ?_vfpfcnvrt:
  3092                           	callstack 0
  3093  00003D                     LCD_DrawText@y:
  3094                           	callstack 0
  3095  00003D                     vfpfcnvrt@fp:
  3096                           	callstack 0
  3097  00003D                     LCD_SliderDraw@x1:
  3098                           	callstack 0
  3099                           
  3100                           ; 2 bytes @ 0x3C
  3101  00003D                     	ds	1
  3102  00003E                     ??_gameControllerSM:
  3103  00003E                     LCD_DrawText@i:
  3104                           	callstack 0
  3105  00003E                     vfpfcnvrt@fmt:
  3106                           	callstack 0
  3107                           
  3108                           ; 1 bytes @ 0x3D
  3109  00003E                     	ds	1
  3110  00003F                     LCD_DrawText@tempChar:
  3111                           	callstack 0
  3112  00003F                     vfpfcnvrt@ap:
  3113                           	callstack 0
  3114  00003F                     LCD_SliderDraw@x2:
  3115                           	callstack 0
  3116                           
  3117                           ; 2 bytes @ 0x3E
  3118  00003F                     	ds	1
  3119  000040                     LCD_DrawText@x:
  3120                           	callstack 0
  3121  000040                     gameControllerSM@ev:
  3122                           	callstack 0
  3123  000040                     vfprintf@cfmt:
  3124                           	callstack 0
  3125                           
  3126                           ; 2 bytes @ 0x3F
  3127  000040                     	ds	1
  3128  000041                     LCD_DrawText@width:
  3129                           	callstack 0
  3130  000041                     ___fltol@sign1:
  3131                           	callstack 0
  3132  000041                     LCD_SliderDraw@y1:
  3133                           	callstack 0
  3134                           
  3135                           ; 2 bytes @ 0x40
  3136  000041                     	ds	1
  3137  000042                     ___fltol@exp1:
  3138                           	callstack 0
  3139  000042                     LCD_ButtonDraw@button:
  3140                           	callstack 0
  3141                           
  3142                           ; 2 bytes @ 0x41
  3143  000042                     	ds	1
  3144  000043                     ??_touchScreenSM:
  3145  000043                     LCD_SliderDraw@y2:
  3146                           	callstack 0
  3147                           
  3148                           ; 2 bytes @ 0x42
  3149  000043                     	ds	1
  3150  000044                     Menu_welcomeDraw@g:
  3151                           	callstack 0
  3152  000044                     Menu_endGame@g:
  3153                           	callstack 0
  3154                           
  3155                           ; 2 bytes @ 0x43
  3156  000044                     	ds	1
  3157  000045                     touchScreenSM@ev:
  3158                           	callstack 0
  3159  000045                     Menu_parametersDraw@g:
  3160                           	callstack 0
  3161                           
  3162                           ; 2 bytes @ 0x44
  3163  000045                     	ds	1
  3164  000046                     
  3165                           ; 1 bytes @ 0x45
  3166  000046                     	ds	1
  3167  000047                     
  3168                           ; 1 bytes @ 0x46
  3169 ;;
  3170 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3171 ;;
  3172 ;; *************** function _main *****************
  3173 ;; Defined at:
  3174 ;;		line 53 in file "main.c"
  3175 ;; Parameters:    Size  Location     Type
  3176 ;;		None
  3177 ;; Auto vars:     Size  Location     Type
  3178 ;;		None
  3179 ;; Return value:  Size  Location     Type
  3180 ;;                  1    wreg      void 
  3181 ;; Registers used:
  3182 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3183 ;; Tracked objects:
  3184 ;;		On entry : 0/0
  3185 ;;		On exit  : 0/0
  3186 ;;		Unchanged: 0/0
  3187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3188 ;;      Params:         0       0       0       0       0       0       0
  3189 ;;      Locals:         0       0       0       0       0       0       0
  3190 ;;      Temps:          0       0       0       0       0       0       0
  3191 ;;      Totals:         0       0       0       0       0       0       0
  3192 ;;Total ram usage:        0 bytes
  3193 ;; Hardware stack levels required when called: 17
  3194 ;; This function calls:
  3195 ;;		_Factory_exec
  3196 ;;		_Factory_init
  3197 ;; This function is called by:
  3198 ;;		Startup code after reset
  3199 ;; This function uses a non-reentrant model
  3200 ;;
  3201                           
  3202                           	psect	text0
  3203  0058E8                     __ptext0:
  3204                           	callstack 0
  3205  0058E8                     _main:
  3206                           	callstack 14
  3207                           
  3208                           ;main.c: 55:     Factory_init();
  3209                           
  3210                           ;incstack = 0
  3211  0058E8  ECB4  F022         	call	_Factory_init	;wreg free
  3212  0058EC                     l778:
  3213                           
  3214                           ;main.c: 57:     {;main.c: 58:         Factory_exec();
  3215  0058EC  ECFC  F029         	call	_Factory_exec	;wreg free
  3216  0058F0  D7FD               	goto	l778
  3217  0058F2                     __end_of_main:
  3218                           	callstack 0
  3219                           
  3220 ;; *************** function _Factory_init *****************
  3221 ;; Defined at:
  3222 ;;		line 14 in file "class/factory.c"
  3223 ;; Parameters:    Size  Location     Type
  3224 ;;		None
  3225 ;; Auto vars:     Size  Location     Type
  3226 ;;		None
  3227 ;; Return value:  Size  Location     Type
  3228 ;;                  1    wreg      void 
  3229 ;; Registers used:
  3230 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3231 ;; Tracked objects:
  3232 ;;		On entry : 0/0
  3233 ;;		On exit  : 0/0
  3234 ;;		Unchanged: 0/0
  3235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3236 ;;      Params:         0       0       0       0       0       0       0
  3237 ;;      Locals:         0       0       0       0       0       0       0
  3238 ;;      Temps:          0       2       0       0       0       0       0
  3239 ;;      Totals:         0       2       0       0       0       0       0
  3240 ;;Total ram usage:        2 bytes
  3241 ;; Hardware stack levels used: 1
  3242 ;; Hardware stack levels required when called: 16
  3243 ;; This function calls:
  3244 ;;		_GameParameters_init
  3245 ;;		_LCD_DrawText
  3246 ;;		_LCD_Fill
  3247 ;;		_LCD_Init
  3248 ;;		_XF_init
  3249 ;;		_sleepInit
  3250 ;; This function is called by:
  3251 ;;		_main
  3252 ;; This function uses a non-reentrant model
  3253 ;;
  3254                           
  3255                           	psect	text1
  3256  004568                     __ptext1:
  3257                           	callstack 0
  3258  004568                     _Factory_init:
  3259                           	callstack 14
  3260                           
  3261                           ;class/factory.c: 17:     PLLEN = 1;
  3262                           
  3263                           ;incstack = 0
  3264  004568  8C9B               	bsf	3995,6,c	;volatile
  3265                           
  3266                           ;class/factory.c: 18:     OSCCON = 0b01110000;
  3267  00456A  0E70               	movlw	112
  3268  00456C  6ED3               	movwf	211,c	;volatile
  3269                           
  3270                           ;class/factory.c: 19:     _delay((unsigned long)((100)*(64000000L/4000.0)));
  3271  00456E  0E09               	movlw	9
  3272  004570  0100               	movlb	0	; () banked
  3273  004572  6FA6               	movwf	(??_Factory_init+1)& (0+255),b
  3274  004574  0E1E               	movlw	30
  3275  004576  6FA5               	movwf	??_Factory_init& (0+255),b
  3276  004578  0EE4               	movlw	228
  3277  00457A                     u7557:
  3278  00457A  2EE8               	decfsz	wreg,f,c
  3279  00457C  D7FE               	bra	u7557
  3280  00457E  2FA5               	decfsz	??_Factory_init& (0+255),f,b
  3281  004580  D7FC               	bra	u7557
  3282  004582  2FA6               	decfsz	(??_Factory_init+1)& (0+255),f,b
  3283  004584  D7FA               	bra	u7557
  3284  004586  F000               	nop	
  3285                           
  3286                           ;class/factory.c: 22:     LCD_Init();
  3287  004588  ECE6  F013         	call	_LCD_Init	;wreg free
  3288                           
  3289                           ;class/factory.c: 23:     LCD_Fill(0b0000000000011111);
  3290  00458C  0E00               	movlw	0
  3291  00458E  6E13               	movwf	(LCD_Fill@color+1)^0,c
  3292  004590  0E1F               	movlw	31
  3293  004592  6E12               	movwf	LCD_Fill@color^0,c
  3294  004594  ECCC  F023         	call	_LCD_Fill	;wreg free
  3295                           
  3296                           ;class/factory.c: 24:     LCD_DrawText("MenuStart",&arialNarrow_12ptFontInfo,A_CENTER,50
      +                          ,50,0b0000000000000000,0b1111111111111111);
  3297  004598  0EBD               	movlw	low STR_1
  3298  00459A  6E20               	movwf	LCD_DrawText@msg^0,c
  3299  00459C  0E7F               	movlw	high STR_1
  3300  00459E  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
  3301  0045A0  0E7B               	movlw	low _arialNarrow_12ptFontInfo
  3302  0045A2  6E22               	movwf	LCD_DrawText@font^0,c
  3303  0045A4  0E7F               	movlw	high _arialNarrow_12ptFontInfo
  3304  0045A6  6E23               	movwf	(LCD_DrawText@font+1)^0,c
  3305  0045A8  0E02               	movlw	2
  3306  0045AA  6E24               	movwf	LCD_DrawText@align^0,c
  3307  0045AC  0E00               	movlw	0
  3308  0045AE  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
  3309  0045B0  0E32               	movlw	50
  3310  0045B2  6E25               	movwf	LCD_DrawText@posX^0,c
  3311  0045B4  0E00               	movlw	0
  3312  0045B6  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
  3313  0045B8  0E32               	movlw	50
  3314  0045BA  6E27               	movwf	LCD_DrawText@posY^0,c
  3315  0045BC  0E00               	movlw	0
  3316  0045BE  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
  3317  0045C0  0E00               	movlw	0
  3318  0045C2  6E29               	movwf	LCD_DrawText@color^0,c
  3319  0045C4  0EFF               	movlw	255
  3320  0045C6  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
  3321  0045C8  682B               	setf	LCD_DrawText@bg_color^0,c
  3322  0045CA  EC83  F00B         	call	_LCD_DrawText	;wreg free
  3323                           
  3324                           ;class/factory.c: 27:     GIE=1;
  3325  0045CE  8EF2               	bsf	4082,7,c	;volatile
  3326                           
  3327                           ;class/factory.c: 28:     INT1IE=0;
  3328  0045D0  96F0               	bcf	4080,3,c	;volatile
  3329                           
  3330                           ;class/factory.c: 29:     INTEDG1=0;
  3331  0045D2  9AF1               	bcf	4081,5,c	;volatile
  3332                           
  3333                           ;class/factory.c: 30:     TRISC0=0;
  3334  0045D4  9094               	bcf	3988,0,c	;volatile
  3335                           
  3336                           ;class/factory.c: 31:     LATC0=1;
  3337  0045D6  808B               	bsf	3979,0,c	;volatile
  3338                           
  3339                           ;class/factory.c: 34:     T0CON=0b10000110;
  3340  0045D8  0E86               	movlw	134
  3341  0045DA  6ED5               	movwf	213,c	;volatile
  3342                           
  3343                           ;class/factory.c: 35:     TMR0H=0xFB;
  3344  0045DC  0EFB               	movlw	251
  3345  0045DE  6ED7               	movwf	215,c	;volatile
  3346                           
  3347                           ;class/factory.c: 36:     TMR0L=0x1D;
  3348  0045E0  0E1D               	movlw	29
  3349  0045E2  6ED6               	movwf	214,c	;volatile
  3350                           
  3351                           ;class/factory.c: 37:     TMR0IE=1;
  3352  0045E4  8AF2               	bsf	4082,5,c	;volatile
  3353                           
  3354                           ;class/factory.c: 40:     TRISC1=0;
  3355  0045E6  9294               	bcf	3988,1,c	;volatile
  3356                           
  3357                           ;class/factory.c: 41:     PR2=255;
  3358  0045E8  68BB               	setf	187,c	;volatile
  3359                           
  3360                           ;class/factory.c: 42:     CCP2CONbits.CCP2M = 0xC;
  3361  0045EA  5066               	movf	102,w,c	;volatile
  3362  0045EC  0BF0               	andlw	-16
  3363  0045EE  090C               	iorlw	12
  3364  0045F0  6E66               	movwf	102,c	;volatile
  3365                           
  3366                           ;class/factory.c: 43:     CCPR2L = 255;
  3367  0045F2  6867               	setf	103,c	;volatile
  3368                           
  3369                           ;class/factory.c: 44:     CCP2CONbits.DC2B = 0;
  3370  0045F4  0ECF               	movlw	-49
  3371  0045F6  1666               	andwf	102,f,c	;volatile
  3372                           
  3373                           ;class/factory.c: 45:     TMR2IF=0;
  3374  0045F8  929E               	bcf	3998,1,c	;volatile
  3375                           
  3376                           ;class/factory.c: 46:     T2CONbits.T2CKPS0 = 1;
  3377  0045FA  80BA               	bsf	186,0,c	;volatile
  3378                           
  3379                           ;class/factory.c: 47:     T2CONbits.T2CKPS1 = 0;
  3380  0045FC  92BA               	bcf	186,1,c	;volatile
  3381                           
  3382                           ;class/factory.c: 48:     T2CONbits.TMR2ON = 1;
  3383  0045FE  84BA               	bsf	186,2,c	;volatile
  3384                           
  3385                           ;class/factory.c: 51:     ADCON2=0b10100110;
  3386  004600  0EA6               	movlw	166
  3387  004602  6EC0               	movwf	192,c	;volatile
  3388                           
  3389                           ;class/factory.c: 54:     XF_init();
  3390  004604  ECEE  F027         	call	_XF_init	;wreg free
  3391                           
  3392                           ; BSR set to: 0
  3393                           ;class/factory.c: 55:     GameParameters_init(&g1);
  3394  004608  0E00               	movlw	low _g1
  3395  00460A  6E2B               	movwf	GameParameters_init@s^0,c
  3396  00460C  0E01               	movlw	high _g1
  3397  00460E  6E2C               	movwf	(GameParameters_init@s+1)^0,c
  3398  004610  EC32  F00F         	call	_GameParameters_init	;wreg free
  3399                           
  3400                           ;class/factory.c: 56:     sleepInit(&g1);
  3401  004614  0E00               	movlw	low _g1
  3402  004616  0100               	movlb	0	; () banked
  3403  004618  6FA3               	movwf	sleepInit@g& (0+255),b
  3404  00461A  0E01               	movlw	high _g1
  3405  00461C  6FA4               	movwf	(sleepInit@g+1)& (0+255),b
  3406  00461E  ECBC  F02B         	call	_sleepInit	;wreg free
  3407  004622  0012               	return		;funcret
  3408  004624                     __end_of_Factory_init:
  3409                           	callstack 0
  3410                           
  3411 ;; *************** function _sleepInit *****************
  3412 ;; Defined at:
  3413 ;;		line 11 in file "stateMachine/sleepSM.c"
  3414 ;; Parameters:    Size  Location     Type
  3415 ;;  g               2   67[BANK0 ] PTR struct GameParameter
  3416 ;;		 -> g1(216), 
  3417 ;; Auto vars:     Size  Location     Type
  3418 ;;		None
  3419 ;; Return value:  Size  Location     Type
  3420 ;;                  1    wreg      void 
  3421 ;; Registers used:
  3422 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3423 ;; Tracked objects:
  3424 ;;		On entry : 3F/0
  3425 ;;		On exit  : 0/0
  3426 ;;		Unchanged: 0/0
  3427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3428 ;;      Params:         0       2       0       0       0       0       0
  3429 ;;      Locals:         0       0       0       0       0       0       0
  3430 ;;      Temps:          0       0       0       0       0       0       0
  3431 ;;      Totals:         0       2       0       0       0       0       0
  3432 ;;Total ram usage:        2 bytes
  3433 ;; Hardware stack levels used: 1
  3434 ;; Hardware stack levels required when called: 15
  3435 ;; This function calls:
  3436 ;;		_displayInit
  3437 ;;		_gameControllerInit
  3438 ;;		_sleepController
  3439 ;;		_touchScreenInit
  3440 ;; This function is called by:
  3441 ;;		_Factory_init
  3442 ;; This function uses a non-reentrant model
  3443 ;;
  3444                           
  3445                           	psect	text2
  3446  005778                     __ptext2:
  3447                           	callstack 0
  3448  005778                     _sleepInit:
  3449                           	callstack 14
  3450                           
  3451                           ; BSR set to: 0
  3452                           ;stateMachine/sleepSM.c: 11: void sleepInit(GameParameters* g);stateMachine/sleepSM.c: 1
      +                          2: {;stateMachine/sleepSM.c: 13:     sleepState=WAKEUP;
  3453                           
  3454                           ;incstack = 0
  3455  005778  0E00               	movlw	0
  3456  00577A  6FDA               	movwf	_sleepState& (0+255),b
  3457                           
  3458                           ; BSR set to: 0
  3459                           ;stateMachine/sleepSM.c: 15:     displayInit(g);
  3460  00577C  C0A3  F0A1         	movff	sleepInit@g,displayInit@g
  3461  005780  C0A4  F0A2         	movff	sleepInit@g+1,displayInit@g+1
  3462  005784  EC30  F02C         	call	_displayInit	;wreg free
  3463                           
  3464                           ;stateMachine/sleepSM.c: 16:     gameControllerInit(g);
  3465  005788  C0A3  F03C         	movff	sleepInit@g,gameControllerInit@g
  3466  00578C  C0A4  F03D         	movff	sleepInit@g+1,gameControllerInit@g+1
  3467  005790  EC25  F02C         	call	_gameControllerInit	;wreg free
  3468                           
  3469                           ;stateMachine/sleepSM.c: 17:     touchScreenInit();
  3470  005794  EC06  F02C         	call	_touchScreenInit	;wreg free
  3471                           
  3472                           ;stateMachine/sleepSM.c: 18:     sleepController();
  3473  005798  EC91  F02B         	call	_sleepController	;wreg free
  3474  00579C  0012               	return		;funcret
  3475  00579E                     __end_of_sleepInit:
  3476                           	callstack 0
  3477                           
  3478 ;; *************** function _touchScreenInit *****************
  3479 ;; Defined at:
  3480 ;;		line 18 in file "stateMachine/touchScreenSM.c"
  3481 ;; Parameters:    Size  Location     Type
  3482 ;;		None
  3483 ;; Auto vars:     Size  Location     Type
  3484 ;;		None
  3485 ;; Return value:  Size  Location     Type
  3486 ;;                  1    wreg      void 
  3487 ;; Registers used:
  3488 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3489 ;; Tracked objects:
  3490 ;;		On entry : 0/0
  3491 ;;		On exit  : 0/0
  3492 ;;		Unchanged: 0/0
  3493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3494 ;;      Params:         0       0       0       0       0       0       0
  3495 ;;      Locals:         0       0       0       0       0       0       0
  3496 ;;      Temps:          0       0       0       0       0       0       0
  3497 ;;      Totals:         0       0       0       0       0       0       0
  3498 ;;Total ram usage:        0 bytes
  3499 ;; Hardware stack levels used: 1
  3500 ;; Hardware stack levels required when called: 6
  3501 ;; This function calls:
  3502 ;;		_XF_scheduleTimer
  3503 ;;		_configTouch
  3504 ;; This function is called by:
  3505 ;;		_sleepInit
  3506 ;; This function uses a non-reentrant model
  3507 ;;
  3508                           
  3509                           	psect	text3
  3510  00580C                     __ptext3:
  3511                           	callstack 0
  3512  00580C                     _touchScreenInit:
  3513                           	callstack 22
  3514                           
  3515                           ;stateMachine/touchScreenSM.c: 20:     touchScreenState=WAITING;
  3516                           
  3517                           ;incstack = 0
  3518  00580C  0E00               	movlw	0
  3519  00580E  0100               	movlb	0	; () banked
  3520  005810  6FD9               	movwf	_touchScreenState& (0+255),b
  3521                           
  3522                           ; BSR set to: 0
  3523                           ;stateMachine/touchScreenSM.c: 21:     configTouch();
  3524  005812  ECF5  F02B         	call	_configTouch	;wreg free
  3525                           
  3526                           ;stateMachine/touchScreenSM.c: 22:     XF_scheduleTimer(3000,evTimer30,0);
  3527  005816  0E0B               	movlw	11
  3528  005818  6E14               	movwf	(XF_scheduleTimer@tm+1)^0,c
  3529  00581A  0EB8               	movlw	184
  3530  00581C  6E13               	movwf	XF_scheduleTimer@tm^0,c
  3531  00581E  0E03               	movlw	3
  3532  005820  6E15               	movwf	XF_scheduleTimer@ev^0,c
  3533  005822  0E00               	movlw	0
  3534  005824  6E16               	movwf	XF_scheduleTimer@inISR^0,c
  3535  005826  EC5A  F029         	call	_XF_scheduleTimer	;wreg free
  3536  00582A  0012               	return		;funcret
  3537  00582C                     __end_of_touchScreenInit:
  3538                           	callstack 0
  3539                           
  3540 ;; *************** function _gameControllerInit *****************
  3541 ;; Defined at:
  3542 ;;		line 11 in file "stateMachine/gameController.c"
  3543 ;; Parameters:    Size  Location     Type
  3544 ;;  g               2   59[COMRAM] PTR struct GameParameter
  3545 ;;		 -> g1(216), 
  3546 ;; Auto vars:     Size  Location     Type
  3547 ;;		None
  3548 ;; Return value:  Size  Location     Type
  3549 ;;                  1    wreg      void 
  3550 ;; Registers used:
  3551 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3552 ;; Tracked objects:
  3553 ;;		On entry : 0/0
  3554 ;;		On exit  : 0/0
  3555 ;;		Unchanged: 0/0
  3556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3557 ;;      Params:         2       0       0       0       0       0       0
  3558 ;;      Locals:         0       0       0       0       0       0       0
  3559 ;;      Temps:          0       0       0       0       0       0       0
  3560 ;;      Totals:         2       0       0       0       0       0       0
  3561 ;;Total ram usage:        2 bytes
  3562 ;; Hardware stack levels used: 1
  3563 ;; Hardware stack levels required when called: 9
  3564 ;; This function calls:
  3565 ;;		_gameControllerController
  3566 ;; This function is called by:
  3567 ;;		_sleepInit
  3568 ;; This function uses a non-reentrant model
  3569 ;;
  3570                           
  3571                           	psect	text4
  3572  00584A                     __ptext4:
  3573                           	callstack 0
  3574  00584A                     _gameControllerInit:
  3575                           	callstack 19
  3576                           
  3577                           ;stateMachine/gameController.c: 11: void gameControllerInit(GameParameters* g);stateMach
      +                          ine/gameController.c: 12: {;stateMachine/gameController.c: 13:     gameStateMachine=NOGA
      +                          ME;
  3578                           
  3579                           ;incstack = 0
  3580  00584A  0E00               	movlw	0
  3581  00584C  6E4D               	movwf	_gameStateMachine^0,c
  3582                           
  3583                           ;stateMachine/gameController.c: 14:     gameControllerController(g,NULLEVENT);
  3584  00584E  C03C  F037         	movff	gameControllerInit@g,gameControllerController@g
  3585  005852  C03D  F038         	movff	gameControllerInit@g+1,gameControllerController@g+1
  3586  005856  0E00               	movlw	0
  3587  005858  6E39               	movwf	gameControllerController@ev^0,c
  3588  00585A  ECF3  F010         	call	_gameControllerController	;wreg free
  3589  00585E  0012               	return		;funcret
  3590  005860                     __end_of_gameControllerInit:
  3591                           	callstack 0
  3592                           
  3593 ;; *************** function _displayInit *****************
  3594 ;; Defined at:
  3595 ;;		line 15 in file "stateMachine/display.c"
  3596 ;; Parameters:    Size  Location     Type
  3597 ;;  g               2   65[BANK0 ] PTR struct GameParameter
  3598 ;;		 -> g1(216), 
  3599 ;; Auto vars:     Size  Location     Type
  3600 ;;		None
  3601 ;; Return value:  Size  Location     Type
  3602 ;;                  1    wreg      void 
  3603 ;; Registers used:
  3604 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3605 ;; Tracked objects:
  3606 ;;		On entry : 3F/0
  3607 ;;		On exit  : 0/0
  3608 ;;		Unchanged: 0/0
  3609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3610 ;;      Params:         0       2       0       0       0       0       0
  3611 ;;      Locals:         0       0       0       0       0       0       0
  3612 ;;      Temps:          0       0       0       0       0       0       0
  3613 ;;      Totals:         0       2       0       0       0       0       0
  3614 ;;Total ram usage:        2 bytes
  3615 ;; Hardware stack levels used: 1
  3616 ;; Hardware stack levels required when called: 14
  3617 ;; This function calls:
  3618 ;;		_displayController
  3619 ;; This function is called by:
  3620 ;;		_sleepInit
  3621 ;; This function uses a non-reentrant model
  3622 ;;
  3623                           
  3624                           	psect	text5
  3625  005860                     __ptext5:
  3626                           	callstack 0
  3627  005860                     _displayInit:
  3628                           	callstack 14
  3629                           
  3630                           ; BSR set to: 0
  3631                           ;stateMachine/display.c: 15: void displayInit(GameParameters* g);stateMachine/display.c:
      +                           16: {;stateMachine/display.c: 18:     displayState=WELCOME;
  3632                           
  3633                           ;incstack = 0
  3634  005860  0E00               	movlw	0
  3635  005862  6FD8               	movwf	_displayState& (0+255),b
  3636                           
  3637                           ; BSR set to: 0
  3638                           ;stateMachine/display.c: 19:     displayController(g,NULLEVENT);
  3639  005864  C0A1  F09C         	movff	displayInit@g,displayController@g
  3640  005868  C0A2  F09D         	movff	displayInit@g+1,displayController@g+1
  3641  00586C  0E00               	movlw	0
  3642  00586E  6F9E               	movwf	displayController@ev& (0+255),b
  3643  005870  EC37  F020         	call	_displayController	;wreg free
  3644  005874  0012               	return		;funcret
  3645  005876                     __end_of_displayInit:
  3646                           	callstack 0
  3647                           
  3648 ;; *************** function _XF_init *****************
  3649 ;; Defined at:
  3650 ;;		line 25 in file "xf/xf.c"
  3651 ;; Parameters:    Size  Location     Type
  3652 ;;		None
  3653 ;; Auto vars:     Size  Location     Type
  3654 ;;  i               2   17[COMRAM] int 
  3655 ;; Return value:  Size  Location     Type
  3656 ;;                  1    wreg      void 
  3657 ;; Registers used:
  3658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3659 ;; Tracked objects:
  3660 ;;		On entry : 0/0
  3661 ;;		On exit  : 3F/0
  3662 ;;		Unchanged: 0/0
  3663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3664 ;;      Params:         0       0       0       0       0       0       0
  3665 ;;      Locals:         2       0       0       0       0       0       0
  3666 ;;      Temps:          0       0       0       0       0       0       0
  3667 ;;      Totals:         2       0       0       0       0       0       0
  3668 ;;Total ram usage:        2 bytes
  3669 ;; Hardware stack levels used: 1
  3670 ;; Hardware stack levels required when called: 4
  3671 ;; This function calls:
  3672 ;;		Nothing
  3673 ;; This function is called by:
  3674 ;;		_Factory_init
  3675 ;; This function uses a non-reentrant model
  3676 ;;
  3677                           
  3678                           	psect	text6
  3679  004FDC                     __ptext6:
  3680                           	callstack 0
  3681  004FDC                     _XF_init:
  3682                           	callstack 25
  3683                           
  3684                           ;xf/xf.c: 27:     int i;;xf/xf.c: 28:     for (i=0; i<12; i++)
  3685                           
  3686                           ;incstack = 0
  3687  004FDC  0E00               	movlw	0
  3688  004FDE  6E13               	movwf	(XF_init@i+1)^0,c
  3689  004FE0  0E00               	movlw	0
  3690  004FE2  6E12               	movwf	XF_init@i^0,c
  3691  004FE4                     l9606:
  3692                           
  3693                           ;xf/xf.c: 29:     {;xf/xf.c: 30:         theXF.eventQueue[i] = NULLEVENT;
  3694  004FE4  5012               	movf	XF_init@i^0,w,c
  3695  004FE6  0FC8               	addlw	low (_theXF+24)
  3696  004FE8  6ED9               	movwf	fsr2l,c
  3697  004FEA  6ADA               	clrf	fsr2h,c
  3698  004FEC  0E00               	movlw	0
  3699  004FEE  6EDF               	movwf	indf2,c
  3700                           
  3701                           ;xf/xf.c: 31:     }
  3702  004FF0  4A12               	infsnz	XF_init@i^0,f,c
  3703  004FF2  2A13               	incf	(XF_init@i+1)^0,f,c
  3704  004FF4  BE13               	btfsc	(XF_init@i+1)^0,7,c
  3705  004FF6  D7F6               	goto	l9606
  3706  004FF8  5013               	movf	(XF_init@i+1)^0,w,c
  3707  004FFA  E104               	bnz	u7370
  3708  004FFC  0E0C               	movlw	12
  3709  004FFE  5C12               	subwf	XF_init@i^0,w,c
  3710  005000  A0D8               	btfss	status,0,c
  3711  005002  D7F0               	goto	l9606
  3712  005004                     u7370:
  3713                           
  3714                           ;xf/xf.c: 33:     for (i=0; i<8; i++)
  3715  005004  0E00               	movlw	0
  3716  005006  6E13               	movwf	(XF_init@i+1)^0,c
  3717  005008  0E00               	movlw	0
  3718  00500A  6E12               	movwf	XF_init@i^0,c
  3719  00500C                     l9618:
  3720                           
  3721                           ;xf/xf.c: 34:     {;xf/xf.c: 35:         theXF.timerList[i].tm = 0;
  3722  00500C  5012               	movf	XF_init@i^0,w,c
  3723  00500E  0D03               	mullw	3
  3724  005010  50F3               	movf	243,w,c
  3725  005012  0FB0               	addlw	low _theXF
  3726  005014  6ED9               	movwf	fsr2l,c
  3727  005016  6ADA               	clrf	fsr2h,c
  3728  005018  0E00               	movlw	0
  3729  00501A  6EDE               	movwf	postinc2,c
  3730  00501C  0E00               	movlw	0
  3731  00501E  6EDD               	movwf	postdec2,c
  3732                           
  3733                           ;xf/xf.c: 36:         theXF.timerList[i].ev = NULLEVENT;
  3734  005020  5012               	movf	XF_init@i^0,w,c
  3735  005022  0D03               	mullw	3
  3736  005024  50F3               	movf	243,w,c
  3737  005026  0FB2               	addlw	low (_theXF+2)
  3738  005028  6ED9               	movwf	fsr2l,c
  3739  00502A  6ADA               	clrf	fsr2h,c
  3740  00502C  0E00               	movlw	0
  3741  00502E  6EDF               	movwf	indf2,c
  3742                           
  3743                           ;xf/xf.c: 37:     }
  3744  005030  4A12               	infsnz	XF_init@i^0,f,c
  3745  005032  2A13               	incf	(XF_init@i+1)^0,f,c
  3746  005034  BE13               	btfsc	(XF_init@i+1)^0,7,c
  3747  005036  D7EA               	goto	l9618
  3748  005038  5013               	movf	(XF_init@i+1)^0,w,c
  3749  00503A  E104               	bnz	u7380
  3750  00503C  0E08               	movlw	8
  3751  00503E  5C12               	subwf	XF_init@i^0,w,c
  3752  005040  A0D8               	btfss	status,0,c
  3753  005042  D7E4               	goto	l9618
  3754  005044                     u7380:
  3755                           
  3756                           ;xf/xf.c: 38:     theXF.in = 0;
  3757  005044  0E00               	movlw	0
  3758  005046  0100               	movlb	0	; () banked
  3759  005048  6FD4               	movwf	(_theXF+36)& (0+255),b
  3760                           
  3761                           ;xf/xf.c: 39:     theXF.out = 0;
  3762  00504A  0E00               	movlw	0
  3763  00504C  6FD5               	movwf	(_theXF+37)& (0+255),b
  3764                           
  3765                           ; BSR set to: 0
  3766  00504E  0012               	return		;funcret
  3767  005050                     __end_of_XF_init:
  3768                           	callstack 0
  3769                           
  3770 ;; *************** function _LCD_Init *****************
  3771 ;; Defined at:
  3772 ;;		line 20 in file "libraries/lcd_highlevel.c"
  3773 ;; Parameters:    Size  Location     Type
  3774 ;;		None
  3775 ;; Auto vars:     Size  Location     Type
  3776 ;;  i               1   23[COMRAM] unsigned char 
  3777 ;; Return value:  Size  Location     Type
  3778 ;;                  1    wreg      void 
  3779 ;; Registers used:
  3780 ;;		wreg, status,2, status,0, cstack
  3781 ;; Tracked objects:
  3782 ;;		On entry : 0/0
  3783 ;;		On exit  : 0/0
  3784 ;;		Unchanged: 0/0
  3785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3786 ;;      Params:         0       0       0       0       0       0       0
  3787 ;;      Locals:         1       0       0       0       0       0       0
  3788 ;;      Temps:          1       0       0       0       0       0       0
  3789 ;;      Totals:         2       0       0       0       0       0       0
  3790 ;;Total ram usage:        2 bytes
  3791 ;; Hardware stack levels used: 1
  3792 ;; Hardware stack levels required when called: 5
  3793 ;; This function calls:
  3794 ;;		_LCD_Lowlevel_Init
  3795 ;; This function is called by:
  3796 ;;		_Factory_init
  3797 ;; This function uses a non-reentrant model
  3798 ;;
  3799                           
  3800                           	psect	text7
  3801  0027CC                     __ptext7:
  3802                           	callstack 0
  3803  0027CC                     _LCD_Init:
  3804                           	callstack 24
  3805                           
  3806                           ;libraries/lcd_highlevel.c: 22:   uint8_t i;;libraries/lcd_highlevel.c: 86:   LCD_Lowlev
      +                          el_Init();
  3807                           
  3808                           ; BSR set to: 0
  3809                           ;incstack = 0
  3810  0027CC  ECA3  F026         	call	_LCD_Lowlevel_Init	;wreg free
  3811                           
  3812                           ;libraries/lcd_highlevel.c: 87:   PORTA = 0x11; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 =
      +                           1;;
  3813  0027D0  0E11               	movlw	17
  3814  0027D2  6E80               	movwf	128,c	;volatile
  3815  0027D4  988B               	bcf	3979,4,c	;volatile
  3816  0027D6  968B               	bcf	3979,3,c	;volatile
  3817  0027D8  868B               	bsf	3979,3,c	;volatile
  3818  0027DA  888B               	bsf	3979,4,c	;volatile
  3819                           
  3820                           ;libraries/lcd_highlevel.c: 88:   for(i=0;i<10;i++)
  3821  0027DC  0E00               	movlw	0
  3822  0027DE  6E18               	movwf	LCD_Init@i^0,c
  3823  0027E0                     l4150:
  3824                           
  3825                           ;libraries/lcd_highlevel.c: 89:   {;libraries/lcd_highlevel.c: 90:     _delay((unsigned 
      +                          long)((10)*(64000000L/4000.0)));
  3826  0027E0  0ED0               	movlw	208
  3827  0027E2  6E17               	movwf	??_LCD_Init^0,c
  3828  0027E4  0ECA               	movlw	202
  3829  0027E6                     u7567:
  3830  0027E6  2EE8               	decfsz	wreg,f,c
  3831  0027E8  D7FE               	bra	u7567
  3832  0027EA  2E17               	decfsz	??_LCD_Init^0,f,c
  3833  0027EC  D7FC               	bra	u7567
  3834                           
  3835                           ;libraries/lcd_highlevel.c: 91:   }
  3836  0027EE  2A18               	incf	LCD_Init@i^0,f,c
  3837  0027F0  0E09               	movlw	9
  3838  0027F2  6418               	cpfsgt	LCD_Init@i^0,c
  3839  0027F4  D7F5               	goto	l4150
  3840                           
  3841                           ;libraries/lcd_highlevel.c: 92:   PORTA = 0x36; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 =
      +                           1;;
  3842  0027F6  0E36               	movlw	54
  3843  0027F8  6E80               	movwf	128,c	;volatile
  3844  0027FA  988B               	bcf	3979,4,c	;volatile
  3845  0027FC  968B               	bcf	3979,3,c	;volatile
  3846  0027FE  868B               	bsf	3979,3,c	;volatile
  3847  002800  888B               	bsf	3979,4,c	;volatile
  3848                           
  3849                           ;libraries/lcd_highlevel.c: 93:   PORTA = 0b00000000; LATC3 = 0; LATC3 = 1;;
  3850  002802  0E00               	movlw	0
  3851  002804  6E80               	movwf	128,c	;volatile
  3852  002806  968B               	bcf	3979,3,c	;volatile
  3853  002808  868B               	bsf	3979,3,c	;volatile
  3854                           
  3855                           ;libraries/lcd_highlevel.c: 94:   PORTA = 0x3A; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 =
      +                           1;;
  3856  00280A  0E3A               	movlw	58
  3857  00280C  6E80               	movwf	128,c	;volatile
  3858  00280E  988B               	bcf	3979,4,c	;volatile
  3859  002810  968B               	bcf	3979,3,c	;volatile
  3860  002812  868B               	bsf	3979,3,c	;volatile
  3861  002814  888B               	bsf	3979,4,c	;volatile
  3862                           
  3863                           ;libraries/lcd_highlevel.c: 95:   PORTA = 0x55; LATC3 = 0; LATC3 = 1;;
  3864  002816  0E55               	movlw	85
  3865  002818  6E80               	movwf	128,c	;volatile
  3866  00281A  968B               	bcf	3979,3,c	;volatile
  3867  00281C  868B               	bsf	3979,3,c	;volatile
  3868                           
  3869                           ;libraries/lcd_highlevel.c: 96:   PORTA = 0xB2; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 =
      +                           1;;
  3870  00281E  0EB2               	movlw	178
  3871  002820  6E80               	movwf	128,c	;volatile
  3872  002822  988B               	bcf	3979,4,c	;volatile
  3873  002824  968B               	bcf	3979,3,c	;volatile
  3874  002826  868B               	bsf	3979,3,c	;volatile
  3875  002828  888B               	bsf	3979,4,c	;volatile
  3876                           
  3877                           ;libraries/lcd_highlevel.c: 97:   PORTA = 0x0C; LATC3 = 0; LATC3 = 1;;
  3878  00282A  0E0C               	movlw	12
  3879  00282C  6E80               	movwf	128,c	;volatile
  3880  00282E  968B               	bcf	3979,3,c	;volatile
  3881  002830  868B               	bsf	3979,3,c	;volatile
  3882                           
  3883                           ;libraries/lcd_highlevel.c: 98:   PORTA = 0x0C; LATC3 = 0; LATC3 = 1;;
  3884  002832  0E0C               	movlw	12
  3885  002834  6E80               	movwf	128,c	;volatile
  3886  002836  968B               	bcf	3979,3,c	;volatile
  3887  002838  868B               	bsf	3979,3,c	;volatile
  3888                           
  3889                           ;libraries/lcd_highlevel.c: 99:   PORTA = 0x33; LATC3 = 0; LATC3 = 1;;
  3890  00283A  0E33               	movlw	51
  3891  00283C  6E80               	movwf	128,c	;volatile
  3892  00283E  968B               	bcf	3979,3,c	;volatile
  3893  002840  868B               	bsf	3979,3,c	;volatile
  3894                           
  3895                           ;libraries/lcd_highlevel.c: 100:   PORTA = 0x33; LATC3 = 0; LATC3 = 1;;
  3896  002842  0E33               	movlw	51
  3897  002844  6E80               	movwf	128,c	;volatile
  3898  002846  968B               	bcf	3979,3,c	;volatile
  3899  002848  868B               	bsf	3979,3,c	;volatile
  3900                           
  3901                           ;libraries/lcd_highlevel.c: 101:   PORTA = 0xB7; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  3902  00284A  0EB7               	movlw	183
  3903  00284C  6E80               	movwf	128,c	;volatile
  3904  00284E  988B               	bcf	3979,4,c	;volatile
  3905  002850  968B               	bcf	3979,3,c	;volatile
  3906  002852  868B               	bsf	3979,3,c	;volatile
  3907  002854  888B               	bsf	3979,4,c	;volatile
  3908                           
  3909                           ;libraries/lcd_highlevel.c: 102:   PORTA = 0x35; LATC3 = 0; LATC3 = 1;;
  3910  002856  0E35               	movlw	53
  3911  002858  6E80               	movwf	128,c	;volatile
  3912  00285A  968B               	bcf	3979,3,c	;volatile
  3913  00285C  868B               	bsf	3979,3,c	;volatile
  3914                           
  3915                           ;libraries/lcd_highlevel.c: 103:   PORTA = 0xBB; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  3916  00285E  0EBB               	movlw	187
  3917  002860  6E80               	movwf	128,c	;volatile
  3918  002862  988B               	bcf	3979,4,c	;volatile
  3919  002864  968B               	bcf	3979,3,c	;volatile
  3920  002866  868B               	bsf	3979,3,c	;volatile
  3921  002868  888B               	bsf	3979,4,c	;volatile
  3922                           
  3923                           ;libraries/lcd_highlevel.c: 104:   PORTA = 0x2B; LATC3 = 0; LATC3 = 1;;
  3924  00286A  0E2B               	movlw	43
  3925  00286C  6E80               	movwf	128,c	;volatile
  3926  00286E  968B               	bcf	3979,3,c	;volatile
  3927  002870  868B               	bsf	3979,3,c	;volatile
  3928                           
  3929                           ;libraries/lcd_highlevel.c: 105:   PORTA = 0xC0; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  3930  002872  0EC0               	movlw	192
  3931  002874  6E80               	movwf	128,c	;volatile
  3932  002876  988B               	bcf	3979,4,c	;volatile
  3933  002878  968B               	bcf	3979,3,c	;volatile
  3934  00287A  868B               	bsf	3979,3,c	;volatile
  3935  00287C  888B               	bsf	3979,4,c	;volatile
  3936                           
  3937                           ;libraries/lcd_highlevel.c: 106:   PORTA = 0x2C; LATC3 = 0; LATC3 = 1;;
  3938  00287E  0E2C               	movlw	44
  3939  002880  6E80               	movwf	128,c	;volatile
  3940  002882  968B               	bcf	3979,3,c	;volatile
  3941  002884  868B               	bsf	3979,3,c	;volatile
  3942                           
  3943                           ;libraries/lcd_highlevel.c: 107:   PORTA = 0xC2; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  3944  002886  0EC2               	movlw	194
  3945  002888  6E80               	movwf	128,c	;volatile
  3946  00288A  988B               	bcf	3979,4,c	;volatile
  3947  00288C  968B               	bcf	3979,3,c	;volatile
  3948  00288E  868B               	bsf	3979,3,c	;volatile
  3949  002890  888B               	bsf	3979,4,c	;volatile
  3950                           
  3951                           ;libraries/lcd_highlevel.c: 108:   PORTA = 0x01; LATC3 = 0; LATC3 = 1;;
  3952  002892  0E01               	movlw	1
  3953  002894  6E80               	movwf	128,c	;volatile
  3954  002896  968B               	bcf	3979,3,c	;volatile
  3955  002898  868B               	bsf	3979,3,c	;volatile
  3956                           
  3957                           ;libraries/lcd_highlevel.c: 109:   PORTA = 0xFF; LATC3 = 0; LATC3 = 1;;
  3958  00289A  6880               	setf	128,c	;volatile
  3959  00289C  968B               	bcf	3979,3,c	;volatile
  3960  00289E  868B               	bsf	3979,3,c	;volatile
  3961                           
  3962                           ;libraries/lcd_highlevel.c: 110:   PORTA = 0XC3; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  3963  0028A0  0EC3               	movlw	195
  3964  0028A2  6E80               	movwf	128,c	;volatile
  3965  0028A4  988B               	bcf	3979,4,c	;volatile
  3966  0028A6  968B               	bcf	3979,3,c	;volatile
  3967  0028A8  868B               	bsf	3979,3,c	;volatile
  3968  0028AA  888B               	bsf	3979,4,c	;volatile
  3969                           
  3970                           ;libraries/lcd_highlevel.c: 111:   PORTA = 0x11; LATC3 = 0; LATC3 = 1;;
  3971  0028AC  0E11               	movlw	17
  3972  0028AE  6E80               	movwf	128,c	;volatile
  3973  0028B0  968B               	bcf	3979,3,c	;volatile
  3974  0028B2  868B               	bsf	3979,3,c	;volatile
  3975                           
  3976                           ;libraries/lcd_highlevel.c: 112:   PORTA = 0xC4; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  3977  0028B4  0EC4               	movlw	196
  3978  0028B6  6E80               	movwf	128,c	;volatile
  3979  0028B8  988B               	bcf	3979,4,c	;volatile
  3980  0028BA  968B               	bcf	3979,3,c	;volatile
  3981  0028BC  868B               	bsf	3979,3,c	;volatile
  3982  0028BE  888B               	bsf	3979,4,c	;volatile
  3983                           
  3984                           ;libraries/lcd_highlevel.c: 113:   PORTA = 0x20; LATC3 = 0; LATC3 = 1;;
  3985  0028C0  0E20               	movlw	32
  3986  0028C2  6E80               	movwf	128,c	;volatile
  3987  0028C4  968B               	bcf	3979,3,c	;volatile
  3988  0028C6  868B               	bsf	3979,3,c	;volatile
  3989                           
  3990                           ;libraries/lcd_highlevel.c: 114:   PORTA = 0xC6; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  3991  0028C8  0EC6               	movlw	198
  3992  0028CA  6E80               	movwf	128,c	;volatile
  3993  0028CC  988B               	bcf	3979,4,c	;volatile
  3994  0028CE  968B               	bcf	3979,3,c	;volatile
  3995  0028D0  868B               	bsf	3979,3,c	;volatile
  3996  0028D2  888B               	bsf	3979,4,c	;volatile
  3997                           
  3998                           ;libraries/lcd_highlevel.c: 115:   PORTA = 0x09; LATC3 = 0; LATC3 = 1;;
  3999  0028D4  0E09               	movlw	9
  4000  0028D6  6E80               	movwf	128,c	;volatile
  4001  0028D8  968B               	bcf	3979,3,c	;volatile
  4002  0028DA  868B               	bsf	3979,3,c	;volatile
  4003                           
  4004                           ;libraries/lcd_highlevel.c: 116:   PORTA = 0xD0; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  4005  0028DC  0ED0               	movlw	208
  4006  0028DE  6E80               	movwf	128,c	;volatile
  4007  0028E0  988B               	bcf	3979,4,c	;volatile
  4008  0028E2  968B               	bcf	3979,3,c	;volatile
  4009  0028E4  868B               	bsf	3979,3,c	;volatile
  4010  0028E6  888B               	bsf	3979,4,c	;volatile
  4011                           
  4012                           ;libraries/lcd_highlevel.c: 117:   PORTA = 0xA4; LATC3 = 0; LATC3 = 1;;
  4013  0028E8  0EA4               	movlw	164
  4014  0028EA  6E80               	movwf	128,c	;volatile
  4015  0028EC  968B               	bcf	3979,3,c	;volatile
  4016  0028EE  868B               	bsf	3979,3,c	;volatile
  4017                           
  4018                           ;libraries/lcd_highlevel.c: 118:   PORTA = 0xA1; LATC3 = 0; LATC3 = 1;;
  4019  0028F0  0EA1               	movlw	161
  4020  0028F2  6E80               	movwf	128,c	;volatile
  4021  0028F4  968B               	bcf	3979,3,c	;volatile
  4022  0028F6  868B               	bsf	3979,3,c	;volatile
  4023                           
  4024                           ;libraries/lcd_highlevel.c: 119:   PORTA = 0xE0; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  4025  0028F8  0EE0               	movlw	224
  4026  0028FA  6E80               	movwf	128,c	;volatile
  4027  0028FC  988B               	bcf	3979,4,c	;volatile
  4028  0028FE  968B               	bcf	3979,3,c	;volatile
  4029  002900  868B               	bsf	3979,3,c	;volatile
  4030  002902  888B               	bsf	3979,4,c	;volatile
  4031                           
  4032                           ;libraries/lcd_highlevel.c: 120:   PORTA = 0xD0; LATC3 = 0; LATC3 = 1;;
  4033  002904  0ED0               	movlw	208
  4034  002906  6E80               	movwf	128,c	;volatile
  4035  002908  968B               	bcf	3979,3,c	;volatile
  4036  00290A  868B               	bsf	3979,3,c	;volatile
  4037                           
  4038                           ;libraries/lcd_highlevel.c: 121:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
  4039  00290C  0E00               	movlw	0
  4040  00290E  6E80               	movwf	128,c	;volatile
  4041  002910  968B               	bcf	3979,3,c	;volatile
  4042  002912  868B               	bsf	3979,3,c	;volatile
  4043                           
  4044                           ;libraries/lcd_highlevel.c: 122:   PORTA = 0x05; LATC3 = 0; LATC3 = 1;;
  4045  002914  0E05               	movlw	5
  4046  002916  6E80               	movwf	128,c	;volatile
  4047  002918  968B               	bcf	3979,3,c	;volatile
  4048  00291A  868B               	bsf	3979,3,c	;volatile
  4049                           
  4050                           ;libraries/lcd_highlevel.c: 123:   PORTA = 0x0E; LATC3 = 0; LATC3 = 1;;
  4051  00291C  0E0E               	movlw	14
  4052  00291E  6E80               	movwf	128,c	;volatile
  4053  002920  968B               	bcf	3979,3,c	;volatile
  4054  002922  868B               	bsf	3979,3,c	;volatile
  4055                           
  4056                           ;libraries/lcd_highlevel.c: 124:   PORTA = 0x15; LATC3 = 0; LATC3 = 1;;
  4057  002924  0E15               	movlw	21
  4058  002926  6E80               	movwf	128,c	;volatile
  4059  002928  968B               	bcf	3979,3,c	;volatile
  4060  00292A  868B               	bsf	3979,3,c	;volatile
  4061                           
  4062                           ;libraries/lcd_highlevel.c: 125:   PORTA = 0x0D; LATC3 = 0; LATC3 = 1;;
  4063  00292C  0E0D               	movlw	13
  4064  00292E  6E80               	movwf	128,c	;volatile
  4065  002930  968B               	bcf	3979,3,c	;volatile
  4066  002932  868B               	bsf	3979,3,c	;volatile
  4067                           
  4068                           ;libraries/lcd_highlevel.c: 126:   PORTA = 0x37; LATC3 = 0; LATC3 = 1;;
  4069  002934  0E37               	movlw	55
  4070  002936  6E80               	movwf	128,c	;volatile
  4071  002938  968B               	bcf	3979,3,c	;volatile
  4072  00293A  868B               	bsf	3979,3,c	;volatile
  4073                           
  4074                           ;libraries/lcd_highlevel.c: 127:   PORTA = 0x43; LATC3 = 0; LATC3 = 1;;
  4075  00293C  0E43               	movlw	67
  4076  00293E  6E80               	movwf	128,c	;volatile
  4077  002940  968B               	bcf	3979,3,c	;volatile
  4078  002942  868B               	bsf	3979,3,c	;volatile
  4079                           
  4080                           ;libraries/lcd_highlevel.c: 128:   PORTA = 0x47; LATC3 = 0; LATC3 = 1;;
  4081  002944  0E47               	movlw	71
  4082  002946  6E80               	movwf	128,c	;volatile
  4083  002948  968B               	bcf	3979,3,c	;volatile
  4084  00294A  868B               	bsf	3979,3,c	;volatile
  4085                           
  4086                           ;libraries/lcd_highlevel.c: 129:   PORTA = 0x09; LATC3 = 0; LATC3 = 1;;
  4087  00294C  0E09               	movlw	9
  4088  00294E  6E80               	movwf	128,c	;volatile
  4089  002950  968B               	bcf	3979,3,c	;volatile
  4090  002952  868B               	bsf	3979,3,c	;volatile
  4091                           
  4092                           ;libraries/lcd_highlevel.c: 130:   PORTA = 0x15; LATC3 = 0; LATC3 = 1;;
  4093  002954  0E15               	movlw	21
  4094  002956  6E80               	movwf	128,c	;volatile
  4095  002958  968B               	bcf	3979,3,c	;volatile
  4096  00295A  868B               	bsf	3979,3,c	;volatile
  4097                           
  4098                           ;libraries/lcd_highlevel.c: 131:   PORTA = 0x12; LATC3 = 0; LATC3 = 1;;
  4099  00295C  0E12               	movlw	18
  4100  00295E  6E80               	movwf	128,c	;volatile
  4101  002960  968B               	bcf	3979,3,c	;volatile
  4102  002962  868B               	bsf	3979,3,c	;volatile
  4103                           
  4104                           ;libraries/lcd_highlevel.c: 132:   PORTA = 0x16; LATC3 = 0; LATC3 = 1;;
  4105  002964  0E16               	movlw	22
  4106  002966  6E80               	movwf	128,c	;volatile
  4107  002968  968B               	bcf	3979,3,c	;volatile
  4108  00296A  868B               	bsf	3979,3,c	;volatile
  4109                           
  4110                           ;libraries/lcd_highlevel.c: 133:   PORTA = 0x19; LATC3 = 0; LATC3 = 1;;
  4111  00296C  0E19               	movlw	25
  4112  00296E  6E80               	movwf	128,c	;volatile
  4113  002970  968B               	bcf	3979,3,c	;volatile
  4114  002972  868B               	bsf	3979,3,c	;volatile
  4115                           
  4116                           ;libraries/lcd_highlevel.c: 134:   PORTA = 0xE1; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  4117  002974  0EE1               	movlw	225
  4118  002976  6E80               	movwf	128,c	;volatile
  4119  002978  988B               	bcf	3979,4,c	;volatile
  4120  00297A  968B               	bcf	3979,3,c	;volatile
  4121  00297C  868B               	bsf	3979,3,c	;volatile
  4122  00297E  888B               	bsf	3979,4,c	;volatile
  4123                           
  4124                           ;libraries/lcd_highlevel.c: 135:   PORTA = 0xD0; LATC3 = 0; LATC3 = 1;;
  4125  002980  0ED0               	movlw	208
  4126  002982  6E80               	movwf	128,c	;volatile
  4127  002984  968B               	bcf	3979,3,c	;volatile
  4128  002986  868B               	bsf	3979,3,c	;volatile
  4129                           
  4130                           ;libraries/lcd_highlevel.c: 136:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
  4131  002988  0E00               	movlw	0
  4132  00298A  6E80               	movwf	128,c	;volatile
  4133  00298C  968B               	bcf	3979,3,c	;volatile
  4134  00298E  868B               	bsf	3979,3,c	;volatile
  4135                           
  4136                           ;libraries/lcd_highlevel.c: 137:   PORTA = 0x05; LATC3 = 0; LATC3 = 1;;
  4137  002990  0E05               	movlw	5
  4138  002992  6E80               	movwf	128,c	;volatile
  4139  002994  968B               	bcf	3979,3,c	;volatile
  4140  002996  868B               	bsf	3979,3,c	;volatile
  4141                           
  4142                           ;libraries/lcd_highlevel.c: 138:   PORTA = 0x0D; LATC3 = 0; LATC3 = 1;;
  4143  002998  0E0D               	movlw	13
  4144  00299A  6E80               	movwf	128,c	;volatile
  4145  00299C  968B               	bcf	3979,3,c	;volatile
  4146  00299E  868B               	bsf	3979,3,c	;volatile
  4147                           
  4148                           ;libraries/lcd_highlevel.c: 139:   PORTA = 0x0C; LATC3 = 0; LATC3 = 1;;
  4149  0029A0  0E0C               	movlw	12
  4150  0029A2  6E80               	movwf	128,c	;volatile
  4151  0029A4  968B               	bcf	3979,3,c	;volatile
  4152  0029A6  868B               	bsf	3979,3,c	;volatile
  4153                           
  4154                           ;libraries/lcd_highlevel.c: 140:   PORTA = 0x06; LATC3 = 0; LATC3 = 1;;
  4155  0029A8  0E06               	movlw	6
  4156  0029AA  6E80               	movwf	128,c	;volatile
  4157  0029AC  968B               	bcf	3979,3,c	;volatile
  4158  0029AE  868B               	bsf	3979,3,c	;volatile
  4159                           
  4160                           ;libraries/lcd_highlevel.c: 141:   PORTA = 0x2D; LATC3 = 0; LATC3 = 1;;
  4161  0029B0  0E2D               	movlw	45
  4162  0029B2  6E80               	movwf	128,c	;volatile
  4163  0029B4  968B               	bcf	3979,3,c	;volatile
  4164  0029B6  868B               	bsf	3979,3,c	;volatile
  4165                           
  4166                           ;libraries/lcd_highlevel.c: 142:   PORTA = 0x44; LATC3 = 0; LATC3 = 1;;
  4167  0029B8  0E44               	movlw	68
  4168  0029BA  6E80               	movwf	128,c	;volatile
  4169  0029BC  968B               	bcf	3979,3,c	;volatile
  4170  0029BE  868B               	bsf	3979,3,c	;volatile
  4171                           
  4172                           ;libraries/lcd_highlevel.c: 143:   PORTA = 0x40; LATC3 = 0; LATC3 = 1;;
  4173  0029C0  0E40               	movlw	64
  4174  0029C2  6E80               	movwf	128,c	;volatile
  4175  0029C4  968B               	bcf	3979,3,c	;volatile
  4176  0029C6  868B               	bsf	3979,3,c	;volatile
  4177                           
  4178                           ;libraries/lcd_highlevel.c: 144:   PORTA = 0x0E; LATC3 = 0; LATC3 = 1;;
  4179  0029C8  0E0E               	movlw	14
  4180  0029CA  6E80               	movwf	128,c	;volatile
  4181  0029CC  968B               	bcf	3979,3,c	;volatile
  4182  0029CE  868B               	bsf	3979,3,c	;volatile
  4183                           
  4184                           ;libraries/lcd_highlevel.c: 145:   PORTA = 0x1C; LATC3 = 0; LATC3 = 1;;
  4185  0029D0  0E1C               	movlw	28
  4186  0029D2  6E80               	movwf	128,c	;volatile
  4187  0029D4  968B               	bcf	3979,3,c	;volatile
  4188  0029D6  868B               	bsf	3979,3,c	;volatile
  4189                           
  4190                           ;libraries/lcd_highlevel.c: 146:   PORTA = 0x18; LATC3 = 0; LATC3 = 1;;
  4191  0029D8  0E18               	movlw	24
  4192  0029DA  6E80               	movwf	128,c	;volatile
  4193  0029DC  968B               	bcf	3979,3,c	;volatile
  4194  0029DE  868B               	bsf	3979,3,c	;volatile
  4195                           
  4196                           ;libraries/lcd_highlevel.c: 147:   PORTA = 0x16; LATC3 = 0; LATC3 = 1;;
  4197  0029E0  0E16               	movlw	22
  4198  0029E2  6E80               	movwf	128,c	;volatile
  4199  0029E4  968B               	bcf	3979,3,c	;volatile
  4200  0029E6  868B               	bsf	3979,3,c	;volatile
  4201                           
  4202                           ;libraries/lcd_highlevel.c: 148:   PORTA = 0x19; LATC3 = 0; LATC3 = 1;;
  4203  0029E8  0E19               	movlw	25
  4204  0029EA  6E80               	movwf	128,c	;volatile
  4205  0029EC  968B               	bcf	3979,3,c	;volatile
  4206  0029EE  868B               	bsf	3979,3,c	;volatile
  4207                           
  4208                           ;libraries/lcd_highlevel.c: 149:   PORTA = 0x2A; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  4209  0029F0  0E2A               	movlw	42
  4210  0029F2  6E80               	movwf	128,c	;volatile
  4211  0029F4  988B               	bcf	3979,4,c	;volatile
  4212  0029F6  968B               	bcf	3979,3,c	;volatile
  4213  0029F8  868B               	bsf	3979,3,c	;volatile
  4214  0029FA  888B               	bsf	3979,4,c	;volatile
  4215                           
  4216                           ;libraries/lcd_highlevel.c: 150:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
  4217  0029FC  0E00               	movlw	0
  4218  0029FE  6E80               	movwf	128,c	;volatile
  4219  002A00  968B               	bcf	3979,3,c	;volatile
  4220  002A02  868B               	bsf	3979,3,c	;volatile
  4221                           
  4222                           ;libraries/lcd_highlevel.c: 151:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
  4223  002A04  0E00               	movlw	0
  4224  002A06  6E80               	movwf	128,c	;volatile
  4225  002A08  968B               	bcf	3979,3,c	;volatile
  4226  002A0A  868B               	bsf	3979,3,c	;volatile
  4227                           
  4228                           ;libraries/lcd_highlevel.c: 152:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
  4229  002A0C  0E00               	movlw	0
  4230  002A0E  6E80               	movwf	128,c	;volatile
  4231  002A10  968B               	bcf	3979,3,c	;volatile
  4232  002A12  868B               	bsf	3979,3,c	;volatile
  4233                           
  4234                           ;libraries/lcd_highlevel.c: 153:   PORTA = 0xEF; LATC3 = 0; LATC3 = 1;;
  4235  002A14  0EEF               	movlw	239
  4236  002A16  6E80               	movwf	128,c	;volatile
  4237  002A18  968B               	bcf	3979,3,c	;volatile
  4238  002A1A  868B               	bsf	3979,3,c	;volatile
  4239                           
  4240                           ;libraries/lcd_highlevel.c: 154:   PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  4241  002A1C  0E2B               	movlw	43
  4242  002A1E  6E80               	movwf	128,c	;volatile
  4243  002A20  988B               	bcf	3979,4,c	;volatile
  4244  002A22  968B               	bcf	3979,3,c	;volatile
  4245  002A24  868B               	bsf	3979,3,c	;volatile
  4246  002A26  888B               	bsf	3979,4,c	;volatile
  4247                           
  4248                           ;libraries/lcd_highlevel.c: 155:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
  4249  002A28  0E00               	movlw	0
  4250  002A2A  6E80               	movwf	128,c	;volatile
  4251  002A2C  968B               	bcf	3979,3,c	;volatile
  4252  002A2E  868B               	bsf	3979,3,c	;volatile
  4253                           
  4254                           ;libraries/lcd_highlevel.c: 156:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
  4255  002A30  0E00               	movlw	0
  4256  002A32  6E80               	movwf	128,c	;volatile
  4257  002A34  968B               	bcf	3979,3,c	;volatile
  4258  002A36  868B               	bsf	3979,3,c	;volatile
  4259                           
  4260                           ;libraries/lcd_highlevel.c: 157:   PORTA = 0x01; LATC3 = 0; LATC3 = 1;;
  4261  002A38  0E01               	movlw	1
  4262  002A3A  6E80               	movwf	128,c	;volatile
  4263  002A3C  968B               	bcf	3979,3,c	;volatile
  4264  002A3E  868B               	bsf	3979,3,c	;volatile
  4265                           
  4266                           ;libraries/lcd_highlevel.c: 158:   PORTA = 0x3F; LATC3 = 0; LATC3 = 1;;
  4267  002A40  0E3F               	movlw	63
  4268  002A42  6E80               	movwf	128,c	;volatile
  4269  002A44  968B               	bcf	3979,3,c	;volatile
  4270  002A46  868B               	bsf	3979,3,c	;volatile
  4271                           
  4272                           ;libraries/lcd_highlevel.c: 159:   PORTA = 0x26; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  4273  002A48  0E26               	movlw	38
  4274  002A4A  6E80               	movwf	128,c	;volatile
  4275  002A4C  988B               	bcf	3979,4,c	;volatile
  4276  002A4E  968B               	bcf	3979,3,c	;volatile
  4277  002A50  868B               	bsf	3979,3,c	;volatile
  4278  002A52  888B               	bsf	3979,4,c	;volatile
  4279                           
  4280                           ;libraries/lcd_highlevel.c: 160:   PORTA = 0x01; LATC3 = 0; LATC3 = 1;;
  4281  002A54  0E01               	movlw	1
  4282  002A56  6E80               	movwf	128,c	;volatile
  4283  002A58  968B               	bcf	3979,3,c	;volatile
  4284  002A5A  868B               	bsf	3979,3,c	;volatile
  4285                           
  4286                           ;libraries/lcd_highlevel.c: 161:   PORTA = 0x29; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  4287  002A5C  0E29               	movlw	41
  4288  002A5E  6E80               	movwf	128,c	;volatile
  4289  002A60  988B               	bcf	3979,4,c	;volatile
  4290  002A62  968B               	bcf	3979,3,c	;volatile
  4291  002A64  868B               	bsf	3979,3,c	;volatile
  4292  002A66  888B               	bsf	3979,4,c	;volatile
  4293  002A68  0012               	return		;funcret
  4294  002A6A                     __end_of_LCD_Init:
  4295                           	callstack 0
  4296                           
  4297 ;; *************** function _LCD_Lowlevel_Init *****************
  4298 ;; Defined at:
  4299 ;;		line 17 in file "libraries/lcd_lowlevel.c"
  4300 ;; Parameters:    Size  Location     Type
  4301 ;;		None
  4302 ;; Auto vars:     Size  Location     Type
  4303 ;;  i               4   18[COMRAM] unsigned long 
  4304 ;; Return value:  Size  Location     Type
  4305 ;;                  1    wreg      void 
  4306 ;; Registers used:
  4307 ;;		wreg, status,2, status,0
  4308 ;; Tracked objects:
  4309 ;;		On entry : 0/0
  4310 ;;		On exit  : 0/0
  4311 ;;		Unchanged: 0/0
  4312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4313 ;;      Params:         0       0       0       0       0       0       0
  4314 ;;      Locals:         4       0       0       0       0       0       0
  4315 ;;      Temps:          1       0       0       0       0       0       0
  4316 ;;      Totals:         5       0       0       0       0       0       0
  4317 ;;Total ram usage:        5 bytes
  4318 ;; Hardware stack levels used: 1
  4319 ;; Hardware stack levels required when called: 4
  4320 ;; This function calls:
  4321 ;;		Nothing
  4322 ;; This function is called by:
  4323 ;;		_LCD_Init
  4324 ;; This function uses a non-reentrant model
  4325 ;;
  4326                           
  4327                           	psect	text8
  4328  004D46                     __ptext8:
  4329                           	callstack 0
  4330  004D46                     _LCD_Lowlevel_Init:
  4331                           	callstack 24
  4332                           
  4333                           ;libraries/lcd_lowlevel.c: 19:   uint32_t i;;libraries/lcd_lowlevel.c: 20:   TRISC5 = 0;
  4334                           
  4335                           ;incstack = 0
  4336  004D46  9A94               	bcf	3988,5,c	;volatile
  4337                           
  4338                           ;libraries/lcd_lowlevel.c: 21:   TRISC2 = 0;
  4339  004D48  9494               	bcf	3988,2,c	;volatile
  4340                           
  4341                           ;libraries/lcd_lowlevel.c: 22:   TRISC3 = 0;
  4342  004D4A  9694               	bcf	3988,3,c	;volatile
  4343                           
  4344                           ;libraries/lcd_lowlevel.c: 23:   TRISC4 = 0;
  4345  004D4C  9894               	bcf	3988,4,c	;volatile
  4346                           
  4347                           ;libraries/lcd_lowlevel.c: 25:   TRISA = 0x00;
  4348  004D4E  0E00               	movlw	0
  4349  004D50  6E92               	movwf	146,c	;volatile
  4350                           
  4351                           ;libraries/lcd_lowlevel.c: 28:  LATC5 = 0;
  4352  004D52  9A8B               	bcf	3979,5,c	;volatile
  4353                           
  4354                           ;libraries/lcd_lowlevel.c: 29:  LATC2 = 1;
  4355  004D54  848B               	bsf	3979,2,c	;volatile
  4356                           
  4357                           ;libraries/lcd_lowlevel.c: 30:  LATC3 = 1;
  4358  004D56  868B               	bsf	3979,3,c	;volatile
  4359                           
  4360                           ;libraries/lcd_lowlevel.c: 31:  LATC4 = 1;
  4361  004D58  888B               	bsf	3979,4,c	;volatile
  4362                           
  4363                           ;libraries/lcd_lowlevel.c: 33:   for(i=0;i<12;i++)
  4364  004D5A  0E00               	movlw	0
  4365  004D5C  6E13               	movwf	LCD_Lowlevel_Init@i^0,c
  4366  004D5E  0E00               	movlw	0
  4367  004D60  6E14               	movwf	(LCD_Lowlevel_Init@i+1)^0,c
  4368  004D62  0E00               	movlw	0
  4369  004D64  6E15               	movwf	(LCD_Lowlevel_Init@i+2)^0,c
  4370  004D66  0E00               	movlw	0
  4371  004D68  6E16               	movwf	(LCD_Lowlevel_Init@i+3)^0,c
  4372  004D6A                     l3980:
  4373                           
  4374                           ;libraries/lcd_lowlevel.c: 34:   {;libraries/lcd_lowlevel.c: 35:     _delay((unsigned lo
      +                          ng)((10)*(64000000L/4000.0)));
  4375  004D6A  0ED0               	movlw	208
  4376  004D6C  6E12               	movwf	??_LCD_Lowlevel_Init^0,c
  4377  004D6E  0ECA               	movlw	202
  4378  004D70                     u7577:
  4379  004D70  2EE8               	decfsz	wreg,f,c
  4380  004D72  D7FE               	bra	u7577
  4381  004D74  2E12               	decfsz	??_LCD_Lowlevel_Init^0,f,c
  4382  004D76  D7FC               	bra	u7577
  4383                           
  4384                           ;libraries/lcd_lowlevel.c: 36:   }
  4385  004D78  0E01               	movlw	1
  4386  004D7A  2613               	addwf	LCD_Lowlevel_Init@i^0,f,c
  4387  004D7C  0E00               	movlw	0
  4388  004D7E  2214               	addwfc	(LCD_Lowlevel_Init@i+1)^0,f,c
  4389  004D80  2215               	addwfc	(LCD_Lowlevel_Init@i+2)^0,f,c
  4390  004D82  2216               	addwfc	(LCD_Lowlevel_Init@i+3)^0,f,c
  4391  004D84  5016               	movf	(LCD_Lowlevel_Init@i+3)^0,w,c
  4392  004D86  1015               	iorwf	(LCD_Lowlevel_Init@i+2)^0,w,c
  4393  004D88  1014               	iorwf	(LCD_Lowlevel_Init@i+1)^0,w,c
  4394  004D8A  E104               	bnz	u2370
  4395  004D8C  0E0C               	movlw	12
  4396  004D8E  5C13               	subwf	LCD_Lowlevel_Init@i^0,w,c
  4397  004D90  A0D8               	btfss	status,0,c
  4398  004D92  D7EB               	goto	l3980
  4399  004D94                     u2370:
  4400                           
  4401                           ;libraries/lcd_lowlevel.c: 38:   for(i=0;i<12;i++)
  4402  004D94  0E00               	movlw	0
  4403  004D96  6E13               	movwf	LCD_Lowlevel_Init@i^0,c
  4404  004D98  0E00               	movlw	0
  4405  004D9A  6E14               	movwf	(LCD_Lowlevel_Init@i+1)^0,c
  4406  004D9C  0E00               	movlw	0
  4407  004D9E  6E15               	movwf	(LCD_Lowlevel_Init@i+2)^0,c
  4408  004DA0  0E00               	movlw	0
  4409  004DA2  6E16               	movwf	(LCD_Lowlevel_Init@i+3)^0,c
  4410  004DA4                     l3992:
  4411                           
  4412                           ;libraries/lcd_lowlevel.c: 39:   {;libraries/lcd_lowlevel.c: 40:     _delay((unsigned lo
      +                          ng)((10)*(64000000L/4000.0)));
  4413  004DA4  0ED0               	movlw	208
  4414  004DA6  6E12               	movwf	??_LCD_Lowlevel_Init^0,c
  4415  004DA8  0ECA               	movlw	202
  4416  004DAA                     u7587:
  4417  004DAA  2EE8               	decfsz	wreg,f,c
  4418  004DAC  D7FE               	bra	u7587
  4419  004DAE  2E12               	decfsz	??_LCD_Lowlevel_Init^0,f,c
  4420  004DB0  D7FC               	bra	u7587
  4421                           
  4422                           ;libraries/lcd_lowlevel.c: 41:   }
  4423  004DB2  0E01               	movlw	1
  4424  004DB4  2613               	addwf	LCD_Lowlevel_Init@i^0,f,c
  4425  004DB6  0E00               	movlw	0
  4426  004DB8  2214               	addwfc	(LCD_Lowlevel_Init@i+1)^0,f,c
  4427  004DBA  2215               	addwfc	(LCD_Lowlevel_Init@i+2)^0,f,c
  4428  004DBC  2216               	addwfc	(LCD_Lowlevel_Init@i+3)^0,f,c
  4429  004DBE  5016               	movf	(LCD_Lowlevel_Init@i+3)^0,w,c
  4430  004DC0  1015               	iorwf	(LCD_Lowlevel_Init@i+2)^0,w,c
  4431  004DC2  1014               	iorwf	(LCD_Lowlevel_Init@i+1)^0,w,c
  4432  004DC4  E105               	bnz	u2380
  4433  004DC6  0E0C               	movlw	12
  4434  004DC8  5C13               	subwf	LCD_Lowlevel_Init@i^0,w,c
  4435  004DCA  B0D8               	btfsc	status,0,c
  4436  004DCC  0012               	return	
  4437  004DCE  D7EA               	goto	l3992
  4438  004DD0                     u2380:
  4439  004DD0  0012               	return		;funcret
  4440  004DD2                     __end_of_LCD_Lowlevel_Init:
  4441                           	callstack 0
  4442                           
  4443 ;; *************** function _Factory_exec *****************
  4444 ;; Defined at:
  4445 ;;		line 63 in file "class/factory.c"
  4446 ;; Parameters:    Size  Location     Type
  4447 ;;		None
  4448 ;; Auto vars:     Size  Location     Type
  4449 ;;  ev              1   79[BANK0 ] unsigned char 
  4450 ;; Return value:  Size  Location     Type
  4451 ;;                  1    wreg      void 
  4452 ;; Registers used:
  4453 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4454 ;; Tracked objects:
  4455 ;;		On entry : 0/0
  4456 ;;		On exit  : 0/0
  4457 ;;		Unchanged: 0/0
  4458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4459 ;;      Params:         0       0       0       0       0       0       0
  4460 ;;      Locals:         0       1       0       0       0       0       0
  4461 ;;      Temps:          0       0       0       0       0       0       0
  4462 ;;      Totals:         0       1       0       0       0       0       0
  4463 ;;Total ram usage:        1 bytes
  4464 ;; Hardware stack levels used: 1
  4465 ;; Hardware stack levels required when called: 15
  4466 ;; This function calls:
  4467 ;;		_XF_popEvent
  4468 ;;		_displaySM
  4469 ;;		_gameControllerSM
  4470 ;;		_sleepSM
  4471 ;;		_touchScreenSM
  4472 ;; This function is called by:
  4473 ;;		_main
  4474 ;; This function uses a non-reentrant model
  4475 ;;
  4476                           
  4477                           	psect	text9
  4478  0053F8                     __ptext9:
  4479                           	callstack 0
  4480  0053F8                     _Factory_exec:
  4481                           	callstack 15
  4482                           
  4483                           ;class/factory.c: 66:     Event ev;;class/factory.c: 67:     ev = XF_popEvent(0);
  4484                           
  4485                           ;incstack = 0
  4486  0053F8  0E00               	movlw	0
  4487  0053FA  ECD5  F029         	call	_XF_popEvent
  4488  0053FE  0100               	movlb	0	; () banked
  4489  005400  6FAF               	movwf	Factory_exec@ev& (0+255),b
  4490                           
  4491                           ; BSR set to: 0
  4492                           ;class/factory.c: 68:     if (ev != NULLEVENT)
  4493  005402  51AF               	movf	Factory_exec@ev& (0+255),w,b
  4494  005404  B4D8               	btfsc	status,2,c
  4495  005406  0012               	return	
  4496                           
  4497                           ; BSR set to: 0
  4498                           ;class/factory.c: 69:     {;class/factory.c: 70:         sleepSM(ev);
  4499  005408  51AF               	movf	Factory_exec@ev& (0+255),w,b
  4500  00540A  EC2E  F02B         	call	_sleepSM
  4501                           
  4502                           ;class/factory.c: 71:         touchScreenSM(ev,&g1);
  4503  00540E  0E00               	movlw	low _g1
  4504  005410  0100               	movlb	0	; () banked
  4505  005412  6FAD               	movwf	touchScreenSM@g& (0+255),b
  4506  005414  0E01               	movlw	high _g1
  4507  005416  6FAE               	movwf	(touchScreenSM@g+1)& (0+255),b
  4508  005418  51AF               	movf	Factory_exec@ev& (0+255),w,b
  4509  00541A  EC02  F029         	call	_touchScreenSM
  4510                           
  4511                           ;class/factory.c: 72:         displaySM(ev,&g1);
  4512  00541E  0E00               	movlw	low _g1
  4513  005420  0100               	movlb	0	; () banked
  4514  005422  6FA1               	movwf	displaySM@g& (0+255),b
  4515  005424  0E01               	movlw	high _g1
  4516  005426  6FA2               	movwf	(displaySM@g+1)& (0+255),b
  4517  005428  51AF               	movf	Factory_exec@ev& (0+255),w,b
  4518  00542A  ECC3  F025         	call	_displaySM
  4519                           
  4520                           ;class/factory.c: 73:         gameControllerSM(ev,&g1);
  4521  00542E  0E00               	movlw	low _g1
  4522  005430  6E3C               	movwf	gameControllerSM@g^0,c
  4523  005432  0E01               	movlw	high _g1
  4524  005434  6E3D               	movwf	(gameControllerSM@g+1)^0,c
  4525  005436  0100               	movlb	0	; () banked
  4526  005438  51AF               	movf	Factory_exec@ev& (0+255),w,b
  4527  00543A  EC22  F021         	call	_gameControllerSM
  4528  00543E  0012               	return		;funcret
  4529  005440                     __end_of_Factory_exec:
  4530                           	callstack 0
  4531                           
  4532 ;; *************** function _touchScreenSM *****************
  4533 ;; Defined at:
  4534 ;;		line 31 in file "stateMachine/touchScreenSM.c"
  4535 ;; Parameters:    Size  Location     Type
  4536 ;;  ev              1    wreg     unsigned char 
  4537 ;;  g               2   77[BANK0 ] PTR struct GameParameter
  4538 ;;		 -> g1(216), 
  4539 ;; Auto vars:     Size  Location     Type
  4540 ;;  ev              1   68[COMRAM] unsigned char 
  4541 ;; Return value:  Size  Location     Type
  4542 ;;                  1    wreg      void 
  4543 ;; Registers used:
  4544 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4545 ;; Tracked objects:
  4546 ;;		On entry : 3F/0
  4547 ;;		On exit  : 0/0
  4548 ;;		Unchanged: 0/0
  4549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4550 ;;      Params:         0       2       0       0       0       0       0
  4551 ;;      Locals:         1       0       0       0       0       0       0
  4552 ;;      Temps:          2       0       0       0       0       0       0
  4553 ;;      Totals:         3       2       0       0       0       0       0
  4554 ;;Total ram usage:        5 bytes
  4555 ;; Hardware stack levels used: 1
  4556 ;; Hardware stack levels required when called: 13
  4557 ;; This function calls:
  4558 ;;		_touchScreenController
  4559 ;; This function is called by:
  4560 ;;		_Factory_exec
  4561 ;; This function uses a non-reentrant model
  4562 ;;
  4563                           
  4564                           	psect	text10
  4565  005204                     __ptext10:
  4566                           	callstack 0
  4567  005204                     _touchScreenSM:
  4568                           	callstack 16
  4569                           
  4570                           ;incstack = 0
  4571                           ;touchScreenSM@ev stored from wreg
  4572  005204  6E45               	movwf	touchScreenSM@ev^0,c
  4573                           
  4574                           ;stateMachine/touchScreenSM.c: 31: void touchScreenSM(Event ev, GameParameters* g);state
      +                          Machine/touchScreenSM.c: 32: {;stateMachine/touchScreenSM.c: 33:     switch(touchScreenS
      +                          tate)
  4575  005206  D01D               	goto	l9696
  4576  005208                     l9678:
  4577                           
  4578                           ; BSR set to: 0
  4579                           ;stateMachine/touchScreenSM.c: 36:             if(ev==evPress)
  4580  005208  0445               	decf	touchScreenSM@ev^0,w,c
  4581  00520A  A4D8               	btfss	status,2,c
  4582  00520C  0012               	return	
  4583                           
  4584                           ; BSR set to: 0
  4585                           ;stateMachine/touchScreenSM.c: 37:             {;stateMachine/touchScreenSM.c: 38:      
      +                                     touchScreenState=CALCULATEPOSITION;
  4586  00520E  0E01               	movlw	1
  4587  005210  6FD9               	movwf	_touchScreenState& (0+255),b
  4588  005212                     l9682:
  4589                           
  4590                           ;stateMachine/touchScreenSM.c: 39:                 touchScreenController(g);
  4591  005212  C0AD  F08B         	movff	touchScreenSM@g,touchScreenController@g
  4592  005216  C0AE  F08C         	movff	touchScreenSM@g+1,touchScreenController@g+1
  4593  00521A  EC79  F016         	call	_touchScreenController	;wreg free
  4594  00521E  0012               	return	
  4595  005220                     l9684:
  4596                           
  4597                           ; BSR set to: 0
  4598                           ;stateMachine/touchScreenSM.c: 44:             if(ev==evRelease)
  4599  005220  0E02               	movlw	2
  4600  005222  1845               	xorwf	touchScreenSM@ev^0,w,c
  4601  005224  A4D8               	btfss	status,2,c
  4602  005226  D008               	goto	l9690
  4603                           
  4604                           ; BSR set to: 0
  4605                           ;stateMachine/touchScreenSM.c: 45:             {;stateMachine/touchScreenSM.c: 46:      
      +                                     touchScreenState=WAITING;
  4606  005228  0E00               	movlw	0
  4607  00522A  6FD9               	movwf	_touchScreenState& (0+255),b
  4608                           
  4609                           ; BSR set to: 0
  4610                           ;stateMachine/touchScreenSM.c: 47:                 touchScreenController(g);
  4611  00522C  C0AD  F08B         	movff	touchScreenSM@g,touchScreenController@g
  4612  005230  C0AE  F08C         	movff	touchScreenSM@g+1,touchScreenController@g+1
  4613  005234  EC79  F016         	call	_touchScreenController	;wreg free
  4614  005238                     l9690:
  4615                           
  4616                           ;stateMachine/touchScreenSM.c: 49:             if(ev==evTimerPos)
  4617  005238  0E04               	movlw	4
  4618  00523A  1845               	xorwf	touchScreenSM@ev^0,w,c
  4619  00523C  A4D8               	btfss	status,2,c
  4620  00523E  0012               	return	
  4621  005240  D7E8               	goto	l9682
  4622  005242                     l9696:
  4623  005242  0100               	movlb	0	; () banked
  4624  005244  51D9               	movf	_touchScreenState& (0+255),w,b
  4625  005246  6E43               	movwf	??_touchScreenSM^0,c
  4626  005248  6A44               	clrf	(??_touchScreenSM+1)^0,c
  4627                           
  4628                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4629                           ; Switch size 1, requested type "simple"
  4630                           ; Number of cases is 1, Range of values is 0 to 0
  4631                           ; switch strategies available:
  4632                           ; Name         Instructions Cycles
  4633                           ; simple_byte            4     3 (average)
  4634                           ;	Chosen strategy is simple_byte
  4635  00524A  5044               	movf	(??_touchScreenSM+1)^0,w,c
  4636  00524C  0A00               	xorlw	0	; case 0
  4637  00524E  A4D8               	btfss	status,2,c
  4638  005250  0012               	return	
  4639                           
  4640                           ; BSR set to: 0
  4641                           ; Switch size 1, requested type "simple"
  4642                           ; Number of cases is 2, Range of values is 0 to 1
  4643                           ; switch strategies available:
  4644                           ; Name         Instructions Cycles
  4645                           ; simple_byte            7     4 (average)
  4646                           ;	Chosen strategy is simple_byte
  4647  005252  5043               	movf	??_touchScreenSM^0,w,c
  4648  005254  0A00               	xorlw	0	; case 0
  4649  005256  B4D8               	btfsc	status,2,c
  4650  005258  D7D7               	goto	l9678
  4651  00525A  0A01               	xorlw	1	; case 1
  4652  00525C  A4D8               	btfss	status,2,c
  4653  00525E  0012               	return	
  4654  005260  D7DF               	goto	l9684
  4655  005262                     __end_of_touchScreenSM:
  4656                           	callstack 0
  4657                           
  4658 ;; *************** function _touchScreenController *****************
  4659 ;; Defined at:
  4660 ;;		line 67 in file "stateMachine/touchScreenSM.c"
  4661 ;; Parameters:    Size  Location     Type
  4662 ;;  g               2   43[BANK0 ] PTR struct GameParameter
  4663 ;;		 -> g1(216), 
  4664 ;; Auto vars:     Size  Location     Type
  4665 ;;  i               2   71[BANK0 ] int 
  4666 ;;  valueX          2   75[BANK0 ] unsigned short 
  4667 ;;  valueY          2   73[BANK0 ] unsigned short 
  4668 ;;  s              20   51[BANK0 ] unsigned char [20]
  4669 ;; Return value:  Size  Location     Type
  4670 ;;                  1    wreg      void 
  4671 ;; Registers used:
  4672 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4673 ;; Tracked objects:
  4674 ;;		On entry : 0/0
  4675 ;;		On exit  : 0/0
  4676 ;;		Unchanged: 0/0
  4677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4678 ;;      Params:         0       2       0       0       0       0       0
  4679 ;;      Locals:         0      26       0       0       0       0       0
  4680 ;;      Temps:          0       6       0       0       0       0       0
  4681 ;;      Totals:         0      34       0       0       0       0       0
  4682 ;;Total ram usage:       34 bytes
  4683 ;; Hardware stack levels used: 1
  4684 ;; Hardware stack levels required when called: 12
  4685 ;; This function calls:
  4686 ;;		_GameParameters_setX
  4687 ;;		_GameParameters_setY
  4688 ;;		_LCD_DrawText
  4689 ;;		_XF_scheduleTimer
  4690 ;;		_XF_unscheduleTimer
  4691 ;;		___fldiv
  4692 ;;		___fltol
  4693 ;;		___xxtofl
  4694 ;;		_configMeasure
  4695 ;;		_configTouch
  4696 ;;		_sprintf
  4697 ;; This function is called by:
  4698 ;;		_touchScreenSM
  4699 ;; This function uses a non-reentrant model
  4700 ;;
  4701                           
  4702                           	psect	text11
  4703  002CF2                     __ptext11:
  4704                           	callstack 0
  4705  002CF2                     _touchScreenController:
  4706                           	callstack 16
  4707                           
  4708                           ;stateMachine/touchScreenSM.c: 67: void touchScreenController(GameParameters* g);stateMa
      +                          chine/touchScreenSM.c: 68: {;stateMachine/touchScreenSM.c: 69:     char s[20];;stateMach
      +                          ine/touchScreenSM.c: 71:     switch(touchScreenState)
  4709                           
  4710                           ;incstack = 0
  4711  002CF2  D125               	goto	l9592
  4712  002CF4                     l538:
  4713                           
  4714                           ; BSR set to: 0
  4715                           ;stateMachine/touchScreenSM.c: 75:             INTEDG1=0;
  4716  002CF4  9AF1               	bcf	4081,5,c	;volatile
  4717                           
  4718                           ; BSR set to: 0
  4719                           ;stateMachine/touchScreenSM.c: 76:             XF_scheduleTimer(3000,evTimer30,0);
  4720  002CF6  0E0B               	movlw	11
  4721  002CF8  6E14               	movwf	(XF_scheduleTimer@tm+1)^0,c
  4722  002CFA  0EB8               	movlw	184
  4723  002CFC  6E13               	movwf	XF_scheduleTimer@tm^0,c
  4724  002CFE  0E03               	movlw	3
  4725  002D00  6E15               	movwf	XF_scheduleTimer@ev^0,c
  4726  002D02  0E00               	movlw	0
  4727  002D04  6E16               	movwf	XF_scheduleTimer@inISR^0,c
  4728  002D06  EC5A  F029         	call	_XF_scheduleTimer	;wreg free
  4729                           
  4730                           ;stateMachine/touchScreenSM.c: 77:             configTouch();
  4731  002D0A  ECF5  F02B         	call	_configTouch	;wreg free
  4732                           
  4733                           ;stateMachine/touchScreenSM.c: 79:             break;
  4734  002D0E  0012               	return	
  4735  002D10                     l9540:
  4736                           
  4737                           ; BSR set to: 0
  4738                           ;stateMachine/touchScreenSM.c: 82:             for (int i=0; i<8; i++)
  4739  002D10  0E00               	movlw	0
  4740  002D12  6FA8               	movwf	(touchScreenController@i+1)& (0+255),b
  4741  002D14  0E00               	movlw	0
  4742  002D16  6FA7               	movwf	touchScreenController@i& (0+255),b
  4743  002D18                     l9546:
  4744                           
  4745                           ; BSR set to: 0
  4746                           ;stateMachine/touchScreenSM.c: 83:             {;stateMachine/touchScreenSM.c: 84:      
      +                                     if (theXF.timerList[i].ev == evTimer30)
  4747  002D18  51A7               	movf	touchScreenController@i& (0+255),w,b
  4748  002D1A  0D03               	mullw	3
  4749  002D1C  50F3               	movf	243,w,c
  4750  002D1E  0FB2               	addlw	low (_theXF+2)
  4751  002D20  6ED9               	movwf	fsr2l,c
  4752  002D22  6ADA               	clrf	fsr2h,c
  4753  002D24  0E03               	movlw	3
  4754  002D26  18DE               	xorwf	postinc2,w,c
  4755  002D28  A4D8               	btfss	status,2,c
  4756  002D2A  D005               	goto	l9550
  4757                           
  4758                           ; BSR set to: 0
  4759                           ;stateMachine/touchScreenSM.c: 85:                 {;stateMachine/touchScreenSM.c: 86:  
      +                                             XF_unscheduleTimer(i, 0);
  4760  002D2C  0E00               	movlw	0
  4761  002D2E  6E13               	movwf	XF_unscheduleTimer@inISR^0,c
  4762  002D30  51A7               	movf	touchScreenController@i& (0+255),w,b
  4763  002D32  ECE1  F02A         	call	_XF_unscheduleTimer
  4764  002D36                     l9550:
  4765                           
  4766                           ;stateMachine/touchScreenSM.c: 88:             }
  4767  002D36  0100               	movlb	0	; () banked
  4768  002D38  4BA7               	infsnz	touchScreenController@i& (0+255),f,b
  4769  002D3A  2BA8               	incf	(touchScreenController@i+1)& (0+255),f,b
  4770                           
  4771                           ; BSR set to: 0
  4772  002D3C  BFA8               	btfsc	(touchScreenController@i+1)& (0+255),7,b
  4773  002D3E  D7EC               	goto	l9546
  4774  002D40  51A8               	movf	(touchScreenController@i+1)& (0+255),w,b
  4775  002D42  E104               	bnz	u7310
  4776  002D44  0E08               	movlw	8
  4777  002D46  5DA7               	subwf	touchScreenController@i& (0+255),w,b
  4778  002D48  A0D8               	btfss	status,0,c
  4779  002D4A  D7E6               	goto	l9546
  4780  002D4C                     u7310:
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;stateMachine/touchScreenSM.c: 92:             INT1IE=0;
  4784  002D4C  96F0               	bcf	4080,3,c	;volatile
  4785                           
  4786                           ; BSR set to: 0
  4787                           ;stateMachine/touchScreenSM.c: 93:             configMeasure(0);
  4788  002D4E  0E00               	movlw	0
  4789  002D50  ECA7  F02A         	call	_configMeasure
  4790  002D54                     l544:
  4791  002D54  B2C2               	btfsc	194,1,c	;volatile
  4792  002D56  D7FE               	goto	l544
  4793                           
  4794                           ;stateMachine/touchScreenSM.c: 95:             uint16_t valueX;;stateMachine/touchScreen
      +                          SM.c: 96:             valueX=(ADRESH<<8)+ADRESL;
  4795  002D58  50C4               	movf	196,w,c	;volatile
  4796  002D5A  0100               	movlb	0	; () banked
  4797  002D5C  6F8E               	movwf	(??_touchScreenController+1)& (0+255),b
  4798  002D5E  6B8D               	clrf	??_touchScreenController& (0+255),b
  4799  002D60  50C3               	movf	195,w,c	;volatile
  4800  002D62  258D               	addwf	??_touchScreenController& (0+255),w,b
  4801  002D64  6FAB               	movwf	touchScreenController@valueX& (0+255),b
  4802  002D66  0E00               	movlw	0
  4803  002D68  218E               	addwfc	(??_touchScreenController+1)& (0+255),w,b
  4804  002D6A  6FAC               	movwf	(touchScreenController@valueX+1)& (0+255),b
  4805                           
  4806                           ;stateMachine/touchScreenSM.c: 97:             if(valueX<=120)
  4807  002D6C  51AC               	movf	(touchScreenController@valueX+1)& (0+255),w,b
  4808  002D6E  E108               	bnz	l9560
  4809  002D70  0E79               	movlw	121
  4810  002D72  5DAB               	subwf	touchScreenController@valueX& (0+255),w,b
  4811  002D74  B0D8               	btfsc	status,0,c
  4812  002D76  D004               	goto	l9560
  4813                           
  4814                           ; BSR set to: 0
  4815                           ;stateMachine/touchScreenSM.c: 98:             {;stateMachine/touchScreenSM.c: 99:      
      +                                     valueX=120;
  4816  002D78  0E00               	movlw	0
  4817  002D7A  6FAC               	movwf	(touchScreenController@valueX+1)& (0+255),b
  4818  002D7C  0E78               	movlw	120
  4819  002D7E  6FAB               	movwf	touchScreenController@valueX& (0+255),b
  4820  002D80                     l9560:
  4821                           
  4822                           ; BSR set to: 0
  4823                           ;stateMachine/touchScreenSM.c: 101:             valueX=(valueX-120)/2.35;
  4824  002D80  0E66               	movlw	102
  4825  002D82  6E24               	movwf	___fldiv@a^0,c
  4826  002D84  0E66               	movlw	102
  4827  002D86  6E25               	movwf	(___fldiv@a+1)^0,c
  4828  002D88  0E16               	movlw	22
  4829  002D8A  6E26               	movwf	(___fldiv@a+2)^0,c
  4830  002D8C  0E40               	movlw	64
  4831  002D8E  6E27               	movwf	(___fldiv@a+3)^0,c
  4832  002D90  0E88               	movlw	136
  4833  002D92  6F8D               	movwf	??_touchScreenController& (0+255),b
  4834  002D94  0EFF               	movlw	255
  4835  002D96  6F8E               	movwf	(??_touchScreenController+1)& (0+255),b
  4836  002D98  C0AB  F08F         	movff	touchScreenController@valueX,??_touchScreenController+2
  4837  002D9C  C0AC  F090         	movff	touchScreenController@valueX+1,??_touchScreenController+3
  4838  002DA0  518D               	movf	??_touchScreenController& (0+255),w,b
  4839  002DA2  278F               	addwf	(??_touchScreenController+2)& (0+255),f,b
  4840  002DA4  518E               	movf	(??_touchScreenController+1)& (0+255),w,b
  4841  002DA6  2390               	addwfc	(??_touchScreenController+3)& (0+255),f,b
  4842  002DA8  C08F  F012         	movff	??_touchScreenController+2,___xxtofl@val
  4843  002DAC  C090  F013         	movff	??_touchScreenController+3,___xxtofl@val+1
  4844  002DB0  6A14               	clrf	(___xxtofl@val+2)^0,c
  4845  002DB2  6A15               	clrf	(___xxtofl@val+3)^0,c
  4846  002DB4  0E00               	movlw	0
  4847  002DB6  ECC5  F01B         	call	___xxtofl
  4848  002DBA  C012  F020         	movff	?___xxtofl,___fldiv@b
  4849  002DBE  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  4850  002DC2  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  4851  002DC6  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  4852  002DCA  EC35  F015         	call	___fldiv	;wreg free
  4853  002DCE  C020  F039         	movff	?___fldiv,___fltol@f1
  4854  002DD2  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  4855  002DD6  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  4856  002DDA  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  4857  002DDE  EC12  F023         	call	___fltol	;wreg free
  4858  002DE2  C039  F0AB         	movff	?___fltol,touchScreenController@valueX
  4859  002DE6  C03A  F0AC         	movff	?___fltol+1,touchScreenController@valueX+1
  4860                           
  4861                           ;stateMachine/touchScreenSM.c: 102:             valueX=240 -valueX;
  4862  002DEA  0100               	movlb	0	; () banked
  4863  002DEC  51AB               	movf	touchScreenController@valueX& (0+255),w,b
  4864  002DEE  08F0               	sublw	240
  4865  002DF0  6FAB               	movwf	touchScreenController@valueX& (0+255),b
  4866  002DF2  51AC               	movf	(touchScreenController@valueX+1)& (0+255),w,b
  4867  002DF4  A0D8               	btfss	status,0,c
  4868  002DF6  2AE8               	incf	wreg,f,c
  4869  002DF8  0800               	sublw	0
  4870  002DFA  6FAC               	movwf	(touchScreenController@valueX+1)& (0+255),b
  4871                           
  4872                           ; BSR set to: 0
  4873                           ;stateMachine/touchScreenSM.c: 104:             configMeasure(1);
  4874  002DFC  0E01               	movlw	1
  4875  002DFE  ECA7  F02A         	call	_configMeasure
  4876  002E02                     l548:
  4877  002E02  B2C2               	btfsc	194,1,c	;volatile
  4878  002E04  D7FE               	goto	l548
  4879                           
  4880                           ;stateMachine/touchScreenSM.c: 106:             uint16_t valueY;;stateMachine/touchScree
      +                          nSM.c: 107:             valueY=(ADRESH<<8)+ADRESL;
  4881  002E06  50C4               	movf	196,w,c	;volatile
  4882  002E08  0100               	movlb	0	; () banked
  4883  002E0A  6F8E               	movwf	(??_touchScreenController+1)& (0+255),b
  4884  002E0C  6B8D               	clrf	??_touchScreenController& (0+255),b
  4885  002E0E  50C3               	movf	195,w,c	;volatile
  4886  002E10  258D               	addwf	??_touchScreenController& (0+255),w,b
  4887  002E12  6FA9               	movwf	touchScreenController@valueY& (0+255),b
  4888  002E14  0E00               	movlw	0
  4889  002E16  218E               	addwfc	(??_touchScreenController+1)& (0+255),w,b
  4890  002E18  6FAA               	movwf	(touchScreenController@valueY+1)& (0+255),b
  4891                           
  4892                           ;stateMachine/touchScreenSM.c: 108:             if(valueY<=105)
  4893  002E1A  51AA               	movf	(touchScreenController@valueY+1)& (0+255),w,b
  4894  002E1C  E108               	bnz	l9570
  4895  002E1E  0E6A               	movlw	106
  4896  002E20  5DA9               	subwf	touchScreenController@valueY& (0+255),w,b
  4897  002E22  B0D8               	btfsc	status,0,c
  4898  002E24  D004               	goto	l9570
  4899                           
  4900                           ; BSR set to: 0
  4901                           ;stateMachine/touchScreenSM.c: 109:             {;stateMachine/touchScreenSM.c: 110:    
      +                                       valueY=105;
  4902  002E26  0E00               	movlw	0
  4903  002E28  6FAA               	movwf	(touchScreenController@valueY+1)& (0+255),b
  4904  002E2A  0E69               	movlw	105
  4905  002E2C  6FA9               	movwf	touchScreenController@valueY& (0+255),b
  4906  002E2E                     l9570:
  4907                           
  4908                           ; BSR set to: 0
  4909                           ;stateMachine/touchScreenSM.c: 112:             valueY=(valueY-105)/2;
  4910  002E2E  0E97               	movlw	151
  4911  002E30  6F8D               	movwf	??_touchScreenController& (0+255),b
  4912  002E32  0EFF               	movlw	255
  4913  002E34  6F8E               	movwf	(??_touchScreenController+1)& (0+255),b
  4914  002E36  C0A9  F08F         	movff	touchScreenController@valueY,??_touchScreenController+2
  4915  002E3A  C0AA  F090         	movff	touchScreenController@valueY+1,??_touchScreenController+3
  4916  002E3E  518D               	movf	??_touchScreenController& (0+255),w,b
  4917  002E40  278F               	addwf	(??_touchScreenController+2)& (0+255),f,b
  4918  002E42  518E               	movf	(??_touchScreenController+1)& (0+255),w,b
  4919  002E44  2390               	addwfc	(??_touchScreenController+3)& (0+255),f,b
  4920  002E46  90D8               	bcf	status,0,c
  4921  002E48  3190               	rrcf	(??_touchScreenController+3)& (0+255),w,b
  4922  002E4A  6F91               	movwf	(??_touchScreenController+4)& (0+255),b
  4923  002E4C  318F               	rrcf	(??_touchScreenController+2)& (0+255),w,b
  4924  002E4E  6FA9               	movwf	touchScreenController@valueY& (0+255),b
  4925  002E50  C091  F0AA         	movff	??_touchScreenController+4,touchScreenController@valueY+1
  4926                           
  4927                           ; BSR set to: 0
  4928                           ;stateMachine/touchScreenSM.c: 113:             XF_scheduleTimer(9,evTimerPos,0);
  4929  002E54  0E00               	movlw	0
  4930  002E56  6E14               	movwf	(XF_scheduleTimer@tm+1)^0,c
  4931  002E58  0E09               	movlw	9
  4932  002E5A  6E13               	movwf	XF_scheduleTimer@tm^0,c
  4933  002E5C  0E04               	movlw	4
  4934  002E5E  6E15               	movwf	XF_scheduleTimer@ev^0,c
  4935  002E60  0E00               	movlw	0
  4936  002E62  6E16               	movwf	XF_scheduleTimer@inISR^0,c
  4937  002E64  EC5A  F029         	call	_XF_scheduleTimer	;wreg free
  4938                           
  4939                           ;stateMachine/touchScreenSM.c: 115:             ADCON0=0b00101000;
  4940  002E68  0E28               	movlw	40
  4941  002E6A  6EC2               	movwf	194,c	;volatile
  4942                           
  4943                           ;stateMachine/touchScreenSM.c: 116:             configTouch();
  4944  002E6C  ECF5  F02B         	call	_configTouch	;wreg free
  4945                           
  4946                           ;stateMachine/touchScreenSM.c: 118:             if(PORTBbits.RB1 == 0)
  4947  002E70  B281               	btfsc	129,1,c	;volatile
  4948  002E72  0012               	return	
  4949                           
  4950                           ;stateMachine/touchScreenSM.c: 119:             {;stateMachine/touchScreenSM.c: 120:    
      +                                       sprintf(s,"X: %d",valueX);
  4951  002E74  0E93               	movlw	low touchScreenController@s
  4952  002E76  0100               	movlb	0	; () banked
  4953  002E78  6F7E               	movwf	sprintf@s& (0+255),b
  4954  002E7A  6B7F               	clrf	(sprintf@s+1)& (0+255),b
  4955  002E7C  0EEA               	movlw	low STR_15
  4956  002E7E  6F80               	movwf	sprintf@fmt& (0+255),b
  4957  002E80  0E7F               	movlw	high STR_15
  4958  002E82  6F81               	movwf	(sprintf@fmt+1)& (0+255),b
  4959  002E84  C0AB  F082         	movff	touchScreenController@valueX,?_sprintf+4
  4960  002E88  C0AC  F083         	movff	touchScreenController@valueX+1,?_sprintf+5
  4961  002E8C  EC65  F02A         	call	_sprintf	;wreg free
  4962                           
  4963                           ; BSR set to: 0
  4964                           ;stateMachine/touchScreenSM.c: 121:                 LCD_DrawText(s,&arialNarrow_12ptFont
      +                          Info,A_RIGHT,200,200,0b0000000000000000,0b1111111111111111);
  4965  002E90  0E93               	movlw	low touchScreenController@s
  4966  002E92  6E20               	movwf	LCD_DrawText@msg^0,c
  4967  002E94  6A21               	clrf	(LCD_DrawText@msg+1)^0,c
  4968  002E96  0E7B               	movlw	low _arialNarrow_12ptFontInfo
  4969  002E98  6E22               	movwf	LCD_DrawText@font^0,c
  4970  002E9A  0E7F               	movlw	high _arialNarrow_12ptFontInfo
  4971  002E9C  6E23               	movwf	(LCD_DrawText@font+1)^0,c
  4972  002E9E  0E01               	movlw	1
  4973  002EA0  6E24               	movwf	LCD_DrawText@align^0,c
  4974  002EA2  0E00               	movlw	0
  4975  002EA4  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
  4976  002EA6  0EC8               	movlw	200
  4977  002EA8  6E25               	movwf	LCD_DrawText@posX^0,c
  4978  002EAA  0E00               	movlw	0
  4979  002EAC  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
  4980  002EAE  0EC8               	movlw	200
  4981  002EB0  6E27               	movwf	LCD_DrawText@posY^0,c
  4982  002EB2  0E00               	movlw	0
  4983  002EB4  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
  4984  002EB6  0E00               	movlw	0
  4985  002EB8  6E29               	movwf	LCD_DrawText@color^0,c
  4986  002EBA  0EFF               	movlw	255
  4987  002EBC  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
  4988  002EBE  682B               	setf	LCD_DrawText@bg_color^0,c
  4989  002EC0  EC83  F00B         	call	_LCD_DrawText	;wreg free
  4990                           
  4991                           ;stateMachine/touchScreenSM.c: 122:                 GameParameters_setX(g,valueX);
  4992  002EC4  C08B  F012         	movff	touchScreenController@g,GameParameters_setX@s
  4993  002EC8  C08C  F013         	movff	touchScreenController@g+1,GameParameters_setX@s+1
  4994  002ECC  C0AB  F014         	movff	touchScreenController@valueX,GameParameters_setX@value
  4995  002ED0  C0AC  F015         	movff	touchScreenController@valueX+1,GameParameters_setX@value+1
  4996  002ED4  EC46  F02C         	call	_GameParameters_setX	;wreg free
  4997                           
  4998                           ;stateMachine/touchScreenSM.c: 123:                 sprintf(s,"Y: %d",valueY);
  4999  002ED8  0E93               	movlw	low touchScreenController@s
  5000  002EDA  0100               	movlb	0	; () banked
  5001  002EDC  6F7E               	movwf	sprintf@s& (0+255),b
  5002  002EDE  6B7F               	clrf	(sprintf@s+1)& (0+255),b
  5003  002EE0  0EF0               	movlw	low STR_16
  5004  002EE2  6F80               	movwf	sprintf@fmt& (0+255),b
  5005  002EE4  0E7F               	movlw	high STR_16
  5006  002EE6  6F81               	movwf	(sprintf@fmt+1)& (0+255),b
  5007  002EE8  C0A9  F082         	movff	touchScreenController@valueY,?_sprintf+4
  5008  002EEC  C0AA  F083         	movff	touchScreenController@valueY+1,?_sprintf+5
  5009  002EF0  EC65  F02A         	call	_sprintf	;wreg free
  5010                           
  5011                           ; BSR set to: 0
  5012                           ;stateMachine/touchScreenSM.c: 124:                 LCD_DrawText(s,&arialNarrow_12ptFont
      +                          Info,A_RIGHT,200,250,0b0000000000000000,0b1111111111111111);
  5013  002EF4  0E93               	movlw	low touchScreenController@s
  5014  002EF6  6E20               	movwf	LCD_DrawText@msg^0,c
  5015  002EF8  6A21               	clrf	(LCD_DrawText@msg+1)^0,c
  5016  002EFA  0E7B               	movlw	low _arialNarrow_12ptFontInfo
  5017  002EFC  6E22               	movwf	LCD_DrawText@font^0,c
  5018  002EFE  0E7F               	movlw	high _arialNarrow_12ptFontInfo
  5019  002F00  6E23               	movwf	(LCD_DrawText@font+1)^0,c
  5020  002F02  0E01               	movlw	1
  5021  002F04  6E24               	movwf	LCD_DrawText@align^0,c
  5022  002F06  0E00               	movlw	0
  5023  002F08  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
  5024  002F0A  0EC8               	movlw	200
  5025  002F0C  6E25               	movwf	LCD_DrawText@posX^0,c
  5026  002F0E  0E00               	movlw	0
  5027  002F10  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
  5028  002F12  0EFA               	movlw	250
  5029  002F14  6E27               	movwf	LCD_DrawText@posY^0,c
  5030  002F16  0E00               	movlw	0
  5031  002F18  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
  5032  002F1A  0E00               	movlw	0
  5033  002F1C  6E29               	movwf	LCD_DrawText@color^0,c
  5034  002F1E  0EFF               	movlw	255
  5035  002F20  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
  5036  002F22  682B               	setf	LCD_DrawText@bg_color^0,c
  5037  002F24  EC83  F00B         	call	_LCD_DrawText	;wreg free
  5038                           
  5039                           ;stateMachine/touchScreenSM.c: 125:                 GameParameters_setY(g,valueY);
  5040  002F28  C08B  F012         	movff	touchScreenController@g,GameParameters_setY@s
  5041  002F2C  C08C  F013         	movff	touchScreenController@g+1,GameParameters_setY@s+1
  5042  002F30  C0A9  F014         	movff	touchScreenController@valueY,GameParameters_setY@value
  5043  002F34  C0AA  F015         	movff	touchScreenController@valueY+1,GameParameters_setY@value+1
  5044  002F38  EC3B  F02C         	call	_GameParameters_setY	;wreg free
  5045  002F3C  0012               	return	
  5046  002F3E                     l9592:
  5047  002F3E  0100               	movlb	0	; () banked
  5048  002F40  51D9               	movf	_touchScreenState& (0+255),w,b
  5049  002F42  6F8D               	movwf	??_touchScreenController& (0+255),b
  5050  002F44  6B8E               	clrf	(??_touchScreenController+1)& (0+255),b
  5051                           
  5052                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5053                           ; Switch size 1, requested type "simple"
  5054                           ; Number of cases is 1, Range of values is 0 to 0
  5055                           ; switch strategies available:
  5056                           ; Name         Instructions Cycles
  5057                           ; simple_byte            4     3 (average)
  5058                           ;	Chosen strategy is simple_byte
  5059  002F46  518E               	movf	(??_touchScreenController+1)& (0+255),w,b
  5060  002F48  0A00               	xorlw	0	; case 0
  5061  002F4A  A4D8               	btfss	status,2,c
  5062  002F4C  0012               	return	
  5063                           
  5064                           ; BSR set to: 0
  5065                           ; Switch size 1, requested type "simple"
  5066                           ; Number of cases is 2, Range of values is 0 to 1
  5067                           ; switch strategies available:
  5068                           ; Name         Instructions Cycles
  5069                           ; simple_byte            7     4 (average)
  5070                           ;	Chosen strategy is simple_byte
  5071  002F4E  518D               	movf	??_touchScreenController& (0+255),w,b
  5072  002F50  0A00               	xorlw	0	; case 0
  5073  002F52  B4D8               	btfsc	status,2,c
  5074  002F54  D6CF               	goto	l538
  5075  002F56  0A01               	xorlw	1	; case 1
  5076  002F58  A4D8               	btfss	status,2,c
  5077  002F5A  0012               	return	
  5078  002F5C  D6D9               	goto	l9540
  5079  002F5E                     __end_of_touchScreenController:
  5080                           	callstack 0
  5081                           
  5082 ;; *************** function _configMeasure *****************
  5083 ;; Defined at:
  5084 ;;		line 159 in file "stateMachine/touchScreenSM.c"
  5085 ;; Parameters:    Size  Location     Type
  5086 ;;  channel         1    wreg     _Bool 
  5087 ;; Auto vars:     Size  Location     Type
  5088 ;;  channel         1   17[COMRAM] _Bool 
  5089 ;; Return value:  Size  Location     Type
  5090 ;;                  1    wreg      void 
  5091 ;; Registers used:
  5092 ;;		wreg, status,2, status,0
  5093 ;; Tracked objects:
  5094 ;;		On entry : 3F/0
  5095 ;;		On exit  : 0/0
  5096 ;;		Unchanged: 0/0
  5097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5098 ;;      Params:         0       0       0       0       0       0       0
  5099 ;;      Locals:         1       0       0       0       0       0       0
  5100 ;;      Temps:          0       0       0       0       0       0       0
  5101 ;;      Totals:         1       0       0       0       0       0       0
  5102 ;;Total ram usage:        1 bytes
  5103 ;; Hardware stack levels used: 1
  5104 ;; Hardware stack levels required when called: 4
  5105 ;; This function calls:
  5106 ;;		Nothing
  5107 ;; This function is called by:
  5108 ;;		_touchScreenController
  5109 ;; This function uses a non-reentrant model
  5110 ;;
  5111                           
  5112                           	psect	text12
  5113  00554E                     __ptext12:
  5114                           	callstack 0
  5115  00554E                     _configMeasure:
  5116                           	callstack 23
  5117                           
  5118                           ;incstack = 0
  5119                           ;configMeasure@channel stored from wreg
  5120  00554E  6E12               	movwf	configMeasure@channel^0,c
  5121                           
  5122                           ;stateMachine/touchScreenSM.c: 159: void configMeasure(_Bool channel);stateMachine/touch
      +                          ScreenSM.c: 160: {;stateMachine/touchScreenSM.c: 161:     if(channel==0)
  5123  005550  5012               	movf	configMeasure@channel^0,w,c
  5124  005552  A4D8               	btfss	status,2,c
  5125  005554  D00B               	goto	l9178
  5126                           
  5127                           ;stateMachine/touchScreenSM.c: 162:     {;stateMachine/touchScreenSM.c: 163:         ANS
      +                          B1=0;
  5128  005556  010F               	movlb	15	; () banked
  5129  005558  9339               	bcf	57,1,b	;volatile
  5130                           
  5131                           ;stateMachine/touchScreenSM.c: 164:         TRISB1=0;
  5132  00555A  9293               	bcf	3987,1,c	;volatile
  5133                           
  5134                           ;stateMachine/touchScreenSM.c: 165:         LATB1=0;
  5135  00555C  928A               	bcf	3978,1,c	;volatile
  5136                           
  5137                           ;stateMachine/touchScreenSM.c: 166:         TRISB3=0;
  5138  00555E  9693               	bcf	3987,3,c	;volatile
  5139                           
  5140                           ;stateMachine/touchScreenSM.c: 167:         LATB3=1;
  5141  005560  868A               	bsf	3978,3,c	;volatile
  5142                           
  5143                           ;stateMachine/touchScreenSM.c: 168:         TRISB4=1;
  5144  005562  8893               	bsf	3987,4,c	;volatile
  5145                           
  5146                           ;stateMachine/touchScreenSM.c: 169:         TRISB2=1;
  5147  005564  8493               	bsf	3987,2,c	;volatile
  5148                           
  5149                           ;stateMachine/touchScreenSM.c: 170:         ANSB2=1;
  5150  005566  8539               	bsf	57,2,b	;volatile
  5151                           
  5152                           ; BSR set to: 15
  5153                           ;stateMachine/touchScreenSM.c: 171:         ADCON0=0b00100011;
  5154  005568  0E23               	movlw	35
  5155  00556A  6EC2               	movwf	194,c	;volatile
  5156  00556C                     l9178:
  5157                           
  5158                           ;stateMachine/touchScreenSM.c: 173:     if(channel==1)
  5159  00556C  0412               	decf	configMeasure@channel^0,w,c
  5160  00556E  A4D8               	btfss	status,2,c
  5161  005570  0012               	return	
  5162                           
  5163                           ;stateMachine/touchScreenSM.c: 174:     {;stateMachine/touchScreenSM.c: 175:         ANS
      +                          B2=0;
  5164  005572  010F               	movlb	15	; () banked
  5165  005574  9539               	bcf	57,2,b	;volatile
  5166                           
  5167                           ;stateMachine/touchScreenSM.c: 176:         TRISB2=0;
  5168  005576  9493               	bcf	3987,2,c	;volatile
  5169                           
  5170                           ;stateMachine/touchScreenSM.c: 177:         LATB2=0;
  5171  005578  948A               	bcf	3978,2,c	;volatile
  5172                           
  5173                           ;stateMachine/touchScreenSM.c: 178:         TRISB4=0;
  5174  00557A  9893               	bcf	3987,4,c	;volatile
  5175                           
  5176                           ;stateMachine/touchScreenSM.c: 179:         LATB4=1;
  5177  00557C  888A               	bsf	3978,4,c	;volatile
  5178                           
  5179                           ;stateMachine/touchScreenSM.c: 180:         TRISB3=1;
  5180  00557E  8693               	bsf	3987,3,c	;volatile
  5181                           
  5182                           ;stateMachine/touchScreenSM.c: 181:         TRISB1=1;
  5183  005580  8293               	bsf	3987,1,c	;volatile
  5184                           
  5185                           ;stateMachine/touchScreenSM.c: 182:         ANSB1=1;
  5186  005582  8339               	bsf	57,1,b	;volatile
  5187                           
  5188                           ; BSR set to: 15
  5189                           ;stateMachine/touchScreenSM.c: 183:         ADCON0=0b00101011;
  5190  005584  0E2B               	movlw	43
  5191  005586  6EC2               	movwf	194,c	;volatile
  5192  005588  0012               	return		;funcret
  5193  00558A                     __end_of_configMeasure:
  5194                           	callstack 0
  5195                           
  5196 ;; *************** function ___xxtofl *****************
  5197 ;; Defined at:
  5198 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\xxtofl.c"
  5199 ;; Parameters:    Size  Location     Type
  5200 ;;  sign            1    wreg     unsigned char 
  5201 ;;  val             4   17[COMRAM] long 
  5202 ;; Auto vars:     Size  Location     Type
  5203 ;;  sign            1   25[COMRAM] unsigned char 
  5204 ;;  arg             4   27[COMRAM] unsigned long 
  5205 ;;  exp             1   26[COMRAM] unsigned char 
  5206 ;; Return value:  Size  Location     Type
  5207 ;;                  4   17[COMRAM] unsigned char 
  5208 ;; Registers used:
  5209 ;;		wreg, status,2, status,0
  5210 ;; Tracked objects:
  5211 ;;		On entry : 3F/0
  5212 ;;		On exit  : 0/0
  5213 ;;		Unchanged: 0/0
  5214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5215 ;;      Params:         4       0       0       0       0       0       0
  5216 ;;      Locals:         6       0       0       0       0       0       0
  5217 ;;      Temps:          4       0       0       0       0       0       0
  5218 ;;      Totals:        14       0       0       0       0       0       0
  5219 ;;Total ram usage:       14 bytes
  5220 ;; Hardware stack levels used: 1
  5221 ;; Hardware stack levels required when called: 4
  5222 ;; This function calls:
  5223 ;;		Nothing
  5224 ;; This function is called by:
  5225 ;;		_touchScreenController
  5226 ;; This function uses a non-reentrant model
  5227 ;;
  5228                           
  5229                           	psect	text13
  5230  00378A                     __ptext13:
  5231                           	callstack 0
  5232  00378A                     ___xxtofl:
  5233                           	callstack 23
  5234                           
  5235                           ;incstack = 0
  5236                           ;___xxtofl@sign stored from wreg
  5237  00378A  6E1A               	movwf	___xxtofl@sign^0,c
  5238  00378C  501A               	movf	___xxtofl@sign^0,w,c
  5239  00378E  A4D8               	btfss	status,2,c
  5240  003790  AE15               	btfss	(___xxtofl@val+3)^0,7,c
  5241  003792  D01A               	goto	l1529
  5242  003794  C012  F016         	movff	___xxtofl@val,??___xxtofl
  5243  003798  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  5244  00379C  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  5245  0037A0  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  5246  0037A4  1E16               	comf	??___xxtofl^0,f,c
  5247  0037A6  1E17               	comf	(??___xxtofl+1)^0,f,c
  5248  0037A8  1E18               	comf	(??___xxtofl+2)^0,f,c
  5249  0037AA  1E19               	comf	(??___xxtofl+3)^0,f,c
  5250  0037AC  2A16               	incf	??___xxtofl^0,f,c
  5251  0037AE  0E00               	movlw	0
  5252  0037B0  2217               	addwfc	(??___xxtofl+1)^0,f,c
  5253  0037B2  2218               	addwfc	(??___xxtofl+2)^0,f,c
  5254  0037B4  2219               	addwfc	(??___xxtofl+3)^0,f,c
  5255  0037B6  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  5256  0037BA  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  5257  0037BE  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  5258  0037C2  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  5259  0037C6  D008               	goto	l9458
  5260  0037C8                     l1529:
  5261  0037C8  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  5262  0037CC  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  5263  0037D0  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  5264  0037D4  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  5265  0037D8                     l9458:
  5266  0037D8  5012               	movf	___xxtofl@val^0,w,c
  5267  0037DA  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  5268  0037DC  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  5269  0037DE  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  5270  0037E0  A4D8               	btfss	status,2,c
  5271  0037E2  D009               	goto	l9464
  5272  0037E4  0E00               	movlw	0
  5273  0037E6  6E12               	movwf	?___xxtofl^0,c
  5274  0037E8  0E00               	movlw	0
  5275  0037EA  6E13               	movwf	(?___xxtofl+1)^0,c
  5276  0037EC  0E00               	movlw	0
  5277  0037EE  6E14               	movwf	(?___xxtofl+2)^0,c
  5278  0037F0  0E00               	movlw	0
  5279  0037F2  6E15               	movwf	(?___xxtofl+3)^0,c
  5280  0037F4  0012               	return	
  5281  0037F6                     l9464:
  5282  0037F6  0E96               	movlw	150
  5283  0037F8  6E1B               	movwf	___xxtofl@exp^0,c
  5284  0037FA  D006               	goto	l9468
  5285  0037FC                     l9466:
  5286  0037FC  2A1B               	incf	___xxtofl@exp^0,f,c
  5287  0037FE  90D8               	bcf	status,0,c
  5288  003800  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  5289  003802  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  5290  003804  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  5291  003806  321C               	rrcf	___xxtofl@arg^0,f,c
  5292  003808                     l9468:
  5293  003808  0E00               	movlw	0
  5294  00380A  141C               	andwf	___xxtofl@arg^0,w,c
  5295  00380C  6E16               	movwf	??___xxtofl^0,c
  5296  00380E  0E00               	movlw	0
  5297  003810  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  5298  003812  6E17               	movwf	(??___xxtofl+1)^0,c
  5299  003814  0E00               	movlw	0
  5300  003816  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  5301  003818  6E18               	movwf	(??___xxtofl+2)^0,c
  5302  00381A  0EFE               	movlw	254
  5303  00381C  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  5304  00381E  6E19               	movwf	(??___xxtofl+3)^0,c
  5305  003820  5016               	movf	??___xxtofl^0,w,c
  5306  003822  1017               	iorwf	(??___xxtofl+1)^0,w,c
  5307  003824  1018               	iorwf	(??___xxtofl+2)^0,w,c
  5308  003826  1019               	iorwf	(??___xxtofl+3)^0,w,c
  5309  003828  B4D8               	btfsc	status,2,c
  5310  00382A  D00D               	goto	l1536
  5311  00382C  D7E7               	goto	l9466
  5312  00382E                     l9470:
  5313  00382E  2A1B               	incf	___xxtofl@exp^0,f,c
  5314  003830  0E01               	movlw	1
  5315  003832  261C               	addwf	___xxtofl@arg^0,f,c
  5316  003834  0E00               	movlw	0
  5317  003836  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  5318  003838  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  5319  00383A  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  5320  00383C  90D8               	bcf	status,0,c
  5321  00383E  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  5322  003840  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  5323  003842  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  5324  003844  321C               	rrcf	___xxtofl@arg^0,f,c
  5325  003846                     l1536:
  5326  003846  0E00               	movlw	0
  5327  003848  141C               	andwf	___xxtofl@arg^0,w,c
  5328  00384A  6E16               	movwf	??___xxtofl^0,c
  5329  00384C  0E00               	movlw	0
  5330  00384E  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  5331  003850  6E17               	movwf	(??___xxtofl+1)^0,c
  5332  003852  0E00               	movlw	0
  5333  003854  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  5334  003856  6E18               	movwf	(??___xxtofl+2)^0,c
  5335  003858  0EFF               	movlw	255
  5336  00385A  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  5337  00385C  6E19               	movwf	(??___xxtofl+3)^0,c
  5338  00385E  5016               	movf	??___xxtofl^0,w,c
  5339  003860  1017               	iorwf	(??___xxtofl+1)^0,w,c
  5340  003862  1018               	iorwf	(??___xxtofl+2)^0,w,c
  5341  003864  1019               	iorwf	(??___xxtofl+3)^0,w,c
  5342  003866  B4D8               	btfsc	status,2,c
  5343  003868  D007               	goto	l9478
  5344  00386A  D7E1               	goto	l9470
  5345  00386C                     l9476:
  5346  00386C  061B               	decf	___xxtofl@exp^0,f,c
  5347  00386E  90D8               	bcf	status,0,c
  5348  003870  361C               	rlcf	___xxtofl@arg^0,f,c
  5349  003872  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  5350  003874  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  5351  003876  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  5352  003878                     l9478:
  5353  003878  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  5354  00387A  D003               	goto	u7260
  5355  00387C  0E02               	movlw	2
  5356  00387E  601B               	cpfslt	___xxtofl@exp^0,c
  5357  003880  D7F5               	goto	l9476
  5358  003882                     u7260:
  5359  003882  A01B               	btfss	___xxtofl@exp^0,0,c
  5360  003884  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  5361  003886  90D8               	bcf	status,0,c
  5362  003888  321B               	rrcf	___xxtofl@exp^0,f,c
  5363  00388A  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  5364  00388E  6A17               	clrf	(??___xxtofl+1)^0,c
  5365  003890  6A18               	clrf	(??___xxtofl+2)^0,c
  5366  003892  6A19               	clrf	(??___xxtofl+3)^0,c
  5367  003894  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  5368  003898  6A18               	clrf	(??___xxtofl+2)^0,c
  5369  00389A  6A17               	clrf	(??___xxtofl+1)^0,c
  5370  00389C  6A16               	clrf	??___xxtofl^0,c
  5371  00389E  5016               	movf	??___xxtofl^0,w,c
  5372  0038A0  121C               	iorwf	___xxtofl@arg^0,f,c
  5373  0038A2  5017               	movf	(??___xxtofl+1)^0,w,c
  5374  0038A4  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  5375  0038A6  5018               	movf	(??___xxtofl+2)^0,w,c
  5376  0038A8  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  5377  0038AA  5019               	movf	(??___xxtofl+3)^0,w,c
  5378  0038AC  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  5379  0038AE  501A               	movf	___xxtofl@sign^0,w,c
  5380  0038B0  A4D8               	btfss	status,2,c
  5381  0038B2  AE15               	btfss	(___xxtofl@val+3)^0,7,c
  5382  0038B4  D001               	goto	l9494
  5383  0038B6  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  5384  0038B8                     l9494:
  5385  0038B8  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  5386  0038BC  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  5387  0038C0  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  5388  0038C4  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  5389  0038C8  0012               	return		;funcret
  5390  0038CA                     __end_of___xxtofl:
  5391                           	callstack 0
  5392                           
  5393 ;; *************** function ___fltol *****************
  5394 ;; Defined at:
  5395 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\fltol.c"
  5396 ;; Parameters:    Size  Location     Type
  5397 ;;  f1              4   56[COMRAM] unsigned char 
  5398 ;; Auto vars:     Size  Location     Type
  5399 ;;  exp1            1   65[COMRAM] unsigned char 
  5400 ;;  sign1           1   64[COMRAM] unsigned char 
  5401 ;; Return value:  Size  Location     Type
  5402 ;;                  4   56[COMRAM] long 
  5403 ;; Registers used:
  5404 ;;		wreg, status,2, status,0
  5405 ;; Tracked objects:
  5406 ;;		On entry : 0/0
  5407 ;;		On exit  : 0/0
  5408 ;;		Unchanged: 0/0
  5409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5410 ;;      Params:         4       0       0       0       0       0       0
  5411 ;;      Locals:         2       0       0       0       0       0       0
  5412 ;;      Temps:          4       0       0       0       0       0       0
  5413 ;;      Totals:        10       0       0       0       0       0       0
  5414 ;;Total ram usage:       10 bytes
  5415 ;; Hardware stack levels used: 1
  5416 ;; Hardware stack levels required when called: 4
  5417 ;; This function calls:
  5418 ;;		Nothing
  5419 ;; This function is called by:
  5420 ;;		_touchScreenController
  5421 ;; This function uses a non-reentrant model
  5422 ;;
  5423                           
  5424                           	psect	text14
  5425  004624                     __ptext14:
  5426                           	callstack 0
  5427  004624                     ___fltol:
  5428                           	callstack 23
  5429                           
  5430                           ;incstack = 0
  5431  004624  343B               	rlcf	(___fltol@f1+2)^0,w,c
  5432  004626  343C               	rlcf	(___fltol@f1+3)^0,w,c
  5433  004628  6E42               	movwf	___fltol@exp1^0,c
  5434  00462A  5042               	movf	___fltol@exp1^0,w,c
  5435  00462C  A4D8               	btfss	status,2,c
  5436  00462E  D009               	goto	l9414
  5437  004630                     u7130:
  5438  004630  0E00               	movlw	0
  5439  004632  6E39               	movwf	?___fltol^0,c
  5440  004634  0E00               	movlw	0
  5441  004636  6E3A               	movwf	(?___fltol+1)^0,c
  5442  004638  0E00               	movlw	0
  5443  00463A  6E3B               	movwf	(?___fltol+2)^0,c
  5444  00463C  0E00               	movlw	0
  5445  00463E  6E3C               	movwf	(?___fltol+3)^0,c
  5446  004640  0012               	return	
  5447  004642                     l9414:
  5448  004642  C039  F03D         	movff	___fltol@f1,??___fltol
  5449  004646  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  5450  00464A  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  5451  00464E  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  5452  004652  0E20               	movlw	32
  5453  004654  D005               	goto	u7140
  5454  004656                     u7145:
  5455  004656  90D8               	bcf	status,0,c
  5456  004658  3240               	rrcf	(??___fltol+3)^0,f,c
  5457  00465A  323F               	rrcf	(??___fltol+2)^0,f,c
  5458  00465C  323E               	rrcf	(??___fltol+1)^0,f,c
  5459  00465E  323D               	rrcf	??___fltol^0,f,c
  5460  004660                     u7140:
  5461  004660  2EE8               	decfsz	wreg,f,c
  5462  004662  D7F9               	goto	u7145
  5463  004664  503D               	movf	??___fltol^0,w,c
  5464  004666  6E41               	movwf	___fltol@sign1^0,c
  5465  004668  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  5466  00466A  0EFF               	movlw	255
  5467  00466C  1639               	andwf	___fltol@f1^0,f,c
  5468  00466E  0EFF               	movlw	255
  5469  004670  163A               	andwf	(___fltol@f1+1)^0,f,c
  5470  004672  0EFF               	movlw	255
  5471  004674  163B               	andwf	(___fltol@f1+2)^0,f,c
  5472  004676  0E00               	movlw	0
  5473  004678  163C               	andwf	(___fltol@f1+3)^0,f,c
  5474  00467A  0E96               	movlw	150
  5475  00467C  5E42               	subwf	___fltol@exp1^0,f,c
  5476  00467E  AE42               	btfss	___fltol@exp1^0,7,c
  5477  004680  D00D               	goto	l9434
  5478  004682  5042               	movf	___fltol@exp1^0,w,c
  5479  004684  0A80               	xorlw	128
  5480  004686  0F97               	addlw	151
  5481  004688  A0D8               	btfss	status,0,c
  5482  00468A  D7D2               	goto	u7130
  5483  00468C                     l9430:
  5484  00468C  90D8               	bcf	status,0,c
  5485  00468E  323C               	rrcf	(___fltol@f1+3)^0,f,c
  5486  004690  323B               	rrcf	(___fltol@f1+2)^0,f,c
  5487  004692  323A               	rrcf	(___fltol@f1+1)^0,f,c
  5488  004694  3239               	rrcf	___fltol@f1^0,f,c
  5489  004696  3E42               	incfsz	___fltol@exp1^0,f,c
  5490  004698  D7F9               	goto	l9430
  5491  00469A  D00D               	goto	u7180
  5492  00469C                     l9434:
  5493  00469C  0E1F               	movlw	31
  5494  00469E  6442               	cpfsgt	___fltol@exp1^0,c
  5495  0046A0  D007               	goto	l9442
  5496  0046A2  D7C6               	goto	u7130
  5497  0046A4                     l9440:
  5498  0046A4  90D8               	bcf	status,0,c
  5499  0046A6  3639               	rlcf	___fltol@f1^0,f,c
  5500  0046A8  363A               	rlcf	(___fltol@f1+1)^0,f,c
  5501  0046AA  363B               	rlcf	(___fltol@f1+2)^0,f,c
  5502  0046AC  363C               	rlcf	(___fltol@f1+3)^0,f,c
  5503  0046AE  0642               	decf	___fltol@exp1^0,f,c
  5504  0046B0                     l9442:
  5505  0046B0  5042               	movf	___fltol@exp1^0,w,c
  5506  0046B2  A4D8               	btfss	status,2,c
  5507  0046B4  D7F7               	goto	l9440
  5508  0046B6                     u7180:
  5509  0046B6  5041               	movf	___fltol@sign1^0,w,c
  5510  0046B8  B4D8               	btfsc	status,2,c
  5511  0046BA  D008               	goto	l9448
  5512  0046BC  1E3C               	comf	(___fltol@f1+3)^0,f,c
  5513  0046BE  1E3B               	comf	(___fltol@f1+2)^0,f,c
  5514  0046C0  1E3A               	comf	(___fltol@f1+1)^0,f,c
  5515  0046C2  6C39               	negf	___fltol@f1^0,c
  5516  0046C4  0E00               	movlw	0
  5517  0046C6  223A               	addwfc	(___fltol@f1+1)^0,f,c
  5518  0046C8  223B               	addwfc	(___fltol@f1+2)^0,f,c
  5519  0046CA  223C               	addwfc	(___fltol@f1+3)^0,f,c
  5520  0046CC                     l9448:
  5521  0046CC  C039  F039         	movff	___fltol@f1,?___fltol
  5522  0046D0  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  5523  0046D4  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  5524  0046D8  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  5525  0046DC  0012               	return		;funcret
  5526  0046DE                     __end_of___fltol:
  5527                           	callstack 0
  5528                           
  5529 ;; *************** function ___fldiv *****************
  5530 ;; Defined at:
  5531 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\sprcdiv.c"
  5532 ;; Parameters:    Size  Location     Type
  5533 ;;  b               4   31[COMRAM] long 
  5534 ;;  a               4   35[COMRAM] long 
  5535 ;; Auto vars:     Size  Location     Type
  5536 ;;  grs             4   50[COMRAM] unsigned long 
  5537 ;;  rem             4   43[COMRAM] unsigned long 
  5538 ;;  new_exp         2   48[COMRAM] short 
  5539 ;;  aexp            1   55[COMRAM] unsigned char 
  5540 ;;  bexp            1   54[COMRAM] unsigned char 
  5541 ;;  sign            1   47[COMRAM] unsigned char 
  5542 ;; Return value:  Size  Location     Type
  5543 ;;                  4   31[COMRAM] unsigned char 
  5544 ;; Registers used:
  5545 ;;		wreg, status,2, status,0
  5546 ;; Tracked objects:
  5547 ;;		On entry : 0/0
  5548 ;;		On exit  : 0/0
  5549 ;;		Unchanged: 0/0
  5550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5551 ;;      Params:         8       0       0       0       0       0       0
  5552 ;;      Locals:        13       0       0       0       0       0       0
  5553 ;;      Temps:          4       0       0       0       0       0       0
  5554 ;;      Totals:        25       0       0       0       0       0       0
  5555 ;;Total ram usage:       25 bytes
  5556 ;; Hardware stack levels used: 1
  5557 ;; Hardware stack levels required when called: 4
  5558 ;; This function calls:
  5559 ;;		Nothing
  5560 ;; This function is called by:
  5561 ;;		_touchScreenController
  5562 ;; This function uses a non-reentrant model
  5563 ;;
  5564                           
  5565                           	psect	text15
  5566  002A6A                     __ptext15:
  5567                           	callstack 0
  5568  002A6A                     ___fldiv:
  5569                           	callstack 23
  5570                           
  5571                           ;incstack = 0
  5572  002A6A  5023               	movf	(___fldiv@b+3)^0,w,c
  5573  002A6C  0B80               	andlw	128
  5574  002A6E  6E30               	movwf	___fldiv@sign^0,c
  5575  002A70  5023               	movf	(___fldiv@b+3)^0,w,c
  5576  002A72  2423               	addwf	(___fldiv@b+3)^0,w,c
  5577  002A74  6E37               	movwf	___fldiv@bexp^0,c
  5578  002A76  BE22               	btfsc	(___fldiv@b+2)^0,7,c
  5579  002A78  8037               	bsf	___fldiv@bexp^0,0,c
  5580  002A7A  5037               	movf	___fldiv@bexp^0,w,c
  5581  002A7C  B4D8               	btfsc	status,2,c
  5582  002A7E  D00D               	goto	l9286
  5583  002A80  2837               	incf	___fldiv@bexp^0,w,c
  5584  002A82  A4D8               	btfss	status,2,c
  5585  002A84  D008               	goto	l9282
  5586  002A86  0E00               	movlw	0
  5587  002A88  6E20               	movwf	___fldiv@b^0,c
  5588  002A8A  0E00               	movlw	0
  5589  002A8C  6E21               	movwf	(___fldiv@b+1)^0,c
  5590  002A8E  0E00               	movlw	0
  5591  002A90  6E22               	movwf	(___fldiv@b+2)^0,c
  5592  002A92  0E00               	movlw	0
  5593  002A94  6E23               	movwf	(___fldiv@b+3)^0,c
  5594  002A96                     l9282:
  5595  002A96  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5596  002A98  D006               	goto	L1
  5597  002A9A                     l9286:
  5598  002A9A  0E00               	movlw	0
  5599  002A9C  6E20               	movwf	___fldiv@b^0,c
  5600  002A9E  0E00               	movlw	0
  5601  002AA0  6E21               	movwf	(___fldiv@b+1)^0,c
  5602  002AA2  0E00               	movlw	0
  5603  002AA4  6E22               	movwf	(___fldiv@b+2)^0,c
  5604  002AA6                     L1:
  5605  002AA6  0E00               	movlw	0
  5606  002AA8  6E23               	movwf	(___fldiv@b+3)^0,c
  5607  002AAA  5027               	movf	(___fldiv@a+3)^0,w,c
  5608  002AAC  0B80               	andlw	128
  5609  002AAE  1A30               	xorwf	___fldiv@sign^0,f,c
  5610  002AB0  5027               	movf	(___fldiv@a+3)^0,w,c
  5611  002AB2  2427               	addwf	(___fldiv@a+3)^0,w,c
  5612  002AB4  6E38               	movwf	___fldiv@aexp^0,c
  5613  002AB6  BE26               	btfsc	(___fldiv@a+2)^0,7,c
  5614  002AB8  8038               	bsf	___fldiv@aexp^0,0,c
  5615  002ABA  5038               	movf	___fldiv@aexp^0,w,c
  5616  002ABC  B4D8               	btfsc	status,2,c
  5617  002ABE  D00D               	goto	l9306
  5618  002AC0  2838               	incf	___fldiv@aexp^0,w,c
  5619  002AC2  A4D8               	btfss	status,2,c
  5620  002AC4  D008               	goto	l9302
  5621  002AC6  0E00               	movlw	0
  5622  002AC8  6E24               	movwf	___fldiv@a^0,c
  5623  002ACA  0E00               	movlw	0
  5624  002ACC  6E25               	movwf	(___fldiv@a+1)^0,c
  5625  002ACE  0E00               	movlw	0
  5626  002AD0  6E26               	movwf	(___fldiv@a+2)^0,c
  5627  002AD2  0E00               	movlw	0
  5628  002AD4  6E27               	movwf	(___fldiv@a+3)^0,c
  5629  002AD6                     l9302:
  5630  002AD6  8E26               	bsf	(___fldiv@a+2)^0,7,c
  5631  002AD8  D006               	goto	L2
  5632  002ADA                     l9306:
  5633  002ADA  0E00               	movlw	0
  5634  002ADC  6E24               	movwf	___fldiv@a^0,c
  5635  002ADE  0E00               	movlw	0
  5636  002AE0  6E25               	movwf	(___fldiv@a+1)^0,c
  5637  002AE2  0E00               	movlw	0
  5638  002AE4  6E26               	movwf	(___fldiv@a+2)^0,c
  5639  002AE6                     L2:
  5640  002AE6  0E00               	movlw	0
  5641  002AE8  6E27               	movwf	(___fldiv@a+3)^0,c
  5642  002AEA  5024               	movf	___fldiv@a^0,w,c
  5643  002AEC  1025               	iorwf	(___fldiv@a+1)^0,w,c
  5644  002AEE  1026               	iorwf	(___fldiv@a+2)^0,w,c
  5645  002AF0  1027               	iorwf	(___fldiv@a+3)^0,w,c
  5646  002AF2  A4D8               	btfss	status,2,c
  5647  002AF4  D017               	goto	l9320
  5648  002AF6  0E00               	movlw	0
  5649  002AF8  6E20               	movwf	___fldiv@b^0,c
  5650  002AFA  0E00               	movlw	0
  5651  002AFC  6E21               	movwf	(___fldiv@b+1)^0,c
  5652  002AFE  0E00               	movlw	0
  5653  002B00  6E22               	movwf	(___fldiv@b+2)^0,c
  5654  002B02  0E00               	movlw	0
  5655  002B04  6E23               	movwf	(___fldiv@b+3)^0,c
  5656  002B06  0E80               	movlw	128
  5657  002B08  1222               	iorwf	(___fldiv@b+2)^0,f,c
  5658  002B0A  0E7F               	movlw	127
  5659  002B0C  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5660  002B0E                     l9314:
  5661  002B0E  5030               	movf	___fldiv@sign^0,w,c
  5662  002B10  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5663  002B12  C020  F020         	movff	___fldiv@b,?___fldiv
  5664  002B16  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  5665  002B1A  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  5666  002B1E  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  5667  002B22  0012               	return	
  5668  002B24                     l9320:
  5669  002B24  5037               	movf	___fldiv@bexp^0,w,c
  5670  002B26  A4D8               	btfss	status,2,c
  5671  002B28  D009               	goto	l9328
  5672  002B2A  0E00               	movlw	0
  5673  002B2C  6E20               	movwf	?___fldiv^0,c
  5674  002B2E  0E00               	movlw	0
  5675  002B30  6E21               	movwf	(?___fldiv+1)^0,c
  5676  002B32  0E00               	movlw	0
  5677  002B34  6E22               	movwf	(?___fldiv+2)^0,c
  5678  002B36  0E00               	movlw	0
  5679  002B38  6E23               	movwf	(?___fldiv+3)^0,c
  5680  002B3A  0012               	return	
  5681  002B3C                     l9328:
  5682  002B3C  5038               	movf	___fldiv@aexp^0,w,c
  5683  002B3E  C037  F028         	movff	___fldiv@bexp,??___fldiv
  5684  002B42  6A29               	clrf	(??___fldiv+1)^0,c
  5685  002B44  5E28               	subwf	??___fldiv^0,f,c
  5686  002B46  0E00               	movlw	0
  5687  002B48  5A29               	subwfb	(??___fldiv+1)^0,f,c
  5688  002B4A  0E7F               	movlw	127
  5689  002B4C  2428               	addwf	??___fldiv^0,w,c
  5690  002B4E  6E31               	movwf	___fldiv@new_exp^0,c
  5691  002B50  0E00               	movlw	0
  5692  002B52  2029               	addwfc	(??___fldiv+1)^0,w,c
  5693  002B54  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5694  002B56  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  5695  002B5A  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  5696  002B5E  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  5697  002B62  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  5698  002B66  0E00               	movlw	0
  5699  002B68  6E20               	movwf	___fldiv@b^0,c
  5700  002B6A  0E00               	movlw	0
  5701  002B6C  6E21               	movwf	(___fldiv@b+1)^0,c
  5702  002B6E  0E00               	movlw	0
  5703  002B70  6E22               	movwf	(___fldiv@b+2)^0,c
  5704  002B72  0E00               	movlw	0
  5705  002B74  6E23               	movwf	(___fldiv@b+3)^0,c
  5706  002B76  0E00               	movlw	0
  5707  002B78  6E33               	movwf	___fldiv@grs^0,c
  5708  002B7A  0E00               	movlw	0
  5709  002B7C  6E34               	movwf	(___fldiv@grs+1)^0,c
  5710  002B7E  0E00               	movlw	0
  5711  002B80  6E35               	movwf	(___fldiv@grs+2)^0,c
  5712  002B82  0E00               	movlw	0
  5713  002B84  6E36               	movwf	(___fldiv@grs+3)^0,c
  5714  002B86  0E00               	movlw	0
  5715  002B88  6E38               	movwf	___fldiv@aexp^0,c
  5716  002B8A  D028               	goto	l1458
  5717  002B8C                     l9338:
  5718  002B8C  5038               	movf	___fldiv@aexp^0,w,c
  5719  002B8E  B4D8               	btfsc	status,2,c
  5720  002B90  D011               	goto	l9346
  5721  002B92  90D8               	bcf	status,0,c
  5722  002B94  362C               	rlcf	___fldiv@rem^0,f,c
  5723  002B96  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  5724  002B98  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  5725  002B9A  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  5726  002B9C  90D8               	bcf	status,0,c
  5727  002B9E  3620               	rlcf	___fldiv@b^0,f,c
  5728  002BA0  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5729  002BA2  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5730  002BA4  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5731  002BA6  BE36               	btfsc	(___fldiv@grs+3)^0,7,c
  5732  002BA8  8020               	bsf	___fldiv@b^0,0,c
  5733  002BAA  90D8               	bcf	status,0,c
  5734  002BAC  3633               	rlcf	___fldiv@grs^0,f,c
  5735  002BAE  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5736  002BB0  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5737  002BB2  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5738  002BB4                     l9346:
  5739  002BB4  5024               	movf	___fldiv@a^0,w,c
  5740  002BB6  5C2C               	subwf	___fldiv@rem^0,w,c
  5741  002BB8  5025               	movf	(___fldiv@a+1)^0,w,c
  5742  002BBA  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  5743  002BBC  5026               	movf	(___fldiv@a+2)^0,w,c
  5744  002BBE  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  5745  002BC0  5027               	movf	(___fldiv@a+3)^0,w,c
  5746  002BC2  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  5747  002BC4  A0D8               	btfss	status,0,c
  5748  002BC6  D009               	goto	l9352
  5749  002BC8  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  5750  002BCA  5024               	movf	___fldiv@a^0,w,c
  5751  002BCC  5E2C               	subwf	___fldiv@rem^0,f,c
  5752  002BCE  5025               	movf	(___fldiv@a+1)^0,w,c
  5753  002BD0  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  5754  002BD2  5026               	movf	(___fldiv@a+2)^0,w,c
  5755  002BD4  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  5756  002BD6  5027               	movf	(___fldiv@a+3)^0,w,c
  5757  002BD8  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  5758  002BDA                     l9352:
  5759  002BDA  2A38               	incf	___fldiv@aexp^0,f,c
  5760  002BDC                     l1458:
  5761  002BDC  0E19               	movlw	25
  5762  002BDE  6438               	cpfsgt	___fldiv@aexp^0,c
  5763  002BE0  D7D5               	goto	l9338
  5764  002BE2  502C               	movf	___fldiv@rem^0,w,c
  5765  002BE4  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  5766  002BE6  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  5767  002BE8  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  5768  002BEA  B4D8               	btfsc	status,2,c
  5769  002BEC  D011               	goto	l9364
  5770  002BEE  8033               	bsf	___fldiv@grs^0,0,c
  5771  002BF0  D00F               	goto	l9364
  5772  002BF2                     l9358:
  5773  002BF2  90D8               	bcf	status,0,c
  5774  002BF4  3620               	rlcf	___fldiv@b^0,f,c
  5775  002BF6  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5776  002BF8  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5777  002BFA  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5778  002BFC  BE36               	btfsc	(___fldiv@grs+3)^0,7,c
  5779  002BFE  8020               	bsf	___fldiv@b^0,0,c
  5780  002C00  90D8               	bcf	status,0,c
  5781  002C02  3633               	rlcf	___fldiv@grs^0,f,c
  5782  002C04  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5783  002C06  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5784  002C08  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5785  002C0A  0631               	decf	___fldiv@new_exp^0,f,c
  5786  002C0C  A0D8               	btfss	status,0,c
  5787  002C0E  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  5788  002C10                     l9364:
  5789  002C10  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5790  002C12  D7EF               	goto	l9358
  5791  002C14  0E00               	movlw	0
  5792  002C16  6E38               	movwf	___fldiv@aexp^0,c
  5793  002C18  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5794  002C1A  D017               	goto	l1469
  5795  002C1C  0EFF               	movlw	255
  5796  002C1E  1433               	andwf	___fldiv@grs^0,w,c
  5797  002C20  6E28               	movwf	??___fldiv^0,c
  5798  002C22  0EFF               	movlw	255
  5799  002C24  1434               	andwf	(___fldiv@grs+1)^0,w,c
  5800  002C26  6E29               	movwf	(??___fldiv+1)^0,c
  5801  002C28  0EFF               	movlw	255
  5802  002C2A  1435               	andwf	(___fldiv@grs+2)^0,w,c
  5803  002C2C  6E2A               	movwf	(??___fldiv+2)^0,c
  5804  002C2E  0E7F               	movlw	127
  5805  002C30  1436               	andwf	(___fldiv@grs+3)^0,w,c
  5806  002C32  6E2B               	movwf	(??___fldiv+3)^0,c
  5807  002C34  5028               	movf	??___fldiv^0,w,c
  5808  002C36  1029               	iorwf	(??___fldiv+1)^0,w,c
  5809  002C38  102A               	iorwf	(??___fldiv+2)^0,w,c
  5810  002C3A  102B               	iorwf	(??___fldiv+3)^0,w,c
  5811  002C3C  B4D8               	btfsc	status,2,c
  5812  002C3E  D003               	goto	l1470
  5813  002C40                     u7060:
  5814  002C40  0E01               	movlw	1
  5815  002C42  6E38               	movwf	___fldiv@aexp^0,c
  5816  002C44  D002               	goto	l1469
  5817  002C46                     l1470:
  5818  002C46  B020               	btfsc	___fldiv@b^0,0,c
  5819  002C48  D7FB               	goto	u7060
  5820  002C4A                     l1469:
  5821  002C4A  5038               	movf	___fldiv@aexp^0,w,c
  5822  002C4C  B4D8               	btfsc	status,2,c
  5823  002C4E  D01F               	goto	l9384
  5824  002C50  0E01               	movlw	1
  5825  002C52  2620               	addwf	___fldiv@b^0,f,c
  5826  002C54  0E00               	movlw	0
  5827  002C56  2221               	addwfc	(___fldiv@b+1)^0,f,c
  5828  002C58  2222               	addwfc	(___fldiv@b+2)^0,f,c
  5829  002C5A  2223               	addwfc	(___fldiv@b+3)^0,f,c
  5830  002C5C  A023               	btfss	(___fldiv@b+3)^0,0,c
  5831  002C5E  D017               	goto	l9384
  5832  002C60  C020  F028         	movff	___fldiv@b,??___fldiv
  5833  002C64  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  5834  002C68  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  5835  002C6C  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  5836  002C70  342B               	rlcf	(??___fldiv+3)^0,w,c
  5837  002C72  322B               	rrcf	(??___fldiv+3)^0,f,c
  5838  002C74  322A               	rrcf	(??___fldiv+2)^0,f,c
  5839  002C76  3229               	rrcf	(??___fldiv+1)^0,f,c
  5840  002C78  3228               	rrcf	??___fldiv^0,f,c
  5841  002C7A  C028  F020         	movff	??___fldiv,___fldiv@b
  5842  002C7E  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  5843  002C82  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  5844  002C86  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  5845  002C8A  4A31               	infsnz	___fldiv@new_exp^0,f,c
  5846  002C8C  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  5847  002C8E                     l9384:
  5848  002C8E  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5849  002C90  D010               	goto	l9388
  5850  002C92  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5851  002C94  E103               	bnz	u7100
  5852  002C96  2831               	incf	___fldiv@new_exp^0,w,c
  5853  002C98  A0D8               	btfss	status,0,c
  5854  002C9A  D00B               	goto	l9388
  5855  002C9C                     u7100:
  5856  002C9C  0E00               	movlw	0
  5857  002C9E  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5858  002CA0  6831               	setf	___fldiv@new_exp^0,c
  5859  002CA2  0E00               	movlw	0
  5860  002CA4  6E20               	movwf	___fldiv@b^0,c
  5861  002CA6  0E00               	movlw	0
  5862  002CA8  6E21               	movwf	(___fldiv@b+1)^0,c
  5863  002CAA  0E00               	movlw	0
  5864  002CAC  6E22               	movwf	(___fldiv@b+2)^0,c
  5865  002CAE  0E00               	movlw	0
  5866  002CB0  6E23               	movwf	(___fldiv@b+3)^0,c
  5867  002CB2                     l9388:
  5868  002CB2  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5869  002CB4  D005               	goto	u7110
  5870  002CB6  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5871  002CB8  E111               	bnz	l9392
  5872  002CBA  0431               	decf	___fldiv@new_exp^0,w,c
  5873  002CBC  B0D8               	btfsc	status,0,c
  5874  002CBE  D00E               	goto	l9392
  5875  002CC0                     u7110:
  5876  002CC0  0E00               	movlw	0
  5877  002CC2  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5878  002CC4  0E00               	movlw	0
  5879  002CC6  6E31               	movwf	___fldiv@new_exp^0,c
  5880  002CC8  0E00               	movlw	0
  5881  002CCA  6E20               	movwf	___fldiv@b^0,c
  5882  002CCC  0E00               	movlw	0
  5883  002CCE  6E21               	movwf	(___fldiv@b+1)^0,c
  5884  002CD0  0E00               	movlw	0
  5885  002CD2  6E22               	movwf	(___fldiv@b+2)^0,c
  5886  002CD4  0E00               	movlw	0
  5887  002CD6  6E23               	movwf	(___fldiv@b+3)^0,c
  5888  002CD8  0E00               	movlw	0
  5889  002CDA  6E30               	movwf	___fldiv@sign^0,c
  5890  002CDC                     l9392:
  5891  002CDC  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5892  002CE0  A037               	btfss	___fldiv@bexp^0,0,c
  5893  002CE2  D002               	goto	l9398
  5894  002CE4  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5895  002CE6  D001               	goto	l9400
  5896  002CE8                     l9398:
  5897  002CE8  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5898  002CEA                     l9400:
  5899  002CEA  90D8               	bcf	status,0,c
  5900  002CEC  3037               	rrcf	___fldiv@bexp^0,w,c
  5901  002CEE  6E23               	movwf	(___fldiv@b+3)^0,c
  5902  002CF0  D70E               	goto	l9314
  5903  002CF2                     __end_of___fldiv:
  5904                           	callstack 0
  5905                           
  5906 ;; *************** function _XF_unscheduleTimer *****************
  5907 ;; Defined at:
  5908 ;;		line 125 in file "xf/xf.c"
  5909 ;; Parameters:    Size  Location     Type
  5910 ;;  id              1    wreg     unsigned char 
  5911 ;;  inISR           1   18[COMRAM] _Bool 
  5912 ;; Auto vars:     Size  Location     Type
  5913 ;;  id              1   19[COMRAM] unsigned char 
  5914 ;; Return value:  Size  Location     Type
  5915 ;;                  1    wreg      void 
  5916 ;; Registers used:
  5917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5918 ;; Tracked objects:
  5919 ;;		On entry : 3F/0
  5920 ;;		On exit  : 0/0
  5921 ;;		Unchanged: 0/0
  5922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5923 ;;      Params:         1       0       0       0       0       0       0
  5924 ;;      Locals:         1       0       0       0       0       0       0
  5925 ;;      Temps:          0       0       0       0       0       0       0
  5926 ;;      Totals:         2       0       0       0       0       0       0
  5927 ;;Total ram usage:        2 bytes
  5928 ;; Hardware stack levels used: 1
  5929 ;; Hardware stack levels required when called: 5
  5930 ;; This function calls:
  5931 ;;		_ENTERCRITICAL
  5932 ;;		_LEAVECRITICAL
  5933 ;; This function is called by:
  5934 ;;		_touchScreenController
  5935 ;; This function uses a non-reentrant model
  5936 ;;
  5937                           
  5938                           	psect	text16
  5939  0055C2                     __ptext16:
  5940                           	callstack 0
  5941  0055C2                     _XF_unscheduleTimer:
  5942                           	callstack 22
  5943                           
  5944                           ;incstack = 0
  5945                           ;XF_unscheduleTimer@id stored from wreg
  5946  0055C2  6E14               	movwf	XF_unscheduleTimer@id^0,c
  5947                           
  5948                           ;xf/xf.c: 125: void XF_unscheduleTimer(TimerID id, _Bool inISR);xf/xf.c: 126: {;xf/xf.c:
      +                           127:     ENTERCRITICAL(inISR);
  5949  0055C4  5013               	movf	XF_unscheduleTimer@inISR^0,w,c
  5950  0055C6  EC62  F02C         	call	_ENTERCRITICAL
  5951                           
  5952                           ;xf/xf.c: 128:     theXF.timerList[id].tm = 0;
  5953  0055CA  5014               	movf	XF_unscheduleTimer@id^0,w,c
  5954  0055CC  0D03               	mullw	3
  5955  0055CE  50F3               	movf	243,w,c
  5956  0055D0  0FB0               	addlw	low _theXF
  5957  0055D2  6ED9               	movwf	fsr2l,c
  5958  0055D4  6ADA               	clrf	fsr2h,c
  5959  0055D6  0E00               	movlw	0
  5960  0055D8  6EDE               	movwf	postinc2,c
  5961  0055DA  0E00               	movlw	0
  5962  0055DC  6EDD               	movwf	postdec2,c
  5963                           
  5964                           ;xf/xf.c: 129:     theXF.timerList[id].ev = NULLEVENT;
  5965  0055DE  5014               	movf	XF_unscheduleTimer@id^0,w,c
  5966  0055E0  0D03               	mullw	3
  5967  0055E2  50F3               	movf	243,w,c
  5968  0055E4  0FB2               	addlw	low (_theXF+2)
  5969  0055E6  6ED9               	movwf	fsr2l,c
  5970  0055E8  6ADA               	clrf	fsr2h,c
  5971  0055EA  0E00               	movlw	0
  5972  0055EC  6EDF               	movwf	indf2,c
  5973                           
  5974                           ;xf/xf.c: 130:     LEAVECRITICAL(inISR);
  5975  0055EE  5013               	movf	XF_unscheduleTimer@inISR^0,w,c
  5976  0055F0  EC5C  F02C         	call	_LEAVECRITICAL
  5977  0055F4  0012               	return		;funcret
  5978  0055F6                     __end_of_XF_unscheduleTimer:
  5979                           	callstack 0
  5980                           
  5981 ;; *************** function _GameParameters_setY *****************
  5982 ;; Defined at:
  5983 ;;		line 75 in file "class/gameParameters.c"
  5984 ;; Parameters:    Size  Location     Type
  5985 ;;  s               2   17[COMRAM] PTR struct GameParameter
  5986 ;;		 -> g1(216), 
  5987 ;;  value           2   19[COMRAM] unsigned short 
  5988 ;; Auto vars:     Size  Location     Type
  5989 ;;		None
  5990 ;; Return value:  Size  Location     Type
  5991 ;;                  1    wreg      void 
  5992 ;; Registers used:
  5993 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5994 ;; Tracked objects:
  5995 ;;		On entry : 0/0
  5996 ;;		On exit  : 0/0
  5997 ;;		Unchanged: 0/0
  5998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5999 ;;      Params:         4       0       0       0       0       0       0
  6000 ;;      Locals:         0       0       0       0       0       0       0
  6001 ;;      Temps:          0       0       0       0       0       0       0
  6002 ;;      Totals:         4       0       0       0       0       0       0
  6003 ;;Total ram usage:        4 bytes
  6004 ;; Hardware stack levels used: 1
  6005 ;; Hardware stack levels required when called: 4
  6006 ;; This function calls:
  6007 ;;		Nothing
  6008 ;; This function is called by:
  6009 ;;		_touchScreenController
  6010 ;; This function uses a non-reentrant model
  6011 ;;
  6012                           
  6013                           	psect	text17
  6014  005876                     __ptext17:
  6015                           	callstack 0
  6016  005876                     _GameParameters_setY:
  6017                           	callstack 23
  6018                           
  6019                           ;class/gameParameters.c: 75: void GameParameters_setY(struct GameParameters* s, uint16_t
      +                           value);class/gameParameters.c: 76: {;class/gameParameters.c: 77:     s->y=value;
  6020                           
  6021                           ;incstack = 0
  6022  005876  EE20 F004          	lfsr	2,4
  6023  00587A  5012               	movf	GameParameters_setY@s^0,w,c
  6024  00587C  26D9               	addwf	fsr2l,f,c
  6025  00587E  5013               	movf	(GameParameters_setY@s+1)^0,w,c
  6026  005880  22DA               	addwfc	fsr2h,f,c
  6027  005882  C014  FFDE         	movff	GameParameters_setY@value,postinc2
  6028  005886  C015  FFDD         	movff	GameParameters_setY@value+1,postdec2
  6029  00588A  0012               	return		;funcret
  6030  00588C                     __end_of_GameParameters_setY:
  6031                           	callstack 0
  6032                           
  6033 ;; *************** function _GameParameters_setX *****************
  6034 ;; Defined at:
  6035 ;;		line 67 in file "class/gameParameters.c"
  6036 ;; Parameters:    Size  Location     Type
  6037 ;;  s               2   17[COMRAM] PTR struct GameParameter
  6038 ;;		 -> g1(216), 
  6039 ;;  value           2   19[COMRAM] unsigned short 
  6040 ;; Auto vars:     Size  Location     Type
  6041 ;;		None
  6042 ;; Return value:  Size  Location     Type
  6043 ;;                  1    wreg      void 
  6044 ;; Registers used:
  6045 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6046 ;; Tracked objects:
  6047 ;;		On entry : 0/0
  6048 ;;		On exit  : 0/0
  6049 ;;		Unchanged: 0/0
  6050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6051 ;;      Params:         4       0       0       0       0       0       0
  6052 ;;      Locals:         0       0       0       0       0       0       0
  6053 ;;      Temps:          0       0       0       0       0       0       0
  6054 ;;      Totals:         4       0       0       0       0       0       0
  6055 ;;Total ram usage:        4 bytes
  6056 ;; Hardware stack levels used: 1
  6057 ;; Hardware stack levels required when called: 4
  6058 ;; This function calls:
  6059 ;;		Nothing
  6060 ;; This function is called by:
  6061 ;;		_touchScreenController
  6062 ;; This function uses a non-reentrant model
  6063 ;;
  6064                           
  6065                           	psect	text18
  6066  00588C                     __ptext18:
  6067                           	callstack 0
  6068  00588C                     _GameParameters_setX:
  6069                           	callstack 23
  6070                           
  6071                           ;class/gameParameters.c: 67: void GameParameters_setX(struct GameParameters* s, uint16_t
      +                           value);class/gameParameters.c: 68: {;class/gameParameters.c: 69:     s->x=value;
  6072                           
  6073                           ;incstack = 0
  6074  00588C  EE20 F002          	lfsr	2,2
  6075  005890  5012               	movf	GameParameters_setX@s^0,w,c
  6076  005892  26D9               	addwf	fsr2l,f,c
  6077  005894  5013               	movf	(GameParameters_setX@s+1)^0,w,c
  6078  005896  22DA               	addwfc	fsr2h,f,c
  6079  005898  C014  FFDE         	movff	GameParameters_setX@value,postinc2
  6080  00589C  C015  FFDD         	movff	GameParameters_setX@value+1,postdec2
  6081  0058A0  0012               	return		;funcret
  6082  0058A2                     __end_of_GameParameters_setX:
  6083                           	callstack 0
  6084                           
  6085 ;; *************** function _sleepSM *****************
  6086 ;; Defined at:
  6087 ;;		line 27 in file "stateMachine/sleepSM.c"
  6088 ;; Parameters:    Size  Location     Type
  6089 ;;  ev              1    wreg     unsigned char 
  6090 ;; Auto vars:     Size  Location     Type
  6091 ;;  ev              1   21[COMRAM] unsigned char 
  6092 ;; Return value:  Size  Location     Type
  6093 ;;                  1    wreg      void 
  6094 ;; Registers used:
  6095 ;;		wreg, status,2, status,0, cstack
  6096 ;; Tracked objects:
  6097 ;;		On entry : 3F/0
  6098 ;;		On exit  : 0/0
  6099 ;;		Unchanged: 0/0
  6100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6101 ;;      Params:         0       0       0       0       0       0       0
  6102 ;;      Locals:         1       0       0       0       0       0       0
  6103 ;;      Temps:          2       0       0       0       0       0       0
  6104 ;;      Totals:         3       0       0       0       0       0       0
  6105 ;;Total ram usage:        3 bytes
  6106 ;; Hardware stack levels used: 1
  6107 ;; Hardware stack levels required when called: 7
  6108 ;; This function calls:
  6109 ;;		_sleepController
  6110 ;; This function is called by:
  6111 ;;		_Factory_exec
  6112 ;; This function uses a non-reentrant model
  6113 ;;
  6114                           
  6115                           	psect	text19
  6116  00565C                     __ptext19:
  6117                           	callstack 0
  6118  00565C                     _sleepSM:
  6119                           	callstack 22
  6120                           
  6121                           ;incstack = 0
  6122                           ;sleepSM@ev stored from wreg
  6123  00565C  6E16               	movwf	sleepSM@ev^0,c
  6124                           
  6125                           ;stateMachine/sleepSM.c: 27: void sleepSM(Event ev);stateMachine/sleepSM.c: 28: {;stateM
      +                          achine/sleepSM.c: 29:     switch(sleepState)
  6126  00565E  D009               	goto	l9668
  6127  005660                     l9660:
  6128                           
  6129                           ; BSR set to: 0
  6130                           ;stateMachine/sleepSM.c: 32:             if(ev==evTimer30)
  6131  005660  0E03               	movlw	3
  6132  005662  1816               	xorwf	sleepSM@ev^0,w,c
  6133  005664  A4D8               	btfss	status,2,c
  6134  005666  0012               	return	
  6135                           
  6136                           ; BSR set to: 0
  6137                           ;stateMachine/sleepSM.c: 33:             {;stateMachine/sleepSM.c: 34:                sl
      +                          eepState=SLEEP;
  6138  005668  0E01               	movlw	1
  6139  00566A  6FDA               	movwf	_sleepState& (0+255),b
  6140                           
  6141                           ; BSR set to: 0
  6142                           ;stateMachine/sleepSM.c: 35:                sleepController();
  6143  00566C  EC91  F02B         	call	_sleepController	;wreg free
  6144  005670  0012               	return	
  6145  005672                     l9668:
  6146  005672  0100               	movlb	0	; () banked
  6147  005674  51DA               	movf	_sleepState& (0+255),w,b
  6148  005676  6E14               	movwf	??_sleepSM^0,c
  6149  005678  6A15               	clrf	(??_sleepSM+1)^0,c
  6150                           
  6151                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6152                           ; Switch size 1, requested type "simple"
  6153                           ; Number of cases is 1, Range of values is 0 to 0
  6154                           ; switch strategies available:
  6155                           ; Name         Instructions Cycles
  6156                           ; simple_byte            4     3 (average)
  6157                           ;	Chosen strategy is simple_byte
  6158  00567A  5015               	movf	(??_sleepSM+1)^0,w,c
  6159  00567C  0A00               	xorlw	0	; case 0
  6160  00567E  A4D8               	btfss	status,2,c
  6161  005680  0012               	return	
  6162                           
  6163                           ; BSR set to: 0
  6164                           ; Switch size 1, requested type "simple"
  6165                           ; Number of cases is 2, Range of values is 0 to 1
  6166                           ; switch strategies available:
  6167                           ; Name         Instructions Cycles
  6168                           ; simple_byte            7     4 (average)
  6169                           ;	Chosen strategy is simple_byte
  6170  005682  5014               	movf	??_sleepSM^0,w,c
  6171  005684  0A00               	xorlw	0	; case 0
  6172  005686  B4D8               	btfsc	status,2,c
  6173  005688  D7EB               	goto	l9660
  6174  00568A  0A01               	xorlw	1	; case 1
  6175  00568C  0012               	return	
  6176  00568E                     __end_of_sleepSM:
  6177                           	callstack 0
  6178                           
  6179 ;; *************** function _sleepController *****************
  6180 ;; Defined at:
  6181 ;;		line 54 in file "stateMachine/sleepSM.c"
  6182 ;; Parameters:    Size  Location     Type
  6183 ;;		None
  6184 ;; Auto vars:     Size  Location     Type
  6185 ;;		None
  6186 ;; Return value:  Size  Location     Type
  6187 ;;                  1    wreg      void 
  6188 ;; Registers used:
  6189 ;;		wreg, status,2, status,0, cstack
  6190 ;; Tracked objects:
  6191 ;;		On entry : 0/0
  6192 ;;		On exit  : 0/0
  6193 ;;		Unchanged: 0/0
  6194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6195 ;;      Params:         0       0       0       0       0       0       0
  6196 ;;      Locals:         0       0       0       0       0       0       0
  6197 ;;      Temps:          2       0       0       0       0       0       0
  6198 ;;      Totals:         2       0       0       0       0       0       0
  6199 ;;Total ram usage:        2 bytes
  6200 ;; Hardware stack levels used: 1
  6201 ;; Hardware stack levels required when called: 6
  6202 ;; This function calls:
  6203 ;;		_configPinSleep
  6204 ;; This function is called by:
  6205 ;;		_sleepInit
  6206 ;;		_sleepSM
  6207 ;; This function uses a non-reentrant model
  6208 ;;
  6209                           
  6210                           	psect	text20
  6211  005722                     __ptext20:
  6212                           	callstack 0
  6213  005722                     _sleepController:
  6214                           	callstack 22
  6215                           
  6216                           ;stateMachine/sleepSM.c: 56:     switch(sleepState)
  6217                           
  6218                           ;incstack = 0
  6219  005722  D005               	goto	l9528
  6220  005724                     l9524:
  6221                           
  6222                           ; BSR set to: 0
  6223                           ;stateMachine/sleepSM.c: 62:             configPinSleep();
  6224  005724  EC16  F02C         	call	_configPinSleep	;wreg free
  6225  005728  0003               	sleep		;# 
  6226  00572A  00FF               	reset		;# 
  6227                           
  6228                           ;stateMachine/sleepSM.c: 65:             break;
  6229  00572C  0012               	return	
  6230  00572E                     l9528:
  6231  00572E  0100               	movlb	0	; () banked
  6232  005730  51DA               	movf	_sleepState& (0+255),w,b
  6233  005732  6E12               	movwf	??_sleepController^0,c
  6234  005734  6A13               	clrf	(??_sleepController+1)^0,c
  6235                           
  6236                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6237                           ; Switch size 1, requested type "simple"
  6238                           ; Number of cases is 1, Range of values is 0 to 0
  6239                           ; switch strategies available:
  6240                           ; Name         Instructions Cycles
  6241                           ; simple_byte            4     3 (average)
  6242                           ;	Chosen strategy is simple_byte
  6243  005736  5013               	movf	(??_sleepController+1)^0,w,c
  6244  005738  0A00               	xorlw	0	; case 0
  6245  00573A  A4D8               	btfss	status,2,c
  6246  00573C  0012               	return	
  6247                           
  6248                           ; BSR set to: 0
  6249                           ; Switch size 1, requested type "simple"
  6250                           ; Number of cases is 2, Range of values is 0 to 1
  6251                           ; switch strategies available:
  6252                           ; Name         Instructions Cycles
  6253                           ; simple_byte            7     4 (average)
  6254                           ;	Chosen strategy is simple_byte
  6255  00573E  5012               	movf	??_sleepController^0,w,c
  6256  005740  0A00               	xorlw	0	; case 0
  6257  005742  B4D8               	btfsc	status,2,c
  6258  005744  0012               	return	
  6259  005746  0A01               	xorlw	1	; case 1
  6260  005748  A4D8               	btfss	status,2,c
  6261  00574A  0012               	return	
  6262  00574C  D7EB               	goto	l9524
  6263  00574E                     __end_of_sleepController:
  6264                           	callstack 0
  6265                           
  6266 ;; *************** function _configPinSleep *****************
  6267 ;; Defined at:
  6268 ;;		line 75 in file "stateMachine/sleepSM.c"
  6269 ;; Parameters:    Size  Location     Type
  6270 ;;		None
  6271 ;; Auto vars:     Size  Location     Type
  6272 ;;		None
  6273 ;; Return value:  Size  Location     Type
  6274 ;;                  1    wreg      void 
  6275 ;; Registers used:
  6276 ;;		wreg, status,2, cstack
  6277 ;; Tracked objects:
  6278 ;;		On entry : 0/0
  6279 ;;		On exit  : 0/0
  6280 ;;		Unchanged: 0/0
  6281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6282 ;;      Params:         0       0       0       0       0       0       0
  6283 ;;      Locals:         0       0       0       0       0       0       0
  6284 ;;      Temps:          0       0       0       0       0       0       0
  6285 ;;      Totals:         0       0       0       0       0       0       0
  6286 ;;Total ram usage:        0 bytes
  6287 ;; Hardware stack levels used: 1
  6288 ;; Hardware stack levels required when called: 5
  6289 ;; This function calls:
  6290 ;;		_configTouch
  6291 ;; This function is called by:
  6292 ;;		_sleepController
  6293 ;; This function uses a non-reentrant model
  6294 ;;
  6295                           
  6296                           	psect	text21
  6297  00582C                     __ptext21:
  6298                           	callstack 0
  6299  00582C                     _configPinSleep:
  6300                           	callstack 22
  6301                           
  6302                           ;stateMachine/sleepSM.c: 77:     TRISC=0b10000010;
  6303                           
  6304                           ;incstack = 0
  6305  00582C  0E82               	movlw	130
  6306  00582E  6E94               	movwf	148,c	;volatile
  6307                           
  6308                           ;stateMachine/sleepSM.c: 78:     TRISA=0;
  6309  005830  0E00               	movlw	0
  6310  005832  6E92               	movwf	146,c	;volatile
  6311                           
  6312                           ;stateMachine/sleepSM.c: 79:     LATA=0xFF;
  6313  005834  6889               	setf	137,c	;volatile
  6314                           
  6315                           ;stateMachine/sleepSM.c: 80:     LATC0=0;
  6316  005836  908B               	bcf	3979,0,c	;volatile
  6317                           
  6318                           ;stateMachine/sleepSM.c: 81:     CCPR2L=0;
  6319  005838  0E00               	movlw	0
  6320  00583A  6E67               	movwf	103,c	;volatile
  6321                           
  6322                           ;stateMachine/sleepSM.c: 82:     LATC2=1;
  6323  00583C  848B               	bsf	3979,2,c	;volatile
  6324                           
  6325                           ;stateMachine/sleepSM.c: 83:     LATC3=1;
  6326  00583E  868B               	bsf	3979,3,c	;volatile
  6327                           
  6328                           ;stateMachine/sleepSM.c: 84:     LATC4=1;
  6329  005840  888B               	bsf	3979,4,c	;volatile
  6330                           
  6331                           ;stateMachine/sleepSM.c: 85:     LATC5=1;
  6332  005842  8A8B               	bsf	3979,5,c	;volatile
  6333                           
  6334                           ;stateMachine/sleepSM.c: 86:     configTouch();
  6335  005844  ECF5  F02B         	call	_configTouch	;wreg free
  6336  005848  0012               	return		;funcret
  6337  00584A                     __end_of_configPinSleep:
  6338                           	callstack 0
  6339                           
  6340 ;; *************** function _configTouch *****************
  6341 ;; Defined at:
  6342 ;;		line 138 in file "stateMachine/touchScreenSM.c"
  6343 ;; Parameters:    Size  Location     Type
  6344 ;;		None
  6345 ;; Auto vars:     Size  Location     Type
  6346 ;;		None
  6347 ;; Return value:  Size  Location     Type
  6348 ;;                  1    wreg      void 
  6349 ;; Registers used:
  6350 ;;		wreg, status,2
  6351 ;; Tracked objects:
  6352 ;;		On entry : 0/0
  6353 ;;		On exit  : 0/0
  6354 ;;		Unchanged: 0/0
  6355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6356 ;;      Params:         0       0       0       0       0       0       0
  6357 ;;      Locals:         0       0       0       0       0       0       0
  6358 ;;      Temps:          0       0       0       0       0       0       0
  6359 ;;      Totals:         0       0       0       0       0       0       0
  6360 ;;Total ram usage:        0 bytes
  6361 ;; Hardware stack levels used: 1
  6362 ;; Hardware stack levels required when called: 4
  6363 ;; This function calls:
  6364 ;;		Nothing
  6365 ;; This function is called by:
  6366 ;;		_configPinSleep
  6367 ;;		_touchScreenInit
  6368 ;;		_touchScreenController
  6369 ;; This function uses a non-reentrant model
  6370 ;;
  6371                           
  6372                           	psect	text22
  6373  0057EA                     __ptext22:
  6374                           	callstack 0
  6375  0057EA                     _configTouch:
  6376                           	callstack 23
  6377                           
  6378                           ;stateMachine/touchScreenSM.c: 140:     ANSB1=0;
  6379                           
  6380                           ;incstack = 0
  6381  0057EA  010F               	movlb	15	; () banked
  6382  0057EC  9339               	bcf	57,1,b	;volatile
  6383                           
  6384                           ;stateMachine/touchScreenSM.c: 141:     ANSB2=0;
  6385  0057EE  9539               	bcf	57,2,b	;volatile
  6386                           
  6387                           ;stateMachine/touchScreenSM.c: 142:     TRISB2=0;
  6388  0057F0  9493               	bcf	3987,2,c	;volatile
  6389                           
  6390                           ;stateMachine/touchScreenSM.c: 143:     LATB2=0;
  6391  0057F2  948A               	bcf	3978,2,c	;volatile
  6392                           
  6393                           ;stateMachine/touchScreenSM.c: 144:     TRISB1=1;
  6394  0057F4  8293               	bsf	3987,1,c	;volatile
  6395                           
  6396                           ;stateMachine/touchScreenSM.c: 145:     RBPU=0;
  6397  0057F6  9EF1               	bcf	4081,7,c	;volatile
  6398                           
  6399                           ; BSR set to: 15
  6400                           ;stateMachine/touchScreenSM.c: 146:     WPUB=0b00000010;
  6401  0057F8  0E02               	movlw	2
  6402  0057FA  6E61               	movwf	97,c	;volatile
  6403                           
  6404                           ; BSR set to: 15
  6405                           ;stateMachine/touchScreenSM.c: 147:     TRISB3=0;
  6406  0057FC  9693               	bcf	3987,3,c	;volatile
  6407                           
  6408                           ; BSR set to: 15
  6409                           ;stateMachine/touchScreenSM.c: 148:     LATB3=1;
  6410  0057FE  868A               	bsf	3978,3,c	;volatile
  6411                           
  6412                           ; BSR set to: 15
  6413                           ;stateMachine/touchScreenSM.c: 149:     __nop();
  6414  005800  F000               	nop	
  6415                           
  6416                           ;stateMachine/touchScreenSM.c: 150:     TRISB3=1;
  6417  005802  8693               	bsf	3987,3,c	;volatile
  6418                           
  6419                           ;stateMachine/touchScreenSM.c: 151:     TRISB4=1;
  6420  005804  8893               	bsf	3987,4,c	;volatile
  6421                           
  6422                           ;stateMachine/touchScreenSM.c: 152:     INT1IF=0;
  6423  005806  90F0               	bcf	4080,0,c	;volatile
  6424                           
  6425                           ;stateMachine/touchScreenSM.c: 153:     INT1IE=1;
  6426  005808  86F0               	bsf	4080,3,c	;volatile
  6427  00580A  0012               	return		;funcret
  6428  00580C                     __end_of_configTouch:
  6429                           	callstack 0
  6430                           
  6431 ;; *************** function _gameControllerSM *****************
  6432 ;; Defined at:
  6433 ;;		line 26 in file "stateMachine/gameController.c"
  6434 ;; Parameters:    Size  Location     Type
  6435 ;;  ev              1    wreg     unsigned char 
  6436 ;;  g               2   59[COMRAM] PTR struct GameParameter
  6437 ;;		 -> g1(216), 
  6438 ;; Auto vars:     Size  Location     Type
  6439 ;;  ev              1   63[COMRAM] unsigned char 
  6440 ;; Return value:  Size  Location     Type
  6441 ;;                  1    wreg      void 
  6442 ;; Registers used:
  6443 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6444 ;; Tracked objects:
  6445 ;;		On entry : 3F/0
  6446 ;;		On exit  : 0/0
  6447 ;;		Unchanged: 0/0
  6448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6449 ;;      Params:         2       0       0       0       0       0       0
  6450 ;;      Locals:         1       0       0       0       0       0       0
  6451 ;;      Temps:          2       0       0       0       0       0       0
  6452 ;;      Totals:         5       0       0       0       0       0       0
  6453 ;;Total ram usage:        5 bytes
  6454 ;; Hardware stack levels used: 1
  6455 ;; Hardware stack levels required when called: 9
  6456 ;; This function calls:
  6457 ;;		_XF_scheduleTimer
  6458 ;;		_gameControllerController
  6459 ;; This function is called by:
  6460 ;;		_Factory_exec
  6461 ;; This function uses a non-reentrant model
  6462 ;;
  6463                           
  6464                           	psect	text23
  6465  004244                     __ptext23:
  6466                           	callstack 0
  6467  004244                     _gameControllerSM:
  6468                           	callstack 20
  6469                           
  6470                           ;incstack = 0
  6471                           ;gameControllerSM@ev stored from wreg
  6472  004244  6E40               	movwf	gameControllerSM@ev^0,c
  6473                           
  6474                           ;stateMachine/gameController.c: 26: void gameControllerSM(Event ev,GameParameters* g);st
      +                          ateMachine/gameController.c: 27: {;stateMachine/gameController.c: 28:    switch(gameStat
      +                          eMachine)
  6475  004246  D04C               	goto	l9788
  6476  004248                     l9754:
  6477                           
  6478                           ;stateMachine/gameController.c: 31:             gameControllerController(g,NULLEVENT);
  6479  004248  C03C  F037         	movff	gameControllerSM@g,gameControllerController@g
  6480  00424C  C03D  F038         	movff	gameControllerSM@g+1,gameControllerController@g+1
  6481  004250  0E00               	movlw	0
  6482  004252  6E39               	movwf	gameControllerController@ev^0,c
  6483  004254  ECF3  F010         	call	_gameControllerController	;wreg free
  6484                           
  6485                           ;stateMachine/gameController.c: 32:             if(ev==evParameters)
  6486  004258  0E07               	movlw	7
  6487  00425A  1840               	xorwf	gameControllerSM@ev^0,w,c
  6488  00425C  A4D8               	btfss	status,2,c
  6489  00425E  D002               	goto	l9760
  6490                           
  6491                           ;stateMachine/gameController.c: 33:             {;stateMachine/gameController.c: 34:    
      +                                       gameStateMachine=PARAMETERS;
  6492  004260  0E01               	movlw	1
  6493  004262  6E4D               	movwf	_gameStateMachine^0,c
  6494  004264                     l9760:
  6495                           
  6496                           ;stateMachine/gameController.c: 36:             if(ev==evOnePlayer)
  6497  004264  0E05               	movlw	5
  6498  004266  1840               	xorwf	gameControllerSM@ev^0,w,c
  6499  004268  A4D8               	btfss	status,2,c
  6500  00426A  0012               	return	
  6501                           
  6502                           ;stateMachine/gameController.c: 37:             {;stateMachine/gameController.c: 38:    
      +                                       gameStateMachine=LOCAL;
  6503  00426C  0E02               	movlw	2
  6504  00426E  6E4D               	movwf	_gameStateMachine^0,c
  6505                           
  6506                           ;stateMachine/gameController.c: 39:                 XF_scheduleTimer(4-g->level,evGameUp
      +                          date,1);
  6507  004270  EE20 F006          	lfsr	2,6
  6508  004274  503C               	movf	gameControllerSM@g^0,w,c
  6509  004276  26D9               	addwf	fsr2l,f,c
  6510  004278  503D               	movf	(gameControllerSM@g+1)^0,w,c
  6511  00427A  22DA               	addwfc	fsr2h,f,c
  6512  00427C  CFDE F03E          	movff	postinc2,??_gameControllerSM
  6513  004280  CFDD F03F          	movff	postdec2,??_gameControllerSM+1
  6514  004284  503E               	movf	??_gameControllerSM^0,w,c
  6515  004286  0804               	sublw	4
  6516  004288  6E13               	movwf	XF_scheduleTimer@tm^0,c
  6517  00428A  503F               	movf	(??_gameControllerSM+1)^0,w,c
  6518  00428C  A0D8               	btfss	status,0,c
  6519  00428E  2AE8               	incf	wreg,f,c
  6520  004290  0800               	sublw	0
  6521  004292  6E14               	movwf	(XF_scheduleTimer@tm+1)^0,c
  6522  004294  0E0A               	movlw	10
  6523  004296  6E15               	movwf	XF_scheduleTimer@ev^0,c
  6524  004298  0E01               	movlw	1
  6525  00429A  6E16               	movwf	XF_scheduleTimer@inISR^0,c
  6526  00429C  EC5A  F029         	call	_XF_scheduleTimer	;wreg free
  6527  0042A0  0012               	return	
  6528  0042A2                     l9772:
  6529                           
  6530                           ;stateMachine/gameController.c: 49:             gameControllerController(g,NULLEVENT);
  6531  0042A2  C03C  F037         	movff	gameControllerSM@g,gameControllerController@g
  6532  0042A6  C03D  F038         	movff	gameControllerSM@g+1,gameControllerController@g+1
  6533  0042AA  0E00               	movlw	0
  6534  0042AC  6E39               	movwf	gameControllerController@ev^0,c
  6535  0042AE  ECF3  F010         	call	_gameControllerController	;wreg free
  6536                           
  6537                           ;stateMachine/gameController.c: 50:             if(ev==evLeaveParam)
  6538  0042B2  0E08               	movlw	8
  6539  0042B4  1840               	xorwf	gameControllerSM@ev^0,w,c
  6540  0042B6  A4D8               	btfss	status,2,c
  6541  0042B8  0012               	return	
  6542                           
  6543                           ;stateMachine/gameController.c: 51:             {;stateMachine/gameController.c: 52:    
      +                                       gameStateMachine=NOGAME;
  6544  0042BA  0E00               	movlw	0
  6545  0042BC  6E4D               	movwf	_gameStateMachine^0,c
  6546  0042BE  0012               	return	
  6547  0042C0                     l9778:
  6548                           
  6549                           ;stateMachine/gameController.c: 57:             if(ev==evEndGame)
  6550  0042C0  0E09               	movlw	9
  6551  0042C2  1840               	xorwf	gameControllerSM@ev^0,w,c
  6552  0042C4  A4D8               	btfss	status,2,c
  6553  0042C6  D003               	goto	l9782
  6554                           
  6555                           ;stateMachine/gameController.c: 58:             {;stateMachine/gameController.c: 59:    
      +                                       gameStateMachine=ENDGAME;
  6556  0042C8  0E04               	movlw	4
  6557  0042CA  6E4D               	movwf	_gameStateMachine^0,c
  6558                           
  6559                           ;stateMachine/gameController.c: 60:             }
  6560  0042CC  0012               	return	
  6561  0042CE                     l9782:
  6562                           
  6563                           ;stateMachine/gameController.c: 62:             {;stateMachine/gameController.c: 63:    
      +                                       gameControllerController(g,ev);
  6564  0042CE  C03C  F037         	movff	gameControllerSM@g,gameControllerController@g
  6565  0042D2  C03D  F038         	movff	gameControllerSM@g+1,gameControllerController@g+1
  6566  0042D6  C040  F039         	movff	gameControllerSM@ev,gameControllerController@ev
  6567  0042DA  ECF3  F010         	call	_gameControllerController	;wreg free
  6568  0042DE  0012               	return	
  6569  0042E0                     l9788:
  6570  0042E0  504D               	movf	_gameStateMachine^0,w,c
  6571  0042E2  6E3E               	movwf	??_gameControllerSM^0,c
  6572  0042E4  6A3F               	clrf	(??_gameControllerSM+1)^0,c
  6573                           
  6574                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6575                           ; Switch size 1, requested type "simple"
  6576                           ; Number of cases is 1, Range of values is 0 to 0
  6577                           ; switch strategies available:
  6578                           ; Name         Instructions Cycles
  6579                           ; simple_byte            4     3 (average)
  6580                           ;	Chosen strategy is simple_byte
  6581  0042E6  503F               	movf	(??_gameControllerSM+1)^0,w,c
  6582  0042E8  0A00               	xorlw	0	; case 0
  6583  0042EA  A4D8               	btfss	status,2,c
  6584  0042EC  0012               	return	
  6585                           
  6586                           ; Switch size 1, requested type "simple"
  6587                           ; Number of cases is 5, Range of values is 0 to 4
  6588                           ; switch strategies available:
  6589                           ; Name         Instructions Cycles
  6590                           ; simple_byte           16     9 (average)
  6591                           ;	Chosen strategy is simple_byte
  6592  0042EE  503E               	movf	??_gameControllerSM^0,w,c
  6593  0042F0  0A00               	xorlw	0	; case 0
  6594  0042F2  B4D8               	btfsc	status,2,c
  6595  0042F4  D7A9               	goto	l9754
  6596  0042F6  0A01               	xorlw	1	; case 1
  6597  0042F8  B4D8               	btfsc	status,2,c
  6598  0042FA  D7D3               	goto	l9772
  6599  0042FC  0A03               	xorlw	3	; case 2
  6600  0042FE  B4D8               	btfsc	status,2,c
  6601  004300  D7DF               	goto	l9778
  6602  004302  0A01               	xorlw	1	; case 3
  6603  004304  B4D8               	btfsc	status,2,c
  6604  004306  0012               	return	
  6605  004308  0A07               	xorlw	7	; case 4
  6606  00430A  A4D8               	btfss	status,2,c
  6607  00430C  0012               	return	
  6608  00430E  D7DF               	goto	l9782
  6609  004310                     __end_of_gameControllerSM:
  6610                           	callstack 0
  6611                           
  6612 ;; *************** function _gameControllerController *****************
  6613 ;; Defined at:
  6614 ;;		line 88 in file "stateMachine/gameController.c"
  6615 ;; Parameters:    Size  Location     Type
  6616 ;;  g               2   54[COMRAM] PTR struct GameParameter
  6617 ;;		 -> g1(216), 
  6618 ;;  ev              1   56[COMRAM] unsigned char 
  6619 ;; Auto vars:     Size  Location     Type
  6620 ;;		None
  6621 ;; Return value:  Size  Location     Type
  6622 ;;                  1    wreg      void 
  6623 ;; Registers used:
  6624 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6625 ;; Tracked objects:
  6626 ;;		On entry : 0/0
  6627 ;;		On exit  : 0/0
  6628 ;;		Unchanged: 0/0
  6629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6630 ;;      Params:         3       0       0       0       0       0       0
  6631 ;;      Locals:         0       0       0       0       0       0       0
  6632 ;;      Temps:          2       0       0       0       0       0       0
  6633 ;;      Totals:         5       0       0       0       0       0       0
  6634 ;;Total ram usage:        5 bytes
  6635 ;; Hardware stack levels used: 1
  6636 ;; Hardware stack levels required when called: 8
  6637 ;; This function calls:
  6638 ;;		_GameParameters_init
  6639 ;;		_GameParameters_resetPos
  6640 ;;		_LCD_InButton
  6641 ;;		_LCD_InSlider
  6642 ;;		_LCD_SliderUpdate
  6643 ;;		_XF_pushEvent
  6644 ;;		_XF_scheduleTimer
  6645 ;;		_backlightController
  6646 ;;		_levelController
  6647 ;;		_mooveBall
  6648 ;;		_moovePaddle1
  6649 ;;		_moovePaddle2
  6650 ;; This function is called by:
  6651 ;;		_gameControllerInit
  6652 ;;		_gameControllerSM
  6653 ;; This function uses a non-reentrant model
  6654 ;;
  6655                           
  6656                           	psect	text24
  6657  0021E6                     __ptext24:
  6658                           	callstack 0
  6659  0021E6                     _gameControllerController:
  6660                           	callstack 19
  6661                           
  6662                           ;stateMachine/gameController.c: 88: void gameControllerController(GameParameters* g,Even
      +                          t ev);stateMachine/gameController.c: 89: {;stateMachine/gameController.c: 90:     switch
      +                          (gameStateMachine)
  6663                           
  6664                           ;incstack = 0
  6665  0021E6  D171               	goto	l9264
  6666  0021E8                     l9220:
  6667                           
  6668                           ;stateMachine/gameController.c: 94:             if(LCD_InButton(&(g->btnParam),g->x,g->y
      +                          ))
  6669  0021E8  0E08               	movlw	8
  6670  0021EA  2437               	addwf	gameControllerController@g^0,w,c
  6671  0021EC  6E12               	movwf	LCD_InButton@button^0,c
  6672  0021EE  0E00               	movlw	0
  6673  0021F0  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6674  0021F2  6E13               	movwf	(LCD_InButton@button+1)^0,c
  6675  0021F4  EE20 F002          	lfsr	2,2
  6676  0021F8  5037               	movf	gameControllerController@g^0,w,c
  6677  0021FA  26D9               	addwf	fsr2l,f,c
  6678  0021FC  5038               	movf	(gameControllerController@g+1)^0,w,c
  6679  0021FE  22DA               	addwfc	fsr2h,f,c
  6680  002200  CFDE F014          	movff	postinc2,LCD_InButton@posX
  6681  002204  CFDD F015          	movff	postdec2,LCD_InButton@posX+1
  6682  002208  EE20 F004          	lfsr	2,4
  6683  00220C  5037               	movf	gameControllerController@g^0,w,c
  6684  00220E  26D9               	addwf	fsr2l,f,c
  6685  002210  5038               	movf	(gameControllerController@g+1)^0,w,c
  6686  002212  22DA               	addwfc	fsr2h,f,c
  6687  002214  CFDE F016          	movff	postinc2,LCD_InButton@posY
  6688  002218  CFDD F017          	movff	postdec2,LCD_InButton@posY+1
  6689  00221C  ECCD  F024         	call	_LCD_InButton	;wreg free
  6690  002220  0900               	iorlw	0
  6691  002222  B4D8               	btfsc	status,2,c
  6692  002224  D00B               	goto	l670
  6693                           
  6694                           ;stateMachine/gameController.c: 95:             {;stateMachine/gameController.c: 96:    
      +                                       XF_pushEvent(evParameters,0);
  6695  002226  0E00               	movlw	0
  6696  002228  6E18               	movwf	XF_pushEvent@inISR^0,c
  6697  00222A  0E07               	movlw	7
  6698  00222C  EC31  F029         	call	_XF_pushEvent
  6699                           
  6700                           ;stateMachine/gameController.c: 97:                 GameParameters_resetPos(g);
  6701  002230  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  6702  002234  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  6703  002238  ECA7  F02B         	call	_GameParameters_resetPos	;wreg free
  6704  00223C                     l670:
  6705                           
  6706                           ;stateMachine/gameController.c: 99:             if(LCD_InButton(&(g->btnOnePlayer),g->x,
      +                          g->y))
  6707  00223C  0E20               	movlw	32
  6708  00223E  2437               	addwf	gameControllerController@g^0,w,c
  6709  002240  6E12               	movwf	LCD_InButton@button^0,c
  6710  002242  0E00               	movlw	0
  6711  002244  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6712  002246  6E13               	movwf	(LCD_InButton@button+1)^0,c
  6713  002248  EE20 F002          	lfsr	2,2
  6714  00224C  5037               	movf	gameControllerController@g^0,w,c
  6715  00224E  26D9               	addwf	fsr2l,f,c
  6716  002250  5038               	movf	(gameControllerController@g+1)^0,w,c
  6717  002252  22DA               	addwfc	fsr2h,f,c
  6718  002254  CFDE F014          	movff	postinc2,LCD_InButton@posX
  6719  002258  CFDD F015          	movff	postdec2,LCD_InButton@posX+1
  6720  00225C  EE20 F004          	lfsr	2,4
  6721  002260  5037               	movf	gameControllerController@g^0,w,c
  6722  002262  26D9               	addwf	fsr2l,f,c
  6723  002264  5038               	movf	(gameControllerController@g+1)^0,w,c
  6724  002266  22DA               	addwfc	fsr2h,f,c
  6725  002268  CFDE F016          	movff	postinc2,LCD_InButton@posY
  6726  00226C  CFDD F017          	movff	postdec2,LCD_InButton@posY+1
  6727  002270  ECCD  F024         	call	_LCD_InButton	;wreg free
  6728  002274  0900               	iorlw	0
  6729  002276  B4D8               	btfsc	status,2,c
  6730  002278  D00B               	goto	l671
  6731                           
  6732                           ;stateMachine/gameController.c: 100:             {;stateMachine/gameController.c: 101:  
      +                                         XF_pushEvent(evOnePlayer,0);
  6733  00227A  0E00               	movlw	0
  6734  00227C  6E18               	movwf	XF_pushEvent@inISR^0,c
  6735  00227E  0E05               	movlw	5
  6736  002280  EC31  F029         	call	_XF_pushEvent
  6737                           
  6738                           ;stateMachine/gameController.c: 102:                 GameParameters_resetPos(g);
  6739  002284  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  6740  002288  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  6741  00228C  ECA7  F02B         	call	_GameParameters_resetPos	;wreg free
  6742  002290                     l671:
  6743                           
  6744                           ;stateMachine/gameController.c: 104:             if(LCD_InButton(&(g->btnTwoPlayer),g->x
      +                          ,g->y))
  6745  002290  0E38               	movlw	56
  6746  002292  2437               	addwf	gameControllerController@g^0,w,c
  6747  002294  6E12               	movwf	LCD_InButton@button^0,c
  6748  002296  0E00               	movlw	0
  6749  002298  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6750  00229A  6E13               	movwf	(LCD_InButton@button+1)^0,c
  6751  00229C  EE20 F002          	lfsr	2,2
  6752  0022A0  5037               	movf	gameControllerController@g^0,w,c
  6753  0022A2  26D9               	addwf	fsr2l,f,c
  6754  0022A4  5038               	movf	(gameControllerController@g+1)^0,w,c
  6755  0022A6  22DA               	addwfc	fsr2h,f,c
  6756  0022A8  CFDE F014          	movff	postinc2,LCD_InButton@posX
  6757  0022AC  CFDD F015          	movff	postdec2,LCD_InButton@posX+1
  6758  0022B0  EE20 F004          	lfsr	2,4
  6759  0022B4  5037               	movf	gameControllerController@g^0,w,c
  6760  0022B6  26D9               	addwf	fsr2l,f,c
  6761  0022B8  5038               	movf	(gameControllerController@g+1)^0,w,c
  6762  0022BA  22DA               	addwfc	fsr2h,f,c
  6763  0022BC  CFDE F016          	movff	postinc2,LCD_InButton@posY
  6764  0022C0  CFDD F017          	movff	postdec2,LCD_InButton@posY+1
  6765  0022C4  ECCD  F024         	call	_LCD_InButton	;wreg free
  6766  0022C8  0900               	iorlw	0
  6767  0022CA  B4D8               	btfsc	status,2,c
  6768  0022CC  0012               	return	
  6769                           
  6770                           ;stateMachine/gameController.c: 105:             {;stateMachine/gameController.c: 106:  
      +                                         XF_pushEvent(evTwoPlayer,0);
  6771  0022CE  0E00               	movlw	0
  6772  0022D0  6E18               	movwf	XF_pushEvent@inISR^0,c
  6773  0022D2  0E06               	movlw	6
  6774  0022D4  EC31  F029         	call	_XF_pushEvent
  6775                           
  6776                           ;stateMachine/gameController.c: 107:                 GameParameters_resetPos(g);
  6777  0022D8  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  6778  0022DC  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  6779  0022E0  ECA7  F02B         	call	_GameParameters_resetPos	;wreg free
  6780  0022E4  0012               	return	
  6781  0022E6                     l9228:
  6782                           
  6783                           ;stateMachine/gameController.c: 113:             if(LCD_InSlider(&(g->sldBackLight),g->x
      +                          ,g->y))
  6784  0022E6  0E80               	movlw	128
  6785  0022E8  2437               	addwf	gameControllerController@g^0,w,c
  6786  0022EA  6E12               	movwf	LCD_InSlider@slider^0,c
  6787  0022EC  0E00               	movlw	0
  6788  0022EE  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6789  0022F0  6E13               	movwf	(LCD_InSlider@slider+1)^0,c
  6790  0022F2  EE20 F002          	lfsr	2,2
  6791  0022F6  5037               	movf	gameControllerController@g^0,w,c
  6792  0022F8  26D9               	addwf	fsr2l,f,c
  6793  0022FA  5038               	movf	(gameControllerController@g+1)^0,w,c
  6794  0022FC  22DA               	addwfc	fsr2h,f,c
  6795  0022FE  CFDE F014          	movff	postinc2,LCD_InSlider@posX
  6796  002302  CFDD F015          	movff	postdec2,LCD_InSlider@posX+1
  6797  002306  EE20 F004          	lfsr	2,4
  6798  00230A  5037               	movf	gameControllerController@g^0,w,c
  6799  00230C  26D9               	addwf	fsr2l,f,c
  6800  00230E  5038               	movf	(gameControllerController@g+1)^0,w,c
  6801  002310  22DA               	addwfc	fsr2h,f,c
  6802  002312  CFDE F016          	movff	postinc2,LCD_InSlider@posY
  6803  002316  CFDD F017          	movff	postdec2,LCD_InSlider@posY+1
  6804  00231A  EC79  F024         	call	_LCD_InSlider	;wreg free
  6805  00231E  0900               	iorlw	0
  6806  002320  B4D8               	btfsc	status,2,c
  6807  002322  D014               	goto	l9234
  6808                           
  6809                           ;stateMachine/gameController.c: 114:             {;stateMachine/gameController.c: 115:  
      +                                         backlightController(g);
  6810  002324  C037  F018         	movff	gameControllerController@g,backlightController@g
  6811  002328  C038  F019         	movff	gameControllerController@g+1,backlightController@g+1
  6812  00232C  EC68  F00D         	call	_backlightController	;wreg free
  6813                           
  6814                           ;stateMachine/gameController.c: 116:                 LCD_SliderUpdate(&(g->sldBackLight)
      +                          );
  6815  002330  0E80               	movlw	128
  6816  002332  2437               	addwf	gameControllerController@g^0,w,c
  6817  002334  6E27               	movwf	LCD_SliderUpdate@slider^0,c
  6818  002336  0E00               	movlw	0
  6819  002338  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6820  00233A  6E28               	movwf	(LCD_SliderUpdate@slider+1)^0,c
  6821  00233C  EC82  F009         	call	_LCD_SliderUpdate	;wreg free
  6822                           
  6823                           ;stateMachine/gameController.c: 117:                 GameParameters_resetPos(g);
  6824  002340  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  6825  002344  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  6826  002348  ECA7  F02B         	call	_GameParameters_resetPos	;wreg free
  6827  00234C                     l9234:
  6828                           
  6829                           ;stateMachine/gameController.c: 119:             if(LCD_InSlider(&(g->sldLevel),g->x,g->
      +                          y))
  6830  00234C  0E99               	movlw	153
  6831  00234E  2437               	addwf	gameControllerController@g^0,w,c
  6832  002350  6E12               	movwf	LCD_InSlider@slider^0,c
  6833  002352  0E00               	movlw	0
  6834  002354  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6835  002356  6E13               	movwf	(LCD_InSlider@slider+1)^0,c
  6836  002358  EE20 F002          	lfsr	2,2
  6837  00235C  5037               	movf	gameControllerController@g^0,w,c
  6838  00235E  26D9               	addwf	fsr2l,f,c
  6839  002360  5038               	movf	(gameControllerController@g+1)^0,w,c
  6840  002362  22DA               	addwfc	fsr2h,f,c
  6841  002364  CFDE F014          	movff	postinc2,LCD_InSlider@posX
  6842  002368  CFDD F015          	movff	postdec2,LCD_InSlider@posX+1
  6843  00236C  EE20 F004          	lfsr	2,4
  6844  002370  5037               	movf	gameControllerController@g^0,w,c
  6845  002372  26D9               	addwf	fsr2l,f,c
  6846  002374  5038               	movf	(gameControllerController@g+1)^0,w,c
  6847  002376  22DA               	addwfc	fsr2h,f,c
  6848  002378  CFDE F016          	movff	postinc2,LCD_InSlider@posY
  6849  00237C  CFDD F017          	movff	postdec2,LCD_InSlider@posY+1
  6850  002380  EC79  F024         	call	_LCD_InSlider	;wreg free
  6851  002384  0900               	iorlw	0
  6852  002386  B4D8               	btfsc	status,2,c
  6853  002388  D014               	goto	l9242
  6854                           
  6855                           ;stateMachine/gameController.c: 120:             {;stateMachine/gameController.c: 121:  
      +                                         levelController(g);
  6856  00238A  C037  F016         	movff	gameControllerController@g,levelController@g
  6857  00238E  C038  F017         	movff	gameControllerController@g+1,levelController@g+1
  6858  002392  ECEE  F021         	call	_levelController	;wreg free
  6859                           
  6860                           ;stateMachine/gameController.c: 122:                 LCD_SliderUpdate(&(g->sldLevel));
  6861  002396  0E99               	movlw	153
  6862  002398  2437               	addwf	gameControllerController@g^0,w,c
  6863  00239A  6E27               	movwf	LCD_SliderUpdate@slider^0,c
  6864  00239C  0E00               	movlw	0
  6865  00239E  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6866  0023A0  6E28               	movwf	(LCD_SliderUpdate@slider+1)^0,c
  6867  0023A2  EC82  F009         	call	_LCD_SliderUpdate	;wreg free
  6868                           
  6869                           ;stateMachine/gameController.c: 123:                 GameParameters_resetPos(g);
  6870  0023A6  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  6871  0023AA  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  6872  0023AE  ECA7  F02B         	call	_GameParameters_resetPos	;wreg free
  6873  0023B2                     l9242:
  6874                           
  6875                           ;stateMachine/gameController.c: 126:             if(LCD_InButton(&(g->btnLeaveParam),g->
      +                          x,g->y))
  6876  0023B2  0E50               	movlw	80
  6877  0023B4  2437               	addwf	gameControllerController@g^0,w,c
  6878  0023B6  6E12               	movwf	LCD_InButton@button^0,c
  6879  0023B8  0E00               	movlw	0
  6880  0023BA  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6881  0023BC  6E13               	movwf	(LCD_InButton@button+1)^0,c
  6882  0023BE  EE20 F002          	lfsr	2,2
  6883  0023C2  5037               	movf	gameControllerController@g^0,w,c
  6884  0023C4  26D9               	addwf	fsr2l,f,c
  6885  0023C6  5038               	movf	(gameControllerController@g+1)^0,w,c
  6886  0023C8  22DA               	addwfc	fsr2h,f,c
  6887  0023CA  CFDE F014          	movff	postinc2,LCD_InButton@posX
  6888  0023CE  CFDD F015          	movff	postdec2,LCD_InButton@posX+1
  6889  0023D2  EE20 F004          	lfsr	2,4
  6890  0023D6  5037               	movf	gameControllerController@g^0,w,c
  6891  0023D8  26D9               	addwf	fsr2l,f,c
  6892  0023DA  5038               	movf	(gameControllerController@g+1)^0,w,c
  6893  0023DC  22DA               	addwfc	fsr2h,f,c
  6894  0023DE  CFDE F016          	movff	postinc2,LCD_InButton@posY
  6895  0023E2  CFDD F017          	movff	postdec2,LCD_InButton@posY+1
  6896  0023E6  ECCD  F024         	call	_LCD_InButton	;wreg free
  6897  0023EA  0900               	iorlw	0
  6898  0023EC  B4D8               	btfsc	status,2,c
  6899  0023EE  0012               	return	
  6900                           
  6901                           ;stateMachine/gameController.c: 127:             {;stateMachine/gameController.c: 128:  
      +                                         XF_pushEvent(evLeaveParam,0);
  6902  0023F0  0E00               	movlw	0
  6903  0023F2  6E18               	movwf	XF_pushEvent@inISR^0,c
  6904  0023F4  0E08               	movlw	8
  6905  0023F6  EC31  F029         	call	_XF_pushEvent
  6906                           
  6907                           ;stateMachine/gameController.c: 129:                 GameParameters_resetPos(g);
  6908  0023FA  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  6909  0023FE  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  6910  002402  ECA7  F02B         	call	_GameParameters_resetPos	;wreg free
  6911  002406  0012               	return	
  6912  002408                     l9246:
  6913                           
  6914                           ;stateMachine/gameController.c: 134:             if (ev==evTimerPos)
  6915  002408  0E04               	movlw	4
  6916  00240A  1839               	xorwf	gameControllerController@ev^0,w,c
  6917  00240C  A4D8               	btfss	status,2,c
  6918  00240E  D007               	goto	l9250
  6919                           
  6920                           ;stateMachine/gameController.c: 135:             {;stateMachine/gameController.c: 137:  
      +                                         moovePaddle1(g);
  6921  002410  C037  F01C         	movff	gameControllerController@g,moovePaddle1@g
  6922  002414  C038  F01D         	movff	gameControllerController@g+1,moovePaddle1@g+1
  6923  002418  EC23  F024         	call	_moovePaddle1	;wreg free
  6924                           
  6925                           ;stateMachine/gameController.c: 139:             }
  6926  00241C  0012               	return	
  6927  00241E                     l9250:
  6928  00241E  0E0A               	movlw	10
  6929  002420  1839               	xorwf	gameControllerController@ev^0,w,c
  6930  002422  A4D8               	btfss	status,2,c
  6931  002424  0012               	return	
  6932                           
  6933                           ;stateMachine/gameController.c: 141:             {;stateMachine/gameController.c: 143:  
      +                                         mooveBall(g);
  6934  002426  C037  F025         	movff	gameControllerController@g,mooveBall@g
  6935  00242A  C038  F026         	movff	gameControllerController@g+1,mooveBall@g+1
  6936  00242E  EC47  F02B         	call	_mooveBall	;wreg free
  6937                           
  6938                           ;stateMachine/gameController.c: 144:                 moovePaddle2(g);
  6939  002432  C037  F01C         	movff	gameControllerController@g,moovePaddle2@g
  6940  002436  C038  F01D         	movff	gameControllerController@g+1,moovePaddle2@g+1
  6941  00243A  ECAE  F020         	call	_moovePaddle2	;wreg free
  6942                           
  6943                           ;stateMachine/gameController.c: 145:                 XF_scheduleTimer(4-g->level,evGameU
      +                          pdate,1);
  6944  00243E  EE20 F006          	lfsr	2,6
  6945  002442  5037               	movf	gameControllerController@g^0,w,c
  6946  002444  26D9               	addwf	fsr2l,f,c
  6947  002446  5038               	movf	(gameControllerController@g+1)^0,w,c
  6948  002448  22DA               	addwfc	fsr2h,f,c
  6949  00244A  CFDE F03A          	movff	postinc2,??_gameControllerController
  6950  00244E  CFDD F03B          	movff	postdec2,??_gameControllerController+1
  6951  002452  503A               	movf	??_gameControllerController^0,w,c
  6952  002454  0804               	sublw	4
  6953  002456  6E13               	movwf	XF_scheduleTimer@tm^0,c
  6954  002458  503B               	movf	(??_gameControllerController+1)^0,w,c
  6955  00245A  A0D8               	btfss	status,0,c
  6956  00245C  2AE8               	incf	wreg,f,c
  6957  00245E  0800               	sublw	0
  6958  002460  6E14               	movwf	(XF_scheduleTimer@tm+1)^0,c
  6959  002462  0E0A               	movlw	10
  6960  002464  6E15               	movwf	XF_scheduleTimer@ev^0,c
  6961  002466  0E01               	movlw	1
  6962  002468  6E16               	movwf	XF_scheduleTimer@inISR^0,c
  6963  00246A  EC5A  F029         	call	_XF_scheduleTimer	;wreg free
  6964  00246E  0012               	return	
  6965  002470                     l9256:
  6966                           
  6967                           ;stateMachine/gameController.c: 154:             if(LCD_InButton(&(g->btnNewGame),g->x,g
      +                          ->y))
  6968  002470  0E68               	movlw	104
  6969  002472  2437               	addwf	gameControllerController@g^0,w,c
  6970  002474  6E12               	movwf	LCD_InButton@button^0,c
  6971  002476  0E00               	movlw	0
  6972  002478  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6973  00247A  6E13               	movwf	(LCD_InButton@button+1)^0,c
  6974  00247C  EE20 F002          	lfsr	2,2
  6975  002480  5037               	movf	gameControllerController@g^0,w,c
  6976  002482  26D9               	addwf	fsr2l,f,c
  6977  002484  5038               	movf	(gameControllerController@g+1)^0,w,c
  6978  002486  22DA               	addwfc	fsr2h,f,c
  6979  002488  CFDE F014          	movff	postinc2,LCD_InButton@posX
  6980  00248C  CFDD F015          	movff	postdec2,LCD_InButton@posX+1
  6981  002490  EE20 F004          	lfsr	2,4
  6982  002494  5037               	movf	gameControllerController@g^0,w,c
  6983  002496  26D9               	addwf	fsr2l,f,c
  6984  002498  5038               	movf	(gameControllerController@g+1)^0,w,c
  6985  00249A  22DA               	addwfc	fsr2h,f,c
  6986  00249C  CFDE F016          	movff	postinc2,LCD_InButton@posY
  6987  0024A0  CFDD F017          	movff	postdec2,LCD_InButton@posY+1
  6988  0024A4  ECCD  F024         	call	_LCD_InButton	;wreg free
  6989  0024A8  0900               	iorlw	0
  6990  0024AA  B4D8               	btfsc	status,2,c
  6991  0024AC  0012               	return	
  6992                           
  6993                           ;stateMachine/gameController.c: 155:             {;stateMachine/gameController.c: 157:  
      +                                         GameParameters_init(g);
  6994  0024AE  C037  F02B         	movff	gameControllerController@g,GameParameters_init@s
  6995  0024B2  C038  F02C         	movff	gameControllerController@g+1,GameParameters_init@s+1
  6996  0024B6  EC32  F00F         	call	_GameParameters_init	;wreg free
  6997                           
  6998                           ;stateMachine/gameController.c: 158:                 XF_pushEvent(evNewGame,0);
  6999  0024BA  0E00               	movlw	0
  7000  0024BC  6E18               	movwf	XF_pushEvent@inISR^0,c
  7001  0024BE  0E0F               	movlw	15
  7002  0024C0  EC31  F029         	call	_XF_pushEvent
  7003                           
  7004                           ;stateMachine/gameController.c: 159:                 gameStateMachine=NOGAME;
  7005  0024C4  0E00               	movlw	0
  7006  0024C6  6E4D               	movwf	_gameStateMachine^0,c
  7007  0024C8  0012               	return	
  7008  0024CA                     l9264:
  7009  0024CA  504D               	movf	_gameStateMachine^0,w,c
  7010  0024CC  6E3A               	movwf	??_gameControllerController^0,c
  7011  0024CE  6A3B               	clrf	(??_gameControllerController+1)^0,c
  7012                           
  7013                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7014                           ; Switch size 1, requested type "simple"
  7015                           ; Number of cases is 1, Range of values is 0 to 0
  7016                           ; switch strategies available:
  7017                           ; Name         Instructions Cycles
  7018                           ; simple_byte            4     3 (average)
  7019                           ;	Chosen strategy is simple_byte
  7020  0024D0  503B               	movf	(??_gameControllerController+1)^0,w,c
  7021  0024D2  0A00               	xorlw	0	; case 0
  7022  0024D4  A4D8               	btfss	status,2,c
  7023  0024D6  0012               	return	
  7024                           
  7025                           ; Switch size 1, requested type "simple"
  7026                           ; Number of cases is 5, Range of values is 0 to 4
  7027                           ; switch strategies available:
  7028                           ; Name         Instructions Cycles
  7029                           ; simple_byte           16     9 (average)
  7030                           ;	Chosen strategy is simple_byte
  7031  0024D8  503A               	movf	??_gameControllerController^0,w,c
  7032  0024DA  0A00               	xorlw	0	; case 0
  7033  0024DC  B4D8               	btfsc	status,2,c
  7034  0024DE  D684               	goto	l9220
  7035  0024E0  0A01               	xorlw	1	; case 1
  7036  0024E2  B4D8               	btfsc	status,2,c
  7037  0024E4  D700               	goto	l9228
  7038  0024E6  0A03               	xorlw	3	; case 2
  7039  0024E8  B4D8               	btfsc	status,2,c
  7040  0024EA  D78E               	goto	l9246
  7041  0024EC  0A01               	xorlw	1	; case 3
  7042  0024EE  B4D8               	btfsc	status,2,c
  7043  0024F0  0012               	return	
  7044  0024F2  0A07               	xorlw	7	; case 4
  7045  0024F4  A4D8               	btfss	status,2,c
  7046  0024F6  0012               	return	
  7047  0024F8  D7BB               	goto	l9256
  7048  0024FA                     __end_of_gameControllerController:
  7049                           	callstack 0
  7050                           
  7051 ;; *************** function _moovePaddle2 *****************
  7052 ;; Defined at:
  7053 ;;		line 25 in file "gameFunction.c"
  7054 ;; Parameters:    Size  Location     Type
  7055 ;;  g               2   27[COMRAM] PTR struct GameParameter
  7056 ;;		 -> g1(216), 
  7057 ;; Auto vars:     Size  Location     Type
  7058 ;;		None
  7059 ;; Return value:  Size  Location     Type
  7060 ;;                  1    wreg      void 
  7061 ;; Registers used:
  7062 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7063 ;; Tracked objects:
  7064 ;;		On entry : 0/0
  7065 ;;		On exit  : 0/0
  7066 ;;		Unchanged: 0/0
  7067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7068 ;;      Params:         2       0       0       0       0       0       0
  7069 ;;      Locals:         0       0       0       0       0       0       0
  7070 ;;      Temps:          6       0       0       0       0       0       0
  7071 ;;      Totals:         8       0       0       0       0       0       0
  7072 ;;Total ram usage:        8 bytes
  7073 ;; Hardware stack levels used: 1
  7074 ;; Hardware stack levels required when called: 6
  7075 ;; This function calls:
  7076 ;;		_Paddle_addX
  7077 ;;		_XF_pushEvent
  7078 ;; This function is called by:
  7079 ;;		_gameControllerController
  7080 ;; This function uses a non-reentrant model
  7081 ;;
  7082                           
  7083                           	psect	text25
  7084  00415C                     __ptext25:
  7085                           	callstack 0
  7086  00415C                     _moovePaddle2:
  7087                           	callstack 20
  7088                           
  7089                           ;gameFunction.c: 25: void moovePaddle2(GameParameters* g);gameFunction.c: 26: {;gameFunc
      +                          tion.c: 28:     if(g->p2.x+(50/2)<g->b.x-2)
  7090                           
  7091                           ;incstack = 0
  7092  00415C  0EFE               	movlw	254
  7093  00415E  6E1E               	movwf	??_moovePaddle2^0,c
  7094  004160  0EFF               	movlw	255
  7095  004162  6E1F               	movwf	(??_moovePaddle2+1)^0,c
  7096  004164  EE20 F0B2          	lfsr	2,178
  7097  004168  501C               	movf	moovePaddle2@g^0,w,c
  7098  00416A  26D9               	addwf	fsr2l,f,c
  7099  00416C  501D               	movf	(moovePaddle2@g+1)^0,w,c
  7100  00416E  22DA               	addwfc	fsr2h,f,c
  7101  004170  CFDE F020          	movff	postinc2,??_moovePaddle2+2
  7102  004174  CFDD F021          	movff	postdec2,??_moovePaddle2+3
  7103  004178  501E               	movf	??_moovePaddle2^0,w,c
  7104  00417A  2620               	addwf	(??_moovePaddle2+2)^0,f,c
  7105  00417C  501F               	movf	(??_moovePaddle2+1)^0,w,c
  7106  00417E  2221               	addwfc	(??_moovePaddle2+3)^0,f,c
  7107  004180  EE20 F0C8          	lfsr	2,200
  7108  004184  501C               	movf	moovePaddle2@g^0,w,c
  7109  004186  26D9               	addwf	fsr2l,f,c
  7110  004188  501D               	movf	(moovePaddle2@g+1)^0,w,c
  7111  00418A  22DA               	addwfc	fsr2h,f,c
  7112  00418C  CFDE F022          	movff	postinc2,??_moovePaddle2+4
  7113  004190  CFDD F023          	movff	postdec2,??_moovePaddle2+5
  7114  004194  0E19               	movlw	25
  7115  004196  2622               	addwf	(??_moovePaddle2+4)^0,f,c
  7116  004198  0E00               	movlw	0
  7117  00419A  2223               	addwfc	(??_moovePaddle2+5)^0,f,c
  7118  00419C  5020               	movf	(??_moovePaddle2+2)^0,w,c
  7119  00419E  5C22               	subwf	(??_moovePaddle2+4)^0,w,c
  7120  0041A0  5021               	movf	(??_moovePaddle2+3)^0,w,c
  7121  0041A2  5823               	subwfb	(??_moovePaddle2+5)^0,w,c
  7122  0041A4  B0D8               	btfsc	status,0,c
  7123  0041A6  D016               	goto	l9142
  7124                           
  7125                           ;gameFunction.c: 29:     {;gameFunction.c: 30:         Paddle_addX(&g->p2,2,1);
  7126  0041A8  0EC8               	movlw	200
  7127  0041AA  241C               	addwf	moovePaddle2@g^0,w,c
  7128  0041AC  6E12               	movwf	Paddle_addX@p^0,c
  7129  0041AE  0E00               	movlw	0
  7130  0041B0  201D               	addwfc	(moovePaddle2@g+1)^0,w,c
  7131  0041B2  6E13               	movwf	(Paddle_addX@p+1)^0,c
  7132  0041B4  0E00               	movlw	0
  7133  0041B6  6E15               	movwf	(Paddle_addX@value+1)^0,c
  7134  0041B8  0E02               	movlw	2
  7135  0041BA  6E14               	movwf	Paddle_addX@value^0,c
  7136  0041BC  0E00               	movlw	0
  7137  0041BE  6E17               	movwf	(Paddle_addX@add+1)^0,c
  7138  0041C0  0E01               	movlw	1
  7139  0041C2  6E16               	movwf	Paddle_addX@add^0,c
  7140  0041C4  EC53  F022         	call	_Paddle_addX	;wreg free
  7141                           
  7142                           ;gameFunction.c: 31:         XF_pushEvent(evRedrawPaddle2,0);
  7143  0041C8  0E00               	movlw	0
  7144  0041CA  6E18               	movwf	XF_pushEvent@inISR^0,c
  7145  0041CC  0E0C               	movlw	12
  7146  0041CE  EC31  F029         	call	_XF_pushEvent
  7147                           
  7148                           ;gameFunction.c: 32:     }
  7149  0041D2  0012               	return	
  7150  0041D4                     l9142:
  7151  0041D4  EE20 F0C8          	lfsr	2,200
  7152  0041D8  501C               	movf	moovePaddle2@g^0,w,c
  7153  0041DA  26D9               	addwf	fsr2l,f,c
  7154  0041DC  501D               	movf	(moovePaddle2@g+1)^0,w,c
  7155  0041DE  22DA               	addwfc	fsr2h,f,c
  7156  0041E0  CFDE F01E          	movff	postinc2,??_moovePaddle2
  7157  0041E4  CFDD F01F          	movff	postdec2,??_moovePaddle2+1
  7158  0041E8  0E19               	movlw	25
  7159  0041EA  261E               	addwf	??_moovePaddle2^0,f,c
  7160  0041EC  0E00               	movlw	0
  7161  0041EE  221F               	addwfc	(??_moovePaddle2+1)^0,f,c
  7162  0041F0  EE20 F0B2          	lfsr	2,178
  7163  0041F4  501C               	movf	moovePaddle2@g^0,w,c
  7164  0041F6  26D9               	addwf	fsr2l,f,c
  7165  0041F8  501D               	movf	(moovePaddle2@g+1)^0,w,c
  7166  0041FA  22DA               	addwfc	fsr2h,f,c
  7167  0041FC  CFDE F020          	movff	postinc2,??_moovePaddle2+2
  7168  004200  CFDD F021          	movff	postdec2,??_moovePaddle2+3
  7169  004204  0E02               	movlw	2
  7170  004206  2620               	addwf	(??_moovePaddle2+2)^0,f,c
  7171  004208  0E00               	movlw	0
  7172  00420A  2221               	addwfc	(??_moovePaddle2+3)^0,f,c
  7173  00420C  501E               	movf	??_moovePaddle2^0,w,c
  7174  00420E  5C20               	subwf	(??_moovePaddle2+2)^0,w,c
  7175  004210  501F               	movf	(??_moovePaddle2+1)^0,w,c
  7176  004212  5821               	subwfb	(??_moovePaddle2+3)^0,w,c
  7177  004214  B0D8               	btfsc	status,0,c
  7178  004216  0012               	return	
  7179                           
  7180                           ;gameFunction.c: 34:     {;gameFunction.c: 35:         Paddle_addX(&g->p2,2,0);
  7181  004218  0EC8               	movlw	200
  7182  00421A  241C               	addwf	moovePaddle2@g^0,w,c
  7183  00421C  6E12               	movwf	Paddle_addX@p^0,c
  7184  00421E  0E00               	movlw	0
  7185  004220  201D               	addwfc	(moovePaddle2@g+1)^0,w,c
  7186  004222  6E13               	movwf	(Paddle_addX@p+1)^0,c
  7187  004224  0E00               	movlw	0
  7188  004226  6E15               	movwf	(Paddle_addX@value+1)^0,c
  7189  004228  0E02               	movlw	2
  7190  00422A  6E14               	movwf	Paddle_addX@value^0,c
  7191  00422C  0E00               	movlw	0
  7192  00422E  6E17               	movwf	(Paddle_addX@add+1)^0,c
  7193  004230  0E00               	movlw	0
  7194  004232  6E16               	movwf	Paddle_addX@add^0,c
  7195  004234  EC53  F022         	call	_Paddle_addX	;wreg free
  7196                           
  7197                           ;gameFunction.c: 36:         XF_pushEvent(evRedrawPaddle2,0);
  7198  004238  0E00               	movlw	0
  7199  00423A  6E18               	movwf	XF_pushEvent@inISR^0,c
  7200  00423C  0E0C               	movlw	12
  7201  00423E  EC31  F029         	call	_XF_pushEvent
  7202  004242  0012               	return		;funcret
  7203  004244                     __end_of_moovePaddle2:
  7204                           	callstack 0
  7205                           
  7206 ;; *************** function _moovePaddle1 *****************
  7207 ;; Defined at:
  7208 ;;		line 5 in file "gameFunction.c"
  7209 ;; Parameters:    Size  Location     Type
  7210 ;;  g               2   27[COMRAM] PTR struct GameParameter
  7211 ;;		 -> g1(216), 
  7212 ;; Auto vars:     Size  Location     Type
  7213 ;;		None
  7214 ;; Return value:  Size  Location     Type
  7215 ;;                  1    wreg      void 
  7216 ;; Registers used:
  7217 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7218 ;; Tracked objects:
  7219 ;;		On entry : 0/0
  7220 ;;		On exit  : 0/0
  7221 ;;		Unchanged: 0/0
  7222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7223 ;;      Params:         2       0       0       0       0       0       0
  7224 ;;      Locals:         0       0       0       0       0       0       0
  7225 ;;      Temps:          2       0       0       0       0       0       0
  7226 ;;      Totals:         4       0       0       0       0       0       0
  7227 ;;Total ram usage:        4 bytes
  7228 ;; Hardware stack levels used: 1
  7229 ;; Hardware stack levels required when called: 6
  7230 ;; This function calls:
  7231 ;;		_GameParameters_resetPos
  7232 ;;		_Paddle_addX
  7233 ;;		_XF_pushEvent
  7234 ;; This function is called by:
  7235 ;;		_gameControllerController
  7236 ;; This function uses a non-reentrant model
  7237 ;;
  7238                           
  7239                           	psect	text26
  7240  004846                     __ptext26:
  7241                           	callstack 0
  7242  004846                     _moovePaddle1:
  7243                           	callstack 20
  7244                           
  7245                           ;gameFunction.c: 5: void moovePaddle1(GameParameters* g);gameFunction.c: 6: {;gameFuncti
      +                          on.c: 8:     if((g->x>0)&&(g->x<110))
  7246                           
  7247                           ;incstack = 0
  7248  004846  EE20 F002          	lfsr	2,2
  7249  00484A  501C               	movf	moovePaddle1@g^0,w,c
  7250  00484C  26D9               	addwf	fsr2l,f,c
  7251  00484E  501D               	movf	(moovePaddle1@g+1)^0,w,c
  7252  004850  22DA               	addwfc	fsr2h,f,c
  7253  004852  50DE               	movf	postinc2,w,c
  7254  004854  10DE               	iorwf	postinc2,w,c
  7255  004856  B4D8               	btfsc	status,2,c
  7256  004858  D023               	goto	l9132
  7257  00485A  EE20 F002          	lfsr	2,2
  7258  00485E  501C               	movf	moovePaddle1@g^0,w,c
  7259  004860  26D9               	addwf	fsr2l,f,c
  7260  004862  501D               	movf	(moovePaddle1@g+1)^0,w,c
  7261  004864  22DA               	addwfc	fsr2h,f,c
  7262  004866  0E01               	movlw	1
  7263  004868  50DB               	movf	plusw2,w,c
  7264  00486A  E11A               	bnz	l9132
  7265  00486C  0E6E               	movlw	110
  7266  00486E  5CDE               	subwf	postinc2,w,c
  7267  004870  B0D8               	btfsc	status,0,c
  7268  004872  D016               	goto	l9132
  7269                           
  7270                           ;gameFunction.c: 9:     {;gameFunction.c: 10:         GameParameters_resetPos(g);
  7271  004874  C01C  F012         	movff	moovePaddle1@g,GameParameters_resetPos@s
  7272  004878  C01D  F013         	movff	moovePaddle1@g+1,GameParameters_resetPos@s+1
  7273  00487C  ECA7  F02B         	call	_GameParameters_resetPos	;wreg free
  7274                           
  7275                           ;gameFunction.c: 11:         Paddle_addX(&g->p1,20,0);
  7276  004880  0EBE               	movlw	190
  7277  004882  241C               	addwf	moovePaddle1@g^0,w,c
  7278  004884  6E12               	movwf	Paddle_addX@p^0,c
  7279  004886  0E00               	movlw	0
  7280  004888  201D               	addwfc	(moovePaddle1@g+1)^0,w,c
  7281  00488A  6E13               	movwf	(Paddle_addX@p+1)^0,c
  7282  00488C  0E00               	movlw	0
  7283  00488E  6E15               	movwf	(Paddle_addX@value+1)^0,c
  7284  004890  0E14               	movlw	20
  7285  004892  6E14               	movwf	Paddle_addX@value^0,c
  7286  004894  0E00               	movlw	0
  7287  004896  6E17               	movwf	(Paddle_addX@add+1)^0,c
  7288  004898  0E00               	movlw	0
  7289  00489A  6E16               	movwf	Paddle_addX@add^0,c
  7290  00489C  EC53  F022         	call	_Paddle_addX	;wreg free
  7291  0048A0                     l9132:
  7292                           
  7293                           ;gameFunction.c: 14:     if(g->x>=130)
  7294  0048A0  EE20 F002          	lfsr	2,2
  7295  0048A4  501C               	movf	moovePaddle1@g^0,w,c
  7296  0048A6  26D9               	addwf	fsr2l,f,c
  7297  0048A8  501D               	movf	(moovePaddle1@g+1)^0,w,c
  7298  0048AA  22DA               	addwfc	fsr2h,f,c
  7299  0048AC  0E01               	movlw	1
  7300  0048AE  50DB               	movf	plusw2,w,c
  7301  0048B0  E104               	bnz	u6720
  7302  0048B2  0E82               	movlw	130
  7303  0048B4  5CDE               	subwf	postinc2,w,c
  7304  0048B6  A0D8               	btfss	status,0,c
  7305  0048B8  D016               	goto	l799
  7306  0048BA                     u6720:
  7307                           
  7308                           ;gameFunction.c: 15:     {;gameFunction.c: 16:         GameParameters_resetPos(g);
  7309  0048BA  C01C  F012         	movff	moovePaddle1@g,GameParameters_resetPos@s
  7310  0048BE  C01D  F013         	movff	moovePaddle1@g+1,GameParameters_resetPos@s+1
  7311  0048C2  ECA7  F02B         	call	_GameParameters_resetPos	;wreg free
  7312                           
  7313                           ;gameFunction.c: 17:         Paddle_addX(&g->p1,20,1);
  7314  0048C6  0EBE               	movlw	190
  7315  0048C8  241C               	addwf	moovePaddle1@g^0,w,c
  7316  0048CA  6E12               	movwf	Paddle_addX@p^0,c
  7317  0048CC  0E00               	movlw	0
  7318  0048CE  201D               	addwfc	(moovePaddle1@g+1)^0,w,c
  7319  0048D0  6E13               	movwf	(Paddle_addX@p+1)^0,c
  7320  0048D2  0E00               	movlw	0
  7321  0048D4  6E15               	movwf	(Paddle_addX@value+1)^0,c
  7322  0048D6  0E14               	movlw	20
  7323  0048D8  6E14               	movwf	Paddle_addX@value^0,c
  7324  0048DA  0E00               	movlw	0
  7325  0048DC  6E17               	movwf	(Paddle_addX@add+1)^0,c
  7326  0048DE  0E01               	movlw	1
  7327  0048E0  6E16               	movwf	Paddle_addX@add^0,c
  7328  0048E2  EC53  F022         	call	_Paddle_addX	;wreg free
  7329  0048E6                     l799:
  7330                           
  7331                           ;gameFunction.c: 19:     XF_pushEvent(evRedrawPaddle1,0);
  7332  0048E6  0E00               	movlw	0
  7333  0048E8  6E18               	movwf	XF_pushEvent@inISR^0,c
  7334  0048EA  0E0B               	movlw	11
  7335  0048EC  EC31  F029         	call	_XF_pushEvent
  7336  0048F0  0012               	return		;funcret
  7337  0048F2                     __end_of_moovePaddle1:
  7338                           	callstack 0
  7339                           
  7340 ;; *************** function _Paddle_addX *****************
  7341 ;; Defined at:
  7342 ;;		line 28 in file "class/paddle.c"
  7343 ;; Parameters:    Size  Location     Type
  7344 ;;  p               2   17[COMRAM] PTR struct Paddle
  7345 ;;		 -> g1(216), 
  7346 ;;  value           2   19[COMRAM] unsigned short 
  7347 ;;  add             2   21[COMRAM] unsigned short 
  7348 ;; Auto vars:     Size  Location     Type
  7349 ;;		None
  7350 ;; Return value:  Size  Location     Type
  7351 ;;                  1    wreg      void 
  7352 ;; Registers used:
  7353 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7354 ;; Tracked objects:
  7355 ;;		On entry : 0/0
  7356 ;;		On exit  : 0/0
  7357 ;;		Unchanged: 0/0
  7358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7359 ;;      Params:         6       0       0       0       0       0       0
  7360 ;;      Locals:         0       0       0       0       0       0       0
  7361 ;;      Temps:          4       0       0       0       0       0       0
  7362 ;;      Totals:        10       0       0       0       0       0       0
  7363 ;;Total ram usage:       10 bytes
  7364 ;; Hardware stack levels used: 1
  7365 ;; Hardware stack levels required when called: 4
  7366 ;; This function calls:
  7367 ;;		Nothing
  7368 ;; This function is called by:
  7369 ;;		_moovePaddle1
  7370 ;;		_moovePaddle2
  7371 ;; This function uses a non-reentrant model
  7372 ;;
  7373                           
  7374                           	psect	text27
  7375  0044A6                     __ptext27:
  7376                           	callstack 0
  7377  0044A6                     _Paddle_addX:
  7378                           	callstack 21
  7379                           
  7380                           ;class/paddle.c: 28: void Paddle_addX(struct Paddle* p,uint16_t value,uint16_t add);clas
      +                          s/paddle.c: 29: {;class/paddle.c: 30:     if(add==1)
  7381                           
  7382                           ;incstack = 0
  7383  0044A6  0416               	decf	Paddle_addX@add^0,w,c
  7384  0044A8  1017               	iorwf	(Paddle_addX@add+1)^0,w,c
  7385  0044AA  A4D8               	btfss	status,2,c
  7386  0044AC  D02F               	goto	l6472
  7387                           
  7388                           ;class/paddle.c: 31:     {;class/paddle.c: 32:         p->x=(p->x)+value;
  7389  0044AE  C012  FFD9         	movff	Paddle_addX@p,fsr2l
  7390  0044B2  C013  FFDA         	movff	Paddle_addX@p+1,fsr2h
  7391  0044B6  CFDE F018          	movff	postinc2,??_Paddle_addX
  7392  0044BA  CFDD F019          	movff	postdec2,??_Paddle_addX+1
  7393  0044BE  5014               	movf	Paddle_addX@value^0,w,c
  7394  0044C0  2618               	addwf	??_Paddle_addX^0,f,c
  7395  0044C2  5015               	movf	(Paddle_addX@value+1)^0,w,c
  7396  0044C4  2219               	addwfc	(??_Paddle_addX+1)^0,f,c
  7397  0044C6  C012  FFD9         	movff	Paddle_addX@p,fsr2l
  7398  0044CA  C013  FFDA         	movff	Paddle_addX@p+1,fsr2h
  7399  0044CE  C018  FFDE         	movff	??_Paddle_addX,postinc2
  7400  0044D2  C019  FFDD         	movff	??_Paddle_addX+1,postdec2
  7401                           
  7402                           ;class/paddle.c: 33:         if((p->x+50)>239)
  7403  0044D6  C012  FFD9         	movff	Paddle_addX@p,fsr2l
  7404  0044DA  C013  FFDA         	movff	Paddle_addX@p+1,fsr2h
  7405  0044DE  CFDE F018          	movff	postinc2,??_Paddle_addX
  7406  0044E2  CFDD F019          	movff	postdec2,??_Paddle_addX+1
  7407  0044E6  0E32               	movlw	50
  7408  0044E8  2618               	addwf	??_Paddle_addX^0,f,c
  7409  0044EA  0E00               	movlw	0
  7410  0044EC  2219               	addwfc	(??_Paddle_addX+1)^0,f,c
  7411  0044EE  5019               	movf	(??_Paddle_addX+1)^0,w,c
  7412  0044F0  E104               	bnz	u3940
  7413  0044F2  0EF0               	movlw	240
  7414  0044F4  5C18               	subwf	??_Paddle_addX^0,w,c
  7415  0044F6  A0D8               	btfss	status,0,c
  7416  0044F8  0012               	return	
  7417  0044FA                     u3940:
  7418                           
  7419                           ;class/paddle.c: 34:         {;class/paddle.c: 35:             p->x=239-(50);
  7420  0044FA  C012  FFD9         	movff	Paddle_addX@p,fsr2l
  7421  0044FE  C013  FFDA         	movff	Paddle_addX@p+1,fsr2h
  7422  004502  0EBD               	movlw	189
  7423  004504  6EDE               	movwf	postinc2,c
  7424  004506  0E00               	movlw	0
  7425  004508  6EDD               	movwf	postdec2,c
  7426  00450A  0012               	return	
  7427  00450C                     l6472:
  7428                           
  7429                           ;class/paddle.c: 39:     {;class/paddle.c: 40:         if((p->x)<value+1)
  7430  00450C  0E01               	movlw	1
  7431  00450E  2414               	addwf	Paddle_addX@value^0,w,c
  7432  004510  6E18               	movwf	??_Paddle_addX^0,c
  7433  004512  0E00               	movlw	0
  7434  004514  2015               	addwfc	(Paddle_addX@value+1)^0,w,c
  7435  004516  6E19               	movwf	(??_Paddle_addX+1)^0,c
  7436  004518  C012  FFD9         	movff	Paddle_addX@p,fsr2l
  7437  00451C  C013  FFDA         	movff	Paddle_addX@p+1,fsr2h
  7438  004520  5018               	movf	??_Paddle_addX^0,w,c
  7439  004522  5CDE               	subwf	postinc2,w,c
  7440  004524  5019               	movf	(??_Paddle_addX+1)^0,w,c
  7441  004526  58DE               	subwfb	postinc2,w,c
  7442  004528  B0D8               	btfsc	status,0,c
  7443  00452A  D009               	goto	l6476
  7444                           
  7445                           ;class/paddle.c: 41:         {;class/paddle.c: 42:             p->x=0;
  7446  00452C  C012  FFD9         	movff	Paddle_addX@p,fsr2l
  7447  004530  C013  FFDA         	movff	Paddle_addX@p+1,fsr2h
  7448  004534  0E00               	movlw	0
  7449  004536  6EDE               	movwf	postinc2,c
  7450  004538  0E00               	movlw	0
  7451  00453A  6EDD               	movwf	postdec2,c
  7452                           
  7453                           ;class/paddle.c: 43:         }
  7454  00453C  0012               	return	
  7455  00453E                     l6476:
  7456                           
  7457                           ;class/paddle.c: 45:         {;class/paddle.c: 46:             p->x=(p->x)-value;
  7458  00453E  C012  FFD9         	movff	Paddle_addX@p,fsr2l
  7459  004542  C013  FFDA         	movff	Paddle_addX@p+1,fsr2h
  7460  004546  CFDE F018          	movff	postinc2,??_Paddle_addX
  7461  00454A  CFDD F019          	movff	postdec2,??_Paddle_addX+1
  7462  00454E  5014               	movf	Paddle_addX@value^0,w,c
  7463  004550  5E18               	subwf	??_Paddle_addX^0,f,c
  7464  004552  5015               	movf	(Paddle_addX@value+1)^0,w,c
  7465  004554  5A19               	subwfb	(??_Paddle_addX+1)^0,f,c
  7466  004556  C012  FFD9         	movff	Paddle_addX@p,fsr2l
  7467  00455A  C013  FFDA         	movff	Paddle_addX@p+1,fsr2h
  7468  00455E  C018  FFDE         	movff	??_Paddle_addX,postinc2
  7469  004562  C019  FFDD         	movff	??_Paddle_addX+1,postdec2
  7470  004566  0012               	return		;funcret
  7471  004568                     __end_of_Paddle_addX:
  7472                           	callstack 0
  7473                           
  7474 ;; *************** function _GameParameters_resetPos *****************
  7475 ;; Defined at:
  7476 ;;		line 58 in file "class/gameParameters.c"
  7477 ;; Parameters:    Size  Location     Type
  7478 ;;  s               2   17[COMRAM] PTR struct GameParameter
  7479 ;;		 -> g1(216), 
  7480 ;; Auto vars:     Size  Location     Type
  7481 ;;		None
  7482 ;; Return value:  Size  Location     Type
  7483 ;;                  1    wreg      void 
  7484 ;; Registers used:
  7485 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7486 ;; Tracked objects:
  7487 ;;		On entry : 0/0
  7488 ;;		On exit  : 0/0
  7489 ;;		Unchanged: 0/0
  7490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7491 ;;      Params:         2       0       0       0       0       0       0
  7492 ;;      Locals:         0       0       0       0       0       0       0
  7493 ;;      Temps:          0       0       0       0       0       0       0
  7494 ;;      Totals:         2       0       0       0       0       0       0
  7495 ;;Total ram usage:        2 bytes
  7496 ;; Hardware stack levels used: 1
  7497 ;; Hardware stack levels required when called: 4
  7498 ;; This function calls:
  7499 ;;		Nothing
  7500 ;; This function is called by:
  7501 ;;		_gameControllerController
  7502 ;;		_moovePaddle1
  7503 ;; This function uses a non-reentrant model
  7504 ;;
  7505                           
  7506                           	psect	text28
  7507  00574E                     __ptext28:
  7508                           	callstack 0
  7509  00574E                     _GameParameters_resetPos:
  7510                           	callstack 21
  7511                           
  7512                           ;class/gameParameters.c: 58: void GameParameters_resetPos(struct GameParameters* s);clas
      +                          s/gameParameters.c: 59: {;class/gameParameters.c: 60:     s->x=0;
  7513                           
  7514                           ;incstack = 0
  7515  00574E  EE20 F002          	lfsr	2,2
  7516  005752  5012               	movf	GameParameters_resetPos@s^0,w,c
  7517  005754  26D9               	addwf	fsr2l,f,c
  7518  005756  5013               	movf	(GameParameters_resetPos@s+1)^0,w,c
  7519  005758  22DA               	addwfc	fsr2h,f,c
  7520  00575A  0E00               	movlw	0
  7521  00575C  6EDE               	movwf	postinc2,c
  7522  00575E  0E00               	movlw	0
  7523  005760  6EDD               	movwf	postdec2,c
  7524                           
  7525                           ;class/gameParameters.c: 61:     s->y=0;
  7526  005762  EE20 F004          	lfsr	2,4
  7527  005766  5012               	movf	GameParameters_resetPos@s^0,w,c
  7528  005768  26D9               	addwf	fsr2l,f,c
  7529  00576A  5013               	movf	(GameParameters_resetPos@s+1)^0,w,c
  7530  00576C  22DA               	addwfc	fsr2h,f,c
  7531  00576E  0E00               	movlw	0
  7532  005770  6EDE               	movwf	postinc2,c
  7533  005772  0E00               	movlw	0
  7534  005774  6EDD               	movwf	postdec2,c
  7535  005776  0012               	return		;funcret
  7536  005778                     __end_of_GameParameters_resetPos:
  7537                           	callstack 0
  7538                           
  7539 ;; *************** function _mooveBall *****************
  7540 ;; Defined at:
  7541 ;;		line 44 in file "gameFunction.c"
  7542 ;; Parameters:    Size  Location     Type
  7543 ;;  g               2   36[COMRAM] PTR struct GameParameter
  7544 ;;		 -> g1(216), 
  7545 ;; Auto vars:     Size  Location     Type
  7546 ;;		None
  7547 ;; Return value:  Size  Location     Type
  7548 ;;                  1    wreg      void 
  7549 ;; Registers used:
  7550 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7551 ;; Tracked objects:
  7552 ;;		On entry : 0/0
  7553 ;;		On exit  : 0/0
  7554 ;;		Unchanged: 0/0
  7555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7556 ;;      Params:         2       0       0       0       0       0       0
  7557 ;;      Locals:         0       0       0       0       0       0       0
  7558 ;;      Temps:          0       0       0       0       0       0       0
  7559 ;;      Totals:         2       0       0       0       0       0       0
  7560 ;;Total ram usage:        2 bytes
  7561 ;; Hardware stack levels used: 1
  7562 ;; Hardware stack levels required when called: 7
  7563 ;; This function calls:
  7564 ;;		_Ball_Update
  7565 ;;		_XF_pushEvent
  7566 ;;		_checkCollision
  7567 ;; This function is called by:
  7568 ;;		_gameControllerController
  7569 ;; This function uses a non-reentrant model
  7570 ;;
  7571                           
  7572                           	psect	text29
  7573  00568E                     __ptext29:
  7574                           	callstack 0
  7575  00568E                     _mooveBall:
  7576                           	callstack 19
  7577                           
  7578                           ;gameFunction.c: 44: void mooveBall(GameParameters* g);gameFunction.c: 45: {;gameFunctio
      +                          n.c: 46:     checkCollision(g);
  7579                           
  7580                           ;incstack = 0
  7581  00568E  C025  F01B         	movff	mooveBall@g,checkCollision@g
  7582  005692  C026  F01C         	movff	mooveBall@g+1,checkCollision@g+1
  7583  005696  EC39  F000         	call	_checkCollision	;wreg free
  7584                           
  7585                           ;gameFunction.c: 47:     Ball_Update(&g->b);
  7586  00569A  0EB2               	movlw	178
  7587  00569C  2425               	addwf	mooveBall@g^0,w,c
  7588  00569E  6E12               	movwf	Ball_Update@b^0,c
  7589  0056A0  0E00               	movlw	0
  7590  0056A2  2026               	addwfc	(mooveBall@g+1)^0,w,c
  7591  0056A4  6E13               	movwf	(Ball_Update@b+1)^0,c
  7592  0056A6  EC6D  F027         	call	_Ball_Update	;wreg free
  7593                           
  7594                           ;gameFunction.c: 48:     XF_pushEvent(evRedrawBall,0);
  7595  0056AA  0E00               	movlw	0
  7596  0056AC  6E18               	movwf	XF_pushEvent@inISR^0,c
  7597  0056AE  0E0D               	movlw	13
  7598  0056B0  EC31  F029         	call	_XF_pushEvent
  7599                           
  7600                           ;gameFunction.c: 49:     XF_pushEvent(evRedrawScore,0);
  7601  0056B4  0E00               	movlw	0
  7602  0056B6  6E18               	movwf	XF_pushEvent@inISR^0,c
  7603  0056B8  0E0E               	movlw	14
  7604  0056BA  EC31  F029         	call	_XF_pushEvent
  7605  0056BE  0012               	return		;funcret
  7606  0056C0                     __end_of_mooveBall:
  7607                           	callstack 0
  7608                           
  7609 ;; *************** function _checkCollision *****************
  7610 ;; Defined at:
  7611 ;;		line 55 in file "gameFunction.c"
  7612 ;; Parameters:    Size  Location     Type
  7613 ;;  g               2   26[COMRAM] PTR struct GameParameter
  7614 ;;		 -> g1(216), 
  7615 ;; Auto vars:     Size  Location     Type
  7616 ;;  s              20    0        unsigned char [20]
  7617 ;; Return value:  Size  Location     Type
  7618 ;;                  1    wreg      void 
  7619 ;; Registers used:
  7620 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7621 ;; Tracked objects:
  7622 ;;		On entry : 0/0
  7623 ;;		On exit  : 0/0
  7624 ;;		Unchanged: 0/0
  7625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7626 ;;      Params:         2       0       0       0       0       0       0
  7627 ;;      Locals:         0       0       0       0       0       0       0
  7628 ;;      Temps:          8       0       0       0       0       0       0
  7629 ;;      Totals:        10       0       0       0       0       0       0
  7630 ;;Total ram usage:       10 bytes
  7631 ;; Hardware stack levels used: 1
  7632 ;; Hardware stack levels required when called: 6
  7633 ;; This function calls:
  7634 ;;		_XF_pushEvent
  7635 ;; This function is called by:
  7636 ;;		_mooveBall
  7637 ;; This function uses a non-reentrant model
  7638 ;;
  7639                           
  7640                           	psect	text30
  7641  000072                     __ptext30:
  7642                           	callstack 0
  7643  000072                     _checkCollision:
  7644                           	callstack 19
  7645                           
  7646                           ;gameFunction.c: 55: void checkCollision(GameParameters* g);gameFunction.c: 56: {;gameFu
      +                          nction.c: 57:     char s[20];;gameFunction.c: 59:     if(g->b.x+g->b.dx+8>=239)
  7647                           
  7648                           ;incstack = 0
  7649  000072  EE20 F0BA          	lfsr	2,186
  7650  000076  501B               	movf	checkCollision@g^0,w,c
  7651  000078  26D9               	addwf	fsr2l,f,c
  7652  00007A  501C               	movf	(checkCollision@g+1)^0,w,c
  7653  00007C  22DA               	addwfc	fsr2h,f,c
  7654  00007E  CFDE F01D          	movff	postinc2,??_checkCollision
  7655  000082  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7656  000086  EE20 F0B2          	lfsr	2,178
  7657  00008A  501B               	movf	checkCollision@g^0,w,c
  7658  00008C  26D9               	addwf	fsr2l,f,c
  7659  00008E  501C               	movf	(checkCollision@g+1)^0,w,c
  7660  000090  22DA               	addwfc	fsr2h,f,c
  7661  000092  CFDE F01F          	movff	postinc2,??_checkCollision+2
  7662  000096  CFDD F020          	movff	postdec2,??_checkCollision+3
  7663  00009A  501D               	movf	??_checkCollision^0,w,c
  7664  00009C  261F               	addwf	(??_checkCollision+2)^0,f,c
  7665  00009E  501E               	movf	(??_checkCollision+1)^0,w,c
  7666  0000A0  2220               	addwfc	(??_checkCollision+3)^0,f,c
  7667  0000A2  0E08               	movlw	8
  7668  0000A4  261F               	addwf	(??_checkCollision+2)^0,f,c
  7669  0000A6  0E00               	movlw	0
  7670  0000A8  2220               	addwfc	(??_checkCollision+3)^0,f,c
  7671  0000AA  5020               	movf	(??_checkCollision+3)^0,w,c
  7672  0000AC  E104               	bnz	u6490
  7673  0000AE  0EEF               	movlw	239
  7674  0000B0  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  7675  0000B2  A0D8               	btfss	status,0,c
  7676  0000B4  D02C               	goto	l812
  7677  0000B6                     u6490:
  7678                           
  7679                           ;gameFunction.c: 60:     {;gameFunction.c: 61:         g->b.dx=-g->b.dx;
  7680  0000B6  EE20 F0BA          	lfsr	2,186
  7681  0000BA  501B               	movf	checkCollision@g^0,w,c
  7682  0000BC  26D9               	addwf	fsr2l,f,c
  7683  0000BE  501C               	movf	(checkCollision@g+1)^0,w,c
  7684  0000C0  22DA               	addwfc	fsr2h,f,c
  7685  0000C2  CFDE F01D          	movff	postinc2,??_checkCollision
  7686  0000C6  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7687  0000CA  1E1D               	comf	??_checkCollision^0,f,c
  7688  0000CC  1E1E               	comf	(??_checkCollision+1)^0,f,c
  7689  0000CE  4A1D               	infsnz	??_checkCollision^0,f,c
  7690  0000D0  2A1E               	incf	(??_checkCollision+1)^0,f,c
  7691  0000D2  EE20 F0BA          	lfsr	2,186
  7692  0000D6  501B               	movf	checkCollision@g^0,w,c
  7693  0000D8  26D9               	addwf	fsr2l,f,c
  7694  0000DA  501C               	movf	(checkCollision@g+1)^0,w,c
  7695  0000DC  22DA               	addwfc	fsr2h,f,c
  7696  0000DE  C01D  FFDE         	movff	??_checkCollision,postinc2
  7697  0000E2  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  7698                           
  7699                           ;gameFunction.c: 62:         g->b.x+=g->b.dx;
  7700  0000E6  EE20 F0BA          	lfsr	2,186
  7701  0000EA  501B               	movf	checkCollision@g^0,w,c
  7702  0000EC  26D9               	addwf	fsr2l,f,c
  7703  0000EE  501C               	movf	(checkCollision@g+1)^0,w,c
  7704  0000F0  22DA               	addwfc	fsr2h,f,c
  7705  0000F2  CFDE F01D          	movff	postinc2,??_checkCollision
  7706  0000F6  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7707  0000FA  EE20 F0B2          	lfsr	2,178
  7708  0000FE  501B               	movf	checkCollision@g^0,w,c
  7709  000100  26D9               	addwf	fsr2l,f,c
  7710  000102  501C               	movf	(checkCollision@g+1)^0,w,c
  7711  000104  22DA               	addwfc	fsr2h,f,c
  7712  000106  501D               	movf	??_checkCollision^0,w,c
  7713  000108  26DE               	addwf	postinc2,f,c
  7714  00010A  501E               	movf	(??_checkCollision+1)^0,w,c
  7715  00010C  22DD               	addwfc	postdec2,f,c
  7716  00010E                     l812:
  7717                           
  7718                           ;gameFunction.c: 64:     if((int)(g->b.x+g->b.dx-8)<=1)
  7719  00010E  0EF8               	movlw	248
  7720  000110  6E1D               	movwf	??_checkCollision^0,c
  7721  000112  0EFF               	movlw	255
  7722  000114  6E1E               	movwf	(??_checkCollision+1)^0,c
  7723  000116  EE20 F0BA          	lfsr	2,186
  7724  00011A  501B               	movf	checkCollision@g^0,w,c
  7725  00011C  26D9               	addwf	fsr2l,f,c
  7726  00011E  501C               	movf	(checkCollision@g+1)^0,w,c
  7727  000120  22DA               	addwfc	fsr2h,f,c
  7728  000122  CFDE F01F          	movff	postinc2,??_checkCollision+2
  7729  000126  CFDD F020          	movff	postdec2,??_checkCollision+3
  7730  00012A  EE20 F0B2          	lfsr	2,178
  7731  00012E  501B               	movf	checkCollision@g^0,w,c
  7732  000130  26D9               	addwf	fsr2l,f,c
  7733  000132  501C               	movf	(checkCollision@g+1)^0,w,c
  7734  000134  22DA               	addwfc	fsr2h,f,c
  7735  000136  CFDE F021          	movff	postinc2,??_checkCollision+4
  7736  00013A  CFDD F022          	movff	postdec2,??_checkCollision+5
  7737  00013E  501F               	movf	(??_checkCollision+2)^0,w,c
  7738  000140  2621               	addwf	(??_checkCollision+4)^0,f,c
  7739  000142  5020               	movf	(??_checkCollision+3)^0,w,c
  7740  000144  2222               	addwfc	(??_checkCollision+5)^0,f,c
  7741  000146  501D               	movf	??_checkCollision^0,w,c
  7742  000148  2621               	addwf	(??_checkCollision+4)^0,f,c
  7743  00014A  501E               	movf	(??_checkCollision+1)^0,w,c
  7744  00014C  2222               	addwfc	(??_checkCollision+5)^0,f,c
  7745  00014E  BE22               	btfsc	(??_checkCollision+5)^0,7,c
  7746  000150  D006               	goto	u6500
  7747  000152  5022               	movf	(??_checkCollision+5)^0,w,c
  7748  000154  E130               	bnz	l813
  7749  000156  0E02               	movlw	2
  7750  000158  5C21               	subwf	(??_checkCollision+4)^0,w,c
  7751  00015A  B0D8               	btfsc	status,0,c
  7752  00015C  D02C               	goto	l813
  7753  00015E                     u6500:
  7754                           
  7755                           ;gameFunction.c: 65:     {;gameFunction.c: 66:         g->b.dx=-g->b.dx;
  7756  00015E  EE20 F0BA          	lfsr	2,186
  7757  000162  501B               	movf	checkCollision@g^0,w,c
  7758  000164  26D9               	addwf	fsr2l,f,c
  7759  000166  501C               	movf	(checkCollision@g+1)^0,w,c
  7760  000168  22DA               	addwfc	fsr2h,f,c
  7761  00016A  CFDE F01D          	movff	postinc2,??_checkCollision
  7762  00016E  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7763  000172  1E1D               	comf	??_checkCollision^0,f,c
  7764  000174  1E1E               	comf	(??_checkCollision+1)^0,f,c
  7765  000176  4A1D               	infsnz	??_checkCollision^0,f,c
  7766  000178  2A1E               	incf	(??_checkCollision+1)^0,f,c
  7767  00017A  EE20 F0BA          	lfsr	2,186
  7768  00017E  501B               	movf	checkCollision@g^0,w,c
  7769  000180  26D9               	addwf	fsr2l,f,c
  7770  000182  501C               	movf	(checkCollision@g+1)^0,w,c
  7771  000184  22DA               	addwfc	fsr2h,f,c
  7772  000186  C01D  FFDE         	movff	??_checkCollision,postinc2
  7773  00018A  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  7774                           
  7775                           ;gameFunction.c: 67:         g->b.x+=g->b.dx;
  7776  00018E  EE20 F0BA          	lfsr	2,186
  7777  000192  501B               	movf	checkCollision@g^0,w,c
  7778  000194  26D9               	addwf	fsr2l,f,c
  7779  000196  501C               	movf	(checkCollision@g+1)^0,w,c
  7780  000198  22DA               	addwfc	fsr2h,f,c
  7781  00019A  CFDE F01D          	movff	postinc2,??_checkCollision
  7782  00019E  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7783  0001A2  EE20 F0B2          	lfsr	2,178
  7784  0001A6  501B               	movf	checkCollision@g^0,w,c
  7785  0001A8  26D9               	addwf	fsr2l,f,c
  7786  0001AA  501C               	movf	(checkCollision@g+1)^0,w,c
  7787  0001AC  22DA               	addwfc	fsr2h,f,c
  7788  0001AE  501D               	movf	??_checkCollision^0,w,c
  7789  0001B0  26DE               	addwf	postinc2,f,c
  7790  0001B2  501E               	movf	(??_checkCollision+1)^0,w,c
  7791  0001B4  22DD               	addwfc	postdec2,f,c
  7792  0001B6                     l813:
  7793                           
  7794                           ;gameFunction.c: 70:     if(g->b.y+8==g->p1.y-1)
  7795  0001B6  0EFF               	movlw	255
  7796  0001B8  6E1D               	movwf	??_checkCollision^0,c
  7797  0001BA  0EFF               	movlw	255
  7798  0001BC  6E1E               	movwf	(??_checkCollision+1)^0,c
  7799  0001BE  EE20 F0C0          	lfsr	2,192
  7800  0001C2  501B               	movf	checkCollision@g^0,w,c
  7801  0001C4  26D9               	addwf	fsr2l,f,c
  7802  0001C6  501C               	movf	(checkCollision@g+1)^0,w,c
  7803  0001C8  22DA               	addwfc	fsr2h,f,c
  7804  0001CA  CFDE F01F          	movff	postinc2,??_checkCollision+2
  7805  0001CE  CFDD F020          	movff	postdec2,??_checkCollision+3
  7806  0001D2  501D               	movf	??_checkCollision^0,w,c
  7807  0001D4  261F               	addwf	(??_checkCollision+2)^0,f,c
  7808  0001D6  501E               	movf	(??_checkCollision+1)^0,w,c
  7809  0001D8  2220               	addwfc	(??_checkCollision+3)^0,f,c
  7810  0001DA  EE20 F0B4          	lfsr	2,180
  7811  0001DE  501B               	movf	checkCollision@g^0,w,c
  7812  0001E0  26D9               	addwf	fsr2l,f,c
  7813  0001E2  501C               	movf	(checkCollision@g+1)^0,w,c
  7814  0001E4  22DA               	addwfc	fsr2h,f,c
  7815  0001E6  CFDE F021          	movff	postinc2,??_checkCollision+4
  7816  0001EA  CFDD F022          	movff	postdec2,??_checkCollision+5
  7817  0001EE  0E08               	movlw	8
  7818  0001F0  2621               	addwf	(??_checkCollision+4)^0,f,c
  7819  0001F2  0E00               	movlw	0
  7820  0001F4  2222               	addwfc	(??_checkCollision+5)^0,f,c
  7821  0001F6  501F               	movf	(??_checkCollision+2)^0,w,c
  7822  0001F8  1821               	xorwf	(??_checkCollision+4)^0,w,c
  7823  0001FA  E103               	bnz	u6511
  7824  0001FC  5020               	movf	(??_checkCollision+3)^0,w,c
  7825  0001FE  1822               	xorwf	(??_checkCollision+5)^0,w,c
  7826  000200  A4D8               	btfss	status,2,c
  7827  000202                     u6511:
  7828  000202  D17D               	goto	l9006
  7829                           
  7830                           ;gameFunction.c: 71:     {;gameFunction.c: 72:         if(g->b.x+8>g->p1.x)
  7831  000204  EE20 F0B2          	lfsr	2,178
  7832  000208  501B               	movf	checkCollision@g^0,w,c
  7833  00020A  26D9               	addwf	fsr2l,f,c
  7834  00020C  501C               	movf	(checkCollision@g+1)^0,w,c
  7835  00020E  22DA               	addwfc	fsr2h,f,c
  7836  000210  CFDE F01D          	movff	postinc2,??_checkCollision
  7837  000214  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7838  000218  0E08               	movlw	8
  7839  00021A  261D               	addwf	??_checkCollision^0,f,c
  7840  00021C  0E00               	movlw	0
  7841  00021E  221E               	addwfc	(??_checkCollision+1)^0,f,c
  7842  000220  EE20 F0BE          	lfsr	2,190
  7843  000224  501B               	movf	checkCollision@g^0,w,c
  7844  000226  26D9               	addwf	fsr2l,f,c
  7845  000228  501C               	movf	(checkCollision@g+1)^0,w,c
  7846  00022A  22DA               	addwfc	fsr2h,f,c
  7847  00022C  501D               	movf	??_checkCollision^0,w,c
  7848  00022E  5CDE               	subwf	postinc2,w,c
  7849  000230  501E               	movf	(??_checkCollision+1)^0,w,c
  7850  000232  58DE               	subwfb	postinc2,w,c
  7851  000234  B0D8               	btfsc	status,0,c
  7852  000236  D163               	goto	l9006
  7853                           
  7854                           ;gameFunction.c: 73:         {;gameFunction.c: 74:             if(g->b.x-8<g->p1.x+50)
  7855  000238  EE20 F0BE          	lfsr	2,190
  7856  00023C  501B               	movf	checkCollision@g^0,w,c
  7857  00023E  26D9               	addwf	fsr2l,f,c
  7858  000240  501C               	movf	(checkCollision@g+1)^0,w,c
  7859  000242  22DA               	addwfc	fsr2h,f,c
  7860  000244  CFDE F01D          	movff	postinc2,??_checkCollision
  7861  000248  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7862  00024C  0E32               	movlw	50
  7863  00024E  261D               	addwf	??_checkCollision^0,f,c
  7864  000250  0E00               	movlw	0
  7865  000252  221E               	addwfc	(??_checkCollision+1)^0,f,c
  7866  000254  0EF8               	movlw	248
  7867  000256  6E1F               	movwf	(??_checkCollision+2)^0,c
  7868  000258  0EFF               	movlw	255
  7869  00025A  6E20               	movwf	(??_checkCollision+3)^0,c
  7870  00025C  EE20 F0B2          	lfsr	2,178
  7871  000260  501B               	movf	checkCollision@g^0,w,c
  7872  000262  26D9               	addwf	fsr2l,f,c
  7873  000264  501C               	movf	(checkCollision@g+1)^0,w,c
  7874  000266  22DA               	addwfc	fsr2h,f,c
  7875  000268  CFDE F021          	movff	postinc2,??_checkCollision+4
  7876  00026C  CFDD F022          	movff	postdec2,??_checkCollision+5
  7877  000270  501F               	movf	(??_checkCollision+2)^0,w,c
  7878  000272  2621               	addwf	(??_checkCollision+4)^0,f,c
  7879  000274  5020               	movf	(??_checkCollision+3)^0,w,c
  7880  000276  2222               	addwfc	(??_checkCollision+5)^0,f,c
  7881  000278  501D               	movf	??_checkCollision^0,w,c
  7882  00027A  5C21               	subwf	(??_checkCollision+4)^0,w,c
  7883  00027C  501E               	movf	(??_checkCollision+1)^0,w,c
  7884  00027E  5822               	subwfb	(??_checkCollision+5)^0,w,c
  7885  000280  B0D8               	btfsc	status,0,c
  7886  000282  D13D               	goto	l9006
  7887                           
  7888                           ;gameFunction.c: 75:             {;gameFunction.c: 77:                 if(g->b.x-g->p1.x
      +                          <10)
  7889  000284  EE20 F0BE          	lfsr	2,190
  7890  000288  501B               	movf	checkCollision@g^0,w,c
  7891  00028A  26D9               	addwf	fsr2l,f,c
  7892  00028C  501C               	movf	(checkCollision@g+1)^0,w,c
  7893  00028E  22DA               	addwfc	fsr2h,f,c
  7894  000290  CFDE F01D          	movff	postinc2,??_checkCollision
  7895  000294  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7896  000298  EE20 F0B2          	lfsr	2,178
  7897  00029C  501B               	movf	checkCollision@g^0,w,c
  7898  00029E  26D9               	addwf	fsr2l,f,c
  7899  0002A0  501C               	movf	(checkCollision@g+1)^0,w,c
  7900  0002A2  22DA               	addwfc	fsr2h,f,c
  7901  0002A4  CFDE F01F          	movff	postinc2,??_checkCollision+2
  7902  0002A8  CFDD F020          	movff	postdec2,??_checkCollision+3
  7903  0002AC  501D               	movf	??_checkCollision^0,w,c
  7904  0002AE  5E1F               	subwf	(??_checkCollision+2)^0,f,c
  7905  0002B0  501E               	movf	(??_checkCollision+1)^0,w,c
  7906  0002B2  5A20               	subwfb	(??_checkCollision+3)^0,f,c
  7907  0002B4  5020               	movf	(??_checkCollision+3)^0,w,c
  7908  0002B6  E126               	bnz	l8990
  7909  0002B8  0E0A               	movlw	10
  7910  0002BA  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  7911  0002BC  B0D8               	btfsc	status,0,c
  7912  0002BE  D022               	goto	l8990
  7913                           
  7914                           ;gameFunction.c: 78:                 {;gameFunction.c: 80:                     g->b.dy=-
      +                          g->b.dy;
  7915  0002C0  EE20 F0BC          	lfsr	2,188
  7916  0002C4  501B               	movf	checkCollision@g^0,w,c
  7917  0002C6  26D9               	addwf	fsr2l,f,c
  7918  0002C8  501C               	movf	(checkCollision@g+1)^0,w,c
  7919  0002CA  22DA               	addwfc	fsr2h,f,c
  7920  0002CC  CFDE F01D          	movff	postinc2,??_checkCollision
  7921  0002D0  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7922  0002D4  1E1D               	comf	??_checkCollision^0,f,c
  7923  0002D6  1E1E               	comf	(??_checkCollision+1)^0,f,c
  7924  0002D8  4A1D               	infsnz	??_checkCollision^0,f,c
  7925  0002DA  2A1E               	incf	(??_checkCollision+1)^0,f,c
  7926  0002DC  EE20 F0BC          	lfsr	2,188
  7927  0002E0  501B               	movf	checkCollision@g^0,w,c
  7928  0002E2  26D9               	addwf	fsr2l,f,c
  7929  0002E4  501C               	movf	(checkCollision@g+1)^0,w,c
  7930  0002E6  22DA               	addwfc	fsr2h,f,c
  7931  0002E8  C01D  FFDE         	movff	??_checkCollision,postinc2
  7932  0002EC  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  7933                           
  7934                           ;gameFunction.c: 81:                     g->b.dx-=2;
  7935  0002F0  EE20 F0BA          	lfsr	2,186
  7936  0002F4  501B               	movf	checkCollision@g^0,w,c
  7937  0002F6  26D9               	addwf	fsr2l,f,c
  7938  0002F8  501C               	movf	(checkCollision@g+1)^0,w,c
  7939  0002FA  22DA               	addwfc	fsr2h,f,c
  7940  0002FC  0EFE               	movlw	254
  7941  0002FE  26DE               	addwf	postinc2,f,c
  7942  000300  0EFF               	movlw	255
  7943  000302  D0EE               	goto	L3
  7944  000304                     l8990:
  7945  000304  EE20 F0BE          	lfsr	2,190
  7946  000308  501B               	movf	checkCollision@g^0,w,c
  7947  00030A  26D9               	addwf	fsr2l,f,c
  7948  00030C  501C               	movf	(checkCollision@g+1)^0,w,c
  7949  00030E  22DA               	addwfc	fsr2h,f,c
  7950  000310  CFDE F01D          	movff	postinc2,??_checkCollision
  7951  000314  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7952  000318  EE20 F0B2          	lfsr	2,178
  7953  00031C  501B               	movf	checkCollision@g^0,w,c
  7954  00031E  26D9               	addwf	fsr2l,f,c
  7955  000320  501C               	movf	(checkCollision@g+1)^0,w,c
  7956  000322  22DA               	addwfc	fsr2h,f,c
  7957  000324  CFDE F01F          	movff	postinc2,??_checkCollision+2
  7958  000328  CFDD F020          	movff	postdec2,??_checkCollision+3
  7959  00032C  501D               	movf	??_checkCollision^0,w,c
  7960  00032E  5E1F               	subwf	(??_checkCollision+2)^0,f,c
  7961  000330  501E               	movf	(??_checkCollision+1)^0,w,c
  7962  000332  5A20               	subwfb	(??_checkCollision+3)^0,f,c
  7963  000334  5020               	movf	(??_checkCollision+3)^0,w,c
  7964  000336  E126               	bnz	l8994
  7965  000338  0E14               	movlw	20
  7966  00033A  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  7967  00033C  B0D8               	btfsc	status,0,c
  7968  00033E  D022               	goto	l8994
  7969                           
  7970                           ;gameFunction.c: 84:                 {;gameFunction.c: 86:                     g->b.dy=-
      +                          g->b.dy;
  7971  000340  EE20 F0BC          	lfsr	2,188
  7972  000344  501B               	movf	checkCollision@g^0,w,c
  7973  000346  26D9               	addwf	fsr2l,f,c
  7974  000348  501C               	movf	(checkCollision@g+1)^0,w,c
  7975  00034A  22DA               	addwfc	fsr2h,f,c
  7976  00034C  CFDE F01D          	movff	postinc2,??_checkCollision
  7977  000350  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7978  000354  1E1D               	comf	??_checkCollision^0,f,c
  7979  000356  1E1E               	comf	(??_checkCollision+1)^0,f,c
  7980  000358  4A1D               	infsnz	??_checkCollision^0,f,c
  7981  00035A  2A1E               	incf	(??_checkCollision+1)^0,f,c
  7982  00035C  EE20 F0BC          	lfsr	2,188
  7983  000360  501B               	movf	checkCollision@g^0,w,c
  7984  000362  26D9               	addwf	fsr2l,f,c
  7985  000364  501C               	movf	(checkCollision@g+1)^0,w,c
  7986  000366  22DA               	addwfc	fsr2h,f,c
  7987  000368  C01D  FFDE         	movff	??_checkCollision,postinc2
  7988  00036C  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  7989                           
  7990                           ;gameFunction.c: 87:                     g->b.dx-=1;
  7991  000370  EE20 F0BA          	lfsr	2,186
  7992  000374  501B               	movf	checkCollision@g^0,w,c
  7993  000376  26D9               	addwf	fsr2l,f,c
  7994  000378  501C               	movf	(checkCollision@g+1)^0,w,c
  7995  00037A  22DA               	addwfc	fsr2h,f,c
  7996  00037C  06DE               	decf	postinc2,f,c
  7997  00037E  0E00               	movlw	0
  7998  000380  5ADD               	subwfb	postdec2,f,c
  7999                           
  8000                           ;gameFunction.c: 88:                 }
  8001  000382  D0AF               	goto	l818
  8002  000384                     l8994:
  8003  000384  EE20 F0BE          	lfsr	2,190
  8004  000388  501B               	movf	checkCollision@g^0,w,c
  8005  00038A  26D9               	addwf	fsr2l,f,c
  8006  00038C  501C               	movf	(checkCollision@g+1)^0,w,c
  8007  00038E  22DA               	addwfc	fsr2h,f,c
  8008  000390  CFDE F01D          	movff	postinc2,??_checkCollision
  8009  000394  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8010  000398  EE20 F0B2          	lfsr	2,178
  8011  00039C  501B               	movf	checkCollision@g^0,w,c
  8012  00039E  26D9               	addwf	fsr2l,f,c
  8013  0003A0  501C               	movf	(checkCollision@g+1)^0,w,c
  8014  0003A2  22DA               	addwfc	fsr2h,f,c
  8015  0003A4  CFDE F01F          	movff	postinc2,??_checkCollision+2
  8016  0003A8  CFDD F020          	movff	postdec2,??_checkCollision+3
  8017  0003AC  501D               	movf	??_checkCollision^0,w,c
  8018  0003AE  5E1F               	subwf	(??_checkCollision+2)^0,f,c
  8019  0003B0  501E               	movf	(??_checkCollision+1)^0,w,c
  8020  0003B2  5A20               	subwfb	(??_checkCollision+3)^0,f,c
  8021  0003B4  5020               	movf	(??_checkCollision+3)^0,w,c
  8022  0003B6  E135               	bnz	l8998
  8023  0003B8  0E1E               	movlw	30
  8024  0003BA  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  8025  0003BC  B0D8               	btfsc	status,0,c
  8026  0003BE  D031               	goto	l8998
  8027                           
  8028                           ;gameFunction.c: 90:                 {;gameFunction.c: 92:                     g->b.dx=-
      +                          g->b.dx;
  8029  0003C0  EE20 F0BA          	lfsr	2,186
  8030  0003C4  501B               	movf	checkCollision@g^0,w,c
  8031  0003C6  26D9               	addwf	fsr2l,f,c
  8032  0003C8  501C               	movf	(checkCollision@g+1)^0,w,c
  8033  0003CA  22DA               	addwfc	fsr2h,f,c
  8034  0003CC  CFDE F01D          	movff	postinc2,??_checkCollision
  8035  0003D0  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8036  0003D4  1E1D               	comf	??_checkCollision^0,f,c
  8037  0003D6  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8038  0003D8  4A1D               	infsnz	??_checkCollision^0,f,c
  8039  0003DA  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8040  0003DC  EE20 F0BA          	lfsr	2,186
  8041  0003E0  501B               	movf	checkCollision@g^0,w,c
  8042  0003E2  26D9               	addwf	fsr2l,f,c
  8043  0003E4  501C               	movf	(checkCollision@g+1)^0,w,c
  8044  0003E6  22DA               	addwfc	fsr2h,f,c
  8045  0003E8  C01D  FFDE         	movff	??_checkCollision,postinc2
  8046  0003EC  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8047                           
  8048                           ;gameFunction.c: 93:                     g->b.dy=-g->b.dy;
  8049  0003F0  EE20 F0BC          	lfsr	2,188
  8050  0003F4  501B               	movf	checkCollision@g^0,w,c
  8051  0003F6  26D9               	addwf	fsr2l,f,c
  8052  0003F8  501C               	movf	(checkCollision@g+1)^0,w,c
  8053  0003FA  22DA               	addwfc	fsr2h,f,c
  8054  0003FC  CFDE F01D          	movff	postinc2,??_checkCollision
  8055  000400  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8056  000404  1E1D               	comf	??_checkCollision^0,f,c
  8057  000406  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8058  000408  4A1D               	infsnz	??_checkCollision^0,f,c
  8059  00040A  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8060  00040C  EE20 F0BC          	lfsr	2,188
  8061  000410  501B               	movf	checkCollision@g^0,w,c
  8062  000412  26D9               	addwf	fsr2l,f,c
  8063  000414  501C               	movf	(checkCollision@g+1)^0,w,c
  8064  000416  22DA               	addwfc	fsr2h,f,c
  8065  000418  C01D  FFDE         	movff	??_checkCollision,postinc2
  8066  00041C  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8067                           
  8068                           ;gameFunction.c: 94:                 }
  8069  000420  D060               	goto	l818
  8070  000422                     l8998:
  8071  000422  EE20 F0BE          	lfsr	2,190
  8072  000426  501B               	movf	checkCollision@g^0,w,c
  8073  000428  26D9               	addwf	fsr2l,f,c
  8074  00042A  501C               	movf	(checkCollision@g+1)^0,w,c
  8075  00042C  22DA               	addwfc	fsr2h,f,c
  8076  00042E  CFDE F01D          	movff	postinc2,??_checkCollision
  8077  000432  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8078  000436  EE20 F0B2          	lfsr	2,178
  8079  00043A  501B               	movf	checkCollision@g^0,w,c
  8080  00043C  26D9               	addwf	fsr2l,f,c
  8081  00043E  501C               	movf	(checkCollision@g+1)^0,w,c
  8082  000440  22DA               	addwfc	fsr2h,f,c
  8083  000442  CFDE F01F          	movff	postinc2,??_checkCollision+2
  8084  000446  CFDD F020          	movff	postdec2,??_checkCollision+3
  8085  00044A  501D               	movf	??_checkCollision^0,w,c
  8086  00044C  5E1F               	subwf	(??_checkCollision+2)^0,f,c
  8087  00044E  501E               	movf	(??_checkCollision+1)^0,w,c
  8088  000450  5A20               	subwfb	(??_checkCollision+3)^0,f,c
  8089  000452  5020               	movf	(??_checkCollision+3)^0,w,c
  8090  000454  E124               	bnz	l9002
  8091  000456  0E28               	movlw	40
  8092  000458  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  8093  00045A  B0D8               	btfsc	status,0,c
  8094  00045C  D020               	goto	l9002
  8095                           
  8096                           ;gameFunction.c: 96:                 {;gameFunction.c: 98:                     g->b.dy=-
      +                          g->b.dy;
  8097  00045E  EE20 F0BC          	lfsr	2,188
  8098  000462  501B               	movf	checkCollision@g^0,w,c
  8099  000464  26D9               	addwf	fsr2l,f,c
  8100  000466  501C               	movf	(checkCollision@g+1)^0,w,c
  8101  000468  22DA               	addwfc	fsr2h,f,c
  8102  00046A  CFDE F01D          	movff	postinc2,??_checkCollision
  8103  00046E  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8104  000472  1E1D               	comf	??_checkCollision^0,f,c
  8105  000474  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8106  000476  4A1D               	infsnz	??_checkCollision^0,f,c
  8107  000478  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8108  00047A  EE20 F0BC          	lfsr	2,188
  8109  00047E  501B               	movf	checkCollision@g^0,w,c
  8110  000480  26D9               	addwf	fsr2l,f,c
  8111  000482  501C               	movf	(checkCollision@g+1)^0,w,c
  8112  000484  22DA               	addwfc	fsr2h,f,c
  8113  000486  C01D  FFDE         	movff	??_checkCollision,postinc2
  8114  00048A  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8115                           
  8116                           ;gameFunction.c: 99:                     g->b.dx+=1;
  8117  00048E  EE20 F0BA          	lfsr	2,186
  8118  000492  501B               	movf	checkCollision@g^0,w,c
  8119  000494  26D9               	addwf	fsr2l,f,c
  8120  000496  501C               	movf	(checkCollision@g+1)^0,w,c
  8121  000498  22DA               	addwfc	fsr2h,f,c
  8122  00049A  2ADE               	incf	postinc2,f,c
  8123  00049C  D020               	goto	L5
  8124  00049E                     l9002:
  8125                           
  8126                           ;gameFunction.c: 102:                 {;gameFunction.c: 104:                     g->b.dy
      +                          =-g->b.dy;
  8127  00049E  EE20 F0BC          	lfsr	2,188
  8128  0004A2  501B               	movf	checkCollision@g^0,w,c
  8129  0004A4  26D9               	addwf	fsr2l,f,c
  8130  0004A6  501C               	movf	(checkCollision@g+1)^0,w,c
  8131  0004A8  22DA               	addwfc	fsr2h,f,c
  8132  0004AA  CFDE F01D          	movff	postinc2,??_checkCollision
  8133  0004AE  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8134  0004B2  1E1D               	comf	??_checkCollision^0,f,c
  8135  0004B4  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8136  0004B6  4A1D               	infsnz	??_checkCollision^0,f,c
  8137  0004B8  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8138  0004BA  EE20 F0BC          	lfsr	2,188
  8139  0004BE  501B               	movf	checkCollision@g^0,w,c
  8140  0004C0  26D9               	addwf	fsr2l,f,c
  8141  0004C2  501C               	movf	(checkCollision@g+1)^0,w,c
  8142  0004C4  22DA               	addwfc	fsr2h,f,c
  8143  0004C6  C01D  FFDE         	movff	??_checkCollision,postinc2
  8144  0004CA  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8145                           
  8146                           ;gameFunction.c: 105:                     g->b.dx+=2;
  8147  0004CE  EE20 F0BA          	lfsr	2,186
  8148  0004D2  501B               	movf	checkCollision@g^0,w,c
  8149  0004D4  26D9               	addwf	fsr2l,f,c
  8150  0004D6  501C               	movf	(checkCollision@g+1)^0,w,c
  8151  0004D8  22DA               	addwfc	fsr2h,f,c
  8152  0004DA  0E02               	movlw	2
  8153  0004DC  26DE               	addwf	postinc2,f,c
  8154  0004DE                     L5:
  8155  0004DE  0E00               	movlw	0
  8156  0004E0                     L3:
  8157  0004E0  22DD               	addwfc	postdec2,f,c
  8158  0004E2                     l818:
  8159                           
  8160                           ;gameFunction.c: 109:                 g->s1.homeScore++;
  8161  0004E2  EE20 F0D2          	lfsr	2,210
  8162  0004E6  501B               	movf	checkCollision@g^0,w,c
  8163  0004E8  26D9               	addwf	fsr2l,f,c
  8164  0004EA  501C               	movf	(checkCollision@g+1)^0,w,c
  8165  0004EC  22DA               	addwfc	fsr2h,f,c
  8166  0004EE  2ADE               	incf	postinc2,f,c
  8167  0004F0  0E00               	movlw	0
  8168  0004F2  22DD               	addwfc	postdec2,f,c
  8169                           
  8170                           ;gameFunction.c: 110:                 XF_pushEvent(evRedrawScore,0);
  8171  0004F4  0E00               	movlw	0
  8172  0004F6  6E18               	movwf	XF_pushEvent@inISR^0,c
  8173  0004F8  0E0E               	movlw	14
  8174  0004FA  EC31  F029         	call	_XF_pushEvent
  8175  0004FE                     l9006:
  8176                           
  8177                           ;gameFunction.c: 117:     if(g->b.y-8==g->p2.y+10 +1)
  8178  0004FE  EE20 F0CA          	lfsr	2,202
  8179  000502  501B               	movf	checkCollision@g^0,w,c
  8180  000504  26D9               	addwf	fsr2l,f,c
  8181  000506  501C               	movf	(checkCollision@g+1)^0,w,c
  8182  000508  22DA               	addwfc	fsr2h,f,c
  8183  00050A  CFDE F01D          	movff	postinc2,??_checkCollision
  8184  00050E  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8185  000512  0E0B               	movlw	11
  8186  000514  261D               	addwf	??_checkCollision^0,f,c
  8187  000516  0E00               	movlw	0
  8188  000518  221E               	addwfc	(??_checkCollision+1)^0,f,c
  8189  00051A  0EF8               	movlw	248
  8190  00051C  6E1F               	movwf	(??_checkCollision+2)^0,c
  8191  00051E  0EFF               	movlw	255
  8192  000520  6E20               	movwf	(??_checkCollision+3)^0,c
  8193  000522  EE20 F0B4          	lfsr	2,180
  8194  000526  501B               	movf	checkCollision@g^0,w,c
  8195  000528  26D9               	addwf	fsr2l,f,c
  8196  00052A  501C               	movf	(checkCollision@g+1)^0,w,c
  8197  00052C  22DA               	addwfc	fsr2h,f,c
  8198  00052E  CFDE F021          	movff	postinc2,??_checkCollision+4
  8199  000532  CFDD F022          	movff	postdec2,??_checkCollision+5
  8200  000536  501F               	movf	(??_checkCollision+2)^0,w,c
  8201  000538  2621               	addwf	(??_checkCollision+4)^0,f,c
  8202  00053A  5020               	movf	(??_checkCollision+3)^0,w,c
  8203  00053C  2222               	addwfc	(??_checkCollision+5)^0,f,c
  8204  00053E  501D               	movf	??_checkCollision^0,w,c
  8205  000540  1821               	xorwf	(??_checkCollision+4)^0,w,c
  8206  000542  E103               	bnz	u6581
  8207  000544  501E               	movf	(??_checkCollision+1)^0,w,c
  8208  000546  1822               	xorwf	(??_checkCollision+5)^0,w,c
  8209  000548  A4D8               	btfss	status,2,c
  8210  00054A                     u6581:
  8211  00054A  D17D               	goto	l9032
  8212                           
  8213                           ;gameFunction.c: 118:     {;gameFunction.c: 119:         if(g->b.x+8>g->p2.x)
  8214  00054C  EE20 F0B2          	lfsr	2,178
  8215  000550  501B               	movf	checkCollision@g^0,w,c
  8216  000552  26D9               	addwf	fsr2l,f,c
  8217  000554  501C               	movf	(checkCollision@g+1)^0,w,c
  8218  000556  22DA               	addwfc	fsr2h,f,c
  8219  000558  CFDE F01D          	movff	postinc2,??_checkCollision
  8220  00055C  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8221  000560  0E08               	movlw	8
  8222  000562  261D               	addwf	??_checkCollision^0,f,c
  8223  000564  0E00               	movlw	0
  8224  000566  221E               	addwfc	(??_checkCollision+1)^0,f,c
  8225  000568  EE20 F0C8          	lfsr	2,200
  8226  00056C  501B               	movf	checkCollision@g^0,w,c
  8227  00056E  26D9               	addwf	fsr2l,f,c
  8228  000570  501C               	movf	(checkCollision@g+1)^0,w,c
  8229  000572  22DA               	addwfc	fsr2h,f,c
  8230  000574  501D               	movf	??_checkCollision^0,w,c
  8231  000576  5CDE               	subwf	postinc2,w,c
  8232  000578  501E               	movf	(??_checkCollision+1)^0,w,c
  8233  00057A  58DE               	subwfb	postinc2,w,c
  8234  00057C  B0D8               	btfsc	status,0,c
  8235  00057E  D163               	goto	l9032
  8236                           
  8237                           ;gameFunction.c: 120:         {;gameFunction.c: 121:             if(g->b.x-8<g->p2.x+50)
  8238  000580  EE20 F0C8          	lfsr	2,200
  8239  000584  501B               	movf	checkCollision@g^0,w,c
  8240  000586  26D9               	addwf	fsr2l,f,c
  8241  000588  501C               	movf	(checkCollision@g+1)^0,w,c
  8242  00058A  22DA               	addwfc	fsr2h,f,c
  8243  00058C  CFDE F01D          	movff	postinc2,??_checkCollision
  8244  000590  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8245  000594  0E32               	movlw	50
  8246  000596  261D               	addwf	??_checkCollision^0,f,c
  8247  000598  0E00               	movlw	0
  8248  00059A  221E               	addwfc	(??_checkCollision+1)^0,f,c
  8249  00059C  0EF8               	movlw	248
  8250  00059E  6E1F               	movwf	(??_checkCollision+2)^0,c
  8251  0005A0  0EFF               	movlw	255
  8252  0005A2  6E20               	movwf	(??_checkCollision+3)^0,c
  8253  0005A4  EE20 F0B2          	lfsr	2,178
  8254  0005A8  501B               	movf	checkCollision@g^0,w,c
  8255  0005AA  26D9               	addwf	fsr2l,f,c
  8256  0005AC  501C               	movf	(checkCollision@g+1)^0,w,c
  8257  0005AE  22DA               	addwfc	fsr2h,f,c
  8258  0005B0  CFDE F021          	movff	postinc2,??_checkCollision+4
  8259  0005B4  CFDD F022          	movff	postdec2,??_checkCollision+5
  8260  0005B8  501F               	movf	(??_checkCollision+2)^0,w,c
  8261  0005BA  2621               	addwf	(??_checkCollision+4)^0,f,c
  8262  0005BC  5020               	movf	(??_checkCollision+3)^0,w,c
  8263  0005BE  2222               	addwfc	(??_checkCollision+5)^0,f,c
  8264  0005C0  501D               	movf	??_checkCollision^0,w,c
  8265  0005C2  5C21               	subwf	(??_checkCollision+4)^0,w,c
  8266  0005C4  501E               	movf	(??_checkCollision+1)^0,w,c
  8267  0005C6  5822               	subwfb	(??_checkCollision+5)^0,w,c
  8268  0005C8  B0D8               	btfsc	status,0,c
  8269  0005CA  D13D               	goto	l9032
  8270                           
  8271                           ;gameFunction.c: 122:             {;gameFunction.c: 123:                 if(g->b.x-g->p2
      +                          .x<10)
  8272  0005CC  EE20 F0C8          	lfsr	2,200
  8273  0005D0  501B               	movf	checkCollision@g^0,w,c
  8274  0005D2  26D9               	addwf	fsr2l,f,c
  8275  0005D4  501C               	movf	(checkCollision@g+1)^0,w,c
  8276  0005D6  22DA               	addwfc	fsr2h,f,c
  8277  0005D8  CFDE F01D          	movff	postinc2,??_checkCollision
  8278  0005DC  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8279  0005E0  EE20 F0B2          	lfsr	2,178
  8280  0005E4  501B               	movf	checkCollision@g^0,w,c
  8281  0005E6  26D9               	addwf	fsr2l,f,c
  8282  0005E8  501C               	movf	(checkCollision@g+1)^0,w,c
  8283  0005EA  22DA               	addwfc	fsr2h,f,c
  8284  0005EC  CFDE F01F          	movff	postinc2,??_checkCollision+2
  8285  0005F0  CFDD F020          	movff	postdec2,??_checkCollision+3
  8286  0005F4  501D               	movf	??_checkCollision^0,w,c
  8287  0005F6  5E1F               	subwf	(??_checkCollision+2)^0,f,c
  8288  0005F8  501E               	movf	(??_checkCollision+1)^0,w,c
  8289  0005FA  5A20               	subwfb	(??_checkCollision+3)^0,f,c
  8290  0005FC  5020               	movf	(??_checkCollision+3)^0,w,c
  8291  0005FE  E126               	bnz	l9016
  8292  000600  0E0A               	movlw	10
  8293  000602  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  8294  000604  B0D8               	btfsc	status,0,c
  8295  000606  D022               	goto	l9016
  8296                           
  8297                           ;gameFunction.c: 124:                 {;gameFunction.c: 126:                     g->b.dy
      +                          =-g->b.dy;
  8298  000608  EE20 F0BC          	lfsr	2,188
  8299  00060C  501B               	movf	checkCollision@g^0,w,c
  8300  00060E  26D9               	addwf	fsr2l,f,c
  8301  000610  501C               	movf	(checkCollision@g+1)^0,w,c
  8302  000612  22DA               	addwfc	fsr2h,f,c
  8303  000614  CFDE F01D          	movff	postinc2,??_checkCollision
  8304  000618  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8305  00061C  1E1D               	comf	??_checkCollision^0,f,c
  8306  00061E  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8307  000620  4A1D               	infsnz	??_checkCollision^0,f,c
  8308  000622  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8309  000624  EE20 F0BC          	lfsr	2,188
  8310  000628  501B               	movf	checkCollision@g^0,w,c
  8311  00062A  26D9               	addwf	fsr2l,f,c
  8312  00062C  501C               	movf	(checkCollision@g+1)^0,w,c
  8313  00062E  22DA               	addwfc	fsr2h,f,c
  8314  000630  C01D  FFDE         	movff	??_checkCollision,postinc2
  8315  000634  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8316                           
  8317                           ;gameFunction.c: 127:                     g->b.dx-=2;
  8318  000638  EE20 F0BA          	lfsr	2,186
  8319  00063C  501B               	movf	checkCollision@g^0,w,c
  8320  00063E  26D9               	addwf	fsr2l,f,c
  8321  000640  501C               	movf	(checkCollision@g+1)^0,w,c
  8322  000642  22DA               	addwfc	fsr2h,f,c
  8323  000644  0EFE               	movlw	254
  8324  000646  26DE               	addwf	postinc2,f,c
  8325  000648  0EFF               	movlw	255
  8326  00064A  D0EE               	goto	L4
  8327  00064C                     l9016:
  8328  00064C  EE20 F0C8          	lfsr	2,200
  8329  000650  501B               	movf	checkCollision@g^0,w,c
  8330  000652  26D9               	addwf	fsr2l,f,c
  8331  000654  501C               	movf	(checkCollision@g+1)^0,w,c
  8332  000656  22DA               	addwfc	fsr2h,f,c
  8333  000658  CFDE F01D          	movff	postinc2,??_checkCollision
  8334  00065C  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8335  000660  EE20 F0B2          	lfsr	2,178
  8336  000664  501B               	movf	checkCollision@g^0,w,c
  8337  000666  26D9               	addwf	fsr2l,f,c
  8338  000668  501C               	movf	(checkCollision@g+1)^0,w,c
  8339  00066A  22DA               	addwfc	fsr2h,f,c
  8340  00066C  CFDE F01F          	movff	postinc2,??_checkCollision+2
  8341  000670  CFDD F020          	movff	postdec2,??_checkCollision+3
  8342  000674  501D               	movf	??_checkCollision^0,w,c
  8343  000676  5E1F               	subwf	(??_checkCollision+2)^0,f,c
  8344  000678  501E               	movf	(??_checkCollision+1)^0,w,c
  8345  00067A  5A20               	subwfb	(??_checkCollision+3)^0,f,c
  8346  00067C  5020               	movf	(??_checkCollision+3)^0,w,c
  8347  00067E  E126               	bnz	l9020
  8348  000680  0E14               	movlw	20
  8349  000682  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  8350  000684  B0D8               	btfsc	status,0,c
  8351  000686  D022               	goto	l9020
  8352                           
  8353                           ;gameFunction.c: 130:                 {;gameFunction.c: 132:                     g->b.dy
      +                          =-g->b.dy;
  8354  000688  EE20 F0BC          	lfsr	2,188
  8355  00068C  501B               	movf	checkCollision@g^0,w,c
  8356  00068E  26D9               	addwf	fsr2l,f,c
  8357  000690  501C               	movf	(checkCollision@g+1)^0,w,c
  8358  000692  22DA               	addwfc	fsr2h,f,c
  8359  000694  CFDE F01D          	movff	postinc2,??_checkCollision
  8360  000698  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8361  00069C  1E1D               	comf	??_checkCollision^0,f,c
  8362  00069E  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8363  0006A0  4A1D               	infsnz	??_checkCollision^0,f,c
  8364  0006A2  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8365  0006A4  EE20 F0BC          	lfsr	2,188
  8366  0006A8  501B               	movf	checkCollision@g^0,w,c
  8367  0006AA  26D9               	addwf	fsr2l,f,c
  8368  0006AC  501C               	movf	(checkCollision@g+1)^0,w,c
  8369  0006AE  22DA               	addwfc	fsr2h,f,c
  8370  0006B0  C01D  FFDE         	movff	??_checkCollision,postinc2
  8371  0006B4  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8372                           
  8373                           ;gameFunction.c: 133:                     g->b.dx-=1;
  8374  0006B8  EE20 F0BA          	lfsr	2,186
  8375  0006BC  501B               	movf	checkCollision@g^0,w,c
  8376  0006BE  26D9               	addwf	fsr2l,f,c
  8377  0006C0  501C               	movf	(checkCollision@g+1)^0,w,c
  8378  0006C2  22DA               	addwfc	fsr2h,f,c
  8379  0006C4  06DE               	decf	postinc2,f,c
  8380  0006C6  0E00               	movlw	0
  8381  0006C8  5ADD               	subwfb	postdec2,f,c
  8382                           
  8383                           ;gameFunction.c: 134:                 }
  8384  0006CA  D0AF               	goto	l829
  8385  0006CC                     l9020:
  8386  0006CC  EE20 F0C8          	lfsr	2,200
  8387  0006D0  501B               	movf	checkCollision@g^0,w,c
  8388  0006D2  26D9               	addwf	fsr2l,f,c
  8389  0006D4  501C               	movf	(checkCollision@g+1)^0,w,c
  8390  0006D6  22DA               	addwfc	fsr2h,f,c
  8391  0006D8  CFDE F01D          	movff	postinc2,??_checkCollision
  8392  0006DC  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8393  0006E0  EE20 F0B2          	lfsr	2,178
  8394  0006E4  501B               	movf	checkCollision@g^0,w,c
  8395  0006E6  26D9               	addwf	fsr2l,f,c
  8396  0006E8  501C               	movf	(checkCollision@g+1)^0,w,c
  8397  0006EA  22DA               	addwfc	fsr2h,f,c
  8398  0006EC  CFDE F01F          	movff	postinc2,??_checkCollision+2
  8399  0006F0  CFDD F020          	movff	postdec2,??_checkCollision+3
  8400  0006F4  501D               	movf	??_checkCollision^0,w,c
  8401  0006F6  5E1F               	subwf	(??_checkCollision+2)^0,f,c
  8402  0006F8  501E               	movf	(??_checkCollision+1)^0,w,c
  8403  0006FA  5A20               	subwfb	(??_checkCollision+3)^0,f,c
  8404  0006FC  5020               	movf	(??_checkCollision+3)^0,w,c
  8405  0006FE  E135               	bnz	l9024
  8406  000700  0E1E               	movlw	30
  8407  000702  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  8408  000704  B0D8               	btfsc	status,0,c
  8409  000706  D031               	goto	l9024
  8410                           
  8411                           ;gameFunction.c: 136:                 {;gameFunction.c: 138:                     g->b.dx
      +                          =-g->b.dx;
  8412  000708  EE20 F0BA          	lfsr	2,186
  8413  00070C  501B               	movf	checkCollision@g^0,w,c
  8414  00070E  26D9               	addwf	fsr2l,f,c
  8415  000710  501C               	movf	(checkCollision@g+1)^0,w,c
  8416  000712  22DA               	addwfc	fsr2h,f,c
  8417  000714  CFDE F01D          	movff	postinc2,??_checkCollision
  8418  000718  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8419  00071C  1E1D               	comf	??_checkCollision^0,f,c
  8420  00071E  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8421  000720  4A1D               	infsnz	??_checkCollision^0,f,c
  8422  000722  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8423  000724  EE20 F0BA          	lfsr	2,186
  8424  000728  501B               	movf	checkCollision@g^0,w,c
  8425  00072A  26D9               	addwf	fsr2l,f,c
  8426  00072C  501C               	movf	(checkCollision@g+1)^0,w,c
  8427  00072E  22DA               	addwfc	fsr2h,f,c
  8428  000730  C01D  FFDE         	movff	??_checkCollision,postinc2
  8429  000734  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8430                           
  8431                           ;gameFunction.c: 139:                     g->b.dy=-g->b.dy;
  8432  000738  EE20 F0BC          	lfsr	2,188
  8433  00073C  501B               	movf	checkCollision@g^0,w,c
  8434  00073E  26D9               	addwf	fsr2l,f,c
  8435  000740  501C               	movf	(checkCollision@g+1)^0,w,c
  8436  000742  22DA               	addwfc	fsr2h,f,c
  8437  000744  CFDE F01D          	movff	postinc2,??_checkCollision
  8438  000748  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8439  00074C  1E1D               	comf	??_checkCollision^0,f,c
  8440  00074E  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8441  000750  4A1D               	infsnz	??_checkCollision^0,f,c
  8442  000752  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8443  000754  EE20 F0BC          	lfsr	2,188
  8444  000758  501B               	movf	checkCollision@g^0,w,c
  8445  00075A  26D9               	addwf	fsr2l,f,c
  8446  00075C  501C               	movf	(checkCollision@g+1)^0,w,c
  8447  00075E  22DA               	addwfc	fsr2h,f,c
  8448  000760  C01D  FFDE         	movff	??_checkCollision,postinc2
  8449  000764  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8450                           
  8451                           ;gameFunction.c: 140:                 }
  8452  000768  D060               	goto	l829
  8453  00076A                     l9024:
  8454  00076A  EE20 F0C8          	lfsr	2,200
  8455  00076E  501B               	movf	checkCollision@g^0,w,c
  8456  000770  26D9               	addwf	fsr2l,f,c
  8457  000772  501C               	movf	(checkCollision@g+1)^0,w,c
  8458  000774  22DA               	addwfc	fsr2h,f,c
  8459  000776  CFDE F01D          	movff	postinc2,??_checkCollision
  8460  00077A  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8461  00077E  EE20 F0B2          	lfsr	2,178
  8462  000782  501B               	movf	checkCollision@g^0,w,c
  8463  000784  26D9               	addwf	fsr2l,f,c
  8464  000786  501C               	movf	(checkCollision@g+1)^0,w,c
  8465  000788  22DA               	addwfc	fsr2h,f,c
  8466  00078A  CFDE F01F          	movff	postinc2,??_checkCollision+2
  8467  00078E  CFDD F020          	movff	postdec2,??_checkCollision+3
  8468  000792  501D               	movf	??_checkCollision^0,w,c
  8469  000794  5E1F               	subwf	(??_checkCollision+2)^0,f,c
  8470  000796  501E               	movf	(??_checkCollision+1)^0,w,c
  8471  000798  5A20               	subwfb	(??_checkCollision+3)^0,f,c
  8472  00079A  5020               	movf	(??_checkCollision+3)^0,w,c
  8473  00079C  E124               	bnz	l9028
  8474  00079E  0E28               	movlw	40
  8475  0007A0  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  8476  0007A2  B0D8               	btfsc	status,0,c
  8477  0007A4  D020               	goto	l9028
  8478                           
  8479                           ;gameFunction.c: 142:                 {;gameFunction.c: 144:                     g->b.dy
      +                          =-g->b.dy;
  8480  0007A6  EE20 F0BC          	lfsr	2,188
  8481  0007AA  501B               	movf	checkCollision@g^0,w,c
  8482  0007AC  26D9               	addwf	fsr2l,f,c
  8483  0007AE  501C               	movf	(checkCollision@g+1)^0,w,c
  8484  0007B0  22DA               	addwfc	fsr2h,f,c
  8485  0007B2  CFDE F01D          	movff	postinc2,??_checkCollision
  8486  0007B6  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8487  0007BA  1E1D               	comf	??_checkCollision^0,f,c
  8488  0007BC  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8489  0007BE  4A1D               	infsnz	??_checkCollision^0,f,c
  8490  0007C0  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8491  0007C2  EE20 F0BC          	lfsr	2,188
  8492  0007C6  501B               	movf	checkCollision@g^0,w,c
  8493  0007C8  26D9               	addwf	fsr2l,f,c
  8494  0007CA  501C               	movf	(checkCollision@g+1)^0,w,c
  8495  0007CC  22DA               	addwfc	fsr2h,f,c
  8496  0007CE  C01D  FFDE         	movff	??_checkCollision,postinc2
  8497  0007D2  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8498                           
  8499                           ;gameFunction.c: 145:                     g->b.dx+=1;
  8500  0007D6  EE20 F0BA          	lfsr	2,186
  8501  0007DA  501B               	movf	checkCollision@g^0,w,c
  8502  0007DC  26D9               	addwf	fsr2l,f,c
  8503  0007DE  501C               	movf	(checkCollision@g+1)^0,w,c
  8504  0007E0  22DA               	addwfc	fsr2h,f,c
  8505  0007E2  2ADE               	incf	postinc2,f,c
  8506  0007E4  D020               	goto	L6
  8507  0007E6                     l9028:
  8508                           
  8509                           ;gameFunction.c: 148:                 {;gameFunction.c: 150:                     g->b.dy
      +                          =-g->b.dy;
  8510  0007E6  EE20 F0BC          	lfsr	2,188
  8511  0007EA  501B               	movf	checkCollision@g^0,w,c
  8512  0007EC  26D9               	addwf	fsr2l,f,c
  8513  0007EE  501C               	movf	(checkCollision@g+1)^0,w,c
  8514  0007F0  22DA               	addwfc	fsr2h,f,c
  8515  0007F2  CFDE F01D          	movff	postinc2,??_checkCollision
  8516  0007F6  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8517  0007FA  1E1D               	comf	??_checkCollision^0,f,c
  8518  0007FC  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8519  0007FE  4A1D               	infsnz	??_checkCollision^0,f,c
  8520  000800  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8521  000802  EE20 F0BC          	lfsr	2,188
  8522  000806  501B               	movf	checkCollision@g^0,w,c
  8523  000808  26D9               	addwf	fsr2l,f,c
  8524  00080A  501C               	movf	(checkCollision@g+1)^0,w,c
  8525  00080C  22DA               	addwfc	fsr2h,f,c
  8526  00080E  C01D  FFDE         	movff	??_checkCollision,postinc2
  8527  000812  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8528                           
  8529                           ;gameFunction.c: 151:                     g->b.dx+=2;
  8530  000816  EE20 F0BA          	lfsr	2,186
  8531  00081A  501B               	movf	checkCollision@g^0,w,c
  8532  00081C  26D9               	addwf	fsr2l,f,c
  8533  00081E  501C               	movf	(checkCollision@g+1)^0,w,c
  8534  000820  22DA               	addwfc	fsr2h,f,c
  8535  000822  0E02               	movlw	2
  8536  000824  26DE               	addwf	postinc2,f,c
  8537  000826                     L6:
  8538  000826  0E00               	movlw	0
  8539  000828                     L4:
  8540  000828  22DD               	addwfc	postdec2,f,c
  8541  00082A                     l829:
  8542                           
  8543                           ;gameFunction.c: 154:                 g->s1.awayScore++;
  8544  00082A  EE20 F0D4          	lfsr	2,212
  8545  00082E  501B               	movf	checkCollision@g^0,w,c
  8546  000830  26D9               	addwf	fsr2l,f,c
  8547  000832  501C               	movf	(checkCollision@g+1)^0,w,c
  8548  000834  22DA               	addwfc	fsr2h,f,c
  8549  000836  2ADE               	incf	postinc2,f,c
  8550  000838  0E00               	movlw	0
  8551  00083A  22DD               	addwfc	postdec2,f,c
  8552                           
  8553                           ;gameFunction.c: 155:                 XF_pushEvent(evRedrawScore,0);
  8554  00083C  0E00               	movlw	0
  8555  00083E  6E18               	movwf	XF_pushEvent@inISR^0,c
  8556  000840  0E0E               	movlw	14
  8557  000842  EC31  F029         	call	_XF_pushEvent
  8558  000846                     l9032:
  8559                           
  8560                           ;gameFunction.c: 161:     if(g->b.y-8<g->p2.y-10)
  8561  000846  0EF6               	movlw	246
  8562  000848  6E1D               	movwf	??_checkCollision^0,c
  8563  00084A  0EFF               	movlw	255
  8564  00084C  6E1E               	movwf	(??_checkCollision+1)^0,c
  8565  00084E  EE20 F0CA          	lfsr	2,202
  8566  000852  501B               	movf	checkCollision@g^0,w,c
  8567  000854  26D9               	addwf	fsr2l,f,c
  8568  000856  501C               	movf	(checkCollision@g+1)^0,w,c
  8569  000858  22DA               	addwfc	fsr2h,f,c
  8570  00085A  CFDE F01F          	movff	postinc2,??_checkCollision+2
  8571  00085E  CFDD F020          	movff	postdec2,??_checkCollision+3
  8572  000862  501D               	movf	??_checkCollision^0,w,c
  8573  000864  261F               	addwf	(??_checkCollision+2)^0,f,c
  8574  000866  501E               	movf	(??_checkCollision+1)^0,w,c
  8575  000868  2220               	addwfc	(??_checkCollision+3)^0,f,c
  8576  00086A  0EF8               	movlw	248
  8577  00086C  6E21               	movwf	(??_checkCollision+4)^0,c
  8578  00086E  0EFF               	movlw	255
  8579  000870  6E22               	movwf	(??_checkCollision+5)^0,c
  8580  000872  EE20 F0B4          	lfsr	2,180
  8581  000876  501B               	movf	checkCollision@g^0,w,c
  8582  000878  26D9               	addwf	fsr2l,f,c
  8583  00087A  501C               	movf	(checkCollision@g+1)^0,w,c
  8584  00087C  22DA               	addwfc	fsr2h,f,c
  8585  00087E  CFDE F023          	movff	postinc2,??_checkCollision+6
  8586  000882  CFDD F024          	movff	postdec2,??_checkCollision+7
  8587  000886  5021               	movf	(??_checkCollision+4)^0,w,c
  8588  000888  2623               	addwf	(??_checkCollision+6)^0,f,c
  8589  00088A  5022               	movf	(??_checkCollision+5)^0,w,c
  8590  00088C  2224               	addwfc	(??_checkCollision+7)^0,f,c
  8591  00088E  501F               	movf	(??_checkCollision+2)^0,w,c
  8592  000890  5C23               	subwf	(??_checkCollision+6)^0,w,c
  8593  000892  5020               	movf	(??_checkCollision+3)^0,w,c
  8594  000894  5824               	subwfb	(??_checkCollision+7)^0,w,c
  8595  000896  B0D8               	btfsc	status,0,c
  8596  000898  D00F               	goto	l9038
  8597                           
  8598                           ;gameFunction.c: 162:     {;gameFunction.c: 164:         XF_pushEvent(evEndGame,0);
  8599  00089A  0E00               	movlw	0
  8600  00089C  6E18               	movwf	XF_pushEvent@inISR^0,c
  8601  00089E  0E09               	movlw	9
  8602  0008A0  EC31  F029         	call	_XF_pushEvent
  8603                           
  8604                           ;gameFunction.c: 165:         g->s1.awayScore=0;
  8605  0008A4  EE20 F0D4          	lfsr	2,212
  8606  0008A8  501B               	movf	checkCollision@g^0,w,c
  8607  0008AA  26D9               	addwf	fsr2l,f,c
  8608  0008AC  501C               	movf	(checkCollision@g+1)^0,w,c
  8609  0008AE  22DA               	addwfc	fsr2h,f,c
  8610  0008B0  0E00               	movlw	0
  8611  0008B2  6EDE               	movwf	postinc2,c
  8612  0008B4  0E00               	movlw	0
  8613  0008B6  6EDD               	movwf	postdec2,c
  8614  0008B8                     l9038:
  8615                           
  8616                           ;gameFunction.c: 167:     if(g->b.y+8>g->p1.y+10)
  8617  0008B8  EE20 F0B4          	lfsr	2,180
  8618  0008BC  501B               	movf	checkCollision@g^0,w,c
  8619  0008BE  26D9               	addwf	fsr2l,f,c
  8620  0008C0  501C               	movf	(checkCollision@g+1)^0,w,c
  8621  0008C2  22DA               	addwfc	fsr2h,f,c
  8622  0008C4  CFDE F01D          	movff	postinc2,??_checkCollision
  8623  0008C8  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8624  0008CC  0E08               	movlw	8
  8625  0008CE  261D               	addwf	??_checkCollision^0,f,c
  8626  0008D0  0E00               	movlw	0
  8627  0008D2  221E               	addwfc	(??_checkCollision+1)^0,f,c
  8628  0008D4  EE20 F0C0          	lfsr	2,192
  8629  0008D8  501B               	movf	checkCollision@g^0,w,c
  8630  0008DA  26D9               	addwf	fsr2l,f,c
  8631  0008DC  501C               	movf	(checkCollision@g+1)^0,w,c
  8632  0008DE  22DA               	addwfc	fsr2h,f,c
  8633  0008E0  CFDE F01F          	movff	postinc2,??_checkCollision+2
  8634  0008E4  CFDD F020          	movff	postdec2,??_checkCollision+3
  8635  0008E8  0E0A               	movlw	10
  8636  0008EA  261F               	addwf	(??_checkCollision+2)^0,f,c
  8637  0008EC  0E00               	movlw	0
  8638  0008EE  2220               	addwfc	(??_checkCollision+3)^0,f,c
  8639  0008F0  501D               	movf	??_checkCollision^0,w,c
  8640  0008F2  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  8641  0008F4  501E               	movf	(??_checkCollision+1)^0,w,c
  8642  0008F6  5820               	subwfb	(??_checkCollision+3)^0,w,c
  8643  0008F8  B0D8               	btfsc	status,0,c
  8644  0008FA  0012               	return	
  8645                           
  8646                           ;gameFunction.c: 168:     {;gameFunction.c: 170:         XF_pushEvent(evEndGame,0);
  8647  0008FC  0E00               	movlw	0
  8648  0008FE  6E18               	movwf	XF_pushEvent@inISR^0,c
  8649  000900  0E09               	movlw	9
  8650  000902  EC31  F029         	call	_XF_pushEvent
  8651                           
  8652                           ;gameFunction.c: 171:         g->s1.homeScore=0;
  8653  000906  EE20 F0D2          	lfsr	2,210
  8654  00090A  501B               	movf	checkCollision@g^0,w,c
  8655  00090C  26D9               	addwf	fsr2l,f,c
  8656  00090E  501C               	movf	(checkCollision@g+1)^0,w,c
  8657  000910  22DA               	addwfc	fsr2h,f,c
  8658  000912  0E00               	movlw	0
  8659  000914  6EDE               	movwf	postinc2,c
  8660  000916  0E00               	movlw	0
  8661  000918  6EDD               	movwf	postdec2,c
  8662  00091A  0012               	return		;funcret
  8663  00091C                     __end_of_checkCollision:
  8664                           	callstack 0
  8665                           
  8666 ;; *************** function _XF_pushEvent *****************
  8667 ;; Defined at:
  8668 ;;		line 49 in file "xf/xf.c"
  8669 ;; Parameters:    Size  Location     Type
  8670 ;;  ev              1    wreg     unsigned char 
  8671 ;;  inISR           1   23[COMRAM] _Bool 
  8672 ;; Auto vars:     Size  Location     Type
  8673 ;;  ev              1   24[COMRAM] unsigned char 
  8674 ;;  temp            1   25[COMRAM] unsigned char 
  8675 ;; Return value:  Size  Location     Type
  8676 ;;                  1    wreg      _Bool 
  8677 ;; Registers used:
  8678 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8679 ;; Tracked objects:
  8680 ;;		On entry : 0/0
  8681 ;;		On exit  : 0/0
  8682 ;;		Unchanged: 0/0
  8683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8684 ;;      Params:         1       0       0       0       0       0       0
  8685 ;;      Locals:         2       0       0       0       0       0       0
  8686 ;;      Temps:          0       0       0       0       0       0       0
  8687 ;;      Totals:         3       0       0       0       0       0       0
  8688 ;;Total ram usage:        3 bytes
  8689 ;; Hardware stack levels used: 1
  8690 ;; Hardware stack levels required when called: 5
  8691 ;; This function calls:
  8692 ;;		_ENTERCRITICAL
  8693 ;;		_LEAVECRITICAL
  8694 ;;		___awmod
  8695 ;; This function is called by:
  8696 ;;		_gameControllerController
  8697 ;;		_moovePaddle1
  8698 ;;		_moovePaddle2
  8699 ;;		_mooveBall
  8700 ;;		_checkCollision
  8701 ;; This function uses a non-reentrant model
  8702 ;;
  8703                           
  8704                           	psect	text31
  8705  005262                     __ptext31:
  8706                           	callstack 0
  8707  005262                     _XF_pushEvent:
  8708                           	callstack 20
  8709                           
  8710                           ;incstack = 0
  8711                           ;XF_pushEvent@ev stored from wreg
  8712  005262  6E19               	movwf	XF_pushEvent@ev^0,c
  8713                           
  8714                           ;xf/xf.c: 49: _Bool XF_pushEvent(Event ev, _Bool inISR);xf/xf.c: 50: {;xf/xf.c: 51:   ui
      +                          nt8_t temp;;xf/xf.c: 52:     ENTERCRITICAL(inISR);
  8715  005264  5018               	movf	XF_pushEvent@inISR^0,w,c
  8716  005266  EC62  F02C         	call	_ENTERCRITICAL
  8717                           
  8718                           ;xf/xf.c: 54:     temp = (theXF.in+1) % (uint8_t)sizeof(theXF.eventQueue);
  8719  00526A  0E01               	movlw	1
  8720  00526C  0100               	movlb	0	; () banked
  8721  00526E  25D4               	addwf	(_theXF+36)& (0+255),w,b
  8722  005270  6E12               	movwf	___awmod@dividend^0,c
  8723  005272  6A13               	clrf	(___awmod@dividend+1)^0,c
  8724  005274  0E00               	movlw	0
  8725  005276  2213               	addwfc	(___awmod@dividend+1)^0,f,c
  8726  005278  0E00               	movlw	0
  8727  00527A  6E15               	movwf	(___awmod@divisor+1)^0,c
  8728  00527C  0E0C               	movlw	12
  8729  00527E  6E14               	movwf	___awmod@divisor^0,c
  8730  005280  EC61  F028         	call	___awmod	;wreg free
  8731  005284  5012               	movf	?___awmod^0,w,c
  8732  005286  6E1A               	movwf	XF_pushEvent@temp^0,c
  8733                           
  8734                           ; BSR set to: 0
  8735                           ;xf/xf.c: 55:     if(temp == theXF.out)
  8736  005288  501A               	movf	XF_pushEvent@temp^0,w,c
  8737  00528A  19D5               	xorwf	(_theXF+37)& (0+255),w,b
  8738  00528C  A4D8               	btfss	status,2,c
  8739  00528E  D005               	goto	l8888
  8740                           
  8741                           ; BSR set to: 0
  8742                           ;xf/xf.c: 56:     {;xf/xf.c: 57:       LEAVECRITICAL(inISR);
  8743  005290  5018               	movf	XF_pushEvent@inISR^0,w,c
  8744  005292  EC5C  F02C         	call	_LEAVECRITICAL
  8745                           
  8746                           ;xf/xf.c: 58:       return 0;
  8747  005296  0E00               	movlw	0
  8748  005298  0012               	return	
  8749  00529A                     l8888:
  8750                           
  8751                           ; BSR set to: 0
  8752                           ;xf/xf.c: 60:     theXF.eventQueue[theXF.in] = ev;
  8753  00529A  51D4               	movf	(_theXF+36)& (0+255),w,b
  8754  00529C  0FC8               	addlw	low (_theXF+24)
  8755  00529E  6ED9               	movwf	fsr2l,c
  8756  0052A0  6ADA               	clrf	fsr2h,c
  8757  0052A2  C019  FFDF         	movff	XF_pushEvent@ev,indf2
  8758                           
  8759                           ; BSR set to: 0
  8760                           ;xf/xf.c: 61:     theXF.in = temp;
  8761  0052A6  C01A  F0D4         	movff	XF_pushEvent@temp,_theXF+36
  8762                           
  8763                           ; BSR set to: 0
  8764                           ;xf/xf.c: 62:     LEAVECRITICAL(inISR);
  8765  0052AA  5018               	movf	XF_pushEvent@inISR^0,w,c
  8766  0052AC  EC5C  F02C         	call	_LEAVECRITICAL
  8767                           
  8768                           ;xf/xf.c: 63:     return 1;
  8769  0052B0  0E01               	movlw	1
  8770  0052B2  0012               	return		;funcret
  8771  0052B4                     __end_of_XF_pushEvent:
  8772                           	callstack 0
  8773                           
  8774 ;; *************** function _Ball_Update *****************
  8775 ;; Defined at:
  8776 ;;		line 18 in file "class/ball.c"
  8777 ;; Parameters:    Size  Location     Type
  8778 ;;  b               2   17[COMRAM] PTR struct Ball
  8779 ;;		 -> g1(216), 
  8780 ;; Auto vars:     Size  Location     Type
  8781 ;;		None
  8782 ;; Return value:  Size  Location     Type
  8783 ;;                  1    wreg      void 
  8784 ;; Registers used:
  8785 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8786 ;; Tracked objects:
  8787 ;;		On entry : 0/0
  8788 ;;		On exit  : 0/0
  8789 ;;		Unchanged: 0/0
  8790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8791 ;;      Params:         2       0       0       0       0       0       0
  8792 ;;      Locals:         0       0       0       0       0       0       0
  8793 ;;      Temps:          4       0       0       0       0       0       0
  8794 ;;      Totals:         6       0       0       0       0       0       0
  8795 ;;Total ram usage:        6 bytes
  8796 ;; Hardware stack levels used: 1
  8797 ;; Hardware stack levels required when called: 4
  8798 ;; This function calls:
  8799 ;;		Nothing
  8800 ;; This function is called by:
  8801 ;;		_mooveBall
  8802 ;; This function uses a non-reentrant model
  8803 ;;
  8804                           
  8805                           	psect	text32
  8806  004EDA                     __ptext32:
  8807                           	callstack 0
  8808  004EDA                     _Ball_Update:
  8809                           	callstack 21
  8810                           
  8811                           ;class/ball.c: 18: void Ball_Update(struct Ball* b);class/ball.c: 19: {;class/ball.c: 20
      +                          :     b->x=b->x+b->dx;
  8812                           
  8813                           ;incstack = 0
  8814  004EDA  EE20 F008          	lfsr	2,8
  8815  004EDE  5012               	movf	Ball_Update@b^0,w,c
  8816  004EE0  26D9               	addwf	fsr2l,f,c
  8817  004EE2  5013               	movf	(Ball_Update@b+1)^0,w,c
  8818  004EE4  22DA               	addwfc	fsr2h,f,c
  8819  004EE6  CFDE F014          	movff	postinc2,??_Ball_Update
  8820  004EEA  CFDD F015          	movff	postdec2,??_Ball_Update+1
  8821  004EEE  C012  FFD9         	movff	Ball_Update@b,fsr2l
  8822  004EF2  C013  FFDA         	movff	Ball_Update@b+1,fsr2h
  8823  004EF6  CFDE F016          	movff	postinc2,??_Ball_Update+2
  8824  004EFA  CFDD F017          	movff	postdec2,??_Ball_Update+3
  8825  004EFE  5014               	movf	??_Ball_Update^0,w,c
  8826  004F00  2616               	addwf	(??_Ball_Update+2)^0,f,c
  8827  004F02  5015               	movf	(??_Ball_Update+1)^0,w,c
  8828  004F04  2217               	addwfc	(??_Ball_Update+3)^0,f,c
  8829  004F06  C012  FFD9         	movff	Ball_Update@b,fsr2l
  8830  004F0A  C013  FFDA         	movff	Ball_Update@b+1,fsr2h
  8831  004F0E  C016  FFDE         	movff	??_Ball_Update+2,postinc2
  8832  004F12  C017  FFDD         	movff	??_Ball_Update+3,postdec2
  8833                           
  8834                           ;class/ball.c: 21:     b->y=b->y+b->dy;
  8835  004F16  EE20 F00A          	lfsr	2,10
  8836  004F1A  5012               	movf	Ball_Update@b^0,w,c
  8837  004F1C  26D9               	addwf	fsr2l,f,c
  8838  004F1E  5013               	movf	(Ball_Update@b+1)^0,w,c
  8839  004F20  22DA               	addwfc	fsr2h,f,c
  8840  004F22  CFDE F014          	movff	postinc2,??_Ball_Update
  8841  004F26  CFDD F015          	movff	postdec2,??_Ball_Update+1
  8842  004F2A  EE20 F002          	lfsr	2,2
  8843  004F2E  5012               	movf	Ball_Update@b^0,w,c
  8844  004F30  26D9               	addwf	fsr2l,f,c
  8845  004F32  5013               	movf	(Ball_Update@b+1)^0,w,c
  8846  004F34  22DA               	addwfc	fsr2h,f,c
  8847  004F36  CFDE F016          	movff	postinc2,??_Ball_Update+2
  8848  004F3A  CFDD F017          	movff	postdec2,??_Ball_Update+3
  8849  004F3E  5014               	movf	??_Ball_Update^0,w,c
  8850  004F40  2616               	addwf	(??_Ball_Update+2)^0,f,c
  8851  004F42  5015               	movf	(??_Ball_Update+1)^0,w,c
  8852  004F44  2217               	addwfc	(??_Ball_Update+3)^0,f,c
  8853  004F46  EE20 F002          	lfsr	2,2
  8854  004F4A  5012               	movf	Ball_Update@b^0,w,c
  8855  004F4C  26D9               	addwf	fsr2l,f,c
  8856  004F4E  5013               	movf	(Ball_Update@b+1)^0,w,c
  8857  004F50  22DA               	addwfc	fsr2h,f,c
  8858  004F52  C016  FFDE         	movff	??_Ball_Update+2,postinc2
  8859  004F56  C017  FFDD         	movff	??_Ball_Update+3,postdec2
  8860  004F5A  0012               	return		;funcret
  8861  004F5C                     __end_of_Ball_Update:
  8862                           	callstack 0
  8863                           
  8864 ;; *************** function _levelController *****************
  8865 ;; Defined at:
  8866 ;;		line 236 in file "gameFunction.c"
  8867 ;; Parameters:    Size  Location     Type
  8868 ;;  g               2   21[COMRAM] PTR struct GameParameter
  8869 ;;		 -> g1(216), 
  8870 ;; Auto vars:     Size  Location     Type
  8871 ;;		None
  8872 ;; Return value:  Size  Location     Type
  8873 ;;                  1    wreg      void 
  8874 ;; Registers used:
  8875 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8876 ;; Tracked objects:
  8877 ;;		On entry : 0/0
  8878 ;;		On exit  : 0/0
  8879 ;;		Unchanged: 0/0
  8880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8881 ;;      Params:         2       0       0       0       0       0       0
  8882 ;;      Locals:         0       0       0       0       0       0       0
  8883 ;;      Temps:          2       0       0       0       0       0       0
  8884 ;;      Totals:         4       0       0       0       0       0       0
  8885 ;;Total ram usage:        4 bytes
  8886 ;; Hardware stack levels used: 1
  8887 ;; Hardware stack levels required when called: 5
  8888 ;; This function calls:
  8889 ;;		_GameParameters_setLevel
  8890 ;; This function is called by:
  8891 ;;		_gameControllerController
  8892 ;; This function uses a non-reentrant model
  8893 ;;
  8894                           
  8895                           	psect	text33
  8896  0043DC                     __ptext33:
  8897                           	callstack 0
  8898  0043DC                     _levelController:
  8899                           	callstack 21
  8900                           
  8901                           ;gameFunction.c: 236: void levelController(GameParameters* g);gameFunction.c: 237: {;gam
      +                          eFunction.c: 239:     if(((g->x)>=105)&&((g->x)<160))
  8902                           
  8903                           ;incstack = 0
  8904  0043DC  EE20 F002          	lfsr	2,2
  8905  0043E0  5016               	movf	levelController@g^0,w,c
  8906  0043E2  26D9               	addwf	fsr2l,f,c
  8907  0043E4  5017               	movf	(levelController@g+1)^0,w,c
  8908  0043E6  22DA               	addwfc	fsr2h,f,c
  8909  0043E8  0E01               	movlw	1
  8910  0043EA  50DB               	movf	plusw2,w,c
  8911  0043EC  E104               	bnz	u4560
  8912  0043EE  0E69               	movlw	105
  8913  0043F0  5CDE               	subwf	postinc2,w,c
  8914  0043F2  A0D8               	btfss	status,0,c
  8915  0043F4  D018               	goto	l7024
  8916  0043F6                     u4560:
  8917  0043F6  EE20 F002          	lfsr	2,2
  8918  0043FA  5016               	movf	levelController@g^0,w,c
  8919  0043FC  26D9               	addwf	fsr2l,f,c
  8920  0043FE  5017               	movf	(levelController@g+1)^0,w,c
  8921  004400  22DA               	addwfc	fsr2h,f,c
  8922  004402  0E01               	movlw	1
  8923  004404  50DB               	movf	plusw2,w,c
  8924  004406  E10F               	bnz	l7024
  8925  004408  0EA0               	movlw	160
  8926  00440A  5CDE               	subwf	postinc2,w,c
  8927  00440C  B0D8               	btfsc	status,0,c
  8928  00440E  D00B               	goto	l7024
  8929                           
  8930                           ;gameFunction.c: 240:     {;gameFunction.c: 241:         GameParameters_setLevel(g,2);
  8931  004410  C016  F012         	movff	levelController@g,GameParameters_setLevel@s
  8932  004414  C017  F013         	movff	levelController@g+1,GameParameters_setLevel@s+1
  8933  004418  0E00               	movlw	0
  8934  00441A  6E15               	movwf	(GameParameters_setLevel@value+1)^0,c
  8935  00441C  0E02               	movlw	2
  8936  00441E  6E14               	movwf	GameParameters_setLevel@value^0,c
  8937  004420  EC51  F02C         	call	_GameParameters_setLevel	;wreg free
  8938                           
  8939                           ;gameFunction.c: 242:     }
  8940  004424  D02F               	goto	l7032
  8941  004426                     l7024:
  8942  004426  EE20 F002          	lfsr	2,2
  8943  00442A  5016               	movf	levelController@g^0,w,c
  8944  00442C  26D9               	addwf	fsr2l,f,c
  8945  00442E  5017               	movf	(levelController@g+1)^0,w,c
  8946  004430  22DA               	addwfc	fsr2h,f,c
  8947  004432  0E01               	movlw	1
  8948  004434  50DB               	movf	plusw2,w,c
  8949  004436  E104               	bnz	u4580
  8950  004438  0EA0               	movlw	160
  8951  00443A  5CDE               	subwf	postinc2,w,c
  8952  00443C  A0D8               	btfss	status,0,c
  8953  00443E  D018               	goto	l7030
  8954  004440                     u4580:
  8955  004440  EE20 F002          	lfsr	2,2
  8956  004444  5016               	movf	levelController@g^0,w,c
  8957  004446  26D9               	addwf	fsr2l,f,c
  8958  004448  5017               	movf	(levelController@g+1)^0,w,c
  8959  00444A  22DA               	addwfc	fsr2h,f,c
  8960  00444C  0E01               	movlw	1
  8961  00444E  50DB               	movf	plusw2,w,c
  8962  004450  E10F               	bnz	l7030
  8963  004452  0ED7               	movlw	215
  8964  004454  5CDE               	subwf	postinc2,w,c
  8965  004456  B0D8               	btfsc	status,0,c
  8966  004458  D00B               	goto	l7030
  8967                           
  8968                           ;gameFunction.c: 244:     {;gameFunction.c: 245:         GameParameters_setLevel(g,3);
  8969  00445A  C016  F012         	movff	levelController@g,GameParameters_setLevel@s
  8970  00445E  C017  F013         	movff	levelController@g+1,GameParameters_setLevel@s+1
  8971  004462  0E00               	movlw	0
  8972  004464  6E15               	movwf	(GameParameters_setLevel@value+1)^0,c
  8973  004466  0E03               	movlw	3
  8974  004468  6E14               	movwf	GameParameters_setLevel@value^0,c
  8975  00446A  EC51  F02C         	call	_GameParameters_setLevel	;wreg free
  8976                           
  8977                           ;gameFunction.c: 246:     }
  8978  00446E  D00A               	goto	l7032
  8979  004470                     l7030:
  8980                           
  8981                           ;gameFunction.c: 248:     {;gameFunction.c: 249:         GameParameters_setLevel(g,1);
  8982  004470  C016  F012         	movff	levelController@g,GameParameters_setLevel@s
  8983  004474  C017  F013         	movff	levelController@g+1,GameParameters_setLevel@s+1
  8984  004478  0E00               	movlw	0
  8985  00447A  6E15               	movwf	(GameParameters_setLevel@value+1)^0,c
  8986  00447C  0E01               	movlw	1
  8987  00447E  6E14               	movwf	GameParameters_setLevel@value^0,c
  8988  004480  EC51  F02C         	call	_GameParameters_setLevel	;wreg free
  8989  004484                     l7032:
  8990                           
  8991                           ;gameFunction.c: 251:     g->sldLevel.value=g->level;
  8992  004484  EE20 F006          	lfsr	2,6
  8993  004488  5016               	movf	levelController@g^0,w,c
  8994  00448A  26D9               	addwf	fsr2l,f,c
  8995  00448C  5017               	movf	(levelController@g+1)^0,w,c
  8996  00448E  22DA               	addwfc	fsr2h,f,c
  8997  004490  EE10 F0AA          	lfsr	1,170
  8998  004494  5016               	movf	levelController@g^0,w,c
  8999  004496  26E1               	addwf	fsr1l,f,c
  9000  004498  5017               	movf	(levelController@g+1)^0,w,c
  9001  00449A  22E2               	addwfc	fsr1h,f,c
  9002  00449C  CFDE FFE6          	movff	postinc2,postinc1
  9003  0044A0  CFDD FFE5          	movff	postdec2,postdec1
  9004  0044A4  0012               	return		;funcret
  9005  0044A6                     __end_of_levelController:
  9006                           	callstack 0
  9007                           
  9008 ;; *************** function _GameParameters_setLevel *****************
  9009 ;; Defined at:
  9010 ;;		line 50 in file "class/gameParameters.c"
  9011 ;; Parameters:    Size  Location     Type
  9012 ;;  s               2   17[COMRAM] PTR struct GameParameter
  9013 ;;		 -> g1(216), 
  9014 ;;  value           2   19[COMRAM] unsigned short 
  9015 ;; Auto vars:     Size  Location     Type
  9016 ;;		None
  9017 ;; Return value:  Size  Location     Type
  9018 ;;                  1    wreg      void 
  9019 ;; Registers used:
  9020 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9021 ;; Tracked objects:
  9022 ;;		On entry : 0/0
  9023 ;;		On exit  : 0/0
  9024 ;;		Unchanged: 0/0
  9025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9026 ;;      Params:         4       0       0       0       0       0       0
  9027 ;;      Locals:         0       0       0       0       0       0       0
  9028 ;;      Temps:          0       0       0       0       0       0       0
  9029 ;;      Totals:         4       0       0       0       0       0       0
  9030 ;;Total ram usage:        4 bytes
  9031 ;; Hardware stack levels used: 1
  9032 ;; Hardware stack levels required when called: 4
  9033 ;; This function calls:
  9034 ;;		Nothing
  9035 ;; This function is called by:
  9036 ;;		_levelController
  9037 ;; This function uses a non-reentrant model
  9038 ;;
  9039                           
  9040                           	psect	text34
  9041  0058A2                     __ptext34:
  9042                           	callstack 0
  9043  0058A2                     _GameParameters_setLevel:
  9044                           	callstack 21
  9045                           
  9046                           ;class/gameParameters.c: 50: void GameParameters_setLevel(struct GameParameters* s, uint
      +                          16_t value);class/gameParameters.c: 51: {;class/gameParameters.c: 52:     s->level = val
      +                          ue;
  9047                           
  9048                           ;incstack = 0
  9049  0058A2  EE20 F006          	lfsr	2,6
  9050  0058A6  5012               	movf	GameParameters_setLevel@s^0,w,c
  9051  0058A8  26D9               	addwf	fsr2l,f,c
  9052  0058AA  5013               	movf	(GameParameters_setLevel@s+1)^0,w,c
  9053  0058AC  22DA               	addwfc	fsr2h,f,c
  9054  0058AE  C014  FFDE         	movff	GameParameters_setLevel@value,postinc2
  9055  0058B2  C015  FFDD         	movff	GameParameters_setLevel@value+1,postdec2
  9056  0058B6  0012               	return		;funcret
  9057  0058B8                     __end_of_GameParameters_setLevel:
  9058                           	callstack 0
  9059                           
  9060 ;; *************** function _backlightController *****************
  9061 ;; Defined at:
  9062 ;;		line 179 in file "gameFunction.c"
  9063 ;; Parameters:    Size  Location     Type
  9064 ;;  g               2   23[COMRAM] PTR struct GameParameter
  9065 ;;		 -> g1(216), 
  9066 ;; Auto vars:     Size  Location     Type
  9067 ;;		None
  9068 ;; Return value:  Size  Location     Type
  9069 ;;                  1    wreg      void 
  9070 ;; Registers used:
  9071 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9072 ;; Tracked objects:
  9073 ;;		On entry : 0/0
  9074 ;;		On exit  : 0/0
  9075 ;;		Unchanged: 0/0
  9076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9077 ;;      Params:         2       0       0       0       0       0       0
  9078 ;;      Locals:         0       0       0       0       0       0       0
  9079 ;;      Temps:          2       0       0       0       0       0       0
  9080 ;;      Totals:         4       0       0       0       0       0       0
  9081 ;;Total ram usage:        4 bytes
  9082 ;; Hardware stack levels used: 1
  9083 ;; Hardware stack levels required when called: 5
  9084 ;; This function calls:
  9085 ;;		_GameParameters_setBackLight
  9086 ;; This function is called by:
  9087 ;;		_gameControllerController
  9088 ;; This function uses a non-reentrant model
  9089 ;;
  9090                           
  9091                           	psect	text35
  9092  001AD0                     __ptext35:
  9093                           	callstack 0
  9094  001AD0                     _backlightController:
  9095                           	callstack 21
  9096                           
  9097                           ;gameFunction.c: 179: void backlightController(GameParameters* g);gameFunction.c: 180: {
      +                          ;gameFunction.c: 182:     if(((g->x)>=50)&&((g->x)<64))
  9098                           
  9099                           ;incstack = 0
  9100  001AD0  EE20 F002          	lfsr	2,2
  9101  001AD4  5018               	movf	backlightController@g^0,w,c
  9102  001AD6  26D9               	addwf	fsr2l,f,c
  9103  001AD8  5019               	movf	(backlightController@g+1)^0,w,c
  9104  001ADA  22DA               	addwfc	fsr2h,f,c
  9105  001ADC  0E01               	movlw	1
  9106  001ADE  50DB               	movf	plusw2,w,c
  9107  001AE0  E104               	bnz	u4320
  9108  001AE2  0E32               	movlw	50
  9109  001AE4  5CDE               	subwf	postinc2,w,c
  9110  001AE6  A0D8               	btfss	status,0,c
  9111  001AE8  D018               	goto	l6950
  9112  001AEA                     u4320:
  9113  001AEA  EE20 F002          	lfsr	2,2
  9114  001AEE  5018               	movf	backlightController@g^0,w,c
  9115  001AF0  26D9               	addwf	fsr2l,f,c
  9116  001AF2  5019               	movf	(backlightController@g+1)^0,w,c
  9117  001AF4  22DA               	addwfc	fsr2h,f,c
  9118  001AF6  0E01               	movlw	1
  9119  001AF8  50DB               	movf	plusw2,w,c
  9120  001AFA  E10F               	bnz	l6950
  9121  001AFC  0E40               	movlw	64
  9122  001AFE  5CDE               	subwf	postinc2,w,c
  9123  001B00  B0D8               	btfsc	status,0,c
  9124  001B02  D00B               	goto	l6950
  9125                           
  9126                           ;gameFunction.c: 183:     {;gameFunction.c: 184:         GameParameters_setBackLight(g,0
      +                          );
  9127  001B04  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9128  001B08  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9129  001B0C  0E00               	movlw	0
  9130  001B0E  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9131  001B10  0E00               	movlw	0
  9132  001B12  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9133  001B14  ECC5  F02A         	call	_GameParameters_setBackLight	;wreg free
  9134                           
  9135                           ;gameFunction.c: 185:     }
  9136  001B18  D196               	goto	l858
  9137  001B1A                     l6950:
  9138  001B1A  EE20 F002          	lfsr	2,2
  9139  001B1E  5018               	movf	backlightController@g^0,w,c
  9140  001B20  26D9               	addwf	fsr2l,f,c
  9141  001B22  5019               	movf	(backlightController@g+1)^0,w,c
  9142  001B24  22DA               	addwfc	fsr2h,f,c
  9143  001B26  0E01               	movlw	1
  9144  001B28  50DB               	movf	plusw2,w,c
  9145  001B2A  E104               	bnz	u4340
  9146  001B2C  0E40               	movlw	64
  9147  001B2E  5CDE               	subwf	postinc2,w,c
  9148  001B30  A0D8               	btfss	status,0,c
  9149  001B32  D018               	goto	l6956
  9150  001B34                     u4340:
  9151  001B34  EE20 F002          	lfsr	2,2
  9152  001B38  5018               	movf	backlightController@g^0,w,c
  9153  001B3A  26D9               	addwf	fsr2l,f,c
  9154  001B3C  5019               	movf	(backlightController@g+1)^0,w,c
  9155  001B3E  22DA               	addwfc	fsr2h,f,c
  9156  001B40  0E01               	movlw	1
  9157  001B42  50DB               	movf	plusw2,w,c
  9158  001B44  E10F               	bnz	l6956
  9159  001B46  0E4E               	movlw	78
  9160  001B48  5CDE               	subwf	postinc2,w,c
  9161  001B4A  B0D8               	btfsc	status,0,c
  9162  001B4C  D00B               	goto	l6956
  9163                           
  9164                           ;gameFunction.c: 187:     {;gameFunction.c: 188:         GameParameters_setBackLight(g,1
      +                          );
  9165  001B4E  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9166  001B52  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9167  001B56  0E00               	movlw	0
  9168  001B58  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9169  001B5A  0E01               	movlw	1
  9170  001B5C  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9171  001B5E  ECC5  F02A         	call	_GameParameters_setBackLight	;wreg free
  9172                           
  9173                           ;gameFunction.c: 189:     }
  9174  001B62  D171               	goto	l858
  9175  001B64                     l6956:
  9176  001B64  EE20 F002          	lfsr	2,2
  9177  001B68  5018               	movf	backlightController@g^0,w,c
  9178  001B6A  26D9               	addwf	fsr2l,f,c
  9179  001B6C  5019               	movf	(backlightController@g+1)^0,w,c
  9180  001B6E  22DA               	addwfc	fsr2h,f,c
  9181  001B70  0E01               	movlw	1
  9182  001B72  50DB               	movf	plusw2,w,c
  9183  001B74  E104               	bnz	u4360
  9184  001B76  0E4E               	movlw	78
  9185  001B78  5CDE               	subwf	postinc2,w,c
  9186  001B7A  A0D8               	btfss	status,0,c
  9187  001B7C  D018               	goto	l6962
  9188  001B7E                     u4360:
  9189  001B7E  EE20 F002          	lfsr	2,2
  9190  001B82  5018               	movf	backlightController@g^0,w,c
  9191  001B84  26D9               	addwf	fsr2l,f,c
  9192  001B86  5019               	movf	(backlightController@g+1)^0,w,c
  9193  001B88  22DA               	addwfc	fsr2h,f,c
  9194  001B8A  0E01               	movlw	1
  9195  001B8C  50DB               	movf	plusw2,w,c
  9196  001B8E  E10F               	bnz	l6962
  9197  001B90  0E5C               	movlw	92
  9198  001B92  5CDE               	subwf	postinc2,w,c
  9199  001B94  B0D8               	btfsc	status,0,c
  9200  001B96  D00B               	goto	l6962
  9201                           
  9202                           ;gameFunction.c: 191:     {;gameFunction.c: 192:         GameParameters_setBackLight(g,2
      +                          );
  9203  001B98  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9204  001B9C  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9205  001BA0  0E00               	movlw	0
  9206  001BA2  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9207  001BA4  0E02               	movlw	2
  9208  001BA6  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9209  001BA8  ECC5  F02A         	call	_GameParameters_setBackLight	;wreg free
  9210                           
  9211                           ;gameFunction.c: 193:     }
  9212  001BAC  D14C               	goto	l858
  9213  001BAE                     l6962:
  9214  001BAE  EE20 F002          	lfsr	2,2
  9215  001BB2  5018               	movf	backlightController@g^0,w,c
  9216  001BB4  26D9               	addwf	fsr2l,f,c
  9217  001BB6  5019               	movf	(backlightController@g+1)^0,w,c
  9218  001BB8  22DA               	addwfc	fsr2h,f,c
  9219  001BBA  0E01               	movlw	1
  9220  001BBC  50DB               	movf	plusw2,w,c
  9221  001BBE  E104               	bnz	u4380
  9222  001BC0  0E5C               	movlw	92
  9223  001BC2  5CDE               	subwf	postinc2,w,c
  9224  001BC4  A0D8               	btfss	status,0,c
  9225  001BC6  D018               	goto	l6968
  9226  001BC8                     u4380:
  9227  001BC8  EE20 F002          	lfsr	2,2
  9228  001BCC  5018               	movf	backlightController@g^0,w,c
  9229  001BCE  26D9               	addwf	fsr2l,f,c
  9230  001BD0  5019               	movf	(backlightController@g+1)^0,w,c
  9231  001BD2  22DA               	addwfc	fsr2h,f,c
  9232  001BD4  0E01               	movlw	1
  9233  001BD6  50DB               	movf	plusw2,w,c
  9234  001BD8  E10F               	bnz	l6968
  9235  001BDA  0E6A               	movlw	106
  9236  001BDC  5CDE               	subwf	postinc2,w,c
  9237  001BDE  B0D8               	btfsc	status,0,c
  9238  001BE0  D00B               	goto	l6968
  9239                           
  9240                           ;gameFunction.c: 195:     {;gameFunction.c: 196:         GameParameters_setBackLight(g,3
      +                          );
  9241  001BE2  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9242  001BE6  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9243  001BEA  0E00               	movlw	0
  9244  001BEC  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9245  001BEE  0E03               	movlw	3
  9246  001BF0  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9247  001BF2  ECC5  F02A         	call	_GameParameters_setBackLight	;wreg free
  9248                           
  9249                           ;gameFunction.c: 197:     }
  9250  001BF6  D127               	goto	l858
  9251  001BF8                     l6968:
  9252  001BF8  EE20 F002          	lfsr	2,2
  9253  001BFC  5018               	movf	backlightController@g^0,w,c
  9254  001BFE  26D9               	addwf	fsr2l,f,c
  9255  001C00  5019               	movf	(backlightController@g+1)^0,w,c
  9256  001C02  22DA               	addwfc	fsr2h,f,c
  9257  001C04  0E01               	movlw	1
  9258  001C06  50DB               	movf	plusw2,w,c
  9259  001C08  E104               	bnz	u4400
  9260  001C0A  0E6A               	movlw	106
  9261  001C0C  5CDE               	subwf	postinc2,w,c
  9262  001C0E  A0D8               	btfss	status,0,c
  9263  001C10  D018               	goto	l6974
  9264  001C12                     u4400:
  9265  001C12  EE20 F002          	lfsr	2,2
  9266  001C16  5018               	movf	backlightController@g^0,w,c
  9267  001C18  26D9               	addwf	fsr2l,f,c
  9268  001C1A  5019               	movf	(backlightController@g+1)^0,w,c
  9269  001C1C  22DA               	addwfc	fsr2h,f,c
  9270  001C1E  0E01               	movlw	1
  9271  001C20  50DB               	movf	plusw2,w,c
  9272  001C22  E10F               	bnz	l6974
  9273  001C24  0E78               	movlw	120
  9274  001C26  5CDE               	subwf	postinc2,w,c
  9275  001C28  B0D8               	btfsc	status,0,c
  9276  001C2A  D00B               	goto	l6974
  9277                           
  9278                           ;gameFunction.c: 199:     {;gameFunction.c: 200:         GameParameters_setBackLight(g,4
      +                          );
  9279  001C2C  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9280  001C30  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9281  001C34  0E00               	movlw	0
  9282  001C36  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9283  001C38  0E04               	movlw	4
  9284  001C3A  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9285  001C3C  ECC5  F02A         	call	_GameParameters_setBackLight	;wreg free
  9286                           
  9287                           ;gameFunction.c: 201:     }
  9288  001C40  D102               	goto	l858
  9289  001C42                     l6974:
  9290  001C42  EE20 F002          	lfsr	2,2
  9291  001C46  5018               	movf	backlightController@g^0,w,c
  9292  001C48  26D9               	addwf	fsr2l,f,c
  9293  001C4A  5019               	movf	(backlightController@g+1)^0,w,c
  9294  001C4C  22DA               	addwfc	fsr2h,f,c
  9295  001C4E  0E01               	movlw	1
  9296  001C50  50DB               	movf	plusw2,w,c
  9297  001C52  E104               	bnz	u4420
  9298  001C54  0E78               	movlw	120
  9299  001C56  5CDE               	subwf	postinc2,w,c
  9300  001C58  A0D8               	btfss	status,0,c
  9301  001C5A  D018               	goto	l6980
  9302  001C5C                     u4420:
  9303  001C5C  EE20 F002          	lfsr	2,2
  9304  001C60  5018               	movf	backlightController@g^0,w,c
  9305  001C62  26D9               	addwf	fsr2l,f,c
  9306  001C64  5019               	movf	(backlightController@g+1)^0,w,c
  9307  001C66  22DA               	addwfc	fsr2h,f,c
  9308  001C68  0E01               	movlw	1
  9309  001C6A  50DB               	movf	plusw2,w,c
  9310  001C6C  E10F               	bnz	l6980
  9311  001C6E  0E86               	movlw	134
  9312  001C70  5CDE               	subwf	postinc2,w,c
  9313  001C72  B0D8               	btfsc	status,0,c
  9314  001C74  D00B               	goto	l6980
  9315                           
  9316                           ;gameFunction.c: 203:     {;gameFunction.c: 204:         GameParameters_setBackLight(g,5
      +                          );
  9317  001C76  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9318  001C7A  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9319  001C7E  0E00               	movlw	0
  9320  001C80  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9321  001C82  0E05               	movlw	5
  9322  001C84  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9323  001C86  ECC5  F02A         	call	_GameParameters_setBackLight	;wreg free
  9324                           
  9325                           ;gameFunction.c: 205:     }
  9326  001C8A  D0DD               	goto	l858
  9327  001C8C                     l6980:
  9328  001C8C  EE20 F002          	lfsr	2,2
  9329  001C90  5018               	movf	backlightController@g^0,w,c
  9330  001C92  26D9               	addwf	fsr2l,f,c
  9331  001C94  5019               	movf	(backlightController@g+1)^0,w,c
  9332  001C96  22DA               	addwfc	fsr2h,f,c
  9333  001C98  0E01               	movlw	1
  9334  001C9A  50DB               	movf	plusw2,w,c
  9335  001C9C  E104               	bnz	u4440
  9336  001C9E  0E86               	movlw	134
  9337  001CA0  5CDE               	subwf	postinc2,w,c
  9338  001CA2  A0D8               	btfss	status,0,c
  9339  001CA4  D018               	goto	l6986
  9340  001CA6                     u4440:
  9341  001CA6  EE20 F002          	lfsr	2,2
  9342  001CAA  5018               	movf	backlightController@g^0,w,c
  9343  001CAC  26D9               	addwf	fsr2l,f,c
  9344  001CAE  5019               	movf	(backlightController@g+1)^0,w,c
  9345  001CB0  22DA               	addwfc	fsr2h,f,c
  9346  001CB2  0E01               	movlw	1
  9347  001CB4  50DB               	movf	plusw2,w,c
  9348  001CB6  E10F               	bnz	l6986
  9349  001CB8  0E96               	movlw	150
  9350  001CBA  5CDE               	subwf	postinc2,w,c
  9351  001CBC  B0D8               	btfsc	status,0,c
  9352  001CBE  D00B               	goto	l6986
  9353                           
  9354                           ;gameFunction.c: 207:     {;gameFunction.c: 208:         GameParameters_setBackLight(g,6
      +                          );
  9355  001CC0  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9356  001CC4  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9357  001CC8  0E00               	movlw	0
  9358  001CCA  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9359  001CCC  0E06               	movlw	6
  9360  001CCE  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9361  001CD0  ECC5  F02A         	call	_GameParameters_setBackLight	;wreg free
  9362                           
  9363                           ;gameFunction.c: 209:     }
  9364  001CD4  D0B8               	goto	l858
  9365  001CD6                     l6986:
  9366  001CD6  EE20 F002          	lfsr	2,2
  9367  001CDA  5018               	movf	backlightController@g^0,w,c
  9368  001CDC  26D9               	addwf	fsr2l,f,c
  9369  001CDE  5019               	movf	(backlightController@g+1)^0,w,c
  9370  001CE0  22DA               	addwfc	fsr2h,f,c
  9371  001CE2  0E01               	movlw	1
  9372  001CE4  50DB               	movf	plusw2,w,c
  9373  001CE6  E104               	bnz	u4460
  9374  001CE8  0E96               	movlw	150
  9375  001CEA  5CDE               	subwf	postinc2,w,c
  9376  001CEC  A0D8               	btfss	status,0,c
  9377  001CEE  D018               	goto	l6992
  9378  001CF0                     u4460:
  9379  001CF0  EE20 F002          	lfsr	2,2
  9380  001CF4  5018               	movf	backlightController@g^0,w,c
  9381  001CF6  26D9               	addwf	fsr2l,f,c
  9382  001CF8  5019               	movf	(backlightController@g+1)^0,w,c
  9383  001CFA  22DA               	addwfc	fsr2h,f,c
  9384  001CFC  0E01               	movlw	1
  9385  001CFE  50DB               	movf	plusw2,w,c
  9386  001D00  E10F               	bnz	l6992
  9387  001D02  0EA4               	movlw	164
  9388  001D04  5CDE               	subwf	postinc2,w,c
  9389  001D06  B0D8               	btfsc	status,0,c
  9390  001D08  D00B               	goto	l6992
  9391                           
  9392                           ;gameFunction.c: 211:     {;gameFunction.c: 212:         GameParameters_setBackLight(g,7
      +                          );
  9393  001D0A  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9394  001D0E  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9395  001D12  0E00               	movlw	0
  9396  001D14  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9397  001D16  0E07               	movlw	7
  9398  001D18  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9399  001D1A  ECC5  F02A         	call	_GameParameters_setBackLight	;wreg free
  9400                           
  9401                           ;gameFunction.c: 213:     }
  9402  001D1E  D093               	goto	l858
  9403  001D20                     l6992:
  9404  001D20  EE20 F002          	lfsr	2,2
  9405  001D24  5018               	movf	backlightController@g^0,w,c
  9406  001D26  26D9               	addwf	fsr2l,f,c
  9407  001D28  5019               	movf	(backlightController@g+1)^0,w,c
  9408  001D2A  22DA               	addwfc	fsr2h,f,c
  9409  001D2C  0E01               	movlw	1
  9410  001D2E  50DB               	movf	plusw2,w,c
  9411  001D30  E104               	bnz	u4480
  9412  001D32  0EA4               	movlw	164
  9413  001D34  5CDE               	subwf	postinc2,w,c
  9414  001D36  A0D8               	btfss	status,0,c
  9415  001D38  D018               	goto	l6998
  9416  001D3A                     u4480:
  9417  001D3A  EE20 F002          	lfsr	2,2
  9418  001D3E  5018               	movf	backlightController@g^0,w,c
  9419  001D40  26D9               	addwf	fsr2l,f,c
  9420  001D42  5019               	movf	(backlightController@g+1)^0,w,c
  9421  001D44  22DA               	addwfc	fsr2h,f,c
  9422  001D46  0E01               	movlw	1
  9423  001D48  50DB               	movf	plusw2,w,c
  9424  001D4A  E10F               	bnz	l6998
  9425  001D4C  0EB2               	movlw	178
  9426  001D4E  5CDE               	subwf	postinc2,w,c
  9427  001D50  B0D8               	btfsc	status,0,c
  9428  001D52  D00B               	goto	l6998
  9429                           
  9430                           ;gameFunction.c: 215:     {;gameFunction.c: 216:         GameParameters_setBackLight(g,8
      +                          );
  9431  001D54  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9432  001D58  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9433  001D5C  0E00               	movlw	0
  9434  001D5E  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9435  001D60  0E08               	movlw	8
  9436  001D62  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9437  001D64  ECC5  F02A         	call	_GameParameters_setBackLight	;wreg free
  9438                           
  9439                           ;gameFunction.c: 217:     }
  9440  001D68  D06E               	goto	l858
  9441  001D6A                     l6998:
  9442  001D6A  EE20 F002          	lfsr	2,2
  9443  001D6E  5018               	movf	backlightController@g^0,w,c
  9444  001D70  26D9               	addwf	fsr2l,f,c
  9445  001D72  5019               	movf	(backlightController@g+1)^0,w,c
  9446  001D74  22DA               	addwfc	fsr2h,f,c
  9447  001D76  0E01               	movlw	1
  9448  001D78  50DB               	movf	plusw2,w,c
  9449  001D7A  E104               	bnz	u4500
  9450  001D7C  0EB2               	movlw	178
  9451  001D7E  5CDE               	subwf	postinc2,w,c
  9452  001D80  A0D8               	btfss	status,0,c
  9453  001D82  D018               	goto	l7004
  9454  001D84                     u4500:
  9455  001D84  EE20 F002          	lfsr	2,2
  9456  001D88  5018               	movf	backlightController@g^0,w,c
  9457  001D8A  26D9               	addwf	fsr2l,f,c
  9458  001D8C  5019               	movf	(backlightController@g+1)^0,w,c
  9459  001D8E  22DA               	addwfc	fsr2h,f,c
  9460  001D90  0E01               	movlw	1
  9461  001D92  50DB               	movf	plusw2,w,c
  9462  001D94  E10F               	bnz	l7004
  9463  001D96  0EC0               	movlw	192
  9464  001D98  5CDE               	subwf	postinc2,w,c
  9465  001D9A  B0D8               	btfsc	status,0,c
  9466  001D9C  D00B               	goto	l7004
  9467                           
  9468                           ;gameFunction.c: 219:     {;gameFunction.c: 220:         GameParameters_setBackLight(g,9
      +                          );
  9469  001D9E  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9470  001DA2  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9471  001DA6  0E00               	movlw	0
  9472  001DA8  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9473  001DAA  0E09               	movlw	9
  9474  001DAC  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9475  001DAE  ECC5  F02A         	call	_GameParameters_setBackLight	;wreg free
  9476                           
  9477                           ;gameFunction.c: 221:     }
  9478  001DB2  D049               	goto	l858
  9479  001DB4                     l7004:
  9480  001DB4  EE20 F002          	lfsr	2,2
  9481  001DB8  5018               	movf	backlightController@g^0,w,c
  9482  001DBA  26D9               	addwf	fsr2l,f,c
  9483  001DBC  5019               	movf	(backlightController@g+1)^0,w,c
  9484  001DBE  22DA               	addwfc	fsr2h,f,c
  9485  001DC0  0E01               	movlw	1
  9486  001DC2  50DB               	movf	plusw2,w,c
  9487  001DC4  E104               	bnz	u4520
  9488  001DC6  0EC0               	movlw	192
  9489  001DC8  5CDE               	subwf	postinc2,w,c
  9490  001DCA  A0D8               	btfss	status,0,c
  9491  001DCC  D018               	goto	l7010
  9492  001DCE                     u4520:
  9493  001DCE  EE20 F002          	lfsr	2,2
  9494  001DD2  5018               	movf	backlightController@g^0,w,c
  9495  001DD4  26D9               	addwf	fsr2l,f,c
  9496  001DD6  5019               	movf	(backlightController@g+1)^0,w,c
  9497  001DD8  22DA               	addwfc	fsr2h,f,c
  9498  001DDA  0E01               	movlw	1
  9499  001DDC  50DB               	movf	plusw2,w,c
  9500  001DDE  E10F               	bnz	l7010
  9501  001DE0  0ECE               	movlw	206
  9502  001DE2  5CDE               	subwf	postinc2,w,c
  9503  001DE4  B0D8               	btfsc	status,0,c
  9504  001DE6  D00B               	goto	l7010
  9505                           
  9506                           ;gameFunction.c: 223:     {;gameFunction.c: 224:         GameParameters_setBackLight(g,1
      +                          0);
  9507  001DE8  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9508  001DEC  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9509  001DF0  0E00               	movlw	0
  9510  001DF2  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9511  001DF4  0E0A               	movlw	10
  9512  001DF6  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9513  001DF8  ECC5  F02A         	call	_GameParameters_setBackLight	;wreg free
  9514                           
  9515                           ;gameFunction.c: 225:     }
  9516  001DFC  D024               	goto	l858
  9517  001DFE                     l7010:
  9518  001DFE  EE20 F002          	lfsr	2,2
  9519  001E02  5018               	movf	backlightController@g^0,w,c
  9520  001E04  26D9               	addwf	fsr2l,f,c
  9521  001E06  5019               	movf	(backlightController@g+1)^0,w,c
  9522  001E08  22DA               	addwfc	fsr2h,f,c
  9523  001E0A  0E01               	movlw	1
  9524  001E0C  50DB               	movf	plusw2,w,c
  9525  001E0E  E104               	bnz	u4540
  9526  001E10  0ECE               	movlw	206
  9527  001E12  5CDE               	subwf	postinc2,w,c
  9528  001E14  A0D8               	btfss	status,0,c
  9529  001E16  D017               	goto	l858
  9530  001E18                     u4540:
  9531  001E18  EE20 F002          	lfsr	2,2
  9532  001E1C  5018               	movf	backlightController@g^0,w,c
  9533  001E1E  26D9               	addwf	fsr2l,f,c
  9534  001E20  5019               	movf	(backlightController@g+1)^0,w,c
  9535  001E22  22DA               	addwfc	fsr2h,f,c
  9536  001E24  0E01               	movlw	1
  9537  001E26  50DB               	movf	plusw2,w,c
  9538  001E28  E10E               	bnz	l858
  9539  001E2A  0ED7               	movlw	215
  9540  001E2C  5CDE               	subwf	postinc2,w,c
  9541  001E2E  B0D8               	btfsc	status,0,c
  9542  001E30  D00A               	goto	l858
  9543                           
  9544                           ;gameFunction.c: 227:     {;gameFunction.c: 228:         GameParameters_setBackLight(g,1
      +                          1);
  9545  001E32  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9546  001E36  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9547  001E3A  0E00               	movlw	0
  9548  001E3C  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9549  001E3E  0E0B               	movlw	11
  9550  001E40  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9551  001E42  ECC5  F02A         	call	_GameParameters_setBackLight	;wreg free
  9552  001E46                     l858:
  9553                           
  9554                           ;gameFunction.c: 230:     g->sldBackLight.value=g->backlight;
  9555  001E46  C018  FFD9         	movff	backlightController@g,fsr2l
  9556  001E4A  C019  FFDA         	movff	backlightController@g+1,fsr2h
  9557  001E4E  EE10 F091          	lfsr	1,145
  9558  001E52  5018               	movf	backlightController@g^0,w,c
  9559  001E54  26E1               	addwf	fsr1l,f,c
  9560  001E56  5019               	movf	(backlightController@g+1)^0,w,c
  9561  001E58  22E2               	addwfc	fsr1h,f,c
  9562  001E5A  CFDE FFE6          	movff	postinc2,postinc1
  9563  001E5E  CFDD FFE5          	movff	postdec2,postdec1
  9564  001E62  0012               	return		;funcret
  9565  001E64                     __end_of_backlightController:
  9566                           	callstack 0
  9567                           
  9568 ;; *************** function _GameParameters_setBackLight *****************
  9569 ;; Defined at:
  9570 ;;		line 34 in file "class/gameParameters.c"
  9571 ;; Parameters:    Size  Location     Type
  9572 ;;  s               2   17[COMRAM] PTR struct GameParameter
  9573 ;;		 -> g1(216), 
  9574 ;;  value           2   19[COMRAM] unsigned short 
  9575 ;; Auto vars:     Size  Location     Type
  9576 ;;		None
  9577 ;; Return value:  Size  Location     Type
  9578 ;;                  1    wreg      void 
  9579 ;; Registers used:
  9580 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9581 ;; Tracked objects:
  9582 ;;		On entry : 0/0
  9583 ;;		On exit  : 0/0
  9584 ;;		Unchanged: 0/0
  9585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9586 ;;      Params:         4       0       0       0       0       0       0
  9587 ;;      Locals:         0       0       0       0       0       0       0
  9588 ;;      Temps:          2       0       0       0       0       0       0
  9589 ;;      Totals:         6       0       0       0       0       0       0
  9590 ;;Total ram usage:        6 bytes
  9591 ;; Hardware stack levels used: 1
  9592 ;; Hardware stack levels required when called: 4
  9593 ;; This function calls:
  9594 ;;		Nothing
  9595 ;; This function is called by:
  9596 ;;		_backlightController
  9597 ;; This function uses a non-reentrant model
  9598 ;;
  9599                           
  9600                           	psect	text36
  9601  00558A                     __ptext36:
  9602                           	callstack 0
  9603  00558A                     _GameParameters_setBackLight:
  9604                           	callstack 21
  9605                           
  9606                           ;class/gameParameters.c: 34: void GameParameters_setBackLight(struct GameParameters* s, 
      +                          uint16_t value);class/gameParameters.c: 35: {;class/gameParameters.c: 36:     s->backlig
      +                          ht = value;
  9607                           
  9608                           ;incstack = 0
  9609  00558A  C012  FFD9         	movff	GameParameters_setBackLight@s,fsr2l
  9610  00558E  C013  FFDA         	movff	GameParameters_setBackLight@s+1,fsr2h
  9611  005592  C014  FFDE         	movff	GameParameters_setBackLight@value,postinc2
  9612  005596  C015  FFDD         	movff	GameParameters_setBackLight@value+1,postdec2
  9613                           
  9614                           ;class/gameParameters.c: 37:     if(s->backlight==11)
  9615  00559A  C012  FFD9         	movff	GameParameters_setBackLight@s,fsr2l
  9616  00559E  C013  FFDA         	movff	GameParameters_setBackLight@s+1,fsr2h
  9617  0055A2  0E0B               	movlw	11
  9618  0055A4  18DE               	xorwf	postinc2,w,c
  9619  0055A6  10DE               	iorwf	postinc2,w,c
  9620  0055A8  A4D8               	btfss	status,2,c
  9621  0055AA  D002               	goto	l6628
  9622                           
  9623                           ;class/gameParameters.c: 38:     {;class/gameParameters.c: 39:         CCPR2L = 255;
  9624  0055AC  6867               	setf	103,c	;volatile
  9625                           
  9626                           ;class/gameParameters.c: 40:     }
  9627  0055AE  0012               	return	
  9628  0055B0                     l6628:
  9629                           
  9630                           ;class/gameParameters.c: 42:     {;class/gameParameters.c: 43:         CCPR2L=(s->backli
      +                          ght)*23;
  9631  0055B0  C012  FFD9         	movff	GameParameters_setBackLight@s,fsr2l
  9632  0055B4  C013  FFDA         	movff	GameParameters_setBackLight@s+1,fsr2h
  9633  0055B8  50DF               	movf	indf2,w,c
  9634  0055BA  0D17               	mullw	23
  9635  0055BC  CFF3 FF67          	movff	prodl,3943	;volatile
  9636  0055C0  0012               	return		;funcret
  9637  0055C2                     __end_of_GameParameters_setBackLight:
  9638                           	callstack 0
  9639                           
  9640 ;; *************** function _XF_scheduleTimer *****************
  9641 ;; Defined at:
  9642 ;;		line 96 in file "xf/xf.c"
  9643 ;; Parameters:    Size  Location     Type
  9644 ;;  tm              2   18[COMRAM] unsigned short 
  9645 ;;  ev              1   20[COMRAM] unsigned char 
  9646 ;;  inISR           1   21[COMRAM] _Bool 
  9647 ;; Auto vars:     Size  Location     Type
  9648 ;;  i               1   22[COMRAM] unsigned char 
  9649 ;; Return value:  Size  Location     Type
  9650 ;;                  1    wreg      unsigned char 
  9651 ;; Registers used:
  9652 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9653 ;; Tracked objects:
  9654 ;;		On entry : 0/0
  9655 ;;		On exit  : 0/0
  9656 ;;		Unchanged: 0/0
  9657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9658 ;;      Params:         4       0       0       0       0       0       0
  9659 ;;      Locals:         1       0       0       0       0       0       0
  9660 ;;      Temps:          0       0       0       0       0       0       0
  9661 ;;      Totals:         5       0       0       0       0       0       0
  9662 ;;Total ram usage:        5 bytes
  9663 ;; Hardware stack levels used: 1
  9664 ;; Hardware stack levels required when called: 5
  9665 ;; This function calls:
  9666 ;;		_ENTERCRITICAL
  9667 ;;		_LEAVECRITICAL
  9668 ;; This function is called by:
  9669 ;;		_touchScreenInit
  9670 ;;		_touchScreenController
  9671 ;;		_gameControllerSM
  9672 ;;		_gameControllerController
  9673 ;; This function uses a non-reentrant model
  9674 ;;
  9675                           
  9676                           	psect	text37
  9677  0052B4                     __ptext37:
  9678                           	callstack 0
  9679  0052B4                     _XF_scheduleTimer:
  9680                           	callstack 22
  9681                           
  9682                           ;xf/xf.c: 96: TimerID XF_scheduleTimer(Time tm, Event ev, _Bool inISR);xf/xf.c: 97: {;xf
      +                          /xf.c: 98:     uint8_t i;;xf/xf.c: 100:     ENTERCRITICAL(inISR);
  9683                           
  9684                           ;incstack = 0
  9685  0052B4  5016               	movf	XF_scheduleTimer@inISR^0,w,c
  9686  0052B6  EC62  F02C         	call	_ENTERCRITICAL
  9687                           
  9688                           ;xf/xf.c: 101:     for (i=0; i<8; i++)
  9689  0052BA  0E00               	movlw	0
  9690  0052BC  6E17               	movwf	XF_scheduleTimer@i^0,c
  9691  0052BE                     l9114:
  9692                           
  9693                           ;xf/xf.c: 102:     {;xf/xf.c: 103:         if (theXF.timerList[i].ev == NULLEVENT)
  9694  0052BE  5017               	movf	XF_scheduleTimer@i^0,w,c
  9695  0052C0  0D03               	mullw	3
  9696  0052C2  50F3               	movf	243,w,c
  9697  0052C4  0FB2               	addlw	low (_theXF+2)
  9698  0052C6  6ED9               	movwf	fsr2l,c
  9699  0052C8  6ADA               	clrf	fsr2h,c
  9700  0052CA  50DF               	movf	indf2,w,c
  9701  0052CC  A4D8               	btfss	status,2,c
  9702  0052CE  D013               	goto	l9118
  9703                           
  9704                           ;xf/xf.c: 104:         {;xf/xf.c: 105:             theXF.timerList[i].tm = tm;
  9705  0052D0  5017               	movf	XF_scheduleTimer@i^0,w,c
  9706  0052D2  0D03               	mullw	3
  9707  0052D4  50F3               	movf	243,w,c
  9708  0052D6  0FB0               	addlw	low _theXF
  9709  0052D8  6ED9               	movwf	fsr2l,c
  9710  0052DA  6ADA               	clrf	fsr2h,c
  9711  0052DC  C013  FFDE         	movff	XF_scheduleTimer@tm,postinc2
  9712  0052E0  C014  FFDD         	movff	XF_scheduleTimer@tm+1,postdec2
  9713                           
  9714                           ;xf/xf.c: 106:             theXF.timerList[i].ev = ev;
  9715  0052E4  5017               	movf	XF_scheduleTimer@i^0,w,c
  9716  0052E6  0D03               	mullw	3
  9717  0052E8  50F3               	movf	243,w,c
  9718  0052EA  0FB2               	addlw	low (_theXF+2)
  9719  0052EC  6ED9               	movwf	fsr2l,c
  9720  0052EE  6ADA               	clrf	fsr2h,c
  9721  0052F0  C015  FFDF         	movff	XF_scheduleTimer@ev,indf2
  9722                           
  9723                           ;xf/xf.c: 107:             break;
  9724  0052F4  D004               	goto	u6690
  9725  0052F6                     l9118:
  9726                           
  9727                           ;xf/xf.c: 109:     }
  9728  0052F6  2A17               	incf	XF_scheduleTimer@i^0,f,c
  9729  0052F8  0E07               	movlw	7
  9730  0052FA  6417               	cpfsgt	XF_scheduleTimer@i^0,c
  9731  0052FC  D7E0               	goto	l9114
  9732  0052FE                     u6690:
  9733                           
  9734                           ;xf/xf.c: 114:     LEAVECRITICAL(inISR);
  9735  0052FE  5016               	movf	XF_scheduleTimer@inISR^0,w,c
  9736  005300  EC5C  F02C         	call	_LEAVECRITICAL
  9737  005304  0012               	return		;funcret
  9738  005306                     __end_of_XF_scheduleTimer:
  9739                           	callstack 0
  9740                           
  9741 ;; *************** function _LCD_InSlider *****************
  9742 ;; Defined at:
  9743 ;;		line 546 in file "libraries/lcd_highlevel.c"
  9744 ;; Parameters:    Size  Location     Type
  9745 ;;  slider          2   17[COMRAM] PTR struct .
  9746 ;;		 -> g1(216), 
  9747 ;;  posX            2   19[COMRAM] unsigned short 
  9748 ;;  posY            2   21[COMRAM] unsigned short 
  9749 ;; Auto vars:     Size  Location     Type
  9750 ;;		None
  9751 ;; Return value:  Size  Location     Type
  9752 ;;                  1    wreg      unsigned char 
  9753 ;; Registers used:
  9754 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9755 ;; Tracked objects:
  9756 ;;		On entry : 0/0
  9757 ;;		On exit  : 0/0
  9758 ;;		Unchanged: 0/0
  9759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9760 ;;      Params:         6       0       0       0       0       0       0
  9761 ;;      Locals:         0       0       0       0       0       0       0
  9762 ;;      Temps:          4       0       0       0       0       0       0
  9763 ;;      Totals:        10       0       0       0       0       0       0
  9764 ;;Total ram usage:       10 bytes
  9765 ;; Hardware stack levels used: 1
  9766 ;; Hardware stack levels required when called: 4
  9767 ;; This function calls:
  9768 ;;		Nothing
  9769 ;; This function is called by:
  9770 ;;		_gameControllerController
  9771 ;; This function uses a non-reentrant model
  9772 ;;
  9773                           
  9774                           	psect	text38
  9775  0048F2                     __ptext38:
  9776                           	callstack 0
  9777  0048F2                     _LCD_InSlider:
  9778                           	callstack 22
  9779                           
  9780                           ;libraries/lcd_highlevel.c: 546: uint8_t LCD_InSlider(sld_t * slider, uint16_t posX, uin
      +                          t16_t posY);libraries/lcd_highlevel.c: 547: {;libraries/lcd_highlevel.c: 549:   if(posX 
      +                          < slider->posX)
  9781                           
  9782                           ;incstack = 0
  9783  0048F2  C012  FFD9         	movff	LCD_InSlider@slider,fsr2l
  9784  0048F6  C013  FFDA         	movff	LCD_InSlider@slider+1,fsr2h
  9785  0048FA  50DE               	movf	postinc2,w,c
  9786  0048FC  5C14               	subwf	LCD_InSlider@posX^0,w,c
  9787  0048FE  50DE               	movf	postinc2,w,c
  9788  004900  5815               	subwfb	(LCD_InSlider@posX+1)^0,w,c
  9789  004902  B0D8               	btfsc	status,0,c
  9790  004904  D002               	goto	l6884
  9791  004906                     u4260:
  9792                           
  9793                           ;libraries/lcd_highlevel.c: 550:   {;libraries/lcd_highlevel.c: 551:     return 0;
  9794  004906  0E00               	movlw	0
  9795  004908  0012               	return	
  9796  00490A                     l6884:
  9797                           
  9798                           ;libraries/lcd_highlevel.c: 554:   if(posX > (slider->posX + slider->width))
  9799  00490A  EE20 F004          	lfsr	2,4
  9800  00490E  5012               	movf	LCD_InSlider@slider^0,w,c
  9801  004910  26D9               	addwf	fsr2l,f,c
  9802  004912  5013               	movf	(LCD_InSlider@slider+1)^0,w,c
  9803  004914  22DA               	addwfc	fsr2h,f,c
  9804  004916  CFDE F018          	movff	postinc2,??_LCD_InSlider
  9805  00491A  CFDD F019          	movff	postdec2,??_LCD_InSlider+1
  9806  00491E  C012  FFD9         	movff	LCD_InSlider@slider,fsr2l
  9807  004922  C013  FFDA         	movff	LCD_InSlider@slider+1,fsr2h
  9808  004926  CFDE F01A          	movff	postinc2,??_LCD_InSlider+2
  9809  00492A  CFDD F01B          	movff	postdec2,??_LCD_InSlider+3
  9810  00492E  5018               	movf	??_LCD_InSlider^0,w,c
  9811  004930  261A               	addwf	(??_LCD_InSlider+2)^0,f,c
  9812  004932  5019               	movf	(??_LCD_InSlider+1)^0,w,c
  9813  004934  221B               	addwfc	(??_LCD_InSlider+3)^0,f,c
  9814  004936  5014               	movf	LCD_InSlider@posX^0,w,c
  9815  004938  5C1A               	subwf	(??_LCD_InSlider+2)^0,w,c
  9816  00493A  5015               	movf	(LCD_InSlider@posX+1)^0,w,c
  9817  00493C  581B               	subwfb	(??_LCD_InSlider+3)^0,w,c
  9818  00493E  A0D8               	btfss	status,0,c
  9819  004940  D7E2               	goto	u4260
  9820                           
  9821                           ;libraries/lcd_highlevel.c: 559:   if(posY < slider->posY)
  9822  004942  EE20 F002          	lfsr	2,2
  9823  004946  5012               	movf	LCD_InSlider@slider^0,w,c
  9824  004948  26D9               	addwf	fsr2l,f,c
  9825  00494A  5013               	movf	(LCD_InSlider@slider+1)^0,w,c
  9826  00494C  22DA               	addwfc	fsr2h,f,c
  9827  00494E  50DE               	movf	postinc2,w,c
  9828  004950  5C16               	subwf	LCD_InSlider@posY^0,w,c
  9829  004952  50DE               	movf	postinc2,w,c
  9830  004954  5817               	subwfb	(LCD_InSlider@posY+1)^0,w,c
  9831  004956  A0D8               	btfss	status,0,c
  9832  004958  D7D6               	goto	u4260
  9833                           
  9834                           ;libraries/lcd_highlevel.c: 564:   if(posY > (slider->posY + slider->height))
  9835  00495A  EE20 F006          	lfsr	2,6
  9836  00495E  5012               	movf	LCD_InSlider@slider^0,w,c
  9837  004960  26D9               	addwf	fsr2l,f,c
  9838  004962  5013               	movf	(LCD_InSlider@slider+1)^0,w,c
  9839  004964  22DA               	addwfc	fsr2h,f,c
  9840  004966  CFDE F018          	movff	postinc2,??_LCD_InSlider
  9841  00496A  CFDD F019          	movff	postdec2,??_LCD_InSlider+1
  9842  00496E  EE20 F002          	lfsr	2,2
  9843  004972  5012               	movf	LCD_InSlider@slider^0,w,c
  9844  004974  26D9               	addwf	fsr2l,f,c
  9845  004976  5013               	movf	(LCD_InSlider@slider+1)^0,w,c
  9846  004978  22DA               	addwfc	fsr2h,f,c
  9847  00497A  CFDE F01A          	movff	postinc2,??_LCD_InSlider+2
  9848  00497E  CFDD F01B          	movff	postdec2,??_LCD_InSlider+3
  9849  004982  5018               	movf	??_LCD_InSlider^0,w,c
  9850  004984  261A               	addwf	(??_LCD_InSlider+2)^0,f,c
  9851  004986  5019               	movf	(??_LCD_InSlider+1)^0,w,c
  9852  004988  221B               	addwfc	(??_LCD_InSlider+3)^0,f,c
  9853  00498A  5016               	movf	LCD_InSlider@posY^0,w,c
  9854  00498C  5C1A               	subwf	(??_LCD_InSlider+2)^0,w,c
  9855  00498E  5017               	movf	(LCD_InSlider@posY+1)^0,w,c
  9856  004990  581B               	subwfb	(??_LCD_InSlider+3)^0,w,c
  9857  004992  A0D8               	btfss	status,0,c
  9858  004994  D7B8               	goto	u4260
  9859                           
  9860                           ;libraries/lcd_highlevel.c: 568:   return 1;
  9861  004996  0E01               	movlw	1
  9862  004998  0012               	return		;funcret
  9863  00499A                     __end_of_LCD_InSlider:
  9864                           	callstack 0
  9865                           
  9866 ;; *************** function _LCD_InButton *****************
  9867 ;; Defined at:
  9868 ;;		line 514 in file "libraries/lcd_highlevel.c"
  9869 ;; Parameters:    Size  Location     Type
  9870 ;;  button          2   17[COMRAM] PTR struct .
  9871 ;;		 -> g1(216), 
  9872 ;;  posX            2   19[COMRAM] unsigned short 
  9873 ;;  posY            2   21[COMRAM] unsigned short 
  9874 ;; Auto vars:     Size  Location     Type
  9875 ;;		None
  9876 ;; Return value:  Size  Location     Type
  9877 ;;                  1    wreg      unsigned char 
  9878 ;; Registers used:
  9879 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9880 ;; Tracked objects:
  9881 ;;		On entry : 0/0
  9882 ;;		On exit  : 0/0
  9883 ;;		Unchanged: 0/0
  9884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9885 ;;      Params:         6       0       0       0       0       0       0
  9886 ;;      Locals:         0       0       0       0       0       0       0
  9887 ;;      Temps:          4       0       0       0       0       0       0
  9888 ;;      Totals:        10       0       0       0       0       0       0
  9889 ;;Total ram usage:       10 bytes
  9890 ;; Hardware stack levels used: 1
  9891 ;; Hardware stack levels required when called: 4
  9892 ;; This function calls:
  9893 ;;		Nothing
  9894 ;; This function is called by:
  9895 ;;		_gameControllerController
  9896 ;; This function uses a non-reentrant model
  9897 ;;
  9898                           
  9899                           	psect	text39
  9900  00499A                     __ptext39:
  9901                           	callstack 0
  9902  00499A                     _LCD_InButton:
  9903                           	callstack 22
  9904                           
  9905                           ;libraries/lcd_highlevel.c: 514: uint8_t LCD_InButton(btn_t * button, uint16_t posX, uin
      +                          t16_t posY);libraries/lcd_highlevel.c: 515: {;libraries/lcd_highlevel.c: 517:   if(posX 
      +                          < button->posX)
  9906                           
  9907                           ;incstack = 0
  9908  00499A  C012  FFD9         	movff	LCD_InButton@button,fsr2l
  9909  00499E  C013  FFDA         	movff	LCD_InButton@button+1,fsr2h
  9910  0049A2  50DE               	movf	postinc2,w,c
  9911  0049A4  5C14               	subwf	LCD_InButton@posX^0,w,c
  9912  0049A6  50DE               	movf	postinc2,w,c
  9913  0049A8  5815               	subwfb	(LCD_InButton@posX+1)^0,w,c
  9914  0049AA  B0D8               	btfsc	status,0,c
  9915  0049AC  D002               	goto	l6856
  9916  0049AE                     u4220:
  9917                           
  9918                           ;libraries/lcd_highlevel.c: 518:   {;libraries/lcd_highlevel.c: 519:     return 0;
  9919  0049AE  0E00               	movlw	0
  9920  0049B0  0012               	return	
  9921  0049B2                     l6856:
  9922                           
  9923                           ;libraries/lcd_highlevel.c: 522:   if(posX > (button->posX + button->width))
  9924  0049B2  EE20 F004          	lfsr	2,4
  9925  0049B6  5012               	movf	LCD_InButton@button^0,w,c
  9926  0049B8  26D9               	addwf	fsr2l,f,c
  9927  0049BA  5013               	movf	(LCD_InButton@button+1)^0,w,c
  9928  0049BC  22DA               	addwfc	fsr2h,f,c
  9929  0049BE  CFDE F018          	movff	postinc2,??_LCD_InButton
  9930  0049C2  CFDD F019          	movff	postdec2,??_LCD_InButton+1
  9931  0049C6  C012  FFD9         	movff	LCD_InButton@button,fsr2l
  9932  0049CA  C013  FFDA         	movff	LCD_InButton@button+1,fsr2h
  9933  0049CE  CFDE F01A          	movff	postinc2,??_LCD_InButton+2
  9934  0049D2  CFDD F01B          	movff	postdec2,??_LCD_InButton+3
  9935  0049D6  5018               	movf	??_LCD_InButton^0,w,c
  9936  0049D8  261A               	addwf	(??_LCD_InButton+2)^0,f,c
  9937  0049DA  5019               	movf	(??_LCD_InButton+1)^0,w,c
  9938  0049DC  221B               	addwfc	(??_LCD_InButton+3)^0,f,c
  9939  0049DE  5014               	movf	LCD_InButton@posX^0,w,c
  9940  0049E0  5C1A               	subwf	(??_LCD_InButton+2)^0,w,c
  9941  0049E2  5015               	movf	(LCD_InButton@posX+1)^0,w,c
  9942  0049E4  581B               	subwfb	(??_LCD_InButton+3)^0,w,c
  9943  0049E6  A0D8               	btfss	status,0,c
  9944  0049E8  D7E2               	goto	u4220
  9945                           
  9946                           ;libraries/lcd_highlevel.c: 527:   if(posY < button->posY)
  9947  0049EA  EE20 F002          	lfsr	2,2
  9948  0049EE  5012               	movf	LCD_InButton@button^0,w,c
  9949  0049F0  26D9               	addwf	fsr2l,f,c
  9950  0049F2  5013               	movf	(LCD_InButton@button+1)^0,w,c
  9951  0049F4  22DA               	addwfc	fsr2h,f,c
  9952  0049F6  50DE               	movf	postinc2,w,c
  9953  0049F8  5C16               	subwf	LCD_InButton@posY^0,w,c
  9954  0049FA  50DE               	movf	postinc2,w,c
  9955  0049FC  5817               	subwfb	(LCD_InButton@posY+1)^0,w,c
  9956  0049FE  A0D8               	btfss	status,0,c
  9957  004A00  D7D6               	goto	u4220
  9958                           
  9959                           ;libraries/lcd_highlevel.c: 532:   if(posY > (button->posY + button->height))
  9960  004A02  EE20 F006          	lfsr	2,6
  9961  004A06  5012               	movf	LCD_InButton@button^0,w,c
  9962  004A08  26D9               	addwf	fsr2l,f,c
  9963  004A0A  5013               	movf	(LCD_InButton@button+1)^0,w,c
  9964  004A0C  22DA               	addwfc	fsr2h,f,c
  9965  004A0E  CFDE F018          	movff	postinc2,??_LCD_InButton
  9966  004A12  CFDD F019          	movff	postdec2,??_LCD_InButton+1
  9967  004A16  EE20 F002          	lfsr	2,2
  9968  004A1A  5012               	movf	LCD_InButton@button^0,w,c
  9969  004A1C  26D9               	addwf	fsr2l,f,c
  9970  004A1E  5013               	movf	(LCD_InButton@button+1)^0,w,c
  9971  004A20  22DA               	addwfc	fsr2h,f,c
  9972  004A22  CFDE F01A          	movff	postinc2,??_LCD_InButton+2
  9973  004A26  CFDD F01B          	movff	postdec2,??_LCD_InButton+3
  9974  004A2A  5018               	movf	??_LCD_InButton^0,w,c
  9975  004A2C  261A               	addwf	(??_LCD_InButton+2)^0,f,c
  9976  004A2E  5019               	movf	(??_LCD_InButton+1)^0,w,c
  9977  004A30  221B               	addwfc	(??_LCD_InButton+3)^0,f,c
  9978  004A32  5016               	movf	LCD_InButton@posY^0,w,c
  9979  004A34  5C1A               	subwf	(??_LCD_InButton+2)^0,w,c
  9980  004A36  5017               	movf	(LCD_InButton@posY+1)^0,w,c
  9981  004A38  581B               	subwfb	(??_LCD_InButton+3)^0,w,c
  9982  004A3A  A0D8               	btfss	status,0,c
  9983  004A3C  D7B8               	goto	u4220
  9984                           
  9985                           ;libraries/lcd_highlevel.c: 536:   return 1;
  9986  004A3E  0E01               	movlw	1
  9987  004A40  0012               	return		;funcret
  9988  004A42                     __end_of_LCD_InButton:
  9989                           	callstack 0
  9990                           
  9991 ;; *************** function _GameParameters_init *****************
  9992 ;; Defined at:
  9993 ;;		line 7 in file "class/gameParameters.c"
  9994 ;; Parameters:    Size  Location     Type
  9995 ;;  s               2   42[COMRAM] PTR struct GameParameter
  9996 ;;		 -> g1(216), 
  9997 ;; Auto vars:     Size  Location     Type
  9998 ;;		None
  9999 ;; Return value:  Size  Location     Type
 10000 ;;                  1    wreg      void 
 10001 ;; Registers used:
 10002 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10003 ;; Tracked objects:
 10004 ;;		On entry : 0/0
 10005 ;;		On exit  : 0/0
 10006 ;;		Unchanged: 0/0
 10007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10008 ;;      Params:         2       0       0       0       0       0       0
 10009 ;;      Locals:         0       0       0       0       0       0       0
 10010 ;;      Temps:          0       0       0       0       0       0       0
 10011 ;;      Totals:         2       0       0       0       0       0       0
 10012 ;;Total ram usage:        2 bytes
 10013 ;; Hardware stack levels used: 1
 10014 ;; Hardware stack levels required when called: 5
 10015 ;; This function calls:
 10016 ;;		_Ball_init
 10017 ;;		_LCD_ButtonCreate
 10018 ;;		_LCD_SliderCreate
 10019 ;;		_Paddle_init
 10020 ;;		_Score_init
 10021 ;; This function is called by:
 10022 ;;		_Factory_init
 10023 ;;		_gameControllerController
 10024 ;; This function uses a non-reentrant model
 10025 ;;
 10026                           
 10027                           	psect	text40
 10028  001E64                     __ptext40:
 10029                           	callstack 0
 10030  001E64                     _GameParameters_init:
 10031                           	callstack 21
 10032                           
 10033                           ;class/gameParameters.c: 7: void GameParameters_init(struct GameParameters* s);class/gam
      +                          eParameters.c: 8: {;class/gameParameters.c: 10:     s->backlight = 11;
 10034                           
 10035                           ;incstack = 0
 10036  001E64  C02B  FFD9         	movff	GameParameters_init@s,fsr2l
 10037  001E68  C02C  FFDA         	movff	GameParameters_init@s+1,fsr2h
 10038  001E6C  0E0B               	movlw	11
 10039  001E6E  6EDE               	movwf	postinc2,c
 10040  001E70  0E00               	movlw	0
 10041  001E72  6EDD               	movwf	postdec2,c
 10042                           
 10043                           ;class/gameParameters.c: 11:     CCPR2L = 255;
 10044  001E74  6867               	setf	103,c	;volatile
 10045                           
 10046                           ;class/gameParameters.c: 12:     s->x=0;
 10047  001E76  EE20 F002          	lfsr	2,2
 10048  001E7A  502B               	movf	GameParameters_init@s^0,w,c
 10049  001E7C  26D9               	addwf	fsr2l,f,c
 10050  001E7E  502C               	movf	(GameParameters_init@s+1)^0,w,c
 10051  001E80  22DA               	addwfc	fsr2h,f,c
 10052  001E82  0E00               	movlw	0
 10053  001E84  6EDE               	movwf	postinc2,c
 10054  001E86  0E00               	movlw	0
 10055  001E88  6EDD               	movwf	postdec2,c
 10056                           
 10057                           ;class/gameParameters.c: 13:     s->y=0;
 10058  001E8A  EE20 F004          	lfsr	2,4
 10059  001E8E  502B               	movf	GameParameters_init@s^0,w,c
 10060  001E90  26D9               	addwf	fsr2l,f,c
 10061  001E92  502C               	movf	(GameParameters_init@s+1)^0,w,c
 10062  001E94  22DA               	addwfc	fsr2h,f,c
 10063  001E96  0E00               	movlw	0
 10064  001E98  6EDE               	movwf	postinc2,c
 10065  001E9A  0E00               	movlw	0
 10066  001E9C  6EDD               	movwf	postdec2,c
 10067                           
 10068                           ;class/gameParameters.c: 14:     s->level=1;
 10069  001E9E  EE20 F006          	lfsr	2,6
 10070  001EA2  502B               	movf	GameParameters_init@s^0,w,c
 10071  001EA4  26D9               	addwf	fsr2l,f,c
 10072  001EA6  502C               	movf	(GameParameters_init@s+1)^0,w,c
 10073  001EA8  22DA               	addwfc	fsr2h,f,c
 10074  001EAA  0E01               	movlw	1
 10075  001EAC  6EDE               	movwf	postinc2,c
 10076  001EAE  0E00               	movlw	0
 10077  001EB0  6EDD               	movwf	postdec2,c
 10078                           
 10079                           ;class/gameParameters.c: 15:     Score_init(&s->s1);
 10080  001EB2  0ED2               	movlw	210
 10081  001EB4  242B               	addwf	GameParameters_init@s^0,w,c
 10082  001EB6  6E12               	movwf	Score_init@s^0,c
 10083  001EB8  0E00               	movlw	0
 10084  001EBA  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10085  001EBC  6E13               	movwf	(Score_init@s+1)^0,c
 10086  001EBE  ECCF  F02B         	call	_Score_init	;wreg free
 10087                           
 10088                           ;class/gameParameters.c: 16:     Ball_init(&(s->b));
 10089  001EC2  0EB2               	movlw	178
 10090  001EC4  242B               	addwf	GameParameters_init@s^0,w,c
 10091  001EC6  6E12               	movwf	Ball_init@b^0,c
 10092  001EC8  0E00               	movlw	0
 10093  001ECA  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10094  001ECC  6E13               	movwf	(Ball_init@b+1)^0,c
 10095  001ECE  ECD1  F028         	call	_Ball_init	;wreg free
 10096                           
 10097                           ;class/gameParameters.c: 17:     s->b.dy=1;
 10098  001ED2  EE20 F0BC          	lfsr	2,188
 10099  001ED6  502B               	movf	GameParameters_init@s^0,w,c
 10100  001ED8  26D9               	addwf	fsr2l,f,c
 10101  001EDA  502C               	movf	(GameParameters_init@s+1)^0,w,c
 10102  001EDC  22DA               	addwfc	fsr2h,f,c
 10103  001EDE  0E01               	movlw	1
 10104  001EE0  6EDE               	movwf	postinc2,c
 10105  001EE2  0E00               	movlw	0
 10106  001EE4  6EDD               	movwf	postdec2,c
 10107                           
 10108                           ;class/gameParameters.c: 18:     Paddle_init(&(s->p1),0);
 10109  001EE6  0EBE               	movlw	190
 10110  001EE8  242B               	addwf	GameParameters_init@s^0,w,c
 10111  001EEA  6E12               	movwf	Paddle_init@p^0,c
 10112  001EEC  0E00               	movlw	0
 10113  001EEE  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10114  001EF0  6E13               	movwf	(Paddle_init@p+1)^0,c
 10115  001EF2  0E00               	movlw	0
 10116  001EF4  6E15               	movwf	(Paddle_init@team+1)^0,c
 10117  001EF6  0E00               	movlw	0
 10118  001EF8  6E14               	movwf	Paddle_init@team^0,c
 10119  001EFA  EC21  F025         	call	_Paddle_init	;wreg free
 10120                           
 10121                           ;class/gameParameters.c: 19:     Paddle_init(&(s->p2),1);
 10122  001EFE  0EC8               	movlw	200
 10123  001F00  242B               	addwf	GameParameters_init@s^0,w,c
 10124  001F02  6E12               	movwf	Paddle_init@p^0,c
 10125  001F04  0E00               	movlw	0
 10126  001F06  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10127  001F08  6E13               	movwf	(Paddle_init@p+1)^0,c
 10128  001F0A  0E00               	movlw	0
 10129  001F0C  6E15               	movwf	(Paddle_init@team+1)^0,c
 10130  001F0E  0E01               	movlw	1
 10131  001F10  6E14               	movwf	Paddle_init@team^0,c
 10132  001F12  EC21  F025         	call	_Paddle_init	;wreg free
 10133                           
 10134                           ;class/gameParameters.c: 22:     LCD_ButtonCreate(130,50,90,20,0b1111111111111111,0b0000
      +                          000000000000,"Parametres",&arialNarrow_12ptFontInfo,((void*)0),((void*)0),((void*)0),&(s
      +                          ->btnParam),1);
 10135  001F16  0E00               	movlw	0
 10136  001F18  6E13               	movwf	(LCD_ButtonCreate@posX+1)^0,c
 10137  001F1A  0E82               	movlw	130
 10138  001F1C  6E12               	movwf	LCD_ButtonCreate@posX^0,c
 10139  001F1E  0E00               	movlw	0
 10140  001F20  6E15               	movwf	(LCD_ButtonCreate@posY+1)^0,c
 10141  001F22  0E32               	movlw	50
 10142  001F24  6E14               	movwf	LCD_ButtonCreate@posY^0,c
 10143  001F26  0E00               	movlw	0
 10144  001F28  6E17               	movwf	(LCD_ButtonCreate@width+1)^0,c
 10145  001F2A  0E5A               	movlw	90
 10146  001F2C  6E16               	movwf	LCD_ButtonCreate@width^0,c
 10147  001F2E  0E00               	movlw	0
 10148  001F30  6E19               	movwf	(LCD_ButtonCreate@height+1)^0,c
 10149  001F32  0E14               	movlw	20
 10150  001F34  6E18               	movwf	LCD_ButtonCreate@height^0,c
 10151  001F36  0EFF               	movlw	255
 10152  001F38  6E1B               	movwf	(LCD_ButtonCreate@txtColor+1)^0,c
 10153  001F3A  681A               	setf	LCD_ButtonCreate@txtColor^0,c
 10154  001F3C  0E00               	movlw	0
 10155  001F3E  6E1D               	movwf	(LCD_ButtonCreate@bgColor+1)^0,c
 10156  001F40  0E00               	movlw	0
 10157  001F42  6E1C               	movwf	LCD_ButtonCreate@bgColor^0,c
 10158  001F44  0EB2               	movlw	low STR_4
 10159  001F46  6E1E               	movwf	LCD_ButtonCreate@textOrBmp^0,c
 10160  001F48  0E7F               	movlw	high STR_4
 10161  001F4A  6E1F               	movwf	(LCD_ButtonCreate@textOrBmp+1)^0,c
 10162  001F4C  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 10163  001F4E  6E20               	movwf	LCD_ButtonCreate@font^0,c
 10164  001F50  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 10165  001F52  6E21               	movwf	(LCD_ButtonCreate@font+1)^0,c
 10166  001F54  0E00               	movlw	0
 10167  001F56  6E22               	movwf	LCD_ButtonCreate@fpPress^0,c
 10168  001F58  0E00               	movlw	0
 10169  001F5A  6E23               	movwf	(LCD_ButtonCreate@fpPress+1)^0,c
 10170  001F5C  0E00               	movlw	0
 10171  001F5E  6E24               	movwf	LCD_ButtonCreate@fpReleased^0,c
 10172  001F60  0E00               	movlw	0
 10173  001F62  6E25               	movwf	(LCD_ButtonCreate@fpReleased+1)^0,c
 10174  001F64  0E00               	movlw	0
 10175  001F66  6E26               	movwf	LCD_ButtonCreate@fpOut^0,c
 10176  001F68  0E00               	movlw	0
 10177  001F6A  6E27               	movwf	(LCD_ButtonCreate@fpOut+1)^0,c
 10178  001F6C  0E08               	movlw	8
 10179  001F6E  242B               	addwf	GameParameters_init@s^0,w,c
 10180  001F70  6E28               	movwf	LCD_ButtonCreate@button^0,c
 10181  001F72  0E00               	movlw	0
 10182  001F74  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10183  001F76  6E29               	movwf	(LCD_ButtonCreate@button+1)^0,c
 10184  001F78  0E01               	movlw	1
 10185  001F7A  6E2A               	movwf	LCD_ButtonCreate@index^0,c
 10186  001F7C  EC43  F01F         	call	_LCD_ButtonCreate	;wreg free
 10187                           
 10188                           ;class/gameParameters.c: 23:     LCD_ButtonCreate(10,250,70,20,0b1111111111111111,0b0000
      +                          000000000000,"1 Player",&arialNarrow_12ptFontInfo,((void*)0),((void*)0),((void*)0),&(s->
      +                          btnOnePlayer),2);
 10189  001F80  0E00               	movlw	0
 10190  001F82  6E13               	movwf	(LCD_ButtonCreate@posX+1)^0,c
 10191  001F84  0E0A               	movlw	10
 10192  001F86  6E12               	movwf	LCD_ButtonCreate@posX^0,c
 10193  001F88  0E00               	movlw	0
 10194  001F8A  6E15               	movwf	(LCD_ButtonCreate@posY+1)^0,c
 10195  001F8C  0EFA               	movlw	250
 10196  001F8E  6E14               	movwf	LCD_ButtonCreate@posY^0,c
 10197  001F90  0E00               	movlw	0
 10198  001F92  6E17               	movwf	(LCD_ButtonCreate@width+1)^0,c
 10199  001F94  0E46               	movlw	70
 10200  001F96  6E16               	movwf	LCD_ButtonCreate@width^0,c
 10201  001F98  0E00               	movlw	0
 10202  001F9A  6E19               	movwf	(LCD_ButtonCreate@height+1)^0,c
 10203  001F9C  0E14               	movlw	20
 10204  001F9E  6E18               	movwf	LCD_ButtonCreate@height^0,c
 10205  001FA0  0EFF               	movlw	255
 10206  001FA2  6E1B               	movwf	(LCD_ButtonCreate@txtColor+1)^0,c
 10207  001FA4  681A               	setf	LCD_ButtonCreate@txtColor^0,c
 10208  001FA6  0E00               	movlw	0
 10209  001FA8  6E1D               	movwf	(LCD_ButtonCreate@bgColor+1)^0,c
 10210  001FAA  0E00               	movlw	0
 10211  001FAC  6E1C               	movwf	LCD_ButtonCreate@bgColor^0,c
 10212  001FAE  0ED0               	movlw	low STR_5
 10213  001FB0  6E1E               	movwf	LCD_ButtonCreate@textOrBmp^0,c
 10214  001FB2  0E7F               	movlw	high STR_5
 10215  001FB4  6E1F               	movwf	(LCD_ButtonCreate@textOrBmp+1)^0,c
 10216  001FB6  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 10217  001FB8  6E20               	movwf	LCD_ButtonCreate@font^0,c
 10218  001FBA  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 10219  001FBC  6E21               	movwf	(LCD_ButtonCreate@font+1)^0,c
 10220  001FBE  0E00               	movlw	0
 10221  001FC0  6E22               	movwf	LCD_ButtonCreate@fpPress^0,c
 10222  001FC2  0E00               	movlw	0
 10223  001FC4  6E23               	movwf	(LCD_ButtonCreate@fpPress+1)^0,c
 10224  001FC6  0E00               	movlw	0
 10225  001FC8  6E24               	movwf	LCD_ButtonCreate@fpReleased^0,c
 10226  001FCA  0E00               	movlw	0
 10227  001FCC  6E25               	movwf	(LCD_ButtonCreate@fpReleased+1)^0,c
 10228  001FCE  0E00               	movlw	0
 10229  001FD0  6E26               	movwf	LCD_ButtonCreate@fpOut^0,c
 10230  001FD2  0E00               	movlw	0
 10231  001FD4  6E27               	movwf	(LCD_ButtonCreate@fpOut+1)^0,c
 10232  001FD6  0E20               	movlw	32
 10233  001FD8  242B               	addwf	GameParameters_init@s^0,w,c
 10234  001FDA  6E28               	movwf	LCD_ButtonCreate@button^0,c
 10235  001FDC  0E00               	movlw	0
 10236  001FDE  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10237  001FE0  6E29               	movwf	(LCD_ButtonCreate@button+1)^0,c
 10238  001FE2  0E02               	movlw	2
 10239  001FE4  6E2A               	movwf	LCD_ButtonCreate@index^0,c
 10240  001FE6  EC43  F01F         	call	_LCD_ButtonCreate	;wreg free
 10241                           
 10242                           ;class/gameParameters.c: 24:     LCD_ButtonCreate(150,250,70,20,0b1111111111111111,0b000
      +                          0000000000000,"2 Player",&arialNarrow_12ptFontInfo,((void*)0),((void*)0),((void*)0),&(s-
      +                          >btnTwoPlayer),3);
 10243  001FEA  0E00               	movlw	0
 10244  001FEC  6E13               	movwf	(LCD_ButtonCreate@posX+1)^0,c
 10245  001FEE  0E96               	movlw	150
 10246  001FF0  6E12               	movwf	LCD_ButtonCreate@posX^0,c
 10247  001FF2  0E00               	movlw	0
 10248  001FF4  6E15               	movwf	(LCD_ButtonCreate@posY+1)^0,c
 10249  001FF6  0EFA               	movlw	250
 10250  001FF8  6E14               	movwf	LCD_ButtonCreate@posY^0,c
 10251  001FFA  0E00               	movlw	0
 10252  001FFC  6E17               	movwf	(LCD_ButtonCreate@width+1)^0,c
 10253  001FFE  0E46               	movlw	70
 10254  002000  6E16               	movwf	LCD_ButtonCreate@width^0,c
 10255  002002  0E00               	movlw	0
 10256  002004  6E19               	movwf	(LCD_ButtonCreate@height+1)^0,c
 10257  002006  0E14               	movlw	20
 10258  002008  6E18               	movwf	LCD_ButtonCreate@height^0,c
 10259  00200A  0EFF               	movlw	255
 10260  00200C  6E1B               	movwf	(LCD_ButtonCreate@txtColor+1)^0,c
 10261  00200E  681A               	setf	LCD_ButtonCreate@txtColor^0,c
 10262  002010  0E00               	movlw	0
 10263  002012  6E1D               	movwf	(LCD_ButtonCreate@bgColor+1)^0,c
 10264  002014  0E00               	movlw	0
 10265  002016  6E1C               	movwf	LCD_ButtonCreate@bgColor^0,c
 10266  002018  0ED9               	movlw	low STR_6
 10267  00201A  6E1E               	movwf	LCD_ButtonCreate@textOrBmp^0,c
 10268  00201C  0E7F               	movlw	high STR_6
 10269  00201E  6E1F               	movwf	(LCD_ButtonCreate@textOrBmp+1)^0,c
 10270  002020  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 10271  002022  6E20               	movwf	LCD_ButtonCreate@font^0,c
 10272  002024  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 10273  002026  6E21               	movwf	(LCD_ButtonCreate@font+1)^0,c
 10274  002028  0E00               	movlw	0
 10275  00202A  6E22               	movwf	LCD_ButtonCreate@fpPress^0,c
 10276  00202C  0E00               	movlw	0
 10277  00202E  6E23               	movwf	(LCD_ButtonCreate@fpPress+1)^0,c
 10278  002030  0E00               	movlw	0
 10279  002032  6E24               	movwf	LCD_ButtonCreate@fpReleased^0,c
 10280  002034  0E00               	movlw	0
 10281  002036  6E25               	movwf	(LCD_ButtonCreate@fpReleased+1)^0,c
 10282  002038  0E00               	movlw	0
 10283  00203A  6E26               	movwf	LCD_ButtonCreate@fpOut^0,c
 10284  00203C  0E00               	movlw	0
 10285  00203E  6E27               	movwf	(LCD_ButtonCreate@fpOut+1)^0,c
 10286  002040  0E38               	movlw	56
 10287  002042  242B               	addwf	GameParameters_init@s^0,w,c
 10288  002044  6E28               	movwf	LCD_ButtonCreate@button^0,c
 10289  002046  0E00               	movlw	0
 10290  002048  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10291  00204A  6E29               	movwf	(LCD_ButtonCreate@button+1)^0,c
 10292  00204C  0E03               	movlw	3
 10293  00204E  6E2A               	movwf	LCD_ButtonCreate@index^0,c
 10294  002050  EC43  F01F         	call	_LCD_ButtonCreate	;wreg free
 10295                           
 10296                           ;class/gameParameters.c: 25:     LCD_ButtonCreate(210,10,20,20,0b1111111111111111,0b1111
      +                          100000000000,"X",&arialNarrow_12ptFontInfo,((void*)0),((void*)0),((void*)0),&(s->btnLeav
      +                          eParam),4);
 10297  002054  0E00               	movlw	0
 10298  002056  6E13               	movwf	(LCD_ButtonCreate@posX+1)^0,c
 10299  002058  0ED2               	movlw	210
 10300  00205A  6E12               	movwf	LCD_ButtonCreate@posX^0,c
 10301  00205C  0E00               	movlw	0
 10302  00205E  6E15               	movwf	(LCD_ButtonCreate@posY+1)^0,c
 10303  002060  0E0A               	movlw	10
 10304  002062  6E14               	movwf	LCD_ButtonCreate@posY^0,c
 10305  002064  0E00               	movlw	0
 10306  002066  6E17               	movwf	(LCD_ButtonCreate@width+1)^0,c
 10307  002068  0E14               	movlw	20
 10308  00206A  6E16               	movwf	LCD_ButtonCreate@width^0,c
 10309  00206C  0E00               	movlw	0
 10310  00206E  6E19               	movwf	(LCD_ButtonCreate@height+1)^0,c
 10311  002070  0E14               	movlw	20
 10312  002072  6E18               	movwf	LCD_ButtonCreate@height^0,c
 10313  002074  0EFF               	movlw	255
 10314  002076  6E1B               	movwf	(LCD_ButtonCreate@txtColor+1)^0,c
 10315  002078  681A               	setf	LCD_ButtonCreate@txtColor^0,c
 10316  00207A  0EF8               	movlw	248
 10317  00207C  6E1D               	movwf	(LCD_ButtonCreate@bgColor+1)^0,c
 10318  00207E  0E00               	movlw	0
 10319  002080  6E1C               	movwf	LCD_ButtonCreate@bgColor^0,c
 10320  002082  0EFC               	movlw	low STR_7
 10321  002084  6E1E               	movwf	LCD_ButtonCreate@textOrBmp^0,c
 10322  002086  0E7F               	movlw	high STR_7
 10323  002088  6E1F               	movwf	(LCD_ButtonCreate@textOrBmp+1)^0,c
 10324  00208A  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 10325  00208C  6E20               	movwf	LCD_ButtonCreate@font^0,c
 10326  00208E  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 10327  002090  6E21               	movwf	(LCD_ButtonCreate@font+1)^0,c
 10328  002092  0E00               	movlw	0
 10329  002094  6E22               	movwf	LCD_ButtonCreate@fpPress^0,c
 10330  002096  0E00               	movlw	0
 10331  002098  6E23               	movwf	(LCD_ButtonCreate@fpPress+1)^0,c
 10332  00209A  0E00               	movlw	0
 10333  00209C  6E24               	movwf	LCD_ButtonCreate@fpReleased^0,c
 10334  00209E  0E00               	movlw	0
 10335  0020A0  6E25               	movwf	(LCD_ButtonCreate@fpReleased+1)^0,c
 10336  0020A2  0E00               	movlw	0
 10337  0020A4  6E26               	movwf	LCD_ButtonCreate@fpOut^0,c
 10338  0020A6  0E00               	movlw	0
 10339  0020A8  6E27               	movwf	(LCD_ButtonCreate@fpOut+1)^0,c
 10340  0020AA  0E50               	movlw	80
 10341  0020AC  242B               	addwf	GameParameters_init@s^0,w,c
 10342  0020AE  6E28               	movwf	LCD_ButtonCreate@button^0,c
 10343  0020B0  0E00               	movlw	0
 10344  0020B2  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10345  0020B4  6E29               	movwf	(LCD_ButtonCreate@button+1)^0,c
 10346  0020B6  0E04               	movlw	4
 10347  0020B8  6E2A               	movwf	LCD_ButtonCreate@index^0,c
 10348  0020BA  EC43  F01F         	call	_LCD_ButtonCreate	;wreg free
 10349                           
 10350                           ;class/gameParameters.c: 26:     LCD_ButtonCreate(150,220,70,50,0b0000000000000000,0b111
      +                          1111111111111,"New Game",&arialNarrow_12ptFontInfo,((void*)0),((void*)0),((void*)0),&(s-
      +                          >btnNewGame),5);
 10351  0020BE  0E00               	movlw	0
 10352  0020C0  6E13               	movwf	(LCD_ButtonCreate@posX+1)^0,c
 10353  0020C2  0E96               	movlw	150
 10354  0020C4  6E12               	movwf	LCD_ButtonCreate@posX^0,c
 10355  0020C6  0E00               	movlw	0
 10356  0020C8  6E15               	movwf	(LCD_ButtonCreate@posY+1)^0,c
 10357  0020CA  0EDC               	movlw	220
 10358  0020CC  6E14               	movwf	LCD_ButtonCreate@posY^0,c
 10359  0020CE  0E00               	movlw	0
 10360  0020D0  6E17               	movwf	(LCD_ButtonCreate@width+1)^0,c
 10361  0020D2  0E46               	movlw	70
 10362  0020D4  6E16               	movwf	LCD_ButtonCreate@width^0,c
 10363  0020D6  0E00               	movlw	0
 10364  0020D8  6E19               	movwf	(LCD_ButtonCreate@height+1)^0,c
 10365  0020DA  0E32               	movlw	50
 10366  0020DC  6E18               	movwf	LCD_ButtonCreate@height^0,c
 10367  0020DE  0E00               	movlw	0
 10368  0020E0  6E1B               	movwf	(LCD_ButtonCreate@txtColor+1)^0,c
 10369  0020E2  0E00               	movlw	0
 10370  0020E4  6E1A               	movwf	LCD_ButtonCreate@txtColor^0,c
 10371  0020E6  0EFF               	movlw	255
 10372  0020E8  6E1D               	movwf	(LCD_ButtonCreate@bgColor+1)^0,c
 10373  0020EA  681C               	setf	LCD_ButtonCreate@bgColor^0,c
 10374  0020EC  0EC7               	movlw	low STR_8
 10375  0020EE  6E1E               	movwf	LCD_ButtonCreate@textOrBmp^0,c
 10376  0020F0  0E7F               	movlw	high STR_8
 10377  0020F2  6E1F               	movwf	(LCD_ButtonCreate@textOrBmp+1)^0,c
 10378  0020F4  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 10379  0020F6  6E20               	movwf	LCD_ButtonCreate@font^0,c
 10380  0020F8  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 10381  0020FA  6E21               	movwf	(LCD_ButtonCreate@font+1)^0,c
 10382  0020FC  0E00               	movlw	0
 10383  0020FE  6E22               	movwf	LCD_ButtonCreate@fpPress^0,c
 10384  002100  0E00               	movlw	0
 10385  002102  6E23               	movwf	(LCD_ButtonCreate@fpPress+1)^0,c
 10386  002104  0E00               	movlw	0
 10387  002106  6E24               	movwf	LCD_ButtonCreate@fpReleased^0,c
 10388  002108  0E00               	movlw	0
 10389  00210A  6E25               	movwf	(LCD_ButtonCreate@fpReleased+1)^0,c
 10390  00210C  0E00               	movlw	0
 10391  00210E  6E26               	movwf	LCD_ButtonCreate@fpOut^0,c
 10392  002110  0E00               	movlw	0
 10393  002112  6E27               	movwf	(LCD_ButtonCreate@fpOut+1)^0,c
 10394  002114  0E68               	movlw	104
 10395  002116  242B               	addwf	GameParameters_init@s^0,w,c
 10396  002118  6E28               	movwf	LCD_ButtonCreate@button^0,c
 10397  00211A  0E00               	movlw	0
 10398  00211C  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10399  00211E  6E29               	movwf	(LCD_ButtonCreate@button+1)^0,c
 10400  002120  0E05               	movlw	5
 10401  002122  6E2A               	movwf	LCD_ButtonCreate@index^0,c
 10402  002124  EC43  F01F         	call	_LCD_ButtonCreate	;wreg free
 10403                           
 10404                           ;class/gameParameters.c: 27:     LCD_SliderCreate(50,110,165,20,0b0000000000000000,0b111
      +                          1111111111111,0b1111100000000000,0,11,((void*)0),&(s->sldBackLight));
 10405  002128  0E00               	movlw	0
 10406  00212A  6E13               	movwf	(LCD_SliderCreate@posX+1)^0,c
 10407  00212C  0E32               	movlw	50
 10408  00212E  6E12               	movwf	LCD_SliderCreate@posX^0,c
 10409  002130  0E00               	movlw	0
 10410  002132  6E15               	movwf	(LCD_SliderCreate@posY+1)^0,c
 10411  002134  0E6E               	movlw	110
 10412  002136  6E14               	movwf	LCD_SliderCreate@posY^0,c
 10413  002138  0E00               	movlw	0
 10414  00213A  6E17               	movwf	(LCD_SliderCreate@width+1)^0,c
 10415  00213C  0EA5               	movlw	165
 10416  00213E  6E16               	movwf	LCD_SliderCreate@width^0,c
 10417  002140  0E00               	movlw	0
 10418  002142  6E19               	movwf	(LCD_SliderCreate@height+1)^0,c
 10419  002144  0E14               	movlw	20
 10420  002146  6E18               	movwf	LCD_SliderCreate@height^0,c
 10421  002148  0E00               	movlw	0
 10422  00214A  6E1B               	movwf	(LCD_SliderCreate@sldColor+1)^0,c
 10423  00214C  0E00               	movlw	0
 10424  00214E  6E1A               	movwf	LCD_SliderCreate@sldColor^0,c
 10425  002150  0EFF               	movlw	255
 10426  002152  6E1D               	movwf	(LCD_SliderCreate@bgColor+1)^0,c
 10427  002154  681C               	setf	LCD_SliderCreate@bgColor^0,c
 10428  002156  0EF8               	movlw	248
 10429  002158  6E1F               	movwf	(LCD_SliderCreate@borderColor+1)^0,c
 10430  00215A  0E00               	movlw	0
 10431  00215C  6E1E               	movwf	LCD_SliderCreate@borderColor^0,c
 10432  00215E  0E00               	movlw	0
 10433  002160  6E21               	movwf	(LCD_SliderCreate@cursorWidth+1)^0,c
 10434  002162  0E00               	movlw	0
 10435  002164  6E20               	movwf	LCD_SliderCreate@cursorWidth^0,c
 10436  002166  0E00               	movlw	0
 10437  002168  6E23               	movwf	(LCD_SliderCreate@steps+1)^0,c
 10438  00216A  0E0B               	movlw	11
 10439  00216C  6E22               	movwf	LCD_SliderCreate@steps^0,c
 10440  00216E  0E00               	movlw	0
 10441  002170  6E24               	movwf	LCD_SliderCreate@fpPress^0,c
 10442  002172  0E00               	movlw	0
 10443  002174  6E25               	movwf	(LCD_SliderCreate@fpPress+1)^0,c
 10444  002176  0E80               	movlw	128
 10445  002178  242B               	addwf	GameParameters_init@s^0,w,c
 10446  00217A  6E26               	movwf	LCD_SliderCreate@slider^0,c
 10447  00217C  0E00               	movlw	0
 10448  00217E  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10449  002180  6E27               	movwf	(LCD_SliderCreate@slider+1)^0,c
 10450  002182  ECC0  F01F         	call	_LCD_SliderCreate	;wreg free
 10451                           
 10452                           ;class/gameParameters.c: 28:     LCD_SliderCreate(50,160,165,20,0b0000000000000000,0b111
      +                          1111111111111,0b1111100000000000,0,3,((void*)0),&(s->sldLevel));
 10453  002186  0E00               	movlw	0
 10454  002188  6E13               	movwf	(LCD_SliderCreate@posX+1)^0,c
 10455  00218A  0E32               	movlw	50
 10456  00218C  6E12               	movwf	LCD_SliderCreate@posX^0,c
 10457  00218E  0E00               	movlw	0
 10458  002190  6E15               	movwf	(LCD_SliderCreate@posY+1)^0,c
 10459  002192  0EA0               	movlw	160
 10460  002194  6E14               	movwf	LCD_SliderCreate@posY^0,c
 10461  002196  0E00               	movlw	0
 10462  002198  6E17               	movwf	(LCD_SliderCreate@width+1)^0,c
 10463  00219A  0EA5               	movlw	165
 10464  00219C  6E16               	movwf	LCD_SliderCreate@width^0,c
 10465  00219E  0E00               	movlw	0
 10466  0021A0  6E19               	movwf	(LCD_SliderCreate@height+1)^0,c
 10467  0021A2  0E14               	movlw	20
 10468  0021A4  6E18               	movwf	LCD_SliderCreate@height^0,c
 10469  0021A6  0E00               	movlw	0
 10470  0021A8  6E1B               	movwf	(LCD_SliderCreate@sldColor+1)^0,c
 10471  0021AA  0E00               	movlw	0
 10472  0021AC  6E1A               	movwf	LCD_SliderCreate@sldColor^0,c
 10473  0021AE  0EFF               	movlw	255
 10474  0021B0  6E1D               	movwf	(LCD_SliderCreate@bgColor+1)^0,c
 10475  0021B2  681C               	setf	LCD_SliderCreate@bgColor^0,c
 10476  0021B4  0EF8               	movlw	248
 10477  0021B6  6E1F               	movwf	(LCD_SliderCreate@borderColor+1)^0,c
 10478  0021B8  0E00               	movlw	0
 10479  0021BA  6E1E               	movwf	LCD_SliderCreate@borderColor^0,c
 10480  0021BC  0E00               	movlw	0
 10481  0021BE  6E21               	movwf	(LCD_SliderCreate@cursorWidth+1)^0,c
 10482  0021C0  0E00               	movlw	0
 10483  0021C2  6E20               	movwf	LCD_SliderCreate@cursorWidth^0,c
 10484  0021C4  0E00               	movlw	0
 10485  0021C6  6E23               	movwf	(LCD_SliderCreate@steps+1)^0,c
 10486  0021C8  0E03               	movlw	3
 10487  0021CA  6E22               	movwf	LCD_SliderCreate@steps^0,c
 10488  0021CC  0E00               	movlw	0
 10489  0021CE  6E24               	movwf	LCD_SliderCreate@fpPress^0,c
 10490  0021D0  0E00               	movlw	0
 10491  0021D2  6E25               	movwf	(LCD_SliderCreate@fpPress+1)^0,c
 10492  0021D4  0E99               	movlw	153
 10493  0021D6  242B               	addwf	GameParameters_init@s^0,w,c
 10494  0021D8  6E26               	movwf	LCD_SliderCreate@slider^0,c
 10495  0021DA  0E00               	movlw	0
 10496  0021DC  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10497  0021DE  6E27               	movwf	(LCD_SliderCreate@slider+1)^0,c
 10498  0021E0  ECC0  F01F         	call	_LCD_SliderCreate	;wreg free
 10499  0021E4  0012               	return		;funcret
 10500  0021E6                     __end_of_GameParameters_init:
 10501                           	callstack 0
 10502                           
 10503 ;; *************** function _Score_init *****************
 10504 ;; Defined at:
 10505 ;;		line 7 in file "class/score.c"
 10506 ;; Parameters:    Size  Location     Type
 10507 ;;  s               2   17[COMRAM] PTR struct Score
 10508 ;;		 -> g1(216), 
 10509 ;; Auto vars:     Size  Location     Type
 10510 ;;		None
 10511 ;; Return value:  Size  Location     Type
 10512 ;;                  1    wreg      void 
 10513 ;; Registers used:
 10514 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10515 ;; Tracked objects:
 10516 ;;		On entry : 0/0
 10517 ;;		On exit  : 0/0
 10518 ;;		Unchanged: 0/0
 10519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10520 ;;      Params:         2       0       0       0       0       0       0
 10521 ;;      Locals:         0       0       0       0       0       0       0
 10522 ;;      Temps:          0       0       0       0       0       0       0
 10523 ;;      Totals:         2       0       0       0       0       0       0
 10524 ;;Total ram usage:        2 bytes
 10525 ;; Hardware stack levels used: 1
 10526 ;; Hardware stack levels required when called: 4
 10527 ;; This function calls:
 10528 ;;		Nothing
 10529 ;; This function is called by:
 10530 ;;		_GameParameters_init
 10531 ;; This function uses a non-reentrant model
 10532 ;;
 10533                           
 10534                           	psect	text41
 10535  00579E                     __ptext41:
 10536                           	callstack 0
 10537  00579E                     _Score_init:
 10538                           	callstack 21
 10539                           
 10540                           ;class/score.c: 7: void Score_init(struct Score* s);class/score.c: 8: {;class/score.c: 9
      +                          :     s->homeScore = 0;
 10541                           
 10542                           ;incstack = 0
 10543  00579E  C012  FFD9         	movff	Score_init@s,fsr2l
 10544  0057A2  C013  FFDA         	movff	Score_init@s+1,fsr2h
 10545  0057A6  0E00               	movlw	0
 10546  0057A8  6EDE               	movwf	postinc2,c
 10547  0057AA  0E00               	movlw	0
 10548  0057AC  6EDD               	movwf	postdec2,c
 10549                           
 10550                           ;class/score.c: 10:     s->awayScore = 0;
 10551  0057AE  EE20 F002          	lfsr	2,2
 10552  0057B2  5012               	movf	Score_init@s^0,w,c
 10553  0057B4  26D9               	addwf	fsr2l,f,c
 10554  0057B6  5013               	movf	(Score_init@s+1)^0,w,c
 10555  0057B8  22DA               	addwfc	fsr2h,f,c
 10556  0057BA  0E00               	movlw	0
 10557  0057BC  6EDE               	movwf	postinc2,c
 10558  0057BE  0E00               	movlw	0
 10559  0057C0  6EDD               	movwf	postdec2,c
 10560  0057C2  0012               	return		;funcret
 10561  0057C4                     __end_of_Score_init:
 10562                           	callstack 0
 10563                           
 10564 ;; *************** function _Paddle_init *****************
 10565 ;; Defined at:
 10566 ;;		line 6 in file "class/paddle.c"
 10567 ;; Parameters:    Size  Location     Type
 10568 ;;  p               2   17[COMRAM] PTR struct Paddle
 10569 ;;		 -> g1(216), 
 10570 ;;  team            2   19[COMRAM] unsigned short 
 10571 ;; Auto vars:     Size  Location     Type
 10572 ;;		None
 10573 ;; Return value:  Size  Location     Type
 10574 ;;                  1    wreg      void 
 10575 ;; Registers used:
 10576 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10577 ;; Tracked objects:
 10578 ;;		On entry : 0/0
 10579 ;;		On exit  : 0/0
 10580 ;;		Unchanged: 0/0
 10581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10582 ;;      Params:         4       0       0       0       0       0       0
 10583 ;;      Locals:         0       0       0       0       0       0       0
 10584 ;;      Temps:          0       0       0       0       0       0       0
 10585 ;;      Totals:         4       0       0       0       0       0       0
 10586 ;;Total ram usage:        4 bytes
 10587 ;; Hardware stack levels used: 1
 10588 ;; Hardware stack levels required when called: 4
 10589 ;; This function calls:
 10590 ;;		Nothing
 10591 ;; This function is called by:
 10592 ;;		_GameParameters_init
 10593 ;; This function uses a non-reentrant model
 10594 ;;
 10595                           
 10596                           	psect	text42
 10597  004A42                     __ptext42:
 10598                           	callstack 0
 10599  004A42                     _Paddle_init:
 10600                           	callstack 21
 10601                           
 10602                           ;class/paddle.c: 6: void Paddle_init(struct Paddle* p,uint16_t team);class/paddle.c: 7: 
      +                          {;class/paddle.c: 8:     p->oldx=0;
 10603                           
 10604                           ;incstack = 0
 10605  004A42  EE20 F004          	lfsr	2,4
 10606  004A46  5012               	movf	Paddle_init@p^0,w,c
 10607  004A48  26D9               	addwf	fsr2l,f,c
 10608  004A4A  5013               	movf	(Paddle_init@p+1)^0,w,c
 10609  004A4C  22DA               	addwfc	fsr2h,f,c
 10610  004A4E  0E00               	movlw	0
 10611  004A50  6EDE               	movwf	postinc2,c
 10612  004A52  0E00               	movlw	0
 10613  004A54  6EDD               	movwf	postdec2,c
 10614                           
 10615                           ;class/paddle.c: 9:     p->oldy=0;
 10616  004A56  EE20 F006          	lfsr	2,6
 10617  004A5A  5012               	movf	Paddle_init@p^0,w,c
 10618  004A5C  26D9               	addwf	fsr2l,f,c
 10619  004A5E  5013               	movf	(Paddle_init@p+1)^0,w,c
 10620  004A60  22DA               	addwfc	fsr2h,f,c
 10621  004A62  0E00               	movlw	0
 10622  004A64  6EDE               	movwf	postinc2,c
 10623  004A66  0E00               	movlw	0
 10624  004A68  6EDD               	movwf	postdec2,c
 10625                           
 10626                           ;class/paddle.c: 10:     if(team)
 10627  004A6A  5014               	movf	Paddle_init@team^0,w,c
 10628  004A6C  1015               	iorwf	(Paddle_init@team+1)^0,w,c
 10629  004A6E  B4D8               	btfsc	status,2,c
 10630  004A70  D01D               	goto	l6460
 10631                           
 10632                           ;class/paddle.c: 11:     {;class/paddle.c: 12:         p->x = 90;
 10633  004A72  C012  FFD9         	movff	Paddle_init@p,fsr2l
 10634  004A76  C013  FFDA         	movff	Paddle_init@p+1,fsr2h
 10635  004A7A  0E5A               	movlw	90
 10636  004A7C  6EDE               	movwf	postinc2,c
 10637  004A7E  0E00               	movlw	0
 10638  004A80  6EDD               	movwf	postdec2,c
 10639                           
 10640                           ;class/paddle.c: 13:         p->y = 20;
 10641  004A82  EE20 F002          	lfsr	2,2
 10642  004A86  5012               	movf	Paddle_init@p^0,w,c
 10643  004A88  26D9               	addwf	fsr2l,f,c
 10644  004A8A  5013               	movf	(Paddle_init@p+1)^0,w,c
 10645  004A8C  22DA               	addwfc	fsr2h,f,c
 10646  004A8E  0E14               	movlw	20
 10647  004A90  6EDE               	movwf	postinc2,c
 10648  004A92  0E00               	movlw	0
 10649  004A94  6EDD               	movwf	postdec2,c
 10650                           
 10651                           ;class/paddle.c: 14:         p->color = 0b1111111111111111;
 10652  004A96  EE20 F008          	lfsr	2,8
 10653  004A9A  5012               	movf	Paddle_init@p^0,w,c
 10654  004A9C  26D9               	addwf	fsr2l,f,c
 10655  004A9E  5013               	movf	(Paddle_init@p+1)^0,w,c
 10656  004AA0  22DA               	addwfc	fsr2h,f,c
 10657  004AA2  0EFF               	movlw	255
 10658  004AA4  6EDE               	movwf	postinc2,c
 10659  004AA6  0EFF               	movlw	255
 10660  004AA8  6EDD               	movwf	postdec2,c
 10661                           
 10662                           ;class/paddle.c: 15:     }
 10663  004AAA  0012               	return	
 10664  004AAC                     l6460:
 10665                           
 10666                           ;class/paddle.c: 17:     {;class/paddle.c: 18:         p->x = 90;
 10667  004AAC  C012  FFD9         	movff	Paddle_init@p,fsr2l
 10668  004AB0  C013  FFDA         	movff	Paddle_init@p+1,fsr2h
 10669  004AB4  0E5A               	movlw	90
 10670  004AB6  6EDE               	movwf	postinc2,c
 10671  004AB8  0E00               	movlw	0
 10672  004ABA  6EDD               	movwf	postdec2,c
 10673                           
 10674                           ;class/paddle.c: 19:         p->y = 280;
 10675  004ABC  EE20 F002          	lfsr	2,2
 10676  004AC0  5012               	movf	Paddle_init@p^0,w,c
 10677  004AC2  26D9               	addwf	fsr2l,f,c
 10678  004AC4  5013               	movf	(Paddle_init@p+1)^0,w,c
 10679  004AC6  22DA               	addwfc	fsr2h,f,c
 10680  004AC8  0E18               	movlw	24
 10681  004ACA  6EDE               	movwf	postinc2,c
 10682  004ACC  0E01               	movlw	1
 10683  004ACE  6EDD               	movwf	postdec2,c
 10684                           
 10685                           ;class/paddle.c: 20:         p->color = 0b1111111111111111;
 10686  004AD0  EE20 F008          	lfsr	2,8
 10687  004AD4  5012               	movf	Paddle_init@p^0,w,c
 10688  004AD6  26D9               	addwf	fsr2l,f,c
 10689  004AD8  5013               	movf	(Paddle_init@p+1)^0,w,c
 10690  004ADA  22DA               	addwfc	fsr2h,f,c
 10691  004ADC  0EFF               	movlw	255
 10692  004ADE  6EDE               	movwf	postinc2,c
 10693  004AE0  0EFF               	movlw	255
 10694  004AE2  6EDD               	movwf	postdec2,c
 10695  004AE4  0012               	return		;funcret
 10696  004AE6                     __end_of_Paddle_init:
 10697                           	callstack 0
 10698                           
 10699 ;; *************** function _LCD_SliderCreate *****************
 10700 ;; Defined at:
 10701 ;;		line 291 in file "libraries/lcd_highlevel.c"
 10702 ;; Parameters:    Size  Location     Type
 10703 ;;  posX            2   17[COMRAM] unsigned short 
 10704 ;;  posY            2   19[COMRAM] unsigned short 
 10705 ;;  width           2   21[COMRAM] unsigned short 
 10706 ;;  height          2   23[COMRAM] unsigned short 
 10707 ;;  sldColor        2   25[COMRAM] unsigned short 
 10708 ;;  bgColor         2   27[COMRAM] unsigned short 
 10709 ;;  borderColor     2   29[COMRAM] unsigned short 
 10710 ;;  cursorWidth     2   31[COMRAM] unsigned short 
 10711 ;;  steps           2   33[COMRAM] unsigned short 
 10712 ;;  fpPress         2   35[COMRAM] PTR FTN()void 
 10713 ;;		 -> Absolute function(1), 
 10714 ;;  slider          2   37[COMRAM] PTR struct .
 10715 ;;		 -> g1(216), 
 10716 ;; Auto vars:     Size  Location     Type
 10717 ;;		None
 10718 ;; Return value:  Size  Location     Type
 10719 ;;                  1    wreg      void 
 10720 ;; Registers used:
 10721 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10722 ;; Tracked objects:
 10723 ;;		On entry : 0/0
 10724 ;;		On exit  : 0/0
 10725 ;;		Unchanged: 0/0
 10726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10727 ;;      Params:        22       0       0       0       0       0       0
 10728 ;;      Locals:         0       0       0       0       0       0       0
 10729 ;;      Temps:          0       0       0       0       0       0       0
 10730 ;;      Totals:        22       0       0       0       0       0       0
 10731 ;;Total ram usage:       22 bytes
 10732 ;; Hardware stack levels used: 1
 10733 ;; Hardware stack levels required when called: 4
 10734 ;; This function calls:
 10735 ;;		Nothing
 10736 ;; This function is called by:
 10737 ;;		_GameParameters_init
 10738 ;; This function uses a non-reentrant model
 10739 ;;
 10740                           
 10741                           	psect	text43
 10742  003F80                     __ptext43:
 10743                           	callstack 0
 10744  003F80                     _LCD_SliderCreate:
 10745                           	callstack 21
 10746                           
 10747                           ;libraries/lcd_highlevel.c: 291: void LCD_SliderCreate(uint16_t posX, uint16_t posY,;lib
      +                          raries/lcd_highlevel.c: 292:                       uint16_t width, uint16_t height,;libr
      +                          aries/lcd_highlevel.c: 293:                       uint16_t sldColor, uint16_t bgColor, u
      +                          int16_t borderColor,;libraries/lcd_highlevel.c: 294:                       uint16_t curs
      +                          orWidth,;libraries/lcd_highlevel.c: 295:                       uint16_t steps,;libraries
      +                          /lcd_highlevel.c: 296:                       void (* fpPress)(),;libraries/lcd_highlevel
      +                          .c: 297:                       sld_t * slider)
 10748                           
 10749                           ;incstack = 0
 10750  003F80  C026  FFD9         	movff	LCD_SliderCreate@slider,fsr2l
 10751  003F84  C027  FFDA         	movff	LCD_SliderCreate@slider+1,fsr2h
 10752  003F88  C012  FFDE         	movff	LCD_SliderCreate@posX,postinc2
 10753  003F8C  C013  FFDD         	movff	LCD_SliderCreate@posX+1,postdec2
 10754                           
 10755                           ;libraries/lcd_highlevel.c: 300:   slider->posY = posY;
 10756  003F90  EE20 F002          	lfsr	2,2
 10757  003F94  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10758  003F96  26D9               	addwf	fsr2l,f,c
 10759  003F98  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10760  003F9A  22DA               	addwfc	fsr2h,f,c
 10761  003F9C  C014  FFDE         	movff	LCD_SliderCreate@posY,postinc2
 10762  003FA0  C015  FFDD         	movff	LCD_SliderCreate@posY+1,postdec2
 10763                           
 10764                           ;libraries/lcd_highlevel.c: 301:   slider->height = height;
 10765  003FA4  EE20 F006          	lfsr	2,6
 10766  003FA8  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10767  003FAA  26D9               	addwf	fsr2l,f,c
 10768  003FAC  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10769  003FAE  22DA               	addwfc	fsr2h,f,c
 10770  003FB0  C018  FFDE         	movff	LCD_SliderCreate@height,postinc2
 10771  003FB4  C019  FFDD         	movff	LCD_SliderCreate@height+1,postdec2
 10772                           
 10773                           ;libraries/lcd_highlevel.c: 302:   slider->width = width;
 10774  003FB8  EE20 F004          	lfsr	2,4
 10775  003FBC  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10776  003FBE  26D9               	addwf	fsr2l,f,c
 10777  003FC0  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10778  003FC2  22DA               	addwfc	fsr2h,f,c
 10779  003FC4  C016  FFDE         	movff	LCD_SliderCreate@width,postinc2
 10780  003FC8  C017  FFDD         	movff	LCD_SliderCreate@width+1,postdec2
 10781                           
 10782                           ;libraries/lcd_highlevel.c: 303:   slider->sldColor = sldColor;
 10783  003FCC  EE20 F008          	lfsr	2,8
 10784  003FD0  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10785  003FD2  26D9               	addwf	fsr2l,f,c
 10786  003FD4  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10787  003FD6  22DA               	addwfc	fsr2h,f,c
 10788  003FD8  C01A  FFDE         	movff	LCD_SliderCreate@sldColor,postinc2
 10789  003FDC  C01B  FFDD         	movff	LCD_SliderCreate@sldColor+1,postdec2
 10790                           
 10791                           ;libraries/lcd_highlevel.c: 304:   slider->bgColor = bgColor;
 10792  003FE0  EE20 F00A          	lfsr	2,10
 10793  003FE4  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10794  003FE6  26D9               	addwf	fsr2l,f,c
 10795  003FE8  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10796  003FEA  22DA               	addwfc	fsr2h,f,c
 10797  003FEC  C01C  FFDE         	movff	LCD_SliderCreate@bgColor,postinc2
 10798  003FF0  C01D  FFDD         	movff	LCD_SliderCreate@bgColor+1,postdec2
 10799                           
 10800                           ;libraries/lcd_highlevel.c: 305:   slider->borderColor = borderColor;
 10801  003FF4  EE20 F00C          	lfsr	2,12
 10802  003FF8  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10803  003FFA  26D9               	addwf	fsr2l,f,c
 10804  003FFC  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10805  003FFE  22DA               	addwfc	fsr2h,f,c
 10806  004000  C01E  FFDE         	movff	LCD_SliderCreate@borderColor,postinc2
 10807  004004  C01F  FFDD         	movff	LCD_SliderCreate@borderColor+1,postdec2
 10808                           
 10809                           ;libraries/lcd_highlevel.c: 306:   slider->cursorWidth = cursorWidth;
 10810  004008  EE20 F00E          	lfsr	2,14
 10811  00400C  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10812  00400E  26D9               	addwf	fsr2l,f,c
 10813  004010  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10814  004012  22DA               	addwfc	fsr2h,f,c
 10815  004014  C020  FFDE         	movff	LCD_SliderCreate@cursorWidth,postinc2
 10816  004018  C021  FFDD         	movff	LCD_SliderCreate@cursorWidth+1,postdec2
 10817                           
 10818                           ;libraries/lcd_highlevel.c: 307:   slider->fpPress = fpPress;
 10819  00401C  EE20 F017          	lfsr	2,23
 10820  004020  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10821  004022  26D9               	addwf	fsr2l,f,c
 10822  004024  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10823  004026  22DA               	addwfc	fsr2h,f,c
 10824  004028  C024  FFDE         	movff	LCD_SliderCreate@fpPress,postinc2
 10825  00402C  C025  FFDD         	movff	LCD_SliderCreate@fpPress+1,postdec2
 10826                           
 10827                           ;libraries/lcd_highlevel.c: 308:   slider->steps = steps;
 10828  004030  EE20 F015          	lfsr	2,21
 10829  004034  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10830  004036  26D9               	addwf	fsr2l,f,c
 10831  004038  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10832  00403A  22DA               	addwfc	fsr2h,f,c
 10833  00403C  C022  FFDE         	movff	LCD_SliderCreate@steps,postinc2
 10834  004040  C023  FFDD         	movff	LCD_SliderCreate@steps+1,postdec2
 10835                           
 10836                           ;libraries/lcd_highlevel.c: 309:   slider->value = 0;
 10837  004044  EE20 F011          	lfsr	2,17
 10838  004048  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10839  00404A  26D9               	addwf	fsr2l,f,c
 10840  00404C  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10841  00404E  22DA               	addwfc	fsr2h,f,c
 10842  004050  0E00               	movlw	0
 10843  004052  6EDE               	movwf	postinc2,c
 10844  004054  0E00               	movlw	0
 10845  004056  6EDD               	movwf	postdec2,c
 10846                           
 10847                           ;libraries/lcd_highlevel.c: 310:   slider->oldValue = 0;
 10848  004058  EE20 F013          	lfsr	2,19
 10849  00405C  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10850  00405E  26D9               	addwf	fsr2l,f,c
 10851  004060  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10852  004062  22DA               	addwfc	fsr2h,f,c
 10853  004064  0E00               	movlw	0
 10854  004066  6EDE               	movwf	postinc2,c
 10855  004068  0E00               	movlw	0
 10856  00406A  6EDD               	movwf	postdec2,c
 10857  00406C  0012               	return		;funcret
 10858  00406E                     __end_of_LCD_SliderCreate:
 10859                           	callstack 0
 10860                           
 10861 ;; *************** function _LCD_ButtonCreate *****************
 10862 ;; Defined at:
 10863 ;;		line 396 in file "libraries/lcd_highlevel.c"
 10864 ;; Parameters:    Size  Location     Type
 10865 ;;  posX            2   17[COMRAM] unsigned short 
 10866 ;;  posY            2   19[COMRAM] unsigned short 
 10867 ;;  width           2   21[COMRAM] unsigned short 
 10868 ;;  height          2   23[COMRAM] unsigned short 
 10869 ;;  txtColor        2   25[COMRAM] unsigned short 
 10870 ;;  bgColor         2   27[COMRAM] unsigned short 
 10871 ;;  textOrBmp       2   29[COMRAM] PTR const unsigned char 
 10872 ;;		 -> STR_8(9), STR_7(2), STR_6(9), STR_5(9), 
 10873 ;;		 -> STR_4(11), 
 10874 ;;  font            2   31[COMRAM] PTR struct .
 10875 ;;		 -> arialNarrow_12ptFontInfo(7), 
 10876 ;;  fpPress         2   33[COMRAM] PTR FTN(unsigned char ,)
 10877 ;;		 -> Absolute function(1), 
 10878 ;;  fpReleased      2   35[COMRAM] PTR FTN(unsigned char ,)
 10879 ;;		 -> Absolute function(1), 
 10880 ;;  fpOut           2   37[COMRAM] PTR FTN(unsigned char ,)
 10881 ;;		 -> Absolute function(1), 
 10882 ;;  button          2   39[COMRAM] PTR struct .
 10883 ;;		 -> g1(216), 
 10884 ;;  index           1   41[COMRAM] unsigned char 
 10885 ;; Auto vars:     Size  Location     Type
 10886 ;;		None
 10887 ;; Return value:  Size  Location     Type
 10888 ;;                  1    wreg      void 
 10889 ;; Registers used:
 10890 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10891 ;; Tracked objects:
 10892 ;;		On entry : 0/0
 10893 ;;		On exit  : 0/0
 10894 ;;		Unchanged: 0/0
 10895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10896 ;;      Params:        25       0       0       0       0       0       0
 10897 ;;      Locals:         0       0       0       0       0       0       0
 10898 ;;      Temps:          0       0       0       0       0       0       0
 10899 ;;      Totals:        25       0       0       0       0       0       0
 10900 ;;Total ram usage:       25 bytes
 10901 ;; Hardware stack levels used: 1
 10902 ;; Hardware stack levels required when called: 4
 10903 ;; This function calls:
 10904 ;;		Nothing
 10905 ;; This function is called by:
 10906 ;;		_GameParameters_init
 10907 ;; This function uses a non-reentrant model
 10908 ;;
 10909                           
 10910                           	psect	text44
 10911  003E86                     __ptext44:
 10912                           	callstack 0
 10913  003E86                     _LCD_ButtonCreate:
 10914                           	callstack 21
 10915                           
 10916                           ;libraries/lcd_highlevel.c: 396: void LCD_ButtonCreate(uint16_t posX, uint16_t posY,;lib
      +                          raries/lcd_highlevel.c: 397:                       uint16_t width, uint16_t height,;libr
      +                          aries/lcd_highlevel.c: 398:                       uint16_t txtColor, uint16_t bgColor,;l
      +                          ibraries/lcd_highlevel.c: 399:                       const uint8_t * textOrBmp, FONT_INF
      +                          O * font,;libraries/lcd_highlevel.c: 400:                       void (*fpPress)(uint8_t)
      +                          , void (* fpReleased)(uint8_t), void (* fpOut)(uint8_t),;libraries/lcd_highlevel.c: 401:
      +                                                 btn_t * button,
 10917                           
 10918                           ;incstack = 0
 10919  003E86  C028  FFD9         	movff	LCD_ButtonCreate@button,fsr2l
 10920  003E8A  C029  FFDA         	movff	LCD_ButtonCreate@button+1,fsr2h
 10921  003E8E  C012  FFDE         	movff	LCD_ButtonCreate@posX,postinc2
 10922  003E92  C013  FFDD         	movff	LCD_ButtonCreate@posX+1,postdec2
 10923                           
 10924                           ;libraries/lcd_highlevel.c: 405:   button->posY = posY;
 10925  003E96  EE20 F002          	lfsr	2,2
 10926  003E9A  5028               	movf	LCD_ButtonCreate@button^0,w,c
 10927  003E9C  26D9               	addwf	fsr2l,f,c
 10928  003E9E  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 10929  003EA0  22DA               	addwfc	fsr2h,f,c
 10930  003EA2  C014  FFDE         	movff	LCD_ButtonCreate@posY,postinc2
 10931  003EA6  C015  FFDD         	movff	LCD_ButtonCreate@posY+1,postdec2
 10932                           
 10933                           ;libraries/lcd_highlevel.c: 406:   button->height = height;
 10934  003EAA  EE20 F006          	lfsr	2,6
 10935  003EAE  5028               	movf	LCD_ButtonCreate@button^0,w,c
 10936  003EB0  26D9               	addwf	fsr2l,f,c
 10937  003EB2  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 10938  003EB4  22DA               	addwfc	fsr2h,f,c
 10939  003EB6  C018  FFDE         	movff	LCD_ButtonCreate@height,postinc2
 10940  003EBA  C019  FFDD         	movff	LCD_ButtonCreate@height+1,postdec2
 10941                           
 10942                           ;libraries/lcd_highlevel.c: 407:   button->width = width;
 10943  003EBE  EE20 F004          	lfsr	2,4
 10944  003EC2  5028               	movf	LCD_ButtonCreate@button^0,w,c
 10945  003EC4  26D9               	addwf	fsr2l,f,c
 10946  003EC6  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 10947  003EC8  22DA               	addwfc	fsr2h,f,c
 10948  003ECA  C016  FFDE         	movff	LCD_ButtonCreate@width,postinc2
 10949  003ECE  C017  FFDD         	movff	LCD_ButtonCreate@width+1,postdec2
 10950                           
 10951                           ;libraries/lcd_highlevel.c: 408:   button->txtColor = txtColor;
 10952  003ED2  EE20 F008          	lfsr	2,8
 10953  003ED6  5028               	movf	LCD_ButtonCreate@button^0,w,c
 10954  003ED8  26D9               	addwf	fsr2l,f,c
 10955  003EDA  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 10956  003EDC  22DA               	addwfc	fsr2h,f,c
 10957  003EDE  C01A  FFDE         	movff	LCD_ButtonCreate@txtColor,postinc2
 10958  003EE2  C01B  FFDD         	movff	LCD_ButtonCreate@txtColor+1,postdec2
 10959                           
 10960                           ;libraries/lcd_highlevel.c: 409:   button->bgColor = bgColor;
 10961  003EE6  EE20 F00A          	lfsr	2,10
 10962  003EEA  5028               	movf	LCD_ButtonCreate@button^0,w,c
 10963  003EEC  26D9               	addwf	fsr2l,f,c
 10964  003EEE  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 10965  003EF0  22DA               	addwfc	fsr2h,f,c
 10966  003EF2  C01C  FFDE         	movff	LCD_ButtonCreate@bgColor,postinc2
 10967  003EF6  C01D  FFDD         	movff	LCD_ButtonCreate@bgColor+1,postdec2
 10968                           
 10969                           ;libraries/lcd_highlevel.c: 410:   button->text = textOrBmp;
 10970  003EFA  EE20 F00C          	lfsr	2,12
 10971  003EFE  5028               	movf	LCD_ButtonCreate@button^0,w,c
 10972  003F00  26D9               	addwf	fsr2l,f,c
 10973  003F02  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 10974  003F04  22DA               	addwfc	fsr2h,f,c
 10975  003F06  C01E  FFDE         	movff	LCD_ButtonCreate@textOrBmp,postinc2
 10976  003F0A  C01F  FFDD         	movff	LCD_ButtonCreate@textOrBmp+1,postdec2
 10977                           
 10978                           ;libraries/lcd_highlevel.c: 411:   button->font = font;
 10979  003F0E  EE20 F00E          	lfsr	2,14
 10980  003F12  5028               	movf	LCD_ButtonCreate@button^0,w,c
 10981  003F14  26D9               	addwf	fsr2l,f,c
 10982  003F16  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 10983  003F18  22DA               	addwfc	fsr2h,f,c
 10984  003F1A  C020  FFDE         	movff	LCD_ButtonCreate@font,postinc2
 10985  003F1E  C021  FFDD         	movff	LCD_ButtonCreate@font+1,postdec2
 10986                           
 10987                           ;libraries/lcd_highlevel.c: 412:   button->fpPress = fpPress;
 10988  003F22  EE20 F011          	lfsr	2,17
 10989  003F26  5028               	movf	LCD_ButtonCreate@button^0,w,c
 10990  003F28  26D9               	addwf	fsr2l,f,c
 10991  003F2A  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 10992  003F2C  22DA               	addwfc	fsr2h,f,c
 10993  003F2E  C022  FFDE         	movff	LCD_ButtonCreate@fpPress,postinc2
 10994  003F32  C023  FFDD         	movff	LCD_ButtonCreate@fpPress+1,postdec2
 10995                           
 10996                           ;libraries/lcd_highlevel.c: 413:   button->fpReleased = fpReleased;
 10997  003F36  EE20 F013          	lfsr	2,19
 10998  003F3A  5028               	movf	LCD_ButtonCreate@button^0,w,c
 10999  003F3C  26D9               	addwf	fsr2l,f,c
 11000  003F3E  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11001  003F40  22DA               	addwfc	fsr2h,f,c
 11002  003F42  C024  FFDE         	movff	LCD_ButtonCreate@fpReleased,postinc2
 11003  003F46  C025  FFDD         	movff	LCD_ButtonCreate@fpReleased+1,postdec2
 11004                           
 11005                           ;libraries/lcd_highlevel.c: 414:   button->fpOut = fpOut;
 11006  003F4A  EE20 F015          	lfsr	2,21
 11007  003F4E  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11008  003F50  26D9               	addwf	fsr2l,f,c
 11009  003F52  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11010  003F54  22DA               	addwfc	fsr2h,f,c
 11011  003F56  C026  FFDE         	movff	LCD_ButtonCreate@fpOut,postinc2
 11012  003F5A  C027  FFDD         	movff	LCD_ButtonCreate@fpOut+1,postdec2
 11013                           
 11014                           ;libraries/lcd_highlevel.c: 415:   button->index = index;
 11015  003F5E  EE20 F017          	lfsr	2,23
 11016  003F62  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11017  003F64  26D9               	addwf	fsr2l,f,c
 11018  003F66  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11019  003F68  22DA               	addwfc	fsr2h,f,c
 11020  003F6A  C02A  FFDF         	movff	LCD_ButtonCreate@index,indf2
 11021                           
 11022                           ;libraries/lcd_highlevel.c: 416:   button->pressed = 0;
 11023  003F6E  EE20 F010          	lfsr	2,16
 11024  003F72  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11025  003F74  26D9               	addwf	fsr2l,f,c
 11026  003F76  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11027  003F78  22DA               	addwfc	fsr2h,f,c
 11028  003F7A  0E00               	movlw	0
 11029  003F7C  6EDF               	movwf	indf2,c
 11030  003F7E  0012               	return		;funcret
 11031  003F80                     __end_of_LCD_ButtonCreate:
 11032                           	callstack 0
 11033                           
 11034 ;; *************** function _Ball_init *****************
 11035 ;; Defined at:
 11036 ;;		line 6 in file "class/ball.c"
 11037 ;; Parameters:    Size  Location     Type
 11038 ;;  b               2   17[COMRAM] PTR struct Ball
 11039 ;;		 -> g1(216), 
 11040 ;; Auto vars:     Size  Location     Type
 11041 ;;		None
 11042 ;; Return value:  Size  Location     Type
 11043 ;;                  1    wreg      void 
 11044 ;; Registers used:
 11045 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11046 ;; Tracked objects:
 11047 ;;		On entry : 0/0
 11048 ;;		On exit  : 0/0
 11049 ;;		Unchanged: 0/0
 11050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11051 ;;      Params:         2       0       0       0       0       0       0
 11052 ;;      Locals:         0       0       0       0       0       0       0
 11053 ;;      Temps:          0       0       0       0       0       0       0
 11054 ;;      Totals:         2       0       0       0       0       0       0
 11055 ;;Total ram usage:        2 bytes
 11056 ;; Hardware stack levels used: 1
 11057 ;; Hardware stack levels required when called: 4
 11058 ;; This function calls:
 11059 ;;		Nothing
 11060 ;; This function is called by:
 11061 ;;		_GameParameters_init
 11062 ;; This function uses a non-reentrant model
 11063 ;;
 11064                           
 11065                           	psect	text45
 11066  0051A2                     __ptext45:
 11067                           	callstack 0
 11068  0051A2                     _Ball_init:
 11069                           	callstack 21
 11070                           
 11071                           ;class/ball.c: 6: void Ball_init(struct Ball* b);class/ball.c: 7: {;class/ball.c: 8:    
      +                           b->x = 90;
 11072                           
 11073                           ;incstack = 0
 11074  0051A2  C012  FFD9         	movff	Ball_init@b,fsr2l
 11075  0051A6  C013  FFDA         	movff	Ball_init@b+1,fsr2h
 11076  0051AA  0E5A               	movlw	90
 11077  0051AC  6EDE               	movwf	postinc2,c
 11078  0051AE  0E00               	movlw	0
 11079  0051B0  6EDD               	movwf	postdec2,c
 11080                           
 11081                           ;class/ball.c: 9:     b->y = 150;
 11082  0051B2  EE20 F002          	lfsr	2,2
 11083  0051B6  5012               	movf	Ball_init@b^0,w,c
 11084  0051B8  26D9               	addwf	fsr2l,f,c
 11085  0051BA  5013               	movf	(Ball_init@b+1)^0,w,c
 11086  0051BC  22DA               	addwfc	fsr2h,f,c
 11087  0051BE  0E96               	movlw	150
 11088  0051C0  6EDE               	movwf	postinc2,c
 11089  0051C2  0E00               	movlw	0
 11090  0051C4  6EDD               	movwf	postdec2,c
 11091                           
 11092                           ;class/ball.c: 10:     b->oldx=20;
 11093  0051C6  EE20 F004          	lfsr	2,4
 11094  0051CA  5012               	movf	Ball_init@b^0,w,c
 11095  0051CC  26D9               	addwf	fsr2l,f,c
 11096  0051CE  5013               	movf	(Ball_init@b+1)^0,w,c
 11097  0051D0  22DA               	addwfc	fsr2h,f,c
 11098  0051D2  0E14               	movlw	20
 11099  0051D4  6EDE               	movwf	postinc2,c
 11100  0051D6  0E00               	movlw	0
 11101  0051D8  6EDD               	movwf	postdec2,c
 11102                           
 11103                           ;class/ball.c: 11:     b->oldy=20;
 11104  0051DA  EE20 F006          	lfsr	2,6
 11105  0051DE  5012               	movf	Ball_init@b^0,w,c
 11106  0051E0  26D9               	addwf	fsr2l,f,c
 11107  0051E2  5013               	movf	(Ball_init@b+1)^0,w,c
 11108  0051E4  22DA               	addwfc	fsr2h,f,c
 11109  0051E6  0E14               	movlw	20
 11110  0051E8  6EDE               	movwf	postinc2,c
 11111  0051EA  0E00               	movlw	0
 11112  0051EC  6EDD               	movwf	postdec2,c
 11113                           
 11114                           ;class/ball.c: 12:     b->dx = 0;
 11115  0051EE  EE20 F008          	lfsr	2,8
 11116  0051F2  5012               	movf	Ball_init@b^0,w,c
 11117  0051F4  26D9               	addwf	fsr2l,f,c
 11118  0051F6  5013               	movf	(Ball_init@b+1)^0,w,c
 11119  0051F8  22DA               	addwfc	fsr2h,f,c
 11120  0051FA  0E00               	movlw	0
 11121  0051FC  6EDE               	movwf	postinc2,c
 11122  0051FE  0E00               	movlw	0
 11123  005200  6EDD               	movwf	postdec2,c
 11124  005202  0012               	return		;funcret
 11125  005204                     __end_of_Ball_init:
 11126                           	callstack 0
 11127                           
 11128 ;; *************** function _displaySM *****************
 11129 ;; Defined at:
 11130 ;;		line 30 in file "stateMachine/display.c"
 11131 ;; Parameters:    Size  Location     Type
 11132 ;;  ev              1    wreg     unsigned char 
 11133 ;;  g               2   65[BANK0 ] PTR struct GameParameter
 11134 ;;		 -> g1(216), 
 11135 ;; Auto vars:     Size  Location     Type
 11136 ;;  ev              1   69[BANK0 ] unsigned char 
 11137 ;; Return value:  Size  Location     Type
 11138 ;;                  1    wreg      void 
 11139 ;; Registers used:
 11140 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11141 ;; Tracked objects:
 11142 ;;		On entry : 3F/0
 11143 ;;		On exit  : 0/0
 11144 ;;		Unchanged: 0/0
 11145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11146 ;;      Params:         0       2       0       0       0       0       0
 11147 ;;      Locals:         0       1       0       0       0       0       0
 11148 ;;      Temps:          0       2       0       0       0       0       0
 11149 ;;      Totals:         0       5       0       0       0       0       0
 11150 ;;Total ram usage:        5 bytes
 11151 ;; Hardware stack levels used: 1
 11152 ;; Hardware stack levels required when called: 14
 11153 ;; This function calls:
 11154 ;;		_Menu_inGameDraw
 11155 ;;		_displayController
 11156 ;; This function is called by:
 11157 ;;		_Factory_exec
 11158 ;; This function uses a non-reentrant model
 11159 ;;
 11160                           
 11161                           	psect	text46
 11162  004B86                     __ptext46:
 11163                           	callstack 0
 11164  004B86                     _displaySM:
 11165                           	callstack 15
 11166                           
 11167                           ;incstack = 0
 11168                           ;displaySM@ev stored from wreg
 11169  004B86  6FA5               	movwf	displaySM@ev& (0+255),b
 11170                           
 11171                           ;stateMachine/display.c: 30: void displaySM(Event ev, GameParameters* g);stateMachine/di
      +                          splay.c: 31: {;stateMachine/display.c: 32:    switch(displayState)
 11172  004B88  D036               	goto	l9744
 11173  004B8A                     l9706:
 11174                           
 11175                           ; BSR set to: 0
 11176                           ;stateMachine/display.c: 35:             if((ev==evOnePlayer)||(ev==evTwoPlayer))
 11177  004B8A  0E05               	movlw	5
 11178  004B8C  19A5               	xorwf	displaySM@ev& (0+255),w,b
 11179  004B8E  B4D8               	btfsc	status,2,c
 11180  004B90  D004               	goto	u7450
 11181                           
 11182                           ; BSR set to: 0
 11183  004B92  0E06               	movlw	6
 11184  004B94  19A5               	xorwf	displaySM@ev& (0+255),w,b
 11185  004B96  A4D8               	btfss	status,2,c
 11186  004B98  D010               	goto	l9716
 11187  004B9A                     u7450:
 11188                           
 11189                           ; BSR set to: 0
 11190                           ;stateMachine/display.c: 36:             {;stateMachine/display.c: 37:                 d
      +                          isplayState=INGAME;
 11191  004B9A  0E02               	movlw	2
 11192  004B9C  6FD8               	movwf	_displayState& (0+255),b
 11193                           
 11194                           ; BSR set to: 0
 11195                           ;stateMachine/display.c: 38:                 Menu_inGameDraw(g);
 11196  004B9E  C0A1  F08D         	movff	displaySM@g,Menu_inGameDraw@g
 11197  004BA2  C0A2  F08E         	movff	displaySM@g+1,Menu_inGameDraw@g+1
 11198  004BA6  ECE9  F026         	call	_Menu_inGameDraw	;wreg free
 11199                           
 11200                           ;stateMachine/display.c: 39:                 displayController(g,ev);
 11201  004BAA  C0A1  F09C         	movff	displaySM@g,displayController@g
 11202  004BAE  C0A2  F09D         	movff	displaySM@g+1,displayController@g+1
 11203  004BB2  C0A5  F09E         	movff	displaySM@ev,displayController@ev
 11204  004BB6  EC37  F020         	call	_displayController	;wreg free
 11205  004BBA                     l9716:
 11206                           
 11207                           ;stateMachine/display.c: 41:             if(ev==evParameters)
 11208  004BBA  0E07               	movlw	7
 11209  004BBC  0100               	movlb	0	; () banked
 11210  004BBE  19A5               	xorwf	displaySM@ev& (0+255),w,b
 11211  004BC0  A4D8               	btfss	status,2,c
 11212  004BC2  0012               	return	
 11213                           
 11214                           ; BSR set to: 0
 11215                           ;stateMachine/display.c: 42:             {;stateMachine/display.c: 43:                 d
      +                          isplayState=PARAMETERS;
 11216  004BC4  0E01               	movlw	1
 11217  004BC6                     L7:
 11218  004BC6  6FD8               	movwf	_displayState& (0+255),b
 11219  004BC8                     l9720:
 11220                           
 11221                           ; BSR set to: 0
 11222                           ;stateMachine/display.c: 44:                 displayController(g,ev);
 11223  004BC8  C0A1  F09C         	movff	displaySM@g,displayController@g
 11224  004BCC  C0A2  F09D         	movff	displaySM@g+1,displayController@g+1
 11225  004BD0  C0A5  F09E         	movff	displaySM@ev,displayController@ev
 11226  004BD4  EC37  F020         	call	_displayController	;wreg free
 11227  004BD8  0012               	return	
 11228  004BDA                     l9722:
 11229                           
 11230                           ; BSR set to: 0
 11231                           ;stateMachine/display.c: 49:             if(ev==evLeaveParam)
 11232  004BDA  0E08               	movlw	8
 11233  004BDC  19A5               	xorwf	displaySM@ev& (0+255),w,b
 11234  004BDE  A4D8               	btfss	status,2,c
 11235  004BE0  0012               	return	
 11236                           
 11237                           ; BSR set to: 0
 11238                           ;stateMachine/display.c: 50:             {;stateMachine/display.c: 51:                 d
      +                          isplayState=WELCOME;
 11239  004BE2  0E00               	movlw	0
 11240  004BE4  D7F0               	goto	L7
 11241  004BE6                     l9728:
 11242                           
 11243                           ; BSR set to: 0
 11244                           ;stateMachine/display.c: 57:             if(ev==evEndGame)
 11245  004BE6  0E09               	movlw	9
 11246  004BE8  19A5               	xorwf	displaySM@ev& (0+255),w,b
 11247  004BEA  A4D8               	btfss	status,2,c
 11248  004BEC  D7ED               	goto	l9720
 11249                           
 11250                           ; BSR set to: 0
 11251                           ;stateMachine/display.c: 58:             {;stateMachine/display.c: 59:                 d
      +                          isplayState=ENDGAME;
 11252  004BEE  0E03               	movlw	3
 11253  004BF0  D7EA               	goto	L7
 11254  004BF2                     l9736:
 11255                           
 11256                           ; BSR set to: 0
 11257                           ;stateMachine/display.c: 69:            if(ev==evNewGame)
 11258  004BF2  0E0F               	movlw	15
 11259  004BF4  D7F3               	goto	L14
 11260  004BF6                     l9744:
 11261  004BF6  0100               	movlb	0	; () banked
 11262  004BF8  51D8               	movf	_displayState& (0+255),w,b
 11263  004BFA  6FA3               	movwf	??_displaySM& (0+255),b
 11264  004BFC  6BA4               	clrf	(??_displaySM+1)& (0+255),b
 11265                           
 11266                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11267                           ; Switch size 1, requested type "simple"
 11268                           ; Number of cases is 1, Range of values is 0 to 0
 11269                           ; switch strategies available:
 11270                           ; Name         Instructions Cycles
 11271                           ; simple_byte            4     3 (average)
 11272                           ;	Chosen strategy is simple_byte
 11273  004BFE  51A4               	movf	(??_displaySM+1)& (0+255),w,b
 11274  004C00  0A00               	xorlw	0	; case 0
 11275  004C02  A4D8               	btfss	status,2,c
 11276  004C04  0012               	return	
 11277                           
 11278                           ; BSR set to: 0
 11279                           ; Switch size 1, requested type "simple"
 11280                           ; Number of cases is 4, Range of values is 0 to 3
 11281                           ; switch strategies available:
 11282                           ; Name         Instructions Cycles
 11283                           ; simple_byte           13     7 (average)
 11284                           ;	Chosen strategy is simple_byte
 11285  004C06  51A3               	movf	??_displaySM& (0+255),w,b
 11286  004C08  0A00               	xorlw	0	; case 0
 11287  004C0A  B4D8               	btfsc	status,2,c
 11288  004C0C  D7BE               	goto	l9706
 11289  004C0E  0A01               	xorlw	1	; case 1
 11290  004C10  B4D8               	btfsc	status,2,c
 11291  004C12  D7E3               	goto	l9722
 11292  004C14  0A03               	xorlw	3	; case 2
 11293  004C16  B4D8               	btfsc	status,2,c
 11294  004C18  D7E6               	goto	l9728
 11295  004C1A  0A01               	xorlw	1	; case 3
 11296  004C1C  A4D8               	btfss	status,2,c
 11297  004C1E  0012               	return	
 11298  004C20  D7E8               	goto	l9736
 11299  004C22                     __end_of_displaySM:
 11300                           	callstack 0
 11301                           
 11302 ;; *************** function _displayController *****************
 11303 ;; Defined at:
 11304 ;;		line 89 in file "stateMachine/display.c"
 11305 ;; Parameters:    Size  Location     Type
 11306 ;;  g               2   60[BANK0 ] PTR struct GameParameter
 11307 ;;		 -> g1(216), 
 11308 ;;  ev              1   62[BANK0 ] unsigned char 
 11309 ;; Auto vars:     Size  Location     Type
 11310 ;;		None
 11311 ;; Return value:  Size  Location     Type
 11312 ;;                  1    wreg      void 
 11313 ;; Registers used:
 11314 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11315 ;; Tracked objects:
 11316 ;;		On entry : 0/0
 11317 ;;		On exit  : 0/0
 11318 ;;		Unchanged: 0/0
 11319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11320 ;;      Params:         0       3       0       0       0       0       0
 11321 ;;      Locals:         0       0       0       0       0       0       0
 11322 ;;      Temps:          0       2       0       0       0       0       0
 11323 ;;      Totals:         0       5       0       0       0       0       0
 11324 ;;Total ram usage:        5 bytes
 11325 ;; Hardware stack levels used: 1
 11326 ;; Hardware stack levels required when called: 13
 11327 ;; This function calls:
 11328 ;;		_Ball_draw
 11329 ;;		_LCD_DrawRect
 11330 ;;		_Menu_endGame
 11331 ;;		_Menu_parametersDraw
 11332 ;;		_Menu_welcomeDraw
 11333 ;;		_Paddle_draw
 11334 ;;		_Score_draw
 11335 ;; This function is called by:
 11336 ;;		_displayInit
 11337 ;;		_displaySM
 11338 ;; This function uses a non-reentrant model
 11339 ;;
 11340                           
 11341                           	psect	text47
 11342  00406E                     __ptext47:
 11343                           	callstack 0
 11344  00406E                     _displayController:
 11345                           	callstack 14
 11346                           
 11347                           ;stateMachine/display.c: 89: void displayController(GameParameters* g,Event ev);stateMac
      +                          hine/display.c: 90: {;stateMachine/display.c: 91:     switch(displayState)
 11348                           
 11349                           ;incstack = 0
 11350  00406E  D060               	goto	l9212
 11351  004070                     l9186:
 11352                           
 11353                           ; BSR set to: 0
 11354                           ;stateMachine/display.c: 95:             Menu_welcomeDraw(g);
 11355  004070  C09C  F044         	movff	displayController@g,Menu_welcomeDraw@g
 11356  004074  C09D  F045         	movff	displayController@g+1,Menu_welcomeDraw@g+1
 11357  004078  EC28  F028         	call	_Menu_welcomeDraw	;wreg free
 11358                           
 11359                           ;stateMachine/display.c: 96:             break;
 11360  00407C  0012               	return	
 11361  00407E                     l9188:
 11362                           
 11363                           ; BSR set to: 0
 11364                           ;stateMachine/display.c: 100:             Menu_parametersDraw(g);
 11365  00407E  C09C  F045         	movff	displayController@g,Menu_parametersDraw@g
 11366  004082  C09D  F046         	movff	displayController@g+1,Menu_parametersDraw@g+1
 11367  004086  EC2F  F01E         	call	_Menu_parametersDraw	;wreg free
 11368                           
 11369                           ;stateMachine/display.c: 101:             break;
 11370  00408A  0012               	return	
 11371  00408C                     l9190:
 11372                           
 11373                           ; BSR set to: 0
 11374                           ;stateMachine/display.c: 105:             if(ev==evRedrawPaddle1)
 11375  00408C  0E0B               	movlw	11
 11376  00408E  199E               	xorwf	displayController@ev& (0+255),w,b
 11377  004090  A4D8               	btfss	status,2,c
 11378  004092  D008               	goto	l9194
 11379                           
 11380                           ; BSR set to: 0
 11381                           ;stateMachine/display.c: 106:             {;stateMachine/display.c: 107:                
      +                           Paddle_draw(&g->p1);
 11382  004094  0EBE               	movlw	190
 11383  004096  259C               	addwf	displayController@g& (0+255),w,b
 11384  004098  6E25               	movwf	Paddle_draw@p^0,c
 11385  00409A  0E00               	movlw	0
 11386  00409C  219D               	addwfc	(displayController@g+1)& (0+255),w,b
 11387  00409E  6E26               	movwf	(Paddle_draw@p+1)^0,c
 11388  0040A0  EC04  F01D         	call	_Paddle_draw	;wreg free
 11389  0040A4                     l9194:
 11390                           
 11391                           ;stateMachine/display.c: 109:             if(ev==evRedrawPaddle2)
 11392  0040A4  0E0C               	movlw	12
 11393  0040A6  0100               	movlb	0	; () banked
 11394  0040A8  199E               	xorwf	displayController@ev& (0+255),w,b
 11395  0040AA  A4D8               	btfss	status,2,c
 11396  0040AC  D008               	goto	l9198
 11397                           
 11398                           ; BSR set to: 0
 11399                           ;stateMachine/display.c: 110:             {;stateMachine/display.c: 111:                
      +                           Paddle_draw(&g->p2);
 11400  0040AE  0EC8               	movlw	200
 11401  0040B0  259C               	addwf	displayController@g& (0+255),w,b
 11402  0040B2  6E25               	movwf	Paddle_draw@p^0,c
 11403  0040B4  0E00               	movlw	0
 11404  0040B6  219D               	addwfc	(displayController@g+1)& (0+255),w,b
 11405  0040B8  6E26               	movwf	(Paddle_draw@p+1)^0,c
 11406  0040BA  EC04  F01D         	call	_Paddle_draw	;wreg free
 11407  0040BE                     l9198:
 11408                           
 11409                           ;stateMachine/display.c: 113:             if(ev==evRedrawBall)
 11410  0040BE  0E0D               	movlw	13
 11411  0040C0  0100               	movlb	0	; () banked
 11412  0040C2  199E               	xorwf	displayController@ev& (0+255),w,b
 11413  0040C4  A4D8               	btfss	status,2,c
 11414  0040C6  D008               	goto	l9202
 11415                           
 11416                           ; BSR set to: 0
 11417                           ;stateMachine/display.c: 114:             {;stateMachine/display.c: 115:                
      +                           Ball_draw(&g->b);
 11418  0040C8  0EB2               	movlw	178
 11419  0040CA  259C               	addwf	displayController@g& (0+255),w,b
 11420  0040CC  6E25               	movwf	Ball_draw@b^0,c
 11421  0040CE  0E00               	movlw	0
 11422  0040D0  219D               	addwfc	(displayController@g+1)& (0+255),w,b
 11423  0040D2  6E26               	movwf	(Ball_draw@b+1)^0,c
 11424  0040D4  ECCE  F019         	call	_Ball_draw	;wreg free
 11425  0040D8                     l9202:
 11426                           
 11427                           ;stateMachine/display.c: 117:             if(ev==evRedrawScore)
 11428  0040D8  0E0E               	movlw	14
 11429  0040DA  0100               	movlb	0	; () banked
 11430  0040DC  199E               	xorwf	displayController@ev& (0+255),w,b
 11431  0040DE  A4D8               	btfss	status,2,c
 11432  0040E0  0012               	return	
 11433                           
 11434                           ; BSR set to: 0
 11435                           ;stateMachine/display.c: 118:             {;stateMachine/display.c: 119:                
      +                           Score_draw(&g->s1);
 11436  0040E2  0ED2               	movlw	210
 11437  0040E4  259C               	addwf	displayController@g& (0+255),w,b
 11438  0040E6  6F8B               	movwf	Score_draw@s& (0+255),b
 11439  0040E8  0E00               	movlw	0
 11440  0040EA  219D               	addwfc	(displayController@g+1)& (0+255),w,b
 11441  0040EC  6F8C               	movwf	(Score_draw@s+1)& (0+255),b
 11442  0040EE  EC88  F021         	call	_Score_draw	;wreg free
 11443                           
 11444                           ;stateMachine/display.c: 120:                 LCD_DrawRect(0,160,239,160,1,0b11111111111
      +                          11111);
 11445  0040F2  0E00               	movlw	0
 11446  0040F4  6E13               	movwf	(LCD_DrawRect@posX1+1)^0,c
 11447  0040F6  0E00               	movlw	0
 11448  0040F8  6E12               	movwf	LCD_DrawRect@posX1^0,c
 11449  0040FA  0E00               	movlw	0
 11450  0040FC  6E15               	movwf	(LCD_DrawRect@posY1+1)^0,c
 11451  0040FE  0EA0               	movlw	160
 11452  004100  6E14               	movwf	LCD_DrawRect@posY1^0,c
 11453  004102  0E00               	movlw	0
 11454  004104  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 11455  004106  0EEF               	movlw	239
 11456  004108  6E16               	movwf	LCD_DrawRect@posX2^0,c
 11457  00410A  0E00               	movlw	0
 11458  00410C  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 11459  00410E  0EA0               	movlw	160
 11460  004110  6E18               	movwf	LCD_DrawRect@posY2^0,c
 11461  004112  0E01               	movlw	1
 11462  004114  6E1A               	movwf	LCD_DrawRect@fill^0,c
 11463  004116  0EFF               	movlw	255
 11464  004118  6E1C               	movwf	(LCD_DrawRect@color+1)^0,c
 11465  00411A  681B               	setf	LCD_DrawRect@color^0,c
 11466  00411C  EC7D  F012         	call	_LCD_DrawRect	;wreg free
 11467  004120  0012               	return	
 11468  004122                     l9208:
 11469                           
 11470                           ; BSR set to: 0
 11471                           ;stateMachine/display.c: 125:             Menu_endGame(g);
 11472  004122  C09C  F044         	movff	displayController@g,Menu_endGame@g
 11473  004126  C09D  F045         	movff	displayController@g+1,Menu_endGame@g+1
 11474  00412A  EC73  F025         	call	_Menu_endGame	;wreg free
 11475                           
 11476                           ;stateMachine/display.c: 126:             break;
 11477  00412E  0012               	return	
 11478  004130                     l9212:
 11479  004130  0100               	movlb	0	; () banked
 11480  004132  51D8               	movf	_displayState& (0+255),w,b
 11481  004134  6F9F               	movwf	??_displayController& (0+255),b
 11482  004136  6BA0               	clrf	(??_displayController+1)& (0+255),b
 11483                           
 11484                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11485                           ; Switch size 1, requested type "simple"
 11486                           ; Number of cases is 1, Range of values is 0 to 0
 11487                           ; switch strategies available:
 11488                           ; Name         Instructions Cycles
 11489                           ; simple_byte            4     3 (average)
 11490                           ;	Chosen strategy is simple_byte
 11491  004138  51A0               	movf	(??_displayController+1)& (0+255),w,b
 11492  00413A  0A00               	xorlw	0	; case 0
 11493  00413C  A4D8               	btfss	status,2,c
 11494  00413E  0012               	return	
 11495                           
 11496                           ; BSR set to: 0
 11497                           ; Switch size 1, requested type "simple"
 11498                           ; Number of cases is 4, Range of values is 0 to 3
 11499                           ; switch strategies available:
 11500                           ; Name         Instructions Cycles
 11501                           ; simple_byte           13     7 (average)
 11502                           ;	Chosen strategy is simple_byte
 11503  004140  519F               	movf	??_displayController& (0+255),w,b
 11504  004142  0A00               	xorlw	0	; case 0
 11505  004144  B4D8               	btfsc	status,2,c
 11506  004146  D794               	goto	l9186
 11507  004148  0A01               	xorlw	1	; case 1
 11508  00414A  B4D8               	btfsc	status,2,c
 11509  00414C  D798               	goto	l9188
 11510  00414E  0A03               	xorlw	3	; case 2
 11511  004150  B4D8               	btfsc	status,2,c
 11512  004152  D79C               	goto	l9190
 11513  004154  0A01               	xorlw	1	; case 3
 11514  004156  A4D8               	btfss	status,2,c
 11515  004158  0012               	return	
 11516  00415A  D7E3               	goto	l9208
 11517  00415C                     __end_of_displayController:
 11518                           	callstack 0
 11519                           
 11520 ;; *************** function _Menu_welcomeDraw *****************
 11521 ;; Defined at:
 11522 ;;		line 7 in file "class/menu.c"
 11523 ;; Parameters:    Size  Location     Type
 11524 ;;  g               2   67[COMRAM] PTR struct GameParameter
 11525 ;;		 -> g1(216), 
 11526 ;; Auto vars:     Size  Location     Type
 11527 ;;		None
 11528 ;; Return value:  Size  Location     Type
 11529 ;;                  1    wreg      void 
 11530 ;; Registers used:
 11531 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11532 ;; Tracked objects:
 11533 ;;		On entry : 0/0
 11534 ;;		On exit  : 0/0
 11535 ;;		Unchanged: 0/0
 11536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11537 ;;      Params:         2       0       0       0       0       0       0
 11538 ;;      Locals:         0       0       0       0       0       0       0
 11539 ;;      Temps:          0       0       0       0       0       0       0
 11540 ;;      Totals:         2       0       0       0       0       0       0
 11541 ;;Total ram usage:        2 bytes
 11542 ;; Hardware stack levels used: 1
 11543 ;; Hardware stack levels required when called: 7
 11544 ;; This function calls:
 11545 ;;		_LCD_ButtonDraw
 11546 ;;		_LCD_DrawText
 11547 ;;		_LCD_Fill
 11548 ;; This function is called by:
 11549 ;;		_displayController
 11550 ;; This function uses a non-reentrant model
 11551 ;;
 11552                           
 11553                           	psect	text48
 11554  005050                     __ptext48:
 11555                           	callstack 0
 11556  005050                     _Menu_welcomeDraw:
 11557                           	callstack 19
 11558                           
 11559                           ;class/menu.c: 7: void Menu_welcomeDraw(GameParameters* g);class/menu.c: 8: {;class/menu
      +                          .c: 9:     LCD_Fill(0b1111111111111111);
 11560                           
 11561                           ;incstack = 0
 11562  005050  0EFF               	movlw	255
 11563  005052  6E13               	movwf	(LCD_Fill@color+1)^0,c
 11564  005054  6812               	setf	LCD_Fill@color^0,c
 11565  005056  ECCC  F023         	call	_LCD_Fill	;wreg free
 11566                           
 11567                           ;class/menu.c: 10:     LCD_DrawText("WELCOME",&arialNarrow_12ptFontInfo,A_CENTER,50,50,0
      +                          b0000000000000000,0b1111111111111111);
 11568  00505A  0EE2               	movlw	low STR_9
 11569  00505C  6E20               	movwf	LCD_DrawText@msg^0,c
 11570  00505E  0E7F               	movlw	high STR_9
 11571  005060  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
 11572  005062  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 11573  005064  6E22               	movwf	LCD_DrawText@font^0,c
 11574  005066  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 11575  005068  6E23               	movwf	(LCD_DrawText@font+1)^0,c
 11576  00506A  0E02               	movlw	2
 11577  00506C  6E24               	movwf	LCD_DrawText@align^0,c
 11578  00506E  0E00               	movlw	0
 11579  005070  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 11580  005072  0E32               	movlw	50
 11581  005074  6E25               	movwf	LCD_DrawText@posX^0,c
 11582  005076  0E00               	movlw	0
 11583  005078  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
 11584  00507A  0E32               	movlw	50
 11585  00507C  6E27               	movwf	LCD_DrawText@posY^0,c
 11586  00507E  0E00               	movlw	0
 11587  005080  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
 11588  005082  0E00               	movlw	0
 11589  005084  6E29               	movwf	LCD_DrawText@color^0,c
 11590  005086  0EFF               	movlw	255
 11591  005088  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
 11592  00508A  682B               	setf	LCD_DrawText@bg_color^0,c
 11593  00508C  EC83  F00B         	call	_LCD_DrawText	;wreg free
 11594                           
 11595                           ;class/menu.c: 11:     LCD_ButtonDraw(&(g->btnParam));
 11596  005090  0E08               	movlw	8
 11597  005092  2444               	addwf	Menu_welcomeDraw@g^0,w,c
 11598  005094  6E42               	movwf	LCD_ButtonDraw@button^0,c
 11599  005096  0E00               	movlw	0
 11600  005098  2045               	addwfc	(Menu_welcomeDraw@g+1)^0,w,c
 11601  00509A  6E43               	movwf	(LCD_ButtonDraw@button+1)^0,c
 11602  00509C  EC27  F007         	call	_LCD_ButtonDraw	;wreg free
 11603                           
 11604                           ;class/menu.c: 12:     LCD_ButtonDraw(&(g->btnOnePlayer));
 11605  0050A0  0E20               	movlw	32
 11606  0050A2  2444               	addwf	Menu_welcomeDraw@g^0,w,c
 11607  0050A4  6E42               	movwf	LCD_ButtonDraw@button^0,c
 11608  0050A6  0E00               	movlw	0
 11609  0050A8  2045               	addwfc	(Menu_welcomeDraw@g+1)^0,w,c
 11610  0050AA  6E43               	movwf	(LCD_ButtonDraw@button+1)^0,c
 11611  0050AC  EC27  F007         	call	_LCD_ButtonDraw	;wreg free
 11612                           
 11613                           ;class/menu.c: 13:     LCD_ButtonDraw(&(g->btnTwoPlayer));
 11614  0050B0  0E38               	movlw	56
 11615  0050B2  2444               	addwf	Menu_welcomeDraw@g^0,w,c
 11616  0050B4  6E42               	movwf	LCD_ButtonDraw@button^0,c
 11617  0050B6  0E00               	movlw	0
 11618  0050B8  2045               	addwfc	(Menu_welcomeDraw@g+1)^0,w,c
 11619  0050BA  6E43               	movwf	(LCD_ButtonDraw@button+1)^0,c
 11620  0050BC  EC27  F007         	call	_LCD_ButtonDraw	;wreg free
 11621  0050C0  0012               	return		;funcret
 11622  0050C2                     __end_of_Menu_welcomeDraw:
 11623                           	callstack 0
 11624                           
 11625 ;; *************** function _Menu_parametersDraw *****************
 11626 ;; Defined at:
 11627 ;;		line 19 in file "class/menu.c"
 11628 ;; Parameters:    Size  Location     Type
 11629 ;;  g               2   68[COMRAM] PTR struct GameParameter
 11630 ;;		 -> g1(216), 
 11631 ;; Auto vars:     Size  Location     Type
 11632 ;;		None
 11633 ;; Return value:  Size  Location     Type
 11634 ;;                  1    wreg      void 
 11635 ;; Registers used:
 11636 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11637 ;; Tracked objects:
 11638 ;;		On entry : 0/0
 11639 ;;		On exit  : 0/0
 11640 ;;		Unchanged: 0/0
 11641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11642 ;;      Params:         2       0       0       0       0       0       0
 11643 ;;      Locals:         0       0       0       0       0       0       0
 11644 ;;      Temps:          0       0       0       0       0       0       0
 11645 ;;      Totals:         2       0       0       0       0       0       0
 11646 ;;Total ram usage:        2 bytes
 11647 ;; Hardware stack levels used: 1
 11648 ;; Hardware stack levels required when called: 7
 11649 ;; This function calls:
 11650 ;;		_LCD_ButtonDraw
 11651 ;;		_LCD_DrawText
 11652 ;;		_LCD_Fill
 11653 ;;		_LCD_SliderDraw
 11654 ;; This function is called by:
 11655 ;;		_displayController
 11656 ;; This function uses a non-reentrant model
 11657 ;;
 11658                           
 11659                           	psect	text49
 11660  003C5E                     __ptext49:
 11661                           	callstack 0
 11662  003C5E                     _Menu_parametersDraw:
 11663                           	callstack 19
 11664                           
 11665                           ;class/menu.c: 19: void Menu_parametersDraw(GameParameters* g);class/menu.c: 20: {;class
      +                          /menu.c: 21:     LCD_Fill(0b1111111111111111);
 11666                           
 11667                           ;incstack = 0
 11668  003C5E  0EFF               	movlw	255
 11669  003C60  6E13               	movwf	(LCD_Fill@color+1)^0,c
 11670  003C62  6812               	setf	LCD_Fill@color^0,c
 11671  003C64  ECCC  F023         	call	_LCD_Fill	;wreg free
 11672                           
 11673                           ;class/menu.c: 22:     LCD_DrawText("PARAMETERS",&arialNarrow_12ptFontInfo,A_LEFT,10,50,
      +                          0b0000000000000000,0b1111111111111111);
 11674  003C68  0E9C               	movlw	low STR_10
 11675  003C6A  6E20               	movwf	LCD_DrawText@msg^0,c
 11676  003C6C  0E7F               	movlw	high STR_10
 11677  003C6E  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
 11678  003C70  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 11679  003C72  6E22               	movwf	LCD_DrawText@font^0,c
 11680  003C74  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 11681  003C76  6E23               	movwf	(LCD_DrawText@font+1)^0,c
 11682  003C78  0E00               	movlw	0
 11683  003C7A  6E24               	movwf	LCD_DrawText@align^0,c
 11684  003C7C  0E00               	movlw	0
 11685  003C7E  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 11686  003C80  0E0A               	movlw	10
 11687  003C82  6E25               	movwf	LCD_DrawText@posX^0,c
 11688  003C84  0E00               	movlw	0
 11689  003C86  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
 11690  003C88  0E32               	movlw	50
 11691  003C8A  6E27               	movwf	LCD_DrawText@posY^0,c
 11692  003C8C  0E00               	movlw	0
 11693  003C8E  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
 11694  003C90  0E00               	movlw	0
 11695  003C92  6E29               	movwf	LCD_DrawText@color^0,c
 11696  003C94  0EFF               	movlw	255
 11697  003C96  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
 11698  003C98  682B               	setf	LCD_DrawText@bg_color^0,c
 11699  003C9A  EC83  F00B         	call	_LCD_DrawText	;wreg free
 11700                           
 11701                           ;class/menu.c: 23:     LCD_ButtonDraw(&(g->btnLeaveParam));
 11702  003C9E  0E50               	movlw	80
 11703  003CA0  2445               	addwf	Menu_parametersDraw@g^0,w,c
 11704  003CA2  6E42               	movwf	LCD_ButtonDraw@button^0,c
 11705  003CA4  0E00               	movlw	0
 11706  003CA6  2046               	addwfc	(Menu_parametersDraw@g+1)^0,w,c
 11707  003CA8  6E43               	movwf	(LCD_ButtonDraw@button+1)^0,c
 11708  003CAA  EC27  F007         	call	_LCD_ButtonDraw	;wreg free
 11709                           
 11710                           ;class/menu.c: 24:     g->sldBackLight.value=g->backlight;
 11711  003CAE  C045  FFD9         	movff	Menu_parametersDraw@g,fsr2l
 11712  003CB2  C046  FFDA         	movff	Menu_parametersDraw@g+1,fsr2h
 11713  003CB6  EE10 F091          	lfsr	1,145
 11714  003CBA  5045               	movf	Menu_parametersDraw@g^0,w,c
 11715  003CBC  26E1               	addwf	fsr1l,f,c
 11716  003CBE  5046               	movf	(Menu_parametersDraw@g+1)^0,w,c
 11717  003CC0  22E2               	addwfc	fsr1h,f,c
 11718  003CC2  CFDE FFE6          	movff	postinc2,postinc1
 11719  003CC6  CFDD FFE5          	movff	postdec2,postdec1
 11720                           
 11721                           ;class/menu.c: 25:     LCD_SliderDraw(&(g->sldBackLight));
 11722  003CCA  0E80               	movlw	128
 11723  003CCC  2445               	addwf	Menu_parametersDraw@g^0,w,c
 11724  003CCE  6E37               	movwf	LCD_SliderDraw@slider^0,c
 11725  003CD0  0E00               	movlw	0
 11726  003CD2  2046               	addwfc	(Menu_parametersDraw@g+1)^0,w,c
 11727  003CD4  6E38               	movwf	(LCD_SliderDraw@slider+1)^0,c
 11728  003CD6  ECBC  F01E         	call	_LCD_SliderDraw	;wreg free
 11729                           
 11730                           ;class/menu.c: 26:     LCD_DrawText("LUMINOSITY",&arialNarrow_12ptFontInfo,A_LEFT,50,95,
      +                          0b0000000000000000,0b1111111111111111);
 11731  003CDA  0EA7               	movlw	low STR_11
 11732  003CDC  6E20               	movwf	LCD_DrawText@msg^0,c
 11733  003CDE  0E7F               	movlw	high STR_11
 11734  003CE0  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
 11735  003CE2  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 11736  003CE4  6E22               	movwf	LCD_DrawText@font^0,c
 11737  003CE6  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 11738  003CE8  6E23               	movwf	(LCD_DrawText@font+1)^0,c
 11739  003CEA  0E00               	movlw	0
 11740  003CEC  6E24               	movwf	LCD_DrawText@align^0,c
 11741  003CEE  0E00               	movlw	0
 11742  003CF0  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 11743  003CF2  0E32               	movlw	50
 11744  003CF4  6E25               	movwf	LCD_DrawText@posX^0,c
 11745  003CF6  0E00               	movlw	0
 11746  003CF8  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
 11747  003CFA  0E5F               	movlw	95
 11748  003CFC  6E27               	movwf	LCD_DrawText@posY^0,c
 11749  003CFE  0E00               	movlw	0
 11750  003D00  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
 11751  003D02  0E00               	movlw	0
 11752  003D04  6E29               	movwf	LCD_DrawText@color^0,c
 11753  003D06  0EFF               	movlw	255
 11754  003D08  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
 11755  003D0A  682B               	setf	LCD_DrawText@bg_color^0,c
 11756  003D0C  EC83  F00B         	call	_LCD_DrawText	;wreg free
 11757                           
 11758                           ;class/menu.c: 27:     g->sldLevel.value=g->level;
 11759  003D10  EE20 F006          	lfsr	2,6
 11760  003D14  5045               	movf	Menu_parametersDraw@g^0,w,c
 11761  003D16  26D9               	addwf	fsr2l,f,c
 11762  003D18  5046               	movf	(Menu_parametersDraw@g+1)^0,w,c
 11763  003D1A  22DA               	addwfc	fsr2h,f,c
 11764  003D1C  EE10 F0AA          	lfsr	1,170
 11765  003D20  5045               	movf	Menu_parametersDraw@g^0,w,c
 11766  003D22  26E1               	addwf	fsr1l,f,c
 11767  003D24  5046               	movf	(Menu_parametersDraw@g+1)^0,w,c
 11768  003D26  22E2               	addwfc	fsr1h,f,c
 11769  003D28  CFDE FFE6          	movff	postinc2,postinc1
 11770  003D2C  CFDD FFE5          	movff	postdec2,postdec1
 11771                           
 11772                           ;class/menu.c: 28:     LCD_SliderDraw(&(g->sldLevel));
 11773  003D30  0E99               	movlw	153
 11774  003D32  2445               	addwf	Menu_parametersDraw@g^0,w,c
 11775  003D34  6E37               	movwf	LCD_SliderDraw@slider^0,c
 11776  003D36  0E00               	movlw	0
 11777  003D38  2046               	addwfc	(Menu_parametersDraw@g+1)^0,w,c
 11778  003D3A  6E38               	movwf	(LCD_SliderDraw@slider+1)^0,c
 11779  003D3C  ECBC  F01E         	call	_LCD_SliderDraw	;wreg free
 11780                           
 11781                           ;class/menu.c: 29:     LCD_DrawText("LEVEL",&arialNarrow_12ptFontInfo,A_LEFT,50,145,0b00
      +                          00000000000000,0b1111111111111111);
 11782  003D40  0EF6               	movlw	low STR_12
 11783  003D42  6E20               	movwf	LCD_DrawText@msg^0,c
 11784  003D44  0E7F               	movlw	high STR_12
 11785  003D46  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
 11786  003D48  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 11787  003D4A  6E22               	movwf	LCD_DrawText@font^0,c
 11788  003D4C  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 11789  003D4E  6E23               	movwf	(LCD_DrawText@font+1)^0,c
 11790  003D50  0E00               	movlw	0
 11791  003D52  6E24               	movwf	LCD_DrawText@align^0,c
 11792  003D54  0E00               	movlw	0
 11793  003D56  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 11794  003D58  0E32               	movlw	50
 11795  003D5A  6E25               	movwf	LCD_DrawText@posX^0,c
 11796  003D5C  0E00               	movlw	0
 11797  003D5E  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
 11798  003D60  0E91               	movlw	145
 11799  003D62  6E27               	movwf	LCD_DrawText@posY^0,c
 11800  003D64  0E00               	movlw	0
 11801  003D66  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
 11802  003D68  0E00               	movlw	0
 11803  003D6A  6E29               	movwf	LCD_DrawText@color^0,c
 11804  003D6C  0EFF               	movlw	255
 11805  003D6E  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
 11806  003D70  682B               	setf	LCD_DrawText@bg_color^0,c
 11807  003D72  EC83  F00B         	call	_LCD_DrawText	;wreg free
 11808  003D76  0012               	return		;funcret
 11809  003D78                     __end_of_Menu_parametersDraw:
 11810                           	callstack 0
 11811                           
 11812 ;; *************** function _LCD_SliderDraw *****************
 11813 ;; Defined at:
 11814 ;;		line 371 in file "libraries/lcd_highlevel.c"
 11815 ;; Parameters:    Size  Location     Type
 11816 ;;  slider          2   54[COMRAM] PTR struct .
 11817 ;;		 -> g1(216), 
 11818 ;; Auto vars:     Size  Location     Type
 11819 ;;  y2              2   66[COMRAM] unsigned short 
 11820 ;;  y1              2   64[COMRAM] unsigned short 
 11821 ;;  x2              2   62[COMRAM] unsigned short 
 11822 ;;  x1              2   60[COMRAM] unsigned short 
 11823 ;; Return value:  Size  Location     Type
 11824 ;;                  1    wreg      void 
 11825 ;; Registers used:
 11826 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11827 ;; Tracked objects:
 11828 ;;		On entry : 0/0
 11829 ;;		On exit  : 0/0
 11830 ;;		Unchanged: 0/0
 11831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11832 ;;      Params:         2       0       0       0       0       0       0
 11833 ;;      Locals:         8       0       0       0       0       0       0
 11834 ;;      Temps:          4       0       0       0       0       0       0
 11835 ;;      Totals:        14       0       0       0       0       0       0
 11836 ;;Total ram usage:       14 bytes
 11837 ;; Hardware stack levels used: 1
 11838 ;; Hardware stack levels required when called: 6
 11839 ;; This function calls:
 11840 ;;		_LCD_DrawRect
 11841 ;;		_LCD_SliderUpdate
 11842 ;; This function is called by:
 11843 ;;		_Menu_parametersDraw
 11844 ;; This function uses a non-reentrant model
 11845 ;;
 11846                           
 11847                           	psect	text50
 11848  003D78                     __ptext50:
 11849                           	callstack 0
 11850  003D78                     _LCD_SliderDraw:
 11851                           	callstack 19
 11852                           
 11853                           ;libraries/lcd_highlevel.c: 371: void LCD_SliderDraw(sld_t * slider);libraries/lcd_highl
      +                          evel.c: 372: {;libraries/lcd_highlevel.c: 373:   uint16_t x1,x2,y1,y2;;libraries/lcd_hig
      +                          hlevel.c: 375:   x1 = slider->posX;
 11854                           
 11855                           ;incstack = 0
 11856  003D78  C037  FFD9         	movff	LCD_SliderDraw@slider,fsr2l
 11857  003D7C  C038  FFDA         	movff	LCD_SliderDraw@slider+1,fsr2h
 11858  003D80  CFDE F03D          	movff	postinc2,LCD_SliderDraw@x1
 11859  003D84  CFDD F03E          	movff	postdec2,LCD_SliderDraw@x1+1
 11860                           
 11861                           ;libraries/lcd_highlevel.c: 376:   x2 = slider->posX + slider->width;
 11862  003D88  EE20 F004          	lfsr	2,4
 11863  003D8C  5037               	movf	LCD_SliderDraw@slider^0,w,c
 11864  003D8E  26D9               	addwf	fsr2l,f,c
 11865  003D90  5038               	movf	(LCD_SliderDraw@slider+1)^0,w,c
 11866  003D92  22DA               	addwfc	fsr2h,f,c
 11867  003D94  CFDE F039          	movff	postinc2,??_LCD_SliderDraw
 11868  003D98  CFDD F03A          	movff	postdec2,??_LCD_SliderDraw+1
 11869  003D9C  C037  FFD9         	movff	LCD_SliderDraw@slider,fsr2l
 11870  003DA0  C038  FFDA         	movff	LCD_SliderDraw@slider+1,fsr2h
 11871  003DA4  CFDE F03B          	movff	postinc2,??_LCD_SliderDraw+2
 11872  003DA8  CFDD F03C          	movff	postdec2,??_LCD_SliderDraw+3
 11873  003DAC  5039               	movf	??_LCD_SliderDraw^0,w,c
 11874  003DAE  243B               	addwf	(??_LCD_SliderDraw+2)^0,w,c
 11875  003DB0  6E3F               	movwf	LCD_SliderDraw@x2^0,c
 11876  003DB2  503A               	movf	(??_LCD_SliderDraw+1)^0,w,c
 11877  003DB4  203C               	addwfc	(??_LCD_SliderDraw+3)^0,w,c
 11878  003DB6  6E40               	movwf	(LCD_SliderDraw@x2+1)^0,c
 11879                           
 11880                           ;libraries/lcd_highlevel.c: 377:   y1 = slider->posY;
 11881  003DB8  EE20 F002          	lfsr	2,2
 11882  003DBC  5037               	movf	LCD_SliderDraw@slider^0,w,c
 11883  003DBE  26D9               	addwf	fsr2l,f,c
 11884  003DC0  5038               	movf	(LCD_SliderDraw@slider+1)^0,w,c
 11885  003DC2  22DA               	addwfc	fsr2h,f,c
 11886  003DC4  CFDE F041          	movff	postinc2,LCD_SliderDraw@y1
 11887  003DC8  CFDD F042          	movff	postdec2,LCD_SliderDraw@y1+1
 11888                           
 11889                           ;libraries/lcd_highlevel.c: 378:   y2 = slider->posY + slider->height;
 11890  003DCC  EE20 F006          	lfsr	2,6
 11891  003DD0  5037               	movf	LCD_SliderDraw@slider^0,w,c
 11892  003DD2  26D9               	addwf	fsr2l,f,c
 11893  003DD4  5038               	movf	(LCD_SliderDraw@slider+1)^0,w,c
 11894  003DD6  22DA               	addwfc	fsr2h,f,c
 11895  003DD8  CFDE F039          	movff	postinc2,??_LCD_SliderDraw
 11896  003DDC  CFDD F03A          	movff	postdec2,??_LCD_SliderDraw+1
 11897  003DE0  EE20 F002          	lfsr	2,2
 11898  003DE4  5037               	movf	LCD_SliderDraw@slider^0,w,c
 11899  003DE6  26D9               	addwf	fsr2l,f,c
 11900  003DE8  5038               	movf	(LCD_SliderDraw@slider+1)^0,w,c
 11901  003DEA  22DA               	addwfc	fsr2h,f,c
 11902  003DEC  CFDE F03B          	movff	postinc2,??_LCD_SliderDraw+2
 11903  003DF0  CFDD F03C          	movff	postdec2,??_LCD_SliderDraw+3
 11904  003DF4  5039               	movf	??_LCD_SliderDraw^0,w,c
 11905  003DF6  243B               	addwf	(??_LCD_SliderDraw+2)^0,w,c
 11906  003DF8  6E43               	movwf	LCD_SliderDraw@y2^0,c
 11907  003DFA  503A               	movf	(??_LCD_SliderDraw+1)^0,w,c
 11908  003DFC  203C               	addwfc	(??_LCD_SliderDraw+3)^0,w,c
 11909  003DFE  6E44               	movwf	(LCD_SliderDraw@y2+1)^0,c
 11910                           
 11911                           ;libraries/lcd_highlevel.c: 379:   LCD_DrawRect(x1, y1, x2, y2, 1, slider->bgColor);
 11912  003E00  C03D  F012         	movff	LCD_SliderDraw@x1,LCD_DrawRect@posX1
 11913  003E04  C03E  F013         	movff	LCD_SliderDraw@x1+1,LCD_DrawRect@posX1+1
 11914  003E08  C041  F014         	movff	LCD_SliderDraw@y1,LCD_DrawRect@posY1
 11915  003E0C  C042  F015         	movff	LCD_SliderDraw@y1+1,LCD_DrawRect@posY1+1
 11916  003E10  C03F  F016         	movff	LCD_SliderDraw@x2,LCD_DrawRect@posX2
 11917  003E14  C040  F017         	movff	LCD_SliderDraw@x2+1,LCD_DrawRect@posX2+1
 11918  003E18  C043  F018         	movff	LCD_SliderDraw@y2,LCD_DrawRect@posY2
 11919  003E1C  C044  F019         	movff	LCD_SliderDraw@y2+1,LCD_DrawRect@posY2+1
 11920  003E20  0E01               	movlw	1
 11921  003E22  6E1A               	movwf	LCD_DrawRect@fill^0,c
 11922  003E24  EE20 F00A          	lfsr	2,10
 11923  003E28  5037               	movf	LCD_SliderDraw@slider^0,w,c
 11924  003E2A  26D9               	addwf	fsr2l,f,c
 11925  003E2C  5038               	movf	(LCD_SliderDraw@slider+1)^0,w,c
 11926  003E2E  22DA               	addwfc	fsr2h,f,c
 11927  003E30  CFDE F01B          	movff	postinc2,LCD_DrawRect@color
 11928  003E34  CFDD F01C          	movff	postdec2,LCD_DrawRect@color+1
 11929  003E38  EC7D  F012         	call	_LCD_DrawRect	;wreg free
 11930                           
 11931                           ;libraries/lcd_highlevel.c: 380:   LCD_DrawRect(x1, y1, x2, y2, 0, slider->borderColor);
 11932  003E3C  C03D  F012         	movff	LCD_SliderDraw@x1,LCD_DrawRect@posX1
 11933  003E40  C03E  F013         	movff	LCD_SliderDraw@x1+1,LCD_DrawRect@posX1+1
 11934  003E44  C041  F014         	movff	LCD_SliderDraw@y1,LCD_DrawRect@posY1
 11935  003E48  C042  F015         	movff	LCD_SliderDraw@y1+1,LCD_DrawRect@posY1+1
 11936  003E4C  C03F  F016         	movff	LCD_SliderDraw@x2,LCD_DrawRect@posX2
 11937  003E50  C040  F017         	movff	LCD_SliderDraw@x2+1,LCD_DrawRect@posX2+1
 11938  003E54  C043  F018         	movff	LCD_SliderDraw@y2,LCD_DrawRect@posY2
 11939  003E58  C044  F019         	movff	LCD_SliderDraw@y2+1,LCD_DrawRect@posY2+1
 11940  003E5C  0E00               	movlw	0
 11941  003E5E  6E1A               	movwf	LCD_DrawRect@fill^0,c
 11942  003E60  EE20 F00C          	lfsr	2,12
 11943  003E64  5037               	movf	LCD_SliderDraw@slider^0,w,c
 11944  003E66  26D9               	addwf	fsr2l,f,c
 11945  003E68  5038               	movf	(LCD_SliderDraw@slider+1)^0,w,c
 11946  003E6A  22DA               	addwfc	fsr2h,f,c
 11947  003E6C  CFDE F01B          	movff	postinc2,LCD_DrawRect@color
 11948  003E70  CFDD F01C          	movff	postdec2,LCD_DrawRect@color+1
 11949  003E74  EC7D  F012         	call	_LCD_DrawRect	;wreg free
 11950                           
 11951                           ;libraries/lcd_highlevel.c: 381:   LCD_SliderUpdate(slider);
 11952  003E78  C037  F027         	movff	LCD_SliderDraw@slider,LCD_SliderUpdate@slider
 11953  003E7C  C038  F028         	movff	LCD_SliderDraw@slider+1,LCD_SliderUpdate@slider+1
 11954  003E80  EC82  F009         	call	_LCD_SliderUpdate	;wreg free
 11955  003E84  0012               	return		;funcret
 11956  003E86                     __end_of_LCD_SliderDraw:
 11957                           	callstack 0
 11958                           
 11959 ;; *************** function _LCD_SliderUpdate *****************
 11960 ;; Defined at:
 11961 ;;		line 319 in file "libraries/lcd_highlevel.c"
 11962 ;; Parameters:    Size  Location     Type
 11963 ;;  slider          2   38[COMRAM] PTR struct .
 11964 ;;		 -> g1(216), 
 11965 ;; Auto vars:     Size  Location     Type
 11966 ;;  x1              2   52[COMRAM] unsigned short 
 11967 ;;  y2              2   50[COMRAM] unsigned short 
 11968 ;;  y1              2   48[COMRAM] unsigned short 
 11969 ;;  x2              2   46[COMRAM] unsigned short 
 11970 ;; Return value:  Size  Location     Type
 11971 ;;                  1    wreg      void 
 11972 ;; Registers used:
 11973 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11974 ;; Tracked objects:
 11975 ;;		On entry : 0/0
 11976 ;;		On exit  : 0/0
 11977 ;;		Unchanged: 0/0
 11978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11979 ;;      Params:         2       0       0       0       0       0       0
 11980 ;;      Locals:         8       0       0       0       0       0       0
 11981 ;;      Temps:          6       0       0       0       0       0       0
 11982 ;;      Totals:        16       0       0       0       0       0       0
 11983 ;;Total ram usage:       16 bytes
 11984 ;; Hardware stack levels used: 1
 11985 ;; Hardware stack levels required when called: 5
 11986 ;; This function calls:
 11987 ;;		_LCD_DrawRect
 11988 ;;		___lwdiv
 11989 ;;		___wmul
 11990 ;; This function is called by:
 11991 ;;		_LCD_SliderDraw
 11992 ;;		_gameControllerController
 11993 ;; This function uses a non-reentrant model
 11994 ;;
 11995                           
 11996                           	psect	text51
 11997  001304                     __ptext51:
 11998                           	callstack 0
 11999  001304                     _LCD_SliderUpdate:
 12000                           	callstack 21
 12001                           
 12002                           ;libraries/lcd_highlevel.c: 319: void LCD_SliderUpdate(sld_t * slider);libraries/lcd_hig
      +                          hlevel.c: 320: {;libraries/lcd_highlevel.c: 321:   uint16_t x1,x2,y1,y2;;libraries/lcd_h
      +                          ighlevel.c: 325:   if(slider->cursorWidth != 0)
 12003                           
 12004                           ;incstack = 0
 12005  001304  EE20 F00E          	lfsr	2,14
 12006  001308  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12007  00130A  26D9               	addwf	fsr2l,f,c
 12008  00130C  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12009  00130E  22DA               	addwfc	fsr2h,f,c
 12010  001310  50DE               	movf	postinc2,w,c
 12011  001312  10DE               	iorwf	postinc2,w,c
 12012  001314  B4D8               	btfsc	status,2,c
 12013  001316  D05C               	goto	l8586
 12014                           
 12015                           ;libraries/lcd_highlevel.c: 326:   {;libraries/lcd_highlevel.c: 327:     x1 = slider->po
      +                          sX + 1 + (((slider->width-slider->cursorWidth) * slider->oldValue)/ slider->steps);
 12016  001318  C027  FFD9         	movff	LCD_SliderUpdate@slider,fsr2l
 12017  00131C  C028  FFDA         	movff	LCD_SliderUpdate@slider+1,fsr2h
 12018  001320  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12019  001324  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12020  001328  EE20 F00E          	lfsr	2,14
 12021  00132C  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12022  00132E  26D9               	addwf	fsr2l,f,c
 12023  001330  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12024  001332  22DA               	addwfc	fsr2h,f,c
 12025  001334  CFDE F02B          	movff	postinc2,??_LCD_SliderUpdate+2
 12026  001338  CFDD F02C          	movff	postdec2,??_LCD_SliderUpdate+3
 12027  00133C  EE20 F004          	lfsr	2,4
 12028  001340  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12029  001342  26D9               	addwf	fsr2l,f,c
 12030  001344  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12031  001346  22DA               	addwfc	fsr2h,f,c
 12032  001348  CFDE F02D          	movff	postinc2,??_LCD_SliderUpdate+4
 12033  00134C  CFDD F02E          	movff	postdec2,??_LCD_SliderUpdate+5
 12034  001350  502B               	movf	(??_LCD_SliderUpdate+2)^0,w,c
 12035  001352  5C2D               	subwf	(??_LCD_SliderUpdate+4)^0,w,c
 12036  001354  6E1A               	movwf	___wmul@multiplier^0,c
 12037  001356  502C               	movf	(??_LCD_SliderUpdate+3)^0,w,c
 12038  001358  582E               	subwfb	(??_LCD_SliderUpdate+5)^0,w,c
 12039  00135A  6E1B               	movwf	(___wmul@multiplier+1)^0,c
 12040  00135C  EE20 F013          	lfsr	2,19
 12041  001360  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12042  001362  26D9               	addwf	fsr2l,f,c
 12043  001364  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12044  001366  22DA               	addwfc	fsr2h,f,c
 12045  001368  CFDE F01C          	movff	postinc2,___wmul@multiplicand
 12046  00136C  CFDD F01D          	movff	postdec2,___wmul@multiplicand+1
 12047  001370  ECE2  F02B         	call	___wmul	;wreg free
 12048  001374  C01A  F020         	movff	?___wmul,___lwdiv@dividend
 12049  001378  C01B  F021         	movff	?___wmul+1,___lwdiv@dividend+1
 12050  00137C  EE20 F015          	lfsr	2,21
 12051  001380  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12052  001382  26D9               	addwf	fsr2l,f,c
 12053  001384  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12054  001386  22DA               	addwfc	fsr2h,f,c
 12055  001388  CFDE F022          	movff	postinc2,___lwdiv@divisor
 12056  00138C  CFDD F023          	movff	postdec2,___lwdiv@divisor+1
 12057  001390  EC83  F029         	call	___lwdiv	;wreg free
 12058  001394  5029               	movf	??_LCD_SliderUpdate^0,w,c
 12059  001396  2620               	addwf	?___lwdiv^0,f,c
 12060  001398  502A               	movf	(??_LCD_SliderUpdate+1)^0,w,c
 12061  00139A  2221               	addwfc	(?___lwdiv+1)^0,f,c
 12062  00139C  0E01               	movlw	1
 12063  00139E  2420               	addwf	?___lwdiv^0,w,c
 12064  0013A0  6E35               	movwf	LCD_SliderUpdate@x1^0,c
 12065  0013A2  0E00               	movlw	0
 12066  0013A4  2021               	addwfc	(?___lwdiv+1)^0,w,c
 12067  0013A6  6E36               	movwf	(LCD_SliderUpdate@x1+1)^0,c
 12068                           
 12069                           ;libraries/lcd_highlevel.c: 328:     x2 = x1 + slider->cursorWidth-2;
 12070  0013A8  EE20 F00E          	lfsr	2,14
 12071  0013AC  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12072  0013AE  26D9               	addwf	fsr2l,f,c
 12073  0013B0  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12074  0013B2  22DA               	addwfc	fsr2h,f,c
 12075  0013B4  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12076  0013B8  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12077  0013BC  5035               	movf	LCD_SliderUpdate@x1^0,w,c
 12078  0013BE  2629               	addwf	??_LCD_SliderUpdate^0,f,c
 12079  0013C0  5036               	movf	(LCD_SliderUpdate@x1+1)^0,w,c
 12080  0013C2  222A               	addwfc	(??_LCD_SliderUpdate+1)^0,f,c
 12081  0013C4  0EFE               	movlw	254
 12082  0013C6  2429               	addwf	??_LCD_SliderUpdate^0,w,c
 12083  0013C8  6E2F               	movwf	LCD_SliderUpdate@x2^0,c
 12084  0013CA  0EFF               	movlw	255
 12085  0013CC  202A               	addwfc	(??_LCD_SliderUpdate+1)^0,w,c
 12086  0013CE  D045               	goto	L15
 12087  0013D0                     l8586:
 12088                           
 12089                           ;libraries/lcd_highlevel.c: 333:   {;libraries/lcd_highlevel.c: 334:     x1 = slider->po
      +                          sX + 1;
 12090  0013D0  C027  FFD9         	movff	LCD_SliderUpdate@slider,fsr2l
 12091  0013D4  C028  FFDA         	movff	LCD_SliderUpdate@slider+1,fsr2h
 12092  0013D8  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12093  0013DC  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12094  0013E0  0E01               	movlw	1
 12095  0013E2  2429               	addwf	??_LCD_SliderUpdate^0,w,c
 12096  0013E4  6E35               	movwf	LCD_SliderUpdate@x1^0,c
 12097  0013E6  0E00               	movlw	0
 12098  0013E8  202A               	addwfc	(??_LCD_SliderUpdate+1)^0,w,c
 12099  0013EA  6E36               	movwf	(LCD_SliderUpdate@x1+1)^0,c
 12100                           
 12101                           ;libraries/lcd_highlevel.c: 335:     x2 = slider->posX - 1 + ((slider->width * slider->o
      +                          ldValue)/ slider->steps);
 12102  0013EC  C027  FFD9         	movff	LCD_SliderUpdate@slider,fsr2l
 12103  0013F0  C028  FFDA         	movff	LCD_SliderUpdate@slider+1,fsr2h
 12104  0013F4  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12105  0013F8  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12106  0013FC  EE20 F004          	lfsr	2,4
 12107  001400  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12108  001402  26D9               	addwf	fsr2l,f,c
 12109  001404  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12110  001406  22DA               	addwfc	fsr2h,f,c
 12111  001408  CFDE F01A          	movff	postinc2,___wmul@multiplier
 12112  00140C  CFDD F01B          	movff	postdec2,___wmul@multiplier+1
 12113  001410  EE20 F013          	lfsr	2,19
 12114  001414  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12115  001416  26D9               	addwf	fsr2l,f,c
 12116  001418  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12117  00141A  22DA               	addwfc	fsr2h,f,c
 12118  00141C  CFDE F01C          	movff	postinc2,___wmul@multiplicand
 12119  001420  CFDD F01D          	movff	postdec2,___wmul@multiplicand+1
 12120  001424  ECE2  F02B         	call	___wmul	;wreg free
 12121  001428  C01A  F020         	movff	?___wmul,___lwdiv@dividend
 12122  00142C  C01B  F021         	movff	?___wmul+1,___lwdiv@dividend+1
 12123  001430  EE20 F015          	lfsr	2,21
 12124  001434  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12125  001436  26D9               	addwf	fsr2l,f,c
 12126  001438  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12127  00143A  22DA               	addwfc	fsr2h,f,c
 12128  00143C  CFDE F022          	movff	postinc2,___lwdiv@divisor
 12129  001440  CFDD F023          	movff	postdec2,___lwdiv@divisor+1
 12130  001444  EC83  F029         	call	___lwdiv	;wreg free
 12131  001448  5029               	movf	??_LCD_SliderUpdate^0,w,c
 12132  00144A  2620               	addwf	?___lwdiv^0,f,c
 12133  00144C  502A               	movf	(??_LCD_SliderUpdate+1)^0,w,c
 12134  00144E  2221               	addwfc	(?___lwdiv+1)^0,f,c
 12135  001450  0EFF               	movlw	255
 12136  001452  2420               	addwf	?___lwdiv^0,w,c
 12137  001454  6E2F               	movwf	LCD_SliderUpdate@x2^0,c
 12138  001456  0EFF               	movlw	255
 12139  001458  2021               	addwfc	(?___lwdiv+1)^0,w,c
 12140  00145A                     L15:
 12141  00145A  6E30               	movwf	(LCD_SliderUpdate@x2+1)^0,c
 12142                           
 12143                           ;libraries/lcd_highlevel.c: 336:     y1 = slider->posY + 2;
 12144  00145C  EE20 F002          	lfsr	2,2
 12145  001460  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12146  001462  26D9               	addwf	fsr2l,f,c
 12147  001464  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12148  001466  22DA               	addwfc	fsr2h,f,c
 12149  001468  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12150  00146C  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12151  001470  0E02               	movlw	2
 12152  001472  2429               	addwf	??_LCD_SliderUpdate^0,w,c
 12153  001474  6E31               	movwf	LCD_SliderUpdate@y1^0,c
 12154  001476  0E00               	movlw	0
 12155  001478  202A               	addwfc	(??_LCD_SliderUpdate+1)^0,w,c
 12156  00147A  6E32               	movwf	(LCD_SliderUpdate@y1+1)^0,c
 12157                           
 12158                           ;libraries/lcd_highlevel.c: 337:     y2 = slider->posY + slider->height - 2;
 12159  00147C  EE20 F006          	lfsr	2,6
 12160  001480  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12161  001482  26D9               	addwf	fsr2l,f,c
 12162  001484  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12163  001486  22DA               	addwfc	fsr2h,f,c
 12164  001488  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12165  00148C  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12166  001490  EE20 F002          	lfsr	2,2
 12167  001494  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12168  001496  26D9               	addwf	fsr2l,f,c
 12169  001498  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12170  00149A  22DA               	addwfc	fsr2h,f,c
 12171  00149C  CFDE F02B          	movff	postinc2,??_LCD_SliderUpdate+2
 12172  0014A0  CFDD F02C          	movff	postdec2,??_LCD_SliderUpdate+3
 12173  0014A4  5029               	movf	??_LCD_SliderUpdate^0,w,c
 12174  0014A6  262B               	addwf	(??_LCD_SliderUpdate+2)^0,f,c
 12175  0014A8  502A               	movf	(??_LCD_SliderUpdate+1)^0,w,c
 12176  0014AA  222C               	addwfc	(??_LCD_SliderUpdate+3)^0,f,c
 12177  0014AC  0EFE               	movlw	254
 12178  0014AE  242B               	addwf	(??_LCD_SliderUpdate+2)^0,w,c
 12179  0014B0  6E33               	movwf	LCD_SliderUpdate@y2^0,c
 12180  0014B2  0EFF               	movlw	255
 12181  0014B4  202C               	addwfc	(??_LCD_SliderUpdate+3)^0,w,c
 12182  0014B6  6E34               	movwf	(LCD_SliderUpdate@y2+1)^0,c
 12183                           
 12184                           ;libraries/lcd_highlevel.c: 339:   LCD_DrawRect(x1,
 12185  0014B8  C035  F012         	movff	LCD_SliderUpdate@x1,LCD_DrawRect@posX1
 12186  0014BC  C036  F013         	movff	LCD_SliderUpdate@x1+1,LCD_DrawRect@posX1+1
 12187  0014C0  C031  F014         	movff	LCD_SliderUpdate@y1,LCD_DrawRect@posY1
 12188  0014C4  C032  F015         	movff	LCD_SliderUpdate@y1+1,LCD_DrawRect@posY1+1
 12189  0014C8  C02F  F016         	movff	LCD_SliderUpdate@x2,LCD_DrawRect@posX2
 12190  0014CC  C030  F017         	movff	LCD_SliderUpdate@x2+1,LCD_DrawRect@posX2+1
 12191  0014D0  C033  F018         	movff	LCD_SliderUpdate@y2,LCD_DrawRect@posY2
 12192  0014D4  C034  F019         	movff	LCD_SliderUpdate@y2+1,LCD_DrawRect@posY2+1
 12193  0014D8  0E01               	movlw	1
 12194  0014DA  6E1A               	movwf	LCD_DrawRect@fill^0,c
 12195  0014DC  EE20 F00A          	lfsr	2,10
 12196  0014E0  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12197  0014E2  26D9               	addwf	fsr2l,f,c
 12198  0014E4  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12199  0014E6  22DA               	addwfc	fsr2h,f,c
 12200  0014E8  CFDE F01B          	movff	postinc2,LCD_DrawRect@color
 12201  0014EC  CFDD F01C          	movff	postdec2,LCD_DrawRect@color+1
 12202  0014F0  EC7D  F012         	call	_LCD_DrawRect	;wreg free
 12203                           
 12204                           ;libraries/lcd_highlevel.c: 344:   slider->oldValue = slider->value;
 12205  0014F4  EE20 F011          	lfsr	2,17
 12206  0014F8  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12207  0014FA  26D9               	addwf	fsr2l,f,c
 12208  0014FC  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12209  0014FE  22DA               	addwfc	fsr2h,f,c
 12210  001500  EE10 F013          	lfsr	1,19
 12211  001504  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12212  001506  26E1               	addwf	fsr1l,f,c
 12213  001508  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12214  00150A  22E2               	addwfc	fsr1h,f,c
 12215  00150C  CFDE FFE6          	movff	postinc2,postinc1
 12216  001510  CFDD FFE5          	movff	postdec2,postdec1
 12217                           
 12218                           ;libraries/lcd_highlevel.c: 347:   if(slider->cursorWidth == 0)
 12219  001514  EE20 F00E          	lfsr	2,14
 12220  001518  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12221  00151A  26D9               	addwf	fsr2l,f,c
 12222  00151C  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12223  00151E  22DA               	addwfc	fsr2h,f,c
 12224  001520  50DE               	movf	postinc2,w,c
 12225  001522  10DE               	iorwf	postinc2,w,c
 12226  001524  A4D8               	btfss	status,2,c
 12227  001526  D046               	goto	l8608
 12228                           
 12229                           ;libraries/lcd_highlevel.c: 348:   {;libraries/lcd_highlevel.c: 349:     x1 = slider->po
      +                          sX + 1;
 12230  001528  C027  FFD9         	movff	LCD_SliderUpdate@slider,fsr2l
 12231  00152C  C028  FFDA         	movff	LCD_SliderUpdate@slider+1,fsr2h
 12232  001530  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12233  001534  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12234  001538  0E01               	movlw	1
 12235  00153A  2429               	addwf	??_LCD_SliderUpdate^0,w,c
 12236  00153C  6E35               	movwf	LCD_SliderUpdate@x1^0,c
 12237  00153E  0E00               	movlw	0
 12238  001540  202A               	addwfc	(??_LCD_SliderUpdate+1)^0,w,c
 12239  001542  6E36               	movwf	(LCD_SliderUpdate@x1+1)^0,c
 12240                           
 12241                           ;libraries/lcd_highlevel.c: 350:     x2 = slider->posX - 1 + ((slider->width * slider->v
      +                          alue)/ slider->steps);
 12242  001544  C027  FFD9         	movff	LCD_SliderUpdate@slider,fsr2l
 12243  001548  C028  FFDA         	movff	LCD_SliderUpdate@slider+1,fsr2h
 12244  00154C  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12245  001550  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12246  001554  EE20 F004          	lfsr	2,4
 12247  001558  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12248  00155A  26D9               	addwf	fsr2l,f,c
 12249  00155C  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12250  00155E  22DA               	addwfc	fsr2h,f,c
 12251  001560  CFDE F01A          	movff	postinc2,___wmul@multiplier
 12252  001564  CFDD F01B          	movff	postdec2,___wmul@multiplier+1
 12253  001568  EE20 F011          	lfsr	2,17
 12254  00156C  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12255  00156E  26D9               	addwf	fsr2l,f,c
 12256  001570  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12257  001572  22DA               	addwfc	fsr2h,f,c
 12258  001574  CFDE F01C          	movff	postinc2,___wmul@multiplicand
 12259  001578  CFDD F01D          	movff	postdec2,___wmul@multiplicand+1
 12260  00157C  ECE2  F02B         	call	___wmul	;wreg free
 12261  001580  C01A  F020         	movff	?___wmul,___lwdiv@dividend
 12262  001584  C01B  F021         	movff	?___wmul+1,___lwdiv@dividend+1
 12263  001588  EE20 F015          	lfsr	2,21
 12264  00158C  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12265  00158E  26D9               	addwf	fsr2l,f,c
 12266  001590  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12267  001592  22DA               	addwfc	fsr2h,f,c
 12268  001594  CFDE F022          	movff	postinc2,___lwdiv@divisor
 12269  001598  CFDD F023          	movff	postdec2,___lwdiv@divisor+1
 12270  00159C  EC83  F029         	call	___lwdiv	;wreg free
 12271  0015A0  5029               	movf	??_LCD_SliderUpdate^0,w,c
 12272  0015A2  2620               	addwf	?___lwdiv^0,f,c
 12273  0015A4  502A               	movf	(??_LCD_SliderUpdate+1)^0,w,c
 12274  0015A6  2221               	addwfc	(?___lwdiv+1)^0,f,c
 12275  0015A8  0EFF               	movlw	255
 12276  0015AA  2420               	addwf	?___lwdiv^0,w,c
 12277  0015AC  6E2F               	movwf	LCD_SliderUpdate@x2^0,c
 12278  0015AE  0EFF               	movlw	255
 12279  0015B0  2021               	addwfc	(?___lwdiv+1)^0,w,c
 12280  0015B2  D05B               	goto	L16
 12281  0015B4                     l8608:
 12282                           
 12283                           ;libraries/lcd_highlevel.c: 357:   {;libraries/lcd_highlevel.c: 358:     x1 = slider->po
      +                          sX + 1 + (((slider->width-slider->cursorWidth) * slider->value)/ slider->steps);
 12284  0015B4  C027  FFD9         	movff	LCD_SliderUpdate@slider,fsr2l
 12285  0015B8  C028  FFDA         	movff	LCD_SliderUpdate@slider+1,fsr2h
 12286  0015BC  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12287  0015C0  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12288  0015C4  EE20 F00E          	lfsr	2,14
 12289  0015C8  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12290  0015CA  26D9               	addwf	fsr2l,f,c
 12291  0015CC  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12292  0015CE  22DA               	addwfc	fsr2h,f,c
 12293  0015D0  CFDE F02B          	movff	postinc2,??_LCD_SliderUpdate+2
 12294  0015D4  CFDD F02C          	movff	postdec2,??_LCD_SliderUpdate+3
 12295  0015D8  EE20 F004          	lfsr	2,4
 12296  0015DC  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12297  0015DE  26D9               	addwf	fsr2l,f,c
 12298  0015E0  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12299  0015E2  22DA               	addwfc	fsr2h,f,c
 12300  0015E4  CFDE F02D          	movff	postinc2,??_LCD_SliderUpdate+4
 12301  0015E8  CFDD F02E          	movff	postdec2,??_LCD_SliderUpdate+5
 12302  0015EC  502B               	movf	(??_LCD_SliderUpdate+2)^0,w,c
 12303  0015EE  5C2D               	subwf	(??_LCD_SliderUpdate+4)^0,w,c
 12304  0015F0  6E1A               	movwf	___wmul@multiplier^0,c
 12305  0015F2  502C               	movf	(??_LCD_SliderUpdate+3)^0,w,c
 12306  0015F4  582E               	subwfb	(??_LCD_SliderUpdate+5)^0,w,c
 12307  0015F6  6E1B               	movwf	(___wmul@multiplier+1)^0,c
 12308  0015F8  EE20 F011          	lfsr	2,17
 12309  0015FC  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12310  0015FE  26D9               	addwf	fsr2l,f,c
 12311  001600  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12312  001602  22DA               	addwfc	fsr2h,f,c
 12313  001604  CFDE F01C          	movff	postinc2,___wmul@multiplicand
 12314  001608  CFDD F01D          	movff	postdec2,___wmul@multiplicand+1
 12315  00160C  ECE2  F02B         	call	___wmul	;wreg free
 12316  001610  C01A  F020         	movff	?___wmul,___lwdiv@dividend
 12317  001614  C01B  F021         	movff	?___wmul+1,___lwdiv@dividend+1
 12318  001618  EE20 F015          	lfsr	2,21
 12319  00161C  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12320  00161E  26D9               	addwf	fsr2l,f,c
 12321  001620  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12322  001622  22DA               	addwfc	fsr2h,f,c
 12323  001624  CFDE F022          	movff	postinc2,___lwdiv@divisor
 12324  001628  CFDD F023          	movff	postdec2,___lwdiv@divisor+1
 12325  00162C  EC83  F029         	call	___lwdiv	;wreg free
 12326  001630  5029               	movf	??_LCD_SliderUpdate^0,w,c
 12327  001632  2620               	addwf	?___lwdiv^0,f,c
 12328  001634  502A               	movf	(??_LCD_SliderUpdate+1)^0,w,c
 12329  001636  2221               	addwfc	(?___lwdiv+1)^0,f,c
 12330  001638  0E01               	movlw	1
 12331  00163A  2420               	addwf	?___lwdiv^0,w,c
 12332  00163C  6E35               	movwf	LCD_SliderUpdate@x1^0,c
 12333  00163E  0E00               	movlw	0
 12334  001640  2021               	addwfc	(?___lwdiv+1)^0,w,c
 12335  001642  6E36               	movwf	(LCD_SliderUpdate@x1+1)^0,c
 12336                           
 12337                           ;libraries/lcd_highlevel.c: 359:     x2 = x1 + slider->cursorWidth-2;
 12338  001644  EE20 F00E          	lfsr	2,14
 12339  001648  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12340  00164A  26D9               	addwf	fsr2l,f,c
 12341  00164C  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12342  00164E  22DA               	addwfc	fsr2h,f,c
 12343  001650  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12344  001654  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12345  001658  5035               	movf	LCD_SliderUpdate@x1^0,w,c
 12346  00165A  2629               	addwf	??_LCD_SliderUpdate^0,f,c
 12347  00165C  5036               	movf	(LCD_SliderUpdate@x1+1)^0,w,c
 12348  00165E  222A               	addwfc	(??_LCD_SliderUpdate+1)^0,f,c
 12349  001660  0EFE               	movlw	254
 12350  001662  2429               	addwf	??_LCD_SliderUpdate^0,w,c
 12351  001664  6E2F               	movwf	LCD_SliderUpdate@x2^0,c
 12352  001666  0EFF               	movlw	255
 12353  001668  202A               	addwfc	(??_LCD_SliderUpdate+1)^0,w,c
 12354  00166A                     L16:
 12355  00166A  6E30               	movwf	(LCD_SliderUpdate@x2+1)^0,c
 12356                           
 12357                           ;libraries/lcd_highlevel.c: 360:     y1 = slider->posY + 2;
 12358  00166C  EE20 F002          	lfsr	2,2
 12359  001670  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12360  001672  26D9               	addwf	fsr2l,f,c
 12361  001674  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12362  001676  22DA               	addwfc	fsr2h,f,c
 12363  001678  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12364  00167C  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12365  001680  0E02               	movlw	2
 12366  001682  2429               	addwf	??_LCD_SliderUpdate^0,w,c
 12367  001684  6E31               	movwf	LCD_SliderUpdate@y1^0,c
 12368  001686  0E00               	movlw	0
 12369  001688  202A               	addwfc	(??_LCD_SliderUpdate+1)^0,w,c
 12370  00168A  6E32               	movwf	(LCD_SliderUpdate@y1+1)^0,c
 12371                           
 12372                           ;libraries/lcd_highlevel.c: 361:     y2 = slider->posY + slider->height - 2;
 12373  00168C  EE20 F006          	lfsr	2,6
 12374  001690  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12375  001692  26D9               	addwf	fsr2l,f,c
 12376  001694  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12377  001696  22DA               	addwfc	fsr2h,f,c
 12378  001698  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12379  00169C  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12380  0016A0  EE20 F002          	lfsr	2,2
 12381  0016A4  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12382  0016A6  26D9               	addwf	fsr2l,f,c
 12383  0016A8  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12384  0016AA  22DA               	addwfc	fsr2h,f,c
 12385  0016AC  CFDE F02B          	movff	postinc2,??_LCD_SliderUpdate+2
 12386  0016B0  CFDD F02C          	movff	postdec2,??_LCD_SliderUpdate+3
 12387  0016B4  5029               	movf	??_LCD_SliderUpdate^0,w,c
 12388  0016B6  262B               	addwf	(??_LCD_SliderUpdate+2)^0,f,c
 12389  0016B8  502A               	movf	(??_LCD_SliderUpdate+1)^0,w,c
 12390  0016BA  222C               	addwfc	(??_LCD_SliderUpdate+3)^0,f,c
 12391  0016BC  0EFE               	movlw	254
 12392  0016BE  242B               	addwf	(??_LCD_SliderUpdate+2)^0,w,c
 12393  0016C0  6E33               	movwf	LCD_SliderUpdate@y2^0,c
 12394  0016C2  0EFF               	movlw	255
 12395  0016C4  202C               	addwfc	(??_LCD_SliderUpdate+3)^0,w,c
 12396  0016C6  6E34               	movwf	(LCD_SliderUpdate@y2+1)^0,c
 12397                           
 12398                           ;libraries/lcd_highlevel.c: 363:   LCD_DrawRect(x1, y1, x2, y2, 1, slider->sldColor);
 12399  0016C8  C035  F012         	movff	LCD_SliderUpdate@x1,LCD_DrawRect@posX1
 12400  0016CC  C036  F013         	movff	LCD_SliderUpdate@x1+1,LCD_DrawRect@posX1+1
 12401  0016D0  C031  F014         	movff	LCD_SliderUpdate@y1,LCD_DrawRect@posY1
 12402  0016D4  C032  F015         	movff	LCD_SliderUpdate@y1+1,LCD_DrawRect@posY1+1
 12403  0016D8  C02F  F016         	movff	LCD_SliderUpdate@x2,LCD_DrawRect@posX2
 12404  0016DC  C030  F017         	movff	LCD_SliderUpdate@x2+1,LCD_DrawRect@posX2+1
 12405  0016E0  C033  F018         	movff	LCD_SliderUpdate@y2,LCD_DrawRect@posY2
 12406  0016E4  C034  F019         	movff	LCD_SliderUpdate@y2+1,LCD_DrawRect@posY2+1
 12407  0016E8  0E01               	movlw	1
 12408  0016EA  6E1A               	movwf	LCD_DrawRect@fill^0,c
 12409  0016EC  EE20 F008          	lfsr	2,8
 12410  0016F0  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12411  0016F2  26D9               	addwf	fsr2l,f,c
 12412  0016F4  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12413  0016F6  22DA               	addwfc	fsr2h,f,c
 12414  0016F8  CFDE F01B          	movff	postinc2,LCD_DrawRect@color
 12415  0016FC  CFDD F01C          	movff	postdec2,LCD_DrawRect@color+1
 12416  001700  EC7D  F012         	call	_LCD_DrawRect	;wreg free
 12417  001704  0012               	return		;funcret
 12418  001706                     __end_of_LCD_SliderUpdate:
 12419                           	callstack 0
 12420                           
 12421 ;; *************** function _Menu_endGame *****************
 12422 ;; Defined at:
 12423 ;;		line 48 in file "class/menu.c"
 12424 ;; Parameters:    Size  Location     Type
 12425 ;;  g               2   67[COMRAM] PTR struct GameParameter
 12426 ;;		 -> g1(216), 
 12427 ;; Auto vars:     Size  Location     Type
 12428 ;;		None
 12429 ;; Return value:  Size  Location     Type
 12430 ;;                  1    wreg      void 
 12431 ;; Registers used:
 12432 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12433 ;; Tracked objects:
 12434 ;;		On entry : 0/0
 12435 ;;		On exit  : 0/0
 12436 ;;		Unchanged: 0/0
 12437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12438 ;;      Params:         2       0       0       0       0       0       0
 12439 ;;      Locals:         0       0       0       0       0       0       0
 12440 ;;      Temps:          0       2       0       0       0       0       0
 12441 ;;      Totals:         2       2       0       0       0       0       0
 12442 ;;Total ram usage:        4 bytes
 12443 ;; Hardware stack levels used: 1
 12444 ;; Hardware stack levels required when called: 7
 12445 ;; This function calls:
 12446 ;;		_LCD_ButtonDraw
 12447 ;;		_LCD_DrawText
 12448 ;;		_LCD_Fill
 12449 ;; This function is called by:
 12450 ;;		_displayController
 12451 ;; This function uses a non-reentrant model
 12452 ;;
 12453                           
 12454                           	psect	text52
 12455  004AE6                     __ptext52:
 12456                           	callstack 0
 12457  004AE6                     _Menu_endGame:
 12458                           	callstack 19
 12459                           
 12460                           ;class/menu.c: 48: void Menu_endGame(GameParameters* g);class/menu.c: 49: {;class/menu.c
      +                          : 50:     LCD_Fill(0b0000000000000000);
 12461                           
 12462                           ;incstack = 0
 12463  004AE6  0E00               	movlw	0
 12464  004AE8  6E13               	movwf	(LCD_Fill@color+1)^0,c
 12465  004AEA  0E00               	movlw	0
 12466  004AEC  6E12               	movwf	LCD_Fill@color^0,c
 12467  004AEE  ECCC  F023         	call	_LCD_Fill	;wreg free
 12468                           
 12469                           ;class/menu.c: 51:     LCD_ButtonDraw(&(g->btnNewGame));
 12470  004AF2  0E68               	movlw	104
 12471  004AF4  2444               	addwf	Menu_endGame@g^0,w,c
 12472  004AF6  6E42               	movwf	LCD_ButtonDraw@button^0,c
 12473  004AF8  0E00               	movlw	0
 12474  004AFA  2045               	addwfc	(Menu_endGame@g+1)^0,w,c
 12475  004AFC  6E43               	movwf	(LCD_ButtonDraw@button+1)^0,c
 12476  004AFE  EC27  F007         	call	_LCD_ButtonDraw	;wreg free
 12477                           
 12478                           ;class/menu.c: 53:     if(g->s1.homeScore==0)
 12479  004B02  EE20 F0D2          	lfsr	2,210
 12480  004B06  5044               	movf	Menu_endGame@g^0,w,c
 12481  004B08  26D9               	addwf	fsr2l,f,c
 12482  004B0A  5045               	movf	(Menu_endGame@g+1)^0,w,c
 12483  004B0C  22DA               	addwfc	fsr2h,f,c
 12484  004B0E  50DE               	movf	postinc2,w,c
 12485  004B10  10DE               	iorwf	postinc2,w,c
 12486  004B12  A4D8               	btfss	status,2,c
 12487  004B14  D01C               	goto	l9086
 12488                           
 12489                           ;class/menu.c: 54:     {;class/menu.c: 55:         LCD_DrawText("PLAYER 2 WIN",&arialNar
      +                          row_12ptFontInfo,A_CENTER,100,50,0b1111111111111111,0b0000000000000000);
 12490  004B16  0E8F               	movlw	low STR_13
 12491  004B18  6E20               	movwf	LCD_DrawText@msg^0,c
 12492  004B1A  0E7F               	movlw	high STR_13
 12493  004B1C  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
 12494  004B1E  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 12495  004B20  6E22               	movwf	LCD_DrawText@font^0,c
 12496  004B22  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 12497  004B24  6E23               	movwf	(LCD_DrawText@font+1)^0,c
 12498  004B26  0E02               	movlw	2
 12499  004B28  6E24               	movwf	LCD_DrawText@align^0,c
 12500  004B2A  0E00               	movlw	0
 12501  004B2C  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 12502  004B2E  0E64               	movlw	100
 12503  004B30  6E25               	movwf	LCD_DrawText@posX^0,c
 12504  004B32  0E00               	movlw	0
 12505  004B34  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
 12506  004B36  0E32               	movlw	50
 12507  004B38  6E27               	movwf	LCD_DrawText@posY^0,c
 12508  004B3A  0EFF               	movlw	255
 12509  004B3C  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
 12510  004B3E  6829               	setf	LCD_DrawText@color^0,c
 12511  004B40  0E00               	movlw	0
 12512  004B42  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
 12513  004B44  0E00               	movlw	0
 12514  004B46  6E2B               	movwf	LCD_DrawText@bg_color^0,c
 12515  004B48  EC83  F00B         	call	_LCD_DrawText	;wreg free
 12516                           
 12517                           ;class/menu.c: 56:     }
 12518  004B4C  0012               	return	
 12519  004B4E                     l9086:
 12520                           
 12521                           ;class/menu.c: 58:     {;class/menu.c: 59:         LCD_DrawText("PLAYER 1 WIN",&arialNar
      +                          row_12ptFontInfo,A_CENTER,100,50,0b1111111111111111,0b0000000000000000);
 12522  004B4E  0E82               	movlw	low STR_14
 12523  004B50  6E20               	movwf	LCD_DrawText@msg^0,c
 12524  004B52  0E7F               	movlw	high STR_14
 12525  004B54  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
 12526  004B56  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 12527  004B58  6E22               	movwf	LCD_DrawText@font^0,c
 12528  004B5A  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 12529  004B5C  6E23               	movwf	(LCD_DrawText@font+1)^0,c
 12530  004B5E  0E02               	movlw	2
 12531  004B60  6E24               	movwf	LCD_DrawText@align^0,c
 12532  004B62  0E00               	movlw	0
 12533  004B64  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 12534  004B66  0E64               	movlw	100
 12535  004B68  6E25               	movwf	LCD_DrawText@posX^0,c
 12536  004B6A  0E00               	movlw	0
 12537  004B6C  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
 12538  004B6E  0E32               	movlw	50
 12539  004B70  6E27               	movwf	LCD_DrawText@posY^0,c
 12540  004B72  0EFF               	movlw	255
 12541  004B74  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
 12542  004B76  6829               	setf	LCD_DrawText@color^0,c
 12543  004B78  0E00               	movlw	0
 12544  004B7A  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
 12545  004B7C  0E00               	movlw	0
 12546  004B7E  6E2B               	movwf	LCD_DrawText@bg_color^0,c
 12547  004B80  EC83  F00B         	call	_LCD_DrawText	;wreg free
 12548  004B84  0012               	return		;funcret
 12549  004B86                     __end_of_Menu_endGame:
 12550                           	callstack 0
 12551                           
 12552 ;; *************** function _LCD_ButtonDraw *****************
 12553 ;; Defined at:
 12554 ;;		line 462 in file "libraries/lcd_highlevel.c"
 12555 ;; Parameters:    Size  Location     Type
 12556 ;;  button          2   65[COMRAM] PTR struct .
 12557 ;;		 -> g1(216), 
 12558 ;; Auto vars:     Size  Location     Type
 12559 ;;  bmpPtr          2   56[BANK0 ] PTR struct .
 12560 ;;		 -> STR_8(9), STR_7(2), STR_6(9), STR_5(9), 
 12561 ;;		 -> STR_4(11), 
 12562 ;;  yText           2   53[BANK0 ] unsigned short 
 12563 ;;  xText           2   51[BANK0 ] unsigned short 
 12564 ;;  y2              2   49[BANK0 ] unsigned short 
 12565 ;;  y1              2   47[BANK0 ] unsigned short 
 12566 ;;  x2              2   45[BANK0 ] unsigned short 
 12567 ;;  x1              2   43[BANK0 ] unsigned short 
 12568 ;;  width           2   41[BANK0 ] unsigned short 
 12569 ;;  i               1   55[BANK0 ] unsigned char 
 12570 ;;  tempChar        1   40[BANK0 ] unsigned char 
 12571 ;; Return value:  Size  Location     Type
 12572 ;;                  1    wreg      void 
 12573 ;; Registers used:
 12574 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12575 ;; Tracked objects:
 12576 ;;		On entry : 0/0
 12577 ;;		On exit  : 0/0
 12578 ;;		Unchanged: 0/0
 12579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12580 ;;      Params:         2       0       0       0       0       0       0
 12581 ;;      Locals:         0      18       0       0       0       0       0
 12582 ;;      Temps:          0      12       0       0       0       0       0
 12583 ;;      Totals:         2      30       0       0       0       0       0
 12584 ;;Total ram usage:       32 bytes
 12585 ;; Hardware stack levels used: 1
 12586 ;; Hardware stack levels required when called: 6
 12587 ;; This function calls:
 12588 ;;		_LCD_Bitmap
 12589 ;;		_LCD_ButtonUpdate
 12590 ;;		_LCD_DrawRect
 12591 ;;		_LCD_DrawText
 12592 ;;		_strlen
 12593 ;; This function is called by:
 12594 ;;		_Menu_welcomeDraw
 12595 ;;		_Menu_parametersDraw
 12596 ;;		_Menu_endGame
 12597 ;; This function uses a non-reentrant model
 12598 ;;
 12599                           
 12600                           	psect	text53
 12601  000E4E                     __ptext53:
 12602                           	callstack 0
 12603  000E4E                     _LCD_ButtonDraw:
 12604                           	callstack 19
 12605                           
 12606                           ;libraries/lcd_highlevel.c: 462: void LCD_ButtonDraw(btn_t * button);libraries/lcd_highl
      +                          evel.c: 463: {;libraries/lcd_highlevel.c: 464:   uint16_t x1,x2,y1,y2;;libraries/lcd_hig
      +                          hlevel.c: 465:   uint16_t xText,yText;;libraries/lcd_highlevel.c: 466:   uint8_t i, temp
      +                          Char;;libraries/lcd_highlevel.c: 467:   uint16_t width=0;
 12607                           
 12608                           ;incstack = 0
 12609  000E4E  0E00               	movlw	0
 12610  000E50  0100               	movlb	0	; () banked
 12611  000E52  6F8A               	movwf	(LCD_ButtonDraw@width+1)& (0+255),b
 12612  000E54  0E00               	movlw	0
 12613  000E56  6F89               	movwf	LCD_ButtonDraw@width& (0+255),b
 12614                           
 12615                           ; BSR set to: 0
 12616                           ;libraries/lcd_highlevel.c: 468:   BMP_STRUCT *bmpPtr;;libraries/lcd_highlevel.c: 470:  
      +                           x1 = button->posX;
 12617  000E58  C042  FFD9         	movff	LCD_ButtonDraw@button,fsr2l
 12618  000E5C  C043  FFDA         	movff	LCD_ButtonDraw@button+1,fsr2h
 12619  000E60  CFDE F08B          	movff	postinc2,LCD_ButtonDraw@x1
 12620  000E64  CFDD F08C          	movff	postdec2,LCD_ButtonDraw@x1+1
 12621                           
 12622                           ; BSR set to: 0
 12623                           ;libraries/lcd_highlevel.c: 471:   x2 = button->posX + button->width;
 12624  000E68  EE20 F004          	lfsr	2,4
 12625  000E6C  5042               	movf	LCD_ButtonDraw@button^0,w,c
 12626  000E6E  26D9               	addwf	fsr2l,f,c
 12627  000E70  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 12628  000E72  22DA               	addwfc	fsr2h,f,c
 12629  000E74  CFDE F07C          	movff	postinc2,??_LCD_ButtonDraw
 12630  000E78  CFDD F07D          	movff	postdec2,??_LCD_ButtonDraw+1
 12631  000E7C  C042  FFD9         	movff	LCD_ButtonDraw@button,fsr2l
 12632  000E80  C043  FFDA         	movff	LCD_ButtonDraw@button+1,fsr2h
 12633  000E84  CFDE F07E          	movff	postinc2,??_LCD_ButtonDraw+2
 12634  000E88  CFDD F07F          	movff	postdec2,??_LCD_ButtonDraw+3
 12635  000E8C  517C               	movf	??_LCD_ButtonDraw& (0+255),w,b
 12636  000E8E  257E               	addwf	(??_LCD_ButtonDraw+2)& (0+255),w,b
 12637  000E90  6F8D               	movwf	LCD_ButtonDraw@x2& (0+255),b
 12638  000E92  517D               	movf	(??_LCD_ButtonDraw+1)& (0+255),w,b
 12639  000E94  217F               	addwfc	(??_LCD_ButtonDraw+3)& (0+255),w,b
 12640  000E96  6F8E               	movwf	(LCD_ButtonDraw@x2+1)& (0+255),b
 12641                           
 12642                           ; BSR set to: 0
 12643                           ;libraries/lcd_highlevel.c: 472:   y1 = button->posY;
 12644  000E98  EE20 F002          	lfsr	2,2
 12645  000E9C  5042               	movf	LCD_ButtonDraw@button^0,w,c
 12646  000E9E  26D9               	addwf	fsr2l,f,c
 12647  000EA0  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 12648  000EA2  22DA               	addwfc	fsr2h,f,c
 12649  000EA4  CFDE F08F          	movff	postinc2,LCD_ButtonDraw@y1
 12650  000EA8  CFDD F090          	movff	postdec2,LCD_ButtonDraw@y1+1
 12651                           
 12652                           ; BSR set to: 0
 12653                           ;libraries/lcd_highlevel.c: 473:   y2 = button->posY + button->height;
 12654  000EAC  EE20 F006          	lfsr	2,6
 12655  000EB0  5042               	movf	LCD_ButtonDraw@button^0,w,c
 12656  000EB2  26D9               	addwf	fsr2l,f,c
 12657  000EB4  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 12658  000EB6  22DA               	addwfc	fsr2h,f,c
 12659  000EB8  CFDE F07C          	movff	postinc2,??_LCD_ButtonDraw
 12660  000EBC  CFDD F07D          	movff	postdec2,??_LCD_ButtonDraw+1
 12661  000EC0  EE20 F002          	lfsr	2,2
 12662  000EC4  5042               	movf	LCD_ButtonDraw@button^0,w,c
 12663  000EC6  26D9               	addwf	fsr2l,f,c
 12664  000EC8  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 12665  000ECA  22DA               	addwfc	fsr2h,f,c
 12666  000ECC  CFDE F07E          	movff	postinc2,??_LCD_ButtonDraw+2
 12667  000ED0  CFDD F07F          	movff	postdec2,??_LCD_ButtonDraw+3
 12668  000ED4  517C               	movf	??_LCD_ButtonDraw& (0+255),w,b
 12669  000ED6  257E               	addwf	(??_LCD_ButtonDraw+2)& (0+255),w,b
 12670  000ED8  6F91               	movwf	LCD_ButtonDraw@y2& (0+255),b
 12671  000EDA  517D               	movf	(??_LCD_ButtonDraw+1)& (0+255),w,b
 12672  000EDC  217F               	addwfc	(??_LCD_ButtonDraw+3)& (0+255),w,b
 12673  000EDE  6F92               	movwf	(LCD_ButtonDraw@y2+1)& (0+255),b
 12674                           
 12675                           ; BSR set to: 0
 12676                           ;libraries/lcd_highlevel.c: 474:   if(button->bgColor != button->txtColor)
 12677  000EE0  EE20 F008          	lfsr	2,8
 12678  000EE4  5042               	movf	LCD_ButtonDraw@button^0,w,c
 12679  000EE6  26D9               	addwf	fsr2l,f,c
 12680  000EE8  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 12681  000EEA  22DA               	addwfc	fsr2h,f,c
 12682  000EEC  EE10 F00A          	lfsr	1,10
 12683  000EF0  5042               	movf	LCD_ButtonDraw@button^0,w,c
 12684  000EF2  26E1               	addwf	fsr1l,f,c
 12685  000EF4  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 12686  000EF6  22E2               	addwfc	fsr1h,f,c
 12687  000EF8  50DE               	movf	postinc2,w,c
 12688  000EFA  18E6               	xorwf	postinc1,w,c
 12689  000EFC  E104               	bnz	u6450
 12690  000EFE  50DE               	movf	postinc2,w,c
 12691  000F00  18E6               	xorwf	postinc1,w,c
 12692  000F02  B4D8               	btfsc	status,2,c
 12693  000F04  D03C               	goto	l8932
 12694  000F06                     u6450:
 12695                           
 12696                           ; BSR set to: 0
 12697                           ;libraries/lcd_highlevel.c: 475:   {;libraries/lcd_highlevel.c: 476:     LCD_DrawRect(x1
      +                          , y1, x2, y2, 1, button->bgColor);
 12698  000F06  C08B  F012         	movff	LCD_ButtonDraw@x1,LCD_DrawRect@posX1
 12699  000F0A  C08C  F013         	movff	LCD_ButtonDraw@x1+1,LCD_DrawRect@posX1+1
 12700  000F0E  C08F  F014         	movff	LCD_ButtonDraw@y1,LCD_DrawRect@posY1
 12701  000F12  C090  F015         	movff	LCD_ButtonDraw@y1+1,LCD_DrawRect@posY1+1
 12702  000F16  C08D  F016         	movff	LCD_ButtonDraw@x2,LCD_DrawRect@posX2
 12703  000F1A  C08E  F017         	movff	LCD_ButtonDraw@x2+1,LCD_DrawRect@posX2+1
 12704  000F1E  C091  F018         	movff	LCD_ButtonDraw@y2,LCD_DrawRect@posY2
 12705  000F22  C092  F019         	movff	LCD_ButtonDraw@y2+1,LCD_DrawRect@posY2+1
 12706  000F26  0E01               	movlw	1
 12707  000F28  6E1A               	movwf	LCD_DrawRect@fill^0,c
 12708  000F2A  EE20 F00A          	lfsr	2,10
 12709  000F2E  5042               	movf	LCD_ButtonDraw@button^0,w,c
 12710  000F30  26D9               	addwf	fsr2l,f,c
 12711  000F32  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 12712  000F34  22DA               	addwfc	fsr2h,f,c
 12713  000F36  CFDE F01B          	movff	postinc2,LCD_DrawRect@color
 12714  000F3A  CFDD F01C          	movff	postdec2,LCD_DrawRect@color+1
 12715  000F3E  EC7D  F012         	call	_LCD_DrawRect	;wreg free
 12716                           
 12717                           ;libraries/lcd_highlevel.c: 477:     LCD_DrawRect(x1, y1, x2, y2, 0, button->txtColor);
 12718  000F42  C08B  F012         	movff	LCD_ButtonDraw@x1,LCD_DrawRect@posX1
 12719  000F46  C08C  F013         	movff	LCD_ButtonDraw@x1+1,LCD_DrawRect@posX1+1
 12720  000F4A  C08F  F014         	movff	LCD_ButtonDraw@y1,LCD_DrawRect@posY1
 12721  000F4E  C090  F015         	movff	LCD_ButtonDraw@y1+1,LCD_DrawRect@posY1+1
 12722  000F52  C08D  F016         	movff	LCD_ButtonDraw@x2,LCD_DrawRect@posX2
 12723  000F56  C08E  F017         	movff	LCD_ButtonDraw@x2+1,LCD_DrawRect@posX2+1
 12724  000F5A  C091  F018         	movff	LCD_ButtonDraw@y2,LCD_DrawRect@posY2
 12725  000F5E  C092  F019         	movff	LCD_ButtonDraw@y2+1,LCD_DrawRect@posY2+1
 12726  000F62  0E00               	movlw	0
 12727  000F64  6E1A               	movwf	LCD_DrawRect@fill^0,c
 12728  000F66  EE20 F008          	lfsr	2,8
 12729  000F6A  5042               	movf	LCD_ButtonDraw@button^0,w,c
 12730  000F6C  26D9               	addwf	fsr2l,f,c
 12731  000F6E  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 12732  000F70  22DA               	addwfc	fsr2h,f,c
 12733  000F72  CFDE F01B          	movff	postinc2,LCD_DrawRect@color
 12734  000F76  CFDD F01C          	movff	postdec2,LCD_DrawRect@color+1
 12735  000F7A  EC7D  F012         	call	_LCD_DrawRect	;wreg free
 12736  000F7E                     l8932:
 12737                           
 12738                           ;libraries/lcd_highlevel.c: 482:   if((button->text[0] == 'B')&&(button->text[1] == 'M')
      +                          )
 12739  000F7E  EE20 F00C          	lfsr	2,12
 12740  000F82  5042               	movf	LCD_ButtonDraw@button^0,w,c
 12741  000F84  26D9               	addwf	fsr2l,f,c
 12742  000F86  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 12743  000F88  22DA               	addwfc	fsr2h,f,c
 12744  000F8A  CFDE FFF6          	movff	postinc2,tblptrl
 12745  000F8E  CFDD FFF7          	movff	postdec2,tblptrh
 12746  000F92                     	if	0	;tblptru may be non-zero
 12747  000F92                     	endif
 12748  000F92                     	if	0	;tblptru may be non-zero
 12749  000F92                     	endif
 12750  000F92  0008               	tblrd		*
 12751  000F94  50F5               	movf	tablat,w,c
 12752  000F96  0A42               	xorlw	66
 12753  000F98  A4D8               	btfss	status,2,c
 12754  000F9A  D0AB               	goto	l8944
 12755  000F9C  EE20 F00C          	lfsr	2,12
 12756  000FA0  5042               	movf	LCD_ButtonDraw@button^0,w,c
 12757  000FA2  26D9               	addwf	fsr2l,f,c
 12758  000FA4  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 12759  000FA6  22DA               	addwfc	fsr2h,f,c
 12760  000FA8  CFDE F07C          	movff	postinc2,??_LCD_ButtonDraw
 12761  000FAC  CFDD F07D          	movff	postdec2,??_LCD_ButtonDraw+1
 12762  000FB0  0E01               	movlw	1
 12763  000FB2  0100               	movlb	0	; () banked
 12764  000FB4  277C               	addwf	??_LCD_ButtonDraw& (0+255),f,b
 12765  000FB6  0E00               	movlw	0
 12766  000FB8  237D               	addwfc	(??_LCD_ButtonDraw+1)& (0+255),f,b
 12767  000FBA  C07C  FFF6         	movff	??_LCD_ButtonDraw,tblptrl
 12768  000FBE  C07D  FFF7         	movff	??_LCD_ButtonDraw+1,tblptrh
 12769  000FC2                     	if	0	;tblptru may be non-zero
 12770  000FC2                     	endif
 12771  000FC2                     	if	0	;tblptru may be non-zero
 12772  000FC2                     	endif
 12773  000FC2  0008               	tblrd		*
 12774  000FC4  50F5               	movf	tablat,w,c
 12775  000FC6  0A4D               	xorlw	77
 12776  000FC8  A4D8               	btfss	status,2,c
 12777  000FCA  D093               	goto	l8944
 12778                           
 12779                           ; BSR set to: 0
 12780                           ;libraries/lcd_highlevel.c: 483:   {;libraries/lcd_highlevel.c: 484:     bmpPtr = (BMP_S
      +                          TRUCT *)button->text;
 12781  000FCC  EE20 F00C          	lfsr	2,12
 12782  000FD0  5042               	movf	LCD_ButtonDraw@button^0,w,c
 12783  000FD2  26D9               	addwf	fsr2l,f,c
 12784  000FD4  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 12785  000FD6  22DA               	addwfc	fsr2h,f,c
 12786  000FD8  CFDE F098          	movff	postinc2,LCD_ButtonDraw@bmpPtr
 12787  000FDC  CFDD F099          	movff	postdec2,LCD_ButtonDraw@bmpPtr+1
 12788                           
 12789                           ; BSR set to: 0
 12790                           ;libraries/lcd_highlevel.c: 485:     yText = button->height / 2 + button->posY - (bmpPtr
      +                          ->biHeight / 2);
 12791  000FE0  EE20 F002          	lfsr	2,2
 12792  000FE4  5042               	movf	LCD_ButtonDraw@button^0,w,c
 12793  000FE6  26D9               	addwf	fsr2l,f,c
 12794  000FE8  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 12795  000FEA  22DA               	addwfc	fsr2h,f,c
 12796  000FEC  CFDE F07C          	movff	postinc2,??_LCD_ButtonDraw
 12797  000FF0  CFDD F07D          	movff	postdec2,??_LCD_ButtonDraw+1
 12798  000FF4  0E16               	movlw	22
 12799  000FF6  2598               	addwf	LCD_ButtonDraw@bmpPtr& (0+255),w,b
 12800  000FF8  6F7E               	movwf	(??_LCD_ButtonDraw+2)& (0+255),b
 12801  000FFA  0E00               	movlw	0
 12802  000FFC  2199               	addwfc	(LCD_ButtonDraw@bmpPtr+1)& (0+255),w,b
 12803  000FFE  6F7F               	movwf	(??_LCD_ButtonDraw+3)& (0+255),b
 12804  001000  C07E  FFF6         	movff	??_LCD_ButtonDraw+2,tblptrl
 12805  001004  C07F  FFF7         	movff	??_LCD_ButtonDraw+3,tblptrh
 12806  001008                     	if	0	;tblptru may be non-zero
 12807  001008                     	endif
 12808  001008                     	if	0	;tblptru may be non-zero
 12809  001008                     	endif
 12810  001008  0009               	tblrd		*+
 12811  00100A  CFF5 F080          	movff	tablat,??_LCD_ButtonDraw+4
 12812  00100E  0009               	tblrd		*+
 12813  001010  CFF5 F081          	movff	tablat,??_LCD_ButtonDraw+5
 12814  001014  0009               	tblrd		*+
 12815  001016  CFF5 F082          	movff	tablat,??_LCD_ButtonDraw+6
 12816  00101A  0009               	tblrd		*+
 12817  00101C  CFF5 F083          	movff	tablat,??_LCD_ButtonDraw+7
 12818  001020  90D8               	bcf	status,0,c
 12819  001022  3383               	rrcf	(??_LCD_ButtonDraw+7)& (0+255),f,b
 12820  001024  3382               	rrcf	(??_LCD_ButtonDraw+6)& (0+255),f,b
 12821  001026  3381               	rrcf	(??_LCD_ButtonDraw+5)& (0+255),f,b
 12822  001028  3380               	rrcf	(??_LCD_ButtonDraw+4)& (0+255),f,b
 12823  00102A  EE20 F006          	lfsr	2,6
 12824  00102E  5042               	movf	LCD_ButtonDraw@button^0,w,c
 12825  001030  26D9               	addwf	fsr2l,f,c
 12826  001032  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 12827  001034  22DA               	addwfc	fsr2h,f,c
 12828  001036  CFDE F084          	movff	postinc2,??_LCD_ButtonDraw+8
 12829  00103A  CFDD F085          	movff	postdec2,??_LCD_ButtonDraw+9
 12830  00103E  90D8               	bcf	status,0,c
 12831  001040  3185               	rrcf	(??_LCD_ButtonDraw+9)& (0+255),w,b
 12832  001042  6F87               	movwf	(??_LCD_ButtonDraw+11)& (0+255),b
 12833  001044  3184               	rrcf	(??_LCD_ButtonDraw+8)& (0+255),w,b
 12834  001046  6F86               	movwf	(??_LCD_ButtonDraw+10)& (0+255),b
 12835  001048  5180               	movf	(??_LCD_ButtonDraw+4)& (0+255),w,b
 12836  00104A  5F86               	subwf	(??_LCD_ButtonDraw+10)& (0+255),f,b
 12837  00104C  5181               	movf	(??_LCD_ButtonDraw+5)& (0+255),w,b
 12838  00104E  5B87               	subwfb	(??_LCD_ButtonDraw+11)& (0+255),f,b
 12839  001050  517C               	movf	??_LCD_ButtonDraw& (0+255),w,b
 12840  001052  2586               	addwf	(??_LCD_ButtonDraw+10)& (0+255),w,b
 12841  001054  6F95               	movwf	LCD_ButtonDraw@yText& (0+255),b
 12842  001056  517D               	movf	(??_LCD_ButtonDraw+1)& (0+255),w,b
 12843  001058  2187               	addwfc	(??_LCD_ButtonDraw+11)& (0+255),w,b
 12844  00105A  6F96               	movwf	(LCD_ButtonDraw@yText+1)& (0+255),b
 12845                           
 12846                           ; BSR set to: 0
 12847                           ;libraries/lcd_highlevel.c: 486:     xText = button->width / 2 + button->posX - (bmpPtr-
      +                          >biWidth / 2);
 12848  00105C  C042  FFD9         	movff	LCD_ButtonDraw@button,fsr2l
 12849  001060  C043  FFDA         	movff	LCD_ButtonDraw@button+1,fsr2h
 12850  001064  CFDE F07C          	movff	postinc2,??_LCD_ButtonDraw
 12851  001068  CFDD F07D          	movff	postdec2,??_LCD_ButtonDraw+1
 12852  00106C  0E12               	movlw	18
 12853  00106E  2598               	addwf	LCD_ButtonDraw@bmpPtr& (0+255),w,b
 12854  001070  6F7E               	movwf	(??_LCD_ButtonDraw+2)& (0+255),b
 12855  001072  0E00               	movlw	0
 12856  001074  2199               	addwfc	(LCD_ButtonDraw@bmpPtr+1)& (0+255),w,b
 12857  001076  6F7F               	movwf	(??_LCD_ButtonDraw+3)& (0+255),b
 12858  001078  C07E  FFF6         	movff	??_LCD_ButtonDraw+2,tblptrl
 12859  00107C  C07F  FFF7         	movff	??_LCD_ButtonDraw+3,tblptrh
 12860  001080                     	if	0	;tblptru may be non-zero
 12861  001080                     	endif
 12862  001080                     	if	0	;tblptru may be non-zero
 12863  001080                     	endif
 12864  001080  0009               	tblrd		*+
 12865  001082  CFF5 F080          	movff	tablat,??_LCD_ButtonDraw+4
 12866  001086  0009               	tblrd		*+
 12867  001088  CFF5 F081          	movff	tablat,??_LCD_ButtonDraw+5
 12868  00108C  0009               	tblrd		*+
 12869  00108E  CFF5 F082          	movff	tablat,??_LCD_ButtonDraw+6
 12870  001092  0009               	tblrd		*+
 12871  001094  CFF5 F083          	movff	tablat,??_LCD_ButtonDraw+7
 12872  001098  90D8               	bcf	status,0,c
 12873  00109A  3383               	rrcf	(??_LCD_ButtonDraw+7)& (0+255),f,b
 12874  00109C  3382               	rrcf	(??_LCD_ButtonDraw+6)& (0+255),f,b
 12875  00109E  3381               	rrcf	(??_LCD_ButtonDraw+5)& (0+255),f,b
 12876  0010A0  3380               	rrcf	(??_LCD_ButtonDraw+4)& (0+255),f,b
 12877  0010A2  EE20 F004          	lfsr	2,4
 12878  0010A6  5042               	movf	LCD_ButtonDraw@button^0,w,c
 12879  0010A8  26D9               	addwf	fsr2l,f,c
 12880  0010AA  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 12881  0010AC  22DA               	addwfc	fsr2h,f,c
 12882  0010AE  CFDE F084          	movff	postinc2,??_LCD_ButtonDraw+8
 12883  0010B2  CFDD F085          	movff	postdec2,??_LCD_ButtonDraw+9
 12884  0010B6  90D8               	bcf	status,0,c
 12885  0010B8  3185               	rrcf	(??_LCD_ButtonDraw+9)& (0+255),w,b
 12886  0010BA  6F87               	movwf	(??_LCD_ButtonDraw+11)& (0+255),b
 12887  0010BC  3184               	rrcf	(??_LCD_ButtonDraw+8)& (0+255),w,b
 12888  0010BE  6F86               	movwf	(??_LCD_ButtonDraw+10)& (0+255),b
 12889  0010C0  5180               	movf	(??_LCD_ButtonDraw+4)& (0+255),w,b
 12890  0010C2  5F86               	subwf	(??_LCD_ButtonDraw+10)& (0+255),f,b
 12891  0010C4  5181               	movf	(??_LCD_ButtonDraw+5)& (0+255),w,b
 12892  0010C6  5B87               	subwfb	(??_LCD_ButtonDraw+11)& (0+255),f,b
 12893  0010C8  517C               	movf	??_LCD_ButtonDraw& (0+255),w,b
 12894  0010CA  2586               	addwf	(??_LCD_ButtonDraw+10)& (0+255),w,b
 12895  0010CC  6F93               	movwf	LCD_ButtonDraw@xText& (0+255),b
 12896  0010CE  517D               	movf	(??_LCD_ButtonDraw+1)& (0+255),w,b
 12897  0010D0  2187               	addwfc	(??_LCD_ButtonDraw+11)& (0+255),w,b
 12898  0010D2  6F94               	movwf	(LCD_ButtonDraw@xText+1)& (0+255),b
 12899                           
 12900                           ; BSR set to: 0
 12901                           ;libraries/lcd_highlevel.c: 487:     LCD_Bitmap((const uint8_t *)bmpPtr,xText,yText);
 12902  0010D4  C098  F027         	movff	LCD_ButtonDraw@bmpPtr,LCD_Bitmap@bmpPtr
 12903  0010D8  C099  F028         	movff	LCD_ButtonDraw@bmpPtr+1,LCD_Bitmap@bmpPtr+1
 12904  0010DC  C093  F029         	movff	LCD_ButtonDraw@xText,LCD_Bitmap@posX
 12905  0010E0  C094  F02A         	movff	LCD_ButtonDraw@xText+1,LCD_Bitmap@posX+1
 12906  0010E4  C095  F02B         	movff	LCD_ButtonDraw@yText,LCD_Bitmap@posY
 12907  0010E8  C096  F02C         	movff	LCD_ButtonDraw@yText+1,LCD_Bitmap@posY+1
 12908  0010EC  EC8E  F004         	call	_LCD_Bitmap	;wreg free
 12909                           
 12910                           ;libraries/lcd_highlevel.c: 488:   }
 12911  0010F0  D102               	goto	l8960
 12912  0010F2                     l8944:
 12913                           
 12914                           ;libraries/lcd_highlevel.c: 493:   {;libraries/lcd_highlevel.c: 494:     yText = button-
      +                          >height / 2 + button->posY - (button->font->height / 2);
 12915  0010F2  EE20 F002          	lfsr	2,2
 12916  0010F6  5042               	movf	LCD_ButtonDraw@button^0,w,c
 12917  0010F8  26D9               	addwf	fsr2l,f,c
 12918  0010FA  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 12919  0010FC  22DA               	addwfc	fsr2h,f,c
 12920  0010FE  CFDE F07C          	movff	postinc2,??_LCD_ButtonDraw
 12921  001102  CFDD F07D          	movff	postdec2,??_LCD_ButtonDraw+1
 12922  001106  EE20 F006          	lfsr	2,6
 12923  00110A  5042               	movf	LCD_ButtonDraw@button^0,w,c
 12924  00110C  26D9               	addwf	fsr2l,f,c
 12925  00110E  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 12926  001110  22DA               	addwfc	fsr2h,f,c
 12927  001112  CFDE F07E          	movff	postinc2,??_LCD_ButtonDraw+2
 12928  001116  CFDD F07F          	movff	postdec2,??_LCD_ButtonDraw+3
 12929  00111A  90D8               	bcf	status,0,c
 12930  00111C  0100               	movlb	0	; () banked
 12931  00111E  317F               	rrcf	(??_LCD_ButtonDraw+3)& (0+255),w,b
 12932  001120  6F81               	movwf	(??_LCD_ButtonDraw+5)& (0+255),b
 12933  001122  317E               	rrcf	(??_LCD_ButtonDraw+2)& (0+255),w,b
 12934  001124  6F80               	movwf	(??_LCD_ButtonDraw+4)& (0+255),b
 12935  001126  EE20 F00E          	lfsr	2,14
 12936  00112A  5042               	movf	LCD_ButtonDraw@button^0,w,c
 12937  00112C  26D9               	addwf	fsr2l,f,c
 12938  00112E  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 12939  001130  22DA               	addwfc	fsr2h,f,c
 12940  001132  CFDE FFF6          	movff	postinc2,tblptrl
 12941  001136  CFDD FFF7          	movff	postdec2,tblptrh
 12942  00113A                     	if	0	;tblptru may be non-zero
 12943  00113A                     	endif
 12944  00113A                     	if	0	;tblptru may be non-zero
 12945  00113A                     	endif
 12946  00113A  0008               	tblrd		*
 12947  00113C  CFF5 F082          	movff	tablat,??_LCD_ButtonDraw+6
 12948  001140  90D8               	bcf	status,0,c
 12949  001142  3382               	rrcf	(??_LCD_ButtonDraw+6)& (0+255),f,b
 12950  001144  5182               	movf	(??_LCD_ButtonDraw+6)& (0+255),w,b
 12951  001146  5F80               	subwf	(??_LCD_ButtonDraw+4)& (0+255),f,b
 12952  001148  0E00               	movlw	0
 12953  00114A  5B81               	subwfb	(??_LCD_ButtonDraw+5)& (0+255),f,b
 12954  00114C  517C               	movf	??_LCD_ButtonDraw& (0+255),w,b
 12955  00114E  2580               	addwf	(??_LCD_ButtonDraw+4)& (0+255),w,b
 12956  001150  6F95               	movwf	LCD_ButtonDraw@yText& (0+255),b
 12957  001152  517D               	movf	(??_LCD_ButtonDraw+1)& (0+255),w,b
 12958  001154  2181               	addwfc	(??_LCD_ButtonDraw+5)& (0+255),w,b
 12959  001156  6F96               	movwf	(LCD_ButtonDraw@yText+1)& (0+255),b
 12960                           
 12961                           ; BSR set to: 0
 12962                           ;libraries/lcd_highlevel.c: 495:     for(i=0;i<strlen(button->text);i++)
 12963  001158  0E00               	movlw	0
 12964  00115A  6F97               	movwf	LCD_ButtonDraw@i& (0+255),b
 12965  00115C  D05C               	goto	l8954
 12966  00115E                     l8948:
 12967                           
 12968                           ; BSR set to: 0
 12969                           ;libraries/lcd_highlevel.c: 496:     {;libraries/lcd_highlevel.c: 497:       tempChar = 
      +                          (button->text[i]) - button->font->start_char;
 12970  00115E  EE20 F00E          	lfsr	2,14
 12971  001162  5042               	movf	LCD_ButtonDraw@button^0,w,c
 12972  001164  26D9               	addwf	fsr2l,f,c
 12973  001166  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 12974  001168  22DA               	addwfc	fsr2h,f,c
 12975  00116A  CFDE F07C          	movff	postinc2,??_LCD_ButtonDraw
 12976  00116E  CFDD F07D          	movff	postdec2,??_LCD_ButtonDraw+1
 12977  001172  0E01               	movlw	1
 12978  001174  277C               	addwf	??_LCD_ButtonDraw& (0+255),f,b
 12979  001176  0E00               	movlw	0
 12980  001178  237D               	addwfc	(??_LCD_ButtonDraw+1)& (0+255),f,b
 12981  00117A  C07C  FFF6         	movff	??_LCD_ButtonDraw,tblptrl
 12982  00117E  C07D  FFF7         	movff	??_LCD_ButtonDraw+1,tblptrh
 12983  001182                     	if	0	;tblptru may be non-zero
 12984  001182                     	endif
 12985  001182                     	if	0	;tblptru may be non-zero
 12986  001182                     	endif
 12987  001182  0008               	tblrd		*
 12988  001184  CFF5 F07E          	movff	tablat,??_LCD_ButtonDraw+2
 12989  001188  EE20 F00C          	lfsr	2,12
 12990  00118C  5042               	movf	LCD_ButtonDraw@button^0,w,c
 12991  00118E  26D9               	addwf	fsr2l,f,c
 12992  001190  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 12993  001192  22DA               	addwfc	fsr2h,f,c
 12994  001194  CFDE F07F          	movff	postinc2,??_LCD_ButtonDraw+3
 12995  001198  CFDD F080          	movff	postdec2,??_LCD_ButtonDraw+4
 12996  00119C  5197               	movf	LCD_ButtonDraw@i& (0+255),w,b
 12997  00119E  277F               	addwf	(??_LCD_ButtonDraw+3)& (0+255),f,b
 12998  0011A0  0E00               	movlw	0
 12999  0011A2  2380               	addwfc	(??_LCD_ButtonDraw+4)& (0+255),f,b
 13000  0011A4  C07F  FFF6         	movff	??_LCD_ButtonDraw+3,tblptrl
 13001  0011A8  C080  FFF7         	movff	??_LCD_ButtonDraw+4,tblptrh
 13002  0011AC                     	if	0	;tblptru may be non-zero
 13003  0011AC                     	endif
 13004  0011AC                     	if	0	;tblptru may be non-zero
 13005  0011AC                     	endif
 13006  0011AC  0008               	tblrd		*
 13007  0011AE  CFF5 F081          	movff	tablat,??_LCD_ButtonDraw+5
 13008  0011B2  517E               	movf	(??_LCD_ButtonDraw+2)& (0+255),w,b
 13009  0011B4  5D81               	subwf	(??_LCD_ButtonDraw+5)& (0+255),w,b
 13010  0011B6  6F88               	movwf	LCD_ButtonDraw@tempChar& (0+255),b
 13011                           
 13012                           ; BSR set to: 0
 13013                           ;libraries/lcd_highlevel.c: 498:       width += button->font->descriptor[tempChar].width
      +                          +2;
 13014  0011B8  5188               	movf	LCD_ButtonDraw@tempChar& (0+255),w,b
 13015  0011BA  0D03               	mullw	3
 13016  0011BC  EE20 F00E          	lfsr	2,14
 13017  0011C0  5042               	movf	LCD_ButtonDraw@button^0,w,c
 13018  0011C2  26D9               	addwf	fsr2l,f,c
 13019  0011C4  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 13020  0011C6  22DA               	addwfc	fsr2h,f,c
 13021  0011C8  CFDE F07C          	movff	postinc2,??_LCD_ButtonDraw
 13022  0011CC  CFDD F07D          	movff	postdec2,??_LCD_ButtonDraw+1
 13023  0011D0  0E03               	movlw	3
 13024  0011D2  277C               	addwf	??_LCD_ButtonDraw& (0+255),f,b
 13025  0011D4  0E00               	movlw	0
 13026  0011D6  237D               	addwfc	(??_LCD_ButtonDraw+1)& (0+255),f,b
 13027  0011D8  C07C  FFF6         	movff	??_LCD_ButtonDraw,tblptrl
 13028  0011DC  C07D  FFF7         	movff	??_LCD_ButtonDraw+1,tblptrh
 13029  0011E0                     	if	0	;tblptru may be non-zero
 13030  0011E0                     	endif
 13031  0011E0                     	if	0	;tblptru may be non-zero
 13032  0011E0                     	endif
 13033  0011E0  0009               	tblrd		*+
 13034  0011E2  CFF5 F07E          	movff	tablat,??_LCD_ButtonDraw+2
 13035  0011E6  0009               	tblrd		*+
 13036  0011E8  CFF5 F07F          	movff	tablat,??_LCD_ButtonDraw+3
 13037  0011EC  50F3               	movf	243,w,c
 13038  0011EE  277E               	addwf	(??_LCD_ButtonDraw+2)& (0+255),f,b
 13039  0011F0  50F4               	movf	244,w,c
 13040  0011F2  237F               	addwfc	(??_LCD_ButtonDraw+3)& (0+255),f,b
 13041  0011F4  C07E  FFF6         	movff	??_LCD_ButtonDraw+2,tblptrl
 13042  0011F8  C07F  FFF7         	movff	??_LCD_ButtonDraw+3,tblptrh
 13043  0011FC                     	if	0	;tblptru may be non-zero
 13044  0011FC                     	endif
 13045  0011FC                     	if	0	;tblptru may be non-zero
 13046  0011FC                     	endif
 13047  0011FC  0008               	tblrd		*
 13048  0011FE  50F5               	movf	tablat,w,c
 13049  001200  6F80               	movwf	(??_LCD_ButtonDraw+4)& (0+255),b
 13050  001202  6B81               	clrf	(??_LCD_ButtonDraw+5)& (0+255),b
 13051  001204  0E02               	movlw	2
 13052  001206  2780               	addwf	(??_LCD_ButtonDraw+4)& (0+255),f,b
 13053  001208  0E00               	movlw	0
 13054  00120A  2381               	addwfc	(??_LCD_ButtonDraw+5)& (0+255),f,b
 13055  00120C  5180               	movf	(??_LCD_ButtonDraw+4)& (0+255),w,b
 13056  00120E  2789               	addwf	LCD_ButtonDraw@width& (0+255),f,b
 13057  001210  5181               	movf	(??_LCD_ButtonDraw+5)& (0+255),w,b
 13058  001212  238A               	addwfc	(LCD_ButtonDraw@width+1)& (0+255),f,b
 13059                           
 13060                           ; BSR set to: 0
 13061                           ;libraries/lcd_highlevel.c: 499:     }
 13062  001214  2B97               	incf	LCD_ButtonDraw@i& (0+255),f,b
 13063  001216                     l8954:
 13064                           
 13065                           ; BSR set to: 0
 13066  001216  EE20 F00C          	lfsr	2,12
 13067  00121A  5042               	movf	LCD_ButtonDraw@button^0,w,c
 13068  00121C  26D9               	addwf	fsr2l,f,c
 13069  00121E  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 13070  001220  22DA               	addwfc	fsr2h,f,c
 13071  001222  CFDE F012          	movff	postinc2,strlen@s
 13072  001226  CFDD F013          	movff	postdec2,strlen@s+1
 13073  00122A  EC86  F02A         	call	_strlen	;wreg free
 13074  00122E  0100               	movlb	0	; () banked
 13075  001230  5197               	movf	LCD_ButtonDraw@i& (0+255),w,b
 13076  001232  6F7C               	movwf	??_LCD_ButtonDraw& (0+255),b
 13077  001234  6B7D               	clrf	(??_LCD_ButtonDraw+1)& (0+255),b
 13078  001236  5012               	movf	?_strlen^0,w,c
 13079  001238  5D7C               	subwf	??_LCD_ButtonDraw& (0+255),w,b
 13080  00123A  5013               	movf	(?_strlen+1)^0,w,c
 13081  00123C  597D               	subwfb	(??_LCD_ButtonDraw+1)& (0+255),w,b
 13082  00123E  A0D8               	btfss	status,0,c
 13083  001240  D78E               	goto	l8948
 13084                           
 13085                           ; BSR set to: 0
 13086                           ;libraries/lcd_highlevel.c: 500:     xText = button->width / 2 + button->posX - (width /
      +                           2);
 13087  001242  C042  FFD9         	movff	LCD_ButtonDraw@button,fsr2l
 13088  001246  C043  FFDA         	movff	LCD_ButtonDraw@button+1,fsr2h
 13089  00124A  CFDE F07C          	movff	postinc2,??_LCD_ButtonDraw
 13090  00124E  CFDD F07D          	movff	postdec2,??_LCD_ButtonDraw+1
 13091  001252  90D8               	bcf	status,0,c
 13092  001254  318A               	rrcf	(LCD_ButtonDraw@width+1)& (0+255),w,b
 13093  001256  6F7F               	movwf	(??_LCD_ButtonDraw+3)& (0+255),b
 13094  001258  3189               	rrcf	LCD_ButtonDraw@width& (0+255),w,b
 13095  00125A  6F7E               	movwf	(??_LCD_ButtonDraw+2)& (0+255),b
 13096  00125C  EE20 F004          	lfsr	2,4
 13097  001260  5042               	movf	LCD_ButtonDraw@button^0,w,c
 13098  001262  26D9               	addwf	fsr2l,f,c
 13099  001264  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 13100  001266  22DA               	addwfc	fsr2h,f,c
 13101  001268  CFDE F080          	movff	postinc2,??_LCD_ButtonDraw+4
 13102  00126C  CFDD F081          	movff	postdec2,??_LCD_ButtonDraw+5
 13103  001270  90D8               	bcf	status,0,c
 13104  001272  3181               	rrcf	(??_LCD_ButtonDraw+5)& (0+255),w,b
 13105  001274  6F83               	movwf	(??_LCD_ButtonDraw+7)& (0+255),b
 13106  001276  3180               	rrcf	(??_LCD_ButtonDraw+4)& (0+255),w,b
 13107  001278  6F82               	movwf	(??_LCD_ButtonDraw+6)& (0+255),b
 13108  00127A  517E               	movf	(??_LCD_ButtonDraw+2)& (0+255),w,b
 13109  00127C  5F82               	subwf	(??_LCD_ButtonDraw+6)& (0+255),f,b
 13110  00127E  517F               	movf	(??_LCD_ButtonDraw+3)& (0+255),w,b
 13111  001280  5B83               	subwfb	(??_LCD_ButtonDraw+7)& (0+255),f,b
 13112  001282  517C               	movf	??_LCD_ButtonDraw& (0+255),w,b
 13113  001284  2582               	addwf	(??_LCD_ButtonDraw+6)& (0+255),w,b
 13114  001286  6F93               	movwf	LCD_ButtonDraw@xText& (0+255),b
 13115  001288  517D               	movf	(??_LCD_ButtonDraw+1)& (0+255),w,b
 13116  00128A  2183               	addwfc	(??_LCD_ButtonDraw+7)& (0+255),w,b
 13117  00128C  6F94               	movwf	(LCD_ButtonDraw@xText+1)& (0+255),b
 13118                           
 13119                           ; BSR set to: 0
 13120                           ;libraries/lcd_highlevel.c: 501:     LCD_DrawText(button->text, button->font,A_LEFT,
 13121  00128E  EE20 F00C          	lfsr	2,12
 13122  001292  5042               	movf	LCD_ButtonDraw@button^0,w,c
 13123  001294  26D9               	addwf	fsr2l,f,c
 13124  001296  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 13125  001298  22DA               	addwfc	fsr2h,f,c
 13126  00129A  CFDE F020          	movff	postinc2,LCD_DrawText@msg
 13127  00129E  CFDD F021          	movff	postdec2,LCD_DrawText@msg+1
 13128  0012A2  EE20 F00E          	lfsr	2,14
 13129  0012A6  5042               	movf	LCD_ButtonDraw@button^0,w,c
 13130  0012A8  26D9               	addwf	fsr2l,f,c
 13131  0012AA  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 13132  0012AC  22DA               	addwfc	fsr2h,f,c
 13133  0012AE  CFDE F022          	movff	postinc2,LCD_DrawText@font
 13134  0012B2  CFDD F023          	movff	postdec2,LCD_DrawText@font+1
 13135  0012B6  0E00               	movlw	0
 13136  0012B8  6E24               	movwf	LCD_DrawText@align^0,c
 13137  0012BA  C093  F025         	movff	LCD_ButtonDraw@xText,LCD_DrawText@posX
 13138  0012BE  C094  F026         	movff	LCD_ButtonDraw@xText+1,LCD_DrawText@posX+1
 13139  0012C2  C095  F027         	movff	LCD_ButtonDraw@yText,LCD_DrawText@posY
 13140  0012C6  C096  F028         	movff	LCD_ButtonDraw@yText+1,LCD_DrawText@posY+1
 13141  0012CA  EE20 F008          	lfsr	2,8
 13142  0012CE  5042               	movf	LCD_ButtonDraw@button^0,w,c
 13143  0012D0  26D9               	addwf	fsr2l,f,c
 13144  0012D2  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 13145  0012D4  22DA               	addwfc	fsr2h,f,c
 13146  0012D6  CFDE F029          	movff	postinc2,LCD_DrawText@color
 13147  0012DA  CFDD F02A          	movff	postdec2,LCD_DrawText@color+1
 13148  0012DE  EE20 F00A          	lfsr	2,10
 13149  0012E2  5042               	movf	LCD_ButtonDraw@button^0,w,c
 13150  0012E4  26D9               	addwf	fsr2l,f,c
 13151  0012E6  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 13152  0012E8  22DA               	addwfc	fsr2h,f,c
 13153  0012EA  CFDE F02B          	movff	postinc2,LCD_DrawText@bg_color
 13154  0012EE  CFDD F02C          	movff	postdec2,LCD_DrawText@bg_color+1
 13155  0012F2  EC83  F00B         	call	_LCD_DrawText	;wreg free
 13156  0012F6                     l8960:
 13157                           
 13158                           ;libraries/lcd_highlevel.c: 504:   LCD_ButtonUpdate(button);
 13159  0012F6  C042  F025         	movff	LCD_ButtonDraw@button,LCD_ButtonUpdate@button
 13160  0012FA  C043  F026         	movff	LCD_ButtonDraw@button+1,LCD_ButtonUpdate@button+1
 13161  0012FE  ECC6  F018         	call	_LCD_ButtonUpdate	;wreg free
 13162  001302  0012               	return		;funcret
 13163  001304                     __end_of_LCD_ButtonDraw:
 13164                           	callstack 0
 13165                           
 13166 ;; *************** function _LCD_ButtonUpdate *****************
 13167 ;; Defined at:
 13168 ;;		line 425 in file "libraries/lcd_highlevel.c"
 13169 ;; Parameters:    Size  Location     Type
 13170 ;;  button          2   36[COMRAM] PTR struct .
 13171 ;;		 -> g1(216), 
 13172 ;; Auto vars:     Size  Location     Type
 13173 ;;  y2              2   52[COMRAM] unsigned short 
 13174 ;;  x1              2   50[COMRAM] unsigned short 
 13175 ;;  y1              2   48[COMRAM] unsigned short 
 13176 ;;  x2              2   46[COMRAM] unsigned short 
 13177 ;;  colorIn         2   44[COMRAM] unsigned short 
 13178 ;;  colorOut        2   42[COMRAM] unsigned short 
 13179 ;; Return value:  Size  Location     Type
 13180 ;;                  1    wreg      void 
 13181 ;; Registers used:
 13182 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13183 ;; Tracked objects:
 13184 ;;		On entry : 0/0
 13185 ;;		On exit  : 0/0
 13186 ;;		Unchanged: 0/0
 13187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13188 ;;      Params:         2       0       0       0       0       0       0
 13189 ;;      Locals:        12       0       0       0       0       0       0
 13190 ;;      Temps:          4       0       0       0       0       0       0
 13191 ;;      Totals:        18       0       0       0       0       0       0
 13192 ;;Total ram usage:       18 bytes
 13193 ;; Hardware stack levels used: 1
 13194 ;; Hardware stack levels required when called: 5
 13195 ;; This function calls:
 13196 ;;		_LCD_DrawRect
 13197 ;;		_LCD_Read
 13198 ;; This function is called by:
 13199 ;;		_LCD_ButtonDraw
 13200 ;; This function uses a non-reentrant model
 13201 ;;
 13202                           
 13203                           	psect	text54
 13204  00318C                     __ptext54:
 13205                           	callstack 0
 13206  00318C                     _LCD_ButtonUpdate:
 13207                           	callstack 19
 13208                           
 13209                           ;libraries/lcd_highlevel.c: 425: void LCD_ButtonUpdate(btn_t * button);libraries/lcd_hig
      +                          hlevel.c: 426: {;libraries/lcd_highlevel.c: 427:   uint16_t x1,x2,y1,y2;;libraries/lcd_h
      +                          ighlevel.c: 428:   uint16_t colorOut, colorIn;;libraries/lcd_highlevel.c: 430:   x1 = bu
      +                          tton->posX;
 13210                           
 13211                           ;incstack = 0
 13212  00318C  C025  FFD9         	movff	LCD_ButtonUpdate@button,fsr2l
 13213  003190  C026  FFDA         	movff	LCD_ButtonUpdate@button+1,fsr2h
 13214  003194  CFDE F033          	movff	postinc2,LCD_ButtonUpdate@x1
 13215  003198  CFDD F034          	movff	postdec2,LCD_ButtonUpdate@x1+1
 13216                           
 13217                           ;libraries/lcd_highlevel.c: 431:   x2 = button->posX + button->width;
 13218  00319C  EE20 F004          	lfsr	2,4
 13219  0031A0  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 13220  0031A2  26D9               	addwf	fsr2l,f,c
 13221  0031A4  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 13222  0031A6  22DA               	addwfc	fsr2h,f,c
 13223  0031A8  CFDE F027          	movff	postinc2,??_LCD_ButtonUpdate
 13224  0031AC  CFDD F028          	movff	postdec2,??_LCD_ButtonUpdate+1
 13225  0031B0  C025  FFD9         	movff	LCD_ButtonUpdate@button,fsr2l
 13226  0031B4  C026  FFDA         	movff	LCD_ButtonUpdate@button+1,fsr2h
 13227  0031B8  CFDE F029          	movff	postinc2,??_LCD_ButtonUpdate+2
 13228  0031BC  CFDD F02A          	movff	postdec2,??_LCD_ButtonUpdate+3
 13229  0031C0  5027               	movf	??_LCD_ButtonUpdate^0,w,c
 13230  0031C2  2429               	addwf	(??_LCD_ButtonUpdate+2)^0,w,c
 13231  0031C4  6E2F               	movwf	LCD_ButtonUpdate@x2^0,c
 13232  0031C6  5028               	movf	(??_LCD_ButtonUpdate+1)^0,w,c
 13233  0031C8  202A               	addwfc	(??_LCD_ButtonUpdate+3)^0,w,c
 13234  0031CA  6E30               	movwf	(LCD_ButtonUpdate@x2+1)^0,c
 13235                           
 13236                           ;libraries/lcd_highlevel.c: 432:   y1 = button->posY;
 13237  0031CC  EE20 F002          	lfsr	2,2
 13238  0031D0  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 13239  0031D2  26D9               	addwf	fsr2l,f,c
 13240  0031D4  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 13241  0031D6  22DA               	addwfc	fsr2h,f,c
 13242  0031D8  CFDE F031          	movff	postinc2,LCD_ButtonUpdate@y1
 13243  0031DC  CFDD F032          	movff	postdec2,LCD_ButtonUpdate@y1+1
 13244                           
 13245                           ;libraries/lcd_highlevel.c: 433:   y2 = button->posY + button->height;
 13246  0031E0  EE20 F006          	lfsr	2,6
 13247  0031E4  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 13248  0031E6  26D9               	addwf	fsr2l,f,c
 13249  0031E8  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 13250  0031EA  22DA               	addwfc	fsr2h,f,c
 13251  0031EC  CFDE F027          	movff	postinc2,??_LCD_ButtonUpdate
 13252  0031F0  CFDD F028          	movff	postdec2,??_LCD_ButtonUpdate+1
 13253  0031F4  EE20 F002          	lfsr	2,2
 13254  0031F8  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 13255  0031FA  26D9               	addwf	fsr2l,f,c
 13256  0031FC  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 13257  0031FE  22DA               	addwfc	fsr2h,f,c
 13258  003200  CFDE F029          	movff	postinc2,??_LCD_ButtonUpdate+2
 13259  003204  CFDD F02A          	movff	postdec2,??_LCD_ButtonUpdate+3
 13260  003208  5027               	movf	??_LCD_ButtonUpdate^0,w,c
 13261  00320A  2429               	addwf	(??_LCD_ButtonUpdate+2)^0,w,c
 13262  00320C  6E35               	movwf	LCD_ButtonUpdate@y2^0,c
 13263  00320E  5028               	movf	(??_LCD_ButtonUpdate+1)^0,w,c
 13264  003210  202A               	addwfc	(??_LCD_ButtonUpdate+3)^0,w,c
 13265  003212  6E36               	movwf	(LCD_ButtonUpdate@y2+1)^0,c
 13266                           
 13267                           ;libraries/lcd_highlevel.c: 435:   if(button->pressed == 0)
 13268  003214  EE20 F010          	lfsr	2,16
 13269  003218  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 13270  00321A  26D9               	addwf	fsr2l,f,c
 13271  00321C  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 13272  00321E  22DA               	addwfc	fsr2h,f,c
 13273  003220  50DF               	movf	indf2,w,c
 13274  003222  A4D8               	btfss	status,2,c
 13275  003224  D00D               	goto	l6142
 13276                           
 13277                           ;libraries/lcd_highlevel.c: 436:   {;libraries/lcd_highlevel.c: 437:     colorOut = butt
      +                          on->txtColor;
 13278  003226  EE20 F008          	lfsr	2,8
 13279  00322A  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 13280  00322C  26D9               	addwf	fsr2l,f,c
 13281  00322E  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 13282  003230  22DA               	addwfc	fsr2h,f,c
 13283  003232  CFDE F02B          	movff	postinc2,LCD_ButtonUpdate@colorOut
 13284  003236  CFDD F02C          	movff	postdec2,LCD_ButtonUpdate@colorOut+1
 13285                           
 13286                           ;libraries/lcd_highlevel.c: 438:     colorIn = button->bgColor;
 13287  00323A  EE20 F00A          	lfsr	2,10
 13288  00323E  D012               	goto	L8
 13289  003240                     l6142:
 13290                           
 13291                           ;libraries/lcd_highlevel.c: 441:   {;libraries/lcd_highlevel.c: 443:     colorOut = LCD_
      +                          Read(x1,y2+1);
 13292  003240  C033  F012         	movff	LCD_ButtonUpdate@x1,LCD_Read@posX
 13293  003244  C034  F013         	movff	LCD_ButtonUpdate@x1+1,LCD_Read@posX+1
 13294  003248  0E01               	movlw	1
 13295  00324A  2435               	addwf	LCD_ButtonUpdate@y2^0,w,c
 13296  00324C  6E14               	movwf	LCD_Read@posY^0,c
 13297  00324E  0E00               	movlw	0
 13298  003250  2036               	addwfc	(LCD_ButtonUpdate@y2+1)^0,w,c
 13299  003252  6E15               	movwf	(LCD_Read@posY+1)^0,c
 13300  003254  EC65  F01C         	call	_LCD_Read	;wreg free
 13301  003258  C012  F02B         	movff	?_LCD_Read,LCD_ButtonUpdate@colorOut
 13302  00325C  C013  F02C         	movff	?_LCD_Read+1,LCD_ButtonUpdate@colorOut+1
 13303                           
 13304                           ;libraries/lcd_highlevel.c: 444:     colorIn = button->txtColor;
 13305  003260  EE20 F008          	lfsr	2,8
 13306  003264                     L8:
 13307  003264  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 13308  003266  26D9               	addwf	fsr2l,f,c
 13309  003268  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 13310  00326A  22DA               	addwfc	fsr2h,f,c
 13311  00326C  CFDE F02D          	movff	postinc2,LCD_ButtonUpdate@colorIn
 13312  003270  CFDD F02E          	movff	postdec2,LCD_ButtonUpdate@colorIn+1
 13313                           
 13314                           ;libraries/lcd_highlevel.c: 446:   if(button->bgColor != button->txtColor)
 13315  003274  EE20 F008          	lfsr	2,8
 13316  003278  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 13317  00327A  26D9               	addwf	fsr2l,f,c
 13318  00327C  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 13319  00327E  22DA               	addwfc	fsr2h,f,c
 13320  003280  EE10 F00A          	lfsr	1,10
 13321  003284  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 13322  003286  26E1               	addwf	fsr1l,f,c
 13323  003288  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 13324  00328A  22E2               	addwfc	fsr1h,f,c
 13325  00328C  50DE               	movf	postinc2,w,c
 13326  00328E  18E6               	xorwf	postinc1,w,c
 13327  003290  E104               	bnz	u3760
 13328  003292  50DE               	movf	postinc2,w,c
 13329  003294  18E6               	xorwf	postinc1,w,c
 13330  003296  B4D8               	btfsc	status,2,c
 13331  003298  0012               	return	
 13332  00329A                     u3760:
 13333                           
 13334                           ;libraries/lcd_highlevel.c: 447:   {;libraries/lcd_highlevel.c: 449:     LCD_DrawRect(x1
      +                          +3, y2+1, x2+3, y2+3, 1, colorOut);
 13335  00329A  0E03               	movlw	3
 13336  00329C  2433               	addwf	LCD_ButtonUpdate@x1^0,w,c
 13337  00329E  6E12               	movwf	LCD_DrawRect@posX1^0,c
 13338  0032A0  0E00               	movlw	0
 13339  0032A2  2034               	addwfc	(LCD_ButtonUpdate@x1+1)^0,w,c
 13340  0032A4  6E13               	movwf	(LCD_DrawRect@posX1+1)^0,c
 13341  0032A6  0E01               	movlw	1
 13342  0032A8  2435               	addwf	LCD_ButtonUpdate@y2^0,w,c
 13343  0032AA  6E14               	movwf	LCD_DrawRect@posY1^0,c
 13344  0032AC  0E00               	movlw	0
 13345  0032AE  2036               	addwfc	(LCD_ButtonUpdate@y2+1)^0,w,c
 13346  0032B0  6E15               	movwf	(LCD_DrawRect@posY1+1)^0,c
 13347  0032B2  0E03               	movlw	3
 13348  0032B4  242F               	addwf	LCD_ButtonUpdate@x2^0,w,c
 13349  0032B6  6E16               	movwf	LCD_DrawRect@posX2^0,c
 13350  0032B8  0E00               	movlw	0
 13351  0032BA  2030               	addwfc	(LCD_ButtonUpdate@x2+1)^0,w,c
 13352  0032BC  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 13353  0032BE  0E03               	movlw	3
 13354  0032C0  2435               	addwf	LCD_ButtonUpdate@y2^0,w,c
 13355  0032C2  6E18               	movwf	LCD_DrawRect@posY2^0,c
 13356  0032C4  0E00               	movlw	0
 13357  0032C6  2036               	addwfc	(LCD_ButtonUpdate@y2+1)^0,w,c
 13358  0032C8  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 13359  0032CA  0E01               	movlw	1
 13360  0032CC  6E1A               	movwf	LCD_DrawRect@fill^0,c
 13361  0032CE  C02B  F01B         	movff	LCD_ButtonUpdate@colorOut,LCD_DrawRect@color
 13362  0032D2  C02C  F01C         	movff	LCD_ButtonUpdate@colorOut+1,LCD_DrawRect@color+1
 13363  0032D6  EC7D  F012         	call	_LCD_DrawRect	;wreg free
 13364                           
 13365                           ;libraries/lcd_highlevel.c: 450:     LCD_DrawRect(x2+1, y1+3, x2+3, y2+3, 1, colorOut);
 13366  0032DA  0E01               	movlw	1
 13367  0032DC  242F               	addwf	LCD_ButtonUpdate@x2^0,w,c
 13368  0032DE  6E12               	movwf	LCD_DrawRect@posX1^0,c
 13369  0032E0  0E00               	movlw	0
 13370  0032E2  2030               	addwfc	(LCD_ButtonUpdate@x2+1)^0,w,c
 13371  0032E4  6E13               	movwf	(LCD_DrawRect@posX1+1)^0,c
 13372  0032E6  0E03               	movlw	3
 13373  0032E8  2431               	addwf	LCD_ButtonUpdate@y1^0,w,c
 13374  0032EA  6E14               	movwf	LCD_DrawRect@posY1^0,c
 13375  0032EC  0E00               	movlw	0
 13376  0032EE  2032               	addwfc	(LCD_ButtonUpdate@y1+1)^0,w,c
 13377  0032F0  6E15               	movwf	(LCD_DrawRect@posY1+1)^0,c
 13378  0032F2  0E03               	movlw	3
 13379  0032F4  242F               	addwf	LCD_ButtonUpdate@x2^0,w,c
 13380  0032F6  6E16               	movwf	LCD_DrawRect@posX2^0,c
 13381  0032F8  0E00               	movlw	0
 13382  0032FA  2030               	addwfc	(LCD_ButtonUpdate@x2+1)^0,w,c
 13383  0032FC  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 13384  0032FE  0E03               	movlw	3
 13385  003300  2435               	addwf	LCD_ButtonUpdate@y2^0,w,c
 13386  003302  6E18               	movwf	LCD_DrawRect@posY2^0,c
 13387  003304  0E00               	movlw	0
 13388  003306  2036               	addwfc	(LCD_ButtonUpdate@y2+1)^0,w,c
 13389  003308  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 13390  00330A  0E01               	movlw	1
 13391  00330C  6E1A               	movwf	LCD_DrawRect@fill^0,c
 13392  00330E  C02B  F01B         	movff	LCD_ButtonUpdate@colorOut,LCD_DrawRect@color
 13393  003312  C02C  F01C         	movff	LCD_ButtonUpdate@colorOut+1,LCD_DrawRect@color+1
 13394  003316  EC7D  F012         	call	_LCD_DrawRect	;wreg free
 13395                           
 13396                           ;libraries/lcd_highlevel.c: 451:     LCD_DrawRect(x1+1, y1+1, x2-1, y1+2, 1, colorIn);
 13397  00331A  0E01               	movlw	1
 13398  00331C  2433               	addwf	LCD_ButtonUpdate@x1^0,w,c
 13399  00331E  6E12               	movwf	LCD_DrawRect@posX1^0,c
 13400  003320  0E00               	movlw	0
 13401  003322  2034               	addwfc	(LCD_ButtonUpdate@x1+1)^0,w,c
 13402  003324  6E13               	movwf	(LCD_DrawRect@posX1+1)^0,c
 13403  003326  0E01               	movlw	1
 13404  003328  2431               	addwf	LCD_ButtonUpdate@y1^0,w,c
 13405  00332A  6E14               	movwf	LCD_DrawRect@posY1^0,c
 13406  00332C  0E00               	movlw	0
 13407  00332E  2032               	addwfc	(LCD_ButtonUpdate@y1+1)^0,w,c
 13408  003330  6E15               	movwf	(LCD_DrawRect@posY1+1)^0,c
 13409  003332  0EFF               	movlw	255
 13410  003334  242F               	addwf	LCD_ButtonUpdate@x2^0,w,c
 13411  003336  6E16               	movwf	LCD_DrawRect@posX2^0,c
 13412  003338  0EFF               	movlw	255
 13413  00333A  2030               	addwfc	(LCD_ButtonUpdate@x2+1)^0,w,c
 13414  00333C  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 13415  00333E  0E02               	movlw	2
 13416  003340  2431               	addwf	LCD_ButtonUpdate@y1^0,w,c
 13417  003342  6E18               	movwf	LCD_DrawRect@posY2^0,c
 13418  003344  0E00               	movlw	0
 13419  003346  2032               	addwfc	(LCD_ButtonUpdate@y1+1)^0,w,c
 13420  003348  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 13421  00334A  0E01               	movlw	1
 13422  00334C  6E1A               	movwf	LCD_DrawRect@fill^0,c
 13423  00334E  C02D  F01B         	movff	LCD_ButtonUpdate@colorIn,LCD_DrawRect@color
 13424  003352  C02E  F01C         	movff	LCD_ButtonUpdate@colorIn+1,LCD_DrawRect@color+1
 13425  003356  EC7D  F012         	call	_LCD_DrawRect	;wreg free
 13426                           
 13427                           ;libraries/lcd_highlevel.c: 452:     LCD_DrawRect(x1+1, y1+1, x1+2, y2-1, 1, colorIn);
 13428  00335A  0E01               	movlw	1
 13429  00335C  2433               	addwf	LCD_ButtonUpdate@x1^0,w,c
 13430  00335E  6E12               	movwf	LCD_DrawRect@posX1^0,c
 13431  003360  0E00               	movlw	0
 13432  003362  2034               	addwfc	(LCD_ButtonUpdate@x1+1)^0,w,c
 13433  003364  6E13               	movwf	(LCD_DrawRect@posX1+1)^0,c
 13434  003366  0E01               	movlw	1
 13435  003368  2431               	addwf	LCD_ButtonUpdate@y1^0,w,c
 13436  00336A  6E14               	movwf	LCD_DrawRect@posY1^0,c
 13437  00336C  0E00               	movlw	0
 13438  00336E  2032               	addwfc	(LCD_ButtonUpdate@y1+1)^0,w,c
 13439  003370  6E15               	movwf	(LCD_DrawRect@posY1+1)^0,c
 13440  003372  0E02               	movlw	2
 13441  003374  2433               	addwf	LCD_ButtonUpdate@x1^0,w,c
 13442  003376  6E16               	movwf	LCD_DrawRect@posX2^0,c
 13443  003378  0E00               	movlw	0
 13444  00337A  2034               	addwfc	(LCD_ButtonUpdate@x1+1)^0,w,c
 13445  00337C  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 13446  00337E  0EFF               	movlw	255
 13447  003380  2435               	addwf	LCD_ButtonUpdate@y2^0,w,c
 13448  003382  6E18               	movwf	LCD_DrawRect@posY2^0,c
 13449  003384  0EFF               	movlw	255
 13450  003386  2036               	addwfc	(LCD_ButtonUpdate@y2+1)^0,w,c
 13451  003388  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 13452  00338A  0E01               	movlw	1
 13453  00338C  6E1A               	movwf	LCD_DrawRect@fill^0,c
 13454  00338E  C02D  F01B         	movff	LCD_ButtonUpdate@colorIn,LCD_DrawRect@color
 13455  003392  C02E  F01C         	movff	LCD_ButtonUpdate@colorIn+1,LCD_DrawRect@color+1
 13456  003396  EC7D  F012         	call	_LCD_DrawRect	;wreg free
 13457  00339A  0012               	return		;funcret
 13458  00339C                     __end_of_LCD_ButtonUpdate:
 13459                           	callstack 0
 13460                           
 13461 ;; *************** function _LCD_Read *****************
 13462 ;; Defined at:
 13463 ;;		line 64 in file "libraries/lcd_lowlevel.c"
 13464 ;; Parameters:    Size  Location     Type
 13465 ;;  posX            2   17[COMRAM] unsigned short 
 13466 ;;  posY            2   19[COMRAM] unsigned short 
 13467 ;; Auto vars:     Size  Location     Type
 13468 ;;  temp16          2   25[COMRAM] unsigned short 
 13469 ;;  color           2   23[COMRAM] unsigned short 
 13470 ;; Return value:  Size  Location     Type
 13471 ;;                  2   17[COMRAM] unsigned short 
 13472 ;; Registers used:
 13473 ;;		wreg, status,2, status,0
 13474 ;; Tracked objects:
 13475 ;;		On entry : 0/0
 13476 ;;		On exit  : 0/0
 13477 ;;		Unchanged: 0/0
 13478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13479 ;;      Params:         4       0       0       0       0       0       0
 13480 ;;      Locals:         4       0       0       0       0       0       0
 13481 ;;      Temps:          2       0       0       0       0       0       0
 13482 ;;      Totals:        10       0       0       0       0       0       0
 13483 ;;Total ram usage:       10 bytes
 13484 ;; Hardware stack levels used: 1
 13485 ;; Hardware stack levels required when called: 4
 13486 ;; This function calls:
 13487 ;;		Nothing
 13488 ;; This function is called by:
 13489 ;;		_LCD_ButtonUpdate
 13490 ;; This function uses a non-reentrant model
 13491 ;;
 13492                           
 13493                           	psect	text55
 13494  0038CA                     __ptext55:
 13495                           	callstack 0
 13496  0038CA                     _LCD_Read:
 13497                           	callstack 19
 13498                           
 13499                           ;libraries/lcd_lowlevel.c: 64: uint16_t LCD_Read(uint16_t posX, uint16_t posY);libraries
      +                          /lcd_lowlevel.c: 65: {;libraries/lcd_lowlevel.c: 66:  uint16_t temp16;;libraries/lcd_low
      +                          level.c: 67:   uint16_t color;;libraries/lcd_lowlevel.c: 70:   PORTA = 0x2A; LATC4 = 0; 
      +                          LATC3 = 0; LATC3 = 1; LATC4 = 1;;
 13500                           
 13501                           ;incstack = 0
 13502  0038CA  0E2A               	movlw	42
 13503  0038CC  6E80               	movwf	128,c	;volatile
 13504  0038CE  988B               	bcf	3979,4,c	;volatile
 13505  0038D0  968B               	bcf	3979,3,c	;volatile
 13506  0038D2  868B               	bsf	3979,3,c	;volatile
 13507  0038D4  888B               	bsf	3979,4,c	;volatile
 13508                           
 13509                           ;libraries/lcd_lowlevel.c: 71:   PORTA = posX>>8; LATC3 = 0; LATC3 = 1;;
 13510  0038D6  C013  FF80         	movff	LCD_Read@posX+1,3968	;volatile
 13511  0038DA  968B               	bcf	3979,3,c	;volatile
 13512  0038DC  868B               	bsf	3979,3,c	;volatile
 13513                           
 13514                           ;libraries/lcd_lowlevel.c: 72:   PORTA = posX; LATC3 = 0; LATC3 = 1;;
 13515  0038DE  C012  FF80         	movff	LCD_Read@posX,3968	;volatile
 13516  0038E2  968B               	bcf	3979,3,c	;volatile
 13517  0038E4  868B               	bsf	3979,3,c	;volatile
 13518                           
 13519                           ;libraries/lcd_lowlevel.c: 73:   PORTA = (240 -1) >> 8; LATC3 = 0; LATC3 = 1;;
 13520  0038E6  0E00               	movlw	0
 13521  0038E8  6E80               	movwf	128,c	;volatile
 13522  0038EA  968B               	bcf	3979,3,c	;volatile
 13523  0038EC  868B               	bsf	3979,3,c	;volatile
 13524                           
 13525                           ;libraries/lcd_lowlevel.c: 74:   PORTA = (240 -1); LATC3 = 0; LATC3 = 1;;
 13526  0038EE  0EEF               	movlw	239
 13527  0038F0  6E80               	movwf	128,c	;volatile
 13528  0038F2  968B               	bcf	3979,3,c	;volatile
 13529  0038F4  868B               	bsf	3979,3,c	;volatile
 13530                           
 13531                           ;libraries/lcd_lowlevel.c: 76:   PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 = 
      +                          1;;
 13532  0038F6  0E2B               	movlw	43
 13533  0038F8  6E80               	movwf	128,c	;volatile
 13534  0038FA  988B               	bcf	3979,4,c	;volatile
 13535  0038FC  968B               	bcf	3979,3,c	;volatile
 13536  0038FE  868B               	bsf	3979,3,c	;volatile
 13537  003900  888B               	bsf	3979,4,c	;volatile
 13538                           
 13539                           ;libraries/lcd_lowlevel.c: 77:   PORTA = posY>>8; LATC3 = 0; LATC3 = 1;;
 13540  003902  C015  FF80         	movff	LCD_Read@posY+1,3968	;volatile
 13541  003906  968B               	bcf	3979,3,c	;volatile
 13542  003908  868B               	bsf	3979,3,c	;volatile
 13543                           
 13544                           ;libraries/lcd_lowlevel.c: 78:   PORTA = posY; LATC3 = 0; LATC3 = 1;;
 13545  00390A  C014  FF80         	movff	LCD_Read@posY,3968	;volatile
 13546  00390E  968B               	bcf	3979,3,c	;volatile
 13547  003910  868B               	bsf	3979,3,c	;volatile
 13548                           
 13549                           ;libraries/lcd_lowlevel.c: 79:   PORTA = (320 -1) >> 8; LATC3 = 0; LATC3 = 1;;
 13550  003912  0E01               	movlw	1
 13551  003914  6E80               	movwf	128,c	;volatile
 13552  003916  968B               	bcf	3979,3,c	;volatile
 13553  003918  868B               	bsf	3979,3,c	;volatile
 13554                           
 13555                           ;libraries/lcd_lowlevel.c: 80:   PORTA = (320 -1); LATC3 = 0; LATC3 = 1;;
 13556  00391A  0E3F               	movlw	63
 13557  00391C  6E80               	movwf	128,c	;volatile
 13558  00391E  968B               	bcf	3979,3,c	;volatile
 13559  003920  868B               	bsf	3979,3,c	;volatile
 13560                           
 13561                           ;libraries/lcd_lowlevel.c: 82:   PORTA = 0x2E; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 = 
      +                          1;;
 13562  003922  0E2E               	movlw	46
 13563  003924  6E80               	movwf	128,c	;volatile
 13564  003926  988B               	bcf	3979,4,c	;volatile
 13565  003928  968B               	bcf	3979,3,c	;volatile
 13566  00392A  868B               	bsf	3979,3,c	;volatile
 13567  00392C  888B               	bsf	3979,4,c	;volatile
 13568                           
 13569                           ;libraries/lcd_lowlevel.c: 83:  TRISA = 0xFF;
 13570  00392E  6892               	setf	146,c	;volatile
 13571                           
 13572                           ;libraries/lcd_lowlevel.c: 84:  LATC2 = 0;
 13573  003930  948B               	bcf	3979,2,c	;volatile
 13574                           
 13575                           ;libraries/lcd_lowlevel.c: 85:   __nop();
 13576  003932  F000               	nop	
 13577                           
 13578                           ;libraries/lcd_lowlevel.c: 86:  LATC2 = 1;
 13579  003934  848B               	bsf	3979,2,c	;volatile
 13580                           
 13581                           ;libraries/lcd_lowlevel.c: 87:  TRISA = 0xFF;
 13582  003936  6892               	setf	146,c	;volatile
 13583                           
 13584                           ;libraries/lcd_lowlevel.c: 88:  LATC2 = 0;
 13585  003938  948B               	bcf	3979,2,c	;volatile
 13586                           
 13587                           ;libraries/lcd_lowlevel.c: 89:   __nop();
 13588  00393A  F000               	nop	
 13589                           
 13590                           ;libraries/lcd_lowlevel.c: 90:  temp16 = PORTA;
 13591  00393C  CF80 F01A          	movff	3968,LCD_Read@temp16	;volatile
 13592  003940  6A1B               	clrf	(LCD_Read@temp16+1)^0,c
 13593                           
 13594                           ;libraries/lcd_lowlevel.c: 91:  LATC2 = 1;
 13595  003942  848B               	bsf	3979,2,c	;volatile
 13596                           
 13597                           ;libraries/lcd_lowlevel.c: 92:   temp16 = temp16 >> 3;
 13598  003944  C01A  F016         	movff	LCD_Read@temp16,??_LCD_Read
 13599  003948  C01B  F017         	movff	LCD_Read@temp16+1,??_LCD_Read+1
 13600  00394C  90D8               	bcf	status,0,c
 13601  00394E  3217               	rrcf	(??_LCD_Read+1)^0,f,c
 13602  003950  3216               	rrcf	??_LCD_Read^0,f,c
 13603  003952  90D8               	bcf	status,0,c
 13604  003954  3217               	rrcf	(??_LCD_Read+1)^0,f,c
 13605  003956  3216               	rrcf	??_LCD_Read^0,f,c
 13606  003958  90D8               	bcf	status,0,c
 13607  00395A  3217               	rrcf	(??_LCD_Read+1)^0,f,c
 13608  00395C  3216               	rrcf	??_LCD_Read^0,f,c
 13609  00395E  C016  F01A         	movff	??_LCD_Read,LCD_Read@temp16
 13610  003962  C017  F01B         	movff	??_LCD_Read+1,LCD_Read@temp16+1
 13611                           
 13612                           ;libraries/lcd_lowlevel.c: 93:   color = temp16 << 11;
 13613  003966  C01A  F016         	movff	LCD_Read@temp16,??_LCD_Read
 13614  00396A  C01B  F017         	movff	LCD_Read@temp16+1,??_LCD_Read+1
 13615  00396E  0E0B               	movlw	11
 13616  003970                     u3335:
 13617  003970  90D8               	bcf	status,0,c
 13618  003972  3616               	rlcf	??_LCD_Read^0,f,c
 13619  003974  3617               	rlcf	(??_LCD_Read+1)^0,f,c
 13620  003976  2EE8               	decfsz	wreg,f,c
 13621  003978  D7FB               	goto	u3335
 13622  00397A  C016  F018         	movff	??_LCD_Read,LCD_Read@color
 13623  00397E  C017  F019         	movff	??_LCD_Read+1,LCD_Read@color+1
 13624                           
 13625                           ;libraries/lcd_lowlevel.c: 94:  LATC2 = 0;
 13626  003982  948B               	bcf	3979,2,c	;volatile
 13627                           
 13628                           ;libraries/lcd_lowlevel.c: 95:   __nop();
 13629  003984  F000               	nop	
 13630                           
 13631                           ;libraries/lcd_lowlevel.c: 96:  temp16 = PORTA;
 13632  003986  CF80 F01A          	movff	3968,LCD_Read@temp16	;volatile
 13633  00398A  6A1B               	clrf	(LCD_Read@temp16+1)^0,c
 13634                           
 13635                           ;libraries/lcd_lowlevel.c: 97:  LATC2 = 1;
 13636  00398C  848B               	bsf	3979,2,c	;volatile
 13637                           
 13638                           ;libraries/lcd_lowlevel.c: 98:   temp16 = temp16 >> 2;
 13639  00398E  C01A  F016         	movff	LCD_Read@temp16,??_LCD_Read
 13640  003992  C01B  F017         	movff	LCD_Read@temp16+1,??_LCD_Read+1
 13641  003996  90D8               	bcf	status,0,c
 13642  003998  3217               	rrcf	(??_LCD_Read+1)^0,f,c
 13643  00399A  3216               	rrcf	??_LCD_Read^0,f,c
 13644  00399C  90D8               	bcf	status,0,c
 13645  00399E  3217               	rrcf	(??_LCD_Read+1)^0,f,c
 13646  0039A0  3216               	rrcf	??_LCD_Read^0,f,c
 13647  0039A2  C016  F01A         	movff	??_LCD_Read,LCD_Read@temp16
 13648  0039A6  C017  F01B         	movff	??_LCD_Read+1,LCD_Read@temp16+1
 13649                           
 13650                           ;libraries/lcd_lowlevel.c: 99:   color |= temp16 << 5;
 13651  0039AA  C01A  F016         	movff	LCD_Read@temp16,??_LCD_Read
 13652  0039AE  C01B  F017         	movff	LCD_Read@temp16+1,??_LCD_Read+1
 13653  0039B2  0E05               	movlw	5
 13654  0039B4                     u3345:
 13655  0039B4  90D8               	bcf	status,0,c
 13656  0039B6  3616               	rlcf	??_LCD_Read^0,f,c
 13657  0039B8  3617               	rlcf	(??_LCD_Read+1)^0,f,c
 13658  0039BA  2EE8               	decfsz	wreg,f,c
 13659  0039BC  D7FB               	goto	u3345
 13660  0039BE  5016               	movf	??_LCD_Read^0,w,c
 13661  0039C0  1218               	iorwf	LCD_Read@color^0,f,c
 13662  0039C2  5017               	movf	(??_LCD_Read+1)^0,w,c
 13663  0039C4  1219               	iorwf	(LCD_Read@color+1)^0,f,c
 13664                           
 13665                           ;libraries/lcd_lowlevel.c: 100:  LATC2 = 0;
 13666  0039C6  948B               	bcf	3979,2,c	;volatile
 13667                           
 13668                           ;libraries/lcd_lowlevel.c: 101:   __nop();
 13669  0039C8  F000               	nop	
 13670                           
 13671                           ;libraries/lcd_lowlevel.c: 102:  temp16 |= PORTA;
 13672  0039CA  5080               	movf	128,w,c	;volatile
 13673  0039CC  121A               	iorwf	LCD_Read@temp16^0,f,c
 13674                           
 13675                           ;libraries/lcd_lowlevel.c: 103:  LATC2 = 1;
 13676  0039CE  848B               	bsf	3979,2,c	;volatile
 13677                           
 13678                           ;libraries/lcd_lowlevel.c: 104:   temp16 = temp16 >> 3;
 13679  0039D0  C01A  F016         	movff	LCD_Read@temp16,??_LCD_Read
 13680  0039D4  C01B  F017         	movff	LCD_Read@temp16+1,??_LCD_Read+1
 13681  0039D8  90D8               	bcf	status,0,c
 13682  0039DA  3217               	rrcf	(??_LCD_Read+1)^0,f,c
 13683  0039DC  3216               	rrcf	??_LCD_Read^0,f,c
 13684  0039DE  90D8               	bcf	status,0,c
 13685  0039E0  3217               	rrcf	(??_LCD_Read+1)^0,f,c
 13686  0039E2  3216               	rrcf	??_LCD_Read^0,f,c
 13687  0039E4  90D8               	bcf	status,0,c
 13688  0039E6  3217               	rrcf	(??_LCD_Read+1)^0,f,c
 13689  0039E8  3216               	rrcf	??_LCD_Read^0,f,c
 13690  0039EA  C016  F01A         	movff	??_LCD_Read,LCD_Read@temp16
 13691  0039EE  C017  F01B         	movff	??_LCD_Read+1,LCD_Read@temp16+1
 13692                           
 13693                           ;libraries/lcd_lowlevel.c: 105:   color |= temp16;
 13694  0039F2  501A               	movf	LCD_Read@temp16^0,w,c
 13695  0039F4  1218               	iorwf	LCD_Read@color^0,f,c
 13696  0039F6  501B               	movf	(LCD_Read@temp16+1)^0,w,c
 13697  0039F8  1219               	iorwf	(LCD_Read@color+1)^0,f,c
 13698                           
 13699                           ;libraries/lcd_lowlevel.c: 106:  TRISA = 0x00;
 13700  0039FA  0E00               	movlw	0
 13701  0039FC  6E92               	movwf	146,c	;volatile
 13702                           
 13703                           ;libraries/lcd_lowlevel.c: 107:  return color;
 13704  0039FE  C018  F012         	movff	LCD_Read@color,?_LCD_Read
 13705  003A02  C019  F013         	movff	LCD_Read@color+1,?_LCD_Read+1
 13706  003A06  0012               	return		;funcret
 13707  003A08                     __end_of_LCD_Read:
 13708                           	callstack 0
 13709                           
 13710 ;; *************** function _LCD_Bitmap *****************
 13711 ;; Defined at:
 13712 ;;		line 823 in file "libraries/lcd_highlevel.c"
 13713 ;; Parameters:    Size  Location     Type
 13714 ;;  bmpPtr          2   38[COMRAM] PTR const unsigned char 
 13715 ;;		 -> STR_8(9), STR_7(2), STR_6(9), STR_5(9), 
 13716 ;;		 -> STR_4(11), 
 13717 ;;  posX            2   40[COMRAM] unsigned short 
 13718 ;;  posY            2   42[COMRAM] unsigned short 
 13719 ;; Auto vars:     Size  Location     Type
 13720 ;;  bfOffBits       4    0[BANK0 ] unsigned long 
 13721 ;;  i               2   26[BANK0 ] unsigned short 
 13722 ;;  jumpColor       2   24[BANK0 ] unsigned short 
 13723 ;;  biWidth         2   22[BANK0 ] unsigned short 
 13724 ;;  newY            2   20[BANK0 ] unsigned short 
 13725 ;;  strPtr          2   17[BANK0 ] PTR struct .
 13726 ;;		 -> STR_8(9), STR_7(2), STR_6(9), STR_5(9), 
 13727 ;;		 -> STR_4(11), 
 13728 ;;  color           2   15[BANK0 ] unsigned short 
 13729 ;;  curXPos         2   13[BANK0 ] unsigned short 
 13730 ;;  biHeight        2   11[BANK0 ] unsigned short 
 13731 ;;  colorTablePt    2    9[BANK0 ] PTR unsigned char 
 13732 ;;		 -> STR_8(9), STR_7(2), STR_6(9), STR_5(9), 
 13733 ;;		 -> STR_4(11), 
 13734 ;;  curYPos         2    7[BANK0 ] unsigned short 
 13735 ;;  jumpCount       2    5[BANK0 ] unsigned short 
 13736 ;;  pixelCount      1   19[BANK0 ] unsigned char 
 13737 ;;  endOfImage      1    4[BANK0 ] unsigned char 
 13738 ;; Return value:  Size  Location     Type
 13739 ;;                  1    wreg      unsigned char 
 13740 ;; Registers used:
 13741 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13742 ;; Tracked objects:
 13743 ;;		On entry : 3F/0
 13744 ;;		On exit  : 3F/0
 13745 ;;		Unchanged: 0/0
 13746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13747 ;;      Params:         6       0       0       0       0       0       0
 13748 ;;      Locals:         0      28       0       0       0       0       0
 13749 ;;      Temps:          4       0       0       0       0       0       0
 13750 ;;      Totals:        10      28       0       0       0       0       0
 13751 ;;Total ram usage:       38 bytes
 13752 ;; Hardware stack levels used: 1
 13753 ;; Hardware stack levels required when called: 5
 13754 ;; This function calls:
 13755 ;;		_RGB2LCD
 13756 ;;		___lwdiv
 13757 ;;		___lwmod
 13758 ;;		___wmul
 13759 ;; This function is called by:
 13760 ;;		_LCD_ButtonDraw
 13761 ;; This function uses a non-reentrant model
 13762 ;;
 13763                           
 13764                           	psect	text56
 13765  00091C                     __ptext56:
 13766                           	callstack 0
 13767  00091C                     _LCD_Bitmap:
 13768                           	callstack 19
 13769                           
 13770                           ; BSR set to: 0
 13771                           ;libraries/lcd_highlevel.c: 823: uint8_t LCD_Bitmap(const uint8_t * bmpPtr, uint16_t pos
      +                          X, uint16_t posY);libraries/lcd_highlevel.c: 824: {;libraries/lcd_highlevel.c: 825:   ui
      +                          nt32_t bfOffBits;;libraries/lcd_highlevel.c: 826:   uint16_t biWidth, biHeight;;librarie
      +                          s/lcd_highlevel.c: 827:   uint8_t * colorTablePtr;;libraries/lcd_highlevel.c: 828:   uin
      +                          t8_t endOfImage;;libraries/lcd_highlevel.c: 829:   uint16_t i,curXPos,curYPos;;libraries
      +                          /lcd_highlevel.c: 830:   uint8_t pixelCount;;libraries/lcd_highlevel.c: 831:   uint16_t 
      +                          color;
 13772                           
 13773                           ;incstack = 0
 13774  00091C  C027  F071         	movff	LCD_Bitmap@bmpPtr,LCD_Bitmap@strPtr
 13775  000920  C028  F072         	movff	LCD_Bitmap@bmpPtr+1,LCD_Bitmap@strPtr+1
 13776                           
 13777                           ; BSR set to: 0
 13778                           ;libraries/lcd_highlevel.c: 839:   bfOffBits = strPtr->bfOffBits;
 13779  000924  0E0A               	movlw	10
 13780  000926  2571               	addwf	LCD_Bitmap@strPtr& (0+255),w,b
 13781  000928  6E2D               	movwf	??_LCD_Bitmap^0,c
 13782  00092A  0E00               	movlw	0
 13783  00092C  2172               	addwfc	(LCD_Bitmap@strPtr+1)& (0+255),w,b
 13784  00092E  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 13785  000930  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 13786  000934  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 13787  000938                     	if	0	;tblptru may be non-zero
 13788  000938                     	endif
 13789  000938                     	if	0	;tblptru may be non-zero
 13790  000938                     	endif
 13791  000938  0009               	tblrd		*+
 13792  00093A  CFF5 F060          	movff	tablat,LCD_Bitmap@bfOffBits
 13793  00093E  0009               	tblrd		*+
 13794  000940  CFF5 F061          	movff	tablat,LCD_Bitmap@bfOffBits+1
 13795  000944  0009               	tblrd		*+
 13796  000946  CFF5 F062          	movff	tablat,LCD_Bitmap@bfOffBits+2
 13797  00094A  000A               	tblrd		*-
 13798  00094C  CFF5 F063          	movff	tablat,LCD_Bitmap@bfOffBits+3
 13799                           
 13800                           ; BSR set to: 0
 13801                           ;libraries/lcd_highlevel.c: 840:   biWidth = strPtr->biWidth;
 13802  000950  0E12               	movlw	18
 13803  000952  2571               	addwf	LCD_Bitmap@strPtr& (0+255),w,b
 13804  000954  6E2D               	movwf	??_LCD_Bitmap^0,c
 13805  000956  0E00               	movlw	0
 13806  000958  2172               	addwfc	(LCD_Bitmap@strPtr+1)& (0+255),w,b
 13807  00095A  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 13808  00095C  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 13809  000960  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 13810  000964                     	if	0	;tblptru may be non-zero
 13811  000964                     	endif
 13812  000964                     	if	0	;tblptru may be non-zero
 13813  000964                     	endif
 13814  000964  0009               	tblrd		*+
 13815  000966  CFF5 F076          	movff	tablat,LCD_Bitmap@biWidth
 13816  00096A  000A               	tblrd		*-
 13817  00096C  CFF5 F077          	movff	tablat,LCD_Bitmap@biWidth+1
 13818                           
 13819                           ; BSR set to: 0
 13820                           ;libraries/lcd_highlevel.c: 841:   biHeight = strPtr->biHeight;
 13821  000970  0E16               	movlw	22
 13822  000972  2571               	addwf	LCD_Bitmap@strPtr& (0+255),w,b
 13823  000974  6E2D               	movwf	??_LCD_Bitmap^0,c
 13824  000976  0E00               	movlw	0
 13825  000978  2172               	addwfc	(LCD_Bitmap@strPtr+1)& (0+255),w,b
 13826  00097A  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 13827  00097C  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 13828  000980  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 13829  000984                     	if	0	;tblptru may be non-zero
 13830  000984                     	endif
 13831  000984                     	if	0	;tblptru may be non-zero
 13832  000984                     	endif
 13833  000984  0009               	tblrd		*+
 13834  000986  CFF5 F06B          	movff	tablat,LCD_Bitmap@biHeight
 13835  00098A  000A               	tblrd		*-
 13836  00098C  CFF5 F06C          	movff	tablat,LCD_Bitmap@biHeight+1
 13837                           
 13838                           ; BSR set to: 0
 13839                           ;libraries/lcd_highlevel.c: 842:   if((strPtr->biBitCount != 8) ||
 13840  000990  0E1C               	movlw	28
 13841  000992  2571               	addwf	LCD_Bitmap@strPtr& (0+255),w,b
 13842  000994  6E2D               	movwf	??_LCD_Bitmap^0,c
 13843  000996  0E00               	movlw	0
 13844  000998  2172               	addwfc	(LCD_Bitmap@strPtr+1)& (0+255),w,b
 13845  00099A  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 13846  00099C  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 13847  0009A0  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 13848  0009A4                     	if	0	;tblptru may be non-zero
 13849  0009A4                     	endif
 13850  0009A4                     	if	0	;tblptru may be non-zero
 13851  0009A4                     	endif
 13852  0009A4  0009               	tblrd		*+
 13853  0009A6  0E08               	movlw	8
 13854  0009A8  18F5               	xorwf	tablat,w,c
 13855  0009AA  0009               	tblrd		*+
 13856  0009AC  10F5               	iorwf	tablat,w,c
 13857  0009AE  A4D8               	btfss	status,2,c
 13858  0009B0  0012               	return	
 13859                           
 13860                           ; BSR set to: 0
 13861  0009B2  0E1E               	movlw	30
 13862  0009B4  2571               	addwf	LCD_Bitmap@strPtr& (0+255),w,b
 13863  0009B6  6E2D               	movwf	??_LCD_Bitmap^0,c
 13864  0009B8  0E00               	movlw	0
 13865  0009BA  2172               	addwfc	(LCD_Bitmap@strPtr+1)& (0+255),w,b
 13866  0009BC  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 13867  0009BE  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 13868  0009C2  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 13869  0009C6                     	if	0	;tblptru may be non-zero
 13870  0009C6                     	endif
 13871  0009C6                     	if	0	;tblptru may be non-zero
 13872  0009C6                     	endif
 13873  0009C6  0009               	tblrd		*+
 13874  0009C8  04F5               	decf	tablat,w,c
 13875  0009CA  0009               	tblrd		*+
 13876  0009CC  10F5               	iorwf	tablat,w,c
 13877  0009CE  0009               	tblrd		*+
 13878  0009D0  10F5               	iorwf	tablat,w,c
 13879  0009D2  0009               	tblrd		*+
 13880  0009D4  10F5               	iorwf	tablat,w,c
 13881  0009D6  A4D8               	btfss	status,2,c
 13882  0009D8  0012               	return	
 13883                           
 13884                           ; BSR set to: 0
 13885                           ;libraries/lcd_highlevel.c: 847:   if(((posX + biWidth) > (240)) ||
 13886  0009DA  5176               	movf	LCD_Bitmap@biWidth& (0+255),w,b
 13887  0009DC  2429               	addwf	LCD_Bitmap@posX^0,w,c
 13888  0009DE  6E2D               	movwf	??_LCD_Bitmap^0,c
 13889  0009E0  5177               	movf	(LCD_Bitmap@biWidth+1)& (0+255),w,b
 13890  0009E2  202A               	addwfc	(LCD_Bitmap@posX+1)^0,w,c
 13891  0009E4  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 13892  0009E6  502E               	movf	(??_LCD_Bitmap+1)^0,w,c
 13893  0009E8  E103               	bnz	u6321
 13894  0009EA  0EF1               	movlw	241
 13895  0009EC  5C2D               	subwf	??_LCD_Bitmap^0,w,c
 13896  0009EE  B0D8               	btfsc	status,0,c
 13897  0009F0                     u6321:
 13898  0009F0  0012               	return	
 13899                           
 13900                           ; BSR set to: 0
 13901  0009F2  516B               	movf	LCD_Bitmap@biHeight& (0+255),w,b
 13902  0009F4  242B               	addwf	LCD_Bitmap@posY^0,w,c
 13903  0009F6  6E2D               	movwf	??_LCD_Bitmap^0,c
 13904  0009F8  516C               	movf	(LCD_Bitmap@biHeight+1)& (0+255),w,b
 13905  0009FA  202C               	addwfc	(LCD_Bitmap@posY+1)^0,w,c
 13906  0009FC  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 13907  0009FE  0E41               	movlw	65
 13908  000A00  5C2D               	subwf	??_LCD_Bitmap^0,w,c
 13909  000A02  0E01               	movlw	1
 13910  000A04  582E               	subwfb	(??_LCD_Bitmap+1)^0,w,c
 13911  000A06  B0D8               	btfsc	status,0,c
 13912  000A08  0012               	return	
 13913                           
 13914                           ; BSR set to: 0
 13915                           ;libraries/lcd_highlevel.c: 853:   PORTA = 0x36; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
 13916  000A0A  0E36               	movlw	54
 13917  000A0C  6E80               	movwf	128,c	;volatile
 13918                           
 13919                           ; BSR set to: 0
 13920  000A0E  988B               	bcf	3979,4,c	;volatile
 13921                           
 13922                           ; BSR set to: 0
 13923  000A10  968B               	bcf	3979,3,c	;volatile
 13924                           
 13925                           ; BSR set to: 0
 13926  000A12  868B               	bsf	3979,3,c	;volatile
 13927                           
 13928                           ; BSR set to: 0
 13929  000A14  888B               	bsf	3979,4,c	;volatile
 13930                           
 13931                           ;libraries/lcd_highlevel.c: 855:   PORTA = 0b10000000; LATC3 = 0; LATC3 = 1;;
 13932  000A16  0E80               	movlw	128
 13933  000A18  6E80               	movwf	128,c	;volatile
 13934                           
 13935                           ; BSR set to: 0
 13936  000A1A  968B               	bcf	3979,3,c	;volatile
 13937                           
 13938                           ; BSR set to: 0
 13939  000A1C  868B               	bsf	3979,3,c	;volatile
 13940                           
 13941                           ; BSR set to: 0
 13942                           ;libraries/lcd_highlevel.c: 857:   colorTablePtr = (uint8_t *)bmpPtr + 54;
 13943  000A1E  0E36               	movlw	54
 13944  000A20  2427               	addwf	LCD_Bitmap@bmpPtr^0,w,c
 13945  000A22  6F69               	movwf	LCD_Bitmap@colorTablePtr& (0+255),b
 13946  000A24  0E00               	movlw	0
 13947  000A26  2028               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,w,c
 13948  000A28  6F6A               	movwf	(LCD_Bitmap@colorTablePtr+1)& (0+255),b
 13949                           
 13950                           ; BSR set to: 0
 13951                           ;libraries/lcd_highlevel.c: 858:   bmpPtr += bfOffBits;
 13952  000A2A  5160               	movf	LCD_Bitmap@bfOffBits& (0+255),w,b
 13953  000A2C  2627               	addwf	LCD_Bitmap@bmpPtr^0,f,c
 13954  000A2E  5161               	movf	(LCD_Bitmap@bfOffBits+1)& (0+255),w,b
 13955  000A30  2228               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,f,c
 13956                           
 13957                           ;libraries/lcd_highlevel.c: 859:   endOfImage = 0;
 13958  000A32  0E00               	movlw	0
 13959  000A34  6F64               	movwf	LCD_Bitmap@endOfImage& (0+255),b
 13960                           
 13961                           ; BSR set to: 0
 13962                           ;libraries/lcd_highlevel.c: 860:   jumpColor = RGB2LCD(colorTablePtr);
 13963  000A36  C069  F012         	movff	LCD_Bitmap@colorTablePtr,RGB2LCD@colorTableEntry
 13964  000A3A  C06A  F013         	movff	LCD_Bitmap@colorTablePtr+1,RGB2LCD@colorTableEntry+1
 13965  000A3E  EC6F  F023         	call	_RGB2LCD	;wreg free
 13966  000A42  C012  F078         	movff	?_RGB2LCD,LCD_Bitmap@jumpColor
 13967  000A46  C013  F079         	movff	?_RGB2LCD+1,LCD_Bitmap@jumpColor+1
 13968                           
 13969                           ; BSR set to: 0
 13970                           ;libraries/lcd_highlevel.c: 862:   PORTA = 0x2A; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
 13971  000A4A  0E2A               	movlw	42
 13972  000A4C  6E80               	movwf	128,c	;volatile
 13973                           
 13974                           ; BSR set to: 0
 13975  000A4E  988B               	bcf	3979,4,c	;volatile
 13976                           
 13977                           ; BSR set to: 0
 13978  000A50  968B               	bcf	3979,3,c	;volatile
 13979                           
 13980                           ; BSR set to: 0
 13981  000A52  868B               	bsf	3979,3,c	;volatile
 13982                           
 13983                           ; BSR set to: 0
 13984  000A54  888B               	bsf	3979,4,c	;volatile
 13985                           
 13986                           ; BSR set to: 0
 13987                           ;libraries/lcd_highlevel.c: 863:   PORTA = posX>>8; LATC3 = 0; LATC3 = 1;;
 13988  000A56  C02A  FF80         	movff	LCD_Bitmap@posX+1,3968	;volatile
 13989                           
 13990                           ; BSR set to: 0
 13991  000A5A  968B               	bcf	3979,3,c	;volatile
 13992                           
 13993                           ; BSR set to: 0
 13994  000A5C  868B               	bsf	3979,3,c	;volatile
 13995                           
 13996                           ; BSR set to: 0
 13997                           ;libraries/lcd_highlevel.c: 864:   PORTA = posX; LATC3 = 0; LATC3 = 1;;
 13998  000A5E  C029  FF80         	movff	LCD_Bitmap@posX,3968	;volatile
 13999                           
 14000                           ; BSR set to: 0
 14001  000A62  968B               	bcf	3979,3,c	;volatile
 14002                           
 14003                           ; BSR set to: 0
 14004  000A64  868B               	bsf	3979,3,c	;volatile
 14005                           
 14006                           ; BSR set to: 0
 14007                           ;libraries/lcd_highlevel.c: 865:   posX = posX + biWidth-1;
 14008  000A66  5176               	movf	LCD_Bitmap@biWidth& (0+255),w,b
 14009  000A68  2429               	addwf	LCD_Bitmap@posX^0,w,c
 14010  000A6A  6E2D               	movwf	??_LCD_Bitmap^0,c
 14011  000A6C  5177               	movf	(LCD_Bitmap@biWidth+1)& (0+255),w,b
 14012  000A6E  202A               	addwfc	(LCD_Bitmap@posX+1)^0,w,c
 14013  000A70  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 14014  000A72  0EFF               	movlw	255
 14015  000A74  242D               	addwf	??_LCD_Bitmap^0,w,c
 14016  000A76  6E29               	movwf	LCD_Bitmap@posX^0,c
 14017  000A78  0EFF               	movlw	255
 14018  000A7A  202E               	addwfc	(??_LCD_Bitmap+1)^0,w,c
 14019  000A7C  6E2A               	movwf	(LCD_Bitmap@posX+1)^0,c
 14020                           
 14021                           ; BSR set to: 0
 14022                           ;libraries/lcd_highlevel.c: 866:   PORTA = posX>>8; LATC3 = 0; LATC3 = 1;;
 14023  000A7E  C02A  FF80         	movff	LCD_Bitmap@posX+1,3968	;volatile
 14024                           
 14025                           ; BSR set to: 0
 14026  000A82  968B               	bcf	3979,3,c	;volatile
 14027                           
 14028                           ; BSR set to: 0
 14029  000A84  868B               	bsf	3979,3,c	;volatile
 14030                           
 14031                           ; BSR set to: 0
 14032                           ;libraries/lcd_highlevel.c: 867:   PORTA = posX; LATC3 = 0; LATC3 = 1;;
 14033  000A86  C029  FF80         	movff	LCD_Bitmap@posX,3968	;volatile
 14034                           
 14035                           ; BSR set to: 0
 14036  000A8A  968B               	bcf	3979,3,c	;volatile
 14037                           
 14038                           ; BSR set to: 0
 14039  000A8C  868B               	bsf	3979,3,c	;volatile
 14040                           
 14041                           ; BSR set to: 0
 14042                           ;libraries/lcd_highlevel.c: 869:   PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
 14043  000A8E  0E2B               	movlw	43
 14044  000A90  6E80               	movwf	128,c	;volatile
 14045                           
 14046                           ; BSR set to: 0
 14047  000A92  988B               	bcf	3979,4,c	;volatile
 14048                           
 14049                           ; BSR set to: 0
 14050  000A94  968B               	bcf	3979,3,c	;volatile
 14051                           
 14052                           ; BSR set to: 0
 14053  000A96  868B               	bsf	3979,3,c	;volatile
 14054                           
 14055                           ; BSR set to: 0
 14056  000A98  888B               	bsf	3979,4,c	;volatile
 14057                           
 14058                           ; BSR set to: 0
 14059                           ;libraries/lcd_highlevel.c: 870:   newY = 320 - posY - biHeight;
 14060  000A9A  C02B  F02D         	movff	LCD_Bitmap@posY,??_LCD_Bitmap
 14061  000A9E  C02C  F02E         	movff	LCD_Bitmap@posY+1,??_LCD_Bitmap+1
 14062  000AA2  1E2D               	comf	??_LCD_Bitmap^0,f,c
 14063  000AA4  1E2E               	comf	(??_LCD_Bitmap+1)^0,f,c
 14064  000AA6  4A2D               	infsnz	??_LCD_Bitmap^0,f,c
 14065  000AA8  2A2E               	incf	(??_LCD_Bitmap+1)^0,f,c
 14066  000AAA  516B               	movf	LCD_Bitmap@biHeight& (0+255),w,b
 14067  000AAC  5E2D               	subwf	??_LCD_Bitmap^0,f,c
 14068  000AAE  516C               	movf	(LCD_Bitmap@biHeight+1)& (0+255),w,b
 14069  000AB0  5A2E               	subwfb	(??_LCD_Bitmap+1)^0,f,c
 14070  000AB2  0E40               	movlw	64
 14071  000AB4  242D               	addwf	??_LCD_Bitmap^0,w,c
 14072  000AB6  6F74               	movwf	LCD_Bitmap@newY& (0+255),b
 14073  000AB8  0E01               	movlw	1
 14074  000ABA  202E               	addwfc	(??_LCD_Bitmap+1)^0,w,c
 14075  000ABC  6F75               	movwf	(LCD_Bitmap@newY+1)& (0+255),b
 14076                           
 14077                           ; BSR set to: 0
 14078                           ;libraries/lcd_highlevel.c: 871:   PORTA = newY>>8; LATC3 = 0; LATC3 = 1;;
 14079  000ABE  C075  FF80         	movff	LCD_Bitmap@newY+1,3968	;volatile
 14080                           
 14081                           ; BSR set to: 0
 14082  000AC2  968B               	bcf	3979,3,c	;volatile
 14083                           
 14084                           ; BSR set to: 0
 14085  000AC4  868B               	bsf	3979,3,c	;volatile
 14086                           
 14087                           ; BSR set to: 0
 14088                           ;libraries/lcd_highlevel.c: 872:   PORTA = newY; LATC3 = 0; LATC3 = 1;;
 14089  000AC6  C074  FF80         	movff	LCD_Bitmap@newY,3968	;volatile
 14090                           
 14091                           ; BSR set to: 0
 14092  000ACA  968B               	bcf	3979,3,c	;volatile
 14093                           
 14094                           ; BSR set to: 0
 14095  000ACC  868B               	bsf	3979,3,c	;volatile
 14096                           
 14097                           ; BSR set to: 0
 14098                           ;libraries/lcd_highlevel.c: 873:   newY = newY + biHeight-1;
 14099  000ACE  516B               	movf	LCD_Bitmap@biHeight& (0+255),w,b
 14100  000AD0  2574               	addwf	LCD_Bitmap@newY& (0+255),w,b
 14101  000AD2  6E2D               	movwf	??_LCD_Bitmap^0,c
 14102  000AD4  516C               	movf	(LCD_Bitmap@biHeight+1)& (0+255),w,b
 14103  000AD6  2175               	addwfc	(LCD_Bitmap@newY+1)& (0+255),w,b
 14104  000AD8  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 14105  000ADA  0EFF               	movlw	255
 14106  000ADC  242D               	addwf	??_LCD_Bitmap^0,w,c
 14107  000ADE  6F74               	movwf	LCD_Bitmap@newY& (0+255),b
 14108  000AE0  0EFF               	movlw	255
 14109  000AE2  202E               	addwfc	(??_LCD_Bitmap+1)^0,w,c
 14110  000AE4  6F75               	movwf	(LCD_Bitmap@newY+1)& (0+255),b
 14111                           
 14112                           ; BSR set to: 0
 14113                           ;libraries/lcd_highlevel.c: 874:   PORTA = newY>>8; LATC3 = 0; LATC3 = 1;;
 14114  000AE6  C075  FF80         	movff	LCD_Bitmap@newY+1,3968	;volatile
 14115                           
 14116                           ; BSR set to: 0
 14117  000AEA  968B               	bcf	3979,3,c	;volatile
 14118                           
 14119                           ; BSR set to: 0
 14120  000AEC  868B               	bsf	3979,3,c	;volatile
 14121                           
 14122                           ; BSR set to: 0
 14123                           ;libraries/lcd_highlevel.c: 875:   PORTA = newY; LATC3 = 0; LATC3 = 1;;
 14124  000AEE  C074  FF80         	movff	LCD_Bitmap@newY,3968	;volatile
 14125                           
 14126                           ; BSR set to: 0
 14127  000AF2  968B               	bcf	3979,3,c	;volatile
 14128                           
 14129                           ; BSR set to: 0
 14130  000AF4  868B               	bsf	3979,3,c	;volatile
 14131                           
 14132                           ; BSR set to: 0
 14133                           ;libraries/lcd_highlevel.c: 877:   PORTA = 0x2C; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
 14134  000AF6  0E2C               	movlw	44
 14135  000AF8  6E80               	movwf	128,c	;volatile
 14136                           
 14137                           ; BSR set to: 0
 14138  000AFA  988B               	bcf	3979,4,c	;volatile
 14139                           
 14140                           ; BSR set to: 0
 14141  000AFC  968B               	bcf	3979,3,c	;volatile
 14142                           
 14143                           ; BSR set to: 0
 14144  000AFE  868B               	bsf	3979,3,c	;volatile
 14145                           
 14146                           ; BSR set to: 0
 14147  000B00  888B               	bsf	3979,4,c	;volatile
 14148                           
 14149                           ; BSR set to: 0
 14150                           ;libraries/lcd_highlevel.c: 878:   curXPos = 0;
 14151  000B02  0E00               	movlw	0
 14152  000B04  6F6E               	movwf	(LCD_Bitmap@curXPos+1)& (0+255),b
 14153  000B06  0E00               	movlw	0
 14154  000B08  6F6D               	movwf	LCD_Bitmap@curXPos& (0+255),b
 14155                           
 14156                           ; BSR set to: 0
 14157                           ;libraries/lcd_highlevel.c: 879:   curYPos = 0;
 14158  000B0A  0E00               	movlw	0
 14159  000B0C  6F68               	movwf	(LCD_Bitmap@curYPos+1)& (0+255),b
 14160  000B0E  0E00               	movlw	0
 14161  000B10  6F67               	movwf	LCD_Bitmap@curYPos& (0+255),b
 14162  000B12                     l8742:
 14163                           
 14164                           ; BSR set to: 0
 14165                           ;libraries/lcd_highlevel.c: 881:   {;libraries/lcd_highlevel.c: 882:     if(bmpPtr[0] ==
      +                           0)
 14166  000B12  C027  FFF6         	movff	LCD_Bitmap@bmpPtr,tblptrl
 14167  000B16  C028  FFF7         	movff	LCD_Bitmap@bmpPtr+1,tblptrh
 14168  000B1A                     	if	0	;tblptru may be non-zero
 14169  000B1A                     	endif
 14170  000B1A                     	if	0	;tblptru may be non-zero
 14171  000B1A                     	endif
 14172  000B1A  0008               	tblrd		*
 14173  000B1C  50F5               	movf	tablat,w,c
 14174  000B1E  0900               	iorlw	0
 14175  000B20  B4D8               	btfsc	status,2,c
 14176  000B22  D128               	goto	l8828
 14177  000B24  D144               	goto	l8830
 14178  000B26                     l8746:
 14179                           
 14180                           ; BSR set to: 0
 14181                           ;libraries/lcd_highlevel.c: 887:           bmpPtr += 2;
 14182  000B26  0E02               	movlw	2
 14183  000B28  2627               	addwf	LCD_Bitmap@bmpPtr^0,f,c
 14184  000B2A  0E00               	movlw	0
 14185  000B2C  2228               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,f,c
 14186                           
 14187                           ; BSR set to: 0
 14188                           ;libraries/lcd_highlevel.c: 888:           for(i=0;i<biWidth - curXPos;i++)
 14189  000B2E  0E00               	movlw	0
 14190  000B30  6F7B               	movwf	(LCD_Bitmap@i+1)& (0+255),b
 14191  000B32  0E00               	movlw	0
 14192  000B34  6F7A               	movwf	LCD_Bitmap@i& (0+255),b
 14193  000B36  D00A               	goto	l8752
 14194  000B38                     l340:
 14195                           
 14196                           ; BSR set to: 0
 14197                           ;libraries/lcd_highlevel.c: 889:           {;libraries/lcd_highlevel.c: 890:            
      +                           PORTA = jumpColor >> 8; LATC3 = 0; LATC3 = 1;;
 14198  000B38  C079  FF80         	movff	LCD_Bitmap@jumpColor+1,3968	;volatile
 14199  000B3C  968B               	bcf	3979,3,c	;volatile
 14200  000B3E  868B               	bsf	3979,3,c	;volatile
 14201                           
 14202                           ;libraries/lcd_highlevel.c: 891:             PORTA = jumpColor; LATC3 = 0; LATC3 = 1;;
 14203  000B40  C078  FF80         	movff	LCD_Bitmap@jumpColor,3968	;volatile
 14204  000B44  968B               	bcf	3979,3,c	;volatile
 14205  000B46  868B               	bsf	3979,3,c	;volatile
 14206                           
 14207                           ; BSR set to: 0
 14208                           ;libraries/lcd_highlevel.c: 892:           }
 14209  000B48  4B7A               	infsnz	LCD_Bitmap@i& (0+255),f,b
 14210  000B4A  2B7B               	incf	(LCD_Bitmap@i+1)& (0+255),f,b
 14211  000B4C                     l8752:
 14212                           
 14213                           ; BSR set to: 0
 14214  000B4C  516D               	movf	LCD_Bitmap@curXPos& (0+255),w,b
 14215  000B4E  5D76               	subwf	LCD_Bitmap@biWidth& (0+255),w,b
 14216  000B50  6E2D               	movwf	??_LCD_Bitmap^0,c
 14217  000B52  516E               	movf	(LCD_Bitmap@curXPos+1)& (0+255),w,b
 14218  000B54  5977               	subwfb	(LCD_Bitmap@biWidth+1)& (0+255),w,b
 14219  000B56  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 14220  000B58  502D               	movf	??_LCD_Bitmap^0,w,c
 14221  000B5A  5D7A               	subwf	LCD_Bitmap@i& (0+255),w,b
 14222  000B5C  502E               	movf	(??_LCD_Bitmap+1)^0,w,c
 14223  000B5E  597B               	subwfb	(LCD_Bitmap@i+1)& (0+255),w,b
 14224  000B60  A0D8               	btfss	status,0,c
 14225  000B62  D7EA               	goto	l340
 14226                           
 14227                           ; BSR set to: 0
 14228                           ;libraries/lcd_highlevel.c: 893:           curXPos = 0;
 14229  000B64  0E00               	movlw	0
 14230  000B66  6F6E               	movwf	(LCD_Bitmap@curXPos+1)& (0+255),b
 14231  000B68  0E00               	movlw	0
 14232  000B6A  6F6D               	movwf	LCD_Bitmap@curXPos& (0+255),b
 14233                           
 14234                           ; BSR set to: 0
 14235                           ;libraries/lcd_highlevel.c: 894:           curYPos++;
 14236  000B6C  4B67               	infsnz	LCD_Bitmap@curYPos& (0+255),f,b
 14237  000B6E  2B68               	incf	(LCD_Bitmap@curYPos+1)& (0+255),f,b
 14238                           
 14239                           ;libraries/lcd_highlevel.c: 895:         break;
 14240  000B70  D160               	goto	l8854
 14241  000B72                     l8758:
 14242                           
 14243                           ; BSR set to: 0
 14244                           ;libraries/lcd_highlevel.c: 897:           for(i=0;i<biWidth - curXPos;i++)
 14245  000B72  0E00               	movlw	0
 14246  000B74  6F7B               	movwf	(LCD_Bitmap@i+1)& (0+255),b
 14247  000B76  0E00               	movlw	0
 14248  000B78  6F7A               	movwf	LCD_Bitmap@i& (0+255),b
 14249  000B7A  D00A               	goto	l8762
 14250  000B7C                     l345:
 14251                           
 14252                           ; BSR set to: 0
 14253                           ;libraries/lcd_highlevel.c: 898:           {;libraries/lcd_highlevel.c: 899:            
      +                           PORTA = jumpColor >> 8; LATC3 = 0; LATC3 = 1;;
 14254  000B7C  C079  FF80         	movff	LCD_Bitmap@jumpColor+1,3968	;volatile
 14255  000B80  968B               	bcf	3979,3,c	;volatile
 14256  000B82  868B               	bsf	3979,3,c	;volatile
 14257                           
 14258                           ;libraries/lcd_highlevel.c: 900:             PORTA = jumpColor; LATC3 = 0; LATC3 = 1;;
 14259  000B84  C078  FF80         	movff	LCD_Bitmap@jumpColor,3968	;volatile
 14260  000B88  968B               	bcf	3979,3,c	;volatile
 14261  000B8A  868B               	bsf	3979,3,c	;volatile
 14262                           
 14263                           ; BSR set to: 0
 14264                           ;libraries/lcd_highlevel.c: 901:           }
 14265  000B8C  4B7A               	infsnz	LCD_Bitmap@i& (0+255),f,b
 14266  000B8E  2B7B               	incf	(LCD_Bitmap@i+1)& (0+255),f,b
 14267  000B90                     l8762:
 14268                           
 14269                           ; BSR set to: 0
 14270  000B90  516D               	movf	LCD_Bitmap@curXPos& (0+255),w,b
 14271  000B92  5D76               	subwf	LCD_Bitmap@biWidth& (0+255),w,b
 14272  000B94  6E2D               	movwf	??_LCD_Bitmap^0,c
 14273  000B96  516E               	movf	(LCD_Bitmap@curXPos+1)& (0+255),w,b
 14274  000B98  5977               	subwfb	(LCD_Bitmap@biWidth+1)& (0+255),w,b
 14275  000B9A  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 14276  000B9C  502D               	movf	??_LCD_Bitmap^0,w,c
 14277  000B9E  5D7A               	subwf	LCD_Bitmap@i& (0+255),w,b
 14278  000BA0  502E               	movf	(??_LCD_Bitmap+1)^0,w,c
 14279  000BA2  597B               	subwfb	(LCD_Bitmap@i+1)& (0+255),w,b
 14280  000BA4  A0D8               	btfss	status,0,c
 14281  000BA6  D7EA               	goto	l345
 14282                           
 14283                           ; BSR set to: 0
 14284                           ;libraries/lcd_highlevel.c: 902:           for(i=0;i<(biHeight - curYPos -1)*biWidth;i++
      +                          )
 14285  000BA8  0E00               	movlw	0
 14286  000BAA  6F7B               	movwf	(LCD_Bitmap@i+1)& (0+255),b
 14287  000BAC  0E00               	movlw	0
 14288  000BAE  6F7A               	movwf	LCD_Bitmap@i& (0+255),b
 14289  000BB0  D00A               	goto	l8768
 14290  000BB2                     l348:
 14291                           
 14292                           ; BSR set to: 0
 14293                           ;libraries/lcd_highlevel.c: 903:           {;libraries/lcd_highlevel.c: 904:            
      +                           PORTA = jumpColor >> 8; LATC3 = 0; LATC3 = 1;;
 14294  000BB2  C079  FF80         	movff	LCD_Bitmap@jumpColor+1,3968	;volatile
 14295  000BB6  968B               	bcf	3979,3,c	;volatile
 14296  000BB8  868B               	bsf	3979,3,c	;volatile
 14297                           
 14298                           ;libraries/lcd_highlevel.c: 905:             PORTA = jumpColor; LATC3 = 0; LATC3 = 1;;
 14299  000BBA  C078  FF80         	movff	LCD_Bitmap@jumpColor,3968	;volatile
 14300  000BBE  968B               	bcf	3979,3,c	;volatile
 14301  000BC0  868B               	bsf	3979,3,c	;volatile
 14302                           
 14303                           ; BSR set to: 0
 14304                           ;libraries/lcd_highlevel.c: 906:           }
 14305  000BC2  4B7A               	infsnz	LCD_Bitmap@i& (0+255),f,b
 14306  000BC4  2B7B               	incf	(LCD_Bitmap@i+1)& (0+255),f,b
 14307  000BC6                     l8768:
 14308                           
 14309                           ; BSR set to: 0
 14310  000BC6  5167               	movf	LCD_Bitmap@curYPos& (0+255),w,b
 14311  000BC8  5D6B               	subwf	LCD_Bitmap@biHeight& (0+255),w,b
 14312  000BCA  6E2D               	movwf	??_LCD_Bitmap^0,c
 14313  000BCC  5168               	movf	(LCD_Bitmap@curYPos+1)& (0+255),w,b
 14314  000BCE  596C               	subwfb	(LCD_Bitmap@biHeight+1)& (0+255),w,b
 14315  000BD0  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 14316  000BD2  0EFF               	movlw	255
 14317  000BD4  242D               	addwf	??_LCD_Bitmap^0,w,c
 14318  000BD6  6E1A               	movwf	___wmul@multiplier^0,c
 14319  000BD8  0EFF               	movlw	255
 14320  000BDA  202E               	addwfc	(??_LCD_Bitmap+1)^0,w,c
 14321  000BDC  6E1B               	movwf	(___wmul@multiplier+1)^0,c
 14322  000BDE  C076  F01C         	movff	LCD_Bitmap@biWidth,___wmul@multiplicand
 14323  000BE2  C077  F01D         	movff	LCD_Bitmap@biWidth+1,___wmul@multiplicand+1
 14324  000BE6  ECE2  F02B         	call	___wmul	;wreg free
 14325  000BEA  501A               	movf	?___wmul^0,w,c
 14326  000BEC  0100               	movlb	0	; () banked
 14327  000BEE  5D7A               	subwf	LCD_Bitmap@i& (0+255),w,b
 14328  000BF0  501B               	movf	(?___wmul+1)^0,w,c
 14329  000BF2  597B               	subwfb	(LCD_Bitmap@i+1)& (0+255),w,b
 14330  000BF4  A0D8               	btfss	status,0,c
 14331  000BF6  D7DD               	goto	l348
 14332                           
 14333                           ; BSR set to: 0
 14334                           ;libraries/lcd_highlevel.c: 907:           endOfImage = 1;
 14335  000BF8  0E01               	movlw	1
 14336  000BFA  6F64               	movwf	LCD_Bitmap@endOfImage& (0+255),b
 14337                           
 14338                           ;libraries/lcd_highlevel.c: 908:         break;
 14339  000BFC  D11A               	goto	l8854
 14340  000BFE                     l8772:
 14341                           
 14342                           ; BSR set to: 0
 14343                           ;libraries/lcd_highlevel.c: 910:           jumpCount = bmpPtr[2] + (bmpPtr[3]*biWidth);
 14344  000BFE  0E03               	movlw	3
 14345  000C00  2427               	addwf	LCD_Bitmap@bmpPtr^0,w,c
 14346  000C02  6E2D               	movwf	??_LCD_Bitmap^0,c
 14347  000C04  0E00               	movlw	0
 14348  000C06  2028               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,w,c
 14349  000C08  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 14350  000C0A  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 14351  000C0E  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 14352  000C12                     	if	0	;tblptru may be non-zero
 14353  000C12                     	endif
 14354  000C12                     	if	0	;tblptru may be non-zero
 14355  000C12                     	endif
 14356  000C12  0008               	tblrd		*
 14357  000C14  50F5               	movf	tablat,w,c
 14358  000C16  6E1A               	movwf	___wmul@multiplier^0,c
 14359  000C18  6A1B               	clrf	(___wmul@multiplier+1)^0,c
 14360  000C1A  C076  F01C         	movff	LCD_Bitmap@biWidth,___wmul@multiplicand
 14361  000C1E  C077  F01D         	movff	LCD_Bitmap@biWidth+1,___wmul@multiplicand+1
 14362  000C22  ECE2  F02B         	call	___wmul	;wreg free
 14363  000C26  0E02               	movlw	2
 14364  000C28  2427               	addwf	LCD_Bitmap@bmpPtr^0,w,c
 14365  000C2A  6E2F               	movwf	(??_LCD_Bitmap+2)^0,c
 14366  000C2C  0E00               	movlw	0
 14367  000C2E  2028               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,w,c
 14368  000C30  6E30               	movwf	(??_LCD_Bitmap+3)^0,c
 14369  000C32  C02F  FFF6         	movff	??_LCD_Bitmap+2,tblptrl
 14370  000C36  C030  FFF7         	movff	??_LCD_Bitmap+3,tblptrh
 14371  000C3A                     	if	0	;tblptru may be non-zero
 14372  000C3A                     	endif
 14373  000C3A                     	if	0	;tblptru may be non-zero
 14374  000C3A                     	endif
 14375  000C3A  0008               	tblrd		*
 14376  000C3C  50F5               	movf	tablat,w,c
 14377  000C3E  241A               	addwf	?___wmul^0,w,c
 14378  000C40  0100               	movlb	0	; () banked
 14379  000C42  6F65               	movwf	LCD_Bitmap@jumpCount& (0+255),b
 14380  000C44  0E00               	movlw	0
 14381  000C46  201B               	addwfc	(?___wmul+1)^0,w,c
 14382  000C48  6F66               	movwf	(LCD_Bitmap@jumpCount+1)& (0+255),b
 14383                           
 14384                           ; BSR set to: 0
 14385                           ;libraries/lcd_highlevel.c: 911:           for(i=0;i<jumpCount;i++)
 14386  000C4A  0E00               	movlw	0
 14387  000C4C  6F7B               	movwf	(LCD_Bitmap@i+1)& (0+255),b
 14388  000C4E  0E00               	movlw	0
 14389  000C50  6F7A               	movwf	LCD_Bitmap@i& (0+255),b
 14390  000C52  D00C               	goto	l8790
 14391  000C54                     l8776:
 14392                           
 14393                           ; BSR set to: 0
 14394                           ;libraries/lcd_highlevel.c: 912:           {;libraries/lcd_highlevel.c: 913:            
      +                           curXPos++;
 14395  000C54  4B6D               	infsnz	LCD_Bitmap@curXPos& (0+255),f,b
 14396  000C56  2B6E               	incf	(LCD_Bitmap@curXPos+1)& (0+255),f,b
 14397                           
 14398                           ; BSR set to: 0
 14399                           ;libraries/lcd_highlevel.c: 914:             PORTA = jumpColor >> 8; LATC3 = 0; LATC3 = 
      +                          1;;
 14400  000C58  C079  FF80         	movff	LCD_Bitmap@jumpColor+1,3968	;volatile
 14401                           
 14402                           ; BSR set to: 0
 14403  000C5C  968B               	bcf	3979,3,c	;volatile
 14404                           
 14405                           ; BSR set to: 0
 14406  000C5E  868B               	bsf	3979,3,c	;volatile
 14407                           
 14408                           ; BSR set to: 0
 14409                           ;libraries/lcd_highlevel.c: 915:             PORTA = jumpColor; LATC3 = 0; LATC3 = 1;;
 14410  000C60  C078  FF80         	movff	LCD_Bitmap@jumpColor,3968	;volatile
 14411                           
 14412                           ; BSR set to: 0
 14413  000C64  968B               	bcf	3979,3,c	;volatile
 14414                           
 14415                           ; BSR set to: 0
 14416  000C66  868B               	bsf	3979,3,c	;volatile
 14417                           
 14418                           ;libraries/lcd_highlevel.c: 916:           }
 14419  000C68  4B7A               	infsnz	LCD_Bitmap@i& (0+255),f,b
 14420  000C6A  2B7B               	incf	(LCD_Bitmap@i+1)& (0+255),f,b
 14421  000C6C                     l8790:
 14422                           
 14423                           ; BSR set to: 0
 14424  000C6C  5165               	movf	LCD_Bitmap@jumpCount& (0+255),w,b
 14425  000C6E  5D7A               	subwf	LCD_Bitmap@i& (0+255),w,b
 14426  000C70  5166               	movf	(LCD_Bitmap@jumpCount+1)& (0+255),w,b
 14427  000C72  597B               	subwfb	(LCD_Bitmap@i+1)& (0+255),w,b
 14428  000C74  A0D8               	btfss	status,0,c
 14429  000C76  D7EE               	goto	l8776
 14430                           
 14431                           ; BSR set to: 0
 14432                           ;libraries/lcd_highlevel.c: 917:           curYPos = curYPos + (jumpCount / biWidth);
 14433  000C78  C065  F020         	movff	LCD_Bitmap@jumpCount,___lwdiv@dividend
 14434  000C7C  C066  F021         	movff	LCD_Bitmap@jumpCount+1,___lwdiv@dividend+1
 14435  000C80  C076  F022         	movff	LCD_Bitmap@biWidth,___lwdiv@divisor
 14436  000C84  C077  F023         	movff	LCD_Bitmap@biWidth+1,___lwdiv@divisor+1
 14437  000C88  EC83  F029         	call	___lwdiv	;wreg free
 14438  000C8C  0100               	movlb	0	; () banked
 14439  000C8E  5167               	movf	LCD_Bitmap@curYPos& (0+255),w,b
 14440  000C90  2420               	addwf	?___lwdiv^0,w,c
 14441  000C92  6F67               	movwf	LCD_Bitmap@curYPos& (0+255),b
 14442  000C94  5168               	movf	(LCD_Bitmap@curYPos+1)& (0+255),w,b
 14443  000C96  2021               	addwfc	(?___lwdiv+1)^0,w,c
 14444  000C98  6F68               	movwf	(LCD_Bitmap@curYPos+1)& (0+255),b
 14445                           
 14446                           ;libraries/lcd_highlevel.c: 918:           curXPos = curXPos % biWidth;
 14447  000C9A  C06D  F012         	movff	LCD_Bitmap@curXPos,___lwmod@dividend
 14448  000C9E  C06E  F013         	movff	LCD_Bitmap@curXPos+1,___lwmod@dividend+1
 14449  000CA2  C076  F014         	movff	LCD_Bitmap@biWidth,___lwmod@divisor
 14450  000CA6  C077  F015         	movff	LCD_Bitmap@biWidth+1,___lwmod@divisor+1
 14451  000CAA  EC44  F02A         	call	___lwmod	;wreg free
 14452  000CAE  C012  F06D         	movff	?___lwmod,LCD_Bitmap@curXPos
 14453  000CB2  C013  F06E         	movff	?___lwmod+1,LCD_Bitmap@curXPos+1
 14454                           
 14455                           ; BSR set to: 0
 14456                           ;libraries/lcd_highlevel.c: 919:           bmpPtr += 4;
 14457  000CB6  0E04               	movlw	4
 14458  000CB8  D0B9               	goto	L9
 14459  000CBA                     l8796:
 14460                           
 14461                           ; BSR set to: 0
 14462                           ;libraries/lcd_highlevel.c: 922:           pixelCount = bmpPtr[1];
 14463  000CBA  0E01               	movlw	1
 14464  000CBC  2427               	addwf	LCD_Bitmap@bmpPtr^0,w,c
 14465  000CBE  6E2D               	movwf	??_LCD_Bitmap^0,c
 14466  000CC0  0E00               	movlw	0
 14467  000CC2  2028               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,w,c
 14468  000CC4  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 14469  000CC6  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 14470  000CCA  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 14471  000CCE                     	if	0	;tblptru may be non-zero
 14472  000CCE                     	endif
 14473  000CCE                     	if	0	;tblptru may be non-zero
 14474  000CCE                     	endif
 14475  000CCE  0008               	tblrd		*
 14476  000CD0  CFF5 F073          	movff	tablat,LCD_Bitmap@pixelCount
 14477                           
 14478                           ; BSR set to: 0
 14479                           ;libraries/lcd_highlevel.c: 923:           for(i=0;i < pixelCount;i++)
 14480  000CD4  0E00               	movlw	0
 14481  000CD6  6F7B               	movwf	(LCD_Bitmap@i+1)& (0+255),b
 14482  000CD8  0E00               	movlw	0
 14483  000CDA  6F7A               	movwf	LCD_Bitmap@i& (0+255),b
 14484  000CDC  D02D               	goto	l8818
 14485  000CDE                     l8800:
 14486                           
 14487                           ; BSR set to: 0
 14488                           ;libraries/lcd_highlevel.c: 924:           {;libraries/lcd_highlevel.c: 925:            
      +                           color = RGB2LCD(colorTablePtr+(bmpPtr[2+i]*4));
 14489  000CDE  517A               	movf	LCD_Bitmap@i& (0+255),w,b
 14490  000CE0  2427               	addwf	LCD_Bitmap@bmpPtr^0,w,c
 14491  000CE2  6E2D               	movwf	??_LCD_Bitmap^0,c
 14492  000CE4  517B               	movf	(LCD_Bitmap@i+1)& (0+255),w,b
 14493  000CE6  2028               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,w,c
 14494  000CE8  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 14495  000CEA  0E02               	movlw	2
 14496  000CEC  262D               	addwf	??_LCD_Bitmap^0,f,c
 14497  000CEE  0E00               	movlw	0
 14498  000CF0  222E               	addwfc	(??_LCD_Bitmap+1)^0,f,c
 14499  000CF2  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 14500  000CF6  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 14501  000CFA                     	if	0	;tblptru may be non-zero
 14502  000CFA                     	endif
 14503  000CFA                     	if	0	;tblptru may be non-zero
 14504  000CFA                     	endif
 14505  000CFA  0008               	tblrd		*
 14506  000CFC  50F5               	movf	tablat,w,c
 14507  000CFE  0D04               	mullw	4
 14508  000D00  CFF3 F02F          	movff	prodl,??_LCD_Bitmap+2
 14509  000D04  CFF4 F030          	movff	prodh,??_LCD_Bitmap+3
 14510  000D08  502F               	movf	(??_LCD_Bitmap+2)^0,w,c
 14511  000D0A  2569               	addwf	LCD_Bitmap@colorTablePtr& (0+255),w,b
 14512  000D0C  6E12               	movwf	RGB2LCD@colorTableEntry^0,c
 14513  000D0E  5030               	movf	(??_LCD_Bitmap+3)^0,w,c
 14514  000D10  216A               	addwfc	(LCD_Bitmap@colorTablePtr+1)& (0+255),w,b
 14515  000D12  6E13               	movwf	(RGB2LCD@colorTableEntry+1)^0,c
 14516  000D14  EC6F  F023         	call	_RGB2LCD	;wreg free
 14517  000D18  C012  F06F         	movff	?_RGB2LCD,LCD_Bitmap@color
 14518  000D1C  C013  F070         	movff	?_RGB2LCD+1,LCD_Bitmap@color+1
 14519                           
 14520                           ; BSR set to: 0
 14521                           ;libraries/lcd_highlevel.c: 926:             curXPos++;
 14522  000D20  4B6D               	infsnz	LCD_Bitmap@curXPos& (0+255),f,b
 14523  000D22  2B6E               	incf	(LCD_Bitmap@curXPos+1)& (0+255),f,b
 14524                           
 14525                           ; BSR set to: 0
 14526                           ;libraries/lcd_highlevel.c: 927:             PORTA = color >> 8; LATC3 = 0; LATC3 = 1;;
 14527  000D24  C070  FF80         	movff	LCD_Bitmap@color+1,3968	;volatile
 14528                           
 14529                           ; BSR set to: 0
 14530  000D28  968B               	bcf	3979,3,c	;volatile
 14531                           
 14532                           ; BSR set to: 0
 14533  000D2A  868B               	bsf	3979,3,c	;volatile
 14534                           
 14535                           ; BSR set to: 0
 14536                           ;libraries/lcd_highlevel.c: 928:             PORTA = color; LATC3 = 0; LATC3 = 1;;
 14537  000D2C  C06F  FF80         	movff	LCD_Bitmap@color,3968	;volatile
 14538                           
 14539                           ; BSR set to: 0
 14540  000D30  968B               	bcf	3979,3,c	;volatile
 14541                           
 14542                           ; BSR set to: 0
 14543  000D32  868B               	bsf	3979,3,c	;volatile
 14544                           
 14545                           ; BSR set to: 0
 14546                           ;libraries/lcd_highlevel.c: 929:           }
 14547  000D34  4B7A               	infsnz	LCD_Bitmap@i& (0+255),f,b
 14548  000D36  2B7B               	incf	(LCD_Bitmap@i+1)& (0+255),f,b
 14549  000D38                     l8818:
 14550                           
 14551                           ; BSR set to: 0
 14552  000D38  5173               	movf	LCD_Bitmap@pixelCount& (0+255),w,b
 14553  000D3A  6E2D               	movwf	??_LCD_Bitmap^0,c
 14554  000D3C  6A2E               	clrf	(??_LCD_Bitmap+1)^0,c
 14555  000D3E  502D               	movf	??_LCD_Bitmap^0,w,c
 14556  000D40  5D7A               	subwf	LCD_Bitmap@i& (0+255),w,b
 14557  000D42  502E               	movf	(??_LCD_Bitmap+1)^0,w,c
 14558  000D44  597B               	subwfb	(LCD_Bitmap@i+1)& (0+255),w,b
 14559  000D46  A0D8               	btfss	status,0,c
 14560  000D48  D7CA               	goto	l8800
 14561                           
 14562                           ; BSR set to: 0
 14563                           ;libraries/lcd_highlevel.c: 930:           if(pixelCount < 255)
 14564  000D4A  2973               	incf	LCD_Bitmap@pixelCount& (0+255),w,b
 14565  000D4C  B4D8               	btfsc	status,2,c
 14566  000D4E  D00E               	goto	l8824
 14567                           
 14568                           ; BSR set to: 0
 14569                           ;libraries/lcd_highlevel.c: 931:           {;libraries/lcd_highlevel.c: 932:            
      +                           pixelCount = (pixelCount+1) & 0xFE;
 14570  000D50  2973               	incf	LCD_Bitmap@pixelCount& (0+255),w,b
 14571  000D52  0BFE               	andlw	254
 14572  000D54  6F73               	movwf	LCD_Bitmap@pixelCount& (0+255),b
 14573                           
 14574                           ;libraries/lcd_highlevel.c: 933:             bmpPtr+=pixelCount+2;
 14575  000D56  5173               	movf	LCD_Bitmap@pixelCount& (0+255),w,b
 14576  000D58  6E2D               	movwf	??_LCD_Bitmap^0,c
 14577  000D5A  6A2E               	clrf	(??_LCD_Bitmap+1)^0,c
 14578  000D5C  0E02               	movlw	2
 14579  000D5E  262D               	addwf	??_LCD_Bitmap^0,f,c
 14580  000D60  0E00               	movlw	0
 14581  000D62  222E               	addwfc	(??_LCD_Bitmap+1)^0,f,c
 14582  000D64  502D               	movf	??_LCD_Bitmap^0,w,c
 14583  000D66  2627               	addwf	LCD_Bitmap@bmpPtr^0,f,c
 14584  000D68  502E               	movf	(??_LCD_Bitmap+1)^0,w,c
 14585  000D6A  D062               	goto	L10
 14586  000D6C                     l8824:
 14587                           
 14588                           ; BSR set to: 0
 14589                           ;libraries/lcd_highlevel.c: 936:           {;libraries/lcd_highlevel.c: 937:            
      +                             bmpPtr += 258;
 14590  000D6C  0E02               	movlw	2
 14591  000D6E  2627               	addwf	LCD_Bitmap@bmpPtr^0,f,c
 14592  000D70  0E01               	movlw	1
 14593  000D72  D05E               	goto	L10
 14594  000D74                     l8828:
 14595                           
 14596                           ; BSR set to: 0
 14597  000D74  0E01               	movlw	1
 14598  000D76  2427               	addwf	LCD_Bitmap@bmpPtr^0,w,c
 14599  000D78  6E2D               	movwf	??_LCD_Bitmap^0,c
 14600  000D7A  0E00               	movlw	0
 14601  000D7C  2028               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,w,c
 14602  000D7E  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 14603  000D80  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 14604  000D84  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 14605  000D88                     	if	0	;tblptru may be non-zero
 14606  000D88                     	endif
 14607  000D88                     	if	0	;tblptru may be non-zero
 14608  000D88                     	endif
 14609  000D88  0008               	tblrd		*
 14610  000D8A  50F5               	movf	tablat,w,c
 14611  000D8C  6E2F               	movwf	(??_LCD_Bitmap+2)^0,c
 14612  000D8E  6A30               	clrf	(??_LCD_Bitmap+3)^0,c
 14613                           
 14614                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14615                           ; Switch size 1, requested type "simple"
 14616                           ; Number of cases is 1, Range of values is 0 to 0
 14617                           ; switch strategies available:
 14618                           ; Name         Instructions Cycles
 14619                           ; simple_byte            4     3 (average)
 14620                           ;	Chosen strategy is simple_byte
 14621  000D90  5030               	movf	(??_LCD_Bitmap+3)^0,w,c
 14622  000D92  0A00               	xorlw	0	; case 0
 14623  000D94  A4D8               	btfss	status,2,c
 14624  000D96  D791               	goto	l8796
 14625                           
 14626                           ; BSR set to: 0
 14627                           ; Switch size 1, requested type "simple"
 14628                           ; Number of cases is 3, Range of values is 0 to 2
 14629                           ; switch strategies available:
 14630                           ; Name         Instructions Cycles
 14631                           ; simple_byte           10     6 (average)
 14632                           ;	Chosen strategy is simple_byte
 14633  000D98  502F               	movf	(??_LCD_Bitmap+2)^0,w,c
 14634  000D9A  0A00               	xorlw	0	; case 0
 14635  000D9C  B4D8               	btfsc	status,2,c
 14636  000D9E  D6C3               	goto	l8746
 14637  000DA0  0A01               	xorlw	1	; case 1
 14638  000DA2  B4D8               	btfsc	status,2,c
 14639  000DA4  D6E6               	goto	l8758
 14640  000DA6  0A03               	xorlw	3	; case 2
 14641  000DA8  B4D8               	btfsc	status,2,c
 14642  000DAA  D729               	goto	l8772
 14643  000DAC  D786               	goto	l8796
 14644  000DAE                     l8830:
 14645                           
 14646                           ; BSR set to: 0
 14647                           ;libraries/lcd_highlevel.c: 943:     {;libraries/lcd_highlevel.c: 944:       pixelCount 
      +                          = bmpPtr[0];
 14648  000DAE  C027  FFF6         	movff	LCD_Bitmap@bmpPtr,tblptrl
 14649  000DB2  C028  FFF7         	movff	LCD_Bitmap@bmpPtr+1,tblptrh
 14650  000DB6                     	if	0	;tblptru may be non-zero
 14651  000DB6                     	endif
 14652  000DB6                     	if	0	;tblptru may be non-zero
 14653  000DB6                     	endif
 14654  000DB6  0008               	tblrd		*
 14655  000DB8  CFF5 F073          	movff	tablat,LCD_Bitmap@pixelCount
 14656                           
 14657                           ; BSR set to: 0
 14658                           ;libraries/lcd_highlevel.c: 945:       color = RGB2LCD(colorTablePtr+(bmpPtr[1]*4));
 14659  000DBC  0E01               	movlw	1
 14660  000DBE  2427               	addwf	LCD_Bitmap@bmpPtr^0,w,c
 14661  000DC0  6E2D               	movwf	??_LCD_Bitmap^0,c
 14662  000DC2  0E00               	movlw	0
 14663  000DC4  2028               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,w,c
 14664  000DC6  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 14665  000DC8  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 14666  000DCC  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 14667  000DD0                     	if	0	;tblptru may be non-zero
 14668  000DD0                     	endif
 14669  000DD0                     	if	0	;tblptru may be non-zero
 14670  000DD0                     	endif
 14671  000DD0  0008               	tblrd		*
 14672  000DD2  50F5               	movf	tablat,w,c
 14673  000DD4  0D04               	mullw	4
 14674  000DD6  CFF3 F02F          	movff	prodl,??_LCD_Bitmap+2
 14675  000DDA  CFF4 F030          	movff	prodh,??_LCD_Bitmap+3
 14676  000DDE  502F               	movf	(??_LCD_Bitmap+2)^0,w,c
 14677  000DE0  2569               	addwf	LCD_Bitmap@colorTablePtr& (0+255),w,b
 14678  000DE2  6E12               	movwf	RGB2LCD@colorTableEntry^0,c
 14679  000DE4  5030               	movf	(??_LCD_Bitmap+3)^0,w,c
 14680  000DE6  216A               	addwfc	(LCD_Bitmap@colorTablePtr+1)& (0+255),w,b
 14681  000DE8  6E13               	movwf	(RGB2LCD@colorTableEntry+1)^0,c
 14682  000DEA  EC6F  F023         	call	_RGB2LCD	;wreg free
 14683  000DEE  C012  F06F         	movff	?_RGB2LCD,LCD_Bitmap@color
 14684  000DF2  C013  F070         	movff	?_RGB2LCD+1,LCD_Bitmap@color+1
 14685                           
 14686                           ; BSR set to: 0
 14687                           ;libraries/lcd_highlevel.c: 946:       for(i=0;i < pixelCount;i++)
 14688  000DF6  0E00               	movlw	0
 14689  000DF8  6F7B               	movwf	(LCD_Bitmap@i+1)& (0+255),b
 14690  000DFA  0E00               	movlw	0
 14691  000DFC  6F7A               	movwf	LCD_Bitmap@i& (0+255),b
 14692  000DFE  D00C               	goto	l8850
 14693  000E00                     l8836:
 14694                           
 14695                           ; BSR set to: 0
 14696                           ;libraries/lcd_highlevel.c: 947:       {;libraries/lcd_highlevel.c: 948:         curXPos
      +                          ++;
 14697  000E00  4B6D               	infsnz	LCD_Bitmap@curXPos& (0+255),f,b
 14698  000E02  2B6E               	incf	(LCD_Bitmap@curXPos+1)& (0+255),f,b
 14699                           
 14700                           ; BSR set to: 0
 14701                           ;libraries/lcd_highlevel.c: 949:         PORTA = color >> 8; LATC3 = 0; LATC3 = 1;;
 14702  000E04  C070  FF80         	movff	LCD_Bitmap@color+1,3968	;volatile
 14703                           
 14704                           ; BSR set to: 0
 14705  000E08  968B               	bcf	3979,3,c	;volatile
 14706                           
 14707                           ; BSR set to: 0
 14708  000E0A  868B               	bsf	3979,3,c	;volatile
 14709                           
 14710                           ; BSR set to: 0
 14711                           ;libraries/lcd_highlevel.c: 950:         PORTA = color; LATC3 = 0; LATC3 = 1;;
 14712  000E0C  C06F  FF80         	movff	LCD_Bitmap@color,3968	;volatile
 14713                           
 14714                           ; BSR set to: 0
 14715  000E10  968B               	bcf	3979,3,c	;volatile
 14716                           
 14717                           ; BSR set to: 0
 14718  000E12  868B               	bsf	3979,3,c	;volatile
 14719                           
 14720                           ;libraries/lcd_highlevel.c: 951:       }
 14721  000E14  4B7A               	infsnz	LCD_Bitmap@i& (0+255),f,b
 14722  000E16  2B7B               	incf	(LCD_Bitmap@i+1)& (0+255),f,b
 14723  000E18                     l8850:
 14724                           
 14725                           ; BSR set to: 0
 14726  000E18  5173               	movf	LCD_Bitmap@pixelCount& (0+255),w,b
 14727  000E1A  6E2D               	movwf	??_LCD_Bitmap^0,c
 14728  000E1C  6A2E               	clrf	(??_LCD_Bitmap+1)^0,c
 14729  000E1E  502D               	movf	??_LCD_Bitmap^0,w,c
 14730  000E20  5D7A               	subwf	LCD_Bitmap@i& (0+255),w,b
 14731  000E22  502E               	movf	(??_LCD_Bitmap+1)^0,w,c
 14732  000E24  597B               	subwfb	(LCD_Bitmap@i+1)& (0+255),w,b
 14733  000E26  A0D8               	btfss	status,0,c
 14734  000E28  D7EB               	goto	l8836
 14735                           
 14736                           ; BSR set to: 0
 14737                           ;libraries/lcd_highlevel.c: 952:       bmpPtr+=2;
 14738  000E2A  0E02               	movlw	2
 14739  000E2C                     L9:
 14740  000E2C  2627               	addwf	LCD_Bitmap@bmpPtr^0,f,c
 14741  000E2E  0E00               	movlw	0
 14742  000E30                     L10:
 14743  000E30  2228               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,f,c
 14744  000E32                     l8854:
 14745                           
 14746                           ; BSR set to: 0
 14747                           ;libraries/lcd_highlevel.c: 954:   }while(endOfImage == 0);
 14748  000E32  5164               	movf	LCD_Bitmap@endOfImage& (0+255),w,b
 14749  000E34  B4D8               	btfsc	status,2,c
 14750  000E36  D66D               	goto	l8742
 14751                           
 14752                           ; BSR set to: 0
 14753                           ;libraries/lcd_highlevel.c: 955:   PORTA = 0x36; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
 14754  000E38  0E36               	movlw	54
 14755  000E3A  6E80               	movwf	128,c	;volatile
 14756                           
 14757                           ; BSR set to: 0
 14758  000E3C  988B               	bcf	3979,4,c	;volatile
 14759                           
 14760                           ; BSR set to: 0
 14761  000E3E  968B               	bcf	3979,3,c	;volatile
 14762                           
 14763                           ; BSR set to: 0
 14764  000E40  868B               	bsf	3979,3,c	;volatile
 14765                           
 14766                           ; BSR set to: 0
 14767  000E42  888B               	bsf	3979,4,c	;volatile
 14768                           
 14769                           ;libraries/lcd_highlevel.c: 957:   PORTA = 0b00000000; LATC3 = 0; LATC3 = 1;;
 14770  000E44  0E00               	movlw	0
 14771  000E46  6E80               	movwf	128,c	;volatile
 14772                           
 14773                           ; BSR set to: 0
 14774  000E48  968B               	bcf	3979,3,c	;volatile
 14775                           
 14776                           ; BSR set to: 0
 14777  000E4A  868B               	bsf	3979,3,c	;volatile
 14778                           
 14779                           ; BSR set to: 0
 14780  000E4C  0012               	return		;funcret
 14781  000E4E                     __end_of_LCD_Bitmap:
 14782                           	callstack 0
 14783                           
 14784 ;; *************** function ___lwmod *****************
 14785 ;; Defined at:
 14786 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lwmod.c"
 14787 ;; Parameters:    Size  Location     Type
 14788 ;;  dividend        2   17[COMRAM] unsigned int 
 14789 ;;  divisor         2   19[COMRAM] unsigned int 
 14790 ;; Auto vars:     Size  Location     Type
 14791 ;;  counter         1   21[COMRAM] unsigned char 
 14792 ;; Return value:  Size  Location     Type
 14793 ;;                  2   17[COMRAM] unsigned int 
 14794 ;; Registers used:
 14795 ;;		wreg, status,2, status,0
 14796 ;; Tracked objects:
 14797 ;;		On entry : 3F/0
 14798 ;;		On exit  : 3F/0
 14799 ;;		Unchanged: 3F/0
 14800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14801 ;;      Params:         4       0       0       0       0       0       0
 14802 ;;      Locals:         1       0       0       0       0       0       0
 14803 ;;      Temps:          0       0       0       0       0       0       0
 14804 ;;      Totals:         5       0       0       0       0       0       0
 14805 ;;Total ram usage:        5 bytes
 14806 ;; Hardware stack levels used: 1
 14807 ;; Hardware stack levels required when called: 4
 14808 ;; This function calls:
 14809 ;;		Nothing
 14810 ;; This function is called by:
 14811 ;;		_LCD_Bitmap
 14812 ;; This function uses a non-reentrant model
 14813 ;;
 14814                           
 14815                           	psect	text57
 14816  005488                     __ptext57:
 14817                           	callstack 0
 14818  005488                     ___lwmod:
 14819                           	callstack 19
 14820                           
 14821                           ; BSR set to: 0
 14822                           
 14823                           ; BSR set to: 0
 14824                           ;incstack = 0
 14825  005488  5014               	movf	___lwmod@divisor^0,w,c
 14826  00548A  1015               	iorwf	(___lwmod@divisor+1)^0,w,c
 14827  00548C  B4D8               	btfsc	status,2,c
 14828  00548E  D018               	goto	l1375
 14829                           
 14830                           ; BSR set to: 0
 14831  005490  0E01               	movlw	1
 14832  005492  6E16               	movwf	___lwmod@counter^0,c
 14833  005494  D004               	goto	l5890
 14834  005496                     l5888:
 14835                           
 14836                           ; BSR set to: 0
 14837  005496  90D8               	bcf	status,0,c
 14838  005498  3614               	rlcf	___lwmod@divisor^0,f,c
 14839  00549A  3615               	rlcf	(___lwmod@divisor+1)^0,f,c
 14840  00549C  2A16               	incf	___lwmod@counter^0,f,c
 14841  00549E                     l5890:
 14842                           
 14843                           ; BSR set to: 0
 14844  00549E  AE15               	btfss	(___lwmod@divisor+1)^0,7,c
 14845  0054A0  D7FA               	goto	l5888
 14846  0054A2                     u3550:
 14847                           
 14848                           ; BSR set to: 0
 14849  0054A2  5014               	movf	___lwmod@divisor^0,w,c
 14850  0054A4  5C12               	subwf	___lwmod@dividend^0,w,c
 14851  0054A6  5015               	movf	(___lwmod@divisor+1)^0,w,c
 14852  0054A8  5813               	subwfb	(___lwmod@dividend+1)^0,w,c
 14853  0054AA  A0D8               	btfss	status,0,c
 14854  0054AC  D004               	goto	l5896
 14855                           
 14856                           ; BSR set to: 0
 14857  0054AE  5014               	movf	___lwmod@divisor^0,w,c
 14858  0054B0  5E12               	subwf	___lwmod@dividend^0,f,c
 14859  0054B2  5015               	movf	(___lwmod@divisor+1)^0,w,c
 14860  0054B4  5A13               	subwfb	(___lwmod@dividend+1)^0,f,c
 14861  0054B6                     l5896:
 14862                           
 14863                           ; BSR set to: 0
 14864  0054B6  90D8               	bcf	status,0,c
 14865  0054B8  3215               	rrcf	(___lwmod@divisor+1)^0,f,c
 14866  0054BA  3214               	rrcf	___lwmod@divisor^0,f,c
 14867                           
 14868                           ; BSR set to: 0
 14869  0054BC  2E16               	decfsz	___lwmod@counter^0,f,c
 14870  0054BE  D7F1               	goto	u3550
 14871  0054C0                     l1375:
 14872                           
 14873                           ; BSR set to: 0
 14874  0054C0  C012  F012         	movff	___lwmod@dividend,?___lwmod
 14875  0054C4  C013  F013         	movff	___lwmod@dividend+1,?___lwmod+1
 14876                           
 14877                           ; BSR set to: 0
 14878  0054C8  0012               	return		;funcret
 14879  0054CA                     __end_of___lwmod:
 14880                           	callstack 0
 14881                           
 14882 ;; *************** function ___lwdiv *****************
 14883 ;; Defined at:
 14884 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lwdiv.c"
 14885 ;; Parameters:    Size  Location     Type
 14886 ;;  dividend        2   31[COMRAM] unsigned int 
 14887 ;;  divisor         2   33[COMRAM] unsigned int 
 14888 ;; Auto vars:     Size  Location     Type
 14889 ;;  quotient        2   35[COMRAM] unsigned int 
 14890 ;;  counter         1   37[COMRAM] unsigned char 
 14891 ;; Return value:  Size  Location     Type
 14892 ;;                  2   31[COMRAM] unsigned int 
 14893 ;; Registers used:
 14894 ;;		wreg, status,2, status,0
 14895 ;; Tracked objects:
 14896 ;;		On entry : 0/0
 14897 ;;		On exit  : 0/0
 14898 ;;		Unchanged: 0/0
 14899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14900 ;;      Params:         4       0       0       0       0       0       0
 14901 ;;      Locals:         3       0       0       0       0       0       0
 14902 ;;      Temps:          0       0       0       0       0       0       0
 14903 ;;      Totals:         7       0       0       0       0       0       0
 14904 ;;Total ram usage:        7 bytes
 14905 ;; Hardware stack levels used: 1
 14906 ;; Hardware stack levels required when called: 4
 14907 ;; This function calls:
 14908 ;;		Nothing
 14909 ;; This function is called by:
 14910 ;;		_LCD_SliderUpdate
 14911 ;;		_LCD_Bitmap
 14912 ;; This function uses a non-reentrant model
 14913 ;;
 14914                           
 14915                           	psect	text58
 14916  005306                     __ptext58:
 14917                           	callstack 0
 14918  005306                     ___lwdiv:
 14919                           	callstack 21
 14920                           
 14921                           ; BSR set to: 0
 14922                           ;incstack = 0
 14923  005306  0E00               	movlw	0
 14924  005308  6E25               	movwf	(___lwdiv@quotient+1)^0,c
 14925  00530A  0E00               	movlw	0
 14926  00530C  6E24               	movwf	___lwdiv@quotient^0,c
 14927  00530E  5022               	movf	___lwdiv@divisor^0,w,c
 14928  005310  1023               	iorwf	(___lwdiv@divisor+1)^0,w,c
 14929  005312  B4D8               	btfsc	status,2,c
 14930  005314  D01C               	goto	l1365
 14931  005316  0E01               	movlw	1
 14932  005318  6E26               	movwf	___lwdiv@counter^0,c
 14933  00531A  D004               	goto	l5870
 14934  00531C                     l5868:
 14935  00531C  90D8               	bcf	status,0,c
 14936  00531E  3622               	rlcf	___lwdiv@divisor^0,f,c
 14937  005320  3623               	rlcf	(___lwdiv@divisor+1)^0,f,c
 14938  005322  2A26               	incf	___lwdiv@counter^0,f,c
 14939  005324                     l5870:
 14940  005324  AE23               	btfss	(___lwdiv@divisor+1)^0,7,c
 14941  005326  D7FA               	goto	l5868
 14942  005328                     u3520:
 14943  005328  90D8               	bcf	status,0,c
 14944  00532A  3624               	rlcf	___lwdiv@quotient^0,f,c
 14945  00532C  3625               	rlcf	(___lwdiv@quotient+1)^0,f,c
 14946  00532E  5022               	movf	___lwdiv@divisor^0,w,c
 14947  005330  5C20               	subwf	___lwdiv@dividend^0,w,c
 14948  005332  5023               	movf	(___lwdiv@divisor+1)^0,w,c
 14949  005334  5821               	subwfb	(___lwdiv@dividend+1)^0,w,c
 14950  005336  A0D8               	btfss	status,0,c
 14951  005338  D005               	goto	l5880
 14952  00533A  5022               	movf	___lwdiv@divisor^0,w,c
 14953  00533C  5E20               	subwf	___lwdiv@dividend^0,f,c
 14954  00533E  5023               	movf	(___lwdiv@divisor+1)^0,w,c
 14955  005340  5A21               	subwfb	(___lwdiv@dividend+1)^0,f,c
 14956  005342  8024               	bsf	___lwdiv@quotient^0,0,c
 14957  005344                     l5880:
 14958  005344  90D8               	bcf	status,0,c
 14959  005346  3223               	rrcf	(___lwdiv@divisor+1)^0,f,c
 14960  005348  3222               	rrcf	___lwdiv@divisor^0,f,c
 14961  00534A  2E26               	decfsz	___lwdiv@counter^0,f,c
 14962  00534C  D7ED               	goto	u3520
 14963  00534E                     l1365:
 14964  00534E  C024  F020         	movff	___lwdiv@quotient,?___lwdiv
 14965  005352  C025  F021         	movff	___lwdiv@quotient+1,?___lwdiv+1
 14966  005356  0012               	return		;funcret
 14967  005358                     __end_of___lwdiv:
 14968                           	callstack 0
 14969                           
 14970 ;; *************** function _RGB2LCD *****************
 14971 ;; Defined at:
 14972 ;;		line 799 in file "libraries/lcd_highlevel.c"
 14973 ;; Parameters:    Size  Location     Type
 14974 ;;  colorTableEn    2   17[COMRAM] PTR unsigned char 
 14975 ;;		 -> STR_8(9), STR_7(2), STR_6(9), STR_5(9), 
 14976 ;;		 -> STR_4(11), 
 14977 ;; Auto vars:     Size  Location     Type
 14978 ;;  color           2   29[COMRAM] unsigned short 
 14979 ;;  blue            2   27[COMRAM] unsigned short 
 14980 ;;  green           2   25[COMRAM] unsigned short 
 14981 ;;  red             2   23[COMRAM] unsigned short 
 14982 ;; Return value:  Size  Location     Type
 14983 ;;                  2   17[COMRAM] unsigned short 
 14984 ;; Registers used:
 14985 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 14986 ;; Tracked objects:
 14987 ;;		On entry : 3F/0
 14988 ;;		On exit  : 3F/0
 14989 ;;		Unchanged: 3F/0
 14990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14991 ;;      Params:         2       0       0       0       0       0       0
 14992 ;;      Locals:         8       0       0       0       0       0       0
 14993 ;;      Temps:          4       0       0       0       0       0       0
 14994 ;;      Totals:        14       0       0       0       0       0       0
 14995 ;;Total ram usage:       14 bytes
 14996 ;; Hardware stack levels used: 1
 14997 ;; Hardware stack levels required when called: 4
 14998 ;; This function calls:
 14999 ;;		Nothing
 15000 ;; This function is called by:
 15001 ;;		_LCD_Bitmap
 15002 ;; This function uses a non-reentrant model
 15003 ;;
 15004                           
 15005                           	psect	text59
 15006  0046DE                     __ptext59:
 15007                           	callstack 0
 15008  0046DE                     _RGB2LCD:
 15009                           	callstack 19
 15010                           
 15011                           ; BSR set to: 0
 15012                           ;libraries/lcd_highlevel.c: 799: uint16_t RGB2LCD(uint8_t * colorTableEntry);libraries/l
      +                          cd_highlevel.c: 800: {;libraries/lcd_highlevel.c: 801:     uint16_t red,green,blue;;libr
      +                          aries/lcd_highlevel.c: 802:     uint16_t color;;libraries/lcd_highlevel.c: 804:     red 
      +                          = colorTableEntry[2] >> 3;
 15013                           
 15014                           ;incstack = 0
 15015  0046DE  0E02               	movlw	2
 15016  0046E0  2412               	addwf	RGB2LCD@colorTableEntry^0,w,c
 15017  0046E2  6E14               	movwf	??_RGB2LCD^0,c
 15018  0046E4  0E00               	movlw	0
 15019  0046E6  2013               	addwfc	(RGB2LCD@colorTableEntry+1)^0,w,c
 15020  0046E8  6E15               	movwf	(??_RGB2LCD+1)^0,c
 15021  0046EA  C014  FFF6         	movff	??_RGB2LCD,tblptrl
 15022  0046EE  C015  FFF7         	movff	??_RGB2LCD+1,tblptrh
 15023  0046F2                     	if	0	;tblptru may be non-zero
 15024  0046F2                     	endif
 15025  0046F2                     	if	0	;tblptru may be non-zero
 15026  0046F2                     	endif
 15027  0046F2  0008               	tblrd		*
 15028  0046F4  CFF5 F016          	movff	tablat,??_RGB2LCD+2
 15029  0046F8  90D8               	bcf	status,0,c
 15030  0046FA  3216               	rrcf	(??_RGB2LCD+2)^0,f,c
 15031  0046FC  90D8               	bcf	status,0,c
 15032  0046FE  3216               	rrcf	(??_RGB2LCD+2)^0,f,c
 15033  004700  90D8               	bcf	status,0,c
 15034  004702  3216               	rrcf	(??_RGB2LCD+2)^0,f,c
 15035  004704  5016               	movf	(??_RGB2LCD+2)^0,w,c
 15036  004706  6E18               	movwf	RGB2LCD@red^0,c
 15037  004708  6A19               	clrf	(RGB2LCD@red+1)^0,c
 15038                           
 15039                           ;libraries/lcd_highlevel.c: 805:     green = colorTableEntry[1] >> 2;
 15040  00470A  0E01               	movlw	1
 15041  00470C  2412               	addwf	RGB2LCD@colorTableEntry^0,w,c
 15042  00470E  6E14               	movwf	??_RGB2LCD^0,c
 15043  004710  0E00               	movlw	0
 15044  004712  2013               	addwfc	(RGB2LCD@colorTableEntry+1)^0,w,c
 15045  004714  6E15               	movwf	(??_RGB2LCD+1)^0,c
 15046  004716  C014  FFF6         	movff	??_RGB2LCD,tblptrl
 15047  00471A  C015  FFF7         	movff	??_RGB2LCD+1,tblptrh
 15048  00471E                     	if	0	;tblptru may be non-zero
 15049  00471E                     	endif
 15050  00471E                     	if	0	;tblptru may be non-zero
 15051  00471E                     	endif
 15052  00471E  0008               	tblrd		*
 15053  004720  CFF5 F016          	movff	tablat,??_RGB2LCD+2
 15054  004724  90D8               	bcf	status,0,c
 15055  004726  3216               	rrcf	(??_RGB2LCD+2)^0,f,c
 15056  004728  90D8               	bcf	status,0,c
 15057  00472A  3216               	rrcf	(??_RGB2LCD+2)^0,f,c
 15058  00472C  5016               	movf	(??_RGB2LCD+2)^0,w,c
 15059  00472E  6E1A               	movwf	RGB2LCD@green^0,c
 15060  004730  6A1B               	clrf	(RGB2LCD@green+1)^0,c
 15061                           
 15062                           ;libraries/lcd_highlevel.c: 806:     blue = colorTableEntry[0] >> 3;
 15063  004732  C012  FFF6         	movff	RGB2LCD@colorTableEntry,tblptrl
 15064  004736  C013  FFF7         	movff	RGB2LCD@colorTableEntry+1,tblptrh
 15065  00473A                     	if	0	;tblptru may be non-zero
 15066  00473A                     	endif
 15067  00473A                     	if	0	;tblptru may be non-zero
 15068  00473A                     	endif
 15069  00473A  0008               	tblrd		*
 15070  00473C  CFF5 F014          	movff	tablat,??_RGB2LCD
 15071  004740  90D8               	bcf	status,0,c
 15072  004742  3214               	rrcf	??_RGB2LCD^0,f,c
 15073  004744  90D8               	bcf	status,0,c
 15074  004746  3214               	rrcf	??_RGB2LCD^0,f,c
 15075  004748  90D8               	bcf	status,0,c
 15076  00474A  3214               	rrcf	??_RGB2LCD^0,f,c
 15077  00474C  5014               	movf	??_RGB2LCD^0,w,c
 15078  00474E  6E1C               	movwf	RGB2LCD@blue^0,c
 15079  004750  6A1D               	clrf	(RGB2LCD@blue+1)^0,c
 15080                           
 15081                           ; BSR set to: 0
 15082                           ;libraries/lcd_highlevel.c: 807:     color = (red << 11) | (green << 5) | (blue << 0);
 15083  004752  C01A  F014         	movff	RGB2LCD@green,??_RGB2LCD
 15084  004756  C01B  F015         	movff	RGB2LCD@green+1,??_RGB2LCD+1
 15085  00475A  0E05               	movlw	5
 15086  00475C                     u3355:
 15087  00475C  90D8               	bcf	status,0,c
 15088  00475E  3614               	rlcf	??_RGB2LCD^0,f,c
 15089  004760  3615               	rlcf	(??_RGB2LCD+1)^0,f,c
 15090  004762  2EE8               	decfsz	wreg,f,c
 15091  004764  D7FB               	goto	u3355
 15092  004766  C018  F016         	movff	RGB2LCD@red,??_RGB2LCD+2
 15093  00476A  C019  F017         	movff	RGB2LCD@red+1,??_RGB2LCD+3
 15094  00476E  0E0B               	movlw	11
 15095  004770                     u3365:
 15096  004770  90D8               	bcf	status,0,c
 15097  004772  3616               	rlcf	(??_RGB2LCD+2)^0,f,c
 15098  004774  3617               	rlcf	(??_RGB2LCD+3)^0,f,c
 15099  004776  2EE8               	decfsz	wreg,f,c
 15100  004778  D7FB               	goto	u3365
 15101  00477A  5014               	movf	??_RGB2LCD^0,w,c
 15102  00477C  1216               	iorwf	(??_RGB2LCD+2)^0,f,c
 15103  00477E  5015               	movf	(??_RGB2LCD+1)^0,w,c
 15104  004780  1217               	iorwf	(??_RGB2LCD+3)^0,f,c
 15105  004782  501C               	movf	RGB2LCD@blue^0,w,c
 15106  004784  1016               	iorwf	(??_RGB2LCD+2)^0,w,c
 15107  004786  6E1E               	movwf	RGB2LCD@color^0,c
 15108  004788  501D               	movf	(RGB2LCD@blue+1)^0,w,c
 15109  00478A  1017               	iorwf	(??_RGB2LCD+3)^0,w,c
 15110  00478C  6E1F               	movwf	(RGB2LCD@color+1)^0,c
 15111                           
 15112                           ; BSR set to: 0
 15113                           ;libraries/lcd_highlevel.c: 808:     return color;
 15114  00478E  C01E  F012         	movff	RGB2LCD@color,?_RGB2LCD
 15115  004792  C01F  F013         	movff	RGB2LCD@color+1,?_RGB2LCD+1
 15116                           
 15117                           ; BSR set to: 0
 15118  004796  0012               	return		;funcret
 15119  004798                     __end_of_RGB2LCD:
 15120                           	callstack 0
 15121                           
 15122 ;; *************** function _Menu_inGameDraw *****************
 15123 ;; Defined at:
 15124 ;;		line 35 in file "class/menu.c"
 15125 ;; Parameters:    Size  Location     Type
 15126 ;;  g               2   45[BANK0 ] PTR struct GameParameter
 15127 ;;		 -> g1(216), 
 15128 ;; Auto vars:     Size  Location     Type
 15129 ;;		None
 15130 ;; Return value:  Size  Location     Type
 15131 ;;                  1    wreg      void 
 15132 ;; Registers used:
 15133 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15134 ;; Tracked objects:
 15135 ;;		On entry : 3F/0
 15136 ;;		On exit  : 0/0
 15137 ;;		Unchanged: 0/0
 15138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15139 ;;      Params:         0       2       0       0       0       0       0
 15140 ;;      Locals:         0       0       0       0       0       0       0
 15141 ;;      Temps:          0       0       0       0       0       0       0
 15142 ;;      Totals:         0       2       0       0       0       0       0
 15143 ;;Total ram usage:        2 bytes
 15144 ;; Hardware stack levels used: 1
 15145 ;; Hardware stack levels required when called: 13
 15146 ;; This function calls:
 15147 ;;		_Ball_draw
 15148 ;;		_LCD_DrawRect
 15149 ;;		_LCD_Fill
 15150 ;;		_Paddle_draw
 15151 ;;		_Score_draw
 15152 ;; This function is called by:
 15153 ;;		_displaySM
 15154 ;; This function uses a non-reentrant model
 15155 ;;
 15156                           
 15157                           	psect	text60
 15158  004DD2                     __ptext60:
 15159                           	callstack 0
 15160  004DD2                     _Menu_inGameDraw:
 15161                           	callstack 15
 15162                           
 15163                           ; BSR set to: 0
 15164                           ;class/menu.c: 35: void Menu_inGameDraw(GameParameters* g);class/menu.c: 36: {;class/men
      +                          u.c: 37:     LCD_Fill(0b0000000000000000);
 15165                           
 15166                           ; BSR set to: 0
 15167                           ;incstack = 0
 15168  004DD2  0E00               	movlw	0
 15169  004DD4  6E13               	movwf	(LCD_Fill@color+1)^0,c
 15170  004DD6  0E00               	movlw	0
 15171  004DD8  6E12               	movwf	LCD_Fill@color^0,c
 15172  004DDA  ECCC  F023         	call	_LCD_Fill	;wreg free
 15173                           
 15174                           ;class/menu.c: 38:     LCD_DrawRect(0,160,239,160,1,0b1111111111111111);
 15175  004DDE  0E00               	movlw	0
 15176  004DE0  6E13               	movwf	(LCD_DrawRect@posX1+1)^0,c
 15177  004DE2  0E00               	movlw	0
 15178  004DE4  6E12               	movwf	LCD_DrawRect@posX1^0,c
 15179  004DE6  0E00               	movlw	0
 15180  004DE8  6E15               	movwf	(LCD_DrawRect@posY1+1)^0,c
 15181  004DEA  0EA0               	movlw	160
 15182  004DEC  6E14               	movwf	LCD_DrawRect@posY1^0,c
 15183  004DEE  0E00               	movlw	0
 15184  004DF0  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 15185  004DF2  0EEF               	movlw	239
 15186  004DF4  6E16               	movwf	LCD_DrawRect@posX2^0,c
 15187  004DF6  0E00               	movlw	0
 15188  004DF8  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 15189  004DFA  0EA0               	movlw	160
 15190  004DFC  6E18               	movwf	LCD_DrawRect@posY2^0,c
 15191  004DFE  0E01               	movlw	1
 15192  004E00  6E1A               	movwf	LCD_DrawRect@fill^0,c
 15193  004E02  0EFF               	movlw	255
 15194  004E04  6E1C               	movwf	(LCD_DrawRect@color+1)^0,c
 15195  004E06  681B               	setf	LCD_DrawRect@color^0,c
 15196  004E08  EC7D  F012         	call	_LCD_DrawRect	;wreg free
 15197                           
 15198                           ;class/menu.c: 39:     Score_draw(&g->s1);
 15199  004E0C  0ED2               	movlw	210
 15200  004E0E  0100               	movlb	0	; () banked
 15201  004E10  258D               	addwf	Menu_inGameDraw@g& (0+255),w,b
 15202  004E12  6F8B               	movwf	Score_draw@s& (0+255),b
 15203  004E14  0E00               	movlw	0
 15204  004E16  218E               	addwfc	(Menu_inGameDraw@g+1)& (0+255),w,b
 15205  004E18  6F8C               	movwf	(Score_draw@s+1)& (0+255),b
 15206  004E1A  EC88  F021         	call	_Score_draw	;wreg free
 15207                           
 15208                           ;class/menu.c: 40:     Paddle_draw(&g->p1);
 15209  004E1E  0EBE               	movlw	190
 15210  004E20  0100               	movlb	0	; () banked
 15211  004E22  258D               	addwf	Menu_inGameDraw@g& (0+255),w,b
 15212  004E24  6E25               	movwf	Paddle_draw@p^0,c
 15213  004E26  0E00               	movlw	0
 15214  004E28  218E               	addwfc	(Menu_inGameDraw@g+1)& (0+255),w,b
 15215  004E2A  6E26               	movwf	(Paddle_draw@p+1)^0,c
 15216  004E2C  EC04  F01D         	call	_Paddle_draw	;wreg free
 15217                           
 15218                           ;class/menu.c: 41:     Paddle_draw(&g->p2);
 15219  004E30  0EC8               	movlw	200
 15220  004E32  0100               	movlb	0	; () banked
 15221  004E34  258D               	addwf	Menu_inGameDraw@g& (0+255),w,b
 15222  004E36  6E25               	movwf	Paddle_draw@p^0,c
 15223  004E38  0E00               	movlw	0
 15224  004E3A  218E               	addwfc	(Menu_inGameDraw@g+1)& (0+255),w,b
 15225  004E3C  6E26               	movwf	(Paddle_draw@p+1)^0,c
 15226  004E3E  EC04  F01D         	call	_Paddle_draw	;wreg free
 15227                           
 15228                           ;class/menu.c: 42:     Ball_draw(&g->b);
 15229  004E42  0EB2               	movlw	178
 15230  004E44  0100               	movlb	0	; () banked
 15231  004E46  258D               	addwf	Menu_inGameDraw@g& (0+255),w,b
 15232  004E48  6E25               	movwf	Ball_draw@b^0,c
 15233  004E4A  0E00               	movlw	0
 15234  004E4C  218E               	addwfc	(Menu_inGameDraw@g+1)& (0+255),w,b
 15235  004E4E  6E26               	movwf	(Ball_draw@b+1)^0,c
 15236  004E50  ECCE  F019         	call	_Ball_draw	;wreg free
 15237  004E54  0012               	return		;funcret
 15238  004E56                     __end_of_Menu_inGameDraw:
 15239                           	callstack 0
 15240                           
 15241 ;; *************** function _Score_draw *****************
 15242 ;; Defined at:
 15243 ;;		line 32 in file "class/score.c"
 15244 ;; Parameters:    Size  Location     Type
 15245 ;;  s               2   43[BANK0 ] PTR struct Score
 15246 ;;		 -> g1(216), 
 15247 ;; Auto vars:     Size  Location     Type
 15248 ;;		None
 15249 ;; Return value:  Size  Location     Type
 15250 ;;                  1    wreg      void 
 15251 ;; Registers used:
 15252 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15253 ;; Tracked objects:
 15254 ;;		On entry : 3F/0
 15255 ;;		On exit  : 0/0
 15256 ;;		Unchanged: 0/0
 15257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15258 ;;      Params:         0       2       0       0       0       0       0
 15259 ;;      Locals:         0       0       0       0       0       0       0
 15260 ;;      Temps:          0       0       0       0       0       0       0
 15261 ;;      Totals:         0       2       0       0       0       0       0
 15262 ;;Total ram usage:        2 bytes
 15263 ;; Hardware stack levels used: 1
 15264 ;; Hardware stack levels required when called: 12
 15265 ;; This function calls:
 15266 ;;		_LCD_DrawText
 15267 ;;		_sprintf
 15268 ;; This function is called by:
 15269 ;;		_Menu_inGameDraw
 15270 ;;		_displayController
 15271 ;; This function uses a non-reentrant model
 15272 ;;
 15273                           
 15274                           	psect	text61
 15275  004310                     __ptext61:
 15276                           	callstack 0
 15277  004310                     _Score_draw:
 15278                           	callstack 14
 15279                           
 15280                           ; BSR set to: 0
 15281                           ;class/score.c: 32: void Score_draw(struct Score* s);class/score.c: 33: {;class/score.c:
      +                           34:     sprintf(s->str,"%d",s->homeScore);
 15282                           
 15283                           ;incstack = 0
 15284  004310  0E04               	movlw	4
 15285  004312  258B               	addwf	Score_draw@s& (0+255),w,b
 15286  004314  6F7E               	movwf	sprintf@s& (0+255),b
 15287  004316  0E00               	movlw	0
 15288  004318  218C               	addwfc	(Score_draw@s+1)& (0+255),w,b
 15289  00431A  6F7F               	movwf	(sprintf@s+1)& (0+255),b
 15290  00431C  0EED               	movlw	low (STR_15+3)
 15291  00431E  6F80               	movwf	sprintf@fmt& (0+255),b
 15292  004320  0E7F               	movlw	high (STR_15+3)
 15293  004322  6F81               	movwf	(sprintf@fmt+1)& (0+255),b
 15294  004324  C08B  FFD9         	movff	Score_draw@s,fsr2l
 15295  004328  C08C  FFDA         	movff	Score_draw@s+1,fsr2h
 15296  00432C  CFDE F082          	movff	postinc2,?_sprintf+4
 15297  004330  CFDD F083          	movff	postdec2,?_sprintf+5
 15298  004334  EC65  F02A         	call	_sprintf	;wreg free
 15299                           
 15300                           ; BSR set to: 0
 15301                           ;class/score.c: 35:     LCD_DrawText(s->str,&arialNarrow_12ptFontInfo,A_LEFT,20,170,0b11
      +                          11111111111111,0b0000000000000000);
 15302  004338  0E04               	movlw	4
 15303  00433A  258B               	addwf	Score_draw@s& (0+255),w,b
 15304  00433C  6E20               	movwf	LCD_DrawText@msg^0,c
 15305  00433E  0E00               	movlw	0
 15306  004340  218C               	addwfc	(Score_draw@s+1)& (0+255),w,b
 15307  004342  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
 15308  004344  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 15309  004346  6E22               	movwf	LCD_DrawText@font^0,c
 15310  004348  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 15311  00434A  6E23               	movwf	(LCD_DrawText@font+1)^0,c
 15312  00434C  0E00               	movlw	0
 15313  00434E  6E24               	movwf	LCD_DrawText@align^0,c
 15314  004350  0E00               	movlw	0
 15315  004352  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 15316  004354  0E14               	movlw	20
 15317  004356  6E25               	movwf	LCD_DrawText@posX^0,c
 15318  004358  0E00               	movlw	0
 15319  00435A  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
 15320  00435C  0EAA               	movlw	170
 15321  00435E  6E27               	movwf	LCD_DrawText@posY^0,c
 15322  004360  0EFF               	movlw	255
 15323  004362  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
 15324  004364  6829               	setf	LCD_DrawText@color^0,c
 15325  004366  0E00               	movlw	0
 15326  004368  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
 15327  00436A  0E00               	movlw	0
 15328  00436C  6E2B               	movwf	LCD_DrawText@bg_color^0,c
 15329  00436E  EC83  F00B         	call	_LCD_DrawText	;wreg free
 15330                           
 15331                           ;class/score.c: 36:     sprintf(s->str,"%d",s->awayScore);
 15332  004372  0E04               	movlw	4
 15333  004374  0100               	movlb	0	; () banked
 15334  004376  258B               	addwf	Score_draw@s& (0+255),w,b
 15335  004378  6F7E               	movwf	sprintf@s& (0+255),b
 15336  00437A  0E00               	movlw	0
 15337  00437C  218C               	addwfc	(Score_draw@s+1)& (0+255),w,b
 15338  00437E  6F7F               	movwf	(sprintf@s+1)& (0+255),b
 15339  004380  0EED               	movlw	low (STR_15+3)
 15340  004382  6F80               	movwf	sprintf@fmt& (0+255),b
 15341  004384  0E7F               	movlw	high (STR_15+3)
 15342  004386  6F81               	movwf	(sprintf@fmt+1)& (0+255),b
 15343  004388  EE20 F002          	lfsr	2,2
 15344  00438C  518B               	movf	Score_draw@s& (0+255),w,b
 15345  00438E  26D9               	addwf	fsr2l,f,c
 15346  004390  518C               	movf	(Score_draw@s+1)& (0+255),w,b
 15347  004392  22DA               	addwfc	fsr2h,f,c
 15348  004394  CFDE F082          	movff	postinc2,?_sprintf+4
 15349  004398  CFDD F083          	movff	postdec2,?_sprintf+5
 15350  00439C  EC65  F02A         	call	_sprintf	;wreg free
 15351                           
 15352                           ;class/score.c: 37:     LCD_DrawText(s->str,&arialNarrow_12ptFontInfo,A_LEFT,20,138,0b11
      +                          11111111111111,0b0000000000000000);
 15353  0043A0  0E04               	movlw	4
 15354  0043A2  258B               	addwf	Score_draw@s& (0+255),w,b
 15355  0043A4  6E20               	movwf	LCD_DrawText@msg^0,c
 15356  0043A6  0E00               	movlw	0
 15357  0043A8  218C               	addwfc	(Score_draw@s+1)& (0+255),w,b
 15358  0043AA  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
 15359  0043AC  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 15360  0043AE  6E22               	movwf	LCD_DrawText@font^0,c
 15361  0043B0  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 15362  0043B2  6E23               	movwf	(LCD_DrawText@font+1)^0,c
 15363  0043B4  0E00               	movlw	0
 15364  0043B6  6E24               	movwf	LCD_DrawText@align^0,c
 15365  0043B8  0E00               	movlw	0
 15366  0043BA  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 15367  0043BC  0E14               	movlw	20
 15368  0043BE  6E25               	movwf	LCD_DrawText@posX^0,c
 15369  0043C0  0E00               	movlw	0
 15370  0043C2  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
 15371  0043C4  0E8A               	movlw	138
 15372  0043C6  6E27               	movwf	LCD_DrawText@posY^0,c
 15373  0043C8  0EFF               	movlw	255
 15374  0043CA  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
 15375  0043CC  6829               	setf	LCD_DrawText@color^0,c
 15376  0043CE  0E00               	movlw	0
 15377  0043D0  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
 15378  0043D2  0E00               	movlw	0
 15379  0043D4  6E2B               	movwf	LCD_DrawText@bg_color^0,c
 15380  0043D6  EC83  F00B         	call	_LCD_DrawText	;wreg free
 15381  0043DA  0012               	return		;funcret
 15382  0043DC                     __end_of_Score_draw:
 15383                           	callstack 0
 15384                           
 15385 ;; *************** function _sprintf *****************
 15386 ;; Defined at:
 15387 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_sprintf.c"
 15388 ;; Parameters:    Size  Location     Type
 15389 ;;  s               2   30[BANK0 ] PTR unsigned char 
 15390 ;;		 -> touchScreenController@s(20), g1(216), 
 15391 ;;  fmt             2   32[BANK0 ] PTR const unsigned char 
 15392 ;;		 -> STR_16(6), STR_15(6), STR_3(3), STR_2(3), 
 15393 ;; Auto vars:     Size  Location     Type
 15394 ;;  f               6   37[BANK0 ] struct _IO_FILE
 15395 ;;  ret             2    0        int 
 15396 ;;  ap              1   36[BANK0 ] PTR void [1]
 15397 ;;		 -> ?_sprintf(2), 
 15398 ;; Return value:  Size  Location     Type
 15399 ;;                  2   30[BANK0 ] int 
 15400 ;; Registers used:
 15401 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15402 ;; Tracked objects:
 15403 ;;		On entry : 3F/0
 15404 ;;		On exit  : 3F/0
 15405 ;;		Unchanged: 0/0
 15406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15407 ;;      Params:         0       6       0       0       0       0       0
 15408 ;;      Locals:         0       7       0       0       0       0       0
 15409 ;;      Temps:          0       0       0       0       0       0       0
 15410 ;;      Totals:         0      13       0       0       0       0       0
 15411 ;;Total ram usage:       13 bytes
 15412 ;; Hardware stack levels used: 1
 15413 ;; Hardware stack levels required when called: 11
 15414 ;; This function calls:
 15415 ;;		_vfprintf
 15416 ;; This function is called by:
 15417 ;;		_Score_draw
 15418 ;;		_touchScreenController
 15419 ;; This function uses a non-reentrant model
 15420 ;;
 15421                           
 15422                           	psect	text62
 15423  0054CA                     __ptext62:
 15424                           	callstack 0
 15425  0054CA                     _sprintf:
 15426                           	callstack 14
 15427                           
 15428                           ; BSR set to: 0
 15429                           
 15430                           ;incstack = 0
 15431  0054CA  0E82               	movlw	low (?_sprintf+4)
 15432  0054CC  6F84               	movwf	sprintf@ap& (0+255),b
 15433  0054CE  C07E  F085         	movff	sprintf@s,sprintf@f
 15434  0054D2  C07F  F086         	movff	sprintf@s+1,sprintf@f+1
 15435                           
 15436                           ; BSR set to: 0
 15437  0054D6  0E00               	movlw	0
 15438  0054D8  6F88               	movwf	(sprintf@f+3)& (0+255),b
 15439  0054DA  0E00               	movlw	0
 15440  0054DC  6F87               	movwf	(sprintf@f+2)& (0+255),b
 15441                           
 15442                           ; BSR set to: 0
 15443  0054DE  0E00               	movlw	0
 15444  0054E0  6F8A               	movwf	(sprintf@f+5)& (0+255),b
 15445  0054E2  0E00               	movlw	0
 15446  0054E4  6F89               	movwf	(sprintf@f+4)& (0+255),b
 15447                           
 15448                           ; BSR set to: 0
 15449  0054E6  0E85               	movlw	low sprintf@f
 15450  0054E8  6F7A               	movwf	vfprintf@fp& (0+255),b
 15451  0054EA  C080  F07B         	movff	sprintf@fmt,vfprintf@fmt
 15452  0054EE  C081  F07C         	movff	sprintf@fmt+1,vfprintf@fmt+1
 15453  0054F2  0E84               	movlw	low sprintf@ap
 15454  0054F4  6F7D               	movwf	vfprintf@ap& (0+255),b
 15455  0054F6  EC20  F02A         	call	_vfprintf	;wreg free
 15456                           
 15457                           ; BSR set to: 0
 15458  0054FA  5187               	movf	(sprintf@f+2)& (0+255),w,b
 15459  0054FC  257E               	addwf	sprintf@s& (0+255),w,b
 15460  0054FE  6ED9               	movwf	fsr2l,c
 15461  005500  5188               	movf	(sprintf@f+3)& (0+255),w,b
 15462  005502  217F               	addwfc	(sprintf@s+1)& (0+255),w,b
 15463  005504  6EDA               	movwf	fsr2h,c
 15464  005506  0E00               	movlw	0
 15465  005508  6EDF               	movwf	indf2,c
 15466                           
 15467                           ; BSR set to: 0
 15468  00550A  0012               	return		;funcret
 15469  00550C                     __end_of_sprintf:
 15470                           	callstack 0
 15471                           
 15472 ;; *************** function _vfprintf *****************
 15473 ;; Defined at:
 15474 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
 15475 ;; Parameters:    Size  Location     Type
 15476 ;;  fp              1   26[BANK0 ] PTR struct _IO_FILE
 15477 ;;		 -> sprintf@f(6), 
 15478 ;;  fmt             2   27[BANK0 ] PTR const unsigned char 
 15479 ;;		 -> STR_16(6), STR_15(6), STR_3(3), STR_2(3), 
 15480 ;;  ap              1   29[BANK0 ] PTR PTR void 
 15481 ;;		 -> sprintf@ap(1), 
 15482 ;; Auto vars:     Size  Location     Type
 15483 ;;  cfmt            2   63[COMRAM] PTR unsigned char 
 15484 ;;		 -> STR_16(6), STR_15(6), STR_3(3), STR_2(3), 
 15485 ;; Return value:  Size  Location     Type
 15486 ;;                  2   26[BANK0 ] int 
 15487 ;; Registers used:
 15488 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15489 ;; Tracked objects:
 15490 ;;		On entry : 3F/0
 15491 ;;		On exit  : 3F/0
 15492 ;;		Unchanged: 0/0
 15493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15494 ;;      Params:         0       4       0       0       0       0       0
 15495 ;;      Locals:         2       0       0       0       0       0       0
 15496 ;;      Temps:          0       0       0       0       0       0       0
 15497 ;;      Totals:         2       4       0       0       0       0       0
 15498 ;;Total ram usage:        6 bytes
 15499 ;; Hardware stack levels used: 1
 15500 ;; Hardware stack levels required when called: 10
 15501 ;; This function calls:
 15502 ;;		_vfpfcnvrt
 15503 ;; This function is called by:
 15504 ;;		_sprintf
 15505 ;; This function uses a non-reentrant model
 15506 ;;
 15507                           
 15508                           	psect	text63
 15509  005440                     __ptext63:
 15510                           	callstack 0
 15511  005440                     _vfprintf:
 15512                           	callstack 14
 15513                           
 15514                           ; BSR set to: 0
 15515                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
 15516                           
 15517                           ; BSR set to: 0
 15518                           ;incstack = 0
 15519  005440  C07B  F040         	movff	vfprintf@fmt,vfprintf@cfmt
 15520  005444  C07C  F041         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
 15521                           
 15522                           ; BSR set to: 0
 15523                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
 15524  005448  0E00               	movlw	0
 15525  00544A  6FD7               	movwf	(_nout+1)& (0+255),b
 15526  00544C  0E00               	movlw	0
 15527  00544E  6FD6               	movwf	_nout& (0+255),b
 15528                           
 15529                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
 15530  005450  D00D               	goto	l8904
 15531  005452                     l8902:
 15532                           
 15533                           ; BSR set to: 0
 15534                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
 15535  005452  C07A  F03D         	movff	vfprintf@fp,vfpfcnvrt@fp
 15536  005456  0E40               	movlw	low vfprintf@cfmt
 15537  005458  6E3E               	movwf	vfpfcnvrt@fmt^0,c
 15538  00545A  C07D  F03F         	movff	vfprintf@ap,vfpfcnvrt@ap
 15539  00545E  EC79  F01A         	call	_vfpfcnvrt	;wreg free
 15540  005462  503D               	movf	?_vfpfcnvrt^0,w,c
 15541  005464  0100               	movlb	0	; () banked
 15542  005466  27D6               	addwf	_nout& (0+255),f,b
 15543  005468  503E               	movf	(?_vfpfcnvrt+1)^0,w,c
 15544  00546A  23D7               	addwfc	(_nout+1)& (0+255),f,b
 15545  00546C                     l8904:
 15546                           
 15547                           ; BSR set to: 0
 15548                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
 15549  00546C  C040  FFF6         	movff	vfprintf@cfmt,tblptrl
 15550  005470  C041  FFF7         	movff	vfprintf@cfmt+1,tblptrh
 15551  005474                     	if	0	;tblptru may be non-zero
 15552  005474                     	endif
 15553  005474                     	if	0	;tblptru may be non-zero
 15554  005474                     	endif
 15555  005474  0008               	tblrd		*
 15556  005476  50F5               	movf	tablat,w,c
 15557  005478  0900               	iorlw	0
 15558  00547A  A4D8               	btfss	status,2,c
 15559  00547C  D7EA               	goto	l8902
 15560                           
 15561                           ; BSR set to: 0
 15562                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
 15563  00547E  C0D6  F07A         	movff	_nout,?_vfprintf
 15564  005482  C0D7  F07B         	movff	_nout+1,?_vfprintf+1
 15565                           
 15566                           ; BSR set to: 0
 15567  005486  0012               	return		;funcret
 15568  005488                     __end_of_vfprintf:
 15569                           	callstack 0
 15570                           
 15571 ;; *************** function _vfpfcnvrt *****************
 15572 ;; Defined at:
 15573 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
 15574 ;; Parameters:    Size  Location     Type
 15575 ;;  fp              1   60[COMRAM] PTR struct _IO_FILE
 15576 ;;		 -> sprintf@f(6), 
 15577 ;;  fmt             1   61[COMRAM] PTR PTR unsigned char 
 15578 ;;		 -> vfprintf@cfmt(2), 
 15579 ;;  ap              1   62[COMRAM] PTR PTR void 
 15580 ;;		 -> sprintf@ap(1), 
 15581 ;; Auto vars:     Size  Location     Type
 15582 ;;  ll              8   18[BANK0 ] long long 
 15583 ;;  llu             8    0        unsigned long long 
 15584 ;;  f               4    0        unsigned long long 
 15585 ;;  vp              3    0        PTR void 
 15586 ;;  ct              3    0        unsigned char [3]
 15587 ;;  cp              3    0        PTR unsigned char 
 15588 ;;  i               2    0        int 
 15589 ;;  done            2    0        int 
 15590 ;;  c               1    0        unsigned char 
 15591 ;; Return value:  Size  Location     Type
 15592 ;;                  2   60[COMRAM] int 
 15593 ;; Registers used:
 15594 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15595 ;; Tracked objects:
 15596 ;;		On entry : 3F/0
 15597 ;;		On exit  : 0/0
 15598 ;;		Unchanged: 0/0
 15599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15600 ;;      Params:         3       0       0       0       0       0       0
 15601 ;;      Locals:         0       8       0       0       0       0       0
 15602 ;;      Temps:          0       0       0       0       0       0       0
 15603 ;;      Totals:         3       8       0       0       0       0       0
 15604 ;;Total ram usage:       11 bytes
 15605 ;; Hardware stack levels used: 1
 15606 ;; Hardware stack levels required when called: 9
 15607 ;; This function calls:
 15608 ;;		_dtoa
 15609 ;;		_fputc
 15610 ;; This function is called by:
 15611 ;;		_vfprintf
 15612 ;; This function uses a non-reentrant model
 15613 ;;
 15614                           
 15615                           	psect	text64
 15616  0034F2                     __ptext64:
 15617                           	callstack 0
 15618  0034F2                     _vfpfcnvrt:
 15619                           	callstack 14
 15620                           
 15621                           ; BSR set to: 0
 15622                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.32\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          2\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
 15623                           
 15624                           ; BSR set to: 0
 15625                           ;incstack = 0
 15626  0034F2  503E               	movf	vfpfcnvrt@fmt^0,w,c
 15627  0034F4  6ED9               	movwf	fsr2l,c
 15628  0034F6  6ADA               	clrf	fsr2h,c
 15629  0034F8  CFDE FFF6          	movff	postinc2,tblptrl
 15630  0034FC  CFDD FFF7          	movff	postdec2,tblptrh
 15631  003500                     	if	0	;tblptru may be non-zero
 15632  003500                     	endif
 15633  003500                     	if	0	;tblptru may be non-zero
 15634  003500                     	endif
 15635  003500  0008               	tblrd		*
 15636  003502  50F5               	movf	tablat,w,c
 15637  003504  0A25               	xorlw	37
 15638  003506  A4D8               	btfss	status,2,c
 15639  003508  D086               	goto	l8424
 15640                           
 15641                           ; BSR set to: 0
 15642                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
 15643  00350A  503E               	movf	vfpfcnvrt@fmt^0,w,c
 15644  00350C  6ED9               	movwf	fsr2l,c
 15645  00350E  6ADA               	clrf	fsr2h,c
 15646  003510  2ADE               	incf	postinc2,f,c
 15647  003512  0E00               	movlw	0
 15648  003514  22DD               	addwfc	postdec2,f,c
 15649                           
 15650                           ; BSR set to: 0
 15651                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
 15652  003516  0E00               	movlw	0
 15653  003518  6E48               	movwf	(_width+1)^0,c
 15654  00351A  0E00               	movlw	0
 15655  00351C  6E47               	movwf	_width^0,c
 15656  00351E  C047  F04B         	movff	_width,_flags
 15657  003522  C048  F04C         	movff	_width+1,_flags+1
 15658                           
 15659                           ; BSR set to: 0
 15660                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
 15661  003526  6849               	setf	_prec^0,c
 15662  003528  684A               	setf	(_prec+1)^0,c
 15663                           
 15664                           ; BSR set to: 0
 15665                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 847:         if (
      +                          (*fmt[0] == 'd') || (*fmt[0] == 'i')) {
 15666  00352A  503E               	movf	vfpfcnvrt@fmt^0,w,c
 15667  00352C  6ED9               	movwf	fsr2l,c
 15668  00352E  6ADA               	clrf	fsr2h,c
 15669  003530  CFDE FFF6          	movff	postinc2,tblptrl
 15670  003534  CFDD FFF7          	movff	postdec2,tblptrh
 15671  003538                     	if	0	;tblptru may be non-zero
 15672  003538                     	endif
 15673  003538                     	if	0	;tblptru may be non-zero
 15674  003538                     	endif
 15675  003538  0008               	tblrd		*
 15676  00353A  50F5               	movf	tablat,w,c
 15677  00353C  0A64               	xorlw	100
 15678  00353E  B4D8               	btfsc	status,2,c
 15679  003540  D00C               	goto	u6140
 15680                           
 15681                           ; BSR set to: 0
 15682  003542  503E               	movf	vfpfcnvrt@fmt^0,w,c
 15683  003544  6ED9               	movwf	fsr2l,c
 15684  003546  6ADA               	clrf	fsr2h,c
 15685  003548  CFDE FFF6          	movff	postinc2,tblptrl
 15686  00354C  CFDD FFF7          	movff	postdec2,tblptrh
 15687  003550                     	if	0	;tblptru may be non-zero
 15688  003550                     	endif
 15689  003550                     	if	0	;tblptru may be non-zero
 15690  003550                     	endif
 15691  003550  0008               	tblrd		*
 15692  003552  50F5               	movf	tablat,w,c
 15693  003554  0A69               	xorlw	105
 15694  003556  A4D8               	btfss	status,2,c
 15695  003558  D034               	goto	l8408
 15696  00355A                     u6140:
 15697                           
 15698                           ; BSR set to: 0
 15699                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 849:             
      +                          ++*fmt;
 15700  00355A  503E               	movf	vfpfcnvrt@fmt^0,w,c
 15701  00355C  6ED9               	movwf	fsr2l,c
 15702  00355E  6ADA               	clrf	fsr2h,c
 15703  003560  2ADE               	incf	postinc2,f,c
 15704  003562  0E00               	movlw	0
 15705  003564  22DD               	addwfc	postdec2,f,c
 15706                           
 15707                           ; BSR set to: 0
 15708                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 850:             
      +                          ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
 15709  003566  503F               	movf	vfpfcnvrt@ap^0,w,c
 15710  003568  6ED9               	movwf	fsr2l,c
 15711  00356A  6ADA               	clrf	fsr2h,c
 15712  00356C  50DF               	movf	indf2,w,c
 15713  00356E  2ADF               	incf	indf2,f,c
 15714  003570  2ADF               	incf	indf2,f,c
 15715  003572  6ED9               	movwf	fsr2l,c
 15716  003574  6ADA               	clrf	fsr2h,c
 15717  003576  CFDE F072          	movff	postinc2,vfpfcnvrt@ll
 15718  00357A  CFDD F073          	movff	postdec2,vfpfcnvrt@ll+1
 15719  00357E  0E00               	movlw	0
 15720  003580  BF73               	btfsc	(vfpfcnvrt@ll+1)& (0+255),7,b
 15721  003582  0EFF               	movlw	-1
 15722  003584  6F74               	movwf	(vfpfcnvrt@ll+2)& (0+255),b
 15723  003586  6F75               	movwf	(vfpfcnvrt@ll+3)& (0+255),b
 15724  003588  6F76               	movwf	(vfpfcnvrt@ll+4)& (0+255),b
 15725  00358A  6F77               	movwf	(vfpfcnvrt@ll+5)& (0+255),b
 15726  00358C  6F78               	movwf	(vfpfcnvrt@ll+6)& (0+255),b
 15727  00358E  6F79               	movwf	(vfpfcnvrt@ll+7)& (0+255),b
 15728                           
 15729                           ; BSR set to: 0
 15730                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 852:             
      +                          return dtoa(fp, ll);
 15731  003590  C03D  F02C         	movff	vfpfcnvrt@fp,dtoa@fp
 15732  003594  C072  F02D         	movff	vfpfcnvrt@ll,dtoa@d
 15733  003598  C073  F02E         	movff	vfpfcnvrt@ll+1,dtoa@d+1
 15734  00359C  C074  F02F         	movff	vfpfcnvrt@ll+2,dtoa@d+2
 15735  0035A0  C075  F030         	movff	vfpfcnvrt@ll+3,dtoa@d+3
 15736  0035A4  C076  F031         	movff	vfpfcnvrt@ll+4,dtoa@d+4
 15737  0035A8  C077  F032         	movff	vfpfcnvrt@ll+5,dtoa@d+5
 15738  0035AC  C078  F033         	movff	vfpfcnvrt@ll+6,dtoa@d+6
 15739  0035B0  C079  F034         	movff	vfpfcnvrt@ll+7,dtoa@d+7
 15740  0035B4  ECAF  F017         	call	_dtoa	;wreg free
 15741  0035B8  C02C  F03D         	movff	?_dtoa,?_vfpfcnvrt
 15742  0035BC  C02D  F03E         	movff	?_dtoa+1,?_vfpfcnvrt+1
 15743  0035C0  0012               	return	
 15744  0035C2                     l8408:
 15745                           
 15746                           ; BSR set to: 0
 15747                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
 15748  0035C2  503E               	movf	vfpfcnvrt@fmt^0,w,c
 15749  0035C4  6ED9               	movwf	fsr2l,c
 15750  0035C6  6ADA               	clrf	fsr2h,c
 15751  0035C8  CFDE FFF6          	movff	postinc2,tblptrl
 15752  0035CC  CFDD FFF7          	movff	postdec2,tblptrh
 15753  0035D0                     	if	0	;tblptru may be non-zero
 15754  0035D0                     	endif
 15755  0035D0                     	if	0	;tblptru may be non-zero
 15756  0035D0                     	endif
 15757  0035D0  0008               	tblrd		*
 15758  0035D2  50F5               	movf	tablat,w,c
 15759  0035D4  0A25               	xorlw	37
 15760  0035D6  A4D8               	btfss	status,2,c
 15761  0035D8  D013               	goto	l8418
 15762                           
 15763                           ; BSR set to: 0
 15764                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
 15765  0035DA  503E               	movf	vfpfcnvrt@fmt^0,w,c
 15766  0035DC  6ED9               	movwf	fsr2l,c
 15767  0035DE  6ADA               	clrf	fsr2h,c
 15768  0035E0  2ADE               	incf	postinc2,f,c
 15769  0035E2  0E00               	movlw	0
 15770  0035E4  22DD               	addwfc	postdec2,f,c
 15771                           
 15772                           ; BSR set to: 0
 15773                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
 15774  0035E6  0E00               	movlw	0
 15775  0035E8  6E13               	movwf	(fputc@c+1)^0,c
 15776  0035EA  0E25               	movlw	37
 15777  0035EC  6E12               	movwf	fputc@c^0,c
 15778  0035EE  C03D  F014         	movff	vfpfcnvrt@fp,fputc@fp
 15779  0035F2  EC5B  F026         	call	_fputc	;wreg free
 15780  0035F6                     l8414:
 15781                           
 15782                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
 15783  0035F6  0E00               	movlw	0
 15784  0035F8  6E3E               	movwf	(?_vfpfcnvrt+1)^0,c
 15785  0035FA  0E01               	movlw	1
 15786  0035FC  6E3D               	movwf	?_vfpfcnvrt^0,c
 15787  0035FE  0012               	return	
 15788  003600                     l8418:
 15789                           
 15790                           ; BSR set to: 0
 15791                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
 15792  003600  503E               	movf	vfpfcnvrt@fmt^0,w,c
 15793  003602  6ED9               	movwf	fsr2l,c
 15794  003604  6ADA               	clrf	fsr2h,c
 15795  003606  2ADE               	incf	postinc2,f,c
 15796  003608  0E00               	movlw	0
 15797  00360A  22DD               	addwfc	postdec2,f,c
 15798                           
 15799                           ; BSR set to: 0
 15800                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
 15801  00360C  0E00               	movlw	0
 15802  00360E  6E3E               	movwf	(?_vfpfcnvrt+1)^0,c
 15803  003610  0E00               	movlw	0
 15804  003612  6E3D               	movwf	?_vfpfcnvrt^0,c
 15805  003614  0012               	return	
 15806  003616                     l8424:
 15807                           
 15808                           ; BSR set to: 0
 15809                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
 15810  003616  503E               	movf	vfpfcnvrt@fmt^0,w,c
 15811  003618  6ED9               	movwf	fsr2l,c
 15812  00361A  6ADA               	clrf	fsr2h,c
 15813  00361C  CFDE FFF6          	movff	postinc2,tblptrl
 15814  003620  CFDD FFF7          	movff	postdec2,tblptrh
 15815  003624                     	if	0	;tblptru may be non-zero
 15816  003624                     	endif
 15817  003624                     	if	0	;tblptru may be non-zero
 15818  003624                     	endif
 15819  003624  0008               	tblrd		*
 15820  003626  50F5               	movf	tablat,w,c
 15821  003628  6E12               	movwf	fputc@c^0,c
 15822  00362A  6A13               	clrf	(fputc@c+1)^0,c
 15823  00362C  C03D  F014         	movff	vfpfcnvrt@fp,fputc@fp
 15824  003630  EC5B  F026         	call	_fputc	;wreg free
 15825                           
 15826                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
 15827  003634  503E               	movf	vfpfcnvrt@fmt^0,w,c
 15828  003636  6ED9               	movwf	fsr2l,c
 15829  003638  6ADA               	clrf	fsr2h,c
 15830  00363A  2ADE               	incf	postinc2,f,c
 15831  00363C  0E00               	movlw	0
 15832  00363E  22DD               	addwfc	postdec2,f,c
 15833  003640  D7DA               	goto	l8414
 15834  003642                     __end_of_vfpfcnvrt:
 15835                           	callstack 0
 15836                           
 15837 ;; *************** function _dtoa *****************
 15838 ;; Defined at:
 15839 ;;		line 287 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
 15840 ;; Parameters:    Size  Location     Type
 15841 ;;  fp              1   43[COMRAM] PTR struct _IO_FILE
 15842 ;;		 -> sprintf@f(6), 
 15843 ;;  d               8   44[COMRAM] long long 
 15844 ;; Auto vars:     Size  Location     Type
 15845 ;;  n               8    8[BANK0 ] long long 
 15846 ;;  i               2   16[BANK0 ] int 
 15847 ;;  s               2    6[BANK0 ] int 
 15848 ;;  w               2    4[BANK0 ] int 
 15849 ;;  p               2    2[BANK0 ] int 
 15850 ;; Return value:  Size  Location     Type
 15851 ;;                  2   43[COMRAM] int 
 15852 ;; Registers used:
 15853 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15854 ;; Tracked objects:
 15855 ;;		On entry : 3F/0
 15856 ;;		On exit  : 0/0
 15857 ;;		Unchanged: 0/0
 15858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15859 ;;      Params:         9       0       0       0       0       0       0
 15860 ;;      Locals:         0      18       0       0       0       0       0
 15861 ;;      Temps:          8       0       0       0       0       0       0
 15862 ;;      Totals:        17      18       0       0       0       0       0
 15863 ;;Total ram usage:       35 bytes
 15864 ;; Hardware stack levels used: 1
 15865 ;; Hardware stack levels required when called: 8
 15866 ;; This function calls:
 15867 ;;		___aodiv
 15868 ;;		___aomod
 15869 ;;		_abs
 15870 ;;		_pad
 15871 ;; This function is called by:
 15872 ;;		_vfpfcnvrt
 15873 ;; This function uses a non-reentrant model
 15874 ;;
 15875                           
 15876                           	psect	text65
 15877  002F5E                     __ptext65:
 15878                           	callstack 0
 15879  002F5E                     _dtoa:
 15880                           	callstack 14
 15881                           
 15882                           ; BSR set to: 0
 15883                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 287: static int d
      +                          toa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\d
      +                          oprnt.c: 288: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 28
      +                          9:     int i, p, s, w;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprn
      +                          t.c: 290:     long long n;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\d
      +                          oprnt.c: 293:     n = d;
 15884                           
 15885                           ;incstack = 0
 15886  002F5E  C02D  F068         	movff	dtoa@d,dtoa@n
 15887  002F62  C02E  F069         	movff	dtoa@d+1,dtoa@n+1
 15888  002F66  C02F  F06A         	movff	dtoa@d+2,dtoa@n+2
 15889  002F6A  C030  F06B         	movff	dtoa@d+3,dtoa@n+3
 15890  002F6E  C031  F06C         	movff	dtoa@d+4,dtoa@n+4
 15891  002F72  C032  F06D         	movff	dtoa@d+5,dtoa@n+5
 15892  002F76  C033  F06E         	movff	dtoa@d+6,dtoa@n+6
 15893  002F7A  C034  F06F         	movff	dtoa@d+7,dtoa@n+7
 15894                           
 15895                           ; BSR set to: 0
 15896                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 294:     s = n < 
      +                          0 ? 1 : 0;
 15897  002F7E  AF6F               	btfss	(dtoa@n+7)& (0+255),7,b
 15898  002F80  D002               	goto	u5890
 15899  002F82  0E01               	movlw	1
 15900  002F84  D001               	goto	u5900
 15901  002F86                     u5890:
 15902  002F86  0E00               	movlw	0
 15903  002F88                     u5900:
 15904  002F88  6F66               	movwf	dtoa@s& (0+255),b
 15905  002F8A  6B67               	clrf	(dtoa@s+1)& (0+255),b
 15906                           
 15907                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 295:     if (s) {
 15908  002F8C  5166               	movf	dtoa@s& (0+255),w,b
 15909  002F8E  1167               	iorwf	(dtoa@s+1)& (0+255),w,b
 15910  002F90  B4D8               	btfsc	status,2,c
 15911  002F92  D010               	goto	l8274
 15912                           
 15913                           ; BSR set to: 0
 15914                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 296:         n = 
      +                          -n;
 15915  002F94  1F6F               	comf	(dtoa@n+7)& (0+255),f,b
 15916  002F96  1F6E               	comf	(dtoa@n+6)& (0+255),f,b
 15917  002F98  1F6D               	comf	(dtoa@n+5)& (0+255),f,b
 15918  002F9A  1F6C               	comf	(dtoa@n+4)& (0+255),f,b
 15919  002F9C  1F6B               	comf	(dtoa@n+3)& (0+255),f,b
 15920  002F9E  1F6A               	comf	(dtoa@n+2)& (0+255),f,b
 15921  002FA0  1F69               	comf	(dtoa@n+1)& (0+255),f,b
 15922  002FA2  6D68               	negf	dtoa@n& (0+255),b
 15923  002FA4  0E00               	movlw	0
 15924  002FA6  2369               	addwfc	(dtoa@n+1)& (0+255),f,b
 15925  002FA8  236A               	addwfc	(dtoa@n+2)& (0+255),f,b
 15926  002FAA  236B               	addwfc	(dtoa@n+3)& (0+255),f,b
 15927  002FAC  236C               	addwfc	(dtoa@n+4)& (0+255),f,b
 15928  002FAE  236D               	addwfc	(dtoa@n+5)& (0+255),f,b
 15929  002FB0  236E               	addwfc	(dtoa@n+6)& (0+255),f,b
 15930  002FB2  236F               	addwfc	(dtoa@n+7)& (0+255),f,b
 15931  002FB4                     l8274:
 15932                           
 15933                           ; BSR set to: 0
 15934                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 300:     if (!(pr
      +                          ec < 0)) {
 15935  002FB4  AE4A               	btfss	(_prec+1)^0,7,c
 15936                           
 15937                           ; BSR set to: 0
 15938                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 301:         flag
      +                          s &= ~(1 << 1);
 15939  002FB6  924B               	bcf	_flags^0,1,c
 15940                           
 15941                           ; BSR set to: 0
 15942                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 303:     p = (0 <
      +                           prec) ? prec : 1;
 15943  002FB8  BE4A               	btfsc	(_prec+1)^0,7,c
 15944  002FBA  D005               	goto	u5930
 15945  002FBC  504A               	movf	(_prec+1)^0,w,c
 15946  002FBE  E108               	bnz	l1590
 15947  002FC0  0449               	decf	_prec^0,w,c
 15948  002FC2  B0D8               	btfsc	status,0,c
 15949  002FC4  D005               	goto	l1590
 15950  002FC6                     u5930:
 15951                           
 15952                           ; BSR set to: 0
 15953  002FC6  0E00               	movlw	0
 15954  002FC8  6F63               	movwf	(dtoa@p+1)& (0+255),b
 15955  002FCA  0E01               	movlw	1
 15956  002FCC  6F62               	movwf	dtoa@p& (0+255),b
 15957  002FCE  D004               	goto	l1592
 15958  002FD0                     l1590:
 15959                           
 15960                           ; BSR set to: 0
 15961  002FD0  C049  F062         	movff	_prec,dtoa@p
 15962  002FD4  C04A  F063         	movff	_prec+1,dtoa@p+1
 15963  002FD8                     l1592:
 15964                           
 15965                           ; BSR set to: 0
 15966                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 304:     w = widt
      +                          h;
 15967  002FD8  C047  F064         	movff	_width,dtoa@w
 15968  002FDC  C048  F065         	movff	_width+1,dtoa@w+1
 15969                           
 15970                           ; BSR set to: 0
 15971                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 305:     if (s ||
      +                           (flags & (1 << 2))) {
 15972  002FE0  5166               	movf	dtoa@s& (0+255),w,b
 15973  002FE2  1167               	iorwf	(dtoa@s+1)& (0+255),w,b
 15974  002FE4  A4D8               	btfss	status,2,c
 15975  002FE6  D002               	goto	u5950
 15976                           
 15977                           ; BSR set to: 0
 15978  002FE8  A44B               	btfss	_flags^0,2,c
 15979  002FEA  D003               	goto	l8288
 15980  002FEC                     u5950:
 15981                           
 15982                           ; BSR set to: 0
 15983                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 306:         --w;
 15984  002FEC  0764               	decf	dtoa@w& (0+255),f,b
 15985  002FEE  A0D8               	btfss	status,0,c
 15986  002FF0  0765               	decf	(dtoa@w+1)& (0+255),f,b
 15987  002FF2                     l8288:
 15988                           
 15989                           ; BSR set to: 0
 15990                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 310:     i = size
      +                          of(dbuf) - 1;
 15991  002FF2  0E00               	movlw	0
 15992  002FF4  6F71               	movwf	(dtoa@i+1)& (0+255),b
 15993  002FF6  0E1F               	movlw	31
 15994  002FF8  6F70               	movwf	dtoa@i& (0+255),b
 15995                           
 15996                           ; BSR set to: 0
 15997                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 311:     dbuf[i] 
      +                          = '\0';
 15998  002FFA  0E00               	movlw	0
 15999  002FFC  6FFA               	movwf	(_dbuf+31)& (0+255),b
 16000                           
 16001                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 16002  002FFE  D07A               	goto	l8302
 16003  003000                     l8292:
 16004                           
 16005                           ; BSR set to: 0
 16006                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 313:         --i;
 16007  003000  0770               	decf	dtoa@i& (0+255),f,b
 16008  003002  A0D8               	btfss	status,0,c
 16009  003004  0771               	decf	(dtoa@i+1)& (0+255),f,b
 16010                           
 16011                           ; BSR set to: 0
 16012                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 314:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
 16013  003006  5170               	movf	dtoa@i& (0+255),w,b
 16014  003008  0FDB               	addlw	low _dbuf
 16015  00300A  6ED9               	movwf	fsr2l,c
 16016  00300C  6ADA               	clrf	fsr2h,c
 16017  00300E  C068  F012         	movff	dtoa@n,___aomod@dividend
 16018  003012  C069  F013         	movff	dtoa@n+1,___aomod@dividend+1
 16019  003016  C06A  F014         	movff	dtoa@n+2,___aomod@dividend+2
 16020  00301A  C06B  F015         	movff	dtoa@n+3,___aomod@dividend+3
 16021  00301E  C06C  F016         	movff	dtoa@n+4,___aomod@dividend+4
 16022  003022  C06D  F017         	movff	dtoa@n+5,___aomod@dividend+5
 16023  003026  C06E  F018         	movff	dtoa@n+6,___aomod@dividend+6
 16024  00302A  C06F  F019         	movff	dtoa@n+7,___aomod@dividend+7
 16025  00302E  0E0A               	movlw	10
 16026  003030  6E1A               	movwf	___aomod@divisor^0,c
 16027  003032  0E00               	movlw	0
 16028  003034  6E1B               	movwf	(___aomod@divisor+1)^0,c
 16029  003036  0E00               	movlw	0
 16030  003038  6E1C               	movwf	(___aomod@divisor+2)^0,c
 16031  00303A  0E00               	movlw	0
 16032  00303C  6E1D               	movwf	(___aomod@divisor+3)^0,c
 16033  00303E  0E00               	movlw	0
 16034  003040  6E1E               	movwf	(___aomod@divisor+4)^0,c
 16035  003042  0E00               	movlw	0
 16036  003044  6E1F               	movwf	(___aomod@divisor+5)^0,c
 16037  003046  0E00               	movlw	0
 16038  003048  6E20               	movwf	(___aomod@divisor+6)^0,c
 16039  00304A  0E00               	movlw	0
 16040  00304C  6E21               	movwf	(___aomod@divisor+7)^0,c
 16041  00304E  EC9D  F01D         	call	___aomod	;wreg free
 16042  003052  C012  F035         	movff	?___aomod,??_dtoa
 16043  003056  C013  F036         	movff	?___aomod+1,??_dtoa+1
 16044  00305A  C014  F037         	movff	?___aomod+2,??_dtoa+2
 16045  00305E  C015  F038         	movff	?___aomod+3,??_dtoa+3
 16046  003062  C016  F039         	movff	?___aomod+4,??_dtoa+4
 16047  003066  C017  F03A         	movff	?___aomod+5,??_dtoa+5
 16048  00306A  C018  F03B         	movff	?___aomod+6,??_dtoa+6
 16049  00306E  C019  F03C         	movff	?___aomod+7,??_dtoa+7
 16050  003072  C035  F024         	movff	??_dtoa,abs@a
 16051  003076  C037  F025         	movff	??_dtoa+2,abs@a+1
 16052  00307A  EC60  F02B         	call	_abs	;wreg free
 16053  00307E  5024               	movf	?_abs^0,w,c
 16054  003080  0F30               	addlw	48
 16055  003082  6EDF               	movwf	indf2,c
 16056                           
 16057                           ; BSR set to: 0
 16058                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 315:         --p;
 16059  003084  0762               	decf	dtoa@p& (0+255),f,b
 16060  003086  A0D8               	btfss	status,0,c
 16061  003088  0763               	decf	(dtoa@p+1)& (0+255),f,b
 16062                           
 16063                           ; BSR set to: 0
 16064                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 316:         --w;
 16065  00308A  0764               	decf	dtoa@w& (0+255),f,b
 16066  00308C  A0D8               	btfss	status,0,c
 16067  00308E  0765               	decf	(dtoa@w+1)& (0+255),f,b
 16068                           
 16069                           ; BSR set to: 0
 16070                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 317:         n = 
      +                          n / 10;
 16071  003090  C068  F012         	movff	dtoa@n,___aodiv@dividend
 16072  003094  C069  F013         	movff	dtoa@n+1,___aodiv@dividend+1
 16073  003098  C06A  F014         	movff	dtoa@n+2,___aodiv@dividend+2
 16074  00309C  C06B  F015         	movff	dtoa@n+3,___aodiv@dividend+3
 16075  0030A0  C06C  F016         	movff	dtoa@n+4,___aodiv@dividend+4
 16076  0030A4  C06D  F017         	movff	dtoa@n+5,___aodiv@dividend+5
 16077  0030A8  C06E  F018         	movff	dtoa@n+6,___aodiv@dividend+6
 16078  0030AC  C06F  F019         	movff	dtoa@n+7,___aodiv@dividend+7
 16079  0030B0  0E0A               	movlw	10
 16080  0030B2  6E1A               	movwf	___aodiv@divisor^0,c
 16081  0030B4  0E00               	movlw	0
 16082  0030B6  6E1B               	movwf	(___aodiv@divisor+1)^0,c
 16083  0030B8  0E00               	movlw	0
 16084  0030BA  6E1C               	movwf	(___aodiv@divisor+2)^0,c
 16085  0030BC  0E00               	movlw	0
 16086  0030BE  6E1D               	movwf	(___aodiv@divisor+3)^0,c
 16087  0030C0  0E00               	movlw	0
 16088  0030C2  6E1E               	movwf	(___aodiv@divisor+4)^0,c
 16089  0030C4  0E00               	movlw	0
 16090  0030C6  6E1F               	movwf	(___aodiv@divisor+5)^0,c
 16091  0030C8  0E00               	movlw	0
 16092  0030CA  6E20               	movwf	(___aodiv@divisor+6)^0,c
 16093  0030CC  0E00               	movlw	0
 16094  0030CE  6E21               	movwf	(___aodiv@divisor+7)^0,c
 16095  0030D0  EC21  F01B         	call	___aodiv	;wreg free
 16096  0030D4  C012  F068         	movff	?___aodiv,dtoa@n
 16097  0030D8  C013  F069         	movff	?___aodiv+1,dtoa@n+1
 16098  0030DC  C014  F06A         	movff	?___aodiv+2,dtoa@n+2
 16099  0030E0  C015  F06B         	movff	?___aodiv+3,dtoa@n+3
 16100  0030E4  C016  F06C         	movff	?___aodiv+4,dtoa@n+4
 16101  0030E8  C017  F06D         	movff	?___aodiv+5,dtoa@n+5
 16102  0030EC  C018  F06E         	movff	?___aodiv+6,dtoa@n+6
 16103  0030F0  C019  F06F         	movff	?___aodiv+7,dtoa@n+7
 16104  0030F4                     l8302:
 16105                           
 16106                           ; BSR set to: 0
 16107                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 16108  0030F4  BF71               	btfsc	(dtoa@i+1)& (0+255),7,b
 16109  0030F6  D01F               	goto	u6000
 16110  0030F8  5171               	movf	(dtoa@i+1)& (0+255),w,b
 16111  0030FA  E103               	bnz	u5960
 16112  0030FC  0570               	decf	dtoa@i& (0+255),w,b
 16113  0030FE  A0D8               	btfss	status,0,c
 16114  003100  D01A               	goto	u6000
 16115  003102                     u5960:
 16116                           
 16117                           ; BSR set to: 0
 16118  003102  5168               	movf	dtoa@n& (0+255),w,b
 16119  003104  1169               	iorwf	(dtoa@n+1)& (0+255),w,b
 16120  003106  116A               	iorwf	(dtoa@n+2)& (0+255),w,b
 16121  003108  116B               	iorwf	(dtoa@n+3)& (0+255),w,b
 16122  00310A  116C               	iorwf	(dtoa@n+4)& (0+255),w,b
 16123  00310C  116D               	iorwf	(dtoa@n+5)& (0+255),w,b
 16124  00310E  116E               	iorwf	(dtoa@n+6)& (0+255),w,b
 16125  003110  116F               	iorwf	(dtoa@n+7)& (0+255),w,b
 16126  003112  A4D8               	btfss	status,2,c
 16127  003114  D775               	goto	l8292
 16128                           
 16129                           ; BSR set to: 0
 16130  003116  BF63               	btfsc	(dtoa@p+1)& (0+255),7,b
 16131  003118  D005               	goto	u5980
 16132  00311A  5163               	movf	(dtoa@p+1)& (0+255),w,b
 16133  00311C  E102               	bnz	u5981
 16134  00311E  0562               	decf	dtoa@p& (0+255),w,b
 16135  003120  B0D8               	btfsc	status,0,c
 16136  003122                     u5981:
 16137  003122  D76E               	goto	l8292
 16138  003124                     u5980:
 16139                           
 16140                           ; BSR set to: 0
 16141  003124  BF65               	btfsc	(dtoa@w+1)& (0+255),7,b
 16142  003126  D007               	goto	u6000
 16143  003128  5165               	movf	(dtoa@w+1)& (0+255),w,b
 16144  00312A  E103               	bnz	u5990
 16145  00312C  0564               	decf	dtoa@w& (0+255),w,b
 16146  00312E  A0D8               	btfss	status,0,c
 16147  003130  D002               	goto	u6000
 16148  003132                     u5990:
 16149                           
 16150                           ; BSR set to: 0
 16151  003132  B24B               	btfsc	_flags^0,1,c
 16152  003134  D765               	goto	l8292
 16153  003136                     u6000:
 16154                           
 16155                           ; BSR set to: 0
 16156                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 321:     if (s ||
      +                           (flags & (1 << 2))) {
 16157  003136  5166               	movf	dtoa@s& (0+255),w,b
 16158  003138  1167               	iorwf	(dtoa@s+1)& (0+255),w,b
 16159  00313A  A4D8               	btfss	status,2,c
 16160  00313C  D002               	goto	u6020
 16161                           
 16162                           ; BSR set to: 0
 16163  00313E  A44B               	btfss	_flags^0,2,c
 16164  003140  D015               	goto	l8326
 16165  003142                     u6020:
 16166                           
 16167                           ; BSR set to: 0
 16168                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 322:         --i;
 16169  003142  0770               	decf	dtoa@i& (0+255),f,b
 16170  003144  A0D8               	btfss	status,0,c
 16171  003146  0771               	decf	(dtoa@i+1)& (0+255),f,b
 16172                           
 16173                           ; BSR set to: 0
 16174                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 323:         dbuf
      +                          [i] = s ? '-' : '+';
 16175  003148  5166               	movf	dtoa@s& (0+255),w,b
 16176  00314A  1167               	iorwf	(dtoa@s+1)& (0+255),w,b
 16177  00314C  A4D8               	btfss	status,2,c
 16178  00314E  D004               	goto	l8322
 16179                           
 16180                           ; BSR set to: 0
 16181  003150  0E00               	movlw	0
 16182  003152  6F61               	movwf	(_dtoa$5218+1)& (0+255),b
 16183  003154  0E2B               	movlw	43
 16184  003156  D003               	goto	L11
 16185  003158                     l8322:
 16186                           
 16187                           ; BSR set to: 0
 16188  003158  0E00               	movlw	0
 16189  00315A  6F61               	movwf	(_dtoa$5218+1)& (0+255),b
 16190  00315C  0E2D               	movlw	45
 16191  00315E                     L11:
 16192  00315E  6F60               	movwf	_dtoa$5218& (0+255),b
 16193                           
 16194                           ; BSR set to: 0
 16195  003160  5170               	movf	dtoa@i& (0+255),w,b
 16196  003162  0FDB               	addlw	low _dbuf
 16197  003164  6ED9               	movwf	fsr2l,c
 16198  003166  6ADA               	clrf	fsr2h,c
 16199  003168  C060  FFDF         	movff	_dtoa$5218,indf2
 16200  00316C                     l8326:
 16201                           
 16202                           ; BSR set to: 0
 16203                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 327:     return p
      +                          ad(fp, &dbuf[i], w);
 16204  00316C  C02C  F01F         	movff	dtoa@fp,pad@fp
 16205  003170  5170               	movf	dtoa@i& (0+255),w,b
 16206  003172  0FDB               	addlw	low _dbuf
 16207  003174  6E20               	movwf	pad@buf^0,c
 16208  003176  C064  F021         	movff	dtoa@w,pad@p
 16209  00317A  C065  F022         	movff	dtoa@w+1,pad@p+1
 16210  00317E  ECAE  F027         	call	_pad	;wreg free
 16211  003182  C01F  F02C         	movff	?_pad,?_dtoa
 16212  003186  C020  F02D         	movff	?_pad+1,?_dtoa+1
 16213  00318A  0012               	return		;funcret
 16214  00318C                     __end_of_dtoa:
 16215                           	callstack 0
 16216                           
 16217 ;; *************** function _pad *****************
 16218 ;; Defined at:
 16219 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
 16220 ;; Parameters:    Size  Location     Type
 16221 ;;  fp              1   30[COMRAM] PTR struct _IO_FILE
 16222 ;;		 -> sprintf@f(6), 
 16223 ;;  buf             1   31[COMRAM] PTR unsigned char 
 16224 ;;		 -> dbuf(32), 
 16225 ;;  p               2   32[COMRAM] int 
 16226 ;; Auto vars:     Size  Location     Type
 16227 ;;  w               2   37[COMRAM] int 
 16228 ;;  i               2   35[COMRAM] int 
 16229 ;; Return value:  Size  Location     Type
 16230 ;;                  2   30[COMRAM] int 
 16231 ;; Registers used:
 16232 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16233 ;; Tracked objects:
 16234 ;;		On entry : 3F/0
 16235 ;;		On exit  : 0/0
 16236 ;;		Unchanged: 0/0
 16237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16238 ;;      Params:         4       0       0       0       0       0       0
 16239 ;;      Locals:         4       0       0       0       0       0       0
 16240 ;;      Temps:          1       0       0       0       0       0       0
 16241 ;;      Totals:         9       0       0       0       0       0       0
 16242 ;;Total ram usage:        9 bytes
 16243 ;; Hardware stack levels used: 1
 16244 ;; Hardware stack levels required when called: 7
 16245 ;; This function calls:
 16246 ;;		_fputc
 16247 ;;		_fputs
 16248 ;;		_strlen
 16249 ;; This function is called by:
 16250 ;;		_dtoa
 16251 ;; This function uses a non-reentrant model
 16252 ;;
 16253                           
 16254                           	psect	text66
 16255  004F5C                     __ptext66:
 16256                           	callstack 0
 16257  004F5C                     _pad:
 16258                           	callstack 14
 16259                           
 16260                           ; BSR set to: 0
 16261                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
 16262                           
 16263                           ;incstack = 0
 16264  004F5C  A04B               	btfss	_flags^0,0,c
 16265  004F5E  D006               	goto	l8246
 16266                           
 16267                           ; BSR set to: 0
 16268                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
 16269  004F60  C020  F01A         	movff	pad@buf,fputs@s
 16270  004F64  C01F  F01B         	movff	pad@fp,fputs@fp
 16271  004F68  EC79  F02B         	call	_fputs	;wreg free
 16272  004F6C                     l8246:
 16273                           
 16274                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
 16275  004F6C  BE22               	btfsc	(pad@p+1)^0,7,c
 16276  004F6E  D005               	goto	l8250
 16277  004F70  C021  F026         	movff	pad@p,pad@w
 16278  004F74  C022  F027         	movff	pad@p+1,pad@w+1
 16279  004F78  D004               	goto	l1579
 16280  004F7A                     l8250:
 16281  004F7A  0E00               	movlw	0
 16282  004F7C  6E27               	movwf	(pad@w+1)^0,c
 16283  004F7E  0E00               	movlw	0
 16284  004F80  6E26               	movwf	pad@w^0,c
 16285  004F82                     l1579:
 16286                           
 16287                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 83:     i = 0;
 16288  004F82  0E00               	movlw	0
 16289  004F84  6E25               	movwf	(pad@i+1)^0,c
 16290  004F86  0E00               	movlw	0
 16291  004F88  6E24               	movwf	pad@i^0,c
 16292                           
 16293                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
 16294  004F8A  D00A               	goto	l8256
 16295  004F8C                     l8252:
 16296                           
 16297                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
 16298  004F8C  0E00               	movlw	0
 16299  004F8E  6E13               	movwf	(fputc@c+1)^0,c
 16300  004F90  0E20               	movlw	32
 16301  004F92  6E12               	movwf	fputc@c^0,c
 16302  004F94  C01F  F014         	movff	pad@fp,fputc@fp
 16303  004F98  EC5B  F026         	call	_fputc	;wreg free
 16304                           
 16305                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 86:         ++i;
 16306  004F9C  4A24               	infsnz	pad@i^0,f,c
 16307  004F9E  2A25               	incf	(pad@i+1)^0,f,c
 16308  004FA0                     l8256:
 16309                           
 16310                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
 16311  004FA0  5026               	movf	pad@w^0,w,c
 16312  004FA2  5C24               	subwf	pad@i^0,w,c
 16313  004FA4  5025               	movf	(pad@i+1)^0,w,c
 16314  004FA6  0A80               	xorlw	128
 16315  004FA8  6E23               	movwf	??_pad^0,c
 16316  004FAA  5027               	movf	(pad@w+1)^0,w,c
 16317  004FAC  0A80               	xorlw	128
 16318  004FAE  5823               	subwfb	??_pad^0,w,c
 16319  004FB0  A0D8               	btfss	status,0,c
 16320  004FB2  D7EC               	goto	l8252
 16321                           
 16322                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
 16323  004FB4  B04B               	btfsc	_flags^0,0,c
 16324  004FB6  D006               	goto	l8260
 16325                           
 16326                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
 16327  004FB8  C020  F01A         	movff	pad@buf,fputs@s
 16328  004FBC  C01F  F01B         	movff	pad@fp,fputs@fp
 16329  004FC0  EC79  F02B         	call	_fputs	;wreg free
 16330  004FC4                     l8260:
 16331                           
 16332                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 94:     return (i
      +                          nt)(strlen(buf) + (size_t)w);
 16333  004FC4  C020  F012         	movff	pad@buf,strlen@s
 16334  004FC8  6A13               	clrf	(strlen@s+1)^0,c
 16335  004FCA  EC86  F02A         	call	_strlen	;wreg free
 16336  004FCE  5026               	movf	pad@w^0,w,c
 16337  004FD0  2412               	addwf	?_strlen^0,w,c
 16338  004FD2  6E1F               	movwf	?_pad^0,c
 16339  004FD4  5027               	movf	(pad@w+1)^0,w,c
 16340  004FD6  2013               	addwfc	(?_strlen+1)^0,w,c
 16341  004FD8  6E20               	movwf	(?_pad+1)^0,c
 16342  004FDA  0012               	return		;funcret
 16343  004FDC                     __end_of_pad:
 16344                           	callstack 0
 16345                           
 16346 ;; *************** function _fputs *****************
 16347 ;; Defined at:
 16348 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputs.c"
 16349 ;; Parameters:    Size  Location     Type
 16350 ;;  s               1   25[COMRAM] PTR const unsigned char 
 16351 ;;		 -> dbuf(32), 
 16352 ;;  fp              1   26[COMRAM] PTR struct _IO_FILE
 16353 ;;		 -> sprintf@f(6), 
 16354 ;; Auto vars:     Size  Location     Type
 16355 ;;  i               2   28[COMRAM] int 
 16356 ;;  c               1   27[COMRAM] unsigned char 
 16357 ;; Return value:  Size  Location     Type
 16358 ;;                  2   25[COMRAM] int 
 16359 ;; Registers used:
 16360 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16361 ;; Tracked objects:
 16362 ;;		On entry : 0/0
 16363 ;;		On exit  : 0/0
 16364 ;;		Unchanged: 0/0
 16365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16366 ;;      Params:         2       0       0       0       0       0       0
 16367 ;;      Locals:         3       0       0       0       0       0       0
 16368 ;;      Temps:          0       0       0       0       0       0       0
 16369 ;;      Totals:         5       0       0       0       0       0       0
 16370 ;;Total ram usage:        5 bytes
 16371 ;; Hardware stack levels used: 1
 16372 ;; Hardware stack levels required when called: 6
 16373 ;; This function calls:
 16374 ;;		_fputc
 16375 ;; This function is called by:
 16376 ;;		_pad
 16377 ;; This function uses a non-reentrant model
 16378 ;;
 16379                           
 16380                           	psect	text67
 16381  0056F2                     __ptext67:
 16382                           	callstack 0
 16383  0056F2                     _fputs:
 16384                           	callstack 14
 16385                           
 16386                           ;incstack = 0
 16387  0056F2  0E00               	movlw	0
 16388  0056F4  6E1E               	movwf	(fputs@i+1)^0,c
 16389  0056F6  0E00               	movlw	0
 16390  0056F8  6E1D               	movwf	fputs@i^0,c
 16391  0056FA  D009               	goto	l8160
 16392  0056FC                     l8156:
 16393  0056FC  C01C  F012         	movff	fputs@c,fputc@c
 16394  005700  6A13               	clrf	(fputc@c+1)^0,c
 16395  005702  C01B  F014         	movff	fputs@fp,fputc@fp
 16396  005706  EC5B  F026         	call	_fputc	;wreg free
 16397  00570A  4A1D               	infsnz	fputs@i^0,f,c
 16398  00570C  2A1E               	incf	(fputs@i+1)^0,f,c
 16399  00570E                     l8160:
 16400  00570E  501A               	movf	fputs@s^0,w,c
 16401  005710  241D               	addwf	fputs@i^0,w,c
 16402  005712  6ED9               	movwf	fsr2l,c
 16403  005714  6ADA               	clrf	fsr2h,c
 16404  005716  50DF               	movf	indf2,w,c
 16405  005718  6E1C               	movwf	fputs@c^0,c
 16406  00571A  501C               	movf	fputs@c^0,w,c
 16407  00571C  B4D8               	btfsc	status,2,c
 16408  00571E  0012               	return	
 16409  005720  D7ED               	goto	l8156
 16410  005722                     __end_of_fputs:
 16411                           	callstack 0
 16412                           
 16413 ;; *************** function _fputc *****************
 16414 ;; Defined at:
 16415 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputc.c"
 16416 ;; Parameters:    Size  Location     Type
 16417 ;;  c               2   17[COMRAM] int 
 16418 ;;  fp              1   19[COMRAM] PTR struct _IO_FILE
 16419 ;;		 -> sprintf@f(6), 
 16420 ;; Auto vars:     Size  Location     Type
 16421 ;;		None
 16422 ;; Return value:  Size  Location     Type
 16423 ;;                  2   17[COMRAM] int 
 16424 ;; Registers used:
 16425 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16426 ;; Tracked objects:
 16427 ;;		On entry : 0/0
 16428 ;;		On exit  : 0/0
 16429 ;;		Unchanged: 0/0
 16430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16431 ;;      Params:         3       0       0       0       0       0       0
 16432 ;;      Locals:         0       0       0       0       0       0       0
 16433 ;;      Temps:          5       0       0       0       0       0       0
 16434 ;;      Totals:         8       0       0       0       0       0       0
 16435 ;;Total ram usage:        8 bytes
 16436 ;; Hardware stack levels used: 1
 16437 ;; Hardware stack levels required when called: 5
 16438 ;; This function calls:
 16439 ;;		_putch
 16440 ;; This function is called by:
 16441 ;;		_pad
 16442 ;;		_vfpfcnvrt
 16443 ;;		_fputs
 16444 ;; This function uses a non-reentrant model
 16445 ;;
 16446                           
 16447                           	psect	text68
 16448  004CB6                     __ptext68:
 16449                           	callstack 0
 16450  004CB6                     _fputc:
 16451                           	callstack 17
 16452                           
 16453                           ;incstack = 0
 16454  004CB6  5014               	movf	fputc@fp^0,w,c
 16455  004CB8  B4D8               	btfsc	status,2,c
 16456  004CBA  D003               	goto	u5650
 16457  004CBC  5014               	movf	fputc@fp^0,w,c
 16458  004CBE  A4D8               	btfss	status,2,c
 16459  004CC0  D004               	goto	l8136
 16460  004CC2                     u5650:
 16461  004CC2  5012               	movf	fputc@c^0,w,c
 16462  004CC4  EC79  F02C         	call	_putch
 16463  004CC8  0012               	return	
 16464  004CCA                     l8136:
 16465  004CCA  5014               	movf	fputc@fp^0,w,c
 16466  004CCC  6ED9               	movwf	fsr2l,c
 16467  004CCE  6ADA               	clrf	fsr2h,c
 16468  004CD0  0E04               	movlw	4
 16469  004CD2  26D9               	addwf	fsr2l,f,c
 16470  004CD4  50DE               	movf	postinc2,w,c
 16471  004CD6  10DE               	iorwf	postinc2,w,c
 16472  004CD8  B4D8               	btfsc	status,2,c
 16473  004CDA  D014               	goto	u5670
 16474  004CDC  5014               	movf	fputc@fp^0,w,c
 16475  004CDE  6ED9               	movwf	fsr2l,c
 16476  004CE0  6ADA               	clrf	fsr2h,c
 16477  004CE2  0E04               	movlw	4
 16478  004CE4  26D9               	addwf	fsr2l,f,c
 16479  004CE6  5014               	movf	fputc@fp^0,w,c
 16480  004CE8  6EE1               	movwf	fsr1l,c
 16481  004CEA  6AE2               	clrf	fsr1h,c
 16482  004CEC  0E02               	movlw	2
 16483  004CEE  26E1               	addwf	fsr1l,f,c
 16484  004CF0  50DE               	movf	postinc2,w,c
 16485  004CF2  5CE6               	subwf	postinc1,w,c
 16486  004CF4  50E6               	movf	postinc1,w,c
 16487  004CF6  0A80               	xorlw	128
 16488  004CF8  6E19               	movwf	(??_fputc+4)^0,c
 16489  004CFA  50DE               	movf	postinc2,w,c
 16490  004CFC  0A80               	xorlw	128
 16491  004CFE  5819               	subwfb	(??_fputc+4)^0,w,c
 16492  004D00  B0D8               	btfsc	status,0,c
 16493  004D02  0012               	return	
 16494  004D04                     u5670:
 16495  004D04  5014               	movf	fputc@fp^0,w,c
 16496  004D06  6ED9               	movwf	fsr2l,c
 16497  004D08  6ADA               	clrf	fsr2h,c
 16498  004D0A  0E02               	movlw	2
 16499  004D0C  26D9               	addwf	fsr2l,f,c
 16500  004D0E  CFDE F015          	movff	postinc2,??_fputc
 16501  004D12  CFDD F016          	movff	postdec2,??_fputc+1
 16502  004D16  5014               	movf	fputc@fp^0,w,c
 16503  004D18  6ED9               	movwf	fsr2l,c
 16504  004D1A  6ADA               	clrf	fsr2h,c
 16505  004D1C  CFDE F017          	movff	postinc2,??_fputc+2
 16506  004D20  CFDD F018          	movff	postdec2,??_fputc+3
 16507  004D24  5015               	movf	??_fputc^0,w,c
 16508  004D26  2417               	addwf	(??_fputc+2)^0,w,c
 16509  004D28  6ED9               	movwf	fsr2l,c
 16510  004D2A  5016               	movf	(??_fputc+1)^0,w,c
 16511  004D2C  2018               	addwfc	(??_fputc+3)^0,w,c
 16512  004D2E  6EDA               	movwf	fsr2h,c
 16513  004D30  C012  FFDF         	movff	fputc@c,indf2
 16514  004D34  5014               	movf	fputc@fp^0,w,c
 16515  004D36  6ED9               	movwf	fsr2l,c
 16516  004D38  6ADA               	clrf	fsr2h,c
 16517  004D3A  0E02               	movlw	2
 16518  004D3C  26D9               	addwf	fsr2l,f,c
 16519  004D3E  2ADE               	incf	postinc2,f,c
 16520  004D40  0E00               	movlw	0
 16521  004D42  22DD               	addwfc	postdec2,f,c
 16522  004D44  0012               	return		;funcret
 16523  004D46                     __end_of_fputc:
 16524                           	callstack 0
 16525                           
 16526 ;; *************** function _putch *****************
 16527 ;; Defined at:
 16528 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\putch.c"
 16529 ;; Parameters:    Size  Location     Type
 16530 ;;  c               1    wreg     unsigned char 
 16531 ;; Auto vars:     Size  Location     Type
 16532 ;;  c               1    0[COMRAM] unsigned char 
 16533 ;; Return value:  Size  Location     Type
 16534 ;;                  1    wreg      void 
 16535 ;; Registers used:
 16536 ;;		wreg
 16537 ;; Tracked objects:
 16538 ;;		On entry : 0/0
 16539 ;;		On exit  : 0/0
 16540 ;;		Unchanged: 0/0
 16541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16542 ;;      Params:         0       0       0       0       0       0       0
 16543 ;;      Locals:         0       0       0       0       0       0       0
 16544 ;;      Temps:          0       0       0       0       0       0       0
 16545 ;;      Totals:         0       0       0       0       0       0       0
 16546 ;;Total ram usage:        0 bytes
 16547 ;; Hardware stack levels used: 1
 16548 ;; Hardware stack levels required when called: 4
 16549 ;; This function calls:
 16550 ;;		Nothing
 16551 ;; This function is called by:
 16552 ;;		_fputc
 16553 ;; This function uses a non-reentrant model
 16554 ;;
 16555                           
 16556                           	psect	text69
 16557  0058F2                     __ptext69:
 16558                           	callstack 0
 16559  0058F2                     _putch:
 16560                           	callstack 17
 16561                           
 16562                           ;incstack = 0
 16563  0058F2  0012               	return		;funcret
 16564  0058F4                     __end_of_putch:
 16565                           	callstack 0
 16566                           
 16567 ;; *************** function _abs *****************
 16568 ;; Defined at:
 16569 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\abs.c"
 16570 ;; Parameters:    Size  Location     Type
 16571 ;;  a               2   35[COMRAM] int 
 16572 ;; Auto vars:     Size  Location     Type
 16573 ;;		None
 16574 ;; Return value:  Size  Location     Type
 16575 ;;                  2   35[COMRAM] int 
 16576 ;; Registers used:
 16577 ;;		wreg, status,2, status,0
 16578 ;; Tracked objects:
 16579 ;;		On entry : 3F/0
 16580 ;;		On exit  : 3F/0
 16581 ;;		Unchanged: 3F/0
 16582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16583 ;;      Params:         2       0       0       0       0       0       0
 16584 ;;      Locals:         0       0       0       0       0       0       0
 16585 ;;      Temps:          2       0       0       0       0       0       0
 16586 ;;      Totals:         4       0       0       0       0       0       0
 16587 ;;Total ram usage:        4 bytes
 16588 ;; Hardware stack levels used: 1
 16589 ;; Hardware stack levels required when called: 4
 16590 ;; This function calls:
 16591 ;;		Nothing
 16592 ;; This function is called by:
 16593 ;;		_dtoa
 16594 ;; This function uses a non-reentrant model
 16595 ;;
 16596                           
 16597                           	psect	text70
 16598  0056C0                     __ptext70:
 16599                           	callstack 0
 16600  0056C0                     _abs:
 16601                           	callstack 17
 16602                           
 16603                           ; BSR set to: 0
 16604                           
 16605                           ;incstack = 0
 16606  0056C0  BE25               	btfsc	(abs@a+1)^0,7,c
 16607  0056C2  D005               	goto	u5880
 16608  0056C4  5025               	movf	(abs@a+1)^0,w,c
 16609  0056C6  E110               	bnz	l1628
 16610  0056C8  0424               	decf	abs@a^0,w,c
 16611  0056CA  B0D8               	btfsc	status,0,c
 16612  0056CC  D00D               	goto	l1628
 16613  0056CE                     u5880:
 16614                           
 16615                           ; BSR set to: 0
 16616  0056CE  C024  F026         	movff	abs@a,??_abs
 16617  0056D2  C025  F027         	movff	abs@a+1,??_abs+1
 16618  0056D6  1E26               	comf	??_abs^0,f,c
 16619  0056D8  1E27               	comf	(??_abs+1)^0,f,c
 16620  0056DA  4A26               	infsnz	??_abs^0,f,c
 16621  0056DC  2A27               	incf	(??_abs+1)^0,f,c
 16622  0056DE  C026  F024         	movff	??_abs,?_abs
 16623  0056E2  C027  F025         	movff	??_abs+1,?_abs+1
 16624  0056E6  0012               	return	
 16625  0056E8                     l1628:
 16626                           
 16627                           ; BSR set to: 0
 16628  0056E8  C024  F024         	movff	abs@a,?_abs
 16629  0056EC  C025  F025         	movff	abs@a+1,?_abs+1
 16630                           
 16631                           ; BSR set to: 0
 16632  0056F0  0012               	return		;funcret
 16633  0056F2                     __end_of_abs:
 16634                           	callstack 0
 16635                           
 16636 ;; *************** function ___aomod *****************
 16637 ;; Defined at:
 16638 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\aomod.c"
 16639 ;; Parameters:    Size  Location     Type
 16640 ;;  dividend        8   17[COMRAM] long long 
 16641 ;;  divisor         8   25[COMRAM] long long 
 16642 ;; Auto vars:     Size  Location     Type
 16643 ;;  sign            1   34[COMRAM] unsigned char 
 16644 ;;  counter         1   33[COMRAM] unsigned char 
 16645 ;; Return value:  Size  Location     Type
 16646 ;;                  8   17[COMRAM] long long 
 16647 ;; Registers used:
 16648 ;;		wreg, status,2, status,0
 16649 ;; Tracked objects:
 16650 ;;		On entry : 3F/0
 16651 ;;		On exit  : 3F/0
 16652 ;;		Unchanged: 3F/0
 16653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16654 ;;      Params:        16       0       0       0       0       0       0
 16655 ;;      Locals:         2       0       0       0       0       0       0
 16656 ;;      Temps:          0       0       0       0       0       0       0
 16657 ;;      Totals:        18       0       0       0       0       0       0
 16658 ;;Total ram usage:       18 bytes
 16659 ;; Hardware stack levels used: 1
 16660 ;; Hardware stack levels required when called: 4
 16661 ;; This function calls:
 16662 ;;		Nothing
 16663 ;; This function is called by:
 16664 ;;		_dtoa
 16665 ;; This function uses a non-reentrant model
 16666 ;;
 16667                           
 16668                           	psect	text71
 16669  003B3A                     __ptext71:
 16670                           	callstack 0
 16671  003B3A                     ___aomod:
 16672                           	callstack 17
 16673                           
 16674                           ; BSR set to: 0
 16675                           
 16676                           ; BSR set to: 0
 16677                           ;incstack = 0
 16678  003B3A  0E00               	movlw	0
 16679  003B3C  6E23               	movwf	___aomod@sign^0,c
 16680                           
 16681                           ; BSR set to: 0
 16682  003B3E  AE19               	btfss	(___aomod@dividend+7)^0,7,c
 16683  003B40  D012               	goto	l8214
 16684                           
 16685                           ; BSR set to: 0
 16686  003B42  1E19               	comf	(___aomod@dividend+7)^0,f,c
 16687  003B44  1E18               	comf	(___aomod@dividend+6)^0,f,c
 16688  003B46  1E17               	comf	(___aomod@dividend+5)^0,f,c
 16689  003B48  1E16               	comf	(___aomod@dividend+4)^0,f,c
 16690  003B4A  1E15               	comf	(___aomod@dividend+3)^0,f,c
 16691  003B4C  1E14               	comf	(___aomod@dividend+2)^0,f,c
 16692  003B4E  1E13               	comf	(___aomod@dividend+1)^0,f,c
 16693  003B50  6C12               	negf	___aomod@dividend^0,c
 16694  003B52  0E00               	movlw	0
 16695  003B54  2213               	addwfc	(___aomod@dividend+1)^0,f,c
 16696  003B56  2214               	addwfc	(___aomod@dividend+2)^0,f,c
 16697  003B58  2215               	addwfc	(___aomod@dividend+3)^0,f,c
 16698  003B5A  2216               	addwfc	(___aomod@dividend+4)^0,f,c
 16699  003B5C  2217               	addwfc	(___aomod@dividend+5)^0,f,c
 16700  003B5E  2218               	addwfc	(___aomod@dividend+6)^0,f,c
 16701  003B60  2219               	addwfc	(___aomod@dividend+7)^0,f,c
 16702                           
 16703                           ; BSR set to: 0
 16704  003B62  0E01               	movlw	1
 16705  003B64  6E23               	movwf	___aomod@sign^0,c
 16706  003B66                     l8214:
 16707                           
 16708                           ; BSR set to: 0
 16709  003B66  AE21               	btfss	(___aomod@divisor+7)^0,7,c
 16710  003B68  D010               	goto	l8218
 16711                           
 16712                           ; BSR set to: 0
 16713  003B6A  1E21               	comf	(___aomod@divisor+7)^0,f,c
 16714  003B6C  1E20               	comf	(___aomod@divisor+6)^0,f,c
 16715  003B6E  1E1F               	comf	(___aomod@divisor+5)^0,f,c
 16716  003B70  1E1E               	comf	(___aomod@divisor+4)^0,f,c
 16717  003B72  1E1D               	comf	(___aomod@divisor+3)^0,f,c
 16718  003B74  1E1C               	comf	(___aomod@divisor+2)^0,f,c
 16719  003B76  1E1B               	comf	(___aomod@divisor+1)^0,f,c
 16720  003B78  6C1A               	negf	___aomod@divisor^0,c
 16721  003B7A  0E00               	movlw	0
 16722  003B7C  221B               	addwfc	(___aomod@divisor+1)^0,f,c
 16723  003B7E  221C               	addwfc	(___aomod@divisor+2)^0,f,c
 16724  003B80  221D               	addwfc	(___aomod@divisor+3)^0,f,c
 16725  003B82  221E               	addwfc	(___aomod@divisor+4)^0,f,c
 16726  003B84  221F               	addwfc	(___aomod@divisor+5)^0,f,c
 16727  003B86  2220               	addwfc	(___aomod@divisor+6)^0,f,c
 16728  003B88  2221               	addwfc	(___aomod@divisor+7)^0,f,c
 16729  003B8A                     l8218:
 16730                           
 16731                           ; BSR set to: 0
 16732  003B8A  501A               	movf	___aomod@divisor^0,w,c
 16733  003B8C  101B               	iorwf	(___aomod@divisor+1)^0,w,c
 16734  003B8E  101C               	iorwf	(___aomod@divisor+2)^0,w,c
 16735  003B90  101D               	iorwf	(___aomod@divisor+3)^0,w,c
 16736  003B92  101E               	iorwf	(___aomod@divisor+4)^0,w,c
 16737  003B94  101F               	iorwf	(___aomod@divisor+5)^0,w,c
 16738  003B96  1020               	iorwf	(___aomod@divisor+6)^0,w,c
 16739  003B98  1021               	iorwf	(___aomod@divisor+7)^0,w,c
 16740  003B9A  B4D8               	btfsc	status,2,c
 16741  003B9C  D03C               	goto	l8234
 16742                           
 16743                           ; BSR set to: 0
 16744  003B9E  0E01               	movlw	1
 16745  003BA0  6E22               	movwf	___aomod@counter^0,c
 16746  003BA2  D00A               	goto	l8224
 16747  003BA4                     l8222:
 16748                           
 16749                           ; BSR set to: 0
 16750  003BA4  90D8               	bcf	status,0,c
 16751  003BA6  361A               	rlcf	___aomod@divisor^0,f,c
 16752  003BA8  361B               	rlcf	(___aomod@divisor+1)^0,f,c
 16753  003BAA  361C               	rlcf	(___aomod@divisor+2)^0,f,c
 16754  003BAC  361D               	rlcf	(___aomod@divisor+3)^0,f,c
 16755  003BAE  361E               	rlcf	(___aomod@divisor+4)^0,f,c
 16756  003BB0  361F               	rlcf	(___aomod@divisor+5)^0,f,c
 16757  003BB2  3620               	rlcf	(___aomod@divisor+6)^0,f,c
 16758  003BB4  3621               	rlcf	(___aomod@divisor+7)^0,f,c
 16759  003BB6  2A22               	incf	___aomod@counter^0,f,c
 16760  003BB8                     l8224:
 16761                           
 16762                           ; BSR set to: 0
 16763  003BB8  AE21               	btfss	(___aomod@divisor+7)^0,7,c
 16764  003BBA  D7F4               	goto	l8222
 16765  003BBC                     u5810:
 16766                           
 16767                           ; BSR set to: 0
 16768  003BBC  501A               	movf	___aomod@divisor^0,w,c
 16769  003BBE  5C12               	subwf	___aomod@dividend^0,w,c
 16770  003BC0  501B               	movf	(___aomod@divisor+1)^0,w,c
 16771  003BC2  5813               	subwfb	(___aomod@dividend+1)^0,w,c
 16772  003BC4  501C               	movf	(___aomod@divisor+2)^0,w,c
 16773  003BC6  5814               	subwfb	(___aomod@dividend+2)^0,w,c
 16774  003BC8  501D               	movf	(___aomod@divisor+3)^0,w,c
 16775  003BCA  5815               	subwfb	(___aomod@dividend+3)^0,w,c
 16776  003BCC  501E               	movf	(___aomod@divisor+4)^0,w,c
 16777  003BCE  5816               	subwfb	(___aomod@dividend+4)^0,w,c
 16778  003BD0  501F               	movf	(___aomod@divisor+5)^0,w,c
 16779  003BD2  5817               	subwfb	(___aomod@dividend+5)^0,w,c
 16780  003BD4  5020               	movf	(___aomod@divisor+6)^0,w,c
 16781  003BD6  5818               	subwfb	(___aomod@dividend+6)^0,w,c
 16782  003BD8  5021               	movf	(___aomod@divisor+7)^0,w,c
 16783  003BDA  5819               	subwfb	(___aomod@dividend+7)^0,w,c
 16784  003BDC  A0D8               	btfss	status,0,c
 16785  003BDE  D010               	goto	l8230
 16786                           
 16787                           ; BSR set to: 0
 16788  003BE0  501A               	movf	___aomod@divisor^0,w,c
 16789  003BE2  5E12               	subwf	___aomod@dividend^0,f,c
 16790  003BE4  501B               	movf	(___aomod@divisor+1)^0,w,c
 16791  003BE6  5A13               	subwfb	(___aomod@dividend+1)^0,f,c
 16792  003BE8  501C               	movf	(___aomod@divisor+2)^0,w,c
 16793  003BEA  5A14               	subwfb	(___aomod@dividend+2)^0,f,c
 16794  003BEC  501D               	movf	(___aomod@divisor+3)^0,w,c
 16795  003BEE  5A15               	subwfb	(___aomod@dividend+3)^0,f,c
 16796  003BF0  501E               	movf	(___aomod@divisor+4)^0,w,c
 16797  003BF2  5A16               	subwfb	(___aomod@dividend+4)^0,f,c
 16798  003BF4  501F               	movf	(___aomod@divisor+5)^0,w,c
 16799  003BF6  5A17               	subwfb	(___aomod@dividend+5)^0,f,c
 16800  003BF8  5020               	movf	(___aomod@divisor+6)^0,w,c
 16801  003BFA  5A18               	subwfb	(___aomod@dividend+6)^0,f,c
 16802  003BFC  5021               	movf	(___aomod@divisor+7)^0,w,c
 16803  003BFE  5A19               	subwfb	(___aomod@dividend+7)^0,f,c
 16804  003C00                     l8230:
 16805                           
 16806                           ; BSR set to: 0
 16807  003C00  90D8               	bcf	status,0,c
 16808  003C02  3221               	rrcf	(___aomod@divisor+7)^0,f,c
 16809  003C04  3220               	rrcf	(___aomod@divisor+6)^0,f,c
 16810  003C06  321F               	rrcf	(___aomod@divisor+5)^0,f,c
 16811  003C08  321E               	rrcf	(___aomod@divisor+4)^0,f,c
 16812  003C0A  321D               	rrcf	(___aomod@divisor+3)^0,f,c
 16813  003C0C  321C               	rrcf	(___aomod@divisor+2)^0,f,c
 16814  003C0E  321B               	rrcf	(___aomod@divisor+1)^0,f,c
 16815  003C10  321A               	rrcf	___aomod@divisor^0,f,c
 16816                           
 16817                           ; BSR set to: 0
 16818  003C12  2E22               	decfsz	___aomod@counter^0,f,c
 16819  003C14  D7D3               	goto	u5810
 16820  003C16                     l8234:
 16821                           
 16822                           ; BSR set to: 0
 16823  003C16  5023               	movf	___aomod@sign^0,w,c
 16824  003C18  B4D8               	btfsc	status,2,c
 16825  003C1A  D010               	goto	l8238
 16826                           
 16827                           ; BSR set to: 0
 16828  003C1C  1E19               	comf	(___aomod@dividend+7)^0,f,c
 16829  003C1E  1E18               	comf	(___aomod@dividend+6)^0,f,c
 16830  003C20  1E17               	comf	(___aomod@dividend+5)^0,f,c
 16831  003C22  1E16               	comf	(___aomod@dividend+4)^0,f,c
 16832  003C24  1E15               	comf	(___aomod@dividend+3)^0,f,c
 16833  003C26  1E14               	comf	(___aomod@dividend+2)^0,f,c
 16834  003C28  1E13               	comf	(___aomod@dividend+1)^0,f,c
 16835  003C2A  6C12               	negf	___aomod@dividend^0,c
 16836  003C2C  0E00               	movlw	0
 16837  003C2E  2213               	addwfc	(___aomod@dividend+1)^0,f,c
 16838  003C30  2214               	addwfc	(___aomod@dividend+2)^0,f,c
 16839  003C32  2215               	addwfc	(___aomod@dividend+3)^0,f,c
 16840  003C34  2216               	addwfc	(___aomod@dividend+4)^0,f,c
 16841  003C36  2217               	addwfc	(___aomod@dividend+5)^0,f,c
 16842  003C38  2218               	addwfc	(___aomod@dividend+6)^0,f,c
 16843  003C3A  2219               	addwfc	(___aomod@dividend+7)^0,f,c
 16844  003C3C                     l8238:
 16845                           
 16846                           ; BSR set to: 0
 16847  003C3C  C012  F012         	movff	___aomod@dividend,?___aomod
 16848  003C40  C013  F013         	movff	___aomod@dividend+1,?___aomod+1
 16849  003C44  C014  F014         	movff	___aomod@dividend+2,?___aomod+2
 16850  003C48  C015  F015         	movff	___aomod@dividend+3,?___aomod+3
 16851  003C4C  C016  F016         	movff	___aomod@dividend+4,?___aomod+4
 16852  003C50  C017  F017         	movff	___aomod@dividend+5,?___aomod+5
 16853  003C54  C018  F018         	movff	___aomod@dividend+6,?___aomod+6
 16854  003C58  C019  F019         	movff	___aomod@dividend+7,?___aomod+7
 16855                           
 16856                           ; BSR set to: 0
 16857  003C5C  0012               	return		;funcret
 16858  003C5E                     __end_of___aomod:
 16859                           	callstack 0
 16860                           
 16861 ;; *************** function ___aodiv *****************
 16862 ;; Defined at:
 16863 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\aodiv.c"
 16864 ;; Parameters:    Size  Location     Type
 16865 ;;  dividend        8   17[COMRAM] long long 
 16866 ;;  divisor         8   25[COMRAM] long long 
 16867 ;; Auto vars:     Size  Location     Type
 16868 ;;  quotient        8   35[COMRAM] long long 
 16869 ;;  sign            1   34[COMRAM] unsigned char 
 16870 ;;  counter         1   33[COMRAM] unsigned char 
 16871 ;; Return value:  Size  Location     Type
 16872 ;;                  8   17[COMRAM] long long 
 16873 ;; Registers used:
 16874 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16875 ;; Tracked objects:
 16876 ;;		On entry : 3F/0
 16877 ;;		On exit  : 3F/0
 16878 ;;		Unchanged: 3F/0
 16879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16880 ;;      Params:        16       0       0       0       0       0       0
 16881 ;;      Locals:        10       0       0       0       0       0       0
 16882 ;;      Temps:          0       0       0       0       0       0       0
 16883 ;;      Totals:        26       0       0       0       0       0       0
 16884 ;;Total ram usage:       26 bytes
 16885 ;; Hardware stack levels used: 1
 16886 ;; Hardware stack levels required when called: 4
 16887 ;; This function calls:
 16888 ;;		Nothing
 16889 ;; This function is called by:
 16890 ;;		_dtoa
 16891 ;; This function uses a non-reentrant model
 16892 ;;
 16893                           
 16894                           	psect	text72
 16895  003642                     __ptext72:
 16896                           	callstack 0
 16897  003642                     ___aodiv:
 16898                           	callstack 17
 16899                           
 16900                           ; BSR set to: 0
 16901                           
 16902                           ; BSR set to: 0
 16903                           ;incstack = 0
 16904  003642  0E00               	movlw	0
 16905  003644  6E23               	movwf	___aodiv@sign^0,c
 16906                           
 16907                           ; BSR set to: 0
 16908  003646  AE21               	btfss	(___aodiv@divisor+7)^0,7,c
 16909  003648  D012               	goto	l8170
 16910                           
 16911                           ; BSR set to: 0
 16912  00364A  1E21               	comf	(___aodiv@divisor+7)^0,f,c
 16913  00364C  1E20               	comf	(___aodiv@divisor+6)^0,f,c
 16914  00364E  1E1F               	comf	(___aodiv@divisor+5)^0,f,c
 16915  003650  1E1E               	comf	(___aodiv@divisor+4)^0,f,c
 16916  003652  1E1D               	comf	(___aodiv@divisor+3)^0,f,c
 16917  003654  1E1C               	comf	(___aodiv@divisor+2)^0,f,c
 16918  003656  1E1B               	comf	(___aodiv@divisor+1)^0,f,c
 16919  003658  6C1A               	negf	___aodiv@divisor^0,c
 16920  00365A  0E00               	movlw	0
 16921  00365C  221B               	addwfc	(___aodiv@divisor+1)^0,f,c
 16922  00365E  221C               	addwfc	(___aodiv@divisor+2)^0,f,c
 16923  003660  221D               	addwfc	(___aodiv@divisor+3)^0,f,c
 16924  003662  221E               	addwfc	(___aodiv@divisor+4)^0,f,c
 16925  003664  221F               	addwfc	(___aodiv@divisor+5)^0,f,c
 16926  003666  2220               	addwfc	(___aodiv@divisor+6)^0,f,c
 16927  003668  2221               	addwfc	(___aodiv@divisor+7)^0,f,c
 16928                           
 16929                           ; BSR set to: 0
 16930  00366A  0E01               	movlw	1
 16931  00366C  6E23               	movwf	___aodiv@sign^0,c
 16932  00366E                     l8170:
 16933                           
 16934                           ; BSR set to: 0
 16935  00366E  AE19               	btfss	(___aodiv@dividend+7)^0,7,c
 16936  003670  D012               	goto	l8176
 16937                           
 16938                           ; BSR set to: 0
 16939  003672  1E19               	comf	(___aodiv@dividend+7)^0,f,c
 16940  003674  1E18               	comf	(___aodiv@dividend+6)^0,f,c
 16941  003676  1E17               	comf	(___aodiv@dividend+5)^0,f,c
 16942  003678  1E16               	comf	(___aodiv@dividend+4)^0,f,c
 16943  00367A  1E15               	comf	(___aodiv@dividend+3)^0,f,c
 16944  00367C  1E14               	comf	(___aodiv@dividend+2)^0,f,c
 16945  00367E  1E13               	comf	(___aodiv@dividend+1)^0,f,c
 16946  003680  6C12               	negf	___aodiv@dividend^0,c
 16947  003682  0E00               	movlw	0
 16948  003684  2213               	addwfc	(___aodiv@dividend+1)^0,f,c
 16949  003686  2214               	addwfc	(___aodiv@dividend+2)^0,f,c
 16950  003688  2215               	addwfc	(___aodiv@dividend+3)^0,f,c
 16951  00368A  2216               	addwfc	(___aodiv@dividend+4)^0,f,c
 16952  00368C  2217               	addwfc	(___aodiv@dividend+5)^0,f,c
 16953  00368E  2218               	addwfc	(___aodiv@dividend+6)^0,f,c
 16954  003690  2219               	addwfc	(___aodiv@dividend+7)^0,f,c
 16955                           
 16956                           ; BSR set to: 0
 16957  003692  0E01               	movlw	1
 16958  003694  1A23               	xorwf	___aodiv@sign^0,f,c
 16959  003696                     l8176:
 16960                           
 16961                           ; BSR set to: 0
 16962  003696  EE20  F024         	lfsr	2,___aodiv@quotient
 16963  00369A  0E07               	movlw	7
 16964  00369C                     u5731:
 16965  00369C  6ADE               	clrf	postinc2,c
 16966  00369E  06E8               	decf	wreg,f,c
 16967  0036A0  E2FD               	bc	u5731
 16968                           
 16969                           ; BSR set to: 0
 16970  0036A2  501A               	movf	___aodiv@divisor^0,w,c
 16971  0036A4  101B               	iorwf	(___aodiv@divisor+1)^0,w,c
 16972  0036A6  101C               	iorwf	(___aodiv@divisor+2)^0,w,c
 16973  0036A8  101D               	iorwf	(___aodiv@divisor+3)^0,w,c
 16974  0036AA  101E               	iorwf	(___aodiv@divisor+4)^0,w,c
 16975  0036AC  101F               	iorwf	(___aodiv@divisor+5)^0,w,c
 16976  0036AE  1020               	iorwf	(___aodiv@divisor+6)^0,w,c
 16977  0036B0  1021               	iorwf	(___aodiv@divisor+7)^0,w,c
 16978  0036B2  B4D8               	btfsc	status,2,c
 16979  0036B4  D046               	goto	l8198
 16980                           
 16981                           ; BSR set to: 0
 16982  0036B6  0E01               	movlw	1
 16983  0036B8  6E22               	movwf	___aodiv@counter^0,c
 16984  0036BA  D00A               	goto	l8184
 16985  0036BC                     l8182:
 16986                           
 16987                           ; BSR set to: 0
 16988  0036BC  90D8               	bcf	status,0,c
 16989  0036BE  361A               	rlcf	___aodiv@divisor^0,f,c
 16990  0036C0  361B               	rlcf	(___aodiv@divisor+1)^0,f,c
 16991  0036C2  361C               	rlcf	(___aodiv@divisor+2)^0,f,c
 16992  0036C4  361D               	rlcf	(___aodiv@divisor+3)^0,f,c
 16993  0036C6  361E               	rlcf	(___aodiv@divisor+4)^0,f,c
 16994  0036C8  361F               	rlcf	(___aodiv@divisor+5)^0,f,c
 16995  0036CA  3620               	rlcf	(___aodiv@divisor+6)^0,f,c
 16996  0036CC  3621               	rlcf	(___aodiv@divisor+7)^0,f,c
 16997  0036CE  2A22               	incf	___aodiv@counter^0,f,c
 16998  0036D0                     l8184:
 16999                           
 17000                           ; BSR set to: 0
 17001  0036D0  AE21               	btfss	(___aodiv@divisor+7)^0,7,c
 17002  0036D2  D7F4               	goto	l8182
 17003  0036D4                     u5750:
 17004                           
 17005                           ; BSR set to: 0
 17006  0036D4  90D8               	bcf	status,0,c
 17007  0036D6  3624               	rlcf	___aodiv@quotient^0,f,c
 17008  0036D8  3625               	rlcf	(___aodiv@quotient+1)^0,f,c
 17009  0036DA  3626               	rlcf	(___aodiv@quotient+2)^0,f,c
 17010  0036DC  3627               	rlcf	(___aodiv@quotient+3)^0,f,c
 17011  0036DE  3628               	rlcf	(___aodiv@quotient+4)^0,f,c
 17012  0036E0  3629               	rlcf	(___aodiv@quotient+5)^0,f,c
 17013  0036E2  362A               	rlcf	(___aodiv@quotient+6)^0,f,c
 17014  0036E4  362B               	rlcf	(___aodiv@quotient+7)^0,f,c
 17015                           
 17016                           ; BSR set to: 0
 17017  0036E6  501A               	movf	___aodiv@divisor^0,w,c
 17018  0036E8  5C12               	subwf	___aodiv@dividend^0,w,c
 17019  0036EA  501B               	movf	(___aodiv@divisor+1)^0,w,c
 17020  0036EC  5813               	subwfb	(___aodiv@dividend+1)^0,w,c
 17021  0036EE  501C               	movf	(___aodiv@divisor+2)^0,w,c
 17022  0036F0  5814               	subwfb	(___aodiv@dividend+2)^0,w,c
 17023  0036F2  501D               	movf	(___aodiv@divisor+3)^0,w,c
 17024  0036F4  5815               	subwfb	(___aodiv@dividend+3)^0,w,c
 17025  0036F6  501E               	movf	(___aodiv@divisor+4)^0,w,c
 17026  0036F8  5816               	subwfb	(___aodiv@dividend+4)^0,w,c
 17027  0036FA  501F               	movf	(___aodiv@divisor+5)^0,w,c
 17028  0036FC  5817               	subwfb	(___aodiv@dividend+5)^0,w,c
 17029  0036FE  5020               	movf	(___aodiv@divisor+6)^0,w,c
 17030  003700  5818               	subwfb	(___aodiv@dividend+6)^0,w,c
 17031  003702  5021               	movf	(___aodiv@divisor+7)^0,w,c
 17032  003704  5819               	subwfb	(___aodiv@dividend+7)^0,w,c
 17033  003706  A0D8               	btfss	status,0,c
 17034  003708  D011               	goto	l8194
 17035                           
 17036                           ; BSR set to: 0
 17037  00370A  501A               	movf	___aodiv@divisor^0,w,c
 17038  00370C  5E12               	subwf	___aodiv@dividend^0,f,c
 17039  00370E  501B               	movf	(___aodiv@divisor+1)^0,w,c
 17040  003710  5A13               	subwfb	(___aodiv@dividend+1)^0,f,c
 17041  003712  501C               	movf	(___aodiv@divisor+2)^0,w,c
 17042  003714  5A14               	subwfb	(___aodiv@dividend+2)^0,f,c
 17043  003716  501D               	movf	(___aodiv@divisor+3)^0,w,c
 17044  003718  5A15               	subwfb	(___aodiv@dividend+3)^0,f,c
 17045  00371A  501E               	movf	(___aodiv@divisor+4)^0,w,c
 17046  00371C  5A16               	subwfb	(___aodiv@dividend+4)^0,f,c
 17047  00371E  501F               	movf	(___aodiv@divisor+5)^0,w,c
 17048  003720  5A17               	subwfb	(___aodiv@dividend+5)^0,f,c
 17049  003722  5020               	movf	(___aodiv@divisor+6)^0,w,c
 17050  003724  5A18               	subwfb	(___aodiv@dividend+6)^0,f,c
 17051  003726  5021               	movf	(___aodiv@divisor+7)^0,w,c
 17052  003728  5A19               	subwfb	(___aodiv@dividend+7)^0,f,c
 17053                           
 17054                           ; BSR set to: 0
 17055  00372A  8024               	bsf	___aodiv@quotient^0,0,c
 17056  00372C                     l8194:
 17057                           
 17058                           ; BSR set to: 0
 17059  00372C  90D8               	bcf	status,0,c
 17060  00372E  3221               	rrcf	(___aodiv@divisor+7)^0,f,c
 17061  003730  3220               	rrcf	(___aodiv@divisor+6)^0,f,c
 17062  003732  321F               	rrcf	(___aodiv@divisor+5)^0,f,c
 17063  003734  321E               	rrcf	(___aodiv@divisor+4)^0,f,c
 17064  003736  321D               	rrcf	(___aodiv@divisor+3)^0,f,c
 17065  003738  321C               	rrcf	(___aodiv@divisor+2)^0,f,c
 17066  00373A  321B               	rrcf	(___aodiv@divisor+1)^0,f,c
 17067  00373C  321A               	rrcf	___aodiv@divisor^0,f,c
 17068                           
 17069                           ; BSR set to: 0
 17070  00373E  2E22               	decfsz	___aodiv@counter^0,f,c
 17071  003740  D7C9               	goto	u5750
 17072  003742                     l8198:
 17073                           
 17074                           ; BSR set to: 0
 17075  003742  5023               	movf	___aodiv@sign^0,w,c
 17076  003744  B4D8               	btfsc	status,2,c
 17077  003746  D010               	goto	l8202
 17078                           
 17079                           ; BSR set to: 0
 17080  003748  1E2B               	comf	(___aodiv@quotient+7)^0,f,c
 17081  00374A  1E2A               	comf	(___aodiv@quotient+6)^0,f,c
 17082  00374C  1E29               	comf	(___aodiv@quotient+5)^0,f,c
 17083  00374E  1E28               	comf	(___aodiv@quotient+4)^0,f,c
 17084  003750  1E27               	comf	(___aodiv@quotient+3)^0,f,c
 17085  003752  1E26               	comf	(___aodiv@quotient+2)^0,f,c
 17086  003754  1E25               	comf	(___aodiv@quotient+1)^0,f,c
 17087  003756  6C24               	negf	___aodiv@quotient^0,c
 17088  003758  0E00               	movlw	0
 17089  00375A  2225               	addwfc	(___aodiv@quotient+1)^0,f,c
 17090  00375C  2226               	addwfc	(___aodiv@quotient+2)^0,f,c
 17091  00375E  2227               	addwfc	(___aodiv@quotient+3)^0,f,c
 17092  003760  2228               	addwfc	(___aodiv@quotient+4)^0,f,c
 17093  003762  2229               	addwfc	(___aodiv@quotient+5)^0,f,c
 17094  003764  222A               	addwfc	(___aodiv@quotient+6)^0,f,c
 17095  003766  222B               	addwfc	(___aodiv@quotient+7)^0,f,c
 17096  003768                     l8202:
 17097                           
 17098                           ; BSR set to: 0
 17099  003768  C024  F012         	movff	___aodiv@quotient,?___aodiv
 17100  00376C  C025  F013         	movff	___aodiv@quotient+1,?___aodiv+1
 17101  003770  C026  F014         	movff	___aodiv@quotient+2,?___aodiv+2
 17102  003774  C027  F015         	movff	___aodiv@quotient+3,?___aodiv+3
 17103  003778  C028  F016         	movff	___aodiv@quotient+4,?___aodiv+4
 17104  00377C  C029  F017         	movff	___aodiv@quotient+5,?___aodiv+5
 17105  003780  C02A  F018         	movff	___aodiv@quotient+6,?___aodiv+6
 17106  003784  C02B  F019         	movff	___aodiv@quotient+7,?___aodiv+7
 17107                           
 17108                           ; BSR set to: 0
 17109  003788  0012               	return		;funcret
 17110  00378A                     __end_of___aodiv:
 17111                           	callstack 0
 17112                           
 17113 ;; *************** function _LCD_DrawText *****************
 17114 ;; Defined at:
 17115 ;;		line 713 in file "libraries/lcd_highlevel.c"
 17116 ;; Parameters:    Size  Location     Type
 17117 ;;  msg             2   31[COMRAM] PTR const unsigned char 
 17118 ;;		 -> g1.str(2), touchScreenController@s(20), STR_14(13), STR_13(13), 
 17119 ;;		 -> STR_12(6), STR_11(11), STR_10(11), STR_9(8), 
 17120 ;;		 -> STR_8(9), STR_7(2), STR_6(9), STR_5(9), 
 17121 ;;		 -> STR_4(11), g1(216), STR_1(10), 
 17122 ;;  font            2   33[COMRAM] PTR const struct .
 17123 ;;		 -> arialNarrow_12ptFontInfo(7), 
 17124 ;;  align           1   35[COMRAM] enum E355
 17125 ;;  posX            2   36[COMRAM] unsigned short 
 17126 ;;  posY            2   38[COMRAM] unsigned short 
 17127 ;;  color           2   40[COMRAM] unsigned short 
 17128 ;;  bg_color        2   42[COMRAM] unsigned short 
 17129 ;; Auto vars:     Size  Location     Type
 17130 ;;  posXEnd         2   58[COMRAM] unsigned short 
 17131 ;;  posYEnd         2   56[COMRAM] unsigned short 
 17132 ;;  yOffset         2   52[COMRAM] unsigned short 
 17133 ;;  offset          2   50[COMRAM] unsigned short 
 17134 ;;  width           1   64[COMRAM] unsigned char 
 17135 ;;  x               1   63[COMRAM] unsigned char 
 17136 ;;  tempChar        1   62[COMRAM] char 
 17137 ;;  i               1   61[COMRAM] unsigned char 
 17138 ;;  y               1   60[COMRAM] unsigned char 
 17139 ;;  fontPixel       1   55[COMRAM] unsigned char 
 17140 ;;  fontByte        1   54[COMRAM] unsigned char 
 17141 ;; Return value:  Size  Location     Type
 17142 ;;                  1    wreg      void 
 17143 ;; Registers used:
 17144 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17145 ;; Tracked objects:
 17146 ;;		On entry : 0/0
 17147 ;;		On exit  : 0/0
 17148 ;;		Unchanged: 0/0
 17149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17150 ;;      Params:        13       0       0       0       0       0       0
 17151 ;;      Locals:        15       0       0       0       0       0       0
 17152 ;;      Temps:          6       0       0       0       0       0       0
 17153 ;;      Totals:        34       0       0       0       0       0       0
 17154 ;;Total ram usage:       34 bytes
 17155 ;; Hardware stack levels used: 1
 17156 ;; Hardware stack levels required when called: 5
 17157 ;; This function calls:
 17158 ;;		___awdiv
 17159 ;;		___wmul
 17160 ;;		_strlen
 17161 ;; This function is called by:
 17162 ;;		_Factory_init
 17163 ;;		_Score_draw
 17164 ;;		_Menu_welcomeDraw
 17165 ;;		_Menu_parametersDraw
 17166 ;;		_Menu_endGame
 17167 ;;		_LCD_ButtonDraw
 17168 ;;		_touchScreenController
 17169 ;; This function uses a non-reentrant model
 17170 ;;
 17171                           
 17172                           	psect	text73
 17173  001706                     __ptext73:
 17174                           	callstack 0
 17175  001706                     _LCD_DrawText:
 17176                           	callstack 20
 17177                           
 17178                           ;libraries/lcd_highlevel.c: 713: void LCD_DrawText(const uint8_t * msg,const FONT_INFO *
      +                           font, ALIGN align,;libraries/lcd_highlevel.c: 714:         uint16_t posX, uint16_t posY
      +                          , uint16_t color, uint16_t bg_color);libraries/lcd_highlevel.c: 715: {;libraries/lcd_hig
      +                          hlevel.c: 716:   uint8_t x,y,i;;libraries/lcd_highlevel.c: 717:   int8_t tempChar;;libra
      +                          ries/lcd_highlevel.c: 718:   uint16_t offset;;libraries/lcd_highlevel.c: 719:   uint8_t 
      +                          width=0;
 17179                           
 17180                           ; BSR set to: 0
 17181                           ;incstack = 0
 17182  001706  0E00               	movlw	0
 17183  001708  6E41               	movwf	LCD_DrawText@width^0,c
 17184                           
 17185                           ;libraries/lcd_highlevel.c: 720:   uint8_t fontByte,fontPixel;;libraries/lcd_highlevel.c
      +                          : 721:   uint16_t posYEnd, posXEnd, yOffset;;libraries/lcd_highlevel.c: 725:   for(i=0;i
      +                          <strlen(msg);i++)
 17186  00170A  0E00               	movlw	0
 17187  00170C  6E3E               	movwf	LCD_DrawText@i^0,c
 17188  00170E  D04F               	goto	l8440
 17189  001710                     l8434:
 17190                           
 17191                           ;libraries/lcd_highlevel.c: 726:   {;libraries/lcd_highlevel.c: 727:     tempChar = (msg
      +                          [i]) - font->start_char;
 17192  001710  0E01               	movlw	1
 17193  001712  2422               	addwf	LCD_DrawText@font^0,w,c
 17194  001714  6E2D               	movwf	??_LCD_DrawText^0,c
 17195  001716  0E00               	movlw	0
 17196  001718  2023               	addwfc	(LCD_DrawText@font+1)^0,w,c
 17197  00171A  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 17198  00171C  C02D  FFF6         	movff	??_LCD_DrawText,tblptrl
 17199  001720  C02E  FFF7         	movff	??_LCD_DrawText+1,tblptrh
 17200  001724                     	if	0	;tblptru may be non-zero
 17201  001724                     	endif
 17202  001724                     	if	0	;tblptru may be non-zero
 17203  001724                     	endif
 17204  001724  0008               	tblrd		*
 17205  001726  CFF5 F02F          	movff	tablat,??_LCD_DrawText+2
 17206  00172A  503E               	movf	LCD_DrawText@i^0,w,c
 17207  00172C  2420               	addwf	LCD_DrawText@msg^0,w,c
 17208  00172E  6E30               	movwf	(??_LCD_DrawText+3)^0,c
 17209  001730  0E00               	movlw	0
 17210  001732  2021               	addwfc	(LCD_DrawText@msg+1)^0,w,c
 17211  001734  6E31               	movwf	(??_LCD_DrawText+4)^0,c
 17212  001736  C030  FFF6         	movff	??_LCD_DrawText+3,tblptrl
 17213  00173A  C031  FFF7         	movff	??_LCD_DrawText+4,tblptrh
 17214  00173E  6AF8               	clrf	tblptru,c
 17215  001740  0E05               	movlw	(high __ramtop+-1)
 17216  001742  64F7               	cpfsgt	tblptrh,c
 17217  001744  D003               	bra	u6167
 17218  001746  0008               	tblrd		*
 17219  001748  50F5               	movf	tablat,w,c
 17220  00174A  D005               	bra	u6160
 17221  00174C                     u6167:
 17222  00174C  CFF6 FFE1          	movff	tblptrl,fsr1l
 17223  001750  CFF7 FFE2          	movff	tblptrh,fsr1h
 17224  001754  50E7               	movf	indf1,w,c
 17225  001756                     u6160:
 17226  001756  6E32               	movwf	(??_LCD_DrawText+5)^0,c
 17227  001758  502F               	movf	(??_LCD_DrawText+2)^0,w,c
 17228  00175A  5C32               	subwf	(??_LCD_DrawText+5)^0,w,c
 17229  00175C  6E3F               	movwf	LCD_DrawText@tempChar^0,c
 17230                           
 17231                           ;libraries/lcd_highlevel.c: 728:     width += font->descriptor[tempChar].width+2;
 17232  00175E  503F               	movf	LCD_DrawText@tempChar^0,w,c
 17233  001760  6E1A               	movwf	___wmul@multiplier^0,c
 17234  001762  6A1B               	clrf	(___wmul@multiplier+1)^0,c
 17235  001764  BE1A               	btfsc	___wmul@multiplier^0,7,c
 17236  001766  061B               	decf	(___wmul@multiplier+1)^0,f,c
 17237  001768  0E00               	movlw	0
 17238  00176A  6E1D               	movwf	(___wmul@multiplicand+1)^0,c
 17239  00176C  0E03               	movlw	3
 17240  00176E  6E1C               	movwf	___wmul@multiplicand^0,c
 17241  001770  ECE2  F02B         	call	___wmul	;wreg free
 17242  001774  0E03               	movlw	3
 17243  001776  2422               	addwf	LCD_DrawText@font^0,w,c
 17244  001778  6E2D               	movwf	??_LCD_DrawText^0,c
 17245  00177A  0E00               	movlw	0
 17246  00177C  2023               	addwfc	(LCD_DrawText@font+1)^0,w,c
 17247  00177E  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 17248  001780  C02D  FFF6         	movff	??_LCD_DrawText,tblptrl
 17249  001784  C02E  FFF7         	movff	??_LCD_DrawText+1,tblptrh
 17250  001788                     	if	0	;tblptru may be non-zero
 17251  001788                     	endif
 17252  001788                     	if	0	;tblptru may be non-zero
 17253  001788                     	endif
 17254  001788  0009               	tblrd		*+
 17255  00178A  CFF5 F02F          	movff	tablat,??_LCD_DrawText+2
 17256  00178E  0009               	tblrd		*+
 17257  001790  CFF5 F030          	movff	tablat,??_LCD_DrawText+3
 17258  001794  501A               	movf	?___wmul^0,w,c
 17259  001796  262F               	addwf	(??_LCD_DrawText+2)^0,f,c
 17260  001798  501B               	movf	(?___wmul+1)^0,w,c
 17261  00179A  2230               	addwfc	(??_LCD_DrawText+3)^0,f,c
 17262  00179C  C02F  FFF6         	movff	??_LCD_DrawText+2,tblptrl
 17263  0017A0  C030  FFF7         	movff	??_LCD_DrawText+3,tblptrh
 17264  0017A4                     	if	0	;tblptru may be non-zero
 17265  0017A4                     	endif
 17266  0017A4                     	if	0	;tblptru may be non-zero
 17267  0017A4                     	endif
 17268  0017A4  0008               	tblrd		*
 17269  0017A6  50F5               	movf	tablat,w,c
 17270  0017A8  0F02               	addlw	2
 17271  0017AA  2641               	addwf	LCD_DrawText@width^0,f,c
 17272                           
 17273                           ;libraries/lcd_highlevel.c: 729:   }
 17274  0017AC  2A3E               	incf	LCD_DrawText@i^0,f,c
 17275  0017AE                     l8440:
 17276  0017AE  C020  F012         	movff	LCD_DrawText@msg,strlen@s
 17277  0017B2  C021  F013         	movff	LCD_DrawText@msg+1,strlen@s+1
 17278  0017B6  EC86  F02A         	call	_strlen	;wreg free
 17279  0017BA  503E               	movf	LCD_DrawText@i^0,w,c
 17280  0017BC  6E2D               	movwf	??_LCD_DrawText^0,c
 17281  0017BE  6A2E               	clrf	(??_LCD_DrawText+1)^0,c
 17282  0017C0  5012               	movf	?_strlen^0,w,c
 17283  0017C2  5C2D               	subwf	??_LCD_DrawText^0,w,c
 17284  0017C4  5013               	movf	(?_strlen+1)^0,w,c
 17285  0017C6  582E               	subwfb	(??_LCD_DrawText+1)^0,w,c
 17286  0017C8  A0D8               	btfss	status,0,c
 17287  0017CA  D7A2               	goto	l8434
 17288                           
 17289                           ;libraries/lcd_highlevel.c: 730:   if(align == A_RIGHT)
 17290  0017CC  0424               	decf	LCD_DrawText@align^0,w,c
 17291  0017CE  A4D8               	btfss	status,2,c
 17292  0017D0  D002               	goto	l8446
 17293                           
 17294                           ;libraries/lcd_highlevel.c: 731:   {;libraries/lcd_highlevel.c: 732:     posX = posX - w
      +                          idth;
 17295  0017D2  5041               	movf	LCD_DrawText@width^0,w,c
 17296  0017D4  D009               	goto	L12
 17297  0017D6                     l8446:
 17298  0017D6  0E02               	movlw	2
 17299  0017D8  1824               	xorwf	LCD_DrawText@align^0,w,c
 17300  0017DA  A4D8               	btfss	status,2,c
 17301  0017DC  D00B               	goto	l8450
 17302                           
 17303                           ;libraries/lcd_highlevel.c: 735:   {;libraries/lcd_highlevel.c: 736:     posX = posX - w
      +                          idth / 2;
 17304  0017DE  C041  F02D         	movff	LCD_DrawText@width,??_LCD_DrawText
 17305  0017E2  90D8               	bcf	status,0,c
 17306  0017E4  322D               	rrcf	??_LCD_DrawText^0,f,c
 17307  0017E6  502D               	movf	??_LCD_DrawText^0,w,c
 17308  0017E8                     L12:
 17309  0017E8  5C25               	subwf	LCD_DrawText@posX^0,w,c
 17310  0017EA  6E25               	movwf	LCD_DrawText@posX^0,c
 17311  0017EC  5026               	movf	(LCD_DrawText@posX+1)^0,w,c
 17312  0017EE  A0D8               	btfss	status,0,c
 17313  0017F0  0426               	decf	(LCD_DrawText@posX+1)^0,w,c
 17314  0017F2  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 17315  0017F4                     l8450:
 17316                           
 17317                           ;libraries/lcd_highlevel.c: 740:   {;libraries/lcd_highlevel.c: 741:     tempChar = (*ms
      +                          g) - font->start_char;
 17318  0017F4  0E01               	movlw	1
 17319  0017F6  2422               	addwf	LCD_DrawText@font^0,w,c
 17320  0017F8  6E2D               	movwf	??_LCD_DrawText^0,c
 17321  0017FA  0E00               	movlw	0
 17322  0017FC  2023               	addwfc	(LCD_DrawText@font+1)^0,w,c
 17323  0017FE  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 17324  001800  C02D  FFF6         	movff	??_LCD_DrawText,tblptrl
 17325  001804  C02E  FFF7         	movff	??_LCD_DrawText+1,tblptrh
 17326  001808                     	if	0	;tblptru may be non-zero
 17327  001808                     	endif
 17328  001808                     	if	0	;tblptru may be non-zero
 17329  001808                     	endif
 17330  001808  0008               	tblrd		*
 17331  00180A  CFF5 F02F          	movff	tablat,??_LCD_DrawText+2
 17332  00180E  C020  FFF6         	movff	LCD_DrawText@msg,tblptrl
 17333  001812  C021  FFF7         	movff	LCD_DrawText@msg+1,tblptrh
 17334  001816  6AF8               	clrf	tblptru,c
 17335  001818  0E05               	movlw	(high __ramtop+-1)
 17336  00181A  64F7               	cpfsgt	tblptrh,c
 17337  00181C  D003               	bra	u6207
 17338  00181E  0008               	tblrd		*
 17339  001820  50F5               	movf	tablat,w,c
 17340  001822  D005               	bra	u6200
 17341  001824                     u6207:
 17342  001824  CFF6 FFE1          	movff	tblptrl,fsr1l
 17343  001828  CFF7 FFE2          	movff	tblptrh,fsr1h
 17344  00182C  50E7               	movf	indf1,w,c
 17345  00182E                     u6200:
 17346  00182E  6E30               	movwf	(??_LCD_DrawText+3)^0,c
 17347  001830  502F               	movf	(??_LCD_DrawText+2)^0,w,c
 17348  001832  5C30               	subwf	(??_LCD_DrawText+3)^0,w,c
 17349  001834  6E3F               	movwf	LCD_DrawText@tempChar^0,c
 17350                           
 17351                           ;libraries/lcd_highlevel.c: 742:     offset = font->descriptor[tempChar].offset;
 17352  001836  503F               	movf	LCD_DrawText@tempChar^0,w,c
 17353  001838  6E1A               	movwf	___wmul@multiplier^0,c
 17354  00183A  6A1B               	clrf	(___wmul@multiplier+1)^0,c
 17355  00183C  BE1A               	btfsc	___wmul@multiplier^0,7,c
 17356  00183E  061B               	decf	(___wmul@multiplier+1)^0,f,c
 17357  001840  0E00               	movlw	0
 17358  001842  6E1D               	movwf	(___wmul@multiplicand+1)^0,c
 17359  001844  0E03               	movlw	3
 17360  001846  6E1C               	movwf	___wmul@multiplicand^0,c
 17361  001848  ECE2  F02B         	call	___wmul	;wreg free
 17362  00184C  0E03               	movlw	3
 17363  00184E  2422               	addwf	LCD_DrawText@font^0,w,c
 17364  001850  6E2D               	movwf	??_LCD_DrawText^0,c
 17365  001852  0E00               	movlw	0
 17366  001854  2023               	addwfc	(LCD_DrawText@font+1)^0,w,c
 17367  001856  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 17368  001858  C02D  FFF6         	movff	??_LCD_DrawText,tblptrl
 17369  00185C  C02E  FFF7         	movff	??_LCD_DrawText+1,tblptrh
 17370  001860                     	if	0	;tblptru may be non-zero
 17371  001860                     	endif
 17372  001860                     	if	0	;tblptru may be non-zero
 17373  001860                     	endif
 17374  001860  0009               	tblrd		*+
 17375  001862  CFF5 F02F          	movff	tablat,??_LCD_DrawText+2
 17376  001866  0009               	tblrd		*+
 17377  001868  CFF5 F030          	movff	tablat,??_LCD_DrawText+3
 17378  00186C  501A               	movf	?___wmul^0,w,c
 17379  00186E  262F               	addwf	(??_LCD_DrawText+2)^0,f,c
 17380  001870  501B               	movf	(?___wmul+1)^0,w,c
 17381  001872  2230               	addwfc	(??_LCD_DrawText+3)^0,f,c
 17382  001874  0E01               	movlw	1
 17383  001876  262F               	addwf	(??_LCD_DrawText+2)^0,f,c
 17384  001878  0E00               	movlw	0
 17385  00187A  2230               	addwfc	(??_LCD_DrawText+3)^0,f,c
 17386  00187C  C02F  FFF6         	movff	??_LCD_DrawText+2,tblptrl
 17387  001880  C030  FFF7         	movff	??_LCD_DrawText+3,tblptrh
 17388  001884                     	if	0	;tblptru may be non-zero
 17389  001884                     	endif
 17390  001884                     	if	0	;tblptru may be non-zero
 17391  001884                     	endif
 17392  001884  0009               	tblrd		*+
 17393  001886  CFF5 F033          	movff	tablat,LCD_DrawText@offset
 17394  00188A  000A               	tblrd		*-
 17395  00188C  CFF5 F034          	movff	tablat,LCD_DrawText@offset+1
 17396                           
 17397                           ;libraries/lcd_highlevel.c: 743:     width = font->descriptor[tempChar].width;
 17398  001890  503F               	movf	LCD_DrawText@tempChar^0,w,c
 17399  001892  6E1A               	movwf	___wmul@multiplier^0,c
 17400  001894  6A1B               	clrf	(___wmul@multiplier+1)^0,c
 17401  001896  BE1A               	btfsc	___wmul@multiplier^0,7,c
 17402  001898  061B               	decf	(___wmul@multiplier+1)^0,f,c
 17403  00189A  0E00               	movlw	0
 17404  00189C  6E1D               	movwf	(___wmul@multiplicand+1)^0,c
 17405  00189E  0E03               	movlw	3
 17406  0018A0  6E1C               	movwf	___wmul@multiplicand^0,c
 17407  0018A2  ECE2  F02B         	call	___wmul	;wreg free
 17408  0018A6  0E03               	movlw	3
 17409  0018A8  2422               	addwf	LCD_DrawText@font^0,w,c
 17410  0018AA  6E2D               	movwf	??_LCD_DrawText^0,c
 17411  0018AC  0E00               	movlw	0
 17412  0018AE  2023               	addwfc	(LCD_DrawText@font+1)^0,w,c
 17413  0018B0  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 17414  0018B2  C02D  FFF6         	movff	??_LCD_DrawText,tblptrl
 17415  0018B6  C02E  FFF7         	movff	??_LCD_DrawText+1,tblptrh
 17416  0018BA                     	if	0	;tblptru may be non-zero
 17417  0018BA                     	endif
 17418  0018BA                     	if	0	;tblptru may be non-zero
 17419  0018BA                     	endif
 17420  0018BA  0009               	tblrd		*+
 17421  0018BC  CFF5 F02F          	movff	tablat,??_LCD_DrawText+2
 17422  0018C0  0009               	tblrd		*+
 17423  0018C2  CFF5 F030          	movff	tablat,??_LCD_DrawText+3
 17424  0018C6  501A               	movf	?___wmul^0,w,c
 17425  0018C8  262F               	addwf	(??_LCD_DrawText+2)^0,f,c
 17426  0018CA  501B               	movf	(?___wmul+1)^0,w,c
 17427  0018CC  2230               	addwfc	(??_LCD_DrawText+3)^0,f,c
 17428  0018CE  C02F  FFF6         	movff	??_LCD_DrawText+2,tblptrl
 17429  0018D2  C030  FFF7         	movff	??_LCD_DrawText+3,tblptrh
 17430  0018D6                     	if	0	;tblptru may be non-zero
 17431  0018D6                     	endif
 17432  0018D6                     	if	0	;tblptru may be non-zero
 17433  0018D6                     	endif
 17434  0018D6  0008               	tblrd		*
 17435  0018D8  CFF5 F041          	movff	tablat,LCD_DrawText@width
 17436                           
 17437                           ;libraries/lcd_highlevel.c: 748:     PORTA = 0x2A; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 17438  0018DC  0E2A               	movlw	42
 17439  0018DE  6E80               	movwf	128,c	;volatile
 17440  0018E0  988B               	bcf	3979,4,c	;volatile
 17441  0018E2  968B               	bcf	3979,3,c	;volatile
 17442  0018E4  868B               	bsf	3979,3,c	;volatile
 17443  0018E6  888B               	bsf	3979,4,c	;volatile
 17444                           
 17445                           ;libraries/lcd_highlevel.c: 749:     PORTA = posX>>8; LATC3 = 0; LATC3 = 1;;
 17446  0018E8  C026  FF80         	movff	LCD_DrawText@posX+1,3968	;volatile
 17447  0018EC  968B               	bcf	3979,3,c	;volatile
 17448  0018EE  868B               	bsf	3979,3,c	;volatile
 17449                           
 17450                           ;libraries/lcd_highlevel.c: 750:     PORTA = posX; LATC3 = 0; LATC3 = 1;;
 17451  0018F0  C025  FF80         	movff	LCD_DrawText@posX,3968	;volatile
 17452  0018F4  968B               	bcf	3979,3,c	;volatile
 17453  0018F6  868B               	bsf	3979,3,c	;volatile
 17454                           
 17455                           ;libraries/lcd_highlevel.c: 751:     posXEnd = posX+width-1+2;
 17456  0018F8  5041               	movf	LCD_DrawText@width^0,w,c
 17457  0018FA  2425               	addwf	LCD_DrawText@posX^0,w,c
 17458  0018FC  6E2D               	movwf	??_LCD_DrawText^0,c
 17459  0018FE  0E00               	movlw	0
 17460  001900  2026               	addwfc	(LCD_DrawText@posX+1)^0,w,c
 17461  001902  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 17462  001904  0E01               	movlw	1
 17463  001906  242D               	addwf	??_LCD_DrawText^0,w,c
 17464  001908  6E3B               	movwf	LCD_DrawText@posXEnd^0,c
 17465  00190A  0E00               	movlw	0
 17466  00190C  202E               	addwfc	(??_LCD_DrawText+1)^0,w,c
 17467  00190E  6E3C               	movwf	(LCD_DrawText@posXEnd+1)^0,c
 17468                           
 17469                           ;libraries/lcd_highlevel.c: 752:     PORTA = posXEnd>>8; LATC3 = 0; LATC3 = 1;;
 17470  001910  C03C  FF80         	movff	LCD_DrawText@posXEnd+1,3968	;volatile
 17471  001914  968B               	bcf	3979,3,c	;volatile
 17472  001916  868B               	bsf	3979,3,c	;volatile
 17473                           
 17474                           ;libraries/lcd_highlevel.c: 753:     PORTA = posXEnd; LATC3 = 0; LATC3 = 1;;
 17475  001918  C03B  FF80         	movff	LCD_DrawText@posXEnd,3968	;volatile
 17476  00191C  968B               	bcf	3979,3,c	;volatile
 17477  00191E  868B               	bsf	3979,3,c	;volatile
 17478                           
 17479                           ;libraries/lcd_highlevel.c: 755:     PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 17480  001920  0E2B               	movlw	43
 17481  001922  6E80               	movwf	128,c	;volatile
 17482  001924  988B               	bcf	3979,4,c	;volatile
 17483  001926  968B               	bcf	3979,3,c	;volatile
 17484  001928  868B               	bsf	3979,3,c	;volatile
 17485  00192A  888B               	bsf	3979,4,c	;volatile
 17486                           
 17487                           ;libraries/lcd_highlevel.c: 756:     PORTA = posY>>8; LATC3 = 0; LATC3 = 1;;
 17488  00192C  C028  FF80         	movff	LCD_DrawText@posY+1,3968	;volatile
 17489  001930  968B               	bcf	3979,3,c	;volatile
 17490  001932  868B               	bsf	3979,3,c	;volatile
 17491                           
 17492                           ;libraries/lcd_highlevel.c: 757:     PORTA = posY; LATC3 = 0; LATC3 = 1;;
 17493  001934  C027  FF80         	movff	LCD_DrawText@posY,3968	;volatile
 17494  001938  968B               	bcf	3979,3,c	;volatile
 17495  00193A  868B               	bsf	3979,3,c	;volatile
 17496                           
 17497                           ;libraries/lcd_highlevel.c: 758:     posYEnd = posY + font->height-1;
 17498  00193C  C022  FFF6         	movff	LCD_DrawText@font,tblptrl
 17499  001940  C023  FFF7         	movff	LCD_DrawText@font+1,tblptrh
 17500  001944                     	if	0	;tblptru may be non-zero
 17501  001944                     	endif
 17502  001944                     	if	0	;tblptru may be non-zero
 17503  001944                     	endif
 17504  001944  0008               	tblrd		*
 17505  001946  50F5               	movf	tablat,w,c
 17506  001948  2427               	addwf	LCD_DrawText@posY^0,w,c
 17507  00194A  6E2D               	movwf	??_LCD_DrawText^0,c
 17508  00194C  0E00               	movlw	0
 17509  00194E  2028               	addwfc	(LCD_DrawText@posY+1)^0,w,c
 17510  001950  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 17511  001952  0EFF               	movlw	255
 17512  001954  242D               	addwf	??_LCD_DrawText^0,w,c
 17513  001956  6E39               	movwf	LCD_DrawText@posYEnd^0,c
 17514  001958  0EFF               	movlw	255
 17515  00195A  202E               	addwfc	(??_LCD_DrawText+1)^0,w,c
 17516  00195C  6E3A               	movwf	(LCD_DrawText@posYEnd+1)^0,c
 17517                           
 17518                           ;libraries/lcd_highlevel.c: 759:     PORTA = posYEnd>>8; LATC3 = 0; LATC3 = 1;;
 17519  00195E  C03A  FF80         	movff	LCD_DrawText@posYEnd+1,3968	;volatile
 17520  001962  968B               	bcf	3979,3,c	;volatile
 17521  001964  868B               	bsf	3979,3,c	;volatile
 17522                           
 17523                           ;libraries/lcd_highlevel.c: 760:     PORTA = posYEnd; LATC3 = 0; LATC3 = 1;;
 17524  001966  C039  FF80         	movff	LCD_DrawText@posYEnd,3968	;volatile
 17525  00196A  968B               	bcf	3979,3,c	;volatile
 17526  00196C  868B               	bsf	3979,3,c	;volatile
 17527                           
 17528                           ;libraries/lcd_highlevel.c: 761:     PORTA = 0x2C; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 17529  00196E  0E2C               	movlw	44
 17530  001970  6E80               	movwf	128,c	;volatile
 17531  001972  988B               	bcf	3979,4,c	;volatile
 17532  001974  968B               	bcf	3979,3,c	;volatile
 17533  001976  868B               	bsf	3979,3,c	;volatile
 17534  001978  888B               	bsf	3979,4,c	;volatile
 17535                           
 17536                           ;libraries/lcd_highlevel.c: 763:     for(y=0;y<font->height;y++)
 17537  00197A  0E00               	movlw	0
 17538  00197C  6E3D               	movwf	LCD_DrawText@y^0,c
 17539  00197E  D07D               	goto	l8568
 17540  001980                     l8540:
 17541                           
 17542                           ;libraries/lcd_highlevel.c: 764:     {;libraries/lcd_highlevel.c: 765:       yOffset = o
      +                          ffset + (y * ((width+7)/8));
 17543  001980  C03D  F01A         	movff	LCD_DrawText@y,___wmul@multiplier
 17544  001984  6A1B               	clrf	(___wmul@multiplier+1)^0,c
 17545  001986  0E00               	movlw	0
 17546  001988  6E15               	movwf	(___awdiv@divisor+1)^0,c
 17547  00198A  0E08               	movlw	8
 17548  00198C  6E14               	movwf	___awdiv@divisor^0,c
 17549  00198E  0E07               	movlw	7
 17550  001990  2441               	addwf	LCD_DrawText@width^0,w,c
 17551  001992  6E12               	movwf	___awdiv@dividend^0,c
 17552  001994  6A13               	clrf	(___awdiv@dividend+1)^0,c
 17553  001996  0E00               	movlw	0
 17554  001998  2213               	addwfc	(___awdiv@dividend+1)^0,f,c
 17555  00199A  EC2B  F027         	call	___awdiv	;wreg free
 17556  00199E  C012  F01C         	movff	?___awdiv,___wmul@multiplicand
 17557  0019A2  C013  F01D         	movff	?___awdiv+1,___wmul@multiplicand+1
 17558  0019A6  ECE2  F02B         	call	___wmul	;wreg free
 17559  0019AA  5033               	movf	LCD_DrawText@offset^0,w,c
 17560  0019AC  241A               	addwf	?___wmul^0,w,c
 17561  0019AE  6E35               	movwf	LCD_DrawText@yOffset^0,c
 17562  0019B0  5034               	movf	(LCD_DrawText@offset+1)^0,w,c
 17563  0019B2  201B               	addwfc	(?___wmul+1)^0,w,c
 17564  0019B4  6E36               	movwf	(LCD_DrawText@yOffset+1)^0,c
 17565                           
 17566                           ;libraries/lcd_highlevel.c: 766:       for(x=0;x<width;x++)
 17567  0019B6  0E00               	movlw	0
 17568  0019B8  6E40               	movwf	LCD_DrawText@x^0,c
 17569  0019BA  D04C               	goto	l8554
 17570  0019BC                     l8544:
 17571                           
 17572                           ;libraries/lcd_highlevel.c: 767:       {;libraries/lcd_highlevel.c: 768:         fontByt
      +                          e = font->bitmap[yOffset + (x/8)];
 17573  0019BC  0E05               	movlw	5
 17574  0019BE  2422               	addwf	LCD_DrawText@font^0,w,c
 17575  0019C0  6E2D               	movwf	??_LCD_DrawText^0,c
 17576  0019C2  0E00               	movlw	0
 17577  0019C4  2023               	addwfc	(LCD_DrawText@font+1)^0,w,c
 17578  0019C6  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 17579  0019C8  C02D  FFF6         	movff	??_LCD_DrawText,tblptrl
 17580  0019CC  C02E  FFF7         	movff	??_LCD_DrawText+1,tblptrh
 17581  0019D0                     	if	0	;tblptru may be non-zero
 17582  0019D0                     	endif
 17583  0019D0                     	if	0	;tblptru may be non-zero
 17584  0019D0                     	endif
 17585  0019D0  0009               	tblrd		*+
 17586  0019D2  CFF5 F02F          	movff	tablat,??_LCD_DrawText+2
 17587  0019D6  0009               	tblrd		*+
 17588  0019D8  CFF5 F030          	movff	tablat,??_LCD_DrawText+3
 17589  0019DC  C040  F031         	movff	LCD_DrawText@x,??_LCD_DrawText+4
 17590  0019E0  90D8               	bcf	status,0,c
 17591  0019E2  3231               	rrcf	(??_LCD_DrawText+4)^0,f,c
 17592  0019E4  90D8               	bcf	status,0,c
 17593  0019E6  3231               	rrcf	(??_LCD_DrawText+4)^0,f,c
 17594  0019E8  90D8               	bcf	status,0,c
 17595  0019EA  3231               	rrcf	(??_LCD_DrawText+4)^0,f,c
 17596  0019EC  5031               	movf	(??_LCD_DrawText+4)^0,w,c
 17597  0019EE  262F               	addwf	(??_LCD_DrawText+2)^0,f,c
 17598  0019F0  0E00               	movlw	0
 17599  0019F2  2230               	addwfc	(??_LCD_DrawText+3)^0,f,c
 17600  0019F4  5035               	movf	LCD_DrawText@yOffset^0,w,c
 17601  0019F6  262F               	addwf	(??_LCD_DrawText+2)^0,f,c
 17602  0019F8  5036               	movf	(LCD_DrawText@yOffset+1)^0,w,c
 17603  0019FA  2230               	addwfc	(??_LCD_DrawText+3)^0,f,c
 17604  0019FC  C02F  FFF6         	movff	??_LCD_DrawText+2,tblptrl
 17605  001A00  C030  FFF7         	movff	??_LCD_DrawText+3,tblptrh
 17606  001A04                     	if	0	;tblptru may be non-zero
 17607  001A04                     	endif
 17608  001A04                     	if	0	;tblptru may be non-zero
 17609  001A04                     	endif
 17610  001A04  0008               	tblrd		*
 17611  001A06  CFF5 F037          	movff	tablat,LCD_DrawText@fontByte
 17612                           
 17613                           ;libraries/lcd_highlevel.c: 769:         fontPixel = fontByte & (0x80 >> (x%8));
 17614  001A0A  C040  F02D         	movff	LCD_DrawText@x,??_LCD_DrawText
 17615  001A0E  0E07               	movlw	7
 17616  001A10  162D               	andwf	??_LCD_DrawText^0,f,c
 17617  001A12  0E80               	movlw	128
 17618  001A14  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 17619  001A16  0E00               	movlw	0
 17620  001A18  6E2F               	movwf	(??_LCD_DrawText+2)^0,c
 17621  001A1A  2A2D               	incf	??_LCD_DrawText^0,f,c
 17622  001A1C  D003               	goto	u6214
 17623  001A1E                     u6215:
 17624  001A1E  342F               	rlcf	(??_LCD_DrawText+2)^0,w,c
 17625  001A20  322F               	rrcf	(??_LCD_DrawText+2)^0,f,c
 17626  001A22  322E               	rrcf	(??_LCD_DrawText+1)^0,f,c
 17627  001A24                     u6214:
 17628  001A24  2E2D               	decfsz	??_LCD_DrawText^0,f,c
 17629  001A26  D7FB               	goto	u6215
 17630  001A28  502E               	movf	(??_LCD_DrawText+1)^0,w,c
 17631  001A2A  1437               	andwf	LCD_DrawText@fontByte^0,w,c
 17632  001A2C  6E38               	movwf	LCD_DrawText@fontPixel^0,c
 17633                           
 17634                           ;libraries/lcd_highlevel.c: 770:         if(fontPixel != 0)
 17635  001A2E  5038               	movf	LCD_DrawText@fontPixel^0,w,c
 17636  001A30  B4D8               	btfsc	status,2,c
 17637  001A32  D007               	goto	l315
 17638                           
 17639                           ;libraries/lcd_highlevel.c: 771:         {;libraries/lcd_highlevel.c: 772:           POR
      +                          TA = color>>8; LATC3 = 0; LATC3 = 1;;
 17640  001A34  C02A  FF80         	movff	LCD_DrawText@color+1,3968	;volatile
 17641  001A38  968B               	bcf	3979,3,c	;volatile
 17642  001A3A  868B               	bsf	3979,3,c	;volatile
 17643                           
 17644                           ;libraries/lcd_highlevel.c: 773:           PORTA = color; LATC3 = 0; LATC3 = 1;;
 17645  001A3C  C029  FF80         	movff	LCD_DrawText@color,3968	;volatile
 17646  001A40  D006               	goto	L13
 17647  001A42                     l315:
 17648                           
 17649                           ;libraries/lcd_highlevel.c: 776:         {;libraries/lcd_highlevel.c: 777:           POR
      +                          TA = bg_color>>8; LATC3 = 0; LATC3 = 1;;
 17650  001A42  C02C  FF80         	movff	LCD_DrawText@bg_color+1,3968	;volatile
 17651  001A46  968B               	bcf	3979,3,c	;volatile
 17652  001A48  868B               	bsf	3979,3,c	;volatile
 17653                           
 17654                           ;libraries/lcd_highlevel.c: 778:           PORTA = bg_color; LATC3 = 0; LATC3 = 1;;
 17655  001A4A  C02B  FF80         	movff	LCD_DrawText@bg_color,3968	;volatile
 17656  001A4E                     L13:
 17657  001A4E  968B               	bcf	3979,3,c	;volatile
 17658  001A50  868B               	bsf	3979,3,c	;volatile
 17659                           
 17660                           ;libraries/lcd_highlevel.c: 780:       }
 17661  001A52  2A40               	incf	LCD_DrawText@x^0,f,c
 17662  001A54                     l8554:
 17663  001A54  5041               	movf	LCD_DrawText@width^0,w,c
 17664  001A56  5C40               	subwf	LCD_DrawText@x^0,w,c
 17665  001A58  A0D8               	btfss	status,0,c
 17666  001A5A  D7B0               	goto	l8544
 17667                           
 17668                           ;libraries/lcd_highlevel.c: 781:       for(x=0;x<2;x++)
 17669  001A5C  0E00               	movlw	0
 17670  001A5E  6E40               	movwf	LCD_DrawText@x^0,c
 17671  001A60                     l318:
 17672                           
 17673                           ;libraries/lcd_highlevel.c: 782:       {;libraries/lcd_highlevel.c: 783:         PORTA =
      +                           bg_color>>8; LATC3 = 0; LATC3 = 1;;
 17674  001A60  C02C  FF80         	movff	LCD_DrawText@bg_color+1,3968	;volatile
 17675  001A64  968B               	bcf	3979,3,c	;volatile
 17676  001A66  868B               	bsf	3979,3,c	;volatile
 17677                           
 17678                           ;libraries/lcd_highlevel.c: 784:         PORTA = bg_color; LATC3 = 0; LATC3 = 1;;
 17679  001A68  C02B  FF80         	movff	LCD_DrawText@bg_color,3968	;volatile
 17680  001A6C  968B               	bcf	3979,3,c	;volatile
 17681  001A6E  868B               	bsf	3979,3,c	;volatile
 17682                           
 17683                           ;libraries/lcd_highlevel.c: 785:       }
 17684  001A70  2A40               	incf	LCD_DrawText@x^0,f,c
 17685  001A72  0E01               	movlw	1
 17686  001A74  6440               	cpfsgt	LCD_DrawText@x^0,c
 17687  001A76  D7F4               	goto	l318
 17688                           
 17689                           ;libraries/lcd_highlevel.c: 786:     }
 17690  001A78  2A3D               	incf	LCD_DrawText@y^0,f,c
 17691  001A7A                     l8568:
 17692  001A7A  C022  FFF6         	movff	LCD_DrawText@font,tblptrl
 17693  001A7E  C023  FFF7         	movff	LCD_DrawText@font+1,tblptrh
 17694  001A82                     	if	0	;tblptru may be non-zero
 17695  001A82                     	endif
 17696  001A82                     	if	0	;tblptru may be non-zero
 17697  001A82                     	endif
 17698  001A82  0009               	tblrd		*+
 17699  001A84  50F5               	movf	tablat,w,c
 17700  001A86  5C3D               	subwf	LCD_DrawText@y^0,w,c
 17701  001A88  A0D8               	btfss	status,0,c
 17702  001A8A  D77A               	goto	l8540
 17703                           
 17704                           ;libraries/lcd_highlevel.c: 787:     posX = posX + 2 + width;
 17705  001A8C  5041               	movf	LCD_DrawText@width^0,w,c
 17706  001A8E  2425               	addwf	LCD_DrawText@posX^0,w,c
 17707  001A90  6E2D               	movwf	??_LCD_DrawText^0,c
 17708  001A92  0E00               	movlw	0
 17709  001A94  2026               	addwfc	(LCD_DrawText@posX+1)^0,w,c
 17710  001A96  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 17711  001A98  0E02               	movlw	2
 17712  001A9A  242D               	addwf	??_LCD_DrawText^0,w,c
 17713  001A9C  6E25               	movwf	LCD_DrawText@posX^0,c
 17714  001A9E  0E00               	movlw	0
 17715  001AA0  202E               	addwfc	(??_LCD_DrawText+1)^0,w,c
 17716  001AA2  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 17717                           
 17718                           ;libraries/lcd_highlevel.c: 788:     msg++;
 17719  001AA4  4A20               	infsnz	LCD_DrawText@msg^0,f,c
 17720  001AA6  2A21               	incf	(LCD_DrawText@msg+1)^0,f,c
 17721                           
 17722                           ;libraries/lcd_highlevel.c: 789:  }while(*msg != 0);
 17723  001AA8  C020  FFF6         	movff	LCD_DrawText@msg,tblptrl
 17724  001AAC  C021  FFF7         	movff	LCD_DrawText@msg+1,tblptrh
 17725  001AB0  6AF8               	clrf	tblptru,c
 17726  001AB2  0E05               	movlw	(high __ramtop+-1)
 17727  001AB4  64F7               	cpfsgt	tblptrh,c
 17728  001AB6  D003               	bra	u6267
 17729  001AB8  0008               	tblrd		*
 17730  001ABA  50F5               	movf	tablat,w,c
 17731  001ABC  D005               	bra	u6260
 17732  001ABE                     u6267:
 17733  001ABE  CFF6 FFE1          	movff	tblptrl,fsr1l
 17734  001AC2  CFF7 FFE2          	movff	tblptrh,fsr1h
 17735  001AC6  50E7               	movf	indf1,w,c
 17736  001AC8                     u6260:
 17737  001AC8  0900               	iorlw	0
 17738  001ACA  B4D8               	btfsc	status,2,c
 17739  001ACC  0012               	return	
 17740  001ACE  D692               	goto	l8450
 17741  001AD0                     __end_of_LCD_DrawText:
 17742                           	callstack 0
 17743                           
 17744 ;; *************** function _strlen *****************
 17745 ;; Defined at:
 17746 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\strlen.c"
 17747 ;; Parameters:    Size  Location     Type
 17748 ;;  s               2   17[COMRAM] PTR const unsigned char 
 17749 ;;		 -> g1.str(2), dbuf(32), touchScreenController@s(20), STR_14(13), 
 17750 ;;		 -> STR_13(13), STR_12(6), STR_11(11), STR_10(11), 
 17751 ;;		 -> STR_9(8), STR_8(9), STR_7(2), STR_6(9), 
 17752 ;;		 -> STR_5(9), STR_4(11), g1(216), STR_1(10), 
 17753 ;; Auto vars:     Size  Location     Type
 17754 ;;  a               2   19[COMRAM] PTR const unsigned char 
 17755 ;;		 -> g1.str(2), dbuf(32), touchScreenController@s(20), STR_14(13), 
 17756 ;;		 -> STR_13(13), STR_12(6), STR_11(11), STR_10(11), 
 17757 ;;		 -> STR_9(8), STR_8(9), STR_7(2), STR_6(9), 
 17758 ;;		 -> STR_5(9), STR_4(11), g1(216), STR_1(10), 
 17759 ;; Return value:  Size  Location     Type
 17760 ;;                  2   17[COMRAM] unsigned int 
 17761 ;; Registers used:
 17762 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru
 17763 ;; Tracked objects:
 17764 ;;		On entry : 0/0
 17765 ;;		On exit  : 0/0
 17766 ;;		Unchanged: 0/0
 17767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17768 ;;      Params:         2       0       0       0       0       0       0
 17769 ;;      Locals:         2       0       0       0       0       0       0
 17770 ;;      Temps:          0       0       0       0       0       0       0
 17771 ;;      Totals:         4       0       0       0       0       0       0
 17772 ;;Total ram usage:        4 bytes
 17773 ;; Hardware stack levels used: 1
 17774 ;; Hardware stack levels required when called: 4
 17775 ;; This function calls:
 17776 ;;		Nothing
 17777 ;; This function is called by:
 17778 ;;		_LCD_ButtonDraw
 17779 ;;		_LCD_DrawText
 17780 ;;		_pad
 17781 ;; This function uses a non-reentrant model
 17782 ;;
 17783                           
 17784                           	psect	text74
 17785  00550C                     __ptext74:
 17786                           	callstack 0
 17787  00550C                     _strlen:
 17788                           	callstack 16
 17789                           
 17790                           ;incstack = 0
 17791  00550C  C012  F014         	movff	strlen@s,strlen@a
 17792  005510  C013  F015         	movff	strlen@s+1,strlen@a+1
 17793  005514  D002               	goto	l8148
 17794  005516                     l8146:
 17795  005516  4A12               	infsnz	strlen@s^0,f,c
 17796  005518  2A13               	incf	(strlen@s+1)^0,f,c
 17797  00551A                     l8148:
 17798  00551A  C012  FFF6         	movff	strlen@s,tblptrl
 17799  00551E  C013  FFF7         	movff	strlen@s+1,tblptrh
 17800  005522  6AF8               	clrf	tblptru,c
 17801  005524  0E05               	movlw	(high __ramtop+-1)
 17802  005526  64F7               	cpfsgt	tblptrh,c
 17803  005528  D003               	bra	u5687
 17804  00552A  0008               	tblrd		*
 17805  00552C  50F5               	movf	tablat,w,c
 17806  00552E  D005               	bra	u5680
 17807  005530                     u5687:
 17808  005530  CFF6 FFE1          	movff	tblptrl,fsr1l
 17809  005534  CFF7 FFE2          	movff	tblptrh,fsr1h
 17810  005538  50E7               	movf	indf1,w,c
 17811  00553A                     u5680:
 17812  00553A  0900               	iorlw	0
 17813  00553C  A4D8               	btfss	status,2,c
 17814  00553E  D7EB               	goto	l8146
 17815  005540  5014               	movf	strlen@a^0,w,c
 17816  005542  5C12               	subwf	strlen@s^0,w,c
 17817  005544  6E12               	movwf	?_strlen^0,c
 17818  005546  5015               	movf	(strlen@a+1)^0,w,c
 17819  005548  5813               	subwfb	(strlen@s+1)^0,w,c
 17820  00554A  6E13               	movwf	(?_strlen+1)^0,c
 17821  00554C  0012               	return		;funcret
 17822  00554E                     __end_of_strlen:
 17823                           	callstack 0
 17824                           
 17825 ;; *************** function ___wmul *****************
 17826 ;; Defined at:
 17827 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul16.c"
 17828 ;; Parameters:    Size  Location     Type
 17829 ;;  multiplier      2   25[COMRAM] unsigned int 
 17830 ;;  multiplicand    2   27[COMRAM] unsigned int 
 17831 ;; Auto vars:     Size  Location     Type
 17832 ;;  product         2   29[COMRAM] unsigned int 
 17833 ;; Return value:  Size  Location     Type
 17834 ;;                  2   25[COMRAM] unsigned int 
 17835 ;; Registers used:
 17836 ;;		wreg, status,2, status,0, prodl, prodh
 17837 ;; Tracked objects:
 17838 ;;		On entry : 0/0
 17839 ;;		On exit  : 0/0
 17840 ;;		Unchanged: 0/0
 17841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17842 ;;      Params:         4       0       0       0       0       0       0
 17843 ;;      Locals:         2       0       0       0       0       0       0
 17844 ;;      Temps:          0       0       0       0       0       0       0
 17845 ;;      Totals:         6       0       0       0       0       0       0
 17846 ;;Total ram usage:        6 bytes
 17847 ;; Hardware stack levels used: 1
 17848 ;; Hardware stack levels required when called: 4
 17849 ;; This function calls:
 17850 ;;		Nothing
 17851 ;; This function is called by:
 17852 ;;		_LCD_SliderUpdate
 17853 ;;		_LCD_DrawText
 17854 ;;		_LCD_Bitmap
 17855 ;;		_touchScreenController
 17856 ;;		_XF_init
 17857 ;; This function uses a non-reentrant model
 17858 ;;
 17859                           
 17860                           	psect	text75
 17861  0057C4                     __ptext75:
 17862                           	callstack 0
 17863  0057C4                     ___wmul:
 17864                           	callstack 21
 17865                           
 17866                           ;incstack = 0
 17867  0057C4  501A               	movf	___wmul@multiplier^0,w,c
 17868  0057C6  021C               	mulwf	___wmul@multiplicand^0,c
 17869  0057C8  CFF3 F01E          	movff	prodl,___wmul@product
 17870  0057CC  CFF4 F01F          	movff	prodh,___wmul@product+1
 17871  0057D0  501A               	movf	___wmul@multiplier^0,w,c
 17872  0057D2  021D               	mulwf	(___wmul@multiplicand+1)^0,c
 17873  0057D4  50F3               	movf	243,w,c
 17874  0057D6  261F               	addwf	(___wmul@product+1)^0,f,c
 17875  0057D8  501B               	movf	(___wmul@multiplier+1)^0,w,c
 17876  0057DA  021C               	mulwf	___wmul@multiplicand^0,c
 17877  0057DC  50F3               	movf	243,w,c
 17878  0057DE  261F               	addwf	(___wmul@product+1)^0,f,c
 17879  0057E0  C01E  F01A         	movff	___wmul@product,?___wmul
 17880  0057E4  C01F  F01B         	movff	___wmul@product+1,?___wmul+1
 17881  0057E8  0012               	return		;funcret
 17882  0057EA                     __end_of___wmul:
 17883                           	callstack 0
 17884                           
 17885 ;; *************** function ___awdiv *****************
 17886 ;; Defined at:
 17887 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
 17888 ;; Parameters:    Size  Location     Type
 17889 ;;  dividend        2   17[COMRAM] int 
 17890 ;;  divisor         2   19[COMRAM] int 
 17891 ;; Auto vars:     Size  Location     Type
 17892 ;;  quotient        2   23[COMRAM] int 
 17893 ;;  sign            1   22[COMRAM] unsigned char 
 17894 ;;  counter         1   21[COMRAM] unsigned char 
 17895 ;; Return value:  Size  Location     Type
 17896 ;;                  2   17[COMRAM] int 
 17897 ;; Registers used:
 17898 ;;		wreg, status,2, status,0
 17899 ;; Tracked objects:
 17900 ;;		On entry : 0/0
 17901 ;;		On exit  : 0/0
 17902 ;;		Unchanged: 0/0
 17903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17904 ;;      Params:         4       0       0       0       0       0       0
 17905 ;;      Locals:         4       0       0       0       0       0       0
 17906 ;;      Temps:          0       0       0       0       0       0       0
 17907 ;;      Totals:         8       0       0       0       0       0       0
 17908 ;;Total ram usage:        8 bytes
 17909 ;; Hardware stack levels used: 1
 17910 ;; Hardware stack levels required when called: 4
 17911 ;; This function calls:
 17912 ;;		Nothing
 17913 ;; This function is called by:
 17914 ;;		_LCD_DrawText
 17915 ;; This function uses a non-reentrant model
 17916 ;;
 17917                           
 17918                           	psect	text76
 17919  004E56                     __ptext76:
 17920                           	callstack 0
 17921  004E56                     ___awdiv:
 17922                           	callstack 20
 17923                           
 17924                           ;incstack = 0
 17925  004E56  0E00               	movlw	0
 17926  004E58  6E17               	movwf	___awdiv@sign^0,c
 17927  004E5A  AE15               	btfss	(___awdiv@divisor+1)^0,7,c
 17928  004E5C  D006               	goto	l8352
 17929  004E5E  6C14               	negf	___awdiv@divisor^0,c
 17930  004E60  1E15               	comf	(___awdiv@divisor+1)^0,f,c
 17931  004E62  B0D8               	btfsc	status,0,c
 17932  004E64  2A15               	incf	(___awdiv@divisor+1)^0,f,c
 17933  004E66  0E01               	movlw	1
 17934  004E68  6E17               	movwf	___awdiv@sign^0,c
 17935  004E6A                     l8352:
 17936  004E6A  AE13               	btfss	(___awdiv@dividend+1)^0,7,c
 17937  004E6C  D006               	goto	l8358
 17938  004E6E  6C12               	negf	___awdiv@dividend^0,c
 17939  004E70  1E13               	comf	(___awdiv@dividend+1)^0,f,c
 17940  004E72  B0D8               	btfsc	status,0,c
 17941  004E74  2A13               	incf	(___awdiv@dividend+1)^0,f,c
 17942  004E76  0E01               	movlw	1
 17943  004E78  1A17               	xorwf	___awdiv@sign^0,f,c
 17944  004E7A                     l8358:
 17945  004E7A  0E00               	movlw	0
 17946  004E7C  6E19               	movwf	(___awdiv@quotient+1)^0,c
 17947  004E7E  0E00               	movlw	0
 17948  004E80  6E18               	movwf	___awdiv@quotient^0,c
 17949  004E82  5014               	movf	___awdiv@divisor^0,w,c
 17950  004E84  1015               	iorwf	(___awdiv@divisor+1)^0,w,c
 17951  004E86  B4D8               	btfsc	status,2,c
 17952  004E88  D01C               	goto	l8380
 17953  004E8A  0E01               	movlw	1
 17954  004E8C  6E16               	movwf	___awdiv@counter^0,c
 17955  004E8E  D004               	goto	l8366
 17956  004E90                     l8364:
 17957  004E90  90D8               	bcf	status,0,c
 17958  004E92  3614               	rlcf	___awdiv@divisor^0,f,c
 17959  004E94  3615               	rlcf	(___awdiv@divisor+1)^0,f,c
 17960  004E96  2A16               	incf	___awdiv@counter^0,f,c
 17961  004E98                     l8366:
 17962  004E98  AE15               	btfss	(___awdiv@divisor+1)^0,7,c
 17963  004E9A  D7FA               	goto	l8364
 17964  004E9C                     u6090:
 17965  004E9C  90D8               	bcf	status,0,c
 17966  004E9E  3618               	rlcf	___awdiv@quotient^0,f,c
 17967  004EA0  3619               	rlcf	(___awdiv@quotient+1)^0,f,c
 17968  004EA2  5014               	movf	___awdiv@divisor^0,w,c
 17969  004EA4  5C12               	subwf	___awdiv@dividend^0,w,c
 17970  004EA6  5015               	movf	(___awdiv@divisor+1)^0,w,c
 17971  004EA8  5813               	subwfb	(___awdiv@dividend+1)^0,w,c
 17972  004EAA  A0D8               	btfss	status,0,c
 17973  004EAC  D005               	goto	l8376
 17974  004EAE  5014               	movf	___awdiv@divisor^0,w,c
 17975  004EB0  5E12               	subwf	___awdiv@dividend^0,f,c
 17976  004EB2  5015               	movf	(___awdiv@divisor+1)^0,w,c
 17977  004EB4  5A13               	subwfb	(___awdiv@dividend+1)^0,f,c
 17978  004EB6  8018               	bsf	___awdiv@quotient^0,0,c
 17979  004EB8                     l8376:
 17980  004EB8  90D8               	bcf	status,0,c
 17981  004EBA  3215               	rrcf	(___awdiv@divisor+1)^0,f,c
 17982  004EBC  3214               	rrcf	___awdiv@divisor^0,f,c
 17983  004EBE  2E16               	decfsz	___awdiv@counter^0,f,c
 17984  004EC0  D7ED               	goto	u6090
 17985  004EC2                     l8380:
 17986  004EC2  5017               	movf	___awdiv@sign^0,w,c
 17987  004EC4  B4D8               	btfsc	status,2,c
 17988  004EC6  D004               	goto	l8384
 17989  004EC8  6C18               	negf	___awdiv@quotient^0,c
 17990  004ECA  1E19               	comf	(___awdiv@quotient+1)^0,f,c
 17991  004ECC  B0D8               	btfsc	status,0,c
 17992  004ECE  2A19               	incf	(___awdiv@quotient+1)^0,f,c
 17993  004ED0                     l8384:
 17994  004ED0  C018  F012         	movff	___awdiv@quotient,?___awdiv
 17995  004ED4  C019  F013         	movff	___awdiv@quotient+1,?___awdiv+1
 17996  004ED8  0012               	return		;funcret
 17997  004EDA                     __end_of___awdiv:
 17998                           	callstack 0
 17999                           
 18000 ;; *************** function _Paddle_draw *****************
 18001 ;; Defined at:
 18002 ;;		line 55 in file "class/paddle.c"
 18003 ;; Parameters:    Size  Location     Type
 18004 ;;  p               2   36[COMRAM] PTR struct Paddle
 18005 ;;		 -> g1(216), 
 18006 ;; Auto vars:     Size  Location     Type
 18007 ;;		None
 18008 ;; Return value:  Size  Location     Type
 18009 ;;                  1    wreg      void 
 18010 ;; Registers used:
 18011 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 18012 ;; Tracked objects:
 18013 ;;		On entry : 3F/0
 18014 ;;		On exit  : 0/0
 18015 ;;		Unchanged: 0/0
 18016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18017 ;;      Params:         2       0       0       0       0       0       0
 18018 ;;      Locals:         0       0       0       0       0       0       0
 18019 ;;      Temps:          4       0       0       0       0       0       0
 18020 ;;      Totals:         6       0       0       0       0       0       0
 18021 ;;Total ram usage:        6 bytes
 18022 ;; Hardware stack levels used: 1
 18023 ;; Hardware stack levels required when called: 5
 18024 ;; This function calls:
 18025 ;;		_LCD_DrawRect
 18026 ;; This function is called by:
 18027 ;;		_Menu_inGameDraw
 18028 ;;		_displayController
 18029 ;; This function uses a non-reentrant model
 18030 ;;
 18031                           
 18032                           	psect	text77
 18033  003A08                     __ptext77:
 18034                           	callstack 0
 18035  003A08                     _Paddle_draw:
 18036                           	callstack 21
 18037                           
 18038                           ; BSR set to: 0
 18039                           ;class/paddle.c: 55: void Paddle_draw(struct Paddle* p);class/paddle.c: 56: {;class/padd
      +                          le.c: 58:     LCD_DrawRect(p->oldx,p->oldy,p->oldx+50,p->oldy+10,1,0b0000000000000000);
 18040                           
 18041                           ;incstack = 0
 18042  003A08  EE20 F004          	lfsr	2,4
 18043  003A0C  5025               	movf	Paddle_draw@p^0,w,c
 18044  003A0E  26D9               	addwf	fsr2l,f,c
 18045  003A10  5026               	movf	(Paddle_draw@p+1)^0,w,c
 18046  003A12  22DA               	addwfc	fsr2h,f,c
 18047  003A14  CFDE F012          	movff	postinc2,LCD_DrawRect@posX1
 18048  003A18  CFDD F013          	movff	postdec2,LCD_DrawRect@posX1+1
 18049  003A1C  EE20 F006          	lfsr	2,6
 18050  003A20  5025               	movf	Paddle_draw@p^0,w,c
 18051  003A22  26D9               	addwf	fsr2l,f,c
 18052  003A24  5026               	movf	(Paddle_draw@p+1)^0,w,c
 18053  003A26  22DA               	addwfc	fsr2h,f,c
 18054  003A28  CFDE F014          	movff	postinc2,LCD_DrawRect@posY1
 18055  003A2C  CFDD F015          	movff	postdec2,LCD_DrawRect@posY1+1
 18056  003A30  EE20 F004          	lfsr	2,4
 18057  003A34  5025               	movf	Paddle_draw@p^0,w,c
 18058  003A36  26D9               	addwf	fsr2l,f,c
 18059  003A38  5026               	movf	(Paddle_draw@p+1)^0,w,c
 18060  003A3A  22DA               	addwfc	fsr2h,f,c
 18061  003A3C  CFDE F027          	movff	postinc2,??_Paddle_draw
 18062  003A40  CFDD F028          	movff	postdec2,??_Paddle_draw+1
 18063  003A44  0E32               	movlw	50
 18064  003A46  2427               	addwf	??_Paddle_draw^0,w,c
 18065  003A48  6E16               	movwf	LCD_DrawRect@posX2^0,c
 18066  003A4A  0E00               	movlw	0
 18067  003A4C  2028               	addwfc	(??_Paddle_draw+1)^0,w,c
 18068  003A4E  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 18069  003A50  EE20 F006          	lfsr	2,6
 18070  003A54  5025               	movf	Paddle_draw@p^0,w,c
 18071  003A56  26D9               	addwf	fsr2l,f,c
 18072  003A58  5026               	movf	(Paddle_draw@p+1)^0,w,c
 18073  003A5A  22DA               	addwfc	fsr2h,f,c
 18074  003A5C  CFDE F029          	movff	postinc2,??_Paddle_draw+2
 18075  003A60  CFDD F02A          	movff	postdec2,??_Paddle_draw+3
 18076  003A64  0E0A               	movlw	10
 18077  003A66  2429               	addwf	(??_Paddle_draw+2)^0,w,c
 18078  003A68  6E18               	movwf	LCD_DrawRect@posY2^0,c
 18079  003A6A  0E00               	movlw	0
 18080  003A6C  202A               	addwfc	(??_Paddle_draw+3)^0,w,c
 18081  003A6E  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 18082  003A70  0E01               	movlw	1
 18083  003A72  6E1A               	movwf	LCD_DrawRect@fill^0,c
 18084  003A74  0E00               	movlw	0
 18085  003A76  6E1C               	movwf	(LCD_DrawRect@color+1)^0,c
 18086  003A78  0E00               	movlw	0
 18087  003A7A  6E1B               	movwf	LCD_DrawRect@color^0,c
 18088  003A7C  EC7D  F012         	call	_LCD_DrawRect	;wreg free
 18089                           
 18090                           ;class/paddle.c: 60:     p->oldx=p->x;
 18091  003A80  C025  FFD9         	movff	Paddle_draw@p,fsr2l
 18092  003A84  C026  FFDA         	movff	Paddle_draw@p+1,fsr2h
 18093  003A88  EE10 F004          	lfsr	1,4
 18094  003A8C  5025               	movf	Paddle_draw@p^0,w,c
 18095  003A8E  26E1               	addwf	fsr1l,f,c
 18096  003A90  5026               	movf	(Paddle_draw@p+1)^0,w,c
 18097  003A92  22E2               	addwfc	fsr1h,f,c
 18098  003A94  CFDE FFE6          	movff	postinc2,postinc1
 18099  003A98  CFDD FFE5          	movff	postdec2,postdec1
 18100                           
 18101                           ;class/paddle.c: 61:     p->oldy=p->y;
 18102  003A9C  EE20 F002          	lfsr	2,2
 18103  003AA0  5025               	movf	Paddle_draw@p^0,w,c
 18104  003AA2  26D9               	addwf	fsr2l,f,c
 18105  003AA4  5026               	movf	(Paddle_draw@p+1)^0,w,c
 18106  003AA6  22DA               	addwfc	fsr2h,f,c
 18107  003AA8  EE10 F006          	lfsr	1,6
 18108  003AAC  5025               	movf	Paddle_draw@p^0,w,c
 18109  003AAE  26E1               	addwf	fsr1l,f,c
 18110  003AB0  5026               	movf	(Paddle_draw@p+1)^0,w,c
 18111  003AB2  22E2               	addwfc	fsr1h,f,c
 18112  003AB4  CFDE FFE6          	movff	postinc2,postinc1
 18113  003AB8  CFDD FFE5          	movff	postdec2,postdec1
 18114                           
 18115                           ;class/paddle.c: 63:     LCD_DrawRect(p->x,p->y,p->x+50,p->y+10,1,p->color);
 18116  003ABC  C025  FFD9         	movff	Paddle_draw@p,fsr2l
 18117  003AC0  C026  FFDA         	movff	Paddle_draw@p+1,fsr2h
 18118  003AC4  CFDE F012          	movff	postinc2,LCD_DrawRect@posX1
 18119  003AC8  CFDD F013          	movff	postdec2,LCD_DrawRect@posX1+1
 18120  003ACC  EE20 F002          	lfsr	2,2
 18121  003AD0  5025               	movf	Paddle_draw@p^0,w,c
 18122  003AD2  26D9               	addwf	fsr2l,f,c
 18123  003AD4  5026               	movf	(Paddle_draw@p+1)^0,w,c
 18124  003AD6  22DA               	addwfc	fsr2h,f,c
 18125  003AD8  CFDE F014          	movff	postinc2,LCD_DrawRect@posY1
 18126  003ADC  CFDD F015          	movff	postdec2,LCD_DrawRect@posY1+1
 18127  003AE0  C025  FFD9         	movff	Paddle_draw@p,fsr2l
 18128  003AE4  C026  FFDA         	movff	Paddle_draw@p+1,fsr2h
 18129  003AE8  CFDE F027          	movff	postinc2,??_Paddle_draw
 18130  003AEC  CFDD F028          	movff	postdec2,??_Paddle_draw+1
 18131  003AF0  0E32               	movlw	50
 18132  003AF2  2427               	addwf	??_Paddle_draw^0,w,c
 18133  003AF4  6E16               	movwf	LCD_DrawRect@posX2^0,c
 18134  003AF6  0E00               	movlw	0
 18135  003AF8  2028               	addwfc	(??_Paddle_draw+1)^0,w,c
 18136  003AFA  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 18137  003AFC  EE20 F002          	lfsr	2,2
 18138  003B00  5025               	movf	Paddle_draw@p^0,w,c
 18139  003B02  26D9               	addwf	fsr2l,f,c
 18140  003B04  5026               	movf	(Paddle_draw@p+1)^0,w,c
 18141  003B06  22DA               	addwfc	fsr2h,f,c
 18142  003B08  CFDE F029          	movff	postinc2,??_Paddle_draw+2
 18143  003B0C  CFDD F02A          	movff	postdec2,??_Paddle_draw+3
 18144  003B10  0E0A               	movlw	10
 18145  003B12  2429               	addwf	(??_Paddle_draw+2)^0,w,c
 18146  003B14  6E18               	movwf	LCD_DrawRect@posY2^0,c
 18147  003B16  0E00               	movlw	0
 18148  003B18  202A               	addwfc	(??_Paddle_draw+3)^0,w,c
 18149  003B1A  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 18150  003B1C  0E01               	movlw	1
 18151  003B1E  6E1A               	movwf	LCD_DrawRect@fill^0,c
 18152  003B20  EE20 F008          	lfsr	2,8
 18153  003B24  5025               	movf	Paddle_draw@p^0,w,c
 18154  003B26  26D9               	addwf	fsr2l,f,c
 18155  003B28  5026               	movf	(Paddle_draw@p+1)^0,w,c
 18156  003B2A  22DA               	addwfc	fsr2h,f,c
 18157  003B2C  CFDE F01B          	movff	postinc2,LCD_DrawRect@color
 18158  003B30  CFDD F01C          	movff	postdec2,LCD_DrawRect@color+1
 18159  003B34  EC7D  F012         	call	_LCD_DrawRect	;wreg free
 18160  003B38  0012               	return		;funcret
 18161  003B3A                     __end_of_Paddle_draw:
 18162                           	callstack 0
 18163                           
 18164 ;; *************** function _LCD_Fill *****************
 18165 ;; Defined at:
 18166 ;;		line 218 in file "libraries/lcd_highlevel.c"
 18167 ;; Parameters:    Size  Location     Type
 18168 ;;  color           2   17[COMRAM] unsigned short 
 18169 ;; Auto vars:     Size  Location     Type
 18170 ;;  page            2   23[COMRAM] unsigned short 
 18171 ;;  column          2   21[COMRAM] unsigned short 
 18172 ;;  colorL          1   20[COMRAM] unsigned char 
 18173 ;;  colorH          1   19[COMRAM] unsigned char 
 18174 ;; Return value:  Size  Location     Type
 18175 ;;                  1    wreg      void 
 18176 ;; Registers used:
 18177 ;;		wreg, status,2, status,0
 18178 ;; Tracked objects:
 18179 ;;		On entry : 0/0
 18180 ;;		On exit  : 0/0
 18181 ;;		Unchanged: 0/0
 18182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18183 ;;      Params:         2       0       0       0       0       0       0
 18184 ;;      Locals:         6       0       0       0       0       0       0
 18185 ;;      Temps:          0       0       0       0       0       0       0
 18186 ;;      Totals:         8       0       0       0       0       0       0
 18187 ;;Total ram usage:        8 bytes
 18188 ;; Hardware stack levels used: 1
 18189 ;; Hardware stack levels required when called: 4
 18190 ;; This function calls:
 18191 ;;		Nothing
 18192 ;; This function is called by:
 18193 ;;		_Factory_init
 18194 ;;		_Menu_welcomeDraw
 18195 ;;		_Menu_parametersDraw
 18196 ;;		_Menu_inGameDraw
 18197 ;;		_Menu_endGame
 18198 ;; This function uses a non-reentrant model
 18199 ;;
 18200                           
 18201                           	psect	text78
 18202  004798                     __ptext78:
 18203                           	callstack 0
 18204  004798                     _LCD_Fill:
 18205                           	callstack 21
 18206                           
 18207                           ;libraries/lcd_highlevel.c: 218: void LCD_Fill(uint16_t color);libraries/lcd_highlevel.c
      +                          : 219: {;libraries/lcd_highlevel.c: 220:   uint16_t column;;libraries/lcd_highlevel.c: 2
      +                          21:   uint16_t page;;libraries/lcd_highlevel.c: 222:   uint8_t colorH, colorL;;libraries
      +                          /lcd_highlevel.c: 223:   colorH = color >> 8;
 18208                           
 18209                           ;incstack = 0
 18210  004798  C013  F014         	movff	LCD_Fill@color+1,LCD_Fill@colorH
 18211                           
 18212                           ;libraries/lcd_highlevel.c: 224:   colorL = color;
 18213  00479C  C012  F015         	movff	LCD_Fill@color,LCD_Fill@colorL
 18214                           
 18215                           ;libraries/lcd_highlevel.c: 226:   PORTA = 0x2A; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
 18216  0047A0  0E2A               	movlw	42
 18217  0047A2  6E80               	movwf	128,c	;volatile
 18218  0047A4  988B               	bcf	3979,4,c	;volatile
 18219  0047A6  968B               	bcf	3979,3,c	;volatile
 18220  0047A8  868B               	bsf	3979,3,c	;volatile
 18221  0047AA  888B               	bsf	3979,4,c	;volatile
 18222                           
 18223                           ;libraries/lcd_highlevel.c: 227:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
 18224  0047AC  0E00               	movlw	0
 18225  0047AE  6E80               	movwf	128,c	;volatile
 18226  0047B0  968B               	bcf	3979,3,c	;volatile
 18227  0047B2  868B               	bsf	3979,3,c	;volatile
 18228                           
 18229                           ;libraries/lcd_highlevel.c: 228:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
 18230  0047B4  0E00               	movlw	0
 18231  0047B6  6E80               	movwf	128,c	;volatile
 18232  0047B8  968B               	bcf	3979,3,c	;volatile
 18233  0047BA  868B               	bsf	3979,3,c	;volatile
 18234                           
 18235                           ;libraries/lcd_highlevel.c: 229:   PORTA = (240 -1) >> 8; LATC3 = 0; LATC3 = 1;;
 18236  0047BC  0E00               	movlw	0
 18237  0047BE  6E80               	movwf	128,c	;volatile
 18238  0047C0  968B               	bcf	3979,3,c	;volatile
 18239  0047C2  868B               	bsf	3979,3,c	;volatile
 18240                           
 18241                           ;libraries/lcd_highlevel.c: 230:   PORTA = (240 -1); LATC3 = 0; LATC3 = 1;;
 18242  0047C4  0EEF               	movlw	239
 18243  0047C6  6E80               	movwf	128,c	;volatile
 18244  0047C8  968B               	bcf	3979,3,c	;volatile
 18245  0047CA  868B               	bsf	3979,3,c	;volatile
 18246                           
 18247                           ;libraries/lcd_highlevel.c: 232:   PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
 18248  0047CC  0E2B               	movlw	43
 18249  0047CE  6E80               	movwf	128,c	;volatile
 18250  0047D0  988B               	bcf	3979,4,c	;volatile
 18251  0047D2  968B               	bcf	3979,3,c	;volatile
 18252  0047D4  868B               	bsf	3979,3,c	;volatile
 18253  0047D6  888B               	bsf	3979,4,c	;volatile
 18254                           
 18255                           ;libraries/lcd_highlevel.c: 233:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
 18256  0047D8  0E00               	movlw	0
 18257  0047DA  6E80               	movwf	128,c	;volatile
 18258  0047DC  968B               	bcf	3979,3,c	;volatile
 18259  0047DE  868B               	bsf	3979,3,c	;volatile
 18260                           
 18261                           ;libraries/lcd_highlevel.c: 234:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
 18262  0047E0  0E00               	movlw	0
 18263  0047E2  6E80               	movwf	128,c	;volatile
 18264  0047E4  968B               	bcf	3979,3,c	;volatile
 18265  0047E6  868B               	bsf	3979,3,c	;volatile
 18266                           
 18267                           ;libraries/lcd_highlevel.c: 235:   PORTA = (320 -1) >> 8; LATC3 = 0; LATC3 = 1;;
 18268  0047E8  0E01               	movlw	1
 18269  0047EA  6E80               	movwf	128,c	;volatile
 18270  0047EC  968B               	bcf	3979,3,c	;volatile
 18271  0047EE  868B               	bsf	3979,3,c	;volatile
 18272                           
 18273                           ;libraries/lcd_highlevel.c: 236:   PORTA = (320 -1); LATC3 = 0; LATC3 = 1;;
 18274  0047F0  0E3F               	movlw	63
 18275  0047F2  6E80               	movwf	128,c	;volatile
 18276  0047F4  968B               	bcf	3979,3,c	;volatile
 18277  0047F6  868B               	bsf	3979,3,c	;volatile
 18278                           
 18279                           ;libraries/lcd_highlevel.c: 238:   PORTA = 0x2C; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
 18280  0047F8  0E2C               	movlw	44
 18281  0047FA  6E80               	movwf	128,c	;volatile
 18282  0047FC  988B               	bcf	3979,4,c	;volatile
 18283  0047FE  968B               	bcf	3979,3,c	;volatile
 18284  004800  868B               	bsf	3979,3,c	;volatile
 18285  004802  888B               	bsf	3979,4,c	;volatile
 18286                           
 18287                           ;libraries/lcd_highlevel.c: 239:   for(column=0; column<320; column++)
 18288  004804  0E00               	movlw	0
 18289  004806  6E17               	movwf	(LCD_Fill@column+1)^0,c
 18290  004808  0E00               	movlw	0
 18291  00480A  6E16               	movwf	LCD_Fill@column^0,c
 18292  00480C                     l6542:
 18293                           
 18294                           ;libraries/lcd_highlevel.c: 240:   {;libraries/lcd_highlevel.c: 241:     for(page=0; pag
      +                          e<240; page++)
 18295  00480C  0E00               	movlw	0
 18296  00480E  6E19               	movwf	(LCD_Fill@page+1)^0,c
 18297  004810  0E00               	movlw	0
 18298  004812  6E18               	movwf	LCD_Fill@page^0,c
 18299  004814                     l226:
 18300                           
 18301                           ;libraries/lcd_highlevel.c: 242:     {;libraries/lcd_highlevel.c: 243:       PORTA = col
      +                          orH;
 18302  004814  C014  FF80         	movff	LCD_Fill@colorH,3968	;volatile
 18303                           
 18304                           ;libraries/lcd_highlevel.c: 244:       LATC3 = 0;
 18305  004818  968B               	bcf	3979,3,c	;volatile
 18306                           
 18307                           ;libraries/lcd_highlevel.c: 245:       LATC3 = 1;
 18308  00481A  868B               	bsf	3979,3,c	;volatile
 18309                           
 18310                           ;libraries/lcd_highlevel.c: 246:       PORTA = colorL;
 18311  00481C  C015  FF80         	movff	LCD_Fill@colorL,3968	;volatile
 18312                           
 18313                           ;libraries/lcd_highlevel.c: 247:       LATC3 = 0;
 18314  004820  968B               	bcf	3979,3,c	;volatile
 18315                           
 18316                           ;libraries/lcd_highlevel.c: 248:       LATC3 = 1;
 18317  004822  868B               	bsf	3979,3,c	;volatile
 18318                           
 18319                           ;libraries/lcd_highlevel.c: 249:     }
 18320  004824  4A18               	infsnz	LCD_Fill@page^0,f,c
 18321  004826  2A19               	incf	(LCD_Fill@page+1)^0,f,c
 18322  004828  5019               	movf	(LCD_Fill@page+1)^0,w,c
 18323  00482A  E104               	bnz	u3960
 18324  00482C  0EF0               	movlw	240
 18325  00482E  5C18               	subwf	LCD_Fill@page^0,w,c
 18326  004830  A0D8               	btfss	status,0,c
 18327  004832  D7F0               	goto	l226
 18328  004834                     u3960:
 18329                           
 18330                           ;libraries/lcd_highlevel.c: 250:   }
 18331  004834  4A16               	infsnz	LCD_Fill@column^0,f,c
 18332  004836  2A17               	incf	(LCD_Fill@column+1)^0,f,c
 18333  004838  0E40               	movlw	64
 18334  00483A  5C16               	subwf	LCD_Fill@column^0,w,c
 18335  00483C  0E01               	movlw	1
 18336  00483E  5817               	subwfb	(LCD_Fill@column+1)^0,w,c
 18337  004840  B0D8               	btfsc	status,0,c
 18338  004842  0012               	return	
 18339  004844  D7E3               	goto	l6542
 18340  004846                     __end_of_LCD_Fill:
 18341                           	callstack 0
 18342                           
 18343 ;; *************** function _Ball_draw *****************
 18344 ;; Defined at:
 18345 ;;		line 27 in file "class/ball.c"
 18346 ;; Parameters:    Size  Location     Type
 18347 ;;  b               2   36[COMRAM] PTR struct Ball
 18348 ;;		 -> g1(216), 
 18349 ;; Auto vars:     Size  Location     Type
 18350 ;;		None
 18351 ;; Return value:  Size  Location     Type
 18352 ;;                  1    wreg      void 
 18353 ;; Registers used:
 18354 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 18355 ;; Tracked objects:
 18356 ;;		On entry : 3F/0
 18357 ;;		On exit  : 0/0
 18358 ;;		Unchanged: 0/0
 18359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18360 ;;      Params:         2       0       0       0       0       0       0
 18361 ;;      Locals:         0       0       0       0       0       0       0
 18362 ;;      Temps:          8       0       0       0       0       0       0
 18363 ;;      Totals:        10       0       0       0       0       0       0
 18364 ;;Total ram usage:       10 bytes
 18365 ;; Hardware stack levels used: 1
 18366 ;; Hardware stack levels required when called: 5
 18367 ;; This function calls:
 18368 ;;		_LCD_DrawRect
 18369 ;; This function is called by:
 18370 ;;		_Menu_inGameDraw
 18371 ;;		_displayController
 18372 ;; This function uses a non-reentrant model
 18373 ;;
 18374                           
 18375                           	psect	text79
 18376  00339C                     __ptext79:
 18377                           	callstack 0
 18378  00339C                     _Ball_draw:
 18379                           	callstack 21
 18380                           
 18381                           ; BSR set to: 0
 18382                           ;class/ball.c: 27: void Ball_draw(struct Ball* b);class/ball.c: 28: {;class/ball.c: 29: 
      +                              LCD_DrawRect(b->oldx-8,b->oldy-8,b->oldx+8,b->oldy+8,1,0b0000000000000000);
 18383                           
 18384                           ;incstack = 0
 18385  00339C  EE20 F004          	lfsr	2,4
 18386  0033A0  5025               	movf	Ball_draw@b^0,w,c
 18387  0033A2  26D9               	addwf	fsr2l,f,c
 18388  0033A4  5026               	movf	(Ball_draw@b+1)^0,w,c
 18389  0033A6  22DA               	addwfc	fsr2h,f,c
 18390  0033A8  CFDE F027          	movff	postinc2,??_Ball_draw
 18391  0033AC  CFDD F028          	movff	postdec2,??_Ball_draw+1
 18392  0033B0  0EF8               	movlw	248
 18393  0033B2  2427               	addwf	??_Ball_draw^0,w,c
 18394  0033B4  6E12               	movwf	LCD_DrawRect@posX1^0,c
 18395  0033B6  0EFF               	movlw	255
 18396  0033B8  2028               	addwfc	(??_Ball_draw+1)^0,w,c
 18397  0033BA  6E13               	movwf	(LCD_DrawRect@posX1+1)^0,c
 18398  0033BC  EE20 F006          	lfsr	2,6
 18399  0033C0  5025               	movf	Ball_draw@b^0,w,c
 18400  0033C2  26D9               	addwf	fsr2l,f,c
 18401  0033C4  5026               	movf	(Ball_draw@b+1)^0,w,c
 18402  0033C6  22DA               	addwfc	fsr2h,f,c
 18403  0033C8  CFDE F029          	movff	postinc2,??_Ball_draw+2
 18404  0033CC  CFDD F02A          	movff	postdec2,??_Ball_draw+3
 18405  0033D0  0EF8               	movlw	248
 18406  0033D2  2429               	addwf	(??_Ball_draw+2)^0,w,c
 18407  0033D4  6E14               	movwf	LCD_DrawRect@posY1^0,c
 18408  0033D6  0EFF               	movlw	255
 18409  0033D8  202A               	addwfc	(??_Ball_draw+3)^0,w,c
 18410  0033DA  6E15               	movwf	(LCD_DrawRect@posY1+1)^0,c
 18411  0033DC  EE20 F004          	lfsr	2,4
 18412  0033E0  5025               	movf	Ball_draw@b^0,w,c
 18413  0033E2  26D9               	addwf	fsr2l,f,c
 18414  0033E4  5026               	movf	(Ball_draw@b+1)^0,w,c
 18415  0033E6  22DA               	addwfc	fsr2h,f,c
 18416  0033E8  CFDE F02B          	movff	postinc2,??_Ball_draw+4
 18417  0033EC  CFDD F02C          	movff	postdec2,??_Ball_draw+5
 18418  0033F0  0E08               	movlw	8
 18419  0033F2  242B               	addwf	(??_Ball_draw+4)^0,w,c
 18420  0033F4  6E16               	movwf	LCD_DrawRect@posX2^0,c
 18421  0033F6  0E00               	movlw	0
 18422  0033F8  202C               	addwfc	(??_Ball_draw+5)^0,w,c
 18423  0033FA  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 18424  0033FC  EE20 F006          	lfsr	2,6
 18425  003400  5025               	movf	Ball_draw@b^0,w,c
 18426  003402  26D9               	addwf	fsr2l,f,c
 18427  003404  5026               	movf	(Ball_draw@b+1)^0,w,c
 18428  003406  22DA               	addwfc	fsr2h,f,c
 18429  003408  CFDE F02D          	movff	postinc2,??_Ball_draw+6
 18430  00340C  CFDD F02E          	movff	postdec2,??_Ball_draw+7
 18431  003410  0E08               	movlw	8
 18432  003412  242D               	addwf	(??_Ball_draw+6)^0,w,c
 18433  003414  6E18               	movwf	LCD_DrawRect@posY2^0,c
 18434  003416  0E00               	movlw	0
 18435  003418  202E               	addwfc	(??_Ball_draw+7)^0,w,c
 18436  00341A  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 18437  00341C  0E01               	movlw	1
 18438  00341E  6E1A               	movwf	LCD_DrawRect@fill^0,c
 18439  003420  0E00               	movlw	0
 18440  003422  6E1C               	movwf	(LCD_DrawRect@color+1)^0,c
 18441  003424  0E00               	movlw	0
 18442  003426  6E1B               	movwf	LCD_DrawRect@color^0,c
 18443  003428  EC7D  F012         	call	_LCD_DrawRect	;wreg free
 18444                           
 18445                           ;class/ball.c: 30:     b->oldx=b->x;
 18446  00342C  C025  FFD9         	movff	Ball_draw@b,fsr2l
 18447  003430  C026  FFDA         	movff	Ball_draw@b+1,fsr2h
 18448  003434  EE10 F004          	lfsr	1,4
 18449  003438  5025               	movf	Ball_draw@b^0,w,c
 18450  00343A  26E1               	addwf	fsr1l,f,c
 18451  00343C  5026               	movf	(Ball_draw@b+1)^0,w,c
 18452  00343E  22E2               	addwfc	fsr1h,f,c
 18453  003440  CFDE FFE6          	movff	postinc2,postinc1
 18454  003444  CFDD FFE5          	movff	postdec2,postdec1
 18455                           
 18456                           ;class/ball.c: 31:     b->oldy=b->y;
 18457  003448  EE20 F002          	lfsr	2,2
 18458  00344C  5025               	movf	Ball_draw@b^0,w,c
 18459  00344E  26D9               	addwf	fsr2l,f,c
 18460  003450  5026               	movf	(Ball_draw@b+1)^0,w,c
 18461  003452  22DA               	addwfc	fsr2h,f,c
 18462  003454  EE10 F006          	lfsr	1,6
 18463  003458  5025               	movf	Ball_draw@b^0,w,c
 18464  00345A  26E1               	addwf	fsr1l,f,c
 18465  00345C  5026               	movf	(Ball_draw@b+1)^0,w,c
 18466  00345E  22E2               	addwfc	fsr1h,f,c
 18467  003460  CFDE FFE6          	movff	postinc2,postinc1
 18468  003464  CFDD FFE5          	movff	postdec2,postdec1
 18469                           
 18470                           ;class/ball.c: 32:     LCD_DrawRect(b->x-8,b->y-8,b->x+8,b->y+8,1,0b1111100000000000);
 18471  003468  C025  FFD9         	movff	Ball_draw@b,fsr2l
 18472  00346C  C026  FFDA         	movff	Ball_draw@b+1,fsr2h
 18473  003470  CFDE F027          	movff	postinc2,??_Ball_draw
 18474  003474  CFDD F028          	movff	postdec2,??_Ball_draw+1
 18475  003478  0EF8               	movlw	248
 18476  00347A  2427               	addwf	??_Ball_draw^0,w,c
 18477  00347C  6E12               	movwf	LCD_DrawRect@posX1^0,c
 18478  00347E  0EFF               	movlw	255
 18479  003480  2028               	addwfc	(??_Ball_draw+1)^0,w,c
 18480  003482  6E13               	movwf	(LCD_DrawRect@posX1+1)^0,c
 18481  003484  EE20 F002          	lfsr	2,2
 18482  003488  5025               	movf	Ball_draw@b^0,w,c
 18483  00348A  26D9               	addwf	fsr2l,f,c
 18484  00348C  5026               	movf	(Ball_draw@b+1)^0,w,c
 18485  00348E  22DA               	addwfc	fsr2h,f,c
 18486  003490  CFDE F029          	movff	postinc2,??_Ball_draw+2
 18487  003494  CFDD F02A          	movff	postdec2,??_Ball_draw+3
 18488  003498  0EF8               	movlw	248
 18489  00349A  2429               	addwf	(??_Ball_draw+2)^0,w,c
 18490  00349C  6E14               	movwf	LCD_DrawRect@posY1^0,c
 18491  00349E  0EFF               	movlw	255
 18492  0034A0  202A               	addwfc	(??_Ball_draw+3)^0,w,c
 18493  0034A2  6E15               	movwf	(LCD_DrawRect@posY1+1)^0,c
 18494  0034A4  C025  FFD9         	movff	Ball_draw@b,fsr2l
 18495  0034A8  C026  FFDA         	movff	Ball_draw@b+1,fsr2h
 18496  0034AC  CFDE F02B          	movff	postinc2,??_Ball_draw+4
 18497  0034B0  CFDD F02C          	movff	postdec2,??_Ball_draw+5
 18498  0034B4  0E08               	movlw	8
 18499  0034B6  242B               	addwf	(??_Ball_draw+4)^0,w,c
 18500  0034B8  6E16               	movwf	LCD_DrawRect@posX2^0,c
 18501  0034BA  0E00               	movlw	0
 18502  0034BC  202C               	addwfc	(??_Ball_draw+5)^0,w,c
 18503  0034BE  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 18504  0034C0  EE20 F002          	lfsr	2,2
 18505  0034C4  5025               	movf	Ball_draw@b^0,w,c
 18506  0034C6  26D9               	addwf	fsr2l,f,c
 18507  0034C8  5026               	movf	(Ball_draw@b+1)^0,w,c
 18508  0034CA  22DA               	addwfc	fsr2h,f,c
 18509  0034CC  CFDE F02D          	movff	postinc2,??_Ball_draw+6
 18510  0034D0  CFDD F02E          	movff	postdec2,??_Ball_draw+7
 18511  0034D4  0E08               	movlw	8
 18512  0034D6  242D               	addwf	(??_Ball_draw+6)^0,w,c
 18513  0034D8  6E18               	movwf	LCD_DrawRect@posY2^0,c
 18514  0034DA  0E00               	movlw	0
 18515  0034DC  202E               	addwfc	(??_Ball_draw+7)^0,w,c
 18516  0034DE  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 18517  0034E0  0E01               	movlw	1
 18518  0034E2  6E1A               	movwf	LCD_DrawRect@fill^0,c
 18519  0034E4  0EF8               	movlw	248
 18520  0034E6  6E1C               	movwf	(LCD_DrawRect@color+1)^0,c
 18521  0034E8  0E00               	movlw	0
 18522  0034EA  6E1B               	movwf	LCD_DrawRect@color^0,c
 18523  0034EC  EC7D  F012         	call	_LCD_DrawRect	;wreg free
 18524  0034F0  0012               	return		;funcret
 18525  0034F2                     __end_of_Ball_draw:
 18526                           	callstack 0
 18527                           
 18528 ;; *************** function _LCD_DrawRect *****************
 18529 ;; Defined at:
 18530 ;;		line 584 in file "libraries/lcd_highlevel.c"
 18531 ;; Parameters:    Size  Location     Type
 18532 ;;  posX1           2   17[COMRAM] unsigned short 
 18533 ;;  posY1           2   19[COMRAM] unsigned short 
 18534 ;;  posX2           2   21[COMRAM] unsigned short 
 18535 ;;  posY2           2   23[COMRAM] unsigned short 
 18536 ;;  fill            1   25[COMRAM] unsigned char 
 18537 ;;  color           2   26[COMRAM] unsigned short 
 18538 ;; Auto vars:     Size  Location     Type
 18539 ;;  i               2   34[COMRAM] unsigned short 
 18540 ;;  temp            2   30[COMRAM] unsigned short 
 18541 ;;  j               2   28[COMRAM] unsigned short 
 18542 ;;  colorL          1   33[COMRAM] unsigned char 
 18543 ;;  colorH          1   32[COMRAM] unsigned char 
 18544 ;; Return value:  Size  Location     Type
 18545 ;;                  1    wreg      void 
 18546 ;; Registers used:
 18547 ;;		wreg, status,2, status,0
 18548 ;; Tracked objects:
 18549 ;;		On entry : 0/0
 18550 ;;		On exit  : 0/0
 18551 ;;		Unchanged: 0/0
 18552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18553 ;;      Params:        11       0       0       0       0       0       0
 18554 ;;      Locals:         8       0       0       0       0       0       0
 18555 ;;      Temps:          0       0       0       0       0       0       0
 18556 ;;      Totals:        19       0       0       0       0       0       0
 18557 ;;Total ram usage:       19 bytes
 18558 ;; Hardware stack levels used: 1
 18559 ;; Hardware stack levels required when called: 4
 18560 ;; This function calls:
 18561 ;;		Nothing
 18562 ;; This function is called by:
 18563 ;;		_Ball_draw
 18564 ;;		_Paddle_draw
 18565 ;;		_Menu_inGameDraw
 18566 ;;		_LCD_SliderUpdate
 18567 ;;		_LCD_SliderDraw
 18568 ;;		_LCD_ButtonUpdate
 18569 ;;		_LCD_ButtonDraw
 18570 ;;		_displayController
 18571 ;; This function uses a non-reentrant model
 18572 ;;
 18573                           
 18574                           	psect	text80
 18575  0024FA                     __ptext80:
 18576                           	callstack 0
 18577  0024FA                     _LCD_DrawRect:
 18578                           	callstack 21
 18579                           
 18580                           ;libraries/lcd_highlevel.c: 584: void LCD_DrawRect(uint16_t posX1,uint16_t posY1, uint16
      +                          _t posX2,;libraries/lcd_highlevel.c: 585:   uint16_t posY2,uint8_t fill,uint16_t color);
      +                          libraries/lcd_highlevel.c: 586: {;libraries/lcd_highlevel.c: 587:   uint16_t i;;librarie
      +                          s/lcd_highlevel.c: 588:   uint16_t j;;libraries/lcd_highlevel.c: 589:   uint16_t temp;;l
      +                          ibraries/lcd_highlevel.c: 590:   uint8_t colorH,colorL;;libraries/lcd_highlevel.c: 592: 
      +                            colorH = color>>8;
 18581                           
 18582                           ;incstack = 0
 18583  0024FA  C01C  F021         	movff	LCD_DrawRect@color+1,LCD_DrawRect@colorH
 18584                           
 18585                           ;libraries/lcd_highlevel.c: 593:   colorL = color;
 18586  0024FE  C01B  F022         	movff	LCD_DrawRect@color,LCD_DrawRect@colorL
 18587                           
 18588                           ;libraries/lcd_highlevel.c: 597:   if(posX1 > posX2)
 18589  002502  5012               	movf	LCD_DrawRect@posX1^0,w,c
 18590  002504  5C16               	subwf	LCD_DrawRect@posX2^0,w,c
 18591  002506  5013               	movf	(LCD_DrawRect@posX1+1)^0,w,c
 18592  002508  5817               	subwfb	(LCD_DrawRect@posX2+1)^0,w,c
 18593  00250A  B0D8               	btfsc	status,0,c
 18594  00250C  D00C               	goto	l5320
 18595                           
 18596                           ;libraries/lcd_highlevel.c: 598:   {;libraries/lcd_highlevel.c: 599:     temp = posX1;
 18597  00250E  C012  F01F         	movff	LCD_DrawRect@posX1,LCD_DrawRect@temp
 18598  002512  C013  F020         	movff	LCD_DrawRect@posX1+1,LCD_DrawRect@temp+1
 18599                           
 18600                           ;libraries/lcd_highlevel.c: 600:     posX1 = posX2;
 18601  002516  C016  F012         	movff	LCD_DrawRect@posX2,LCD_DrawRect@posX1
 18602  00251A  C017  F013         	movff	LCD_DrawRect@posX2+1,LCD_DrawRect@posX1+1
 18603                           
 18604                           ;libraries/lcd_highlevel.c: 601:     posX2 = temp;
 18605  00251E  C01F  F016         	movff	LCD_DrawRect@temp,LCD_DrawRect@posX2
 18606  002522  C020  F017         	movff	LCD_DrawRect@temp+1,LCD_DrawRect@posX2+1
 18607  002526                     l5320:
 18608                           
 18609                           ;libraries/lcd_highlevel.c: 603:   if(posY1 > posY2)
 18610  002526  5014               	movf	LCD_DrawRect@posY1^0,w,c
 18611  002528  5C18               	subwf	LCD_DrawRect@posY2^0,w,c
 18612  00252A  5015               	movf	(LCD_DrawRect@posY1+1)^0,w,c
 18613  00252C  5819               	subwfb	(LCD_DrawRect@posY2+1)^0,w,c
 18614  00252E  B0D8               	btfsc	status,0,c
 18615  002530  D00C               	goto	l5324
 18616                           
 18617                           ;libraries/lcd_highlevel.c: 604:   {;libraries/lcd_highlevel.c: 605:     temp = posY1;
 18618  002532  C014  F01F         	movff	LCD_DrawRect@posY1,LCD_DrawRect@temp
 18619  002536  C015  F020         	movff	LCD_DrawRect@posY1+1,LCD_DrawRect@temp+1
 18620                           
 18621                           ;libraries/lcd_highlevel.c: 606:     posY1 = posY2;
 18622  00253A  C018  F014         	movff	LCD_DrawRect@posY2,LCD_DrawRect@posY1
 18623  00253E  C019  F015         	movff	LCD_DrawRect@posY2+1,LCD_DrawRect@posY1+1
 18624                           
 18625                           ;libraries/lcd_highlevel.c: 607:     posY2 = temp;
 18626  002542  C01F  F018         	movff	LCD_DrawRect@temp,LCD_DrawRect@posY2
 18627  002546  C020  F019         	movff	LCD_DrawRect@temp+1,LCD_DrawRect@posY2+1
 18628  00254A                     l5324:
 18629                           
 18630                           ;libraries/lcd_highlevel.c: 610:   if(fill==1)
 18631  00254A  041A               	decf	LCD_DrawRect@fill^0,w,c
 18632  00254C  A4D8               	btfss	status,2,c
 18633  00254E  D055               	goto	l5406
 18634                           
 18635                           ;libraries/lcd_highlevel.c: 611:   {;libraries/lcd_highlevel.c: 613:     PORTA = 0x2A; L
      +                          ATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 = 1;;
 18636  002550  0E2A               	movlw	42
 18637  002552  6E80               	movwf	128,c	;volatile
 18638  002554  988B               	bcf	3979,4,c	;volatile
 18639  002556  968B               	bcf	3979,3,c	;volatile
 18640  002558  868B               	bsf	3979,3,c	;volatile
 18641  00255A  888B               	bsf	3979,4,c	;volatile
 18642                           
 18643                           ;libraries/lcd_highlevel.c: 614:     PORTA = posX1>>8; LATC3 = 0; LATC3 = 1;;
 18644  00255C  C013  FF80         	movff	LCD_DrawRect@posX1+1,3968	;volatile
 18645  002560  968B               	bcf	3979,3,c	;volatile
 18646  002562  868B               	bsf	3979,3,c	;volatile
 18647                           
 18648                           ;libraries/lcd_highlevel.c: 615:     PORTA = posX1; LATC3 = 0; LATC3 = 1;;
 18649  002564  C012  FF80         	movff	LCD_DrawRect@posX1,3968	;volatile
 18650  002568  968B               	bcf	3979,3,c	;volatile
 18651  00256A  868B               	bsf	3979,3,c	;volatile
 18652                           
 18653                           ;libraries/lcd_highlevel.c: 616:     PORTA = posX2>>8; LATC3 = 0; LATC3 = 1;;
 18654  00256C  C017  FF80         	movff	LCD_DrawRect@posX2+1,3968	;volatile
 18655  002570  968B               	bcf	3979,3,c	;volatile
 18656  002572  868B               	bsf	3979,3,c	;volatile
 18657                           
 18658                           ;libraries/lcd_highlevel.c: 617:     PORTA = posX2; LATC3 = 0; LATC3 = 1;;
 18659  002574  C016  FF80         	movff	LCD_DrawRect@posX2,3968	;volatile
 18660  002578  968B               	bcf	3979,3,c	;volatile
 18661  00257A  868B               	bsf	3979,3,c	;volatile
 18662                           
 18663                           ;libraries/lcd_highlevel.c: 619:     PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 18664  00257C  0E2B               	movlw	43
 18665  00257E  6E80               	movwf	128,c	;volatile
 18666  002580  988B               	bcf	3979,4,c	;volatile
 18667  002582  968B               	bcf	3979,3,c	;volatile
 18668  002584  868B               	bsf	3979,3,c	;volatile
 18669  002586  888B               	bsf	3979,4,c	;volatile
 18670                           
 18671                           ;libraries/lcd_highlevel.c: 620:     PORTA = posY1>>8; LATC3 = 0; LATC3 = 1;;
 18672  002588  C015  FF80         	movff	LCD_DrawRect@posY1+1,3968	;volatile
 18673  00258C  968B               	bcf	3979,3,c	;volatile
 18674  00258E  868B               	bsf	3979,3,c	;volatile
 18675                           
 18676                           ;libraries/lcd_highlevel.c: 621:     PORTA = posY1; LATC3 = 0; LATC3 = 1;;
 18677  002590  C014  FF80         	movff	LCD_DrawRect@posY1,3968	;volatile
 18678  002594  968B               	bcf	3979,3,c	;volatile
 18679  002596  868B               	bsf	3979,3,c	;volatile
 18680                           
 18681                           ;libraries/lcd_highlevel.c: 622:     PORTA = (320 -1) >> 8; LATC3 = 0; LATC3 = 1;;
 18682  002598  0E01               	movlw	1
 18683  00259A  6E80               	movwf	128,c	;volatile
 18684  00259C  968B               	bcf	3979,3,c	;volatile
 18685  00259E  868B               	bsf	3979,3,c	;volatile
 18686                           
 18687                           ;libraries/lcd_highlevel.c: 623:     PORTA = (320 -1); LATC3 = 0; LATC3 = 1;;
 18688  0025A0  0E3F               	movlw	63
 18689  0025A2  6E80               	movwf	128,c	;volatile
 18690  0025A4  968B               	bcf	3979,3,c	;volatile
 18691  0025A6  868B               	bsf	3979,3,c	;volatile
 18692                           
 18693                           ;libraries/lcd_highlevel.c: 625:     PORTA = 0x2C; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 18694  0025A8  0E2C               	movlw	44
 18695  0025AA  6E80               	movwf	128,c	;volatile
 18696  0025AC  988B               	bcf	3979,4,c	;volatile
 18697  0025AE  968B               	bcf	3979,3,c	;volatile
 18698  0025B0  868B               	bsf	3979,3,c	;volatile
 18699  0025B2  888B               	bsf	3979,4,c	;volatile
 18700                           
 18701                           ;libraries/lcd_highlevel.c: 626:     for(i=posX1;i<=posX2;i++)
 18702  0025B4  C012  F023         	movff	LCD_DrawRect@posX1,LCD_DrawRect@i
 18703  0025B8  C013  F024         	movff	LCD_DrawRect@posX1+1,LCD_DrawRect@i+1
 18704  0025BC  D017               	goto	l5404
 18705  0025BE                     l283:
 18706                           
 18707                           ;libraries/lcd_highlevel.c: 627:     {;libraries/lcd_highlevel.c: 628:       for(j=posY1
      +                          ;j<=posY2;j++)
 18708  0025BE  C014  F01D         	movff	LCD_DrawRect@posY1,LCD_DrawRect@j
 18709  0025C2  C015  F01E         	movff	LCD_DrawRect@posY1+1,LCD_DrawRect@j+1
 18710  0025C6  D00A               	goto	l5400
 18711  0025C8                     l285:
 18712                           
 18713                           ;libraries/lcd_highlevel.c: 629:       {;libraries/lcd_highlevel.c: 630:         PORTA =
      +                           colorH; LATC3 = 0; LATC3 = 1;;
 18714  0025C8  C021  FF80         	movff	LCD_DrawRect@colorH,3968	;volatile
 18715  0025CC  968B               	bcf	3979,3,c	;volatile
 18716  0025CE  868B               	bsf	3979,3,c	;volatile
 18717                           
 18718                           ;libraries/lcd_highlevel.c: 631:         PORTA = colorL; LATC3 = 0; LATC3 = 1;;
 18719  0025D0  C022  FF80         	movff	LCD_DrawRect@colorL,3968	;volatile
 18720  0025D4  968B               	bcf	3979,3,c	;volatile
 18721  0025D6  868B               	bsf	3979,3,c	;volatile
 18722                           
 18723                           ;libraries/lcd_highlevel.c: 632:       }
 18724  0025D8  4A1D               	infsnz	LCD_DrawRect@j^0,f,c
 18725  0025DA  2A1E               	incf	(LCD_DrawRect@j+1)^0,f,c
 18726  0025DC                     l5400:
 18727  0025DC  501D               	movf	LCD_DrawRect@j^0,w,c
 18728  0025DE  5C18               	subwf	LCD_DrawRect@posY2^0,w,c
 18729  0025E0  501E               	movf	(LCD_DrawRect@j+1)^0,w,c
 18730  0025E2  5819               	subwfb	(LCD_DrawRect@posY2+1)^0,w,c
 18731  0025E4  B0D8               	btfsc	status,0,c
 18732  0025E6  D7F0               	goto	l285
 18733                           
 18734                           ;libraries/lcd_highlevel.c: 633:     }
 18735  0025E8  4A23               	infsnz	LCD_DrawRect@i^0,f,c
 18736  0025EA  2A24               	incf	(LCD_DrawRect@i+1)^0,f,c
 18737  0025EC                     l5404:
 18738  0025EC  5023               	movf	LCD_DrawRect@i^0,w,c
 18739  0025EE  5C16               	subwf	LCD_DrawRect@posX2^0,w,c
 18740  0025F0  5024               	movf	(LCD_DrawRect@i+1)^0,w,c
 18741  0025F2  5817               	subwfb	(LCD_DrawRect@posX2+1)^0,w,c
 18742  0025F4  A0D8               	btfss	status,0,c
 18743  0025F6  0012               	return	
 18744  0025F8  D7E2               	goto	l283
 18745  0025FA                     l5406:
 18746                           
 18747                           ;libraries/lcd_highlevel.c: 637:   {;libraries/lcd_highlevel.c: 639:     PORTA = 0x2A; L
      +                          ATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 = 1;;
 18748  0025FA  0E2A               	movlw	42
 18749  0025FC  6E80               	movwf	128,c	;volatile
 18750  0025FE  988B               	bcf	3979,4,c	;volatile
 18751  002600  968B               	bcf	3979,3,c	;volatile
 18752  002602  868B               	bsf	3979,3,c	;volatile
 18753  002604  888B               	bsf	3979,4,c	;volatile
 18754                           
 18755                           ;libraries/lcd_highlevel.c: 640:     PORTA = posX1>>8; LATC3 = 0; LATC3 = 1;;
 18756  002606  C013  FF80         	movff	LCD_DrawRect@posX1+1,3968	;volatile
 18757  00260A  968B               	bcf	3979,3,c	;volatile
 18758  00260C  868B               	bsf	3979,3,c	;volatile
 18759                           
 18760                           ;libraries/lcd_highlevel.c: 641:     PORTA = posX1; LATC3 = 0; LATC3 = 1;;
 18761  00260E  C012  FF80         	movff	LCD_DrawRect@posX1,3968	;volatile
 18762  002612  968B               	bcf	3979,3,c	;volatile
 18763  002614  868B               	bsf	3979,3,c	;volatile
 18764                           
 18765                           ;libraries/lcd_highlevel.c: 642:     PORTA = posX2>>8; LATC3 = 0; LATC3 = 1;;
 18766  002616  C017  FF80         	movff	LCD_DrawRect@posX2+1,3968	;volatile
 18767  00261A  968B               	bcf	3979,3,c	;volatile
 18768  00261C  868B               	bsf	3979,3,c	;volatile
 18769                           
 18770                           ;libraries/lcd_highlevel.c: 643:     PORTA = posX2; LATC3 = 0; LATC3 = 1;;
 18771  00261E  C016  FF80         	movff	LCD_DrawRect@posX2,3968	;volatile
 18772  002622  968B               	bcf	3979,3,c	;volatile
 18773  002624  868B               	bsf	3979,3,c	;volatile
 18774                           
 18775                           ;libraries/lcd_highlevel.c: 645:     PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 18776  002626  0E2B               	movlw	43
 18777  002628  6E80               	movwf	128,c	;volatile
 18778  00262A  988B               	bcf	3979,4,c	;volatile
 18779  00262C  968B               	bcf	3979,3,c	;volatile
 18780  00262E  868B               	bsf	3979,3,c	;volatile
 18781  002630  888B               	bsf	3979,4,c	;volatile
 18782                           
 18783                           ;libraries/lcd_highlevel.c: 646:     PORTA = posY1>>8; LATC3 = 0; LATC3 = 1;;
 18784  002632  C015  FF80         	movff	LCD_DrawRect@posY1+1,3968	;volatile
 18785  002636  968B               	bcf	3979,3,c	;volatile
 18786  002638  868B               	bsf	3979,3,c	;volatile
 18787                           
 18788                           ;libraries/lcd_highlevel.c: 647:     PORTA = posY1; LATC3 = 0; LATC3 = 1;;
 18789  00263A  C014  FF80         	movff	LCD_DrawRect@posY1,3968	;volatile
 18790  00263E  968B               	bcf	3979,3,c	;volatile
 18791  002640  868B               	bsf	3979,3,c	;volatile
 18792                           
 18793                           ;libraries/lcd_highlevel.c: 648:     PORTA = (320 -1) >> 8; LATC3 = 0; LATC3 = 1;;
 18794  002642  0E01               	movlw	1
 18795  002644  6E80               	movwf	128,c	;volatile
 18796  002646  968B               	bcf	3979,3,c	;volatile
 18797  002648  868B               	bsf	3979,3,c	;volatile
 18798                           
 18799                           ;libraries/lcd_highlevel.c: 649:     PORTA = (320 -1); LATC3 = 0; LATC3 = 1;;
 18800  00264A  0E3F               	movlw	63
 18801  00264C  6E80               	movwf	128,c	;volatile
 18802  00264E  968B               	bcf	3979,3,c	;volatile
 18803  002650  868B               	bsf	3979,3,c	;volatile
 18804                           
 18805                           ;libraries/lcd_highlevel.c: 651:     PORTA = 0x2C; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 18806  002652  0E2C               	movlw	44
 18807  002654  6E80               	movwf	128,c	;volatile
 18808  002656  988B               	bcf	3979,4,c	;volatile
 18809  002658  968B               	bcf	3979,3,c	;volatile
 18810  00265A  868B               	bsf	3979,3,c	;volatile
 18811  00265C  888B               	bsf	3979,4,c	;volatile
 18812                           
 18813                           ;libraries/lcd_highlevel.c: 653:     for(i=posX1;i<=posX2;i++)
 18814  00265E  C012  F023         	movff	LCD_DrawRect@posX1,LCD_DrawRect@i
 18815  002662  C013  F024         	movff	LCD_DrawRect@posX1+1,LCD_DrawRect@i+1
 18816  002666  D00A               	goto	l5480
 18817  002668                     l290:
 18818                           
 18819                           ;libraries/lcd_highlevel.c: 654:     {;libraries/lcd_highlevel.c: 655:       PORTA = col
      +                          orH; LATC3 = 0; LATC3 = 1;;
 18820  002668  C021  FF80         	movff	LCD_DrawRect@colorH,3968	;volatile
 18821  00266C  968B               	bcf	3979,3,c	;volatile
 18822  00266E  868B               	bsf	3979,3,c	;volatile
 18823                           
 18824                           ;libraries/lcd_highlevel.c: 656:       PORTA = colorL; LATC3 = 0; LATC3 = 1;;
 18825  002670  C022  FF80         	movff	LCD_DrawRect@colorL,3968	;volatile
 18826  002674  968B               	bcf	3979,3,c	;volatile
 18827  002676  868B               	bsf	3979,3,c	;volatile
 18828                           
 18829                           ;libraries/lcd_highlevel.c: 657:     }
 18830  002678  4A23               	infsnz	LCD_DrawRect@i^0,f,c
 18831  00267A  2A24               	incf	(LCD_DrawRect@i+1)^0,f,c
 18832  00267C                     l5480:
 18833  00267C  5023               	movf	LCD_DrawRect@i^0,w,c
 18834  00267E  5C16               	subwf	LCD_DrawRect@posX2^0,w,c
 18835  002680  5024               	movf	(LCD_DrawRect@i+1)^0,w,c
 18836  002682  5817               	subwfb	(LCD_DrawRect@posX2+1)^0,w,c
 18837  002684  B0D8               	btfsc	status,0,c
 18838  002686  D7F0               	goto	l290
 18839                           
 18840                           ;libraries/lcd_highlevel.c: 659:     PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 18841  002688  0E2B               	movlw	43
 18842  00268A  6E80               	movwf	128,c	;volatile
 18843  00268C  988B               	bcf	3979,4,c	;volatile
 18844  00268E  968B               	bcf	3979,3,c	;volatile
 18845  002690  868B               	bsf	3979,3,c	;volatile
 18846  002692  888B               	bsf	3979,4,c	;volatile
 18847                           
 18848                           ;libraries/lcd_highlevel.c: 660:     PORTA = posY2>>8; LATC3 = 0; LATC3 = 1;;
 18849  002694  C019  FF80         	movff	LCD_DrawRect@posY2+1,3968	;volatile
 18850  002698  968B               	bcf	3979,3,c	;volatile
 18851  00269A  868B               	bsf	3979,3,c	;volatile
 18852                           
 18853                           ;libraries/lcd_highlevel.c: 661:     PORTA = posY2; LATC3 = 0; LATC3 = 1;;
 18854  00269C  C018  FF80         	movff	LCD_DrawRect@posY2,3968	;volatile
 18855  0026A0  968B               	bcf	3979,3,c	;volatile
 18856  0026A2  868B               	bsf	3979,3,c	;volatile
 18857                           
 18858                           ;libraries/lcd_highlevel.c: 662:     PORTA = 0x2C; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 18859  0026A4  0E2C               	movlw	44
 18860  0026A6  6E80               	movwf	128,c	;volatile
 18861  0026A8  988B               	bcf	3979,4,c	;volatile
 18862  0026AA  968B               	bcf	3979,3,c	;volatile
 18863  0026AC  868B               	bsf	3979,3,c	;volatile
 18864  0026AE  888B               	bsf	3979,4,c	;volatile
 18865                           
 18866                           ;libraries/lcd_highlevel.c: 663:     for(i=posX1;i<=posX2;i++)
 18867  0026B0  C012  F023         	movff	LCD_DrawRect@posX1,LCD_DrawRect@i
 18868  0026B4  C013  F024         	movff	LCD_DrawRect@posX1+1,LCD_DrawRect@i+1
 18869  0026B8  D00A               	goto	l5516
 18870  0026BA                     l293:
 18871                           
 18872                           ;libraries/lcd_highlevel.c: 664:     {;libraries/lcd_highlevel.c: 665:       PORTA = col
      +                          orH; LATC3 = 0; LATC3 = 1;;
 18873  0026BA  C021  FF80         	movff	LCD_DrawRect@colorH,3968	;volatile
 18874  0026BE  968B               	bcf	3979,3,c	;volatile
 18875  0026C0  868B               	bsf	3979,3,c	;volatile
 18876                           
 18877                           ;libraries/lcd_highlevel.c: 666:       PORTA = colorL; LATC3 = 0; LATC3 = 1;;
 18878  0026C2  C022  FF80         	movff	LCD_DrawRect@colorL,3968	;volatile
 18879  0026C6  968B               	bcf	3979,3,c	;volatile
 18880  0026C8  868B               	bsf	3979,3,c	;volatile
 18881                           
 18882                           ;libraries/lcd_highlevel.c: 667:     }
 18883  0026CA  4A23               	infsnz	LCD_DrawRect@i^0,f,c
 18884  0026CC  2A24               	incf	(LCD_DrawRect@i+1)^0,f,c
 18885  0026CE                     l5516:
 18886  0026CE  5023               	movf	LCD_DrawRect@i^0,w,c
 18887  0026D0  5C16               	subwf	LCD_DrawRect@posX2^0,w,c
 18888  0026D2  5024               	movf	(LCD_DrawRect@i+1)^0,w,c
 18889  0026D4  5817               	subwfb	(LCD_DrawRect@posX2+1)^0,w,c
 18890  0026D6  B0D8               	btfsc	status,0,c
 18891  0026D8  D7F0               	goto	l293
 18892                           
 18893                           ;libraries/lcd_highlevel.c: 669:     PORTA = 0x2A; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 18894  0026DA  0E2A               	movlw	42
 18895  0026DC  6E80               	movwf	128,c	;volatile
 18896  0026DE  988B               	bcf	3979,4,c	;volatile
 18897  0026E0  968B               	bcf	3979,3,c	;volatile
 18898  0026E2  868B               	bsf	3979,3,c	;volatile
 18899  0026E4  888B               	bsf	3979,4,c	;volatile
 18900                           
 18901                           ;libraries/lcd_highlevel.c: 670:     PORTA = posX1>>8; LATC3 = 0; LATC3 = 1;;
 18902  0026E6  C013  FF80         	movff	LCD_DrawRect@posX1+1,3968	;volatile
 18903  0026EA  968B               	bcf	3979,3,c	;volatile
 18904  0026EC  868B               	bsf	3979,3,c	;volatile
 18905                           
 18906                           ;libraries/lcd_highlevel.c: 671:     PORTA = posX1; LATC3 = 0; LATC3 = 1;;
 18907  0026EE  C012  FF80         	movff	LCD_DrawRect@posX1,3968	;volatile
 18908  0026F2  968B               	bcf	3979,3,c	;volatile
 18909  0026F4  868B               	bsf	3979,3,c	;volatile
 18910                           
 18911                           ;libraries/lcd_highlevel.c: 672:     PORTA = posX1>>8; LATC3 = 0; LATC3 = 1;;
 18912  0026F6  C013  FF80         	movff	LCD_DrawRect@posX1+1,3968	;volatile
 18913  0026FA  968B               	bcf	3979,3,c	;volatile
 18914  0026FC  868B               	bsf	3979,3,c	;volatile
 18915                           
 18916                           ;libraries/lcd_highlevel.c: 673:     PORTA = posX1; LATC3 = 0; LATC3 = 1;;
 18917  0026FE  C012  FF80         	movff	LCD_DrawRect@posX1,3968	;volatile
 18918  002702  968B               	bcf	3979,3,c	;volatile
 18919  002704  868B               	bsf	3979,3,c	;volatile
 18920                           
 18921                           ;libraries/lcd_highlevel.c: 675:     PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 18922  002706  0E2B               	movlw	43
 18923  002708  6E80               	movwf	128,c	;volatile
 18924  00270A  988B               	bcf	3979,4,c	;volatile
 18925  00270C  968B               	bcf	3979,3,c	;volatile
 18926  00270E  868B               	bsf	3979,3,c	;volatile
 18927  002710  888B               	bsf	3979,4,c	;volatile
 18928                           
 18929                           ;libraries/lcd_highlevel.c: 676:     PORTA = posY1>>8; LATC3 = 0; LATC3 = 1;;
 18930  002712  C015  FF80         	movff	LCD_DrawRect@posY1+1,3968	;volatile
 18931  002716  968B               	bcf	3979,3,c	;volatile
 18932  002718  868B               	bsf	3979,3,c	;volatile
 18933                           
 18934                           ;libraries/lcd_highlevel.c: 677:     PORTA = posY1; LATC3 = 0; LATC3 = 1;;
 18935  00271A  C014  FF80         	movff	LCD_DrawRect@posY1,3968	;volatile
 18936  00271E  968B               	bcf	3979,3,c	;volatile
 18937  002720  868B               	bsf	3979,3,c	;volatile
 18938                           
 18939                           ;libraries/lcd_highlevel.c: 678:     PORTA = (320 -1) >> 8; LATC3 = 0; LATC3 = 1;;
 18940  002722  0E01               	movlw	1
 18941  002724  6E80               	movwf	128,c	;volatile
 18942  002726  968B               	bcf	3979,3,c	;volatile
 18943  002728  868B               	bsf	3979,3,c	;volatile
 18944                           
 18945                           ;libraries/lcd_highlevel.c: 679:     PORTA = (320 -1); LATC3 = 0; LATC3 = 1;;
 18946  00272A  0E3F               	movlw	63
 18947  00272C  6E80               	movwf	128,c	;volatile
 18948  00272E  968B               	bcf	3979,3,c	;volatile
 18949  002730  868B               	bsf	3979,3,c	;volatile
 18950                           
 18951                           ;libraries/lcd_highlevel.c: 680:     PORTA = 0x2C; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 18952  002732  0E2C               	movlw	44
 18953  002734  6E80               	movwf	128,c	;volatile
 18954  002736  988B               	bcf	3979,4,c	;volatile
 18955  002738  968B               	bcf	3979,3,c	;volatile
 18956  00273A  868B               	bsf	3979,3,c	;volatile
 18957  00273C  888B               	bsf	3979,4,c	;volatile
 18958                           
 18959                           ;libraries/lcd_highlevel.c: 681:     for(i=posY1;i<=posY2;i++)
 18960  00273E  C014  F023         	movff	LCD_DrawRect@posY1,LCD_DrawRect@i
 18961  002742  C015  F024         	movff	LCD_DrawRect@posY1+1,LCD_DrawRect@i+1
 18962  002746  D00A               	goto	l5592
 18963  002748                     l296:
 18964                           
 18965                           ;libraries/lcd_highlevel.c: 682:     {;libraries/lcd_highlevel.c: 683:       PORTA = col
      +                          orH; LATC3 = 0; LATC3 = 1;;
 18966  002748  C021  FF80         	movff	LCD_DrawRect@colorH,3968	;volatile
 18967  00274C  968B               	bcf	3979,3,c	;volatile
 18968  00274E  868B               	bsf	3979,3,c	;volatile
 18969                           
 18970                           ;libraries/lcd_highlevel.c: 684:       PORTA = colorL; LATC3 = 0; LATC3 = 1;;
 18971  002750  C022  FF80         	movff	LCD_DrawRect@colorL,3968	;volatile
 18972  002754  968B               	bcf	3979,3,c	;volatile
 18973  002756  868B               	bsf	3979,3,c	;volatile
 18974                           
 18975                           ;libraries/lcd_highlevel.c: 685:     }
 18976  002758  4A23               	infsnz	LCD_DrawRect@i^0,f,c
 18977  00275A  2A24               	incf	(LCD_DrawRect@i+1)^0,f,c
 18978  00275C                     l5592:
 18979  00275C  5023               	movf	LCD_DrawRect@i^0,w,c
 18980  00275E  5C18               	subwf	LCD_DrawRect@posY2^0,w,c
 18981  002760  5024               	movf	(LCD_DrawRect@i+1)^0,w,c
 18982  002762  5819               	subwfb	(LCD_DrawRect@posY2+1)^0,w,c
 18983  002764  B0D8               	btfsc	status,0,c
 18984  002766  D7F0               	goto	l296
 18985                           
 18986                           ;libraries/lcd_highlevel.c: 687:     PORTA = 0x2A; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 18987  002768  0E2A               	movlw	42
 18988  00276A  6E80               	movwf	128,c	;volatile
 18989  00276C  988B               	bcf	3979,4,c	;volatile
 18990  00276E  968B               	bcf	3979,3,c	;volatile
 18991  002770  868B               	bsf	3979,3,c	;volatile
 18992  002772  888B               	bsf	3979,4,c	;volatile
 18993                           
 18994                           ;libraries/lcd_highlevel.c: 688:     PORTA = posX2>>8; LATC3 = 0; LATC3 = 1;;
 18995  002774  C017  FF80         	movff	LCD_DrawRect@posX2+1,3968	;volatile
 18996  002778  968B               	bcf	3979,3,c	;volatile
 18997  00277A  868B               	bsf	3979,3,c	;volatile
 18998                           
 18999                           ;libraries/lcd_highlevel.c: 689:     PORTA = posX2; LATC3 = 0; LATC3 = 1;;
 19000  00277C  C016  FF80         	movff	LCD_DrawRect@posX2,3968	;volatile
 19001  002780  968B               	bcf	3979,3,c	;volatile
 19002  002782  868B               	bsf	3979,3,c	;volatile
 19003                           
 19004                           ;libraries/lcd_highlevel.c: 690:     PORTA = posX2>>8; LATC3 = 0; LATC3 = 1;;
 19005  002784  C017  FF80         	movff	LCD_DrawRect@posX2+1,3968	;volatile
 19006  002788  968B               	bcf	3979,3,c	;volatile
 19007  00278A  868B               	bsf	3979,3,c	;volatile
 19008                           
 19009                           ;libraries/lcd_highlevel.c: 691:     PORTA = posX2; LATC3 = 0; LATC3 = 1;;
 19010  00278C  C016  FF80         	movff	LCD_DrawRect@posX2,3968	;volatile
 19011  002790  968B               	bcf	3979,3,c	;volatile
 19012  002792  868B               	bsf	3979,3,c	;volatile
 19013                           
 19014                           ;libraries/lcd_highlevel.c: 692:     PORTA = 0x2C; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 19015  002794  0E2C               	movlw	44
 19016  002796  6E80               	movwf	128,c	;volatile
 19017  002798  988B               	bcf	3979,4,c	;volatile
 19018  00279A  968B               	bcf	3979,3,c	;volatile
 19019  00279C  868B               	bsf	3979,3,c	;volatile
 19020  00279E  888B               	bsf	3979,4,c	;volatile
 19021                           
 19022                           ;libraries/lcd_highlevel.c: 693:     for(i=posY1;i<=posY2;i++)
 19023  0027A0  C014  F023         	movff	LCD_DrawRect@posY1,LCD_DrawRect@i
 19024  0027A4  C015  F024         	movff	LCD_DrawRect@posY1+1,LCD_DrawRect@i+1
 19025  0027A8  D00A               	goto	l5640
 19026  0027AA                     l299:
 19027                           
 19028                           ;libraries/lcd_highlevel.c: 694:     {;libraries/lcd_highlevel.c: 695:       PORTA = col
      +                          orH; LATC3 = 0; LATC3 = 1;;
 19029  0027AA  C021  FF80         	movff	LCD_DrawRect@colorH,3968	;volatile
 19030  0027AE  968B               	bcf	3979,3,c	;volatile
 19031  0027B0  868B               	bsf	3979,3,c	;volatile
 19032                           
 19033                           ;libraries/lcd_highlevel.c: 696:       PORTA = colorL; LATC3 = 0; LATC3 = 1;;
 19034  0027B2  C022  FF80         	movff	LCD_DrawRect@colorL,3968	;volatile
 19035  0027B6  968B               	bcf	3979,3,c	;volatile
 19036  0027B8  868B               	bsf	3979,3,c	;volatile
 19037                           
 19038                           ;libraries/lcd_highlevel.c: 697:     }
 19039  0027BA  4A23               	infsnz	LCD_DrawRect@i^0,f,c
 19040  0027BC  2A24               	incf	(LCD_DrawRect@i+1)^0,f,c
 19041  0027BE                     l5640:
 19042  0027BE  5023               	movf	LCD_DrawRect@i^0,w,c
 19043  0027C0  5C18               	subwf	LCD_DrawRect@posY2^0,w,c
 19044  0027C2  5024               	movf	(LCD_DrawRect@i+1)^0,w,c
 19045  0027C4  5819               	subwfb	(LCD_DrawRect@posY2+1)^0,w,c
 19046  0027C6  A0D8               	btfss	status,0,c
 19047  0027C8  0012               	return	
 19048  0027CA  D7EF               	goto	l299
 19049  0027CC                     __end_of_LCD_DrawRect:
 19050                           	callstack 0
 19051                           
 19052 ;; *************** function _XF_popEvent *****************
 19053 ;; Defined at:
 19054 ;;		line 72 in file "xf/xf.c"
 19055 ;; Parameters:    Size  Location     Type
 19056 ;;  inISR           1    wreg     _Bool 
 19057 ;; Auto vars:     Size  Location     Type
 19058 ;;  inISR           1   24[COMRAM] _Bool 
 19059 ;;  ev              1   23[COMRAM] unsigned char 
 19060 ;; Return value:  Size  Location     Type
 19061 ;;                  1    wreg      unsigned char 
 19062 ;; Registers used:
 19063 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19064 ;; Tracked objects:
 19065 ;;		On entry : 0/0
 19066 ;;		On exit  : 0/0
 19067 ;;		Unchanged: 0/0
 19068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19069 ;;      Params:         0       0       0       0       0       0       0
 19070 ;;      Locals:         2       0       0       0       0       0       0
 19071 ;;      Temps:          0       0       0       0       0       0       0
 19072 ;;      Totals:         2       0       0       0       0       0       0
 19073 ;;Total ram usage:        2 bytes
 19074 ;; Hardware stack levels used: 1
 19075 ;; Hardware stack levels required when called: 5
 19076 ;; This function calls:
 19077 ;;		_ENTERCRITICAL
 19078 ;;		_LEAVECRITICAL
 19079 ;;		___awmod
 19080 ;; This function is called by:
 19081 ;;		_Factory_exec
 19082 ;; This function uses a non-reentrant model
 19083 ;;
 19084                           
 19085                           	psect	text81
 19086  0053AA                     __ptext81:
 19087                           	callstack 0
 19088  0053AA                     _XF_popEvent:
 19089                           	callstack 24
 19090                           
 19091                           ;incstack = 0
 19092                           ;XF_popEvent@inISR stored from wreg
 19093  0053AA  6E19               	movwf	XF_popEvent@inISR^0,c
 19094                           
 19095                           ;xf/xf.c: 76:     ENTERCRITICAL(inISR);
 19096  0053AC  5019               	movf	XF_popEvent@inISR^0,w,c
 19097  0053AE  EC62  F02C         	call	_ENTERCRITICAL
 19098                           
 19099                           ;xf/xf.c: 77:     if(theXF.in == theXF.out)
 19100  0053B2  0100               	movlb	0	; () banked
 19101  0053B4  51D5               	movf	(_theXF+37)& (0+255),w,b
 19102  0053B6  19D4               	xorwf	(_theXF+36)& (0+255),w,b
 19103  0053B8  A4D8               	btfss	status,2,c
 19104  0053BA  D005               	goto	l9648
 19105                           
 19106                           ; BSR set to: 0
 19107                           ;xf/xf.c: 78:     {;xf/xf.c: 79:       LEAVECRITICAL(inISR);
 19108  0053BC  5019               	movf	XF_popEvent@inISR^0,w,c
 19109  0053BE  EC5C  F02C         	call	_LEAVECRITICAL
 19110                           
 19111                           ;xf/xf.c: 80:       return ev;
 19112  0053C2  0E00               	movlw	0
 19113  0053C4  0012               	return	
 19114  0053C6                     l9648:
 19115                           
 19116                           ; BSR set to: 0
 19117                           ;xf/xf.c: 82:     ev = theXF.eventQueue[theXF.out];
 19118  0053C6  51D5               	movf	(_theXF+37)& (0+255),w,b
 19119  0053C8  0FC8               	addlw	low (_theXF+24)
 19120  0053CA  6ED9               	movwf	fsr2l,c
 19121  0053CC  6ADA               	clrf	fsr2h,c
 19122  0053CE  50DF               	movf	indf2,w,c
 19123  0053D0  6E18               	movwf	XF_popEvent@ev^0,c
 19124                           
 19125                           ; BSR set to: 0
 19126                           ;xf/xf.c: 83:     theXF.out = (theXF.out + 1)%(uint8_t)sizeof(theXF.eventQueue);
 19127  0053D2  0E01               	movlw	1
 19128  0053D4  25D5               	addwf	(_theXF+37)& (0+255),w,b
 19129  0053D6  6E12               	movwf	___awmod@dividend^0,c
 19130  0053D8  6A13               	clrf	(___awmod@dividend+1)^0,c
 19131  0053DA  0E00               	movlw	0
 19132  0053DC  2213               	addwfc	(___awmod@dividend+1)^0,f,c
 19133  0053DE  0E00               	movlw	0
 19134  0053E0  6E15               	movwf	(___awmod@divisor+1)^0,c
 19135  0053E2  0E0C               	movlw	12
 19136  0053E4  6E14               	movwf	___awmod@divisor^0,c
 19137  0053E6  EC61  F028         	call	___awmod	;wreg free
 19138  0053EA  5012               	movf	?___awmod^0,w,c
 19139  0053EC  6FD5               	movwf	(_theXF+37)& (0+255),b
 19140                           
 19141                           ; BSR set to: 0
 19142                           ;xf/xf.c: 84:     LEAVECRITICAL(inISR);
 19143  0053EE  5019               	movf	XF_popEvent@inISR^0,w,c
 19144  0053F0  EC5C  F02C         	call	_LEAVECRITICAL
 19145                           
 19146                           ;xf/xf.c: 85:     return ev;
 19147  0053F4  5018               	movf	XF_popEvent@ev^0,w,c
 19148  0053F6  0012               	return		;funcret
 19149  0053F8                     __end_of_XF_popEvent:
 19150                           	callstack 0
 19151                           
 19152 ;; *************** function ___awmod *****************
 19153 ;; Defined at:
 19154 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awmod.c"
 19155 ;; Parameters:    Size  Location     Type
 19156 ;;  dividend        2   17[COMRAM] int 
 19157 ;;  divisor         2   19[COMRAM] int 
 19158 ;; Auto vars:     Size  Location     Type
 19159 ;;  sign            1   22[COMRAM] unsigned char 
 19160 ;;  counter         1   21[COMRAM] unsigned char 
 19161 ;; Return value:  Size  Location     Type
 19162 ;;                  2   17[COMRAM] int 
 19163 ;; Registers used:
 19164 ;;		wreg, status,2, status,0
 19165 ;; Tracked objects:
 19166 ;;		On entry : 3F/0
 19167 ;;		On exit  : 3F/0
 19168 ;;		Unchanged: 3F/0
 19169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19170 ;;      Params:         4       0       0       0       0       0       0
 19171 ;;      Locals:         2       0       0       0       0       0       0
 19172 ;;      Temps:          0       0       0       0       0       0       0
 19173 ;;      Totals:         6       0       0       0       0       0       0
 19174 ;;Total ram usage:        6 bytes
 19175 ;; Hardware stack levels used: 1
 19176 ;; Hardware stack levels required when called: 4
 19177 ;; This function calls:
 19178 ;;		Nothing
 19179 ;; This function is called by:
 19180 ;;		_XF_pushEvent
 19181 ;;		_XF_popEvent
 19182 ;; This function uses a non-reentrant model
 19183 ;;
 19184                           
 19185                           	psect	text82
 19186  0050C2                     __ptext82:
 19187                           	callstack 0
 19188  0050C2                     ___awmod:
 19189                           	callstack 20
 19190                           
 19191                           ; BSR set to: 0
 19192                           
 19193                           ;incstack = 0
 19194  0050C2  0E00               	movlw	0
 19195  0050C4  6E17               	movwf	___awmod@sign^0,c
 19196                           
 19197                           ; BSR set to: 0
 19198  0050C6  AE13               	btfss	(___awmod@dividend+1)^0,7,c
 19199  0050C8  D006               	goto	l5834
 19200                           
 19201                           ; BSR set to: 0
 19202  0050CA  6C12               	negf	___awmod@dividend^0,c
 19203  0050CC  1E13               	comf	(___awmod@dividend+1)^0,f,c
 19204  0050CE  B0D8               	btfsc	status,0,c
 19205  0050D0  2A13               	incf	(___awmod@dividend+1)^0,f,c
 19206                           
 19207                           ; BSR set to: 0
 19208  0050D2  0E01               	movlw	1
 19209  0050D4  6E17               	movwf	___awmod@sign^0,c
 19210  0050D6                     l5834:
 19211                           
 19212                           ; BSR set to: 0
 19213  0050D6  AE15               	btfss	(___awmod@divisor+1)^0,7,c
 19214  0050D8  D004               	goto	l5838
 19215                           
 19216                           ; BSR set to: 0
 19217  0050DA  6C14               	negf	___awmod@divisor^0,c
 19218  0050DC  1E15               	comf	(___awmod@divisor+1)^0,f,c
 19219  0050DE  B0D8               	btfsc	status,0,c
 19220  0050E0  2A15               	incf	(___awmod@divisor+1)^0,f,c
 19221  0050E2                     l5838:
 19222                           
 19223                           ; BSR set to: 0
 19224  0050E2  5014               	movf	___awmod@divisor^0,w,c
 19225  0050E4  1015               	iorwf	(___awmod@divisor+1)^0,w,c
 19226  0050E6  B4D8               	btfsc	status,2,c
 19227  0050E8  D018               	goto	l5854
 19228                           
 19229                           ; BSR set to: 0
 19230  0050EA  0E01               	movlw	1
 19231  0050EC  6E16               	movwf	___awmod@counter^0,c
 19232  0050EE  D004               	goto	l5844
 19233  0050F0                     l5842:
 19234                           
 19235                           ; BSR set to: 0
 19236  0050F0  90D8               	bcf	status,0,c
 19237  0050F2  3614               	rlcf	___awmod@divisor^0,f,c
 19238  0050F4  3615               	rlcf	(___awmod@divisor+1)^0,f,c
 19239  0050F6  2A16               	incf	___awmod@counter^0,f,c
 19240  0050F8                     l5844:
 19241                           
 19242                           ; BSR set to: 0
 19243  0050F8  AE15               	btfss	(___awmod@divisor+1)^0,7,c
 19244  0050FA  D7FA               	goto	l5842
 19245  0050FC                     u3480:
 19246                           
 19247                           ; BSR set to: 0
 19248  0050FC  5014               	movf	___awmod@divisor^0,w,c
 19249  0050FE  5C12               	subwf	___awmod@dividend^0,w,c
 19250  005100  5015               	movf	(___awmod@divisor+1)^0,w,c
 19251  005102  5813               	subwfb	(___awmod@dividend+1)^0,w,c
 19252  005104  A0D8               	btfss	status,0,c
 19253  005106  D004               	goto	l5850
 19254                           
 19255                           ; BSR set to: 0
 19256  005108  5014               	movf	___awmod@divisor^0,w,c
 19257  00510A  5E12               	subwf	___awmod@dividend^0,f,c
 19258  00510C  5015               	movf	(___awmod@divisor+1)^0,w,c
 19259  00510E  5A13               	subwfb	(___awmod@dividend+1)^0,f,c
 19260  005110                     l5850:
 19261                           
 19262                           ; BSR set to: 0
 19263  005110  90D8               	bcf	status,0,c
 19264  005112  3215               	rrcf	(___awmod@divisor+1)^0,f,c
 19265  005114  3214               	rrcf	___awmod@divisor^0,f,c
 19266                           
 19267                           ; BSR set to: 0
 19268  005116  2E16               	decfsz	___awmod@counter^0,f,c
 19269  005118  D7F1               	goto	u3480
 19270  00511A                     l5854:
 19271                           
 19272                           ; BSR set to: 0
 19273  00511A  5017               	movf	___awmod@sign^0,w,c
 19274  00511C  B4D8               	btfsc	status,2,c
 19275  00511E  D004               	goto	l5858
 19276                           
 19277                           ; BSR set to: 0
 19278  005120  6C12               	negf	___awmod@dividend^0,c
 19279  005122  1E13               	comf	(___awmod@dividend+1)^0,f,c
 19280  005124  B0D8               	btfsc	status,0,c
 19281  005126  2A13               	incf	(___awmod@dividend+1)^0,f,c
 19282  005128                     l5858:
 19283                           
 19284                           ; BSR set to: 0
 19285  005128  C012  F012         	movff	___awmod@dividend,?___awmod
 19286  00512C  C013  F013         	movff	___awmod@dividend+1,?___awmod+1
 19287                           
 19288                           ; BSR set to: 0
 19289  005130  0012               	return		;funcret
 19290  005132                     __end_of___awmod:
 19291                           	callstack 0
 19292                           
 19293 ;; *************** function _LEAVECRITICAL *****************
 19294 ;; Defined at:
 19295 ;;		line 186 in file "xf/xf.c"
 19296 ;; Parameters:    Size  Location     Type
 19297 ;;  inISR           1    wreg     _Bool 
 19298 ;; Auto vars:     Size  Location     Type
 19299 ;;  inISR           1   17[COMRAM] _Bool 
 19300 ;; Return value:  Size  Location     Type
 19301 ;;                  1    wreg      void 
 19302 ;; Registers used:
 19303 ;;		wreg, status,2
 19304 ;; Tracked objects:
 19305 ;;		On entry : 0/0
 19306 ;;		On exit  : 0/0
 19307 ;;		Unchanged: 0/0
 19308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19309 ;;      Params:         0       0       0       0       0       0       0
 19310 ;;      Locals:         1       0       0       0       0       0       0
 19311 ;;      Temps:          0       0       0       0       0       0       0
 19312 ;;      Totals:         1       0       0       0       0       0       0
 19313 ;;Total ram usage:        1 bytes
 19314 ;; Hardware stack levels used: 1
 19315 ;; Hardware stack levels required when called: 4
 19316 ;; This function calls:
 19317 ;;		Nothing
 19318 ;; This function is called by:
 19319 ;;		_XF_pushEvent
 19320 ;;		_XF_popEvent
 19321 ;;		_XF_scheduleTimer
 19322 ;;		_XF_unscheduleTimer
 19323 ;; This function uses a non-reentrant model
 19324 ;;
 19325                           
 19326                           	psect	text83
 19327  0058B8                     __ptext83:
 19328                           	callstack 0
 19329  0058B8                     _LEAVECRITICAL:
 19330                           	callstack 22
 19331                           
 19332                           ; BSR set to: 0
 19333                           ;incstack = 0
 19334                           ;LEAVECRITICAL@inISR stored from wreg
 19335  0058B8  6E12               	movwf	LEAVECRITICAL@inISR^0,c
 19336                           
 19337                           ;xf/xf.c: 186: static void LEAVECRITICAL(_Bool inISR);xf/xf.c: 187: {;xf/xf.c: 188:     
      +                          if (inISR == 0)
 19338  0058BA  5012               	movf	LEAVECRITICAL@inISR^0,w,c
 19339  0058BC  A4D8               	btfss	status,2,c
 19340  0058BE  0012               	return	
 19341                           
 19342                           ;xf/xf.c: 189:     {;xf/xf.c: 190:       GIE = 1;
 19343  0058C0  8EF2               	bsf	4082,7,c	;volatile
 19344  0058C2  0012               	return		;funcret
 19345  0058C4                     __end_of_LEAVECRITICAL:
 19346                           	callstack 0
 19347                           
 19348 ;; *************** function _ENTERCRITICAL *****************
 19349 ;; Defined at:
 19350 ;;		line 172 in file "xf/xf.c"
 19351 ;; Parameters:    Size  Location     Type
 19352 ;;  inISR           1    wreg     _Bool 
 19353 ;; Auto vars:     Size  Location     Type
 19354 ;;  inISR           1   17[COMRAM] _Bool 
 19355 ;; Return value:  Size  Location     Type
 19356 ;;                  1    wreg      void 
 19357 ;; Registers used:
 19358 ;;		wreg, status,2
 19359 ;; Tracked objects:
 19360 ;;		On entry : 0/0
 19361 ;;		On exit  : 0/0
 19362 ;;		Unchanged: 0/0
 19363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19364 ;;      Params:         0       0       0       0       0       0       0
 19365 ;;      Locals:         1       0       0       0       0       0       0
 19366 ;;      Temps:          0       0       0       0       0       0       0
 19367 ;;      Totals:         1       0       0       0       0       0       0
 19368 ;;Total ram usage:        1 bytes
 19369 ;; Hardware stack levels used: 1
 19370 ;; Hardware stack levels required when called: 4
 19371 ;; This function calls:
 19372 ;;		Nothing
 19373 ;; This function is called by:
 19374 ;;		_XF_pushEvent
 19375 ;;		_XF_popEvent
 19376 ;;		_XF_scheduleTimer
 19377 ;;		_XF_unscheduleTimer
 19378 ;; This function uses a non-reentrant model
 19379 ;;
 19380                           
 19381                           	psect	text84
 19382  0058C4                     __ptext84:
 19383                           	callstack 0
 19384  0058C4                     _ENTERCRITICAL:
 19385                           	callstack 22
 19386                           
 19387                           ;incstack = 0
 19388                           ;ENTERCRITICAL@inISR stored from wreg
 19389  0058C4  6E12               	movwf	ENTERCRITICAL@inISR^0,c
 19390                           
 19391                           ;xf/xf.c: 172: static void ENTERCRITICAL(_Bool inISR);xf/xf.c: 173: {;xf/xf.c: 174:     
      +                          if (inISR == 0)
 19392  0058C6  5012               	movf	ENTERCRITICAL@inISR^0,w,c
 19393  0058C8  A4D8               	btfss	status,2,c
 19394  0058CA  0012               	return	
 19395                           
 19396                           ;xf/xf.c: 175:     {;xf/xf.c: 176:       GIE = 0;
 19397  0058CC  9EF2               	bcf	4082,7,c	;volatile
 19398  0058CE  0012               	return		;funcret
 19399  0058D0                     __end_of_ENTERCRITICAL:
 19400                           	callstack 0
 19401                           
 19402 ;; *************** function _isr *****************
 19403 ;; Defined at:
 19404 ;;		line 23 in file "main.c"
 19405 ;; Parameters:    Size  Location     Type
 19406 ;;		None
 19407 ;; Auto vars:     Size  Location     Type
 19408 ;;		None
 19409 ;; Return value:  Size  Location     Type
 19410 ;;                  1    wreg      void 
 19411 ;; Registers used:
 19412 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19413 ;; Tracked objects:
 19414 ;;		On entry : 0/0
 19415 ;;		On exit  : 0/0
 19416 ;;		Unchanged: 0/0
 19417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19418 ;;      Params:         0       0       0       0       0       0       0
 19419 ;;      Locals:         0       0       0       0       0       0       0
 19420 ;;      Temps:          4       0       0       0       0       0       0
 19421 ;;      Totals:         4       0       0       0       0       0       0
 19422 ;;Total ram usage:        4 bytes
 19423 ;; Hardware stack levels used: 1
 19424 ;; Hardware stack levels required when called: 3
 19425 ;; This function calls:
 19426 ;;		_XF_decrementAndQueueTimers
 19427 ;;		i2_XF_pushEvent
 19428 ;; This function is called by:
 19429 ;;		Interrupt level 2
 19430 ;; This function uses a non-reentrant model
 19431 ;;
 19432                           
 19433                           	psect	intcode
 19434  000008                     __pintcode:
 19435                           	callstack 0
 19436  000008                     _isr:
 19437                           	callstack 14
 19438                           
 19439                           ;incstack = 0
 19440  000008  824E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19441  00000A  CFD9 F00E          	movff	fsr2l,??_isr
 19442  00000E  CFDA F00F          	movff	fsr2h,??_isr+1
 19443  000012  CFF3 F010          	movff	prodl,??_isr+2
 19444  000016  CFF4 F011          	movff	prodh,??_isr+3
 19445                           
 19446                           ;main.c: 25:     if((INT1IF==1)&&(INT1IE==1))
 19447  00001A  B0F0               	btfsc	4080,0,c	;volatile
 19448  00001C  A6F0               	btfss	4080,3,c	;volatile
 19449  00001E  D013               	goto	i2l7880
 19450                           
 19451                           ;main.c: 26:     {;main.c: 27:         if(INTEDG1==0)
 19452  000020  BAF1               	btfsc	4081,5,c	;volatile
 19453  000022  D008               	goto	i2l769
 19454                           
 19455                           ;main.c: 28:         {;main.c: 29:             INTEDG1=1;
 19456  000024  8AF1               	bsf	4081,5,c	;volatile
 19457                           
 19458                           ;main.c: 30:             INT1IF=0;
 19459  000026  90F0               	bcf	4080,0,c	;volatile
 19460                           
 19461                           ;main.c: 31:             XF_pushEvent(evPress,1);
 19462  000028  0E01               	movlw	1
 19463  00002A  6E07               	movwf	i2XF_pushEvent@inISR^0,c
 19464  00002C  0E01               	movlw	1
 19465  00002E  ECAC  F029         	call	i2_XF_pushEvent
 19466                           
 19467                           ;main.c: 33:         }
 19468  000032  D009               	goto	i2l7880
 19469  000034                     i2l769:
 19470  000034  AAF1               	btfss	4081,5,c	;volatile
 19471  000036  D007               	goto	i2l7880
 19472                           
 19473                           ;main.c: 35:         {;main.c: 36:             INTEDG1=0;
 19474  000038  9AF1               	bcf	4081,5,c	;volatile
 19475                           
 19476                           ;main.c: 37:             INT1IF=0;
 19477  00003A  90F0               	bcf	4080,0,c	;volatile
 19478                           
 19479                           ;main.c: 38:             XF_pushEvent(evRelease,1);
 19480  00003C  0E01               	movlw	1
 19481  00003E  6E07               	movwf	i2XF_pushEvent@inISR^0,c
 19482  000040  0E02               	movlw	2
 19483  000042  ECAC  F029         	call	i2_XF_pushEvent
 19484  000046                     i2l7880:
 19485                           
 19486                           ;main.c: 41:     if((TMR0IF==1)&&(TMR0IE==1))
 19487  000046  B4F2               	btfsc	4082,2,c	;volatile
 19488  000048  AAF2               	btfss	4082,5,c	;volatile
 19489  00004A  D007               	goto	i2l773
 19490                           
 19491                           ;main.c: 42:     {;main.c: 43:         XF_decrementAndQueueTimers();
 19492  00004C  EC11  F026         	call	_XF_decrementAndQueueTimers	;wreg free
 19493                           
 19494                           ;main.c: 44:         TMR0H=0xFB;
 19495  000050  0EFB               	movlw	251
 19496  000052  6ED7               	movwf	215,c	;volatile
 19497                           
 19498                           ;main.c: 45:         TMR0L=0x1D;
 19499  000054  0E1D               	movlw	29
 19500  000056  6ED6               	movwf	214,c	;volatile
 19501                           
 19502                           ;main.c: 46:         TMR0IF=0;
 19503  000058  94F2               	bcf	4082,2,c	;volatile
 19504  00005A                     i2l773:
 19505  00005A  C011  FFF4         	movff	??_isr+3,prodh
 19506  00005E  C010  FFF3         	movff	??_isr+2,prodl
 19507  000062  C00F  FFDA         	movff	??_isr+1,fsr2h
 19508  000066  C00E  FFD9         	movff	??_isr,fsr2l
 19509  00006A  924E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19510  00006C  0011               	retfie		f
 19511  00006E                     __end_of_isr:
 19512                           	callstack 0
 19513                           
 19514 ;; *************** function _XF_decrementAndQueueTimers *****************
 19515 ;; Defined at:
 19516 ;;		line 139 in file "xf/xf.c"
 19517 ;; Parameters:    Size  Location     Type
 19518 ;;		None
 19519 ;; Auto vars:     Size  Location     Type
 19520 ;;  i               2   11[COMRAM] int 
 19521 ;; Return value:  Size  Location     Type
 19522 ;;                  1    wreg      void 
 19523 ;; Registers used:
 19524 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19525 ;; Tracked objects:
 19526 ;;		On entry : 0/0
 19527 ;;		On exit  : 0/0
 19528 ;;		Unchanged: 0/0
 19529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19530 ;;      Params:         0       0       0       0       0       0       0
 19531 ;;      Locals:         2       0       0       0       0       0       0
 19532 ;;      Temps:          2       0       0       0       0       0       0
 19533 ;;      Totals:         4       0       0       0       0       0       0
 19534 ;;Total ram usage:        4 bytes
 19535 ;; Hardware stack levels used: 1
 19536 ;; Hardware stack levels required when called: 2
 19537 ;; This function calls:
 19538 ;;		i2_XF_pushEvent
 19539 ;;		i2_XF_unscheduleTimer
 19540 ;; This function is called by:
 19541 ;;		_isr
 19542 ;; This function uses a non-reentrant model
 19543 ;;
 19544                           
 19545                           	psect	text86
 19546  004C22                     __ptext86:
 19547                           	callstack 0
 19548  004C22                     _XF_decrementAndQueueTimers:
 19549                           	callstack 14
 19550                           
 19551                           ;xf/xf.c: 141:     int i;;xf/xf.c: 142:     for (i=0; i<8; i++)
 19552                           
 19553                           ;incstack = 0
 19554  004C22  0E00               	movlw	0
 19555  004C24  6E0D               	movwf	(XF_decrementAndQueueTimers@i+1)^0,c
 19556  004C26  0E00               	movlw	0
 19557  004C28  6E0C               	movwf	XF_decrementAndQueueTimers@i^0,c
 19558  004C2A                     i2l7852:
 19559                           
 19560                           ;xf/xf.c: 143:     {;xf/xf.c: 144:         if (theXF.timerList[i].ev != NULLEVENT)
 19561  004C2A  500C               	movf	XF_decrementAndQueueTimers@i^0,w,c
 19562  004C2C  0D03               	mullw	3
 19563  004C2E  50F3               	movf	243,w,c
 19564  004C30  0FB2               	addlw	low (_theXF+2)
 19565  004C32  6ED9               	movwf	fsr2l,c
 19566  004C34  6ADA               	clrf	fsr2h,c
 19567  004C36  50DF               	movf	indf2,w,c
 19568  004C38  B4D8               	btfsc	status,2,c
 19569  004C3A  D031               	goto	i2l7862
 19570                           
 19571                           ;xf/xf.c: 145:         {;xf/xf.c: 147:             theXF.timerList[i].tm-=1;
 19572  004C3C  500C               	movf	XF_decrementAndQueueTimers@i^0,w,c
 19573  004C3E  0D03               	mullw	3
 19574  004C40  50F3               	movf	243,w,c
 19575  004C42  0FB0               	addlw	low _theXF
 19576  004C44  6ED9               	movwf	fsr2l,c
 19577  004C46  6ADA               	clrf	fsr2h,c
 19578  004C48  06DE               	decf	postinc2,f,c
 19579  004C4A  0E00               	movlw	0
 19580  004C4C  5ADD               	subwfb	postdec2,f,c
 19581                           
 19582                           ;xf/xf.c: 148:             if (theXF.timerList[i].tm ==0)
 19583  004C4E  500C               	movf	XF_decrementAndQueueTimers@i^0,w,c
 19584  004C50  0D03               	mullw	3
 19585  004C52  50F3               	movf	243,w,c
 19586  004C54  0FB0               	addlw	low _theXF
 19587  004C56  6ED9               	movwf	fsr2l,c
 19588  004C58  6ADA               	clrf	fsr2h,c
 19589  004C5A  50DE               	movf	postinc2,w,c
 19590  004C5C  10DE               	iorwf	postinc2,w,c
 19591  004C5E  A4D8               	btfss	status,2,c
 19592  004C60  D01E               	goto	i2l7862
 19593                           
 19594                           ;xf/xf.c: 149:             {;xf/xf.c: 150:                 if(XF_pushEvent(theXF.timerLi
      +                          st[i].ev, 1) == 1)
 19595  004C62  0E01               	movlw	1
 19596  004C64  6E07               	movwf	i2XF_pushEvent@inISR^0,c
 19597  004C66  500C               	movf	XF_decrementAndQueueTimers@i^0,w,c
 19598  004C68  0D03               	mullw	3
 19599  004C6A  50F3               	movf	243,w,c
 19600  004C6C  0FB2               	addlw	low (_theXF+2)
 19601  004C6E  6ED9               	movwf	fsr2l,c
 19602  004C70  6ADA               	clrf	fsr2h,c
 19603  004C72  50DF               	movf	indf2,w,c
 19604  004C74  ECAC  F029         	call	i2_XF_pushEvent
 19605  004C78  06E8               	decf	wreg,f,c
 19606  004C7A  A4D8               	btfss	status,2,c
 19607  004C7C  D006               	goto	i2l7860
 19608                           
 19609                           ;xf/xf.c: 151:                 {;xf/xf.c: 152:                   XF_unscheduleTimer(i, 1
      +                          );
 19610  004C7E  0E01               	movlw	1
 19611  004C80  6E02               	movwf	i2XF_unscheduleTimer@inISR^0,c
 19612  004C82  500C               	movf	XF_decrementAndQueueTimers@i^0,w,c
 19613  004C84  ECFB  F02A         	call	i2_XF_unscheduleTimer
 19614                           
 19615                           ;xf/xf.c: 153:                 }
 19616  004C88  D00A               	goto	i2l7862
 19617  004C8A                     i2l7860:
 19618                           
 19619                           ;xf/xf.c: 155:                 {;xf/xf.c: 156:                   theXF.timerList[i].tm=1
      +                          ;
 19620  004C8A  500C               	movf	XF_decrementAndQueueTimers@i^0,w,c
 19621  004C8C  0D03               	mullw	3
 19622  004C8E  50F3               	movf	243,w,c
 19623  004C90  0FB0               	addlw	low _theXF
 19624  004C92  6ED9               	movwf	fsr2l,c
 19625  004C94  6ADA               	clrf	fsr2h,c
 19626  004C96  0E01               	movlw	1
 19627  004C98  6EDE               	movwf	postinc2,c
 19628  004C9A  0E00               	movlw	0
 19629  004C9C  6EDD               	movwf	postdec2,c
 19630  004C9E                     i2l7862:
 19631                           
 19632                           ;xf/xf.c: 160:     }
 19633  004C9E  4A0C               	infsnz	XF_decrementAndQueueTimers@i^0,f,c
 19634  004CA0  2A0D               	incf	(XF_decrementAndQueueTimers@i+1)^0,f,c
 19635  004CA2  BE0D               	btfsc	(XF_decrementAndQueueTimers@i+1)^0,7,c
 19636  004CA4  D7C2               	goto	i2l7852
 19637  004CA6  500D               	movf	(XF_decrementAndQueueTimers@i+1)^0,w,c
 19638  004CA8  E105               	bnz	i2u557_40
 19639  004CAA  0E08               	movlw	8
 19640  004CAC  5C0C               	subwf	XF_decrementAndQueueTimers@i^0,w,c
 19641  004CAE  B0D8               	btfsc	status,0,c
 19642  004CB0  0012               	return	
 19643  004CB2  D7BB               	goto	i2l7852
 19644  004CB4                     i2u557_40:
 19645  004CB4  0012               	return		;funcret
 19646  004CB6                     __end_of_XF_decrementAndQueueTimers:
 19647                           	callstack 0
 19648                           
 19649 ;; *************** function i2_XF_unscheduleTimer *****************
 19650 ;; Defined at:
 19651 ;;		line 125 in file "xf/xf.c"
 19652 ;; Parameters:    Size  Location     Type
 19653 ;;  id              1    wreg     unsigned char 
 19654 ;;  inISR           1    1[COMRAM] _Bool 
 19655 ;; Auto vars:     Size  Location     Type
 19656 ;;  id              1    2[COMRAM] unsigned char 
 19657 ;; Return value:  Size  Location     Type
 19658 ;;                  1    wreg      void 
 19659 ;; Registers used:
 19660 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19661 ;; Tracked objects:
 19662 ;;		On entry : 0/0
 19663 ;;		On exit  : 0/0
 19664 ;;		Unchanged: 0/0
 19665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19666 ;;      Params:         1       0       0       0       0       0       0
 19667 ;;      Locals:         1       0       0       0       0       0       0
 19668 ;;      Temps:          0       0       0       0       0       0       0
 19669 ;;      Totals:         2       0       0       0       0       0       0
 19670 ;;Total ram usage:        2 bytes
 19671 ;; Hardware stack levels used: 1
 19672 ;; Hardware stack levels required when called: 1
 19673 ;; This function calls:
 19674 ;;		i2_ENTERCRITICAL
 19675 ;;		i2_LEAVECRITICAL
 19676 ;; This function is called by:
 19677 ;;		_XF_decrementAndQueueTimers
 19678 ;; This function uses a non-reentrant model
 19679 ;;
 19680                           
 19681                           	psect	text87
 19682  0055F6                     __ptext87:
 19683                           	callstack 0
 19684  0055F6                     i2_XF_unscheduleTimer:
 19685                           	callstack 14
 19686                           
 19687                           ;incstack = 0
 19688                           ;i2XF_unscheduleTimer@id stored from wreg
 19689  0055F6  6E03               	movwf	i2XF_unscheduleTimer@id^0,c
 19690                           
 19691                           ;xf/xf.c: 125: void XF_unscheduleTimer(TimerID id, _Bool inISR);xf/xf.c: 126: {;xf/xf.c:
      +                           127:     ENTERCRITICAL(inISR);
 19692  0055F8  5002               	movf	i2XF_unscheduleTimer@inISR^0,w,c
 19693  0055FA  EC6E  F02C         	call	i2_ENTERCRITICAL
 19694                           
 19695                           ;xf/xf.c: 128:     theXF.timerList[id].tm = 0;
 19696  0055FE  5003               	movf	i2XF_unscheduleTimer@id^0,w,c
 19697  005600  0D03               	mullw	3
 19698  005602  50F3               	movf	243,w,c
 19699  005604  0FB0               	addlw	low _theXF
 19700  005606  6ED9               	movwf	fsr2l,c
 19701  005608  6ADA               	clrf	fsr2h,c
 19702  00560A  0E00               	movlw	0
 19703  00560C  6EDE               	movwf	postinc2,c
 19704  00560E  0E00               	movlw	0
 19705  005610  6EDD               	movwf	postdec2,c
 19706                           
 19707                           ;xf/xf.c: 129:     theXF.timerList[id].ev = NULLEVENT;
 19708  005612  5003               	movf	i2XF_unscheduleTimer@id^0,w,c
 19709  005614  0D03               	mullw	3
 19710  005616  50F3               	movf	243,w,c
 19711  005618  0FB2               	addlw	low (_theXF+2)
 19712  00561A  6ED9               	movwf	fsr2l,c
 19713  00561C  6ADA               	clrf	fsr2h,c
 19714  00561E  0E00               	movlw	0
 19715  005620  6EDF               	movwf	indf2,c
 19716                           
 19717                           ;xf/xf.c: 130:     LEAVECRITICAL(inISR);
 19718  005622  5002               	movf	i2XF_unscheduleTimer@inISR^0,w,c
 19719  005624  EC68  F02C         	call	i2_LEAVECRITICAL
 19720  005628  0012               	return		;funcret
 19721  00562A                     __end_ofi2_XF_unscheduleTimer:
 19722                           	callstack 0
 19723                           
 19724 ;; *************** function i2_XF_pushEvent *****************
 19725 ;; Defined at:
 19726 ;;		line 49 in file "xf/xf.c"
 19727 ;; Parameters:    Size  Location     Type
 19728 ;;  ev              1    wreg     unsigned char 
 19729 ;;  inISR           1    6[COMRAM] _Bool 
 19730 ;; Auto vars:     Size  Location     Type
 19731 ;;  ev              1    7[COMRAM] unsigned char 
 19732 ;;  temp            1    8[COMRAM] unsigned char 
 19733 ;; Return value:  Size  Location     Type
 19734 ;;                  1    wreg      _Bool 
 19735 ;; Registers used:
 19736 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19737 ;; Tracked objects:
 19738 ;;		On entry : 0/0
 19739 ;;		On exit  : 0/0
 19740 ;;		Unchanged: 0/0
 19741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19742 ;;      Params:         1       0       0       0       0       0       0
 19743 ;;      Locals:         2       0       0       0       0       0       0
 19744 ;;      Temps:          0       0       0       0       0       0       0
 19745 ;;      Totals:         3       0       0       0       0       0       0
 19746 ;;Total ram usage:        3 bytes
 19747 ;; Hardware stack levels used: 1
 19748 ;; Hardware stack levels required when called: 1
 19749 ;; This function calls:
 19750 ;;		i2_ENTERCRITICAL
 19751 ;;		i2_LEAVECRITICAL
 19752 ;;		i2___awmod
 19753 ;; This function is called by:
 19754 ;;		_XF_decrementAndQueueTimers
 19755 ;;		_isr
 19756 ;; This function uses a non-reentrant model
 19757 ;;
 19758                           
 19759                           	psect	text88
 19760  005358                     __ptext88:
 19761                           	callstack 0
 19762  005358                     i2_XF_pushEvent:
 19763                           	callstack 15
 19764                           
 19765                           ;incstack = 0
 19766                           ;i2XF_pushEvent@ev stored from wreg
 19767  005358  6E08               	movwf	i2XF_pushEvent@ev^0,c
 19768                           
 19769                           ;xf/xf.c: 49: _Bool XF_pushEvent(Event ev, _Bool inISR);xf/xf.c: 50: {;xf/xf.c: 51:   ui
      +                          nt8_t temp;;xf/xf.c: 52:     ENTERCRITICAL(inISR);
 19770  00535A  5007               	movf	i2XF_pushEvent@inISR^0,w,c
 19771  00535C  EC6E  F02C         	call	i2_ENTERCRITICAL
 19772                           
 19773                           ;xf/xf.c: 54:     temp = (theXF.in+1) % (uint8_t)sizeof(theXF.eventQueue);
 19774  005360  0E01               	movlw	1
 19775  005362  0100               	movlb	0	; () banked
 19776  005364  25D4               	addwf	(_theXF+36)& (0+255),w,b
 19777  005366  6E01               	movwf	i2___awmod@dividend^0,c
 19778  005368  6A02               	clrf	(i2___awmod@dividend+1)^0,c
 19779  00536A  0E00               	movlw	0
 19780  00536C  2202               	addwfc	(i2___awmod@dividend+1)^0,f,c
 19781  00536E  0E00               	movlw	0
 19782  005370  6E04               	movwf	(i2___awmod@divisor+1)^0,c
 19783  005372  0E0C               	movlw	12
 19784  005374  6E03               	movwf	i2___awmod@divisor^0,c
 19785  005376  EC99  F028         	call	i2___awmod	;wreg free
 19786  00537A  5001               	movf	?i2___awmod^0,w,c
 19787  00537C  6E09               	movwf	i2XF_pushEvent@temp^0,c
 19788                           
 19789                           ; BSR set to: 0
 19790                           ;xf/xf.c: 55:     if(temp == theXF.out)
 19791  00537E  5009               	movf	i2XF_pushEvent@temp^0,w,c
 19792  005380  19D5               	xorwf	(_theXF+37)& (0+255),w,b
 19793  005382  A4D8               	btfss	status,2,c
 19794  005384  D005               	goto	i2l7762
 19795                           
 19796                           ; BSR set to: 0
 19797                           ;xf/xf.c: 56:     {;xf/xf.c: 57:       LEAVECRITICAL(inISR);
 19798  005386  5007               	movf	i2XF_pushEvent@inISR^0,w,c
 19799  005388  EC68  F02C         	call	i2_LEAVECRITICAL
 19800                           
 19801                           ;xf/xf.c: 58:       return 0;
 19802  00538C  0E00               	movlw	0
 19803  00538E  0012               	return	
 19804  005390                     i2l7762:
 19805                           
 19806                           ; BSR set to: 0
 19807                           ;xf/xf.c: 60:     theXF.eventQueue[theXF.in] = ev;
 19808  005390  51D4               	movf	(_theXF+36)& (0+255),w,b
 19809  005392  0FC8               	addlw	low (_theXF+24)
 19810  005394  6ED9               	movwf	fsr2l,c
 19811  005396  6ADA               	clrf	fsr2h,c
 19812  005398  C008  FFDF         	movff	i2XF_pushEvent@ev,indf2
 19813                           
 19814                           ; BSR set to: 0
 19815                           ;xf/xf.c: 61:     theXF.in = temp;
 19816  00539C  C009  F0D4         	movff	i2XF_pushEvent@temp,_theXF+36
 19817                           
 19818                           ; BSR set to: 0
 19819                           ;xf/xf.c: 62:     LEAVECRITICAL(inISR);
 19820  0053A0  5007               	movf	i2XF_pushEvent@inISR^0,w,c
 19821  0053A2  EC68  F02C         	call	i2_LEAVECRITICAL
 19822                           
 19823                           ;xf/xf.c: 63:     return 1;
 19824  0053A6  0E01               	movlw	1
 19825  0053A8  0012               	return		;funcret
 19826  0053AA                     __end_ofi2_XF_pushEvent:
 19827                           	callstack 0
 19828                           
 19829 ;; *************** function i2___awmod *****************
 19830 ;; Defined at:
 19831 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awmod.c"
 19832 ;; Parameters:    Size  Location     Type
 19833 ;;  dividend        2    0[COMRAM] int 
 19834 ;;  divisor         2    2[COMRAM] int 
 19835 ;; Auto vars:     Size  Location     Type
 19836 ;;  sign            1    5[COMRAM] unsigned char 
 19837 ;;  counter         1    4[COMRAM] unsigned char 
 19838 ;; Return value:  Size  Location     Type
 19839 ;;                  2    0[COMRAM] int 
 19840 ;; Registers used:
 19841 ;;		wreg, status,2, status,0
 19842 ;; Tracked objects:
 19843 ;;		On entry : 3F/0
 19844 ;;		On exit  : 3F/0
 19845 ;;		Unchanged: 3F/0
 19846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19847 ;;      Params:         4       0       0       0       0       0       0
 19848 ;;      Locals:         2       0       0       0       0       0       0
 19849 ;;      Temps:          0       0       0       0       0       0       0
 19850 ;;      Totals:         6       0       0       0       0       0       0
 19851 ;;Total ram usage:        6 bytes
 19852 ;; Hardware stack levels used: 1
 19853 ;; This function calls:
 19854 ;;		Nothing
 19855 ;; This function is called by:
 19856 ;;		i2_XF_pushEvent
 19857 ;; This function uses a non-reentrant model
 19858 ;;
 19859                           
 19860                           	psect	text89
 19861  005132                     __ptext89:
 19862                           	callstack 0
 19863  005132                     i2___awmod:
 19864                           	callstack 15
 19865                           
 19866                           ; BSR set to: 0
 19867                           
 19868                           ;incstack = 0
 19869  005132  0E00               	movlw	0
 19870  005134  6E06               	movwf	i2___awmod@sign^0,c
 19871                           
 19872                           ; BSR set to: 0
 19873  005136  AE02               	btfss	(i2___awmod@dividend+1)^0,7,c
 19874  005138  D006               	goto	i2l7524
 19875                           
 19876                           ; BSR set to: 0
 19877  00513A  6C01               	negf	i2___awmod@dividend^0,c
 19878  00513C  1E02               	comf	(i2___awmod@dividend+1)^0,f,c
 19879  00513E  B0D8               	btfsc	status,0,c
 19880  005140  2A02               	incf	(i2___awmod@dividend+1)^0,f,c
 19881                           
 19882                           ; BSR set to: 0
 19883  005142  0E01               	movlw	1
 19884  005144  6E06               	movwf	i2___awmod@sign^0,c
 19885  005146                     i2l7524:
 19886                           
 19887                           ; BSR set to: 0
 19888  005146  AE04               	btfss	(i2___awmod@divisor+1)^0,7,c
 19889  005148  D004               	goto	i2l7528
 19890                           
 19891                           ; BSR set to: 0
 19892  00514A  6C03               	negf	i2___awmod@divisor^0,c
 19893  00514C  1E04               	comf	(i2___awmod@divisor+1)^0,f,c
 19894  00514E  B0D8               	btfsc	status,0,c
 19895  005150  2A04               	incf	(i2___awmod@divisor+1)^0,f,c
 19896  005152                     i2l7528:
 19897                           
 19898                           ; BSR set to: 0
 19899  005152  5003               	movf	i2___awmod@divisor^0,w,c
 19900  005154  1004               	iorwf	(i2___awmod@divisor+1)^0,w,c
 19901  005156  B4D8               	btfsc	status,2,c
 19902  005158  D018               	goto	i2l7544
 19903                           
 19904                           ; BSR set to: 0
 19905  00515A  0E01               	movlw	1
 19906  00515C  6E05               	movwf	i2___awmod@counter^0,c
 19907  00515E  D004               	goto	i2l7534
 19908  005160                     i2l7532:
 19909                           
 19910                           ; BSR set to: 0
 19911  005160  90D8               	bcf	status,0,c
 19912  005162  3603               	rlcf	i2___awmod@divisor^0,f,c
 19913  005164  3604               	rlcf	(i2___awmod@divisor+1)^0,f,c
 19914  005166  2A05               	incf	i2___awmod@counter^0,f,c
 19915  005168                     i2l7534:
 19916                           
 19917                           ; BSR set to: 0
 19918  005168  AE04               	btfss	(i2___awmod@divisor+1)^0,7,c
 19919  00516A  D7FA               	goto	i2l7532
 19920  00516C                     i2u532_40:
 19921                           
 19922                           ; BSR set to: 0
 19923  00516C  5003               	movf	i2___awmod@divisor^0,w,c
 19924  00516E  5C01               	subwf	i2___awmod@dividend^0,w,c
 19925  005170  5004               	movf	(i2___awmod@divisor+1)^0,w,c
 19926  005172  5802               	subwfb	(i2___awmod@dividend+1)^0,w,c
 19927  005174  A0D8               	btfss	status,0,c
 19928  005176  D004               	goto	i2l7540
 19929                           
 19930                           ; BSR set to: 0
 19931  005178  5003               	movf	i2___awmod@divisor^0,w,c
 19932  00517A  5E01               	subwf	i2___awmod@dividend^0,f,c
 19933  00517C  5004               	movf	(i2___awmod@divisor+1)^0,w,c
 19934  00517E  5A02               	subwfb	(i2___awmod@dividend+1)^0,f,c
 19935  005180                     i2l7540:
 19936                           
 19937                           ; BSR set to: 0
 19938  005180  90D8               	bcf	status,0,c
 19939  005182  3204               	rrcf	(i2___awmod@divisor+1)^0,f,c
 19940  005184  3203               	rrcf	i2___awmod@divisor^0,f,c
 19941                           
 19942                           ; BSR set to: 0
 19943  005186  2E05               	decfsz	i2___awmod@counter^0,f,c
 19944  005188  D7F1               	goto	i2u532_40
 19945  00518A                     i2l7544:
 19946                           
 19947                           ; BSR set to: 0
 19948  00518A  5006               	movf	i2___awmod@sign^0,w,c
 19949  00518C  B4D8               	btfsc	status,2,c
 19950  00518E  D004               	goto	i2l7548
 19951                           
 19952                           ; BSR set to: 0
 19953  005190  6C01               	negf	i2___awmod@dividend^0,c
 19954  005192  1E02               	comf	(i2___awmod@dividend+1)^0,f,c
 19955  005194  B0D8               	btfsc	status,0,c
 19956  005196  2A02               	incf	(i2___awmod@dividend+1)^0,f,c
 19957  005198                     i2l7548:
 19958                           
 19959                           ; BSR set to: 0
 19960  005198  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 19961  00519C  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 19962                           
 19963                           ; BSR set to: 0
 19964  0051A0  0012               	return		;funcret
 19965  0051A2                     __end_ofi2___awmod:
 19966                           	callstack 0
 19967                           
 19968 ;; *************** function i2_LEAVECRITICAL *****************
 19969 ;; Defined at:
 19970 ;;		line 186 in file "xf/xf.c"
 19971 ;; Parameters:    Size  Location     Type
 19972 ;;  inISR           1    wreg     _Bool 
 19973 ;; Auto vars:     Size  Location     Type
 19974 ;;  inISR           1    0[COMRAM] _Bool 
 19975 ;; Return value:  Size  Location     Type
 19976 ;;                  1    wreg      void 
 19977 ;; Registers used:
 19978 ;;		wreg, status,2
 19979 ;; Tracked objects:
 19980 ;;		On entry : 0/0
 19981 ;;		On exit  : 0/0
 19982 ;;		Unchanged: 0/0
 19983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19984 ;;      Params:         0       0       0       0       0       0       0
 19985 ;;      Locals:         1       0       0       0       0       0       0
 19986 ;;      Temps:          0       0       0       0       0       0       0
 19987 ;;      Totals:         1       0       0       0       0       0       0
 19988 ;;Total ram usage:        1 bytes
 19989 ;; Hardware stack levels used: 1
 19990 ;; This function calls:
 19991 ;;		Nothing
 19992 ;; This function is called by:
 19993 ;;		i2_XF_pushEvent
 19994 ;;		i2_XF_unscheduleTimer
 19995 ;; This function uses a non-reentrant model
 19996 ;;
 19997                           
 19998                           	psect	text90
 19999  0058D0                     __ptext90:
 20000                           	callstack 0
 20001  0058D0                     i2_LEAVECRITICAL:
 20002                           	callstack 15
 20003                           
 20004                           ; BSR set to: 0
 20005                           ;incstack = 0
 20006                           ;i2LEAVECRITICAL@inISR stored from wreg
 20007  0058D0  6E01               	movwf	i2LEAVECRITICAL@inISR^0,c
 20008                           
 20009                           ;xf/xf.c: 186: static void LEAVECRITICAL(_Bool inISR);xf/xf.c: 187: {;xf/xf.c: 188:     
      +                          if (inISR == 0)
 20010  0058D2  5001               	movf	i2LEAVECRITICAL@inISR^0,w,c
 20011  0058D4  A4D8               	btfss	status,2,c
 20012  0058D6  0012               	return	
 20013                           
 20014                           ;xf/xf.c: 189:     {;xf/xf.c: 190:       GIE = 1;
 20015  0058D8  8EF2               	bsf	4082,7,c	;volatile
 20016  0058DA  0012               	return		;funcret
 20017  0058DC                     __end_ofi2_LEAVECRITICAL:
 20018                           	callstack 0
 20019                           
 20020 ;; *************** function i2_ENTERCRITICAL *****************
 20021 ;; Defined at:
 20022 ;;		line 172 in file "xf/xf.c"
 20023 ;; Parameters:    Size  Location     Type
 20024 ;;  inISR           1    wreg     _Bool 
 20025 ;; Auto vars:     Size  Location     Type
 20026 ;;  inISR           1    0[COMRAM] _Bool 
 20027 ;; Return value:  Size  Location     Type
 20028 ;;                  1    wreg      void 
 20029 ;; Registers used:
 20030 ;;		wreg, status,2
 20031 ;; Tracked objects:
 20032 ;;		On entry : 0/0
 20033 ;;		On exit  : 0/0
 20034 ;;		Unchanged: 0/0
 20035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20036 ;;      Params:         0       0       0       0       0       0       0
 20037 ;;      Locals:         1       0       0       0       0       0       0
 20038 ;;      Temps:          0       0       0       0       0       0       0
 20039 ;;      Totals:         1       0       0       0       0       0       0
 20040 ;;Total ram usage:        1 bytes
 20041 ;; Hardware stack levels used: 1
 20042 ;; This function calls:
 20043 ;;		Nothing
 20044 ;; This function is called by:
 20045 ;;		i2_XF_pushEvent
 20046 ;;		i2_XF_unscheduleTimer
 20047 ;; This function uses a non-reentrant model
 20048 ;;
 20049                           
 20050                           	psect	text91
 20051  0058DC                     __ptext91:
 20052                           	callstack 0
 20053  0058DC                     i2_ENTERCRITICAL:
 20054                           	callstack 15
 20055                           
 20056                           ;incstack = 0
 20057                           ;i2ENTERCRITICAL@inISR stored from wreg
 20058  0058DC  6E01               	movwf	i2ENTERCRITICAL@inISR^0,c
 20059                           
 20060                           ;xf/xf.c: 172: static void ENTERCRITICAL(_Bool inISR);xf/xf.c: 173: {;xf/xf.c: 174:     
      +                          if (inISR == 0)
 20061  0058DE  5001               	movf	i2ENTERCRITICAL@inISR^0,w,c
 20062  0058E0  A4D8               	btfss	status,2,c
 20063  0058E2  0012               	return	
 20064                           
 20065                           ;xf/xf.c: 175:     {;xf/xf.c: 176:       GIE = 0;
 20066  0058E4  9EF2               	bcf	4082,7,c	;volatile
 20067  0058E6  0012               	return		;funcret
 20068  0058E8                     __end_ofi2_ENTERCRITICAL:
 20069                           	callstack 0
 20070                           
 20071                           	psect	rparam
 20072  0000                     
 20073                           	psect	temp
 20074  00004E                     btemp:
 20075                           	callstack 0
 20076  00004E                     	ds	1
 20077  0000                     int$flags	set	btemp
 20078  0000                     wtemp8	set	btemp+1
 20079  0000                     ttemp5	set	btemp+1
 20080  0000                     ttemp6	set	btemp+4
 20081  0000                     ttemp7	set	btemp+8
 20082                           
 20083                           	psect	idloc
 20084                           
 20085                           ;Config register IDLOC0 @ 0x200000
 20086                           ;	unspecified, using default values
 20087  200000                     	org	2097152
 20088  200000  FF                 	db	255
 20089                           
 20090                           ;Config register IDLOC1 @ 0x200001
 20091                           ;	unspecified, using default values
 20092  200001                     	org	2097153
 20093  200001  FF                 	db	255
 20094                           
 20095                           ;Config register IDLOC2 @ 0x200002
 20096                           ;	unspecified, using default values
 20097  200002                     	org	2097154
 20098  200002  FF                 	db	255
 20099                           
 20100                           ;Config register IDLOC3 @ 0x200003
 20101                           ;	unspecified, using default values
 20102  200003                     	org	2097155
 20103  200003  FF                 	db	255
 20104                           
 20105                           ;Config register IDLOC4 @ 0x200004
 20106                           ;	unspecified, using default values
 20107  200004                     	org	2097156
 20108  200004  FF                 	db	255
 20109                           
 20110                           ;Config register IDLOC5 @ 0x200005
 20111                           ;	unspecified, using default values
 20112  200005                     	org	2097157
 20113  200005  FF                 	db	255
 20114                           
 20115                           ;Config register IDLOC6 @ 0x200006
 20116                           ;	unspecified, using default values
 20117  200006                     	org	2097158
 20118  200006  FF                 	db	255
 20119                           
 20120                           ;Config register IDLOC7 @ 0x200007
 20121                           ;	unspecified, using default values
 20122  200007                     	org	2097159
 20123  200007  FF                 	db	255
 20124                           
 20125                           	psect	config
 20126                           
 20127                           ; Padding undefined space
 20128  300000                     	org	3145728
 20129  300000  FF                 	db	255
 20130                           
 20131                           ;Config register CONFIG1H @ 0x300001
 20132                           ;	Oscillator Selection bits
 20133                           ;	FOSC = INTIO67, Internal oscillator block
 20134                           ;	4X PLL Enable
 20135                           ;	PLLCFG = ON, Oscillator multiplied by 4
 20136                           ;	Primary clock enable bit
 20137                           ;	PRICLKEN = ON, Primary clock is always enabled
 20138                           ;	Fail-Safe Clock Monitor Enable bit
 20139                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
 20140                           ;	Internal/External Oscillator Switchover bit
 20141                           ;	IESO = OFF, Oscillator Switchover mode disabled
 20142  300001                     	org	3145729
 20143  300001  38                 	db	56
 20144                           
 20145                           ;Config register CONFIG2L @ 0x300002
 20146                           ;	Power-up Timer Enable bit
 20147                           ;	PWRTEN = OFF, Power up timer disabled
 20148                           ;	Brown-out Reset Enable bits
 20149                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
 20150                           ;	Brown Out Reset Voltage bits
 20151                           ;	BORV = 190, VBOR set to 1.90 V nominal
 20152  300002                     	org	3145730
 20153  300002  1F                 	db	31
 20154                           
 20155                           ;Config register CONFIG2H @ 0x300003
 20156                           ;	Watchdog Timer Enable bits
 20157                           ;	WDTEN = SWON, WDT is controlled by SWDTEN bit of the WDTCON register
 20158                           ;	Watchdog Timer Postscale Select bits
 20159                           ;	WDTPS = 32768, 1:32768
 20160  300003                     	org	3145731
 20161  300003  3E                 	db	62
 20162                           
 20163                           ; Padding undefined space
 20164  300004                     	org	3145732
 20165  300004  FF                 	db	255
 20166                           
 20167                           ;Config register CONFIG3H @ 0x300005
 20168                           ;	CCP2 MUX bit
 20169                           ;	CCP2MX = PORTC1, CCP2 input/output is multiplexed with RC1
 20170                           ;	PORTB A/D Enable bit
 20171                           ;	PBADEN = OFF, PORTB<5:0> pins are configured as digital I/O on Reset
 20172                           ;	P3A/CCP3 Mux bit
 20173                           ;	CCP3MX = PORTB5, P3A/CCP3 input/output is multiplexed with RB5
 20174                           ;	HFINTOSC Fast Start-up
 20175                           ;	HFOFST = ON, HFINTOSC output and ready status are not delayed by the oscillator stable
      +                           status
 20176                           ;	Timer3 Clock input mux bit
 20177                           ;	T3CMX = PORTC0, T3CKI is on RC0
 20178                           ;	ECCP2 B output mux bit
 20179                           ;	P2BMX = PORTB5, P2B is on RB5
 20180                           ;	MCLR Pin Enable bit
 20181                           ;	MCLRE = EXTMCLR, MCLR pin enabled, RE3 input pin disabled
 20182  300005                     	org	3145733
 20183  300005  BD                 	db	189
 20184                           
 20185                           ;Config register CONFIG4L @ 0x300006
 20186                           ;	Stack Full/Underflow Reset Enable bit
 20187                           ;	STVREN = ON, Stack full/underflow will cause Reset
 20188                           ;	Single-Supply ICSP Enable bit
 20189                           ;	LVP = ON, Single-Supply ICSP enabled if MCLRE is also 1
 20190                           ;	Extended Instruction Set Enable bit
 20191                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
 20192                           ;	Background Debug
 20193                           ;	DEBUG = 0x1, unprogrammed default
 20194  300006                     	org	3145734
 20195  300006  85                 	db	133
 20196                           
 20197                           ; Padding undefined space
 20198  300007                     	org	3145735
 20199  300007  FF                 	db	255
 20200                           
 20201                           ;Config register CONFIG5L @ 0x300008
 20202                           ;	Code Protection Block 0
 20203                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
 20204                           ;	Code Protection Block 1
 20205                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
 20206                           ;	Code Protection Block 2
 20207                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
 20208                           ;	Code Protection Block 3
 20209                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
 20210  300008                     	org	3145736
 20211  300008  0F                 	db	15
 20212                           
 20213                           ;Config register CONFIG5H @ 0x300009
 20214                           ;	Boot Block Code Protection bit
 20215                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
 20216                           ;	Data EEPROM Code Protection bit
 20217                           ;	CPD = OFF, Data EEPROM not code-protected
 20218  300009                     	org	3145737
 20219  300009  C0                 	db	192
 20220                           
 20221                           ;Config register CONFIG6L @ 0x30000A
 20222                           ;	Write Protection Block 0
 20223                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
 20224                           ;	Write Protection Block 1
 20225                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
 20226                           ;	Write Protection Block 2
 20227                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
 20228                           ;	Write Protection Block 3
 20229                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
 20230  30000A                     	org	3145738
 20231  30000A  0F                 	db	15
 20232                           
 20233                           ;Config register CONFIG6H @ 0x30000B
 20234                           ;	Configuration Register Write Protection bit
 20235                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
 20236                           ;	Boot Block Write Protection bit
 20237                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
 20238                           ;	Data EEPROM Write Protection bit
 20239                           ;	WRTD = OFF, Data EEPROM not write-protected
 20240  30000B                     	org	3145739
 20241  30000B  E0                 	db	224
 20242                           
 20243                           ;Config register CONFIG7L @ 0x30000C
 20244                           ;	Table Read Protection Block 0
 20245                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
 20246                           ;	Table Read Protection Block 1
 20247                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
 20248                           ;	Table Read Protection Block 2
 20249                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
 20250                           ;	Table Read Protection Block 3
 20251                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
 20252  30000C                     	org	3145740
 20253  30000C  0F                 	db	15
 20254                           
 20255                           ;Config register CONFIG7H @ 0x30000D
 20256                           ;	Boot Block Table Read Protection bit
 20257                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
 20258  30000D                     	org	3145741
 20259  30000D  40                 	db	64
 20260                           tosu	equ	0xFFF
 20261                           tosh	equ	0xFFE
 20262                           tosl	equ	0xFFD
 20263                           stkptr	equ	0xFFC
 20264                           pclatu	equ	0xFFB
 20265                           pclath	equ	0xFFA
 20266                           pcl	equ	0xFF9
 20267                           tblptru	equ	0xFF8
 20268                           tblptrh	equ	0xFF7
 20269                           tblptrl	equ	0xFF6
 20270                           tablat	equ	0xFF5
 20271                           prodh	equ	0xFF4
 20272                           prodl	equ	0xFF3
 20273                           indf0	equ	0xFEF
 20274                           postinc0	equ	0xFEE
 20275                           postdec0	equ	0xFED
 20276                           preinc0	equ	0xFEC
 20277                           plusw0	equ	0xFEB
 20278                           fsr0h	equ	0xFEA
 20279                           fsr0l	equ	0xFE9
 20280                           wreg	equ	0xFE8
 20281                           indf1	equ	0xFE7
 20282                           postinc1	equ	0xFE6
 20283                           postdec1	equ	0xFE5
 20284                           preinc1	equ	0xFE4
 20285                           plusw1	equ	0xFE3
 20286                           fsr1h	equ	0xFE2
 20287                           fsr1l	equ	0xFE1
 20288                           bsr	equ	0xFE0
 20289                           indf2	equ	0xFDF
 20290                           postinc2	equ	0xFDE
 20291                           postdec2	equ	0xFDD
 20292                           preinc2	equ	0xFDC
 20293                           plusw2	equ	0xFDB
 20294                           fsr2h	equ	0xFDA
 20295                           fsr2l	equ	0xFD9
 20296                           status	equ	0xFD8

Data Sizes:
    Strings     124
    Constant    1867
    Data        0
    BSS         298
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     70      77
    BANK0           160     80     155
    BANK1           256      0     216
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    g1.font.bitmap	PTR const unsigned char  size(2) Largest target is 0
		 -> arialNarrow_12ptBitmaps(CODE[1575]), 

    g1.font.descriptor	PTR const struct . size(2) Largest target is 0
		 -> arialNarrow_12ptDescriptors(CODE[285]), 

    g1.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), 

    g1.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), 

    g1.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), 

    g1.font	PTR struct . size(2) Largest target is 0
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    g1.text	PTR const unsigned char  size(2) Largest target is 0
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    g1.fpPress	PTR FTN()void  size(2) Largest target is 0
		 -> Absolute function(), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 226
		 -> g1.str(BANK1[2]), dbuf(BANK0[32]), touchScreenController@s(BANK0[20]), STR_14(CODE[13]), 
		 -> STR_13(CODE[13]), STR_12(CODE[6]), STR_11(CODE[11]), STR_10(CODE[11]), 
		 -> STR_9(CODE[8]), STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), 
		 -> STR_5(CODE[9]), STR_4(CODE[11]), g1(BANK1[216]), STR_1(CODE[10]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 226
		 -> g1.str(BANK1[2]), dbuf(BANK0[32]), touchScreenController@s(BANK0[20]), STR_14(CODE[13]), 
		 -> STR_13(CODE[13]), STR_12(CODE[6]), STR_11(CODE[11]), STR_10(CODE[11]), 
		 -> STR_9(CODE[8]), STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), 
		 -> STR_5(CODE[9]), STR_4(CODE[11]), g1(BANK1[216]), STR_1(CODE[10]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 226
		 -> touchScreenController@s(BANK0[20]), g1(BANK1[216]), 

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_16(CODE[6]), STR_15(CODE[6]), STR_3(CODE[3]), STR_2(CODE[3]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 6
		 -> STR_16(CODE[6]), STR_15(CODE[6]), STR_3(CODE[3]), STR_2(CODE[3]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_16(CODE[6]), STR_15(CODE[6]), STR_3(CODE[3]), STR_2(CODE[3]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 226
		 -> touchScreenController@s(BANK0[20]), g1(BANK1[216]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S5149_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 226
		 -> touchScreenController@s(BANK0[20]), g1(BANK1[216]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 226
		 -> touchScreenController@s(BANK0[20]), g1(BANK1[216]), 

    levelController@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    levelController@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    levelController@g.btnLeaveParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnLeaveParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnLeaveParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnLeaveParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    levelController@g.btnLeaveParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    levelController@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    levelController@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    levelController@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    levelController@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    levelController@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    levelController@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    levelController@g	PTR struct GameParameters size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    backlightController@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    backlightController@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    backlightController@g.btnLeaveParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnLeaveParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnLeaveParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnLeaveParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    backlightController@g.btnLeaveParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    backlightController@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    backlightController@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    backlightController@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    backlightController@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    backlightController@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    backlightController@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    backlightController@g	PTR struct GameParameters size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    checkCollision@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    checkCollision@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    checkCollision@g.btnLeaveParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnLeaveParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnLeaveParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnLeaveParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    checkCollision@g.btnLeaveParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    checkCollision@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    checkCollision@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    checkCollision@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    checkCollision@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    checkCollision@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    checkCollision@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    checkCollision@g	PTR struct GameParameters size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    mooveBall@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    mooveBall@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    mooveBall@g.btnLeaveParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnLeaveParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnLeaveParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnLeaveParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    mooveBall@g.btnLeaveParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    mooveBall@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    mooveBall@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    mooveBall@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    mooveBall@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    mooveBall@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    mooveBall@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    mooveBall@g	PTR struct GameParameters size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    moovePaddle2@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle2@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    moovePaddle2@g.btnLeaveParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnLeaveParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnLeaveParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnLeaveParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle2@g.btnLeaveParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    moovePaddle2@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle2@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    moovePaddle2@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle2@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    moovePaddle2@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle2@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    moovePaddle2@g	PTR struct GameParameters size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    moovePaddle1@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle1@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    moovePaddle1@g.btnLeaveParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnLeaveParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnLeaveParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnLeaveParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle1@g.btnLeaveParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    moovePaddle1@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle1@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    moovePaddle1@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle1@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    moovePaddle1@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle1@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    moovePaddle1@g	PTR struct GameParameters size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    gameControllerController@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerController@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    gameControllerController@g.btnLeaveParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnLeaveParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnLeaveParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnLeaveParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerController@g.btnLeaveParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    gameControllerController@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerController@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    gameControllerController@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerController@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    gameControllerController@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerController@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    gameControllerController@g	PTR struct GameParameters size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    gameControllerSM@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerSM@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    gameControllerSM@g.btnLeaveParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnLeaveParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnLeaveParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnLeaveParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerSM@g.btnLeaveParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    gameControllerSM@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerSM@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    gameControllerSM@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerSM@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    gameControllerSM@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerSM@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    gameControllerSM@g	PTR struct GameParameters size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    gameControllerInit@g	PTR struct GameParameters size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    displayController@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    displayController@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    displayController@g.btnLeaveParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnLeaveParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnLeaveParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnLeaveParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    displayController@g.btnLeaveParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    displayController@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    displayController@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    displayController@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    displayController@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    displayController@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    displayController@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    displayController@g	PTR struct GameParameters size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    displaySM@g	PTR struct GameParameters size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    displayInit@g	PTR struct GameParameters size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    touchScreenController@g	PTR struct GameParameters size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    touchScreenSM@g	PTR struct GameParameters size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    sleepInit@g	PTR struct GameParameters size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    LCD_Bitmap@colorTablePtr	PTR unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    LCD_Bitmap@bmpPtr	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    LCD_Bitmap@strPtr	PTR struct . size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    RGB2LCD@colorTableEntry	PTR unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    LCD_DrawText@font.bitmap	PTR const unsigned char  size(2) Largest target is 1575
		 -> arialNarrow_12ptBitmaps(CODE[1575]), 

    LCD_DrawText@font.descriptor	PTR const struct . size(2) Largest target is 285
		 -> arialNarrow_12ptDescriptors(CODE[285]), 

    LCD_DrawText@font	PTR const struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    LCD_DrawText@msg	PTR const unsigned char  size(2) Largest target is 226
		 -> g1.str(BANK1[2]), touchScreenController@s(BANK0[20]), STR_14(CODE[13]), STR_13(CODE[13]), 
		 -> STR_12(CODE[6]), STR_11(CODE[11]), STR_10(CODE[11]), STR_9(CODE[8]), 
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), g1(BANK1[216]), STR_1(CODE[10]), 

    LCD_InSlider@slider.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_InSlider@slider	PTR struct . size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    LCD_InButton@button.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_InButton@button.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_InButton@button.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_InButton@button.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    LCD_InButton@button.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    LCD_InButton@button	PTR struct . size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    LCD_ButtonDraw@button.font.bitmap	PTR const unsigned char  size(2) Largest target is 1575
		 -> arialNarrow_12ptBitmaps(CODE[1575]), 

    LCD_ButtonDraw@button.font.descriptor	PTR const struct . size(2) Largest target is 285
		 -> arialNarrow_12ptDescriptors(CODE[285]), 

    LCD_ButtonDraw@bmpPtr	PTR struct . size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    LCD_ButtonDraw@button.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonDraw@button.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonDraw@button.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonDraw@button.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    LCD_ButtonDraw@button.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    LCD_ButtonDraw@button	PTR struct . size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    LCD_ButtonUpdate@button.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonUpdate@button.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonUpdate@button.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonUpdate@button.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    LCD_ButtonUpdate@button.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    LCD_ButtonUpdate@button	PTR struct . size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    LCD_ButtonCreate@fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonCreate@fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonCreate@fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonCreate@button.font.bitmap	PTR const unsigned char  size(2) Largest target is 1575
		 -> arialNarrow_12ptBitmaps(CODE[1575]), 

    LCD_ButtonCreate@button.font.descriptor	PTR const struct . size(2) Largest target is 285
		 -> arialNarrow_12ptDescriptors(CODE[285]), 

    LCD_ButtonCreate@font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    LCD_ButtonCreate@textOrBmp	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    LCD_ButtonCreate@button.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonCreate@button.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonCreate@button.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonCreate@button.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    LCD_ButtonCreate@button.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    LCD_ButtonCreate@button	PTR struct . size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    LCD_SliderDraw@slider.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_SliderDraw@slider	PTR struct . size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    LCD_SliderUpdate@slider.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_SliderUpdate@slider	PTR struct . size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    LCD_SliderCreate@fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_SliderCreate@slider.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_SliderCreate@slider	PTR struct . size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    Menu_endGame@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_endGame@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    Menu_endGame@g.btnLeaveParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnLeaveParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnLeaveParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnLeaveParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_endGame@g.btnLeaveParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    Menu_endGame@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_endGame@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    Menu_endGame@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_endGame@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    Menu_endGame@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_endGame@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    Menu_endGame@g	PTR struct GameParameters size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    Menu_inGameDraw@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_inGameDraw@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    Menu_inGameDraw@g.btnLeaveParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnLeaveParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnLeaveParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnLeaveParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_inGameDraw@g.btnLeaveParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    Menu_inGameDraw@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_inGameDraw@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    Menu_inGameDraw@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_inGameDraw@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    Menu_inGameDraw@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_inGameDraw@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    Menu_inGameDraw@g	PTR struct GameParameters size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    Menu_parametersDraw@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_parametersDraw@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    Menu_parametersDraw@g.btnLeaveParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnLeaveParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnLeaveParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnLeaveParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_parametersDraw@g.btnLeaveParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    Menu_parametersDraw@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_parametersDraw@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    Menu_parametersDraw@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_parametersDraw@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    Menu_parametersDraw@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_parametersDraw@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    Menu_parametersDraw@g	PTR struct GameParameters size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    Menu_welcomeDraw@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_welcomeDraw@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    Menu_welcomeDraw@g.btnLeaveParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnLeaveParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnLeaveParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnLeaveParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_welcomeDraw@g.btnLeaveParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    Menu_welcomeDraw@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_welcomeDraw@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    Menu_welcomeDraw@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_welcomeDraw@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    Menu_welcomeDraw@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_welcomeDraw@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    Menu_welcomeDraw@g	PTR struct GameParameters size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    GameParameters_setY@s.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setY@s.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    GameParameters_setY@s.btnLeaveParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnLeaveParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnLeaveParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnLeaveParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setY@s.btnLeaveParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    GameParameters_setY@s.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setY@s.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    GameParameters_setY@s.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setY@s.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    GameParameters_setY@s.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setY@s.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    GameParameters_setY@s	PTR struct GameParameters size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    GameParameters_setX@s.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setX@s.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    GameParameters_setX@s.btnLeaveParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnLeaveParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnLeaveParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnLeaveParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setX@s.btnLeaveParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    GameParameters_setX@s.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setX@s.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    GameParameters_setX@s.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setX@s.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    GameParameters_setX@s.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setX@s.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    GameParameters_setX@s	PTR struct GameParameters size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    GameParameters_resetPos@s.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_resetPos@s.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    GameParameters_resetPos@s.btnLeaveParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnLeaveParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnLeaveParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnLeaveParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_resetPos@s.btnLeaveParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    GameParameters_resetPos@s.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_resetPos@s.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    GameParameters_resetPos@s.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_resetPos@s.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    GameParameters_resetPos@s.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_resetPos@s.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    GameParameters_resetPos@s	PTR struct GameParameters size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    GameParameters_setLevel@s.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setLevel@s.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    GameParameters_setLevel@s.btnLeaveParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnLeaveParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnLeaveParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnLeaveParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setLevel@s.btnLeaveParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    GameParameters_setLevel@s.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setLevel@s.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    GameParameters_setLevel@s.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setLevel@s.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    GameParameters_setLevel@s.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setLevel@s.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    GameParameters_setLevel@s	PTR struct GameParameters size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    GameParameters_setBackLight@s.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setBackLight@s.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    GameParameters_setBackLight@s.btnLeaveParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnLeaveParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnLeaveParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnLeaveParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setBackLight@s.btnLeaveParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    GameParameters_setBackLight@s.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setBackLight@s.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    GameParameters_setBackLight@s.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setBackLight@s.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    GameParameters_setBackLight@s.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setBackLight@s.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    GameParameters_setBackLight@s	PTR struct GameParameters size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    GameParameters_init@s.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_init@s.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    GameParameters_init@s.btnLeaveParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnLeaveParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnLeaveParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnLeaveParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_init@s.btnLeaveParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    GameParameters_init@s.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_init@s.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    GameParameters_init@s.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_init@s.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    GameParameters_init@s.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_init@s.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    GameParameters_init@s	PTR struct GameParameters size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    Score_draw@s	PTR struct Score size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    Score_init@s	PTR struct Score size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    g1.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    S135$fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    g1.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    g1.btnLeaveParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnLeaveParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnLeaveParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnLeaveParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    g1.btnLeaveParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    g1.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    g1.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    g1.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    g1.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    S108$fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    S108$fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    S108$fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    S108$font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    g1.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    S108$text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    g1.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_8(CODE[9]), STR_7(CODE[2]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[11]), 

    S99$bitmap	PTR const unsigned char  size(2) Largest target is 1575
		 -> arialNarrow_12ptBitmaps(CODE[1575]), 

    arialNarrow_12ptFontInfo.bitmap	PTR const unsigned char  size(2) Largest target is 1575
		 -> arialNarrow_12ptBitmaps(CODE[1575]), 

    S99$descriptor	PTR const struct . size(2) Largest target is 285
		 -> arialNarrow_12ptDescriptors(CODE[285]), 

    arialNarrow_12ptFontInfo.descriptor	PTR const struct . size(2) Largest target is 285
		 -> arialNarrow_12ptDescriptors(CODE[285]), 

    Paddle_draw@p	PTR struct Paddle size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    Paddle_addX@p	PTR struct Paddle size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    Paddle_init@p	PTR struct Paddle size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    Ball_draw@b	PTR struct Ball size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    Ball_Update@b	PTR struct Ball size(2) Largest target is 226
		 -> g1(BANK1[216]), 

    Ball_init@b	PTR struct Ball size(2) Largest target is 226
		 -> g1(BANK1[216]), 


Critical Paths under _main in COMRAM

    _touchScreenInit->_XF_scheduleTimer
    _gameControllerInit->_gameControllerController
    _LCD_Init->_LCD_Lowlevel_Init
    _touchScreenController->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _XF_unscheduleTimer->_ENTERCRITICAL
    _XF_unscheduleTimer->_LEAVECRITICAL
    _sleepSM->_sleepController
    _gameControllerSM->_gameControllerController
    _gameControllerController->_LCD_SliderUpdate
    _moovePaddle2->_Paddle_addX
    _moovePaddle1->_Paddle_addX
    _mooveBall->_checkCollision
    _checkCollision->_XF_pushEvent
    _XF_pushEvent->___awmod
    _levelController->_GameParameters_setLevel
    _backlightController->_GameParameters_setBackLight
    _XF_scheduleTimer->_ENTERCRITICAL
    _XF_scheduleTimer->_LEAVECRITICAL
    _GameParameters_init->_LCD_ButtonCreate
    _displayController->_Menu_parametersDraw
    _Menu_welcomeDraw->_LCD_ButtonDraw
    _Menu_parametersDraw->_LCD_SliderDraw
    _LCD_SliderDraw->_LCD_SliderUpdate
    _LCD_SliderUpdate->___lwdiv
    _Menu_endGame->_LCD_ButtonDraw
    _LCD_ButtonDraw->_LCD_DrawText
    _LCD_ButtonUpdate->_LCD_DrawRect
    _LCD_Bitmap->___lwdiv
    ___lwdiv->___wmul
    _Score_draw->_LCD_DrawText
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->___aodiv
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _LCD_DrawText->___wmul
    ___wmul->___awdiv
    _Paddle_draw->_LCD_DrawRect
    _Ball_draw->_LCD_DrawRect
    _XF_popEvent->___awmod

Critical Paths under _isr in COMRAM

    _isr->_XF_decrementAndQueueTimers
    _XF_decrementAndQueueTimers->i2_XF_pushEvent
    i2_XF_unscheduleTimer->i2_ENTERCRITICAL
    i2_XF_unscheduleTimer->i2_LEAVECRITICAL
    i2_XF_pushEvent->i2___awmod

Critical Paths under _main in BANK0

    _main->_Factory_exec
    _Factory_init->_sleepInit
    _sleepInit->_displayInit
    _displayInit->_displayController
    _Factory_exec->_touchScreenSM
    _touchScreenSM->_touchScreenController
    _touchScreenController->_sprintf
    _displaySM->_displayController
    _displayController->_Menu_endGame
    _Menu_welcomeDraw->_LCD_ButtonDraw
    _Menu_parametersDraw->_LCD_ButtonDraw
    _Menu_endGame->_LCD_ButtonDraw
    _LCD_ButtonDraw->_LCD_Bitmap
    _Menu_inGameDraw->_Score_draw
    _Score_draw->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  698832
                       _Factory_exec
                       _Factory_init
 ---------------------------------------------------------------------------------
 (1) _Factory_init                                         2     2      0  319921
                                             69 BANK0      2     2      0
                _GameParameters_init
                       _LCD_DrawText
                           _LCD_Fill
                           _LCD_Init
                            _XF_init
                          _sleepInit
 ---------------------------------------------------------------------------------
 (2) _sleepInit                                            2     0      2  296743
                                             67 BANK0      2     0      2
                        _displayInit
                 _gameControllerInit
                    _sleepController
                    _touchScreenInit
 ---------------------------------------------------------------------------------
 (3) _touchScreenInit                                      0     0      0    1974
                   _XF_scheduleTimer
                        _configTouch
 ---------------------------------------------------------------------------------
 (3) _gameControllerInit                                   2     0      2   51605
                                             59 COMRAM     2     0      2
           _gameControllerController
 ---------------------------------------------------------------------------------
 (3) _displayInit                                          2     0      2  243012
                                             65 BANK0      2     0      2
                  _displayController
 ---------------------------------------------------------------------------------
 (2) _XF_init                                              2     2      0     229
                                             17 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             2     2      0      90
                                             22 COMRAM     2     2      0
                  _LCD_Lowlevel_Init
 ---------------------------------------------------------------------------------
 (3) _LCD_Lowlevel_Init                                    5     5      0      60
                                             17 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (1) _Factory_exec                                         1     1      0  378911
                                             79 BANK0      1     1      0
                        _XF_popEvent
                          _displaySM
                   _gameControllerSM
                            _sleepSM
                      _touchScreenSM
 ---------------------------------------------------------------------------------
 (2) _touchScreenSM                                        5     3      2   29508
                                             66 COMRAM     3     3      0
                                             77 BANK0      2     0      2
              _touchScreenController
 ---------------------------------------------------------------------------------
 (3) _touchScreenController                               34    32      2   29232
                                             43 BANK0     34    32      2
                _GameParameters_setX
                _GameParameters_setY
                       _LCD_DrawText
                   _XF_scheduleTimer
                 _XF_unscheduleTimer
                            ___fldiv
                            ___fltol
                           ___xxtofl
                      _configMeasure
                        _configTouch
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _configMeasure                                        1     1      0      62
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) ___xxtofl                                            14    10      4     566
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             10     6      4     427
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fldiv                                             25    17      8    2003
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) _XF_unscheduleTimer                                   2     1      1     331
                                             18 COMRAM     2     1      1
                      _ENTERCRITICAL
                      _LEAVECRITICAL
 ---------------------------------------------------------------------------------
 (4) _GameParameters_setY                                  4     0      4     242
                                             17 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (4) _GameParameters_setX                                  4     0      4     242
                                             17 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _sleepSM                                              3     3      0      31
                                             19 COMRAM     3     3      0
                    _sleepController
 ---------------------------------------------------------------------------------
 (3) _sleepController                                      2     2      0       0
                                             17 COMRAM     2     2      0
                     _configPinSleep
 ---------------------------------------------------------------------------------
 (4) _configPinSleep                                       0     0      0       0
                        _configTouch
 ---------------------------------------------------------------------------------
 (4) _configTouch                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _gameControllerSM                                     5     3      2   53920
                                             59 COMRAM     5     3      2
                   _XF_scheduleTimer
           _gameControllerController
 ---------------------------------------------------------------------------------
 (4) _gameControllerController                             5     2      3   51484
                                             54 COMRAM     5     2      3
                _GameParameters_init
            _GameParameters_resetPos
                       _LCD_InButton
                       _LCD_InSlider
                   _LCD_SliderUpdate
                       _XF_pushEvent
                   _XF_scheduleTimer
                _backlightController
                    _levelController
                          _mooveBall
                       _moovePaddle1
                       _moovePaddle2
 ---------------------------------------------------------------------------------
 (5) _moovePaddle2                                         8     6      2    3728
                                             27 COMRAM     8     6      2
                        _Paddle_addX
                       _XF_pushEvent
 ---------------------------------------------------------------------------------
 (5) _moovePaddle1                                         4     2      2    4411
                                             27 COMRAM     4     2      2
            _GameParameters_resetPos
                        _Paddle_addX
                       _XF_pushEvent
 ---------------------------------------------------------------------------------
 (6) _Paddle_addX                                         10     4      6    1176
                                             17 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (6) _GameParameters_resetPos                              2     0      2     652
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _mooveBall                                            2     0      2    7482
                                             36 COMRAM     2     0      2
                        _Ball_Update
                       _XF_pushEvent
                     _checkCollision
 ---------------------------------------------------------------------------------
 (6) _checkCollision                                      30    28      2    4846
                                             26 COMRAM    10     8      2
                       _XF_pushEvent
 ---------------------------------------------------------------------------------
 (6) _XF_pushEvent                                         3     2      1    2276
                                             23 COMRAM     3     2      1
                      _ENTERCRITICAL
                      _LEAVECRITICAL
                            ___awmod
 ---------------------------------------------------------------------------------
 (6) _Ball_Update                                          6     4      2     208
                                             17 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _levelController                                      4     2      2     774
                                             21 COMRAM     4     2      2
            _GameParameters_setLevel
 ---------------------------------------------------------------------------------
 (6) _GameParameters_setLevel                              4     0      4     500
                                             17 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (5) _backlightController                                  4     2      2    2824
                                             23 COMRAM     4     2      2
        _GameParameters_setBackLight
 ---------------------------------------------------------------------------------
 (6) _GameParameters_setBackLight                          6     2      4    1912
                                             17 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _XF_scheduleTimer                                     5     1      4    1974
                                             18 COMRAM     5     1      4
                      _ENTERCRITICAL
                      _LEAVECRITICAL
 ---------------------------------------------------------------------------------
 (5) _LCD_InSlider                                        10     4      6     676
                                             17 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (5) _LCD_InButton                                        10     4      6    1360
                                             17 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (5) _GameParameters_init                                  2     0      2    8958
                                             42 COMRAM     2     0      2
                          _Ball_init
                   _LCD_ButtonCreate
                   _LCD_SliderCreate
                        _Paddle_init
                         _Score_init
 ---------------------------------------------------------------------------------
 (6) _Score_init                                           2     0      2     120
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (6) _Paddle_init                                          4     0      4     502
                                             17 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (6) _LCD_SliderCreate                                    22     0     22    2156
                                             17 COMRAM    22     0     22
 ---------------------------------------------------------------------------------
 (6) _LCD_ButtonCreate                                    25     0     25    5490
                                             17 COMRAM    25     0     25
 ---------------------------------------------------------------------------------
 (6) _Ball_init                                            2     0      2     186
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _displaySM                                            5     3      2  294471
                                             65 BANK0      5     3      2
                    _Menu_inGameDraw
                  _displayController
 ---------------------------------------------------------------------------------
 (4) _displayController                                    5     2      3  242891
                                             60 BANK0      5     2      3
                          _Ball_draw
                       _LCD_DrawRect
                       _Menu_endGame
                _Menu_parametersDraw
                   _Menu_welcomeDraw
                        _Paddle_draw
                         _Score_draw
 ---------------------------------------------------------------------------------
 (5) _Menu_welcomeDraw                                     2     0      2   55768
                                             67 COMRAM     2     0      2
                     _LCD_ButtonDraw
                       _LCD_DrawText
                           _LCD_Fill
 ---------------------------------------------------------------------------------
 (5) _Menu_parametersDraw                                  2     0      2   79661
                                             68 COMRAM     2     0      2
                     _LCD_ButtonDraw
                       _LCD_DrawText
                           _LCD_Fill
                     _LCD_SliderDraw
 ---------------------------------------------------------------------------------
 (6) _LCD_SliderDraw                                      14    12      2   23769
                                             54 COMRAM    14    12      2
                       _LCD_DrawRect
                   _LCD_SliderUpdate
 ---------------------------------------------------------------------------------
 (5) _LCD_SliderUpdate                                    16    14      2   14291
                                             38 COMRAM    16    14      2
                       _LCD_DrawRect
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _Menu_endGame                                         4     2      2   55737
                                             67 COMRAM     2     0      2
                                             58 BANK0      2     2      0
                     _LCD_ButtonDraw
                       _LCD_DrawText
                           _LCD_Fill
 ---------------------------------------------------------------------------------
 (6) _LCD_ButtonDraw                                      32    30      2   41684
                                             65 COMRAM     2     0      2
                                             28 BANK0     30    30      0
                         _LCD_Bitmap
                   _LCD_ButtonUpdate
                       _LCD_DrawRect
                       _LCD_DrawText
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _LCD_ButtonUpdate                                    18    16      2    9996
                                             36 COMRAM    18    16      2
                       _LCD_DrawRect
                           _LCD_Read
 ---------------------------------------------------------------------------------
 (8) _LCD_Read                                            10     6      4     405
                                             17 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (7) _LCD_Bitmap                                          38    32      6    7149
                                             38 COMRAM    10     4      6
                                              0 BANK0     28    28      0
                            _RGB2LCD
                            ___lwdiv
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) ___lwmod                                              5     1      4     311
                                             17 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     706
                                             31 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (8) _RGB2LCD                                             14    12      2     386
                                             17 COMRAM    14    12      2
 ---------------------------------------------------------------------------------
 (3) _Menu_inGameDraw                                      2     0      2   50901
                                             45 BANK0      2     0      2
                          _Ball_draw
                       _LCD_DrawRect
                           _LCD_Fill
                        _Paddle_draw
                         _Score_draw
 ---------------------------------------------------------------------------------
 (5) _Score_draw                                           2     0      2   22841
                                             43 BANK0      2     0      2
                       _LCD_DrawText
                            _sprintf
 ---------------------------------------------------------------------------------
 (6) _sprintf                                             15     9      6    9137
                                             30 BANK0     13     7      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (7) _vfprintf                                             6     2      4    8111
                                             63 COMRAM     2     2      0
                                             26 BANK0      4     0      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (8) _vfpfcnvrt                                           37    34      3    7638
                                             60 COMRAM     3     0      3
                                             18 BANK0      8     8      0
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (9) _dtoa                                                35    26      9    5863
                                             43 COMRAM    17     8      9
                                              0 BANK0     18    18      0
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (10) _pad                                                 9     5      4    3597
                                             30 COMRAM     9     5      4
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (11) _fputs                                               5     3      2    1537
                                             25 COMRAM     5     3      2
                              _fputc
 ---------------------------------------------------------------------------------
 (9) _fputc                                                8     5      3    1037
                                             17 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (10) _putch                                               1     1      0       0
 ---------------------------------------------------------------------------------
 (10) _abs                                                 4     2      2     183
                                             35 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (10) ___aomod                                            18     2     16     613
                                             17 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (10) ___aodiv                                            26    10     16     625
                                             17 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (6) _LCD_DrawText                                        34    21     13   13338
                                             31 COMRAM    34    21     13
                            ___awdiv
                             ___wmul
                             _strlen
 ---------------------------------------------------------------------------------
 (11) _strlen                                              4     2      2     400
                                             17 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    2958
                                             25 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     625
                                             17 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) _Paddle_draw                                          6     4      2    9349
                                             36 COMRAM     6     4      2
                       _LCD_DrawRect
 ---------------------------------------------------------------------------------
 (6) _LCD_Fill                                             8     6      2     563
                                             17 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (5) _Ball_draw                                           10     8      2    9175
                                             36 COMRAM    10     8      2
                       _LCD_DrawRect
 ---------------------------------------------------------------------------------
 (6) _LCD_DrawRect                                        19     8     11    8759
                                             17 COMRAM    19     8     11
 ---------------------------------------------------------------------------------
 (2) _XF_popEvent                                          2     2      0     823
                                             23 COMRAM     2     2      0
                      _ENTERCRITICAL
                      _LEAVECRITICAL
                            ___awmod
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4     600
                                             17 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _LEAVECRITICAL                                        1     1      0      31
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _ENTERCRITICAL                                        1     1      0      31
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (14) _isr                                                 4     4      0    1542
                                             13 COMRAM     4     4      0
         _XF_decrementAndQueueTimers
                     i2_XF_pushEvent
 ---------------------------------------------------------------------------------
 (15) _XF_decrementAndQueueTimers                          4     4      0     939
                                              9 COMRAM     4     4      0
                     i2_XF_pushEvent
               i2_XF_unscheduleTimer
 ---------------------------------------------------------------------------------
 (16) i2_XF_unscheduleTimer                                2     1      1     158
                                              1 COMRAM     2     1      1
                    i2_ENTERCRITICAL
                    i2_LEAVECRITICAL
 ---------------------------------------------------------------------------------
 (15) i2_XF_pushEvent                                      3     2      1     603
                                              6 COMRAM     3     2      1
                    i2_ENTERCRITICAL
                    i2_LEAVECRITICAL
                          i2___awmod
 ---------------------------------------------------------------------------------
 (16) i2___awmod                                           6     2      4     348
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (16) i2_LEAVECRITICAL                                     1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (16) i2_ENTERCRITICAL                                     1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Factory_exec
     _XF_popEvent
       _ENTERCRITICAL
       _LEAVECRITICAL
       ___awmod
     _displaySM
       _Menu_inGameDraw
         _Ball_draw
           _LCD_DrawRect
         _LCD_DrawRect
         _LCD_Fill
         _Paddle_draw
           _LCD_DrawRect
         _Score_draw
           _LCD_DrawText
             ___awdiv
             ___wmul
               ___awdiv (ARG)
             _strlen
           _sprintf
             _vfprintf
               _vfpfcnvrt
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _putch
                     _fputs
                       _fputc
                     _strlen
                 _fputc
       _displayController
         _Ball_draw
         _LCD_DrawRect
         _Menu_endGame
           _LCD_ButtonDraw
             _LCD_Bitmap
               _RGB2LCD
               ___lwdiv
                 ___wmul (ARG)
               ___lwmod
               ___wmul
             _LCD_ButtonUpdate
               _LCD_DrawRect
               _LCD_Read
             _LCD_DrawRect
             _LCD_DrawText
             _strlen
           _LCD_DrawText
           _LCD_Fill
         _Menu_parametersDraw
           _LCD_ButtonDraw
           _LCD_DrawText
           _LCD_Fill
           _LCD_SliderDraw
             _LCD_DrawRect
             _LCD_SliderUpdate
               _LCD_DrawRect
               ___lwdiv
               ___wmul
         _Menu_welcomeDraw
           _LCD_ButtonDraw
           _LCD_DrawText
           _LCD_Fill
         _Paddle_draw
         _Score_draw
     _gameControllerSM
       _XF_scheduleTimer
         _ENTERCRITICAL
         _LEAVECRITICAL
       _gameControllerController
         _GameParameters_init
           _Ball_init
           _LCD_ButtonCreate
           _LCD_SliderCreate
           _Paddle_init
           _Score_init
         _GameParameters_resetPos
         _LCD_InButton
         _LCD_InSlider
         _LCD_SliderUpdate
         _XF_pushEvent
           _ENTERCRITICAL
           _LEAVECRITICAL
           ___awmod
         _XF_scheduleTimer
         _backlightController
           _GameParameters_setBackLight
         _levelController
           _GameParameters_setLevel
         _mooveBall
           _Ball_Update
           _XF_pushEvent
           _checkCollision
             _XF_pushEvent
         _moovePaddle1
           _GameParameters_resetPos
           _Paddle_addX
           _XF_pushEvent
         _moovePaddle2
           _Paddle_addX
           _XF_pushEvent
     _sleepSM
       _sleepController
         _configPinSleep
           _configTouch
     _touchScreenSM
       _touchScreenController
         _GameParameters_setX
         _GameParameters_setY
         _LCD_DrawText
         _XF_scheduleTimer
         _XF_unscheduleTimer
           _ENTERCRITICAL
           _LEAVECRITICAL
         ___fldiv
           ___xxtofl (ARG)
         ___fltol
           ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _configMeasure
         _configTouch
         _sprintf
   _Factory_init
     _GameParameters_init
     _LCD_DrawText
     _LCD_Fill
     _LCD_Init
       _LCD_Lowlevel_Init
     _XF_init
     _sleepInit
       _displayInit
         _displayController
       _gameControllerInit
         _gameControllerController
       _sleepController
       _touchScreenInit
         _XF_scheduleTimer
         _configTouch

 _isr (ROOT)
   _XF_decrementAndQueueTimers
     i2_XF_pushEvent
       i2_ENTERCRITICAL
       i2_LEAVECRITICAL
       i2___awmod
     i2_XF_unscheduleTimer
       i2_ENTERCRITICAL
       i2_LEAVECRITICAL
   i2_XF_pushEvent

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      D8       6       84.4%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     50      9B       4       96.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     46      4D       1       81.9%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1C0       9        0.0%
DATA                 0      0     1C0      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Tue Sep 07 15:42:20 2021

                      _LCD_ButtonDraw 0E4E                           ?_LCD_Bitmap 0027  
                        ___fldiv@aexp 0038                          ___fldiv@bexp 0037  
                    _LCD_ButtonCreate 3E86                          ___fldiv@sign 0030  
                        ?_displayInit 00A1                  __end_of_Factory_exec 5440  
                __end_of_Factory_init 4624                                    _g1 0100  
                        ___awdiv@sign 0017               __end_of_sleepController 574E  
                   ??i2_ENTERCRITICAL 0001              __end_of_Menu_welcomeDraw 50C2  
                 ___wmul@multiplicand 001C                  backlightController@g 0018  
                    _LCD_ButtonUpdate 318C                         ?_LCD_InButton 0012  
                       ?_LCD_InSlider 0012                         ?_LCD_DrawRect 0012  
                       ?_LCD_DrawText 0020                                   l226 4814  
                                 l315 1A42                                   l340 0B38  
                                 l318 1A60                                   l345 0B7C  
                                 l290 2668                                   l283 25BE  
                                 l348 0BB2                                   l293 26BA  
                                 l285 25C8                                   l296 2748  
                                 l544 2D54                                   l538 2CF4  
                                 l299 27AA                                   l812 010E  
                                 l548 2E02                                   l813 01B6  
                                 l670 223C                                   l671 2290  
                                 l818 04E2                                   l829 082A  
                                 l858 1E46                                   l778 58EC  
                                 l799 48E6                                   _GIE 007F97  
                                 _PR2 000FBB                                   _abs 56C0  
                                 _pad 4F5C                                   _isr 0008  
                configMeasure@channel 0012                       ??_ENTERCRITICAL 0012  
                        ___awmod@sign 0017                                   wreg 000FE8  
              __size_of_touchScreenSM 005E                       __end_of_RGB2LCD 4798  
                        ___fltol@exp1 0042                      _touchScreenState 00D9  
                         _Ball_Update 4EDA                         ??_Paddle_addX 0018  
                                ?_abs 0024                                  l1365 534E  
                                l1470 2C46                                  l1375 54C0  
                                l1536 3846                                  l1529 37C8  
                                l1458 2BDC                                  l1628 56E8  
                                l1469 2C4A                                  l1590 2FD0  
                                l4150 27E0                                  l1592 2FD8  
                                l1579 4F82                                  l5400 25DC  
                                l5320 2526                                  l7010 1DFE  
                                l5404 25EC                                  l5324 254A  
                                l7004 1DB4                                  l5406 25FA  
                                l6142 3240                                  l7030 4470  
                                ?_pad 001F                                  l7032 4484  
                                l7024 4426                                  l5516 26CE  
                                l5640 27BE                                  l5480 267C  
                                l8202 3768                                  l9002 049E  
                                l6460 4AAC                                  l9020 06CC  
                                l3980 4D6A                                  l6542 480C  
                                l8230 3C00                                  l8222 3BA4  
                                l8214 3B66                                  l8302 30F4  
                                l9006 04FE                                  l5592 275C  
                                l8224 3BB8                                  l8136 4CCA  
                                l8160 570E                                  l9024 076A  
                                l9016 064C                                  l9032 0846  
                                l6472 450C                                  l3992 4DA4  
                                l5850 5110                                  l5842 50F0  
                                l5834 50D6                                  l8146 5516  
                                l8170 366E                                  l8234 3C16  
                                l8218 3B8A                                  l8250 4F7A  
                                l8322 3158                                  l9202 40D8  
                                l9114 52BE                                  l5844 50F8  
                                l8148 551A                                  l8156 56FC  
                                l8260 4FC4                                  l8252 4F8C  
                                l9212 4130                                  l6628 55B0  
                                l9028 07E6                                  l6476 453E  
                                l9132 48A0                                  l9220 21E8  
                                ?_isr 0001                                  l5854 511A  
                                l5838 50E2                                  l8182 36BC  
                                l8238 3C3C                                  l8246 4F6C  
                                l8326 316C                                  l8414 35F6  
                                l5870 5324                                  l9118 52F6  
                                l9038 08B8                                  l9142 41D4  
                                l9302 2AD6                                  l8352 4E6A  
                                l8440 17AE                                  l8184 36D0  
                                l8176 3696                                  l8256 4FA0  
                                l8408 35C2                                  l8424 3616  
                                l5880 5344                                  l9208 4122  
                                l9400 2CEA                                  l9320 2B24  
                                l5858 5128                                  l8450 17F4  
                                l8434 1710                                  l8194 372C  
                                l8274 2FB4                                  l8418 3600  
                                l5890 549E                                  l9250 241E  
                                l9242 23B2                                  l9234 234C  
                                l9314 2B0E                                  l9306 2ADA  
                                l8364 4E90                                  l8380 4EC2  
                                l8540 1980                                  l8292 3000  
                                l5868 531C                                  l9228 22E6  
                                l8366 4E98                                  l8358 4E7A  
                                l8446 17D6                                  l8198 3742  
                                l9086 4B4E                                  l9190 408C  
                                l6950 1B1A                                  l9246 2408  
                                l9430 468C                                  l9414 4642  
                                l8384 4ED0                                  l8376 4EB8  
                                l8544 19BC                                  l8288 2FF2  
                                l5896 54B6                                  l5888 5496  
                                l8800 0CDE                                  l8608 15B4  
                                l6856 49B2                                  l9256 2470  
                                l9264 24CA                                  l9352 2BDA  
                                l9328 2B3C                                  l9440 46A4  
                                l8554 1A54                                  l9194 40A4  
                                l9186 4070                                  l6962 1BAE  
                                l9346 2BB4                                  l9338 2B8C  
                                l9282 2A96                                  l9442 46B0  
                                l9434 469C                                  l9178 556C  
                                l9188 407E                                  l6884 490A  
                                l6980 1C8C                                  l6956 1B64  
                                l9524 5724                                  l9364 2C10  
                                l9540 2D10                                  l8902 5452  
                                l8830 0DAE                                  l8742 0B12  
                                l9198 40BE                                  l6974 1C42  
                                l9358 2BF2                                  l9286 2A9A  
                                l9470 382E                                  l9550 2D36  
                                l9606 4FE4                                  l8568 1A7A  
                                l8904 546C                                  l8824 0D6C  
                                l8752 0B4C                                  l9720 4BC8  
                                l6992 1D20                                  l6968 1BF8  
                                l9528 572E                                  l9392 2CDC  
                                l9384 2C8E                                  l9448 46CC  
                                l9464 37F6                                  l9560 2D80  
                                l8850 0E18                                  l8818 0D38  
                                l8762 0B90                                  l8746 0B26  
                                l8586 13D0                                  l9722 4BDA  
                                l9706 4B8A                                  l6986 1CD6  
                                l9466 37FC                                  l9458 37D8  
                                l9570 2E2E                                  l9546 2D18  
                                l9618 500C                         ??_Paddle_draw 0027  
                                l8836 0E00                                  l8772 0BFE  
                                l8828 0D74                                  l8932 0F7E  
                                l9716 4BBA                                  l9660 5660  
                                l9388 2CB2                                  l9476 386C  
                                l9468 3808                                  l8790 0C6C  
                                l8758 0B72                                  l8854 0E32  
                                l6998 1D6A                                  l9398 2CE8  
                                l9494 38B8                                  l9478 3878  
                                l9648 53C6                                  l8776 0C54  
                                l8768 0BC6                                  l8960 12F6  
                                l8944 10F2                                  l9736 4BF2  
                                l9728 4BE6                                  l9744 4BF6  
                                l9760 4264                                  l9592 2F3E  
                                l8954 1216                                  l9754 4248  
                                l9690 5238                                  l9682 5212  
                                l8796 0CBA                                  l8948 115E  
                                l9772 42A2                                  l9668 5672  
                                l9684 5220                                  l8990 0304  
                                l9782 42CE                                  l9678 5208  
                 __end_of_XF_popEvent 53F8                                  STR_1 7FBD  
                                l8888 529A                                  l9696 5242  
                                STR_2 7FED                                  STR_3 7FED  
                                l8994 0384                                  l9778 42C0  
                                STR_4 7FB2                                  STR_5 7FD0  
                                l9788 42E0                                  STR_6 7FD9  
                                STR_7 7FFC                                  l8998 0422  
                                STR_8 7FC7                                  STR_9 7FE2  
                       ??_Paddle_init 0016                                  _LATA 000F89  
                                u2370 4D94                                  u4220 49AE  
                                u2380 4DD0                                  u3335 3970  
                                u6000 3136                                  u3520 5328  
                                u4400 1C12                                  u4320 1AEA  
                                u3345 39B4                                  u3355 475C  
                                u6020 3142                                  u4260 4906  
                                u4500 1D84                                  u4420 1C5C  
                                u4340 1B34                                  u3365 4770  
                                u3550 54A2                                  u3480 50FC  
                                u6200 182E                                  u4520 1DCE  
                                u4440 1CA6                                  u4360 1B7E  
                                u6140 355A                                  u4540 1E18  
                                u4460 1CF0                                  u4380 1BC8  
                                u7100 2C9C                                  u6214 1A24  
                                u7110 2CC0                                  u6215 1A1E  
                                u6207 1824                                  u6160 1756  
                                u3760 329A                                  u4480 1D3A  
                                u4560 43F6                                  u6321 09F0  
                                u6090 4E9C                                  u7130 4630  
                                u6260 1AC8                                  u4580 4440  
                                u6500 015E                                  u3940 44FA  
                                u7060 2C40                                  u7140 4660  
                                u7310 2D4C                                  u6167 174C  
                                u6511 0202                                  u3960 4834  
                                u7145 4656                                  u5810 3BBC  
                                u5650 4CC2                                  u6450 0F06  
                                u6267 1ABE                                  u5731 369C  
                                u5900 2F88                                  u7180 46B6  
                                u7260 3882                                  u5750 36D4  
                                u5670 4D04                                  u5680 553A  
                                u6720 48BA                                  u5930 2FC6  
                                u7450 4B9A                                  u6490 00B6  
                                u7370 5004                                  u7380 5044  
                                u6581 054A                                  u5950 2FEC  
                                u5687 5530                                  u5880 56CE  
                                u5960 3102                                  u5890 2F86  
                                u6690 52FE                                  u5980 3124  
                                u5981 3122                                  u7557 457A  
                                _RBPU 007F8F                                  u5990 3132  
                                u7567 27E6                                  u7577 4D70  
                                u7587 4DAA                                  _WPUB 000F61  
                         displaySM@ev 00A5                           LCD_Bitmap@i 007A  
                                abs@a 0024                                  _dbuf 00DB  
                     ?_checkCollision 001B             __size_of_LCD_SliderCreate 00EE  
                                _main 58E8                                  _dtoa 2F5E  
                    _XF_scheduleTimer 52B4                                  _prec 0049  
                                _nout 00D6                                  pad@i 0024  
                                pad@p 0021                                  fsr1h 000FE2  
                                fsr2h 000FDA                                  indf1 000FE7  
                                indf2 000FDF                                  fsr1l 000FE1  
                                pad@w 0026                                  fsr2l 000FD9  
                                btemp 004E                      Menu_inGameDraw@g 008D  
                      touchScreenSM@g 00AD                                  prodh 000FF4  
                                prodl 000FF3      __end_of_arialNarrow_12ptFontInfo 7F82  
                                start 006E                           RGB2LCD@blue 001C  
              __end_of_LCD_ButtonDraw 1304             __size_of_LCD_SliderUpdate 0402  
                     ___fldiv@new_exp 0031                        _LCD_SliderDraw 3D78  
                  LCD_InSlider@slider 0012                       __end_of_XF_init 5050  
                        ___param_bank 000000                      _gameStateMachine 004D  
              LCD_ButtonCreate@height 0018                    XF_scheduleTimer@ev 0015  
                  XF_scheduleTimer@tm 0013                LCD_ButtonCreate@button 0028  
                               ??_abs 0026                                 ??_pad 0023  
                               ??_isr 000E                      __end_of_LCD_Fill 4846  
                      ??_LCD_InButton 0018                      __end_of_LCD_Init 2A6A  
                    __end_of_LCD_Read 3A08                        ??_LCD_InSlider 0018  
                      ??_LCD_DrawRect 001D           LCD_SliderCreate@cursorWidth 0020  
                      ??_LCD_DrawText 002D                         ___fltol@sign1 0041  
                     __end_of___aodiv 378A                                 ?_main 0001  
                               ?_dtoa 002C                       __end_of___aomod 3C5E  
                     LCD_ButtonDraw@i 0097                       __end_of___fldiv 2CF2  
                     __end_of___awdiv 4EDA                                 STR_10 7F9C  
                               STR_11 7FA7                                 STR_12 7FF6  
                               STR_13 7F8F                                 STR_14 7F82  
                               STR_15 7FEA                                 STR_16 7FF0  
                     __end_of___awmod 5132                                 _ANSB1 0079C9  
                               _ANSB2 0079CA                       __end_of___fltol 46DE  
                               _T0CON 000FD5                       ___awdiv@divisor 0014  
                               _LATB1 007C51                                 _LATC0 007C58  
                               _LATB2 007C52                                 _LATB3 007C53  
                               _LATC2 007C5A                                 _LATB4 007C54  
                               _LATC3 007C5B                                 _LATC4 007C5C  
                               _LATC5 007C5D                       __end_of___lwdiv 5358  
                     __end_of___lwmod 54CA                                 i2l773 005A  
                               i2l769 0034                       ___awdiv@counter 0016  
                               _PLLEN 007CDE                          vfpfcnvrt@fmt 003E  
                               _TMR0H 000FD7                                 _TMR0L 000FD6  
                               _PORTA 000F80                       ??_configMeasure 0012  
                               _TRISA 000F92                                 _TRISC 000F94  
        __end_ofi2_XF_unscheduleTimer 562A                   LCD_Bitmap@bfOffBits 0060  
                        LCD_Fill@page 0018                                 _flags 004B  
                        displayInit@g 00A1                                 _fputc 4CB6  
                               _theXF 00B0                                 _fputs 56F2  
              LCD_ButtonDraw@tempChar 0088                   __size_of_LCD_Bitmap 0532  
                               pad@fp 001F                                 _width 0047  
                               _putch 58F2                                 dtoa@d 002D  
                               dtoa@i 0070                                 dtoa@n 0068  
                               dtoa@p 0062                                 dtoa@s 0066  
                               dtoa@w 0064                  __end_of_XF_pushEvent 52B4  
                     __end_of_sleepSM 568E                          Paddle_addX@p 0012  
                               tablat 000FF5            ??_gameControllerController 003A  
                     touchScreenSM@ev 0045                                 plusw2 000FDB  
         ?_XF_decrementAndQueueTimers 0001                                 ttemp5 004F  
                               ttemp6 0052                                 ttemp7 0056  
                               status 000FD8                                 wtemp8 004F  
                        Paddle_draw@p 0025                       __end_of_sprintf 550C  
                        RGB2LCD@color 001E                          RGB2LCD@green 001A  
              __end_of_LCD_SliderDraw 3E86                         ?_Menu_endGame 0044  
                        Paddle_init@p 0012              __size_of_touchScreenInit 0020  
             LCD_ButtonCreate@bgColor 001C                    __size_ofi2___awmod 0070  
                 __end_of_Paddle_addX 4568                       ?_LCD_ButtonDraw 0042  
                   ?_gameControllerSM 003C                   __end_of_Paddle_draw 3B3A  
                       _touchScreenSM 5204                   __end_of_Paddle_init 4AE6  
                  __size_of_Ball_draw 0156                          LCD_Read@posX 0012  
                        LCD_Read@posY 0014                    __size_of_Ball_init 0062  
                     __initialization 562A                       _levelController 43DC  
                  ??_gameControllerSM 003E                          __end_of_main 58F2  
                        __end_of_dtoa 318C               LCD_ButtonCreate@fpPress 0022  
              touchScreenController@g 008B                touchScreenController@i 00A7  
              touchScreenController@s 0093                      ?_sleepController 0001  
                    i2XF_pushEvent@ev 0008                i2XF_unscheduleTimer@id 0003  
                              ??_main 0047                                ??_dtoa 0035  
        GameParameters_setLevel@value 0014                         __activetblptr 000002  
                           ??_RGB2LCD 0014                           _XF_popEvent 53AA  
                              _ADCON0 000FC2                                _ADCON2 000FC0  
                    LCD_ButtonDraw@x1 008B                      LCD_ButtonDraw@x2 008D  
                    LCD_ButtonDraw@y1 008F                      LCD_ButtonDraw@y2 0091  
                              ?_fputc 0012                                ?_fputs 001A  
                              _ADRESH 000FC4                                _ADRESL 000FC3  
                              _CCPR2L 000F67                      ___awdiv@dividend 0012  
             _GameParameters_setLevel 58A2                                ?_putch 0001  
                              _INT1IE 007F83                                _INT1IF 007F80  
                  LCD_DrawRect@colorH 0021                    LCD_DrawRect@colorL 0022  
             _GameParameters_resetPos 574E                                i2l7540 5180  
                              i2l7532 5160                                i2l7524 5146  
                              i2l7534 5168                                i2l7544 518A  
                              i2l7528 5152                                i2l7548 5198  
                              i2l7762 5390                                i2l7860 4C8A  
                              i2l7852 4C2A                                i2l7862 4C9E  
                              i2l7880 0046                                _OSCCON 000FD3  
                           ??_XF_init 0012                                _TMR0IE 007F95  
                              _TMR0IF 007F92                                _TMR2IF 007CF1  
                      ??_Menu_endGame 009A                                _TRISB1 007C99  
                              _TRISC0 007CA0                                _TRISB2 007C9A  
                              _TRISC1 007CA1                                _TRISB3 007C9B  
                              _TRISC2 007CA2                                _TRISB4 007C9C  
                              _TRISC3 007CA3                                _TRISC4 007CA4  
                              _TRISC5 007CA5                      __end_of___xxtofl 38CA  
                     ?_LCD_SliderDraw 0037                   i2XF_pushEvent@inISR 0007  
                LCD_DrawText@bg_color 002B                            _Score_draw 4310  
                          _Score_init 579E                        ?_touchScreenSM 00AD  
                    ??_configPinSleep 0012                       i2_LEAVECRITICAL 58D0  
               __size_of_Factory_exec 0048                 __size_of_Factory_init 00BC  
                        vfprintf@cfmt 0040                   LCD_Bitmap@jumpColor 0078  
                 LCD_Bitmap@jumpCount 0065                   _Menu_parametersDraw 3C5E  
                __size_of_configTouch 0022            __end_of_gameControllerInit 5860  
                           ??___aodiv 0022                             ??___aomod 0022  
                              ___wmul 57C4                             ??___fldiv 0028  
                           ??___awdiv 0016                             ??___awmod 0016  
                       LCD_Fill@color 0012                             ??___fltol 003D  
              LCD_ButtonUpdate@button 0025                             ??___lwdiv 0024  
                           ??___lwmod 0016            gameControllerController@ev 0039  
                LCD_DrawText@fontByte 0037          __size_of_GameParameters_init 0382  
                              clear_0 5630                                clear_1 563C  
                              clear_2 5648          __size_of_GameParameters_setX 0016  
        __size_of_GameParameters_setY 0016                      ___awdiv@quotient 0018  
           LCD_ButtonCreate@textOrBmp 001E                 _touchScreenController 2CF2  
                     ___awmod@divisor 0014                                isa$std 000001  
                     ___awmod@counter 0016                  __size_of_displayInit 0016  
                              pad@buf 0020                                dtoa@fp 002C  
                              _strlen 550C                         LCD_DrawRect@i 0023  
                       LCD_DrawRect@j 001D                                fputc@c 0012  
                              fputs@c 001C                                fputs@i 001D  
                              fputs@s 001A          ?_GameParameters_setBackLight 0012  
                       LCD_DrawText@i 003E                     __end_ofi2___awmod 51A2  
                       LCD_DrawText@x 0040                         LCD_DrawText@y 003D  
                LCD_DrawText@tempChar 003F                          __mediumconst 7836  
                              tblptrh 000FF7                             ??_sleepSM 0014  
                              tblptrl 000FF6                                tblptru 000FF8  
                   __end_of_Ball_draw 34F2                     __end_of_Ball_init 5204  
                ?_Menu_parametersDraw 0045                                putch@c 0001  
                    __end_of_vfprintf 5488                        i2___awmod@sign 0006  
                           ??_sprintf 0042              __end_of_LCD_ButtonCreate 3F80  
                         _Paddle_addX 44A6                          _Factory_exec 53F8  
                        _Factory_init 4568                           _Paddle_draw 3A08  
                         _Paddle_init 4A42                      XF_pushEvent@temp 001A  
                        ___xxtofl@arg 001C                 LCD_SliderCreate@width 0016  
                        ___xxtofl@exp 001B                          ___xxtofl@val 0012  
                __end_of_LCD_InButton 4A42                 LCD_SliderCreate@steps 0022  
            __end_of_LCD_ButtonUpdate 339C                            __accesstop 0060  
             __end_of__initialization 564E                             ?_LCD_Fill 0012  
                    _LCD_SliderCreate 3F80                             ?_LCD_Init 0001  
                           ?_LCD_Read 0012                  __end_of_LCD_InSlider 499A  
             __end_of_levelController 44A6                  __end_of_LCD_DrawRect 27CC  
                __end_of_LCD_DrawText 1AD0           __size_of_XF_unscheduleTimer 0034  
                     i2_ENTERCRITICAL 58DC                         ___rparam_used 000001  
                          ___fltol@f1 0039                         LCD_Read@color 0018  
                    _LCD_SliderUpdate 1304                    LEAVECRITICAL@inISR 0012  
                           LCD_Init@i 0018                        __pcstackCOMRAM 0001  
                        ??_LCD_Bitmap 002D                  i2_XF_unscheduleTimer 55F6  
                   ??_touchScreenInit 0018           __end_of_backlightController 1E64  
                       __end_of_fputc 4D46                         __end_of_fputs 5722  
                 gameControllerInit@g 003C            LCD_ButtonCreate@fpReleased 0024  
                       __end_of_putch 58F4                     LCD_Bitmap@biWidth 0076  
                   ?_Menu_welcomeDraw 0044                  LCD_Bitmap@endOfImage 0064  
            __end_of_XF_scheduleTimer 5306                    ??_Menu_welcomeDraw 0046  
                   LCD_Bitmap@curXPos 006D   __size_of_XF_decrementAndQueueTimers 0094  
                   LCD_Bitmap@curYPos 0067                 __size_of_XF_pushEvent 0052  
           ??_GameParameters_setLevel 0016                 ??_Menu_parametersDraw 0047  
       ??_GameParameters_setBackLight 0016                          Ball_Update@b 0012  
           ??_GameParameters_resetPos 0014               _arialNarrow_12ptBitmaps 7837  
                    ??_checkCollision 001D                    __size_of_displaySM 009C  
               __end_of_LEAVECRITICAL 58C4                    LCD_DrawText@offset 0033  
                             ??_fputc 0015                               ??_fputs 001C  
                        ?_Ball_Update 0012                               ??_putch 0012  
    __end_of_gameControllerController 24FA             gameControllerController@g 0037  
             __end_ofi2_LEAVECRITICAL 58DC                        XF_pushEvent@ev 0019  
                          __pbssBANK0 00B0                            __pbssBANK1 0100  
                  __end_of_LCD_Bitmap 0E4E                            ??_LCD_Fill 0014  
                          ??_LCD_Init 0017                       ??_touchScreenSM 0043  
                          ??_LCD_Read 0016              LCD_ButtonCreate@txtColor 001A  
                         ?_Score_draw 008B                           ?_Score_init 0012  
                  ENTERCRITICAL@inISR 0012              __size_of_Menu_inGameDraw 0084  
                         Score_draw@s 008B                           Score_init@s 0012  
               ?i2_XF_unscheduleTimer 0002                               ?___wmul 001A  
              ?_touchScreenController 008B                          _XF_pushEvent 5262  
                  __size_of_mooveBall 0032                    __size_of_sleepInit 0026  
                             ?_strlen 0012                  __end_of_Menu_endGame 4B86  
             __size_ofi2_XF_pushEvent 0052                               _RGB2LCD 46DE  
                             _INTEDG1 007F8D                  GameParameters_init@s 002B  
                           ?___xxtofl 0012                  GameParameters_setX@s 0012  
                GameParameters_setY@s 0012                    __size_of_vfpfcnvrt 0150  
               __end_of_ENTERCRITICAL 58D0                         ?_moovePaddle1 001C  
                       ?_moovePaddle2 001C               __end_ofi2_ENTERCRITICAL 58E8  
                    ??_LCD_ButtonDraw 007C                  Menu_parametersDraw@g 0045  
 __end_of_arialNarrow_12ptDescriptors 7F7B           _arialNarrow_12ptDescriptors 7E5E  
                             _XF_init 4FDC                   LCD_ButtonDraw@xText 0093  
                    ?_levelController 0016                   LCD_ButtonDraw@yText 0095  
                 LCD_ButtonDraw@width 0089                               __Hparam 0000  
                             __Lparam 0000                               ___aodiv 3642  
                   __end_of_displaySM 4C22                               ___aomod 3B3A  
                             ___fldiv 2A6A                               ___awdiv 4E56  
                             ___awmod 50C2                               ___fltol 4624  
                     __size_of___wmul 0026               LCD_ButtonUpdate@colorIn 002D  
                             ___lwdiv 5306                               ___lwmod 5488  
                           ?_vfprintf 007A                        LCD_Bitmap@newY 0074  
                      LCD_Bitmap@posX 0029                        LCD_Bitmap@posY 002B  
                      LCD_Fill@colorH 0014                        LCD_Fill@colorL 0015  
                             __pcinit 562A                        LCD_Fill@column 0016  
                             __ramtop 0600                               __ptext0 58E8  
                             __ptext1 4568                               __ptext2 5778  
                             __ptext3 580C                               __ptext4 584A  
                             __ptext5 5860                               __ptext6 4FDC  
                             __ptext7 27CC                               __ptext8 4D46  
                             __ptext9 53F8                       __size_of_strlen 0042  
           __size_of_gameControllerSM 00CC                             _T2CONbits 000FBA  
                        __size_of_abs 0032                          __size_of_pad 0080  
                        __size_of_isr 0066                          ?_XF_popEvent 0001  
                          ??___xxtofl 0016                  LCD_Bitmap@pixelCount 0073  
                 __size_of_Score_draw 00CC                      ___awmod@dividend 0012  
                 __size_of_Score_init 0026                 LCD_DrawText@fontPixel 0038  
                             _sleepSM 565C                 __end_of_configMeasure 558A  
               __size_of_LCD_InButton 00A8               XF_unscheduleTimer@inISR 0013  
                      ??_moovePaddle1 001E                        ??_moovePaddle2 001E  
               __size_of_LCD_InSlider 00A8                     Menu_welcomeDraw@g 0044  
               __size_of_LCD_DrawRect 02D2                               _sprintf 54CA  
               __size_of_LCD_DrawText 03CA                      ??_LCD_SliderDraw 0039  
                end_of_initialization 564E                      ?i2_LEAVECRITICAL 0001  
                 _GameParameters_init 1E64                   _GameParameters_setX 588C  
                 _GameParameters_setY 5876                     __end_of_mooveBall 56C0  
                             fputc@fp 0014                         __Lmediumconst 7836  
                             fputs@fp 001B                        Paddle_addX@add 0016  
                   __end_of_sleepInit 579E                   displayController@ev 009E  
              ??i2_XF_unscheduleTimer 0003                     __end_of_vfpfcnvrt 3642  
                          _sleepState 00DA                               postdec1 000FE5  
                             postdec2 000FDD                     _LCD_Lowlevel_Init 4D46  
                             postinc0 000FEE                               postinc1 000FE6  
                             postinc2 000FDE                            ??_vfprintf 0040  
   __size_of_gameControllerController 0314                  ?_GameParameters_init 002B  
           ?_gameControllerController 0037                     ??_Menu_inGameDraw 0042  
                ?_GameParameters_setX 0012                    ?_LCD_Lowlevel_Init 0001  
                ?_GameParameters_setY 0012                               strlen@a 0014  
                             strlen@s 0012                          _LCD_InButton 499A  
                           _PORTBbits 000F81              __end_of_LCD_SliderCreate 406E  
              LCD_SliderCreate@height 0018                          _LCD_InSlider 48F2  
                        _displayState 00D8                          _LCD_DrawRect 24FA  
                        _LCD_DrawText 1706                     XF_pushEvent@inISR 0018  
            __end_of_LCD_SliderUpdate 1706                      XF_popEvent@inISR 0019  
              LCD_SliderCreate@slider 0026                   ??_LCD_Lowlevel_Init 0012  
                       ___xxtofl@sign 001A                    _gameControllerInit 584A  
            __size_of_sleepController 002C                        Factory_exec@ev 00AF  
                         ___fldiv@grs 0033                           ___fldiv@rem 002C  
                           i2___awmod 5132                      ?i2_ENTERCRITICAL 0001  
                   ?_LCD_ButtonCreate 0012                          ?_Paddle_addX 0012  
                        ?_Paddle_draw 0025                             _Ball_draw 339C  
                        ?_Paddle_init 0012                             _Ball_init 51A2  
                 ?_gameControllerInit 003C                  __size_of_Ball_Update 0082  
                  ??_LCD_ButtonCreate 002B                     ?_LCD_ButtonUpdate 0025  
                     _touchScreenInit 580C                     _displayController 406E  
                         _CCP2CONbits 000F66                            displaySM@g 00A1  
                      LCD_Read@temp16 001A       __end_of_arialNarrow_12ptBitmaps 7E5E  
              RGB2LCD@colorTableEntry 0012                         ??_configTouch 0012  
                  ??_LCD_ButtonUpdate 0027                     __size_of_LCD_Fill 00AE  
                   __size_of_LCD_Init 029E                     __size_of_LCD_Read 013E  
                  ?_displayController 009C                            RGB2LCD@red 0018  
           __end_of_LCD_Lowlevel_Init 4DD2                    LCD_Lowlevel_Init@i 0013  
               LCD_ButtonCreate@fpOut 0026                     XF_scheduleTimer@i 0017  
               LCD_ButtonCreate@index 002A                 LCD_ButtonCreate@width 0016  
                       ??_displayInit 0047                 __size_of_Menu_endGame 00A0  
               ??_GameParameters_init 002D                 ??_GameParameters_setX 0016  
               ??_GameParameters_setY 0016                   ??_displayController 009F  
                         vfpfcnvrt@ap 003F                           vfpfcnvrt@fp 003D  
                         vfpfcnvrt@ll 0072                        __end_of___wmul 57EA  
                ??_gameControllerInit 003E                    LCD_Bitmap@biHeight 006B  
                XF_unscheduleTimer@id 0014                        i2_XF_pushEvent 5358  
                   ?_XF_scheduleTimer 0013                        __end_of_strlen 554E  
                       XF_popEvent@ev 0018                   start_initialization 562A  
                  ??_XF_scheduleTimer 0017                           __end_of_abs 56F2  
                  LCD_InButton@button 0012                           __end_of_pad 4FDC  
                         __end_of_isr 006E                 XF_scheduleTimer@inISR 0016  
                          ?i2___awmod 0001                            ?_Ball_draw 0025  
                          ?_Ball_init 0012             __end_of_displayController 415C  
           __size_of_Menu_welcomeDraw 0072            __end_of_XF_unscheduleTimer 55F6  
                        ??_Score_draw 0042                     LCD_DrawRect@color 001B  
                        _Menu_endGame 4AE6                          ??_Score_init 0014  
                   LCD_DrawRect@posX1 0012                     LCD_DrawRect@posX2 0016  
                   LCD_DrawRect@posY1 0014                     LCD_DrawRect@posY2 0018  
                  i2XF_pushEvent@temp 0009               ??_touchScreenController 008D  
                         vfprintf@fmt 007B                              ??___wmul 001E  
                __end_of_moovePaddle1 48F2                  __end_of_moovePaddle2 4244  
                 LCD_DrawText@yOffset 0035                   __end_of_configTouch 580C  
              __end_ofi2_XF_pushEvent 53AA                   LCD_DrawText@posXEnd 003B  
                 LCD_DrawText@posYEnd 0039              _arialNarrow_12ptFontInfo 7F7B  
         __end_of_Menu_parametersDraw 3D78               __size_of_configPinSleep 001E  
                            ??_strlen 0014                  LCD_SliderCreate@posX 0012  
                LCD_SliderCreate@posY 0014                      _gameControllerSM 4244  
                 __end_of_displayInit 5876                             ___fldiv@a 0024  
                           ___fldiv@b 0020                              ?_RGB2LCD 0012  
        __size_of_backlightController 0394                           __pbssCOMRAM 0047  
              LCD_SliderUpdate@slider 0027                         Menu_endGame@g 0044  
         XF_decrementAndQueueTimers@i 000C                         __pcstackBANK0 0060  
                  __end_of_Score_draw 43DC                  LCD_SliderDraw@slider 0037  
                  __end_of_Score_init 57C4                      ___aodiv@dividend 0012  
                  gameControllerSM@ev 0040               __end_of_touchScreenInit 582C  
                __size_of_XF_popEvent 004E                     __size_of___xxtofl 0140  
                       moovePaddle1@g 001C                         moovePaddle2@g 001C  
                    LCD_InButton@posX 0014                      LCD_InButton@posY 0016  
                    LCD_Bitmap@bmpPtr 0027                     LCD_DrawText@align 0024  
                            ?_XF_init 0001                     LCD_DrawText@color 0029  
                   ??_sleepController 0012                      LCD_Bitmap@strPtr 0071  
        ??_XF_decrementAndQueueTimers 000A                     LCD_DrawText@width 0041  
               __end_of_touchScreenSM 5262               LCD_Bitmap@colorTablePtr 0069  
                i2LEAVECRITICAL@inISR 0001                      LCD_SliderDraw@x1 003D  
                    LCD_SliderDraw@x2 003F                      LCD_SliderDraw@y1 0041  
                    LCD_SliderDraw@y2 0043            __size_of_LCD_Lowlevel_Init 008C  
                    ___lwdiv@dividend 0020                             _dtoa$5218 0060  
                           __pintcode 0008                         __pmediumconst 7836  
                            ?___aodiv 0012                              ?___aomod 0012  
                            ?___fldiv 0020                              ?___awdiv 0012  
                    ___aodiv@quotient 0024                              ?___awmod 0012  
                            ?___fltol 0039                              ?___lwdiv 0020  
                            ?___lwmod 0012                __size_of_LEAVECRITICAL 000C  
                     ?i2_XF_pushEvent 0007                             _displaySM 4B86  
                   __size_of_vfprintf 0048              ?_GameParameters_setLevel 0012  
 __end_of_GameParameters_setBackLight 55C2           _GameParameters_setBackLight 558A  
            ?_GameParameters_resetPos 0012                            mooveBall@g 0025  
                            ?_sleepSM 0001                      levelController@g 0016  
                    ___lwdiv@quotient 0024           touchScreenController@valueX 00AB  
         touchScreenController@valueY 00A9                           ??i2___awmod 0005  
                            ?_sprintf 007E                        __size_of_fputc 0090  
                      __size_of_fputs 0030                        __size_of_putch 0002  
                         ??_Ball_draw 0027                           ??_Ball_init 0014  
          __size_of_displayController 00EE                            sleepInit@g 00A3  
                            _LCD_Fill 4798                              _LCD_Init 27CC  
                            _LCD_Read 38CA                        ___wmul@product 001E  
                __size_of_Paddle_addX 00C2                  __size_of_Paddle_draw 0132  
                __size_of_Paddle_init 00A4                       _Menu_inGameDraw 4DD2  
                i2ENTERCRITICAL@inISR 0001                    LCD_SliderUpdate@x1 0035  
                  LCD_SliderUpdate@x2 002F                    LCD_SliderUpdate@y1 0031  
                  LCD_SliderUpdate@y2 0033                    displayController@g 009C  
             __size_of_checkCollision 08AA                             _mooveBall 568E  
                         _configTouch 57EA                              i2u532_40 516C  
                            XF_init@i 0012                             _sleepInit 5778  
                            i2u557_40 4CB4                __size_of_ENTERCRITICAL 000C  
            __size_of_levelController 00CA                           _displayInit 5860  
                           _vfpfcnvrt 34F2                            ?_displaySM 00A1  
                   ___wmul@multiplier 001A                     ?_LCD_SliderCreate 0012  
    GameParameters_setBackLight@value 0014                    LCD_ButtonUpdate@x1 0033  
                  LCD_ButtonUpdate@x2 002F                    LCD_ButtonUpdate@y1 0031  
                  LCD_ButtonUpdate@y2 0035                    ??_LCD_SliderCreate 0028  
                    __size_of_RGB2LCD 00BA                     ?_LCD_SliderUpdate 0027  
                    LCD_InSlider@posX 0014                      LCD_InSlider@posY 0016  
                LCD_ButtonCreate@font 0020                  LCD_ButtonCreate@posX 0012  
                LCD_ButtonCreate@posY 0014                  LCD_ButtonDraw@bmpPtr 0098  
                    ?_touchScreenInit 0001                    ??_LCD_SliderUpdate 0029  
                LCD_ButtonDraw@button 0042                         _LEAVECRITICAL 58B8  
                       ?_Factory_exec 0001                         ?_Factory_init 0001  
                  i2___awmod@dividend 0001                      _Menu_welcomeDraw 5050  
                     checkCollision@g 001B                      __size_of_XF_init 0074  
               __size_of_moovePaddle1 00AC                 __size_of_moovePaddle2 00E8  
                    LCD_DrawRect@fill 001A                            ?_mooveBall 0025  
                            __Hrparam 0000                      LCD_DrawRect@temp 001F  
                          ?_sleepInit 00A3              __size_ofi2_LEAVECRITICAL 000C  
                          vfprintf@ap 007D                              __Lrparam 0000  
                          vfprintf@fp 007A             i2XF_unscheduleTimer@inISR 0002  
             __size_of_LCD_ButtonDraw 04B6         __size_ofi2_XF_unscheduleTimer 0034  
              __size_of_configMeasure 003C       __end_of_GameParameters_setLevel 58B8  
           __size_of_LCD_ButtonCreate 00FA                      __size_of___aodiv 0148  
     __end_of_GameParameters_resetPos 5778                      __size_of___aomod 0124  
                    __size_of___fldiv 0288                      __size_of___awdiv 0084  
                    __size_of___awmod 0070                      __size_of___fltol 00BA  
                          ?_vfpfcnvrt 003D                      __size_of___lwdiv 0052  
                    __size_of___lwmod 0042                        _configPinSleep 582C  
           __size_of_LCD_ButtonUpdate 0210                     gameControllerSM@g 003C  
                     ___aodiv@divisor 001A                      Paddle_addX@value 0014  
            LCD_ButtonUpdate@colorOut 002B                       ___aodiv@counter 0022  
            GameParameters_setX@value 0014                       LCD_Bitmap@color 006F  
            GameParameters_setY@value 0014                      LCD_DrawText@font 0022  
                          sprintf@fmt 0080                      LCD_DrawText@posX 0025  
                    LCD_DrawText@posY 0027              GameParameters_setLevel@s 0012  
                            ___xxtofl 378A                            Ball_draw@b 0025  
                     ___lwdiv@divisor 0022                            Ball_init@b 0012  
                     ___lwdiv@counter 0026                              __ptext10 5204  
                            __ptext11 2CF2                              __ptext20 5722  
                            __ptext12 554E                              __ptext21 582C  
                            __ptext13 378A                              __ptext30 0072  
                            __ptext22 57EA                              __ptext14 4624  
                            __ptext31 5262                              __ptext23 4244  
                            __ptext15 2A6A                              __ptext40 1E64  
                            __ptext32 4EDA                              __ptext24 21E6  
                            __ptext16 55C2                              __ptext41 579E  
                            __ptext33 43DC                              __ptext25 415C  
                            __ptext17 5876                              __ptext50 3D78  
                            __ptext42 4A42                              __ptext34 58A2  
                            __ptext26 4846                              __ptext18 588C  
                            __ptext51 1304                              __ptext43 3F80  
                            __ptext35 1AD0                              __ptext27 44A6  
                            __ptext19 565C                              __ptext60 4DD2  
                            __ptext52 4AE6                              __ptext44 3E86  
                            __ptext36 558A                              __ptext28 574E  
                            __ptext61 4310                              __ptext53 0E4E  
                            __ptext45 51A2                              __ptext37 52B4  
                            __ptext29 568E                              __ptext70 56C0  
                            __ptext62 54CA                              __ptext54 318C  
                            __ptext46 4B86                              __ptext38 48F2  
                            __ptext71 3B3A                              __ptext63 5440  
                            __ptext55 38CA                              __ptext47 406E  
                            __ptext39 499A                              __ptext80 24FA  
                            __ptext72 3642                              __ptext64 34F2  
                            __ptext56 091C                              __ptext48 5050  
                            __ptext81 53AA                              __ptext73 1706  
                            __ptext65 2F5E                              __ptext57 5488  
                            __ptext49 3C5E                              __ptext90 58D0  
                            __ptext82 50C2                              __ptext74 550C  
                            __ptext66 4F5C                              __ptext58 5306  
                            __ptext91 58DC                              __ptext83 58B8  
                            __ptext75 57C4                              __ptext67 56F2  
                            __ptext59 46DE                              __ptext84 58C4  
                            __ptext76 4E56                              __ptext68 4CB6  
                            __ptext77 3A08                              __ptext69 58F2  
                            __ptext86 4C22                              __ptext78 4798  
                            __ptext87 55F6                              __ptext79 339C  
                            __ptext88 5358                              __ptext89 5132  
                    __size_of_sleepSM 0032                        ?_LEAVECRITICAL 0001  
                       _ENTERCRITICAL 58C4                         ??_Ball_Update 0014  
                      ??_Factory_exec 0047                        ??_Factory_init 00A5  
             __end_of_Menu_inGameDraw 4E56                          _moovePaddle1 4846  
                        _moovePaddle2 415C              GameParameters_resetPos@s 0012  
                    __size_of_sprintf 0042    __end_of_XF_decrementAndQueueTimers 4CB6  
          _XF_decrementAndQueueTimers 4C22                         __size_of_main 000A  
                           sleepSM@ev 0016                         __size_of_dtoa 022E  
           __size_of_XF_scheduleTimer 0052              __end_of_gameControllerSM 4310  
                 _backlightController 1AD0           __end_of_GameParameters_init 21E6  
         __end_of_GameParameters_setX 58A2           __end_of_GameParameters_setY 588C  
            __size_ofi2_ENTERCRITICAL 000C               __size_of_LCD_SliderDraw 010E  
        GameParameters_setBackLight@s 0012              _gameControllerController 21E6  
                            isa$xinst 000000                            _LCD_Bitmap 091C  
      __size_of_touchScreenController 026C                    _XF_unscheduleTimer 55C2  
       __end_of_touchScreenController 2F5E                              int$flags 004E  
              __end_of_configPinSleep 584A                              _vfprintf 5440  
                       ?_XF_pushEvent 0018           __size_of_gameControllerInit 0016  
                         ??_displaySM 00A3                      ___aomod@dividend 0012  
                 ?_XF_unscheduleTimer 0013                     i2___awmod@divisor 0003  
                   ??_levelController 0018                     i2___awmod@counter 0005  
                ?_backlightController 0018                       _sleepController 5722  
                      ?_ENTERCRITICAL 0001                         _configMeasure 554E  
                            intlevel2 0000                             sprintf@ap 0084  
                     LCD_DrawText@msg 0020                      ___lwmod@dividend 0012  
                ??_XF_unscheduleTimer 0014                   __end_of_Ball_Update 4F5C  
                      _checkCollision 0072                           ??_mooveBall 0027  
                         ??_sleepInit 0047                      ??i2_XF_pushEvent 0008  
                      ??_XF_pushEvent 0019                       ?_configPinSleep 0001  
                     ___aomod@divisor 001A                           ??_vfpfcnvrt 0040  
                     ___aomod@counter 0022                     ??i2_LEAVECRITICAL 0001  
                            sprintf@f 0085                              sprintf@s 007E  
               ??_backlightController 001A                         ??_XF_popEvent 0018  
                     ___lwmod@divisor 0014               LCD_SliderCreate@bgColor 001C  
                     ___lwmod@counter 0016                       ??_LEAVECRITICAL 0012  
                      ?_configMeasure 0001           LCD_SliderCreate@borderColor 001E  
        __size_of_Menu_parametersDraw 011A              LCD_SliderCreate@sldColor 001A  
             LCD_SliderCreate@fpPress 0024                      ?_Menu_inGameDraw 008D  
                        ___aodiv@sign 0023      __size_of_GameParameters_setLevel 0016  
                     Paddle_init@team 0014                __end_of_checkCollision 091C  
    __size_of_GameParameters_resetPos 002A  __size_of_GameParameters_setBackLight 0038  
                        ___aomod@sign 0023                          ?_configTouch 0001  
