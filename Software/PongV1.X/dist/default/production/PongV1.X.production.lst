

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Thu Sep 09 08:43:01 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og9 
     1                           	processor	18LF25K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=3
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=3
    73                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=3
    74                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=3
    75                           	psect	text63,global,reloc=2,class=CODE,delta=1,group=3
    76                           	psect	text64,global,reloc=2,class=CODE,delta=1,group=2
    77                           	psect	text65,global,reloc=2,class=CODE,delta=1,group=2
    78                           	psect	text66,global,reloc=2,class=CODE,delta=1
    79                           	psect	text67,global,reloc=2,class=CODE,delta=1
    80                           	psect	text68,global,reloc=2,class=CODE,delta=1
    81                           	psect	text69,global,reloc=2,class=CODE,delta=1
    82                           	psect	text70,global,reloc=2,class=CODE,delta=1,group=3
    83                           	psect	text71,global,reloc=2,class=CODE,delta=1,group=2
    84                           	psect	text72,global,reloc=2,class=CODE,delta=1
    85                           	psect	text73,global,reloc=2,class=CODE,delta=1
    86                           	psect	text74,global,reloc=2,class=CODE,delta=1
    87                           	psect	text75,global,reloc=2,class=CODE,delta=1,group=2
    88                           	psect	text76,global,reloc=2,class=CODE,delta=1,group=2
    89                           	psect	text77,global,reloc=2,class=CODE,delta=1,group=2
    90                           	psect	text78,global,reloc=2,class=CODE,delta=1
    91                           	psect	text79,global,reloc=2,class=CODE,delta=1
    92                           	psect	text80,global,reloc=2,class=CODE,delta=1
    93                           	psect	text81,global,reloc=2,class=CODE,delta=1
    94                           	psect	text82,global,reloc=2,class=CODE,delta=1,group=2
    95                           	psect	text83,global,reloc=2,class=CODE,delta=1
    96                           	psect	text84,global,reloc=2,class=CODE,delta=1
    97                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    98                           	psect	text86,global,reloc=2,class=CODE,delta=1
    99                           	psect	text87,global,reloc=2,class=CODE,delta=1
   100                           	psect	text88,global,reloc=2,class=CODE,delta=1
   101                           	psect	text89,global,reloc=2,class=CODE,delta=1
   102                           	psect	text90,global,reloc=2,class=CODE,delta=1
   103                           	psect	text91,global,reloc=2,class=CODE,delta=1
   104                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   105                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   106                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   107                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
   108                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
   109  0000                     
   110                           ; Version 2.32
   111                           ; Generated 02/02/2021 GMT
   112                           ; 
   113                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
   114                           ; All rights reserved.
   115                           ; 
   116                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   117                           ; 
   118                           ; Redistribution and use in source and binary forms, with or without modification, are
   119                           ; permitted provided that the following conditions are met:
   120                           ; 
   121                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   122                           ;        conditions and the following disclaimer.
   123                           ; 
   124                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   125                           ;        of conditions and the following disclaimer in the documentation and/or other
   126                           ;        materials provided with the distribution. Publication is not required when
   127                           ;        this file is used in an embedded application.
   128                           ; 
   129                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   130                           ;        software without specific prior written permission.
   131                           ; 
   132                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   133                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   134                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   135                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   136                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   137                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   138                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   139                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   140                           ; 
   141                           ; 
   142                           ; Code-generator required, PIC18LF25K22 Definitions
   143                           ; 
   144                           ; SFR Addresses
   145  0000                     
   146                           	psect	mediumconst
   147  007836                     __pmediumconst:
   148                           	callstack 0
   149  007836  00                 	db	0
   150  007837                     _arialNarrow_12ptBitmaps:
   151                           	callstack 0
   152  007837  00                 	db	0
   153  007838  00                 	db	0
   154  007839  00                 	db	0
   155  00783A  00                 	db	0
   156  00783B  00                 	db	0
   157  00783C  00                 	db	0
   158  00783D  00                 	db	0
   159  00783E  00                 	db	0
   160  00783F  00                 	db	0
   161  007840  00                 	db	0
   162  007841  00                 	db	0
   163  007842  00                 	db	0
   164  007843  00                 	db	0
   165  007844  00                 	db	0
   166  007845  00                 	db	0
   167  007846  00                 	db	0
   168  007847  C0                 	db	192
   169  007848  C0                 	db	192
   170  007849  C0                 	db	192
   171  00784A  C0                 	db	192
   172  00784B  C0                 	db	192
   173  00784C  C0                 	db	192
   174  00784D  C0                 	db	192
   175  00784E  C0                 	db	192
   176  00784F  00                 	db	0
   177  007850  C0                 	db	192
   178  007851  C0                 	db	192
   179  007852  00                 	db	0
   180  007853  00                 	db	0
   181  007854  00                 	db	0
   182  007855  00                 	db	0
   183  007856  D8                 	db	216
   184  007857  D8                 	db	216
   185  007858  D8                 	db	216
   186  007859  D8                 	db	216
   187  00785A  00                 	db	0
   188  00785B  00                 	db	0
   189  00785C  00                 	db	0
   190  00785D  00                 	db	0
   191  00785E  00                 	db	0
   192  00785F  00                 	db	0
   193  007860  00                 	db	0
   194  007861  00                 	db	0
   195  007862  00                 	db	0
   196  007863  00                 	db	0
   197  007864  00                 	db	0
   198  007865  12                 	db	18
   199  007866  12                 	db	18
   200  007867  24                 	db	36
   201  007868  FE                 	db	254
   202  007869  FE                 	db	254
   203  00786A  48                 	db	72
   204  00786B  FE                 	db	254
   205  00786C  FE                 	db	254
   206  00786D  48                 	db	72
   207  00786E  90                 	db	144
   208  00786F  90                 	db	144
   209  007870  00                 	db	0
   210  007871  00                 	db	0
   211  007872  00                 	db	0
   212  007873  10                 	db	16
   213  007874  7C                 	db	124
   214  007875  FC                 	db	252
   215  007876  D6                 	db	214
   216  007877  D0                 	db	208
   217  007878  F0                 	db	240
   218  007879  7C                 	db	124
   219  00787A  1E                 	db	30
   220  00787B  16                 	db	22
   221  00787C  D6                 	db	214
   222  00787D  7E                 	db	126
   223  00787E  7C                 	db	124
   224  00787F  10                 	db	16
   225  007880  00                 	db	0
   226  007881  00                 	db	0
   227  007882  00                 	db	0
   228  007883  00                 	db	0
   229  007884  61                 	db	97
   230  007885  00                 	db	0
   231  007886  91                 	db	145
   232  007887  00                 	db	0
   233  007888  92                 	db	146
   234  007889  00                 	db	0
   235  00788A  92                 	db	146
   236  00788B  00                 	db	0
   237  00788C  94                 	db	148
   238  00788D  00                 	db	0
   239  00788E  65                 	db	101
   240  00788F  80                 	db	128
   241  007890  06                 	db	6
   242  007891  40                 	db	64
   243  007892  0A                 	db	10
   244  007893  40                 	db	64
   245  007894  0A                 	db	10
   246  007895  40                 	db	64
   247  007896  12                 	db	18
   248  007897  40                 	db	64
   249  007898  11                 	db	17
   250  007899  80                 	db	128
   251  00789A  00                 	db	0
   252  00789B  00                 	db	0
   253  00789C  00                 	db	0
   254  00789D  00                 	db	0
   255  00789E  00                 	db	0
   256  00789F  00                 	db	0
   257  0078A0  00                 	db	0
   258  0078A1  38                 	db	56
   259  0078A2  7C                 	db	124
   260  0078A3  6C                 	db	108
   261  0078A4  7C                 	db	124
   262  0078A5  30                 	db	48
   263  0078A6  78                 	db	120
   264  0078A7  DA                 	db	218
   265  0078A8  CE                 	db	206
   266  0078A9  CE                 	db	206
   267  0078AA  FF                 	db	255
   268  0078AB  7A                 	db	122
   269  0078AC  00                 	db	0
   270  0078AD  00                 	db	0
   271  0078AE  00                 	db	0
   272  0078AF  00                 	db	0
   273  0078B0  C0                 	db	192
   274  0078B1  C0                 	db	192
   275  0078B2  C0                 	db	192
   276  0078B3  C0                 	db	192
   277  0078B4  00                 	db	0
   278  0078B5  00                 	db	0
   279  0078B6  00                 	db	0
   280  0078B7  00                 	db	0
   281  0078B8  00                 	db	0
   282  0078B9  00                 	db	0
   283  0078BA  00                 	db	0
   284  0078BB  00                 	db	0
   285  0078BC  00                 	db	0
   286  0078BD  00                 	db	0
   287  0078BE  00                 	db	0
   288  0078BF  10                 	db	16
   289  0078C0  20                 	db	32
   290  0078C1  60                 	db	96
   291  0078C2  60                 	db	96
   292  0078C3  C0                 	db	192
   293  0078C4  C0                 	db	192
   294  0078C5  C0                 	db	192
   295  0078C6  C0                 	db	192
   296  0078C7  C0                 	db	192
   297  0078C8  C0                 	db	192
   298  0078C9  60                 	db	96
   299  0078CA  60                 	db	96
   300  0078CB  20                 	db	32
   301  0078CC  10                 	db	16
   302  0078CD  00                 	db	0
   303  0078CE  80                 	db	128
   304  0078CF  40                 	db	64
   305  0078D0  60                 	db	96
   306  0078D1  20                 	db	32
   307  0078D2  30                 	db	48
   308  0078D3  30                 	db	48
   309  0078D4  30                 	db	48
   310  0078D5  30                 	db	48
   311  0078D6  30                 	db	48
   312  0078D7  30                 	db	48
   313  0078D8  60                 	db	96
   314  0078D9  60                 	db	96
   315  0078DA  40                 	db	64
   316  0078DB  80                 	db	128
   317  0078DC  00                 	db	0
   318  0078DD  20                 	db	32
   319  0078DE  A8                 	db	168
   320  0078DF  F8                 	db	248
   321  0078E0  20                 	db	32
   322  0078E1  50                 	db	80
   323  0078E2  50                 	db	80
   324  0078E3  00                 	db	0
   325  0078E4  00                 	db	0
   326  0078E5  00                 	db	0
   327  0078E6  00                 	db	0
   328  0078E7  00                 	db	0
   329  0078E8  00                 	db	0
   330  0078E9  00                 	db	0
   331  0078EA  00                 	db	0
   332  0078EB  00                 	db	0
   333  0078EC  00                 	db	0
   334  0078ED  00                 	db	0
   335  0078EE  00                 	db	0
   336  0078EF  30                 	db	48
   337  0078F0  30                 	db	48
   338  0078F1  30                 	db	48
   339  0078F2  FC                 	db	252
   340  0078F3  FC                 	db	252
   341  0078F4  30                 	db	48
   342  0078F5  30                 	db	48
   343  0078F6  30                 	db	48
   344  0078F7  00                 	db	0
   345  0078F8  00                 	db	0
   346  0078F9  00                 	db	0
   347  0078FA  00                 	db	0
   348  0078FB  00                 	db	0
   349  0078FC  00                 	db	0
   350  0078FD  00                 	db	0
   351  0078FE  00                 	db	0
   352  0078FF  00                 	db	0
   353  007900  00                 	db	0
   354  007901  00                 	db	0
   355  007902  00                 	db	0
   356  007903  00                 	db	0
   357  007904  C0                 	db	192
   358  007905  C0                 	db	192
   359  007906  40                 	db	64
   360  007907  40                 	db	64
   361  007908  80                 	db	128
   362  007909  00                 	db	0
   363  00790A  00                 	db	0
   364  00790B  00                 	db	0
   365  00790C  00                 	db	0
   366  00790D  00                 	db	0
   367  00790E  00                 	db	0
   368  00790F  00                 	db	0
   369  007910  F0                 	db	240
   370  007911  F0                 	db	240
   371  007912  00                 	db	0
   372  007913  00                 	db	0
   373  007914  00                 	db	0
   374  007915  00                 	db	0
   375  007916  00                 	db	0
   376  007917  00                 	db	0
   377  007918  00                 	db	0
   378  007919  00                 	db	0
   379  00791A  00                 	db	0
   380  00791B  00                 	db	0
   381  00791C  00                 	db	0
   382  00791D  00                 	db	0
   383  00791E  00                 	db	0
   384  00791F  00                 	db	0
   385  007920  00                 	db	0
   386  007921  00                 	db	0
   387  007922  C0                 	db	192
   388  007923  C0                 	db	192
   389  007924  00                 	db	0
   390  007925  00                 	db	0
   391  007926  00                 	db	0
   392  007927  00                 	db	0
   393  007928  30                 	db	48
   394  007929  30                 	db	48
   395  00792A  30                 	db	48
   396  00792B  60                 	db	96
   397  00792C  60                 	db	96
   398  00792D  60                 	db	96
   399  00792E  60                 	db	96
   400  00792F  60                 	db	96
   401  007930  C0                 	db	192
   402  007931  C0                 	db	192
   403  007932  C0                 	db	192
   404  007933  00                 	db	0
   405  007934  00                 	db	0
   406  007935  00                 	db	0
   407  007936  00                 	db	0
   408  007937  78                 	db	120
   409  007938  78                 	db	120
   410  007939  CC                 	db	204
   411  00793A  CC                 	db	204
   412  00793B  CC                 	db	204
   413  00793C  CC                 	db	204
   414  00793D  CC                 	db	204
   415  00793E  CC                 	db	204
   416  00793F  CC                 	db	204
   417  007940  78                 	db	120
   418  007941  78                 	db	120
   419  007942  00                 	db	0
   420  007943  00                 	db	0
   421  007944  00                 	db	0
   422  007945  00                 	db	0
   423  007946  30                 	db	48
   424  007947  30                 	db	48
   425  007948  70                 	db	112
   426  007949  F0                 	db	240
   427  00794A  B0                 	db	176
   428  00794B  30                 	db	48
   429  00794C  30                 	db	48
   430  00794D  30                 	db	48
   431  00794E  30                 	db	48
   432  00794F  30                 	db	48
   433  007950  30                 	db	48
   434  007951  00                 	db	0
   435  007952  00                 	db	0
   436  007953  00                 	db	0
   437  007954  00                 	db	0
   438  007955  38                 	db	56
   439  007956  7C                 	db	124
   440  007957  CC                 	db	204
   441  007958  CC                 	db	204
   442  007959  0C                 	db	12
   443  00795A  18                 	db	24
   444  00795B  38                 	db	56
   445  00795C  70                 	db	112
   446  00795D  60                 	db	96
   447  00795E  FC                 	db	252
   448  00795F  FC                 	db	252
   449  007960  00                 	db	0
   450  007961  00                 	db	0
   451  007962  00                 	db	0
   452  007963  00                 	db	0
   453  007964  78                 	db	120
   454  007965  FC                 	db	252
   455  007966  CC                 	db	204
   456  007967  0C                 	db	12
   457  007968  38                 	db	56
   458  007969  38                 	db	56
   459  00796A  0C                 	db	12
   460  00796B  0C                 	db	12
   461  00796C  CC                 	db	204
   462  00796D  F8                 	db	248
   463  00796E  78                 	db	120
   464  00796F  00                 	db	0
   465  007970  00                 	db	0
   466  007971  00                 	db	0
   467  007972  00                 	db	0
   468  007973  0C                 	db	12
   469  007974  1C                 	db	28
   470  007975  1C                 	db	28
   471  007976  3C                 	db	60
   472  007977  2C                 	db	44
   473  007978  6C                 	db	108
   474  007979  CC                 	db	204
   475  00797A  FE                 	db	254
   476  00797B  FE                 	db	254
   477  00797C  0C                 	db	12
   478  00797D  0C                 	db	12
   479  00797E  00                 	db	0
   480  00797F  00                 	db	0
   481  007980  00                 	db	0
   482  007981  00                 	db	0
   483  007982  7C                 	db	124
   484  007983  7C                 	db	124
   485  007984  60                 	db	96
   486  007985  D8                 	db	216
   487  007986  FC                 	db	252
   488  007987  CC                 	db	204
   489  007988  0C                 	db	12
   490  007989  CC                 	db	204
   491  00798A  CC                 	db	204
   492  00798B  78                 	db	120
   493  00798C  78                 	db	120
   494  00798D  00                 	db	0
   495  00798E  00                 	db	0
   496  00798F  00                 	db	0
   497  007990  00                 	db	0
   498  007991  70                 	db	112
   499  007992  78                 	db	120
   500  007993  D8                 	db	216
   501  007994  C0                 	db	192
   502  007995  F0                 	db	240
   503  007996  F8                 	db	248
   504  007997  D8                 	db	216
   505  007998  D8                 	db	216
   506  007999  D8                 	db	216
   507  00799A  78                 	db	120
   508  00799B  70                 	db	112
   509  00799C  00                 	db	0
   510  00799D  00                 	db	0
   511  00799E  00                 	db	0
   512  00799F  00                 	db	0
   513  0079A0  F8                 	db	248
   514  0079A1  F8                 	db	248
   515  0079A2  18                 	db	24
   516  0079A3  10                 	db	16
   517  0079A4  30                 	db	48
   518  0079A5  30                 	db	48
   519  0079A6  20                 	db	32
   520  0079A7  60                 	db	96
   521  0079A8  60                 	db	96
   522  0079A9  60                 	db	96
   523  0079AA  60                 	db	96
   524  0079AB  00                 	db	0
   525  0079AC  00                 	db	0
   526  0079AD  00                 	db	0
   527  0079AE  00                 	db	0
   528  0079AF  78                 	db	120
   529  0079B0  FC                 	db	252
   530  0079B1  CC                 	db	204
   531  0079B2  CC                 	db	204
   532  0079B3  78                 	db	120
   533  0079B4  78                 	db	120
   534  0079B5  CC                 	db	204
   535  0079B6  CC                 	db	204
   536  0079B7  CC                 	db	204
   537  0079B8  FC                 	db	252
   538  0079B9  78                 	db	120
   539  0079BA  00                 	db	0
   540  0079BB  00                 	db	0
   541  0079BC  00                 	db	0
   542  0079BD  00                 	db	0
   543  0079BE  70                 	db	112
   544  0079BF  F8                 	db	248
   545  0079C0  CC                 	db	204
   546  0079C1  CC                 	db	204
   547  0079C2  CC                 	db	204
   548  0079C3  FC                 	db	252
   549  0079C4  7C                 	db	124
   550  0079C5  0C                 	db	12
   551  0079C6  CC                 	db	204
   552  0079C7  F8                 	db	248
   553  0079C8  70                 	db	112
   554  0079C9  00                 	db	0
   555  0079CA  00                 	db	0
   556  0079CB  00                 	db	0
   557  0079CC  00                 	db	0
   558  0079CD  00                 	db	0
   559  0079CE  00                 	db	0
   560  0079CF  00                 	db	0
   561  0079D0  C0                 	db	192
   562  0079D1  C0                 	db	192
   563  0079D2  00                 	db	0
   564  0079D3  00                 	db	0
   565  0079D4  00                 	db	0
   566  0079D5  00                 	db	0
   567  0079D6  C0                 	db	192
   568  0079D7  C0                 	db	192
   569  0079D8  00                 	db	0
   570  0079D9  00                 	db	0
   571  0079DA  00                 	db	0
   572  0079DB  00                 	db	0
   573  0079DC  00                 	db	0
   574  0079DD  00                 	db	0
   575  0079DE  00                 	db	0
   576  0079DF  C0                 	db	192
   577  0079E0  C0                 	db	192
   578  0079E1  00                 	db	0
   579  0079E2  00                 	db	0
   580  0079E3  00                 	db	0
   581  0079E4  00                 	db	0
   582  0079E5  C0                 	db	192
   583  0079E6  C0                 	db	192
   584  0079E7  40                 	db	64
   585  0079E8  40                 	db	64
   586  0079E9  80                 	db	128
   587  0079EA  00                 	db	0
   588  0079EB  00                 	db	0
   589  0079EC  04                 	db	4
   590  0079ED  1C                 	db	28
   591  0079EE  38                 	db	56
   592  0079EF  F0                 	db	240
   593  0079F0  C0                 	db	192
   594  0079F1  F0                 	db	240
   595  0079F2  38                 	db	56
   596  0079F3  1C                 	db	28
   597  0079F4  04                 	db	4
   598  0079F5  00                 	db	0
   599  0079F6  00                 	db	0
   600  0079F7  00                 	db	0
   601  0079F8  00                 	db	0
   602  0079F9  00                 	db	0
   603  0079FA  00                 	db	0
   604  0079FB  00                 	db	0
   605  0079FC  00                 	db	0
   606  0079FD  FC                 	db	252
   607  0079FE  FC                 	db	252
   608  0079FF  00                 	db	0
   609  007A00  FC                 	db	252
   610  007A01  FC                 	db	252
   611  007A02  00                 	db	0
   612  007A03  00                 	db	0
   613  007A04  00                 	db	0
   614  007A05  00                 	db	0
   615  007A06  00                 	db	0
   616  007A07  00                 	db	0
   617  007A08  00                 	db	0
   618  007A09  00                 	db	0
   619  007A0A  80                 	db	128
   620  007A0B  E0                 	db	224
   621  007A0C  70                 	db	112
   622  007A0D  3C                 	db	60
   623  007A0E  0C                 	db	12
   624  007A0F  1C                 	db	28
   625  007A10  70                 	db	112
   626  007A11  E0                 	db	224
   627  007A12  80                 	db	128
   628  007A13  00                 	db	0
   629  007A14  00                 	db	0
   630  007A15  00                 	db	0
   631  007A16  00                 	db	0
   632  007A17  00                 	db	0
   633  007A18  78                 	db	120
   634  007A19  FC                 	db	252
   635  007A1A  CC                 	db	204
   636  007A1B  CC                 	db	204
   637  007A1C  1C                 	db	28
   638  007A1D  18                 	db	24
   639  007A1E  30                 	db	48
   640  007A1F  30                 	db	48
   641  007A20  00                 	db	0
   642  007A21  30                 	db	48
   643  007A22  30                 	db	48
   644  007A23  00                 	db	0
   645  007A24  00                 	db	0
   646  007A25  00                 	db	0
   647  007A26  00                 	db	0
   648  007A27  00                 	db	0
   649  007A28  0F                 	db	15
   650  007A29  C0                 	db	192
   651  007A2A  1F                 	db	31
   652  007A2B  E0                 	db	224
   653  007A2C  30                 	db	48
   654  007A2D  30                 	db	48
   655  007A2E  66                 	db	102
   656  007A2F  D8                 	db	216
   657  007A30  EF                 	db	239
   658  007A31  D8                 	db	216
   659  007A32  DD                 	db	221
   660  007A33  D8                 	db	216
   661  007A34  D8                 	db	216
   662  007A35  98                 	db	152
   663  007A36  D9                 	db	217
   664  007A37  98                 	db	152
   665  007A38  D9                 	db	217
   666  007A39  B0                 	db	176
   667  007A3A  DF                 	db	223
   668  007A3B  F0                 	db	240
   669  007A3C  6E                 	db	110
   670  007A3D  C8                 	db	200
   671  007A3E  70                 	db	112
   672  007A3F  10                 	db	16
   673  007A40  3F                 	db	63
   674  007A41  E0                 	db	224
   675  007A42  0F                 	db	15
   676  007A43  C0                 	db	192
   677  007A44  00                 	db	0
   678  007A45  00                 	db	0
   679  007A46  1C                 	db	28
   680  007A47  00                 	db	0
   681  007A48  1C                 	db	28
   682  007A49  00                 	db	0
   683  007A4A  1C                 	db	28
   684  007A4B  00                 	db	0
   685  007A4C  36                 	db	54
   686  007A4D  00                 	db	0
   687  007A4E  36                 	db	54
   688  007A4F  00                 	db	0
   689  007A50  36                 	db	54
   690  007A51  00                 	db	0
   691  007A52  63                 	db	99
   692  007A53  00                 	db	0
   693  007A54  7F                 	db	127
   694  007A55  00                 	db	0
   695  007A56  7F                 	db	127
   696  007A57  00                 	db	0
   697  007A58  C1                 	db	193
   698  007A59  80                 	db	128
   699  007A5A  C1                 	db	193
   700  007A5B  80                 	db	128
   701  007A5C  00                 	db	0
   702  007A5D  00                 	db	0
   703  007A5E  00                 	db	0
   704  007A5F  00                 	db	0
   705  007A60  00                 	db	0
   706  007A61  00                 	db	0
   707  007A62  00                 	db	0
   708  007A63  FC                 	db	252
   709  007A64  FE                 	db	254
   710  007A65  C6                 	db	198
   711  007A66  C6                 	db	198
   712  007A67  FC                 	db	252
   713  007A68  FC                 	db	252
   714  007A69  C6                 	db	198
   715  007A6A  C6                 	db	198
   716  007A6B  C6                 	db	198
   717  007A6C  FE                 	db	254
   718  007A6D  FC                 	db	252
   719  007A6E  00                 	db	0
   720  007A6F  00                 	db	0
   721  007A70  00                 	db	0
   722  007A71  00                 	db	0
   723  007A72  3C                 	db	60
   724  007A73  7E                 	db	126
   725  007A74  67                 	db	103
   726  007A75  C2                 	db	194
   727  007A76  C0                 	db	192
   728  007A77  C0                 	db	192
   729  007A78  C0                 	db	192
   730  007A79  C2                 	db	194
   731  007A7A  67                 	db	103
   732  007A7B  7E                 	db	126
   733  007A7C  3C                 	db	60
   734  007A7D  00                 	db	0
   735  007A7E  00                 	db	0
   736  007A7F  00                 	db	0
   737  007A80  00                 	db	0
   738  007A81  F8                 	db	248
   739  007A82  FC                 	db	252
   740  007A83  CE                 	db	206
   741  007A84  C6                 	db	198
   742  007A85  C6                 	db	198
   743  007A86  C6                 	db	198
   744  007A87  C6                 	db	198
   745  007A88  C6                 	db	198
   746  007A89  CE                 	db	206
   747  007A8A  FC                 	db	252
   748  007A8B  F8                 	db	248
   749  007A8C  00                 	db	0
   750  007A8D  00                 	db	0
   751  007A8E  00                 	db	0
   752  007A8F  00                 	db	0
   753  007A90  FE                 	db	254
   754  007A91  FE                 	db	254
   755  007A92  C0                 	db	192
   756  007A93  C0                 	db	192
   757  007A94  FE                 	db	254
   758  007A95  FE                 	db	254
   759  007A96  C0                 	db	192
   760  007A97  C0                 	db	192
   761  007A98  C0                 	db	192
   762  007A99  FE                 	db	254
   763  007A9A  FE                 	db	254
   764  007A9B  00                 	db	0
   765  007A9C  00                 	db	0
   766  007A9D  00                 	db	0
   767  007A9E  00                 	db	0
   768  007A9F  FC                 	db	252
   769  007AA0  FC                 	db	252
   770  007AA1  C0                 	db	192
   771  007AA2  C0                 	db	192
   772  007AA3  F8                 	db	248
   773  007AA4  F8                 	db	248
   774  007AA5  C0                 	db	192
   775  007AA6  C0                 	db	192
   776  007AA7  C0                 	db	192
   777  007AA8  C0                 	db	192
   778  007AA9  C0                 	db	192
   779  007AAA  00                 	db	0
   780  007AAB  00                 	db	0
   781  007AAC  00                 	db	0
   782  007AAD  00                 	db	0
   783  007AAE  3C                 	db	60
   784  007AAF  7E                 	db	126
   785  007AB0  67                 	db	103
   786  007AB1  C3                 	db	195
   787  007AB2  C0                 	db	192
   788  007AB3  CF                 	db	207
   789  007AB4  CF                 	db	207
   790  007AB5  C3                 	db	195
   791  007AB6  63                 	db	99
   792  007AB7  7F                 	db	127
   793  007AB8  3C                 	db	60
   794  007AB9  00                 	db	0
   795  007ABA  00                 	db	0
   796  007ABB  00                 	db	0
   797  007ABC  00                 	db	0
   798  007ABD  C6                 	db	198
   799  007ABE  C6                 	db	198
   800  007ABF  C6                 	db	198
   801  007AC0  C6                 	db	198
   802  007AC1  FE                 	db	254
   803  007AC2  FE                 	db	254
   804  007AC3  C6                 	db	198
   805  007AC4  C6                 	db	198
   806  007AC5  C6                 	db	198
   807  007AC6  C6                 	db	198
   808  007AC7  C6                 	db	198
   809  007AC8  00                 	db	0
   810  007AC9  00                 	db	0
   811  007ACA  00                 	db	0
   812  007ACB  00                 	db	0
   813  007ACC  C0                 	db	192
   814  007ACD  C0                 	db	192
   815  007ACE  C0                 	db	192
   816  007ACF  C0                 	db	192
   817  007AD0  C0                 	db	192
   818  007AD1  C0                 	db	192
   819  007AD2  C0                 	db	192
   820  007AD3  C0                 	db	192
   821  007AD4  C0                 	db	192
   822  007AD5  C0                 	db	192
   823  007AD6  C0                 	db	192
   824  007AD7  00                 	db	0
   825  007AD8  00                 	db	0
   826  007AD9  00                 	db	0
   827  007ADA  00                 	db	0
   828  007ADB  0C                 	db	12
   829  007ADC  0C                 	db	12
   830  007ADD  0C                 	db	12
   831  007ADE  0C                 	db	12
   832  007ADF  0C                 	db	12
   833  007AE0  0C                 	db	12
   834  007AE1  0C                 	db	12
   835  007AE2  CC                 	db	204
   836  007AE3  CC                 	db	204
   837  007AE4  FC                 	db	252
   838  007AE5  78                 	db	120
   839  007AE6  00                 	db	0
   840  007AE7  00                 	db	0
   841  007AE8  00                 	db	0
   842  007AE9  00                 	db	0
   843  007AEA  C3                 	db	195
   844  007AEB  C6                 	db	198
   845  007AEC  CC                 	db	204
   846  007AED  CC                 	db	204
   847  007AEE  D8                 	db	216
   848  007AEF  FC                 	db	252
   849  007AF0  EC                 	db	236
   850  007AF1  C6                 	db	198
   851  007AF2  C6                 	db	198
   852  007AF3  C3                 	db	195
   853  007AF4  C3                 	db	195
   854  007AF5  00                 	db	0
   855  007AF6  00                 	db	0
   856  007AF7  00                 	db	0
   857  007AF8  00                 	db	0
   858  007AF9  C0                 	db	192
   859  007AFA  C0                 	db	192
   860  007AFB  C0                 	db	192
   861  007AFC  C0                 	db	192
   862  007AFD  C0                 	db	192
   863  007AFE  C0                 	db	192
   864  007AFF  C0                 	db	192
   865  007B00  C0                 	db	192
   866  007B01  C0                 	db	192
   867  007B02  FE                 	db	254
   868  007B03  FE                 	db	254
   869  007B04  00                 	db	0
   870  007B05  00                 	db	0
   871  007B06  00                 	db	0
   872  007B07  00                 	db	0
   873  007B08  00                 	db	0
   874  007B09  E3                 	db	227
   875  007B0A  80                 	db	128
   876  007B0B  E3                 	db	227
   877  007B0C  80                 	db	128
   878  007B0D  E3                 	db	227
   879  007B0E  80                 	db	128
   880  007B0F  F7                 	db	247
   881  007B10  80                 	db	128
   882  007B11  D5                 	db	213
   883  007B12  80                 	db	128
   884  007B13  D5                 	db	213
   885  007B14  80                 	db	128
   886  007B15  D5                 	db	213
   887  007B16  80                 	db	128
   888  007B17  D5                 	db	213
   889  007B18  80                 	db	128
   890  007B19  DD                 	db	221
   891  007B1A  80                 	db	128
   892  007B1B  D9                 	db	217
   893  007B1C  80                 	db	128
   894  007B1D  C9                 	db	201
   895  007B1E  80                 	db	128
   896  007B1F  00                 	db	0
   897  007B20  00                 	db	0
   898  007B21  00                 	db	0
   899  007B22  00                 	db	0
   900  007B23  00                 	db	0
   901  007B24  00                 	db	0
   902  007B25  00                 	db	0
   903  007B26  C6                 	db	198
   904  007B27  E6                 	db	230
   905  007B28  E6                 	db	230
   906  007B29  E6                 	db	230
   907  007B2A  F6                 	db	246
   908  007B2B  D6                 	db	214
   909  007B2C  DE                 	db	222
   910  007B2D  DE                 	db	222
   911  007B2E  CE                 	db	206
   912  007B2F  CE                 	db	206
   913  007B30  C6                 	db	198
   914  007B31  00                 	db	0
   915  007B32  00                 	db	0
   916  007B33  00                 	db	0
   917  007B34  00                 	db	0
   918  007B35  3C                 	db	60
   919  007B36  7E                 	db	126
   920  007B37  67                 	db	103
   921  007B38  C3                 	db	195
   922  007B39  C3                 	db	195
   923  007B3A  C3                 	db	195
   924  007B3B  C3                 	db	195
   925  007B3C  C3                 	db	195
   926  007B3D  66                 	db	102
   927  007B3E  7E                 	db	126
   928  007B3F  3C                 	db	60
   929  007B40  00                 	db	0
   930  007B41  00                 	db	0
   931  007B42  00                 	db	0
   932  007B43  00                 	db	0
   933  007B44  FC                 	db	252
   934  007B45  FE                 	db	254
   935  007B46  C6                 	db	198
   936  007B47  C6                 	db	198
   937  007B48  C6                 	db	198
   938  007B49  FE                 	db	254
   939  007B4A  FC                 	db	252
   940  007B4B  C0                 	db	192
   941  007B4C  C0                 	db	192
   942  007B4D  C0                 	db	192
   943  007B4E  C0                 	db	192
   944  007B4F  00                 	db	0
   945  007B50  00                 	db	0
   946  007B51  00                 	db	0
   947  007B52  00                 	db	0
   948  007B53  00                 	db	0
   949  007B54  3C                 	db	60
   950  007B55  00                 	db	0
   951  007B56  7E                 	db	126
   952  007B57  00                 	db	0
   953  007B58  E7                 	db	231
   954  007B59  00                 	db	0
   955  007B5A  C3                 	db	195
   956  007B5B  00                 	db	0
   957  007B5C  C3                 	db	195
   958  007B5D  00                 	db	0
   959  007B5E  C3                 	db	195
   960  007B5F  00                 	db	0
   961  007B60  C3                 	db	195
   962  007B61  00                 	db	0
   963  007B62  CB                 	db	203
   964  007B63  00                 	db	0
   965  007B64  66                 	db	102
   966  007B65  00                 	db	0
   967  007B66  7F                 	db	127
   968  007B67  00                 	db	0
   969  007B68  3D                 	db	61
   970  007B69  80                 	db	128
   971  007B6A  00                 	db	0
   972  007B6B  80                 	db	128
   973  007B6C  00                 	db	0
   974  007B6D  00                 	db	0
   975  007B6E  00                 	db	0
   976  007B6F  00                 	db	0
   977  007B70  00                 	db	0
   978  007B71  FC                 	db	252
   979  007B72  FE                 	db	254
   980  007B73  C6                 	db	198
   981  007B74  C6                 	db	198
   982  007B75  FE                 	db	254
   983  007B76  FC                 	db	252
   984  007B77  CC                 	db	204
   985  007B78  C6                 	db	198
   986  007B79  C6                 	db	198
   987  007B7A  C6                 	db	198
   988  007B7B  C3                 	db	195
   989  007B7C  00                 	db	0
   990  007B7D  00                 	db	0
   991  007B7E  00                 	db	0
   992  007B7F  00                 	db	0
   993  007B80  7C                 	db	124
   994  007B81  FE                 	db	254
   995  007B82  C6                 	db	198
   996  007B83  C6                 	db	198
   997  007B84  F0                 	db	240
   998  007B85  7C                 	db	124
   999  007B86  0E                 	db	14
  1000  007B87  C6                 	db	198
  1001  007B88  C6                 	db	198
  1002  007B89  FE                 	db	254
  1003  007B8A  7C                 	db	124
  1004  007B8B  00                 	db	0
  1005  007B8C  00                 	db	0
  1006  007B8D  00                 	db	0
  1007  007B8E  00                 	db	0
  1008  007B8F  FF                 	db	255
  1009  007B90  FF                 	db	255
  1010  007B91  18                 	db	24
  1011  007B92  18                 	db	24
  1012  007B93  18                 	db	24
  1013  007B94  18                 	db	24
  1014  007B95  18                 	db	24
  1015  007B96  18                 	db	24
  1016  007B97  18                 	db	24
  1017  007B98  18                 	db	24
  1018  007B99  18                 	db	24
  1019  007B9A  00                 	db	0
  1020  007B9B  00                 	db	0
  1021  007B9C  00                 	db	0
  1022  007B9D  00                 	db	0
  1023  007B9E  C6                 	db	198
  1024  007B9F  C6                 	db	198
  1025  007BA0  C6                 	db	198
  1026  007BA1  C6                 	db	198
  1027  007BA2  C6                 	db	198
  1028  007BA3  C6                 	db	198
  1029  007BA4  C6                 	db	198
  1030  007BA5  C6                 	db	198
  1031  007BA6  C6                 	db	198
  1032  007BA7  7E                 	db	126
  1033  007BA8  38                 	db	56
  1034  007BA9  00                 	db	0
  1035  007BAA  00                 	db	0
  1036  007BAB  00                 	db	0
  1037  007BAC  00                 	db	0
  1038  007BAD  00                 	db	0
  1039  007BAE  C1                 	db	193
  1040  007BAF  80                 	db	128
  1041  007BB0  C1                 	db	193
  1042  007BB1  80                 	db	128
  1043  007BB2  63                 	db	99
  1044  007BB3  00                 	db	0
  1045  007BB4  63                 	db	99
  1046  007BB5  00                 	db	0
  1047  007BB6  63                 	db	99
  1048  007BB7  00                 	db	0
  1049  007BB8  36                 	db	54
  1050  007BB9  00                 	db	0
  1051  007BBA  36                 	db	54
  1052  007BBB  00                 	db	0
  1053  007BBC  36                 	db	54
  1054  007BBD  00                 	db	0
  1055  007BBE  1C                 	db	28
  1056  007BBF  00                 	db	0
  1057  007BC0  1C                 	db	28
  1058  007BC1  00                 	db	0
  1059  007BC2  1C                 	db	28
  1060  007BC3  00                 	db	0
  1061  007BC4  00                 	db	0
  1062  007BC5  00                 	db	0
  1063  007BC6  00                 	db	0
  1064  007BC7  00                 	db	0
  1065  007BC8  00                 	db	0
  1066  007BC9  00                 	db	0
  1067  007BCA  00                 	db	0
  1068  007BCB  00                 	db	0
  1069  007BCC  C4                 	db	196
  1070  007BCD  60                 	db	96
  1071  007BCE  C4                 	db	196
  1072  007BCF  60                 	db	96
  1073  007BD0  CA                 	db	202
  1074  007BD1  60                 	db	96
  1075  007BD2  6A                 	db	106
  1076  007BD3  C0                 	db	192
  1077  007BD4  6A                 	db	106
  1078  007BD5  C0                 	db	192
  1079  007BD6  6A                 	db	106
  1080  007BD7  C0                 	db	192
  1081  007BD8  6A                 	db	106
  1082  007BD9  C0                 	db	192
  1083  007BDA  6A                 	db	106
  1084  007BDB  C0                 	db	192
  1085  007BDC  31                 	db	49
  1086  007BDD  80                 	db	128
  1087  007BDE  31                 	db	49
  1088  007BDF  80                 	db	128
  1089  007BE0  31                 	db	49
  1090  007BE1  80                 	db	128
  1091  007BE2  00                 	db	0
  1092  007BE3  00                 	db	0
  1093  007BE4  00                 	db	0
  1094  007BE5  00                 	db	0
  1095  007BE6  00                 	db	0
  1096  007BE7  00                 	db	0
  1097  007BE8  00                 	db	0
  1098  007BE9  00                 	db	0
  1099  007BEA  C1                 	db	193
  1100  007BEB  80                 	db	128
  1101  007BEC  63                 	db	99
  1102  007BED  00                 	db	0
  1103  007BEE  36                 	db	54
  1104  007BEF  00                 	db	0
  1105  007BF0  36                 	db	54
  1106  007BF1  00                 	db	0
  1107  007BF2  1C                 	db	28
  1108  007BF3  00                 	db	0
  1109  007BF4  1C                 	db	28
  1110  007BF5  00                 	db	0
  1111  007BF6  1C                 	db	28
  1112  007BF7  00                 	db	0
  1113  007BF8  36                 	db	54
  1114  007BF9  00                 	db	0
  1115  007BFA  36                 	db	54
  1116  007BFB  00                 	db	0
  1117  007BFC  63                 	db	99
  1118  007BFD  00                 	db	0
  1119  007BFE  C1                 	db	193
  1120  007BFF  80                 	db	128
  1121  007C00  00                 	db	0
  1122  007C01  00                 	db	0
  1123  007C02  00                 	db	0
  1124  007C03  00                 	db	0
  1125  007C04  00                 	db	0
  1126  007C05  00                 	db	0
  1127  007C06  00                 	db	0
  1128  007C07  C3                 	db	195
  1129  007C08  66                 	db	102
  1130  007C09  66                 	db	102
  1131  007C0A  3C                 	db	60
  1132  007C0B  3C                 	db	60
  1133  007C0C  18                 	db	24
  1134  007C0D  18                 	db	24
  1135  007C0E  18                 	db	24
  1136  007C0F  18                 	db	24
  1137  007C10  18                 	db	24
  1138  007C11  18                 	db	24
  1139  007C12  00                 	db	0
  1140  007C13  00                 	db	0
  1141  007C14  00                 	db	0
  1142  007C15  00                 	db	0
  1143  007C16  FE                 	db	254
  1144  007C17  FE                 	db	254
  1145  007C18  06                 	db	6
  1146  007C19  0C                 	db	12
  1147  007C1A  18                 	db	24
  1148  007C1B  30                 	db	48
  1149  007C1C  30                 	db	48
  1150  007C1D  60                 	db	96
  1151  007C1E  C0                 	db	192
  1152  007C1F  FE                 	db	254
  1153  007C20  FE                 	db	254
  1154  007C21  00                 	db	0
  1155  007C22  00                 	db	0
  1156  007C23  00                 	db	0
  1157  007C24  00                 	db	0
  1158  007C25  E0                 	db	224
  1159  007C26  E0                 	db	224
  1160  007C27  C0                 	db	192
  1161  007C28  C0                 	db	192
  1162  007C29  C0                 	db	192
  1163  007C2A  C0                 	db	192
  1164  007C2B  C0                 	db	192
  1165  007C2C  C0                 	db	192
  1166  007C2D  C0                 	db	192
  1167  007C2E  C0                 	db	192
  1168  007C2F  C0                 	db	192
  1169  007C30  C0                 	db	192
  1170  007C31  E0                 	db	224
  1171  007C32  E0                 	db	224
  1172  007C33  00                 	db	0
  1173  007C34  C0                 	db	192
  1174  007C35  C0                 	db	192
  1175  007C36  C0                 	db	192
  1176  007C37  60                 	db	96
  1177  007C38  60                 	db	96
  1178  007C39  60                 	db	96
  1179  007C3A  60                 	db	96
  1180  007C3B  60                 	db	96
  1181  007C3C  30                 	db	48
  1182  007C3D  30                 	db	48
  1183  007C3E  30                 	db	48
  1184  007C3F  00                 	db	0
  1185  007C40  00                 	db	0
  1186  007C41  00                 	db	0
  1187  007C42  00                 	db	0
  1188  007C43  E0                 	db	224
  1189  007C44  E0                 	db	224
  1190  007C45  60                 	db	96
  1191  007C46  60                 	db	96
  1192  007C47  60                 	db	96
  1193  007C48  60                 	db	96
  1194  007C49  60                 	db	96
  1195  007C4A  60                 	db	96
  1196  007C4B  60                 	db	96
  1197  007C4C  60                 	db	96
  1198  007C4D  60                 	db	96
  1199  007C4E  60                 	db	96
  1200  007C4F  E0                 	db	224
  1201  007C50  E0                 	db	224
  1202  007C51  00                 	db	0
  1203  007C52  38                 	db	56
  1204  007C53  38                 	db	56
  1205  007C54  6C                 	db	108
  1206  007C55  6C                 	db	108
  1207  007C56  6C                 	db	108
  1208  007C57  C6                 	db	198
  1209  007C58  00                 	db	0
  1210  007C59  00                 	db	0
  1211  007C5A  00                 	db	0
  1212  007C5B  00                 	db	0
  1213  007C5C  00                 	db	0
  1214  007C5D  00                 	db	0
  1215  007C5E  00                 	db	0
  1216  007C5F  00                 	db	0
  1217  007C60  00                 	db	0
  1218  007C61  00                 	db	0
  1219  007C62  00                 	db	0
  1220  007C63  00                 	db	0
  1221  007C64  00                 	db	0
  1222  007C65  00                 	db	0
  1223  007C66  00                 	db	0
  1224  007C67  00                 	db	0
  1225  007C68  00                 	db	0
  1226  007C69  00                 	db	0
  1227  007C6A  00                 	db	0
  1228  007C6B  00                 	db	0
  1229  007C6C  00                 	db	0
  1230  007C6D  FE                 	db	254
  1231  007C6E  00                 	db	0
  1232  007C6F  00                 	db	0
  1233  007C70  C0                 	db	192
  1234  007C71  60                 	db	96
  1235  007C72  00                 	db	0
  1236  007C73  00                 	db	0
  1237  007C74  00                 	db	0
  1238  007C75  00                 	db	0
  1239  007C76  00                 	db	0
  1240  007C77  00                 	db	0
  1241  007C78  00                 	db	0
  1242  007C79  00                 	db	0
  1243  007C7A  00                 	db	0
  1244  007C7B  00                 	db	0
  1245  007C7C  00                 	db	0
  1246  007C7D  00                 	db	0
  1247  007C7E  00                 	db	0
  1248  007C7F  00                 	db	0
  1249  007C80  00                 	db	0
  1250  007C81  00                 	db	0
  1251  007C82  78                 	db	120
  1252  007C83  FC                 	db	252
  1253  007C84  CC                 	db	204
  1254  007C85  3C                 	db	60
  1255  007C86  FC                 	db	252
  1256  007C87  CC                 	db	204
  1257  007C88  FC                 	db	252
  1258  007C89  6C                 	db	108
  1259  007C8A  00                 	db	0
  1260  007C8B  00                 	db	0
  1261  007C8C  00                 	db	0
  1262  007C8D  00                 	db	0
  1263  007C8E  C0                 	db	192
  1264  007C8F  C0                 	db	192
  1265  007C90  C0                 	db	192
  1266  007C91  F8                 	db	248
  1267  007C92  FC                 	db	252
  1268  007C93  CC                 	db	204
  1269  007C94  CC                 	db	204
  1270  007C95  CC                 	db	204
  1271  007C96  CC                 	db	204
  1272  007C97  F8                 	db	248
  1273  007C98  F8                 	db	248
  1274  007C99  00                 	db	0
  1275  007C9A  00                 	db	0
  1276  007C9B  00                 	db	0
  1277  007C9C  00                 	db	0
  1278  007C9D  00                 	db	0
  1279  007C9E  00                 	db	0
  1280  007C9F  00                 	db	0
  1281  007CA0  70                 	db	112
  1282  007CA1  78                 	db	120
  1283  007CA2  D8                 	db	216
  1284  007CA3  C0                 	db	192
  1285  007CA4  C0                 	db	192
  1286  007CA5  D8                 	db	216
  1287  007CA6  78                 	db	120
  1288  007CA7  70                 	db	112
  1289  007CA8  00                 	db	0
  1290  007CA9  00                 	db	0
  1291  007CAA  00                 	db	0
  1292  007CAB  00                 	db	0
  1293  007CAC  0C                 	db	12
  1294  007CAD  0C                 	db	12
  1295  007CAE  0C                 	db	12
  1296  007CAF  7C                 	db	124
  1297  007CB0  FC                 	db	252
  1298  007CB1  CC                 	db	204
  1299  007CB2  CC                 	db	204
  1300  007CB3  CC                 	db	204
  1301  007CB4  CC                 	db	204
  1302  007CB5  FC                 	db	252
  1303  007CB6  7C                 	db	124
  1304  007CB7  00                 	db	0
  1305  007CB8  00                 	db	0
  1306  007CB9  00                 	db	0
  1307  007CBA  00                 	db	0
  1308  007CBB  00                 	db	0
  1309  007CBC  00                 	db	0
  1310  007CBD  00                 	db	0
  1311  007CBE  70                 	db	112
  1312  007CBF  F8                 	db	248
  1313  007CC0  D8                 	db	216
  1314  007CC1  F8                 	db	248
  1315  007CC2  C0                 	db	192
  1316  007CC3  D8                 	db	216
  1317  007CC4  F8                 	db	248
  1318  007CC5  70                 	db	112
  1319  007CC6  00                 	db	0
  1320  007CC7  00                 	db	0
  1321  007CC8  00                 	db	0
  1322  007CC9  00                 	db	0
  1323  007CCA  30                 	db	48
  1324  007CCB  70                 	db	112
  1325  007CCC  60                 	db	96
  1326  007CCD  F0                 	db	240
  1327  007CCE  F0                 	db	240
  1328  007CCF  60                 	db	96
  1329  007CD0  60                 	db	96
  1330  007CD1  60                 	db	96
  1331  007CD2  60                 	db	96
  1332  007CD3  60                 	db	96
  1333  007CD4  60                 	db	96
  1334  007CD5  00                 	db	0
  1335  007CD6  00                 	db	0
  1336  007CD7  00                 	db	0
  1337  007CD8  00                 	db	0
  1338  007CD9  00                 	db	0
  1339  007CDA  00                 	db	0
  1340  007CDB  00                 	db	0
  1341  007CDC  6C                 	db	108
  1342  007CDD  FC                 	db	252
  1343  007CDE  CC                 	db	204
  1344  007CDF  CC                 	db	204
  1345  007CE0  CC                 	db	204
  1346  007CE1  CC                 	db	204
  1347  007CE2  FC                 	db	252
  1348  007CE3  6C                 	db	108
  1349  007CE4  0C                 	db	12
  1350  007CE5  CC                 	db	204
  1351  007CE6  78                 	db	120
  1352  007CE7  00                 	db	0
  1353  007CE8  C0                 	db	192
  1354  007CE9  C0                 	db	192
  1355  007CEA  C0                 	db	192
  1356  007CEB  D8                 	db	216
  1357  007CEC  FC                 	db	252
  1358  007CED  CC                 	db	204
  1359  007CEE  CC                 	db	204
  1360  007CEF  CC                 	db	204
  1361  007CF0  CC                 	db	204
  1362  007CF1  CC                 	db	204
  1363  007CF2  CC                 	db	204
  1364  007CF3  00                 	db	0
  1365  007CF4  00                 	db	0
  1366  007CF5  00                 	db	0
  1367  007CF6  00                 	db	0
  1368  007CF7  C0                 	db	192
  1369  007CF8  C0                 	db	192
  1370  007CF9  00                 	db	0
  1371  007CFA  C0                 	db	192
  1372  007CFB  C0                 	db	192
  1373  007CFC  C0                 	db	192
  1374  007CFD  C0                 	db	192
  1375  007CFE  C0                 	db	192
  1376  007CFF  C0                 	db	192
  1377  007D00  C0                 	db	192
  1378  007D01  C0                 	db	192
  1379  007D02  00                 	db	0
  1380  007D03  00                 	db	0
  1381  007D04  00                 	db	0
  1382  007D05  00                 	db	0
  1383  007D06  30                 	db	48
  1384  007D07  30                 	db	48
  1385  007D08  00                 	db	0
  1386  007D09  30                 	db	48
  1387  007D0A  30                 	db	48
  1388  007D0B  30                 	db	48
  1389  007D0C  30                 	db	48
  1390  007D0D  30                 	db	48
  1391  007D0E  30                 	db	48
  1392  007D0F  30                 	db	48
  1393  007D10  30                 	db	48
  1394  007D11  30                 	db	48
  1395  007D12  F0                 	db	240
  1396  007D13  E0                 	db	224
  1397  007D14  00                 	db	0
  1398  007D15  C0                 	db	192
  1399  007D16  C0                 	db	192
  1400  007D17  C0                 	db	192
  1401  007D18  CC                 	db	204
  1402  007D19  D8                 	db	216
  1403  007D1A  F0                 	db	240
  1404  007D1B  F8                 	db	248
  1405  007D1C  D8                 	db	216
  1406  007D1D  D8                 	db	216
  1407  007D1E  CC                 	db	204
  1408  007D1F  CC                 	db	204
  1409  007D20  00                 	db	0
  1410  007D21  00                 	db	0
  1411  007D22  00                 	db	0
  1412  007D23  00                 	db	0
  1413  007D24  C0                 	db	192
  1414  007D25  C0                 	db	192
  1415  007D26  C0                 	db	192
  1416  007D27  C0                 	db	192
  1417  007D28  C0                 	db	192
  1418  007D29  C0                 	db	192
  1419  007D2A  C0                 	db	192
  1420  007D2B  C0                 	db	192
  1421  007D2C  C0                 	db	192
  1422  007D2D  C0                 	db	192
  1423  007D2E  C0                 	db	192
  1424  007D2F  00                 	db	0
  1425  007D30  00                 	db	0
  1426  007D31  00                 	db	0
  1427  007D32  00                 	db	0
  1428  007D33  00                 	db	0
  1429  007D34  00                 	db	0
  1430  007D35  00                 	db	0
  1431  007D36  00                 	db	0
  1432  007D37  00                 	db	0
  1433  007D38  00                 	db	0
  1434  007D39  00                 	db	0
  1435  007D3A  D9                 	db	217
  1436  007D3B  80                 	db	128
  1437  007D3C  FF                 	db	255
  1438  007D3D  C0                 	db	192
  1439  007D3E  CC                 	db	204
  1440  007D3F  C0                 	db	192
  1441  007D40  CC                 	db	204
  1442  007D41  C0                 	db	192
  1443  007D42  CC                 	db	204
  1444  007D43  C0                 	db	192
  1445  007D44  CC                 	db	204
  1446  007D45  C0                 	db	192
  1447  007D46  CC                 	db	204
  1448  007D47  C0                 	db	192
  1449  007D48  CC                 	db	204
  1450  007D49  C0                 	db	192
  1451  007D4A  00                 	db	0
  1452  007D4B  00                 	db	0
  1453  007D4C  00                 	db	0
  1454  007D4D  00                 	db	0
  1455  007D4E  00                 	db	0
  1456  007D4F  00                 	db	0
  1457  007D50  00                 	db	0
  1458  007D51  00                 	db	0
  1459  007D52  00                 	db	0
  1460  007D53  00                 	db	0
  1461  007D54  D8                 	db	216
  1462  007D55  FC                 	db	252
  1463  007D56  CC                 	db	204
  1464  007D57  CC                 	db	204
  1465  007D58  CC                 	db	204
  1466  007D59  CC                 	db	204
  1467  007D5A  CC                 	db	204
  1468  007D5B  CC                 	db	204
  1469  007D5C  00                 	db	0
  1470  007D5D  00                 	db	0
  1471  007D5E  00                 	db	0
  1472  007D5F  00                 	db	0
  1473  007D60  00                 	db	0
  1474  007D61  00                 	db	0
  1475  007D62  00                 	db	0
  1476  007D63  78                 	db	120
  1477  007D64  78                 	db	120
  1478  007D65  CC                 	db	204
  1479  007D66  CC                 	db	204
  1480  007D67  CC                 	db	204
  1481  007D68  CC                 	db	204
  1482  007D69  78                 	db	120
  1483  007D6A  78                 	db	120
  1484  007D6B  00                 	db	0
  1485  007D6C  00                 	db	0
  1486  007D6D  00                 	db	0
  1487  007D6E  00                 	db	0
  1488  007D6F  00                 	db	0
  1489  007D70  00                 	db	0
  1490  007D71  00                 	db	0
  1491  007D72  D8                 	db	216
  1492  007D73  FC                 	db	252
  1493  007D74  CC                 	db	204
  1494  007D75  CC                 	db	204
  1495  007D76  CC                 	db	204
  1496  007D77  CC                 	db	204
  1497  007D78  F8                 	db	248
  1498  007D79  D8                 	db	216
  1499  007D7A  C0                 	db	192
  1500  007D7B  C0                 	db	192
  1501  007D7C  C0                 	db	192
  1502  007D7D  00                 	db	0
  1503  007D7E  00                 	db	0
  1504  007D7F  00                 	db	0
  1505  007D80  00                 	db	0
  1506  007D81  6C                 	db	108
  1507  007D82  FC                 	db	252
  1508  007D83  CC                 	db	204
  1509  007D84  CC                 	db	204
  1510  007D85  CC                 	db	204
  1511  007D86  CC                 	db	204
  1512  007D87  FC                 	db	252
  1513  007D88  6C                 	db	108
  1514  007D89  0C                 	db	12
  1515  007D8A  0C                 	db	12
  1516  007D8B  0C                 	db	12
  1517  007D8C  00                 	db	0
  1518  007D8D  00                 	db	0
  1519  007D8E  00                 	db	0
  1520  007D8F  00                 	db	0
  1521  007D90  D0                 	db	208
  1522  007D91  F0                 	db	240
  1523  007D92  C0                 	db	192
  1524  007D93  C0                 	db	192
  1525  007D94  C0                 	db	192
  1526  007D95  C0                 	db	192
  1527  007D96  C0                 	db	192
  1528  007D97  C0                 	db	192
  1529  007D98  00                 	db	0
  1530  007D99  00                 	db	0
  1531  007D9A  00                 	db	0
  1532  007D9B  00                 	db	0
  1533  007D9C  00                 	db	0
  1534  007D9D  00                 	db	0
  1535  007D9E  00                 	db	0
  1536  007D9F  70                 	db	112
  1537  007DA0  F8                 	db	248
  1538  007DA1  C8                 	db	200
  1539  007DA2  E0                 	db	224
  1540  007DA3  38                 	db	56
  1541  007DA4  98                 	db	152
  1542  007DA5  F8                 	db	248
  1543  007DA6  70                 	db	112
  1544  007DA7  00                 	db	0
  1545  007DA8  00                 	db	0
  1546  007DA9  00                 	db	0
  1547  007DAA  00                 	db	0
  1548  007DAB  20                 	db	32
  1549  007DAC  60                 	db	96
  1550  007DAD  60                 	db	96
  1551  007DAE  F0                 	db	240
  1552  007DAF  F0                 	db	240
  1553  007DB0  60                 	db	96
  1554  007DB1  60                 	db	96
  1555  007DB2  60                 	db	96
  1556  007DB3  60                 	db	96
  1557  007DB4  70                 	db	112
  1558  007DB5  70                 	db	112
  1559  007DB6  00                 	db	0
  1560  007DB7  00                 	db	0
  1561  007DB8  00                 	db	0
  1562  007DB9  00                 	db	0
  1563  007DBA  00                 	db	0
  1564  007DBB  00                 	db	0
  1565  007DBC  00                 	db	0
  1566  007DBD  CC                 	db	204
  1567  007DBE  CC                 	db	204
  1568  007DBF  CC                 	db	204
  1569  007DC0  CC                 	db	204
  1570  007DC1  CC                 	db	204
  1571  007DC2  CC                 	db	204
  1572  007DC3  FC                 	db	252
  1573  007DC4  6C                 	db	108
  1574  007DC5  00                 	db	0
  1575  007DC6  00                 	db	0
  1576  007DC7  00                 	db	0
  1577  007DC8  00                 	db	0
  1578  007DC9  00                 	db	0
  1579  007DCA  00                 	db	0
  1580  007DCB  00                 	db	0
  1581  007DCC  C6                 	db	198
  1582  007DCD  C6                 	db	198
  1583  007DCE  6C                 	db	108
  1584  007DCF  6C                 	db	108
  1585  007DD0  6C                 	db	108
  1586  007DD1  38                 	db	56
  1587  007DD2  38                 	db	56
  1588  007DD3  38                 	db	56
  1589  007DD4  00                 	db	0
  1590  007DD5  00                 	db	0
  1591  007DD6  00                 	db	0
  1592  007DD7  00                 	db	0
  1593  007DD8  00                 	db	0
  1594  007DD9  00                 	db	0
  1595  007DDA  00                 	db	0
  1596  007DDB  00                 	db	0
  1597  007DDC  00                 	db	0
  1598  007DDD  00                 	db	0
  1599  007DDE  00                 	db	0
  1600  007DDF  DD                 	db	221
  1601  007DE0  80                 	db	128
  1602  007DE1  DD                 	db	221
  1603  007DE2  80                 	db	128
  1604  007DE3  DD                 	db	221
  1605  007DE4  80                 	db	128
  1606  007DE5  D5                 	db	213
  1607  007DE6  80                 	db	128
  1608  007DE7  55                 	db	85
  1609  007DE8  00                 	db	0
  1610  007DE9  77                 	db	119
  1611  007DEA  00                 	db	0
  1612  007DEB  77                 	db	119
  1613  007DEC  00                 	db	0
  1614  007DED  77                 	db	119
  1615  007DEE  00                 	db	0
  1616  007DEF  00                 	db	0
  1617  007DF0  00                 	db	0
  1618  007DF1  00                 	db	0
  1619  007DF2  00                 	db	0
  1620  007DF3  00                 	db	0
  1621  007DF4  00                 	db	0
  1622  007DF5  00                 	db	0
  1623  007DF6  00                 	db	0
  1624  007DF7  00                 	db	0
  1625  007DF8  00                 	db	0
  1626  007DF9  CC                 	db	204
  1627  007DFA  78                 	db	120
  1628  007DFB  78                 	db	120
  1629  007DFC  30                 	db	48
  1630  007DFD  30                 	db	48
  1631  007DFE  78                 	db	120
  1632  007DFF  78                 	db	120
  1633  007E00  CC                 	db	204
  1634  007E01  00                 	db	0
  1635  007E02  00                 	db	0
  1636  007E03  00                 	db	0
  1637  007E04  00                 	db	0
  1638  007E05  00                 	db	0
  1639  007E06  00                 	db	0
  1640  007E07  00                 	db	0
  1641  007E08  C6                 	db	198
  1642  007E09  C6                 	db	198
  1643  007E0A  6C                 	db	108
  1644  007E0B  6C                 	db	108
  1645  007E0C  6C                 	db	108
  1646  007E0D  38                 	db	56
  1647  007E0E  38                 	db	56
  1648  007E0F  38                 	db	56
  1649  007E10  30                 	db	48
  1650  007E11  F0                 	db	240
  1651  007E12  E0                 	db	224
  1652  007E13  00                 	db	0
  1653  007E14  00                 	db	0
  1654  007E15  00                 	db	0
  1655  007E16  00                 	db	0
  1656  007E17  FC                 	db	252
  1657  007E18  FC                 	db	252
  1658  007E19  18                 	db	24
  1659  007E1A  30                 	db	48
  1660  007E1B  30                 	db	48
  1661  007E1C  60                 	db	96
  1662  007E1D  FC                 	db	252
  1663  007E1E  FC                 	db	252
  1664  007E1F  00                 	db	0
  1665  007E20  00                 	db	0
  1666  007E21  00                 	db	0
  1667  007E22  00                 	db	0
  1668  007E23  30                 	db	48
  1669  007E24  70                 	db	112
  1670  007E25  60                 	db	96
  1671  007E26  60                 	db	96
  1672  007E27  60                 	db	96
  1673  007E28  60                 	db	96
  1674  007E29  C0                 	db	192
  1675  007E2A  C0                 	db	192
  1676  007E2B  60                 	db	96
  1677  007E2C  60                 	db	96
  1678  007E2D  60                 	db	96
  1679  007E2E  60                 	db	96
  1680  007E2F  70                 	db	112
  1681  007E30  30                 	db	48
  1682  007E31  00                 	db	0
  1683  007E32  C0                 	db	192
  1684  007E33  C0                 	db	192
  1685  007E34  C0                 	db	192
  1686  007E35  C0                 	db	192
  1687  007E36  C0                 	db	192
  1688  007E37  C0                 	db	192
  1689  007E38  C0                 	db	192
  1690  007E39  C0                 	db	192
  1691  007E3A  C0                 	db	192
  1692  007E3B  C0                 	db	192
  1693  007E3C  C0                 	db	192
  1694  007E3D  C0                 	db	192
  1695  007E3E  C0                 	db	192
  1696  007E3F  C0                 	db	192
  1697  007E40  00                 	db	0
  1698  007E41  C0                 	db	192
  1699  007E42  E0                 	db	224
  1700  007E43  60                 	db	96
  1701  007E44  60                 	db	96
  1702  007E45  60                 	db	96
  1703  007E46  60                 	db	96
  1704  007E47  30                 	db	48
  1705  007E48  30                 	db	48
  1706  007E49  60                 	db	96
  1707  007E4A  60                 	db	96
  1708  007E4B  60                 	db	96
  1709  007E4C  60                 	db	96
  1710  007E4D  E0                 	db	224
  1711  007E4E  C0                 	db	192
  1712  007E4F  00                 	db	0
  1713  007E50  00                 	db	0
  1714  007E51  00                 	db	0
  1715  007E52  00                 	db	0
  1716  007E53  00                 	db	0
  1717  007E54  E4                 	db	228
  1718  007E55  FC                 	db	252
  1719  007E56  9C                 	db	156
  1720  007E57  00                 	db	0
  1721  007E58  00                 	db	0
  1722  007E59  00                 	db	0
  1723  007E5A  00                 	db	0
  1724  007E5B  00                 	db	0
  1725  007E5C  00                 	db	0
  1726  007E5D  00                 	db	0
  1727  007E5E                     __end_of_arialNarrow_12ptBitmaps:
  1728                           	callstack 0
  1729  007E5E                     _arialNarrow_12ptDescriptors:
  1730                           	callstack 0
  1731  007E5E  08                 	db	8
  1732  007E5F  0000               	dw	0
  1733  007E61  02                 	db	2
  1734  007E62  000F               	dw	15
  1735  007E64  05                 	db	5
  1736  007E65  001E               	dw	30
  1737  007E67  07                 	db	7
  1738  007E68  002D               	dw	45
  1739  007E6A  07                 	db	7
  1740  007E6B  003C               	dw	60
  1741  007E6D  0A                 	db	10
  1742  007E6E  004B               	dw	75
  1743  007E70  08                 	db	8
  1744  007E71  0069               	dw	105
  1745  007E73  02                 	db	2
  1746  007E74  0078               	dw	120
  1747  007E76  04                 	db	4
  1748  007E77  0087               	dw	135
  1749  007E79  04                 	db	4
  1750  007E7A  0096               	dw	150
  1751  007E7C  05                 	db	5
  1752  007E7D  00A5               	dw	165
  1753  007E7F  06                 	db	6
  1754  007E80  00B4               	dw	180
  1755  007E82  02                 	db	2
  1756  007E83  00C3               	dw	195
  1757  007E85  04                 	db	4
  1758  007E86  00D2               	dw	210
  1759  007E88  02                 	db	2
  1760  007E89  00E1               	dw	225
  1761  007E8B  04                 	db	4
  1762  007E8C  00F0               	dw	240
  1763  007E8E  06                 	db	6
  1764  007E8F  00FF               	dw	255
  1765  007E91  04                 	db	4
  1766  007E92  010E               	dw	270
  1767  007E94  06                 	db	6
  1768  007E95  011D               	dw	285
  1769  007E97  06                 	db	6
  1770  007E98  012C               	dw	300
  1771  007E9A  07                 	db	7
  1772  007E9B  013B               	dw	315
  1773  007E9D  06                 	db	6
  1774  007E9E  014A               	dw	330
  1775  007EA0  05                 	db	5
  1776  007EA1  0159               	dw	345
  1777  007EA3  05                 	db	5
  1778  007EA4  0168               	dw	360
  1779  007EA6  06                 	db	6
  1780  007EA7  0177               	dw	375
  1781  007EA9  06                 	db	6
  1782  007EAA  0186               	dw	390
  1783  007EAC  02                 	db	2
  1784  007EAD  0195               	dw	405
  1785  007EAF  02                 	db	2
  1786  007EB0  01A4               	dw	420
  1787  007EB2  06                 	db	6
  1788  007EB3  01B3               	dw	435
  1789  007EB5  06                 	db	6
  1790  007EB6  01C2               	dw	450
  1791  007EB8  06                 	db	6
  1792  007EB9  01D1               	dw	465
  1793  007EBB  06                 	db	6
  1794  007EBC  01E0               	dw	480
  1795  007EBE  0D                 	db	13
  1796  007EBF  01EF               	dw	495
  1797  007EC1  09                 	db	9
  1798  007EC2  020D               	dw	525
  1799  007EC4  07                 	db	7
  1800  007EC5  022B               	dw	555
  1801  007EC7  08                 	db	8
  1802  007EC8  023A               	dw	570
  1803  007ECA  07                 	db	7
  1804  007ECB  0249               	dw	585
  1805  007ECD  07                 	db	7
  1806  007ECE  0258               	dw	600
  1807  007ED0  06                 	db	6
  1808  007ED1  0267               	dw	615
  1809  007ED3  08                 	db	8
  1810  007ED4  0276               	dw	630
  1811  007ED6  07                 	db	7
  1812  007ED7  0285               	dw	645
  1813  007ED9  02                 	db	2
  1814  007EDA  0294               	dw	660
  1815  007EDC  06                 	db	6
  1816  007EDD  02A3               	dw	675
  1817  007EDF  08                 	db	8
  1818  007EE0  02B2               	dw	690
  1819  007EE2  07                 	db	7
  1820  007EE3  02C1               	dw	705
  1821  007EE5  09                 	db	9
  1822  007EE6  02D0               	dw	720
  1823  007EE8  07                 	db	7
  1824  007EE9  02EE               	dw	750
  1825  007EEB  08                 	db	8
  1826  007EEC  02FD               	dw	765
  1827  007EEE  07                 	db	7
  1828  007EEF  030C               	dw	780
  1829  007EF1  09                 	db	9
  1830  007EF2  031B               	dw	795
  1831  007EF4  08                 	db	8
  1832  007EF5  0339               	dw	825
  1833  007EF7  07                 	db	7
  1834  007EF8  0348               	dw	840
  1835  007EFA  08                 	db	8
  1836  007EFB  0357               	dw	855
  1837  007EFD  07                 	db	7
  1838  007EFE  0366               	dw	870
  1839  007F00  09                 	db	9
  1840  007F01  0375               	dw	885
  1841  007F03  0B                 	db	11
  1842  007F04  0393               	dw	915
  1843  007F06  09                 	db	9
  1844  007F07  03B1               	dw	945
  1845  007F09  08                 	db	8
  1846  007F0A  03CF               	dw	975
  1847  007F0C  07                 	db	7
  1848  007F0D  03DE               	dw	990
  1849  007F0F  03                 	db	3
  1850  007F10  03ED               	dw	1005
  1851  007F12  04                 	db	4
  1852  007F13  03FC               	dw	1020
  1853  007F15  03                 	db	3
  1854  007F16  040B               	dw	1035
  1855  007F18  07                 	db	7
  1856  007F19  041A               	dw	1050
  1857  007F1B  07                 	db	7
  1858  007F1C  0429               	dw	1065
  1859  007F1E  03                 	db	3
  1860  007F1F  0438               	dw	1080
  1861  007F21  06                 	db	6
  1862  007F22  0447               	dw	1095
  1863  007F24  06                 	db	6
  1864  007F25  0456               	dw	1110
  1865  007F27  05                 	db	5
  1866  007F28  0465               	dw	1125
  1867  007F2A  06                 	db	6
  1868  007F2B  0474               	dw	1140
  1869  007F2D  05                 	db	5
  1870  007F2E  0483               	dw	1155
  1871  007F30  04                 	db	4
  1872  007F31  0492               	dw	1170
  1873  007F33  06                 	db	6
  1874  007F34  04A1               	dw	1185
  1875  007F36  06                 	db	6
  1876  007F37  04B0               	dw	1200
  1877  007F39  02                 	db	2
  1878  007F3A  04BF               	dw	1215
  1879  007F3C  04                 	db	4
  1880  007F3D  04CE               	dw	1230
  1881  007F3F  06                 	db	6
  1882  007F40  04DD               	dw	1245
  1883  007F42  02                 	db	2
  1884  007F43  04EC               	dw	1260
  1885  007F45  0A                 	db	10
  1886  007F46  04FB               	dw	1275
  1887  007F48  06                 	db	6
  1888  007F49  0519               	dw	1305
  1889  007F4B  06                 	db	6
  1890  007F4C  0528               	dw	1320
  1891  007F4E  06                 	db	6
  1892  007F4F  0537               	dw	1335
  1893  007F51  06                 	db	6
  1894  007F52  0546               	dw	1350
  1895  007F54  04                 	db	4
  1896  007F55  0555               	dw	1365
  1897  007F57  05                 	db	5
  1898  007F58  0564               	dw	1380
  1899  007F5A  04                 	db	4
  1900  007F5B  0573               	dw	1395
  1901  007F5D  06                 	db	6
  1902  007F5E  0582               	dw	1410
  1903  007F60  07                 	db	7
  1904  007F61  0591               	dw	1425
  1905  007F63  09                 	db	9
  1906  007F64  05A0               	dw	1440
  1907  007F66  06                 	db	6
  1908  007F67  05BE               	dw	1470
  1909  007F69  07                 	db	7
  1910  007F6A  05CD               	dw	1485
  1911  007F6C  06                 	db	6
  1912  007F6D  05DC               	dw	1500
  1913  007F6F  04                 	db	4
  1914  007F70  05EB               	dw	1515
  1915  007F72  02                 	db	2
  1916  007F73  05FA               	dw	1530
  1917  007F75  04                 	db	4
  1918  007F76  0609               	dw	1545
  1919  007F78  06                 	db	6
  1920  007F79  0618               	dw	1560
  1921  007F7B                     __end_of_arialNarrow_12ptDescriptors:
  1922                           	callstack 0
  1923  007F7B                     _arialNarrow_12ptFontInfo:
  1924                           	callstack 0
  1925  007F7B  0F                 	db	15
  1926  007F7C  20                 	db	32
  1927  007F7D  7E                 	db	126
  1928  007F7E  5E                 	db	low _arialNarrow_12ptDescriptors
  1929  007F7F  7E                 	db	high _arialNarrow_12ptDescriptors
  1930  007F80  37                 	db	low _arialNarrow_12ptBitmaps
  1931  007F81  78                 	db	high _arialNarrow_12ptBitmaps
  1932  007F82                     __end_of_arialNarrow_12ptFontInfo:
  1933                           	callstack 0
  1934  0000                     _ANSB2	set	31178
  1935  0000                     _ANSB1	set	31177
  1936  0000                     _WPUB	set	3937
  1937  0000                     _PORTBbits	set	3969
  1938  0000                     _ADRESL	set	4035
  1939  0000                     _ADRESH	set	4036
  1940  0000                     _ADCON0	set	4034
  1941  0000                     _LATA	set	3977
  1942  0000                     _TRISC	set	3988
  1943  0000                     _TRISA	set	3986
  1944  0000                     _PORTA	set	3968
  1945  0000                     _ADCON2	set	4032
  1946  0000                     _T2CONbits	set	4026
  1947  0000                     _CCPR2L	set	3943
  1948  0000                     _CCP2CONbits	set	3942
  1949  0000                     _PR2	set	4027
  1950  0000                     _TMR0L	set	4054
  1951  0000                     _TMR0H	set	4055
  1952  0000                     _T0CON	set	4053
  1953  0000                     _OSCCON	set	4051
  1954  0000                     _TMR0IF	set	32658
  1955  0000                     _LATB4	set	31828
  1956  0000                     _LATB1	set	31825
  1957  0000                     _INT1IF	set	32640
  1958  0000                     _TRISB4	set	31900
  1959  0000                     _LATB3	set	31827
  1960  0000                     _TRISB3	set	31899
  1961  0000                     _RBPU	set	32655
  1962  0000                     _TRISB1	set	31897
  1963  0000                     _LATB2	set	31826
  1964  0000                     _TRISB2	set	31898
  1965  0000                     _LATC2	set	31834
  1966  0000                     _LATC5	set	31837
  1967  0000                     _TRISC4	set	31908
  1968  0000                     _TRISC3	set	31907
  1969  0000                     _TRISC2	set	31906
  1970  0000                     _TRISC5	set	31909
  1971  0000                     _LATC3	set	31835
  1972  0000                     _LATC4	set	31836
  1973  0000                     _TMR2IF	set	31985
  1974  0000                     _TRISC1	set	31905
  1975  0000                     _TMR0IE	set	32661
  1976  0000                     _LATC0	set	31832
  1977  0000                     _TRISC0	set	31904
  1978  0000                     _INTEDG1	set	32653
  1979  0000                     _INT1IE	set	32643
  1980  0000                     _GIE	set	32663
  1981  0000                     _PLLEN	set	31966
  1982  007F82                     STR_15:
  1983  007F82  50                 	db	80	;'P'
  1984  007F83  4C                 	db	76	;'L'
  1985  007F84  41                 	db	65	;'A'
  1986  007F85  59                 	db	89	;'Y'
  1987  007F86  45                 	db	69	;'E'
  1988  007F87  52                 	db	82	;'R'
  1989  007F88  20                 	db	32
  1990  007F89  31                 	db	49	;'1'
  1991  007F8A  20                 	db	32
  1992  007F8B  57                 	db	87	;'W'
  1993  007F8C  49                 	db	73	;'I'
  1994  007F8D  4E                 	db	78	;'N'
  1995  007F8E  00                 	db	0
  1996  007F8F                     STR_14:
  1997  007F8F  50                 	db	80	;'P'
  1998  007F90  4C                 	db	76	;'L'
  1999  007F91  41                 	db	65	;'A'
  2000  007F92  59                 	db	89	;'Y'
  2001  007F93  45                 	db	69	;'E'
  2002  007F94  52                 	db	82	;'R'
  2003  007F95  20                 	db	32
  2004  007F96  32                 	db	50	;'2'
  2005  007F97  20                 	db	32
  2006  007F98  57                 	db	87	;'W'
  2007  007F99  49                 	db	73	;'I'
  2008  007F9A  4E                 	db	78	;'N'
  2009  007F9B  00                 	db	0
  2010  007F9C                     STR_11:
  2011  007F9C  50                 	db	80	;'P'
  2012  007F9D  41                 	db	65	;'A'
  2013  007F9E  52                 	db	82	;'R'
  2014  007F9F  41                 	db	65	;'A'
  2015  007FA0  4D                 	db	77	;'M'
  2016  007FA1  45                 	db	69	;'E'
  2017  007FA2  54                 	db	84	;'T'
  2018  007FA3  45                 	db	69	;'E'
  2019  007FA4  52                 	db	82	;'R'
  2020  007FA5  53                 	db	83	;'S'
  2021  007FA6  00                 	db	0
  2022  007FA7                     STR_12:
  2023  007FA7  4C                 	db	76	;'L'
  2024  007FA8  55                 	db	85	;'U'
  2025  007FA9  4D                 	db	77	;'M'
  2026  007FAA  49                 	db	73	;'I'
  2027  007FAB  4E                 	db	78	;'N'
  2028  007FAC  4F                 	db	79	;'O'
  2029  007FAD  53                 	db	83	;'S'
  2030  007FAE  49                 	db	73	;'I'
  2031  007FAF  54                 	db	84	;'T'
  2032  007FB0  59                 	db	89	;'Y'
  2033  007FB1  00                 	db	0
  2034  007FB2                     STR_6:
  2035  007FB2  50                 	db	80	;'P'
  2036  007FB3  61                 	db	97	;'a'
  2037  007FB4  72                 	db	114	;'r'
  2038  007FB5  61                 	db	97	;'a'
  2039  007FB6  6D                 	db	109	;'m'
  2040  007FB7  65                 	db	101	;'e'
  2041  007FB8  74                 	db	116	;'t'
  2042  007FB9  72                 	db	114	;'r'
  2043  007FBA  65                 	db	101	;'e'
  2044  007FBB  73                 	db	115	;'s'
  2045  007FBC  00                 	db	0
  2046  007FBD                     STR_1:
  2047  007FBD  4D                 	db	77	;'M'
  2048  007FBE  65                 	db	101	;'e'
  2049  007FBF  6E                 	db	110	;'n'
  2050  007FC0  75                 	db	117	;'u'
  2051  007FC1  53                 	db	83	;'S'
  2052  007FC2  74                 	db	116	;'t'
  2053  007FC3  61                 	db	97	;'a'
  2054  007FC4  72                 	db	114	;'r'
  2055  007FC5  74                 	db	116	;'t'
  2056  007FC6  00                 	db	0
  2057  007FC7                     STR_9:
  2058  007FC7  4E                 	db	78	;'N'
  2059  007FC8  65                 	db	101	;'e'
  2060  007FC9  77                 	db	119	;'w'
  2061  007FCA  20                 	db	32
  2062  007FCB  47                 	db	71	;'G'
  2063  007FCC  61                 	db	97	;'a'
  2064  007FCD  6D                 	db	109	;'m'
  2065  007FCE  65                 	db	101	;'e'
  2066  007FCF  00                 	db	0
  2067  007FD0                     STR_7:
  2068  007FD0  54                 	db	84	;'T'
  2069  007FD1  75                 	db	117	;'u'
  2070  007FD2  72                 	db	114	;'r'
  2071  007FD3  6E                 	db	110	;'n'
  2072  007FD4  20                 	db	32
  2073  007FD5  4F                 	db	79	;'O'
  2074  007FD6  66                 	db	102	;'f'
  2075  007FD7  66                 	db	102	;'f'
  2076  007FD8  00                 	db	0
  2077  007FD9                     STR_4:
  2078  007FD9  31                 	db	49	;'1'
  2079  007FDA  20                 	db	32
  2080  007FDB  50                 	db	80	;'P'
  2081  007FDC  6C                 	db	108	;'l'
  2082  007FDD  61                 	db	97	;'a'
  2083  007FDE  79                 	db	121	;'y'
  2084  007FDF  65                 	db	101	;'e'
  2085  007FE0  72                 	db	114	;'r'
  2086  007FE1  00                 	db	0
  2087  007FE2                     STR_5:
  2088  007FE2  32                 	db	50	;'2'
  2089  007FE3  20                 	db	32
  2090  007FE4  50                 	db	80	;'P'
  2091  007FE5  6C                 	db	108	;'l'
  2092  007FE6  61                 	db	97	;'a'
  2093  007FE7  79                 	db	121	;'y'
  2094  007FE8  65                 	db	101	;'e'
  2095  007FE9  72                 	db	114	;'r'
  2096  007FEA  00                 	db	0
  2097  007FEB                     STR_10:
  2098  007FEB  57                 	db	87	;'W'
  2099  007FEC  45                 	db	69	;'E'
  2100  007FED  4C                 	db	76	;'L'
  2101  007FEE  43                 	db	67	;'C'
  2102  007FEF  4F                 	db	79	;'O'
  2103  007FF0  4D                 	db	77	;'M'
  2104  007FF1  45                 	db	69	;'E'
  2105  007FF2  00                 	db	0
  2106  007FF3                     STR_13:
  2107  007FF3  4C                 	db	76	;'L'
  2108  007FF4  45                 	db	69	;'E'
  2109  007FF5  56                 	db	86	;'V'
  2110  007FF6  45                 	db	69	;'E'
  2111  007FF7  4C                 	db	76	;'L'
  2112  007FF8  00                 	db	0
  2113  007FF9                     STR_2:
  2114  007FF9  25                 	db	37
  2115  007FFA  64                 	db	100	;'d'
  2116  007FFB  00                 	db	0
  2117  007FFC                     STR_8:
  2118  007FFC  58                 	db	88	;'X'
  2119  007FFD  00                 	db	0
  2120  007FFE  00                 	db	0	; dummy byte at the end
  2121  0000                     
  2122                           ; #config settings
  2123                           
  2124                           	psect	cinit
  2125  00575C                     __pcinit:
  2126                           	callstack 0
  2127  00575C                     start_initialization:
  2128                           	callstack 0
  2129  00575C                     __initialization:
  2130                           	callstack 0
  2131                           
  2132                           ; Clear objects allocated to BANK1 (240 bytes)
  2133  00575C  EE01  F000         	lfsr	0,__pbssBANK1
  2134  005760  0EF0               	movlw	240
  2135  005762                     clear_0:
  2136  005762  6AEE               	clrf	postinc0,c
  2137  005764  06E8               	decf	wreg,f,c
  2138  005766  E1FD               	bnz	clear_0
  2139                           
  2140                           ; Clear objects allocated to BANK0 (74 bytes)
  2141  005768  EE00  F060         	lfsr	0,__pbssBANK0
  2142  00576C  0E4A               	movlw	74
  2143  00576E                     clear_1:
  2144  00576E  6AEE               	clrf	postinc0,c
  2145  005770  06E8               	decf	wreg,f,c
  2146  005772  E1FD               	bnz	clear_1
  2147                           
  2148                           ; Clear objects allocated to COMRAM (8 bytes)
  2149  005774  EE00  F046         	lfsr	0,__pbssCOMRAM
  2150  005778  0E08               	movlw	8
  2151  00577A                     clear_2:
  2152  00577A  6AEE               	clrf	postinc0,c
  2153  00577C  06E8               	decf	wreg,f,c
  2154  00577E  E1FD               	bnz	clear_2
  2155  005780                     end_of_initialization:
  2156                           	callstack 0
  2157  005780                     __end_of__initialization:
  2158                           	callstack 0
  2159  005780  904E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2160  005782  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2161  005784  0E00               	movlw	low (__Lmediumconst shr (0+16))
  2162  005786  6EF8               	movwf	tblptru,c
  2163  005788  0100               	movlb	0
  2164  00578A  EF0C  F02D         	goto	_main	;jump to C main() function
  2165                           
  2166                           	psect	bssCOMRAM
  2167  000046                     __pbssCOMRAM:
  2168                           	callstack 0
  2169  000046                     _width:
  2170                           	callstack 0
  2171  000046                     	ds	2
  2172  000048                     _prec:
  2173                           	callstack 0
  2174  000048                     	ds	2
  2175  00004A                     _flags:
  2176                           	callstack 0
  2177  00004A                     	ds	2
  2178  00004C                     _gameStateMachine:
  2179                           	callstack 0
  2180  00004C                     	ds	1
  2181  00004D                     _touchScreenState:
  2182                           	callstack 0
  2183  00004D                     	ds	1
  2184                           
  2185                           	psect	bssBANK0
  2186  000060                     __pbssBANK0:
  2187                           	callstack 0
  2188  000060                     _theXF:
  2189                           	callstack 0
  2190  000060                     	ds	38
  2191  000086                     _nout:
  2192                           	callstack 0
  2193  000086                     	ds	2
  2194  000088                     _displayState:
  2195                           	callstack 0
  2196  000088                     	ds	1
  2197  000089                     _sleepState:
  2198                           	callstack 0
  2199  000089                     	ds	1
  2200  00008A                     _dbuf:
  2201                           	callstack 0
  2202  00008A                     	ds	32
  2203                           
  2204                           	psect	bssBANK1
  2205  000100                     __pbssBANK1:
  2206                           	callstack 0
  2207  000100                     _g1:
  2208                           	callstack 0
  2209  000100                     	ds	240
  2210                           
  2211                           	psect	cstackBANK0
  2212  0000AA                     __pcstackBANK0:
  2213                           	callstack 0
  2214  0000AA                     ??_touchScreenController:
  2215  0000AA                     _dtoa$5500:
  2216                           	callstack 0
  2217  0000AA                     LCD_Bitmap@bfOffBits:
  2218                           	callstack 0
  2219                           
  2220                           ; 4 bytes @ 0x0
  2221  0000AA                     	ds	2
  2222  0000AC                     dtoa@p:
  2223                           	callstack 0
  2224                           
  2225                           ; 2 bytes @ 0x2
  2226  0000AC                     	ds	2
  2227  0000AE                     LCD_Bitmap@endOfImage:
  2228                           	callstack 0
  2229  0000AE                     dtoa@w:
  2230                           	callstack 0
  2231                           
  2232                           ; 2 bytes @ 0x4
  2233  0000AE                     	ds	1
  2234  0000AF                     LCD_Bitmap@jumpCount:
  2235                           	callstack 0
  2236                           
  2237                           ; 2 bytes @ 0x5
  2238  0000AF                     	ds	1
  2239  0000B0                     touchScreenController@valueY:
  2240                           	callstack 0
  2241  0000B0                     dtoa@s:
  2242                           	callstack 0
  2243                           
  2244                           ; 2 bytes @ 0x6
  2245  0000B0                     	ds	1
  2246  0000B1                     LCD_Bitmap@curYPos:
  2247                           	callstack 0
  2248                           
  2249                           ; 2 bytes @ 0x7
  2250  0000B1                     	ds	1
  2251  0000B2                     touchScreenController@i:
  2252                           	callstack 0
  2253  0000B2                     dtoa@n:
  2254                           	callstack 0
  2255                           
  2256                           ; 8 bytes @ 0x8
  2257  0000B2                     	ds	1
  2258  0000B3                     LCD_Bitmap@colorTablePtr:
  2259                           	callstack 0
  2260                           
  2261                           ; 2 bytes @ 0x9
  2262  0000B3                     	ds	1
  2263  0000B4                     touchScreenController@valueX:
  2264                           	callstack 0
  2265                           
  2266                           ; 2 bytes @ 0xA
  2267  0000B4                     	ds	1
  2268  0000B5                     LCD_Bitmap@biHeight:
  2269                           	callstack 0
  2270                           
  2271                           ; 2 bytes @ 0xB
  2272  0000B5                     	ds	1
  2273  0000B6                     touchScreenSM@g:
  2274                           	callstack 0
  2275                           
  2276                           ; 2 bytes @ 0xC
  2277  0000B6                     	ds	1
  2278  0000B7                     LCD_Bitmap@curXPos:
  2279                           	callstack 0
  2280                           
  2281                           ; 2 bytes @ 0xD
  2282  0000B7                     	ds	1
  2283  0000B8                     ??_touchScreenSM:
  2284                           
  2285                           ; 1 bytes @ 0xE
  2286  0000B8                     	ds	1
  2287  0000B9                     LCD_Bitmap@color:
  2288                           	callstack 0
  2289                           
  2290                           ; 2 bytes @ 0xF
  2291  0000B9                     	ds	1
  2292  0000BA                     dtoa@i:
  2293                           	callstack 0
  2294                           
  2295                           ; 2 bytes @ 0x10
  2296  0000BA                     	ds	1
  2297  0000BB                     LCD_Bitmap@strPtr:
  2298                           	callstack 0
  2299                           
  2300                           ; 2 bytes @ 0x11
  2301  0000BB                     	ds	1
  2302  0000BC                     vfpfcnvrt@ll:
  2303                           	callstack 0
  2304                           
  2305                           ; 8 bytes @ 0x12
  2306  0000BC                     	ds	1
  2307  0000BD                     LCD_Bitmap@newY:
  2308                           	callstack 0
  2309                           
  2310                           ; 2 bytes @ 0x13
  2311  0000BD                     	ds	2
  2312  0000BF                     LCD_Bitmap@pixelCount:
  2313                           	callstack 0
  2314                           
  2315                           ; 1 bytes @ 0x15
  2316  0000BF                     	ds	1
  2317  0000C0                     LCD_Bitmap@biWidth:
  2318                           	callstack 0
  2319                           
  2320                           ; 2 bytes @ 0x16
  2321  0000C0                     	ds	2
  2322  0000C2                     LCD_Bitmap@jumpColor:
  2323                           	callstack 0
  2324                           
  2325                           ; 2 bytes @ 0x18
  2326  0000C2                     	ds	2
  2327  0000C4                     ?_vfprintf:
  2328                           	callstack 0
  2329  0000C4                     vfprintf@fp:
  2330                           	callstack 0
  2331  0000C4                     LCD_Bitmap@i:
  2332                           	callstack 0
  2333                           
  2334                           ; 2 bytes @ 0x1A
  2335  0000C4                     	ds	1
  2336  0000C5                     vfprintf@fmt:
  2337                           	callstack 0
  2338                           
  2339                           ; 2 bytes @ 0x1B
  2340  0000C5                     	ds	1
  2341  0000C6                     ??_LCD_ButtonDraw:
  2342                           
  2343                           ; 1 bytes @ 0x1C
  2344  0000C6                     	ds	1
  2345  0000C7                     vfprintf@ap:
  2346                           	callstack 0
  2347                           
  2348                           ; 1 bytes @ 0x1D
  2349  0000C7                     	ds	1
  2350  0000C8                     ?_sprintf:
  2351                           	callstack 0
  2352  0000C8                     sprintf@s:
  2353                           	callstack 0
  2354                           
  2355                           ; 2 bytes @ 0x1E
  2356  0000C8                     	ds	2
  2357  0000CA                     sprintf@fmt:
  2358                           	callstack 0
  2359                           
  2360                           ; 2 bytes @ 0x20
  2361  0000CA                     	ds	4
  2362  0000CE                     sprintf@ap:
  2363                           	callstack 0
  2364                           
  2365                           ; 1 bytes @ 0x24
  2366  0000CE                     	ds	1
  2367  0000CF                     sprintf@f:
  2368                           	callstack 0
  2369                           
  2370                           ; 6 bytes @ 0x25
  2371  0000CF                     	ds	3
  2372  0000D2                     LCD_ButtonDraw@tempChar:
  2373                           	callstack 0
  2374                           
  2375                           ; 1 bytes @ 0x28
  2376  0000D2                     	ds	1
  2377  0000D3                     LCD_ButtonDraw@width:
  2378                           	callstack 0
  2379                           
  2380                           ; 2 bytes @ 0x29
  2381  0000D3                     	ds	2
  2382  0000D5                     Score_draw@s:
  2383                           	callstack 0
  2384  0000D5                     LCD_ButtonDraw@x1:
  2385                           	callstack 0
  2386                           
  2387                           ; 2 bytes @ 0x2B
  2388  0000D5                     	ds	2
  2389  0000D7                     LCD_ButtonDraw@x2:
  2390                           	callstack 0
  2391                           
  2392                           ; 2 bytes @ 0x2D
  2393  0000D7                     	ds	2
  2394  0000D9                     LCD_ButtonDraw@y1:
  2395                           	callstack 0
  2396                           
  2397                           ; 2 bytes @ 0x2F
  2398  0000D9                     	ds	2
  2399  0000DB                     LCD_ButtonDraw@y2:
  2400                           	callstack 0
  2401                           
  2402                           ; 2 bytes @ 0x31
  2403  0000DB                     	ds	2
  2404  0000DD                     LCD_ButtonDraw@xText:
  2405                           	callstack 0
  2406                           
  2407                           ; 2 bytes @ 0x33
  2408  0000DD                     	ds	2
  2409  0000DF                     LCD_ButtonDraw@yText:
  2410                           	callstack 0
  2411                           
  2412                           ; 2 bytes @ 0x35
  2413  0000DF                     	ds	2
  2414  0000E1                     LCD_ButtonDraw@i:
  2415                           	callstack 0
  2416                           
  2417                           ; 1 bytes @ 0x37
  2418  0000E1                     	ds	1
  2419  0000E2                     LCD_ButtonDraw@bmpPtr:
  2420                           	callstack 0
  2421                           
  2422                           ; 2 bytes @ 0x38
  2423  0000E2                     	ds	2
  2424  0000E4                     Menu_parametersDraw@g:
  2425                           	callstack 0
  2426  0000E4                     Menu_inGameDraw@g:
  2427                           	callstack 0
  2428                           
  2429                           ; 2 bytes @ 0x3A
  2430  0000E4                     	ds	2
  2431  0000E6                     displayController@g:
  2432                           	callstack 0
  2433                           
  2434                           ; 2 bytes @ 0x3C
  2435  0000E6                     	ds	2
  2436  0000E8                     displayController@ev:
  2437                           	callstack 0
  2438                           
  2439                           ; 1 bytes @ 0x3E
  2440  0000E8                     	ds	1
  2441  0000E9                     ??_displayController:
  2442                           
  2443                           ; 1 bytes @ 0x3F
  2444  0000E9                     	ds	2
  2445  0000EB                     displayInit@g:
  2446                           	callstack 0
  2447  0000EB                     displaySM@g:
  2448                           	callstack 0
  2449                           
  2450                           ; 2 bytes @ 0x41
  2451  0000EB                     	ds	2
  2452  0000ED                     ??_displaySM:
  2453  0000ED                     sleepInit@g:
  2454                           	callstack 0
  2455                           
  2456                           ; 2 bytes @ 0x43
  2457  0000ED                     	ds	2
  2458  0000EF                     ??_Factory_init:
  2459  0000EF                     displaySM@ev:
  2460                           	callstack 0
  2461                           
  2462                           ; 1 bytes @ 0x45
  2463  0000EF                     	ds	1
  2464  0000F0                     Factory_exec@ev:
  2465                           	callstack 0
  2466                           
  2467                           ; 1 bytes @ 0x46
  2468  0000F0                     	ds	1
  2469                           
  2470                           	psect	cstackCOMRAM
  2471  000001                     __pcstackCOMRAM:
  2472                           	callstack 0
  2473  000001                     ?i2___awmod:
  2474                           	callstack 0
  2475  000001                     i2ENTERCRITICAL@inISR:
  2476                           	callstack 0
  2477  000001                     i2LEAVECRITICAL@inISR:
  2478                           	callstack 0
  2479  000001                     i2___awmod@dividend:
  2480                           	callstack 0
  2481                           
  2482                           ; 2 bytes @ 0x0
  2483  000001                     	ds	1
  2484  000002                     i2XF_unscheduleTimer@inISR:
  2485                           	callstack 0
  2486                           
  2487                           ; 1 bytes @ 0x1
  2488  000002                     	ds	1
  2489  000003                     i2XF_unscheduleTimer@id:
  2490                           	callstack 0
  2491  000003                     i2___awmod@divisor:
  2492                           	callstack 0
  2493                           
  2494                           ; 2 bytes @ 0x2
  2495  000003                     	ds	2
  2496  000005                     i2___awmod@counter:
  2497                           	callstack 0
  2498                           
  2499                           ; 1 bytes @ 0x4
  2500  000005                     	ds	1
  2501  000006                     i2___awmod@sign:
  2502                           	callstack 0
  2503                           
  2504                           ; 1 bytes @ 0x5
  2505  000006                     	ds	1
  2506  000007                     i2XF_pushEvent@inISR:
  2507                           	callstack 0
  2508                           
  2509                           ; 1 bytes @ 0x6
  2510  000007                     	ds	1
  2511  000008                     i2XF_pushEvent@ev:
  2512                           	callstack 0
  2513                           
  2514                           ; 1 bytes @ 0x7
  2515  000008                     	ds	1
  2516  000009                     i2XF_pushEvent@temp:
  2517                           	callstack 0
  2518                           
  2519                           ; 1 bytes @ 0x8
  2520  000009                     	ds	1
  2521  00000A                     
  2522                           ; 1 bytes @ 0x9
  2523  00000A                     	ds	2
  2524  00000C                     XF_decrementAndQueueTimers@i:
  2525                           	callstack 0
  2526                           
  2527                           ; 2 bytes @ 0xB
  2528  00000C                     	ds	2
  2529  00000E                     ??_isr:
  2530                           
  2531                           ; 1 bytes @ 0xD
  2532  00000E                     	ds	4
  2533  000012                     ??_LCD_Lowlevel_Init:
  2534  000012                     ??_sleepController:
  2535  000012                     ?_LCD_Read:
  2536                           	callstack 0
  2537  000012                     ?_strlen:
  2538                           	callstack 0
  2539  000012                     ?_RGB2LCD:
  2540                           	callstack 0
  2541  000012                     ?___awdiv:
  2542                           	callstack 0
  2543  000012                     ?___awmod:
  2544                           	callstack 0
  2545  000012                     ?___lwmod:
  2546                           	callstack 0
  2547  000012                     ?___xxtofl:
  2548                           	callstack 0
  2549  000012                     ?___aodiv:
  2550                           	callstack 0
  2551  000012                     ?___aomod:
  2552                           	callstack 0
  2553  000012                     configMeasure@channel:
  2554                           	callstack 0
  2555  000012                     ENTERCRITICAL@inISR:
  2556                           	callstack 0
  2557  000012                     LEAVECRITICAL@inISR:
  2558                           	callstack 0
  2559  000012                     Ball_init@b:
  2560                           	callstack 0
  2561  000012                     Ball_Update@b:
  2562                           	callstack 0
  2563  000012                     Paddle_init@p:
  2564                           	callstack 0
  2565  000012                     Paddle_addX@p:
  2566                           	callstack 0
  2567  000012                     Score_init@s:
  2568                           	callstack 0
  2569  000012                     GameParameters_setBackLight@s:
  2570                           	callstack 0
  2571  000012                     GameParameters_setLevel@s:
  2572                           	callstack 0
  2573  000012                     GameParameters_resetPos@s:
  2574                           	callstack 0
  2575  000012                     GameParameters_setX@s:
  2576                           	callstack 0
  2577  000012                     GameParameters_setY@s:
  2578                           	callstack 0
  2579  000012                     LCD_Fill@color:
  2580                           	callstack 0
  2581  000012                     LCD_SliderCreate@posX:
  2582                           	callstack 0
  2583  000012                     LCD_ButtonCreate@posX:
  2584                           	callstack 0
  2585  000012                     LCD_InButton@button:
  2586                           	callstack 0
  2587  000012                     LCD_InSlider@slider:
  2588                           	callstack 0
  2589  000012                     LCD_DrawRect@posX1:
  2590                           	callstack 0
  2591  000012                     RGB2LCD@colorTableEntry:
  2592                           	callstack 0
  2593  000012                     LCD_Read@posX:
  2594                           	callstack 0
  2595  000012                     XF_init@i:
  2596                           	callstack 0
  2597  000012                     ___awdiv@dividend:
  2598                           	callstack 0
  2599  000012                     ___awmod@dividend:
  2600                           	callstack 0
  2601  000012                     ___lwmod@dividend:
  2602                           	callstack 0
  2603  000012                     fputc@c:
  2604                           	callstack 0
  2605  000012                     strlen@s:
  2606                           	callstack 0
  2607  000012                     ___xxtofl@val:
  2608                           	callstack 0
  2609  000012                     ___aodiv@dividend:
  2610                           	callstack 0
  2611  000012                     ___aomod@dividend:
  2612                           	callstack 0
  2613                           
  2614                           ; 8 bytes @ 0x11
  2615  000012                     	ds	1
  2616  000013                     XF_unscheduleTimer@inISR:
  2617                           	callstack 0
  2618  000013                     LCD_Lowlevel_Init@i:
  2619                           	callstack 0
  2620                           
  2621                           ; 4 bytes @ 0x12
  2622  000013                     	ds	1
  2623  000014                     ??_sleepSM:
  2624  000014                     ??_Ball_Update:
  2625  000014                     ??_RGB2LCD:
  2626  000014                     LCD_Fill@colorH:
  2627                           	callstack 0
  2628  000014                     XF_unscheduleTimer@id:
  2629                           	callstack 0
  2630  000014                     fputc@fp:
  2631                           	callstack 0
  2632  000014                     Paddle_init@team:
  2633                           	callstack 0
  2634  000014                     Paddle_addX@value:
  2635                           	callstack 0
  2636  000014                     GameParameters_setBackLight@value:
  2637                           	callstack 0
  2638  000014                     GameParameters_setLevel@value:
  2639                           	callstack 0
  2640  000014                     GameParameters_setX@value:
  2641                           	callstack 0
  2642  000014                     GameParameters_setY@value:
  2643                           	callstack 0
  2644  000014                     LCD_SliderCreate@posY:
  2645                           	callstack 0
  2646  000014                     LCD_ButtonCreate@posY:
  2647                           	callstack 0
  2648  000014                     LCD_InButton@posX:
  2649                           	callstack 0
  2650  000014                     LCD_InSlider@posX:
  2651                           	callstack 0
  2652  000014                     LCD_DrawRect@posY1:
  2653                           	callstack 0
  2654  000014                     LCD_Read@posY:
  2655                           	callstack 0
  2656  000014                     ___awdiv@divisor:
  2657                           	callstack 0
  2658  000014                     ___awmod@divisor:
  2659                           	callstack 0
  2660  000014                     ___lwmod@divisor:
  2661                           	callstack 0
  2662  000014                     strlen@a:
  2663                           	callstack 0
  2664                           
  2665                           ; 2 bytes @ 0x13
  2666  000014                     	ds	1
  2667  000015                     ??_fputc:
  2668  000015                     LCD_Fill@colorL:
  2669                           	callstack 0
  2670                           
  2671                           ; 1 bytes @ 0x14
  2672  000015                     	ds	1
  2673  000016                     ??_LCD_Read:
  2674  000016                     ??___xxtofl:
  2675  000016                     sleepSM@ev:
  2676                           	callstack 0
  2677  000016                     ___awdiv@counter:
  2678                           	callstack 0
  2679  000016                     ___awmod@counter:
  2680                           	callstack 0
  2681  000016                     ___lwmod@counter:
  2682                           	callstack 0
  2683  000016                     Paddle_addX@add:
  2684                           	callstack 0
  2685  000016                     LCD_Fill@column:
  2686                           	callstack 0
  2687  000016                     LCD_SliderCreate@width:
  2688                           	callstack 0
  2689  000016                     LCD_ButtonCreate@width:
  2690                           	callstack 0
  2691  000016                     LCD_InButton@posY:
  2692                           	callstack 0
  2693  000016                     LCD_InSlider@posY:
  2694                           	callstack 0
  2695  000016                     LCD_DrawRect@posX2:
  2696                           	callstack 0
  2697  000016                     levelController@g:
  2698                           	callstack 0
  2699                           
  2700                           ; 2 bytes @ 0x15
  2701  000016                     	ds	1
  2702  000017                     ??_LCD_Init:
  2703  000017                     ___awdiv@sign:
  2704                           	callstack 0
  2705  000017                     ___awmod@sign:
  2706                           	callstack 0
  2707                           
  2708                           ; 1 bytes @ 0x16
  2709  000017                     	ds	1
  2710  000018                     ??_Paddle_addX:
  2711  000018                     ??_LCD_InButton:
  2712  000018                     ??_LCD_InSlider:
  2713  000018                     LCD_Init@i:
  2714                           	callstack 0
  2715  000018                     XF_pushEvent@inISR:
  2716                           	callstack 0
  2717  000018                     XF_popEvent@ev:
  2718                           	callstack 0
  2719  000018                     LCD_Fill@page:
  2720                           	callstack 0
  2721  000018                     LCD_SliderCreate@height:
  2722                           	callstack 0
  2723  000018                     LCD_ButtonCreate@height:
  2724                           	callstack 0
  2725  000018                     LCD_DrawRect@posY2:
  2726                           	callstack 0
  2727  000018                     RGB2LCD@red:
  2728                           	callstack 0
  2729  000018                     LCD_Read@color:
  2730                           	callstack 0
  2731  000018                     backlightController@g:
  2732                           	callstack 0
  2733  000018                     ___awdiv@quotient:
  2734                           	callstack 0
  2735                           
  2736                           ; 2 bytes @ 0x17
  2737  000018                     	ds	1
  2738  000019                     XF_pushEvent@ev:
  2739                           	callstack 0
  2740  000019                     XF_popEvent@inISR:
  2741                           	callstack 0
  2742                           
  2743                           ; 1 bytes @ 0x18
  2744  000019                     	ds	1
  2745  00001A                     ?___wmul:
  2746                           	callstack 0
  2747  00001A                     LCD_DrawRect@fill:
  2748                           	callstack 0
  2749  00001A                     XF_pushEvent@temp:
  2750                           	callstack 0
  2751  00001A                     ___xxtofl@sign:
  2752                           	callstack 0
  2753  00001A                     fputs@s:
  2754                           	callstack 0
  2755  00001A                     LCD_SliderCreate@sldColor:
  2756                           	callstack 0
  2757  00001A                     LCD_ButtonCreate@txtColor:
  2758                           	callstack 0
  2759  00001A                     RGB2LCD@green:
  2760                           	callstack 0
  2761  00001A                     LCD_Read@temp16:
  2762                           	callstack 0
  2763  00001A                     ___wmul@multiplier:
  2764                           	callstack 0
  2765  00001A                     ___aodiv@divisor:
  2766                           	callstack 0
  2767  00001A                     ___aomod@divisor:
  2768                           	callstack 0
  2769                           
  2770                           ; 8 bytes @ 0x19
  2771  00001A                     	ds	1
  2772  00001B                     ___xxtofl@exp:
  2773                           	callstack 0
  2774  00001B                     fputs@fp:
  2775                           	callstack 0
  2776  00001B                     LCD_DrawRect@color:
  2777                           	callstack 0
  2778  00001B                     checkCollision@g:
  2779                           	callstack 0
  2780                           
  2781                           ; 2 bytes @ 0x1A
  2782  00001B                     	ds	1
  2783  00001C                     fputs@c:
  2784                           	callstack 0
  2785  00001C                     LCD_SliderCreate@bgColor:
  2786                           	callstack 0
  2787  00001C                     LCD_ButtonCreate@bgColor:
  2788                           	callstack 0
  2789  00001C                     RGB2LCD@blue:
  2790                           	callstack 0
  2791  00001C                     moovePaddle1@g:
  2792                           	callstack 0
  2793  00001C                     moovePaddle2@g:
  2794                           	callstack 0
  2795  00001C                     ___wmul@multiplicand:
  2796                           	callstack 0
  2797  00001C                     ___xxtofl@arg:
  2798                           	callstack 0
  2799                           
  2800                           ; 4 bytes @ 0x1B
  2801  00001C                     	ds	1
  2802  00001D                     ??_checkCollision:
  2803  00001D                     LCD_DrawRect@j:
  2804                           	callstack 0
  2805  00001D                     fputs@i:
  2806                           	callstack 0
  2807                           
  2808                           ; 2 bytes @ 0x1C
  2809  00001D                     	ds	1
  2810  00001E                     ??_moovePaddle2:
  2811  00001E                     LCD_SliderCreate@borderColor:
  2812                           	callstack 0
  2813  00001E                     LCD_ButtonCreate@textOrBmp:
  2814                           	callstack 0
  2815  00001E                     RGB2LCD@color:
  2816                           	callstack 0
  2817  00001E                     ___wmul@product:
  2818                           	callstack 0
  2819                           
  2820                           ; 2 bytes @ 0x1D
  2821  00001E                     	ds	1
  2822  00001F                     ?_pad:
  2823                           	callstack 0
  2824  00001F                     pad@fp:
  2825                           	callstack 0
  2826  00001F                     LCD_DrawRect@temp:
  2827                           	callstack 0
  2828                           
  2829                           ; 2 bytes @ 0x1E
  2830  00001F                     	ds	1
  2831  000020                     ?___lwdiv:
  2832                           	callstack 0
  2833  000020                     ?___fldiv:
  2834                           	callstack 0
  2835  000020                     pad@buf:
  2836                           	callstack 0
  2837  000020                     LCD_SliderCreate@cursorWidth:
  2838                           	callstack 0
  2839  000020                     LCD_ButtonCreate@font:
  2840                           	callstack 0
  2841  000020                     LCD_DrawText@msg:
  2842                           	callstack 0
  2843  000020                     XF_scheduleTimer@tm:
  2844                           	callstack 0
  2845  000020                     ___lwdiv@dividend:
  2846                           	callstack 0
  2847  000020                     ___fldiv@b:
  2848                           	callstack 0
  2849                           
  2850                           ; 4 bytes @ 0x1F
  2851  000020                     	ds	1
  2852  000021                     LCD_DrawRect@colorH:
  2853                           	callstack 0
  2854  000021                     pad@p:
  2855                           	callstack 0
  2856                           
  2857                           ; 2 bytes @ 0x20
  2858  000021                     	ds	1
  2859  000022                     LCD_DrawRect@colorL:
  2860                           	callstack 0
  2861  000022                     XF_scheduleTimer@ev:
  2862                           	callstack 0
  2863  000022                     ___aodiv@counter:
  2864                           	callstack 0
  2865  000022                     ___aomod@counter:
  2866                           	callstack 0
  2867  000022                     LCD_SliderCreate@steps:
  2868                           	callstack 0
  2869  000022                     LCD_ButtonCreate@fpPress:
  2870                           	callstack 0
  2871  000022                     LCD_DrawText@font:
  2872                           	callstack 0
  2873  000022                     ___lwdiv@divisor:
  2874                           	callstack 0
  2875                           
  2876                           ; 2 bytes @ 0x21
  2877  000022                     	ds	1
  2878  000023                     ??_pad:
  2879  000023                     XF_scheduleTimer@inISR:
  2880                           	callstack 0
  2881  000023                     ___aodiv@sign:
  2882                           	callstack 0
  2883  000023                     ___aomod@sign:
  2884                           	callstack 0
  2885  000023                     LCD_DrawRect@i:
  2886                           	callstack 0
  2887                           
  2888                           ; 2 bytes @ 0x22
  2889  000023                     	ds	1
  2890  000024                     ?_abs:
  2891                           	callstack 0
  2892  000024                     LCD_DrawText@align:
  2893                           	callstack 0
  2894  000024                     XF_scheduleTimer@i:
  2895                           	callstack 0
  2896  000024                     LCD_SliderCreate@fpPress:
  2897                           	callstack 0
  2898  000024                     LCD_ButtonCreate@fpReleased:
  2899                           	callstack 0
  2900  000024                     ___lwdiv@quotient:
  2901                           	callstack 0
  2902  000024                     pad@i:
  2903                           	callstack 0
  2904  000024                     abs@a:
  2905                           	callstack 0
  2906  000024                     ___fldiv@a:
  2907                           	callstack 0
  2908  000024                     ___aodiv@quotient:
  2909                           	callstack 0
  2910                           
  2911                           ; 8 bytes @ 0x23
  2912  000024                     	ds	1
  2913  000025                     Ball_draw@b:
  2914                           	callstack 0
  2915  000025                     Paddle_draw@p:
  2916                           	callstack 0
  2917  000025                     LCD_ButtonUpdate@button:
  2918                           	callstack 0
  2919  000025                     LCD_DrawText@posX:
  2920                           	callstack 0
  2921  000025                     mooveBall@g:
  2922                           	callstack 0
  2923                           
  2924                           ; 2 bytes @ 0x24
  2925  000025                     	ds	1
  2926  000026                     ??_abs:
  2927  000026                     ___lwdiv@counter:
  2928                           	callstack 0
  2929  000026                     LCD_SliderCreate@slider:
  2930                           	callstack 0
  2931  000026                     LCD_ButtonCreate@fpOut:
  2932                           	callstack 0
  2933  000026                     pad@w:
  2934                           	callstack 0
  2935                           
  2936                           ; 2 bytes @ 0x25
  2937  000026                     	ds	1
  2938  000027                     ??_Ball_draw:
  2939  000027                     ??_Paddle_draw:
  2940  000027                     ??_LCD_ButtonUpdate:
  2941  000027                     LCD_SliderUpdate@slider:
  2942                           	callstack 0
  2943  000027                     LCD_DrawText@posY:
  2944                           	callstack 0
  2945  000027                     LCD_Bitmap@bmpPtr:
  2946                           	callstack 0
  2947                           
  2948                           ; 2 bytes @ 0x26
  2949  000027                     	ds	1
  2950  000028                     ??___fldiv:
  2951  000028                     LCD_ButtonCreate@button:
  2952                           	callstack 0
  2953                           
  2954                           ; 2 bytes @ 0x27
  2955  000028                     	ds	1
  2956  000029                     ??_LCD_SliderUpdate:
  2957  000029                     LCD_DrawText@color:
  2958                           	callstack 0
  2959  000029                     LCD_Bitmap@posX:
  2960                           	callstack 0
  2961                           
  2962                           ; 2 bytes @ 0x28
  2963  000029                     	ds	1
  2964  00002A                     LCD_ButtonCreate@index:
  2965                           	callstack 0
  2966                           
  2967                           ; 1 bytes @ 0x29
  2968  00002A                     	ds	1
  2969  00002B                     GameParameters_init@s:
  2970                           	callstack 0
  2971  00002B                     LCD_ButtonUpdate@colorOut:
  2972                           	callstack 0
  2973  00002B                     LCD_DrawText@bg_color:
  2974                           	callstack 0
  2975  00002B                     LCD_Bitmap@posY:
  2976                           	callstack 0
  2977                           
  2978                           ; 2 bytes @ 0x2A
  2979  00002B                     	ds	1
  2980  00002C                     ?_dtoa:
  2981                           	callstack 0
  2982  00002C                     dtoa@fp:
  2983                           	callstack 0
  2984  00002C                     ___fldiv@rem:
  2985                           	callstack 0
  2986                           
  2987                           ; 4 bytes @ 0x2B
  2988  00002C                     	ds	1
  2989  00002D                     ??_LCD_DrawText:
  2990  00002D                     ??_LCD_Bitmap:
  2991  00002D                     LCD_ButtonUpdate@colorIn:
  2992                           	callstack 0
  2993  00002D                     dtoa@d:
  2994                           	callstack 0
  2995                           
  2996                           ; 8 bytes @ 0x2C
  2997  00002D                     	ds	2
  2998  00002F                     LCD_SliderUpdate@x2:
  2999                           	callstack 0
  3000  00002F                     LCD_ButtonUpdate@x2:
  3001                           	callstack 0
  3002                           
  3003                           ; 2 bytes @ 0x2E
  3004  00002F                     	ds	1
  3005  000030                     ___fldiv@sign:
  3006                           	callstack 0
  3007                           
  3008                           ; 1 bytes @ 0x2F
  3009  000030                     	ds	1
  3010  000031                     LCD_SliderUpdate@y1:
  3011                           	callstack 0
  3012  000031                     LCD_ButtonUpdate@y1:
  3013                           	callstack 0
  3014  000031                     ___fldiv@new_exp:
  3015                           	callstack 0
  3016                           
  3017                           ; 2 bytes @ 0x30
  3018  000031                     	ds	2
  3019  000033                     LCD_SliderUpdate@y2:
  3020                           	callstack 0
  3021  000033                     LCD_ButtonUpdate@x1:
  3022                           	callstack 0
  3023  000033                     LCD_DrawText@offset:
  3024                           	callstack 0
  3025  000033                     ___fldiv@grs:
  3026                           	callstack 0
  3027                           
  3028                           ; 4 bytes @ 0x32
  3029  000033                     	ds	2
  3030  000035                     ??_dtoa:
  3031  000035                     LCD_SliderUpdate@x1:
  3032                           	callstack 0
  3033  000035                     LCD_ButtonUpdate@y2:
  3034                           	callstack 0
  3035  000035                     LCD_DrawText@yOffset:
  3036                           	callstack 0
  3037                           
  3038                           ; 2 bytes @ 0x34
  3039  000035                     	ds	2
  3040  000037                     LCD_DrawText@fontByte:
  3041                           	callstack 0
  3042  000037                     ___fldiv@bexp:
  3043                           	callstack 0
  3044  000037                     LCD_SliderDraw@slider:
  3045                           	callstack 0
  3046  000037                     gameControllerController@g:
  3047                           	callstack 0
  3048                           
  3049                           ; 2 bytes @ 0x36
  3050  000037                     	ds	1
  3051  000038                     LCD_DrawText@fontPixel:
  3052                           	callstack 0
  3053  000038                     ___fldiv@aexp:
  3054                           	callstack 0
  3055                           
  3056                           ; 1 bytes @ 0x37
  3057  000038                     	ds	1
  3058  000039                     ??_LCD_SliderDraw:
  3059  000039                     ?___fltol:
  3060                           	callstack 0
  3061  000039                     gameControllerController@ev:
  3062                           	callstack 0
  3063  000039                     LCD_DrawText@posYEnd:
  3064                           	callstack 0
  3065  000039                     ___fltol@f1:
  3066                           	callstack 0
  3067                           
  3068                           ; 4 bytes @ 0x38
  3069  000039                     	ds	1
  3070  00003A                     ??_gameControllerController:
  3071                           
  3072                           ; 1 bytes @ 0x39
  3073  00003A                     	ds	1
  3074  00003B                     LCD_DrawText@posXEnd:
  3075                           	callstack 0
  3076                           
  3077                           ; 2 bytes @ 0x3A
  3078  00003B                     	ds	1
  3079  00003C                     gameControllerInit@g:
  3080                           	callstack 0
  3081  00003C                     gameControllerSM@g:
  3082                           	callstack 0
  3083                           
  3084                           ; 2 bytes @ 0x3B
  3085  00003C                     	ds	1
  3086  00003D                     ??___fltol:
  3087  00003D                     ?_vfpfcnvrt:
  3088                           	callstack 0
  3089  00003D                     LCD_DrawText@y:
  3090                           	callstack 0
  3091  00003D                     vfpfcnvrt@fp:
  3092                           	callstack 0
  3093  00003D                     LCD_SliderDraw@x1:
  3094                           	callstack 0
  3095                           
  3096                           ; 2 bytes @ 0x3C
  3097  00003D                     	ds	1
  3098  00003E                     ??_gameControllerSM:
  3099  00003E                     LCD_DrawText@i:
  3100                           	callstack 0
  3101  00003E                     vfpfcnvrt@fmt:
  3102                           	callstack 0
  3103                           
  3104                           ; 1 bytes @ 0x3D
  3105  00003E                     	ds	1
  3106  00003F                     LCD_DrawText@tempChar:
  3107                           	callstack 0
  3108  00003F                     vfpfcnvrt@ap:
  3109                           	callstack 0
  3110  00003F                     LCD_SliderDraw@x2:
  3111                           	callstack 0
  3112                           
  3113                           ; 2 bytes @ 0x3E
  3114  00003F                     	ds	1
  3115  000040                     LCD_DrawText@x:
  3116                           	callstack 0
  3117  000040                     gameControllerSM@ev:
  3118                           	callstack 0
  3119  000040                     vfprintf@cfmt:
  3120                           	callstack 0
  3121                           
  3122                           ; 2 bytes @ 0x3F
  3123  000040                     	ds	1
  3124  000041                     LCD_DrawText@width:
  3125                           	callstack 0
  3126  000041                     ___fltol@sign1:
  3127                           	callstack 0
  3128  000041                     LCD_SliderDraw@y1:
  3129                           	callstack 0
  3130                           
  3131                           ; 2 bytes @ 0x40
  3132  000041                     	ds	1
  3133  000042                     ___fltol@exp1:
  3134                           	callstack 0
  3135  000042                     LCD_ButtonDraw@button:
  3136                           	callstack 0
  3137                           
  3138                           ; 2 bytes @ 0x41
  3139  000042                     	ds	1
  3140  000043                     LCD_SliderDraw@y2:
  3141                           	callstack 0
  3142  000043                     touchScreenController@g:
  3143                           	callstack 0
  3144                           
  3145                           ; 2 bytes @ 0x42
  3146  000043                     	ds	1
  3147  000044                     Menu_welcomeDraw@g:
  3148                           	callstack 0
  3149  000044                     Menu_endGame@g:
  3150                           	callstack 0
  3151                           
  3152                           ; 2 bytes @ 0x43
  3153  000044                     	ds	1
  3154  000045                     touchScreenSM@ev:
  3155                           	callstack 0
  3156                           
  3157                           ; 1 bytes @ 0x44
  3158  000045                     	ds	1
  3159  000046                     
  3160                           ; 1 bytes @ 0x45
  3161 ;;
  3162 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3163 ;;
  3164 ;; *************** function _main *****************
  3165 ;; Defined at:
  3166 ;;		line 53 in file "main.c"
  3167 ;; Parameters:    Size  Location     Type
  3168 ;;		None
  3169 ;; Auto vars:     Size  Location     Type
  3170 ;;		None
  3171 ;; Return value:  Size  Location     Type
  3172 ;;                  1    wreg      void 
  3173 ;; Registers used:
  3174 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3175 ;; Tracked objects:
  3176 ;;		On entry : 0/0
  3177 ;;		On exit  : 0/0
  3178 ;;		Unchanged: 0/0
  3179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3180 ;;      Params:         0       0       0       0       0       0       0
  3181 ;;      Locals:         0       0       0       0       0       0       0
  3182 ;;      Temps:          0       0       0       0       0       0       0
  3183 ;;      Totals:         0       0       0       0       0       0       0
  3184 ;;Total ram usage:        0 bytes
  3185 ;; Hardware stack levels required when called: 17
  3186 ;; This function calls:
  3187 ;;		_Factory_exec
  3188 ;;		_Factory_init
  3189 ;; This function is called by:
  3190 ;;		Startup code after reset
  3191 ;; This function uses a non-reentrant model
  3192 ;;
  3193                           
  3194                           	psect	text0
  3195  005A18                     __ptext0:
  3196                           	callstack 0
  3197  005A18                     _main:
  3198                           	callstack 14
  3199                           
  3200                           ;main.c: 55:     Factory_init();
  3201                           
  3202                           ;incstack = 0
  3203  005A18  EC2F  F023         	call	_Factory_init	;wreg free
  3204  005A1C                     l778:
  3205                           
  3206                           ;main.c: 57:     {;main.c: 58:         Factory_exec();
  3207  005A1C  EC95  F02A         	call	_Factory_exec	;wreg free
  3208  005A20  D7FD               	goto	l778
  3209  005A22                     __end_of_main:
  3210                           	callstack 0
  3211                           
  3212 ;; *************** function _Factory_init *****************
  3213 ;; Defined at:
  3214 ;;		line 14 in file "class/factory.c"
  3215 ;; Parameters:    Size  Location     Type
  3216 ;;		None
  3217 ;; Auto vars:     Size  Location     Type
  3218 ;;		None
  3219 ;; Return value:  Size  Location     Type
  3220 ;;                  1    wreg      void 
  3221 ;; Registers used:
  3222 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3223 ;; Tracked objects:
  3224 ;;		On entry : 0/0
  3225 ;;		On exit  : 0/0
  3226 ;;		Unchanged: 0/0
  3227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3228 ;;      Params:         0       0       0       0       0       0       0
  3229 ;;      Locals:         0       0       0       0       0       0       0
  3230 ;;      Temps:          0       2       0       0       0       0       0
  3231 ;;      Totals:         0       2       0       0       0       0       0
  3232 ;;Total ram usage:        2 bytes
  3233 ;; Hardware stack levels used: 1
  3234 ;; Hardware stack levels required when called: 16
  3235 ;; This function calls:
  3236 ;;		_GameParameters_init
  3237 ;;		_LCD_DrawText
  3238 ;;		_LCD_Fill
  3239 ;;		_LCD_Init
  3240 ;;		_XF_init
  3241 ;;		_sleepInit
  3242 ;; This function is called by:
  3243 ;;		_main
  3244 ;; This function uses a non-reentrant model
  3245 ;;
  3246                           
  3247                           	psect	text1
  3248  00465E                     __ptext1:
  3249                           	callstack 0
  3250  00465E                     _Factory_init:
  3251                           	callstack 14
  3252                           
  3253                           ;class/factory.c: 17:     PLLEN = 1;
  3254                           
  3255                           ;incstack = 0
  3256  00465E  8C9B               	bsf	3995,6,c	;volatile
  3257                           
  3258                           ;class/factory.c: 18:     OSCCON = 0b01110000;
  3259  004660  0E70               	movlw	112
  3260  004662  6ED3               	movwf	211,c	;volatile
  3261                           
  3262                           ;class/factory.c: 19:     _delay((unsigned long)((100)*(64000000L/4000.0)));
  3263  004664  0E09               	movlw	9
  3264  004666  0100               	movlb	0	; () banked
  3265  004668  6FF0               	movwf	(??_Factory_init+1)& (0+255),b
  3266  00466A  0E1E               	movlw	30
  3267  00466C  6FEF               	movwf	??_Factory_init& (0+255),b
  3268  00466E  0EE4               	movlw	228
  3269  004670                     u6517:
  3270  004670  2EE8               	decfsz	wreg,f,c
  3271  004672  D7FE               	bra	u6517
  3272  004674  2FEF               	decfsz	??_Factory_init& (0+255),f,b
  3273  004676  D7FC               	bra	u6517
  3274  004678  2FF0               	decfsz	(??_Factory_init+1)& (0+255),f,b
  3275  00467A  D7FA               	bra	u6517
  3276  00467C  F000               	nop	
  3277                           
  3278                           ;class/factory.c: 22:     LCD_Init();
  3279  00467E  EC9D  F014         	call	_LCD_Init	;wreg free
  3280                           
  3281                           ;class/factory.c: 23:     LCD_Fill(0b0000000000011111);
  3282  004682  0E00               	movlw	0
  3283  004684  6E13               	movwf	(LCD_Fill@color+1)^0,c
  3284  004686  0E1F               	movlw	31
  3285  004688  6E12               	movwf	LCD_Fill@color^0,c
  3286  00468A  EC9E  F024         	call	_LCD_Fill	;wreg free
  3287                           
  3288                           ;class/factory.c: 24:     LCD_DrawText("MenuStart",&arialNarrow_12ptFontInfo,A_CENTER,50
      +                          ,50,0b0000000000000000,0b1111111111111111);
  3289  00468E  0EBD               	movlw	low STR_1
  3290  004690  6E20               	movwf	LCD_DrawText@msg^0,c
  3291  004692  0E7F               	movlw	high STR_1
  3292  004694  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
  3293  004696  0E7B               	movlw	low _arialNarrow_12ptFontInfo
  3294  004698  6E22               	movwf	LCD_DrawText@font^0,c
  3295  00469A  0E7F               	movlw	high _arialNarrow_12ptFontInfo
  3296  00469C  6E23               	movwf	(LCD_DrawText@font+1)^0,c
  3297  00469E  0E02               	movlw	2
  3298  0046A0  6E24               	movwf	LCD_DrawText@align^0,c
  3299  0046A2  0E00               	movlw	0
  3300  0046A4  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
  3301  0046A6  0E32               	movlw	50
  3302  0046A8  6E25               	movwf	LCD_DrawText@posX^0,c
  3303  0046AA  0E00               	movlw	0
  3304  0046AC  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
  3305  0046AE  0E32               	movlw	50
  3306  0046B0  6E27               	movwf	LCD_DrawText@posY^0,c
  3307  0046B2  0E00               	movlw	0
  3308  0046B4  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
  3309  0046B6  0E00               	movlw	0
  3310  0046B8  6E29               	movwf	LCD_DrawText@color^0,c
  3311  0046BA  0EFF               	movlw	255
  3312  0046BC  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
  3313  0046BE  682B               	setf	LCD_DrawText@bg_color^0,c
  3314  0046C0  EC85  F00F         	call	_LCD_DrawText	;wreg free
  3315                           
  3316                           ;class/factory.c: 27:     GIE=1;
  3317  0046C4  8EF2               	bsf	4082,7,c	;volatile
  3318                           
  3319                           ;class/factory.c: 28:     INT1IE=0;
  3320  0046C6  96F0               	bcf	4080,3,c	;volatile
  3321                           
  3322                           ;class/factory.c: 29:     INTEDG1=0;
  3323  0046C8  9AF1               	bcf	4081,5,c	;volatile
  3324                           
  3325                           ;class/factory.c: 30:     TRISC0=0;
  3326  0046CA  9094               	bcf	3988,0,c	;volatile
  3327                           
  3328                           ;class/factory.c: 31:     LATC0=1;
  3329  0046CC  808B               	bsf	3979,0,c	;volatile
  3330                           
  3331                           ;class/factory.c: 34:     T0CON=0b10000110;
  3332  0046CE  0E86               	movlw	134
  3333  0046D0  6ED5               	movwf	213,c	;volatile
  3334                           
  3335                           ;class/factory.c: 35:     TMR0H=0xFF;
  3336  0046D2  68D7               	setf	215,c	;volatile
  3337                           
  3338                           ;class/factory.c: 36:     TMR0L=0x82;
  3339  0046D4  0E82               	movlw	130
  3340  0046D6  6ED6               	movwf	214,c	;volatile
  3341                           
  3342                           ;class/factory.c: 37:     TMR0IE=1;
  3343  0046D8  8AF2               	bsf	4082,5,c	;volatile
  3344                           
  3345                           ;class/factory.c: 40:     TRISC1=0;
  3346  0046DA  9294               	bcf	3988,1,c	;volatile
  3347                           
  3348                           ;class/factory.c: 41:     PR2=255;
  3349  0046DC  68BB               	setf	187,c	;volatile
  3350                           
  3351                           ;class/factory.c: 42:     CCP2CONbits.CCP2M = 0xC;
  3352  0046DE  5066               	movf	102,w,c	;volatile
  3353  0046E0  0BF0               	andlw	-16
  3354  0046E2  090C               	iorlw	12
  3355  0046E4  6E66               	movwf	102,c	;volatile
  3356                           
  3357                           ;class/factory.c: 43:     CCPR2L = 255;
  3358  0046E6  6867               	setf	103,c	;volatile
  3359                           
  3360                           ;class/factory.c: 44:     CCP2CONbits.DC2B = 0;
  3361  0046E8  0ECF               	movlw	-49
  3362  0046EA  1666               	andwf	102,f,c	;volatile
  3363                           
  3364                           ;class/factory.c: 45:     TMR2IF=0;
  3365  0046EC  929E               	bcf	3998,1,c	;volatile
  3366                           
  3367                           ;class/factory.c: 46:     T2CONbits.T2CKPS0 = 1;
  3368  0046EE  80BA               	bsf	186,0,c	;volatile
  3369                           
  3370                           ;class/factory.c: 47:     T2CONbits.T2CKPS1 = 0;
  3371  0046F0  92BA               	bcf	186,1,c	;volatile
  3372                           
  3373                           ;class/factory.c: 48:     T2CONbits.TMR2ON = 1;
  3374  0046F2  84BA               	bsf	186,2,c	;volatile
  3375                           
  3376                           ;class/factory.c: 51:     ADCON2=0b10100110;
  3377  0046F4  0EA6               	movlw	166
  3378  0046F6  6EC0               	movwf	192,c	;volatile
  3379                           
  3380                           ;class/factory.c: 54:     XF_init();
  3381  0046F8  ECC0  F028         	call	_XF_init	;wreg free
  3382                           
  3383                           ; BSR set to: 0
  3384                           ;class/factory.c: 55:     GameParameters_init(&g1);
  3385  0046FC  0E00               	movlw	low _g1
  3386  0046FE  6E2B               	movwf	GameParameters_init@s^0,c
  3387  004700  0E01               	movlw	high _g1
  3388  004702  6E2C               	movwf	(GameParameters_init@s+1)^0,c
  3389  004704  EC8E  F00D         	call	_GameParameters_init	;wreg free
  3390                           
  3391                           ;class/factory.c: 56:     sleepInit(&g1);
  3392  004708  0E00               	movlw	low _g1
  3393  00470A  0100               	movlb	0	; () banked
  3394  00470C  6FED               	movwf	sleepInit@g& (0+255),b
  3395  00470E  0E01               	movlw	high _g1
  3396  004710  6FEE               	movwf	(sleepInit@g+1)& (0+255),b
  3397  004712  EC55  F02C         	call	_sleepInit	;wreg free
  3398  004716  0012               	return		;funcret
  3399  004718                     __end_of_Factory_init:
  3400                           	callstack 0
  3401                           
  3402 ;; *************** function _sleepInit *****************
  3403 ;; Defined at:
  3404 ;;		line 11 in file "stateMachine/sleepSM.c"
  3405 ;; Parameters:    Size  Location     Type
  3406 ;;  g               2   67[BANK0 ] PTR struct GameParameter
  3407 ;;		 -> g1(240), 
  3408 ;; Auto vars:     Size  Location     Type
  3409 ;;		None
  3410 ;; Return value:  Size  Location     Type
  3411 ;;                  1    wreg      void 
  3412 ;; Registers used:
  3413 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3414 ;; Tracked objects:
  3415 ;;		On entry : 3F/0
  3416 ;;		On exit  : 0/0
  3417 ;;		Unchanged: 0/0
  3418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3419 ;;      Params:         0       2       0       0       0       0       0
  3420 ;;      Locals:         0       0       0       0       0       0       0
  3421 ;;      Temps:          0       0       0       0       0       0       0
  3422 ;;      Totals:         0       2       0       0       0       0       0
  3423 ;;Total ram usage:        2 bytes
  3424 ;; Hardware stack levels used: 1
  3425 ;; Hardware stack levels required when called: 15
  3426 ;; This function calls:
  3427 ;;		_displayInit
  3428 ;;		_gameControllerInit
  3429 ;;		_sleepController
  3430 ;;		_touchScreenInit
  3431 ;; This function is called by:
  3432 ;;		_Factory_init
  3433 ;; This function uses a non-reentrant model
  3434 ;;
  3435                           
  3436                           	psect	text2
  3437  0058AA                     __ptext2:
  3438                           	callstack 0
  3439  0058AA                     _sleepInit:
  3440                           	callstack 14
  3441                           
  3442                           ; BSR set to: 0
  3443                           ;stateMachine/sleepSM.c: 11: void sleepInit(GameParameters* g);stateMachine/sleepSM.c: 1
      +                          2: {;stateMachine/sleepSM.c: 13:     sleepState=WAKEUP;
  3444                           
  3445                           ;incstack = 0
  3446  0058AA  0E00               	movlw	0
  3447  0058AC  6F89               	movwf	_sleepState& (0+255),b
  3448                           
  3449                           ; BSR set to: 0
  3450                           ;stateMachine/sleepSM.c: 15:     displayInit(g);
  3451  0058AE  C0ED  F0EB         	movff	sleepInit@g,displayInit@g
  3452  0058B2  C0EE  F0EC         	movff	sleepInit@g+1,displayInit@g+1
  3453  0058B6  ECC8  F02C         	call	_displayInit	;wreg free
  3454                           
  3455                           ;stateMachine/sleepSM.c: 16:     gameControllerInit(g);
  3456  0058BA  C0ED  F03C         	movff	sleepInit@g,gameControllerInit@g
  3457  0058BE  C0EE  F03D         	movff	sleepInit@g+1,gameControllerInit@g+1
  3458  0058C2  ECBD  F02C         	call	_gameControllerInit	;wreg free
  3459                           
  3460                           ;stateMachine/sleepSM.c: 17:     touchScreenInit();
  3461  0058C6  EC9F  F02C         	call	_touchScreenInit	;wreg free
  3462                           
  3463                           ;stateMachine/sleepSM.c: 18:     sleepController();
  3464  0058CA  EC2A  F02C         	call	_sleepController	;wreg free
  3465  0058CE  0012               	return		;funcret
  3466  0058D0                     __end_of_sleepInit:
  3467                           	callstack 0
  3468                           
  3469 ;; *************** function _touchScreenInit *****************
  3470 ;; Defined at:
  3471 ;;		line 18 in file "stateMachine/touchScreenSM.c"
  3472 ;; Parameters:    Size  Location     Type
  3473 ;;		None
  3474 ;; Auto vars:     Size  Location     Type
  3475 ;;		None
  3476 ;; Return value:  Size  Location     Type
  3477 ;;                  1    wreg      void 
  3478 ;; Registers used:
  3479 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3480 ;; Tracked objects:
  3481 ;;		On entry : 0/0
  3482 ;;		On exit  : 0/0
  3483 ;;		Unchanged: 0/0
  3484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3485 ;;      Params:         0       0       0       0       0       0       0
  3486 ;;      Locals:         0       0       0       0       0       0       0
  3487 ;;      Temps:          0       0       0       0       0       0       0
  3488 ;;      Totals:         0       0       0       0       0       0       0
  3489 ;;Total ram usage:        0 bytes
  3490 ;; Hardware stack levels used: 1
  3491 ;; Hardware stack levels required when called: 6
  3492 ;; This function calls:
  3493 ;;		_XF_scheduleTimer
  3494 ;;		_configTouch
  3495 ;; This function is called by:
  3496 ;;		_sleepInit
  3497 ;; This function uses a non-reentrant model
  3498 ;;
  3499                           
  3500                           	psect	text3
  3501  00593E                     __ptext3:
  3502                           	callstack 0
  3503  00593E                     _touchScreenInit:
  3504                           	callstack 22
  3505                           
  3506                           ;stateMachine/touchScreenSM.c: 20:     touchScreenState=WAITING;
  3507                           
  3508                           ;incstack = 0
  3509  00593E  0E00               	movlw	0
  3510  005940  6E4D               	movwf	_touchScreenState^0,c
  3511                           
  3512                           ;stateMachine/touchScreenSM.c: 21:     configTouch();
  3513  005942  EC8E  F02C         	call	_configTouch	;wreg free
  3514                           
  3515                           ;stateMachine/touchScreenSM.c: 22:     XF_scheduleTimer(30000,evSleep,0);
  3516  005946  0E75               	movlw	117
  3517  005948  6E21               	movwf	(XF_scheduleTimer@tm+1)^0,c
  3518  00594A  0E30               	movlw	48
  3519  00594C  6E20               	movwf	XF_scheduleTimer@tm^0,c
  3520  00594E  0E03               	movlw	3
  3521  005950  6E22               	movwf	XF_scheduleTimer@ev^0,c
  3522  005952  0E00               	movlw	0
  3523  005954  6E23               	movwf	XF_scheduleTimer@inISR^0,c
  3524  005956  ECF3  F029         	call	_XF_scheduleTimer	;wreg free
  3525  00595A  0012               	return		;funcret
  3526  00595C                     __end_of_touchScreenInit:
  3527                           	callstack 0
  3528                           
  3529 ;; *************** function _gameControllerInit *****************
  3530 ;; Defined at:
  3531 ;;		line 11 in file "stateMachine/gameController.c"
  3532 ;; Parameters:    Size  Location     Type
  3533 ;;  g               2   59[COMRAM] PTR struct GameParameter
  3534 ;;		 -> g1(240), 
  3535 ;; Auto vars:     Size  Location     Type
  3536 ;;		None
  3537 ;; Return value:  Size  Location     Type
  3538 ;;                  1    wreg      void 
  3539 ;; Registers used:
  3540 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3541 ;; Tracked objects:
  3542 ;;		On entry : 0/0
  3543 ;;		On exit  : 0/0
  3544 ;;		Unchanged: 0/0
  3545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3546 ;;      Params:         2       0       0       0       0       0       0
  3547 ;;      Locals:         0       0       0       0       0       0       0
  3548 ;;      Temps:          0       0       0       0       0       0       0
  3549 ;;      Totals:         2       0       0       0       0       0       0
  3550 ;;Total ram usage:        2 bytes
  3551 ;; Hardware stack levels used: 1
  3552 ;; Hardware stack levels required when called: 9
  3553 ;; This function calls:
  3554 ;;		_gameControllerController
  3555 ;; This function is called by:
  3556 ;;		_sleepInit
  3557 ;; This function uses a non-reentrant model
  3558 ;;
  3559                           
  3560                           	psect	text4
  3561  00597A                     __ptext4:
  3562                           	callstack 0
  3563  00597A                     _gameControllerInit:
  3564                           	callstack 19
  3565                           
  3566                           ;stateMachine/gameController.c: 11: void gameControllerInit(GameParameters* g);stateMach
      +                          ine/gameController.c: 12: {;stateMachine/gameController.c: 13:     gameStateMachine=NOGA
      +                          ME;
  3567                           
  3568                           ;incstack = 0
  3569  00597A  0E00               	movlw	0
  3570  00597C  6E4C               	movwf	_gameStateMachine^0,c
  3571                           
  3572                           ;stateMachine/gameController.c: 14:     gameControllerController(g,NULLEVENT);
  3573  00597E  C03C  F037         	movff	gameControllerInit@g,gameControllerController@g
  3574  005982  C03D  F038         	movff	gameControllerInit@g+1,gameControllerController@g+1
  3575  005986  0E00               	movlw	0
  3576  005988  6E39               	movwf	gameControllerController@ev^0,c
  3577  00598A  EC81  F009         	call	_gameControllerController	;wreg free
  3578  00598E  0012               	return		;funcret
  3579  005990                     __end_of_gameControllerInit:
  3580                           	callstack 0
  3581                           
  3582 ;; *************** function _displayInit *****************
  3583 ;; Defined at:
  3584 ;;		line 15 in file "stateMachine/display.c"
  3585 ;; Parameters:    Size  Location     Type
  3586 ;;  g               2   65[BANK0 ] PTR struct GameParameter
  3587 ;;		 -> g1(240), 
  3588 ;; Auto vars:     Size  Location     Type
  3589 ;;		None
  3590 ;; Return value:  Size  Location     Type
  3591 ;;                  1    wreg      void 
  3592 ;; Registers used:
  3593 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3594 ;; Tracked objects:
  3595 ;;		On entry : 3F/0
  3596 ;;		On exit  : 0/0
  3597 ;;		Unchanged: 0/0
  3598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3599 ;;      Params:         0       2       0       0       0       0       0
  3600 ;;      Locals:         0       0       0       0       0       0       0
  3601 ;;      Temps:          0       0       0       0       0       0       0
  3602 ;;      Totals:         0       2       0       0       0       0       0
  3603 ;;Total ram usage:        2 bytes
  3604 ;; Hardware stack levels used: 1
  3605 ;; Hardware stack levels required when called: 14
  3606 ;; This function calls:
  3607 ;;		_displayController
  3608 ;; This function is called by:
  3609 ;;		_sleepInit
  3610 ;; This function uses a non-reentrant model
  3611 ;;
  3612                           
  3613                           	psect	text5
  3614  005990                     __ptext5:
  3615                           	callstack 0
  3616  005990                     _displayInit:
  3617                           	callstack 14
  3618                           
  3619                           ; BSR set to: 0
  3620                           ;stateMachine/display.c: 15: void displayInit(GameParameters* g);stateMachine/display.c:
      +                           16: {;stateMachine/display.c: 18:     displayState=WELCOME;
  3621                           
  3622                           ;incstack = 0
  3623  005990  0E00               	movlw	0
  3624  005992  6F88               	movwf	_displayState& (0+255),b
  3625                           
  3626                           ; BSR set to: 0
  3627                           ;stateMachine/display.c: 19:     displayController(g,NULLEVENT);
  3628  005994  C0EB  F0E6         	movff	displayInit@g,displayController@g
  3629  005998  C0EC  F0E7         	movff	displayInit@g+1,displayController@g+1
  3630  00599C  0E00               	movlw	0
  3631  00599E  6FE8               	movwf	displayController@ev& (0+255),b
  3632  0059A0  ECA2  F020         	call	_displayController	;wreg free
  3633  0059A4  0012               	return		;funcret
  3634  0059A6                     __end_of_displayInit:
  3635                           	callstack 0
  3636                           
  3637 ;; *************** function _XF_init *****************
  3638 ;; Defined at:
  3639 ;;		line 25 in file "xf/xf.c"
  3640 ;; Parameters:    Size  Location     Type
  3641 ;;		None
  3642 ;; Auto vars:     Size  Location     Type
  3643 ;;  i               2   17[COMRAM] int 
  3644 ;; Return value:  Size  Location     Type
  3645 ;;                  1    wreg      void 
  3646 ;; Registers used:
  3647 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3648 ;; Tracked objects:
  3649 ;;		On entry : 0/0
  3650 ;;		On exit  : 3F/0
  3651 ;;		Unchanged: 0/0
  3652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3653 ;;      Params:         0       0       0       0       0       0       0
  3654 ;;      Locals:         2       0       0       0       0       0       0
  3655 ;;      Temps:          0       0       0       0       0       0       0
  3656 ;;      Totals:         2       0       0       0       0       0       0
  3657 ;;Total ram usage:        2 bytes
  3658 ;; Hardware stack levels used: 1
  3659 ;; Hardware stack levels required when called: 4
  3660 ;; This function calls:
  3661 ;;		Nothing
  3662 ;; This function is called by:
  3663 ;;		_Factory_init
  3664 ;; This function uses a non-reentrant model
  3665 ;;
  3666                           
  3667                           	psect	text6
  3668  005180                     __ptext6:
  3669                           	callstack 0
  3670  005180                     _XF_init:
  3671                           	callstack 25
  3672                           
  3673                           ;xf/xf.c: 27:     int i;;xf/xf.c: 28:     for (i=0; i<12; i++)
  3674                           
  3675                           ;incstack = 0
  3676  005180  0E00               	movlw	0
  3677  005182  6E13               	movwf	(XF_init@i+1)^0,c
  3678  005184  0E00               	movlw	0
  3679  005186  6E12               	movwf	XF_init@i^0,c
  3680  005188                     l7578:
  3681                           
  3682                           ;xf/xf.c: 29:     {;xf/xf.c: 30:         theXF.eventQueue[i] = NULLEVENT;
  3683  005188  5012               	movf	XF_init@i^0,w,c
  3684  00518A  0F78               	addlw	low (_theXF+24)
  3685  00518C  6ED9               	movwf	fsr2l,c
  3686  00518E  6ADA               	clrf	fsr2h,c
  3687  005190  0E00               	movlw	0
  3688  005192  6EDF               	movwf	indf2,c
  3689                           
  3690                           ;xf/xf.c: 31:     }
  3691  005194  4A12               	infsnz	XF_init@i^0,f,c
  3692  005196  2A13               	incf	(XF_init@i+1)^0,f,c
  3693  005198  BE13               	btfsc	(XF_init@i+1)^0,7,c
  3694  00519A  D7F6               	goto	l7578
  3695  00519C  5013               	movf	(XF_init@i+1)^0,w,c
  3696  00519E  E104               	bnz	u5430
  3697  0051A0  0E0C               	movlw	12
  3698  0051A2  5C12               	subwf	XF_init@i^0,w,c
  3699  0051A4  A0D8               	btfss	status,0,c
  3700  0051A6  D7F0               	goto	l7578
  3701  0051A8                     u5430:
  3702                           
  3703                           ;xf/xf.c: 33:     for (i=0; i<8; i++)
  3704  0051A8  0E00               	movlw	0
  3705  0051AA  6E13               	movwf	(XF_init@i+1)^0,c
  3706  0051AC  0E00               	movlw	0
  3707  0051AE  6E12               	movwf	XF_init@i^0,c
  3708  0051B0                     l7590:
  3709                           
  3710                           ;xf/xf.c: 34:     {;xf/xf.c: 35:         theXF.timerList[i].tm = 0;
  3711  0051B0  5012               	movf	XF_init@i^0,w,c
  3712  0051B2  0D03               	mullw	3
  3713  0051B4  50F3               	movf	243,w,c
  3714  0051B6  0F60               	addlw	low _theXF
  3715  0051B8  6ED9               	movwf	fsr2l,c
  3716  0051BA  6ADA               	clrf	fsr2h,c
  3717  0051BC  0E00               	movlw	0
  3718  0051BE  6EDE               	movwf	postinc2,c
  3719  0051C0  0E00               	movlw	0
  3720  0051C2  6EDD               	movwf	postdec2,c
  3721                           
  3722                           ;xf/xf.c: 36:         theXF.timerList[i].ev = NULLEVENT;
  3723  0051C4  5012               	movf	XF_init@i^0,w,c
  3724  0051C6  0D03               	mullw	3
  3725  0051C8  50F3               	movf	243,w,c
  3726  0051CA  0F62               	addlw	low (_theXF+2)
  3727  0051CC  6ED9               	movwf	fsr2l,c
  3728  0051CE  6ADA               	clrf	fsr2h,c
  3729  0051D0  0E00               	movlw	0
  3730  0051D2  6EDF               	movwf	indf2,c
  3731                           
  3732                           ;xf/xf.c: 37:     }
  3733  0051D4  4A12               	infsnz	XF_init@i^0,f,c
  3734  0051D6  2A13               	incf	(XF_init@i+1)^0,f,c
  3735  0051D8  BE13               	btfsc	(XF_init@i+1)^0,7,c
  3736  0051DA  D7EA               	goto	l7590
  3737  0051DC  5013               	movf	(XF_init@i+1)^0,w,c
  3738  0051DE  E104               	bnz	u5440
  3739  0051E0  0E08               	movlw	8
  3740  0051E2  5C12               	subwf	XF_init@i^0,w,c
  3741  0051E4  A0D8               	btfss	status,0,c
  3742  0051E6  D7E4               	goto	l7590
  3743  0051E8                     u5440:
  3744                           
  3745                           ;xf/xf.c: 38:     theXF.in = 0;
  3746  0051E8  0E00               	movlw	0
  3747  0051EA  0100               	movlb	0	; () banked
  3748  0051EC  6F84               	movwf	(_theXF+36)& (0+255),b
  3749                           
  3750                           ;xf/xf.c: 39:     theXF.out = 0;
  3751  0051EE  0E00               	movlw	0
  3752  0051F0  6F85               	movwf	(_theXF+37)& (0+255),b
  3753                           
  3754                           ; BSR set to: 0
  3755  0051F2  0012               	return		;funcret
  3756  0051F4                     __end_of_XF_init:
  3757                           	callstack 0
  3758                           
  3759 ;; *************** function _LCD_Init *****************
  3760 ;; Defined at:
  3761 ;;		line 20 in file "libraries/lcd_highlevel.c"
  3762 ;; Parameters:    Size  Location     Type
  3763 ;;		None
  3764 ;; Auto vars:     Size  Location     Type
  3765 ;;  i               1   23[COMRAM] unsigned char 
  3766 ;; Return value:  Size  Location     Type
  3767 ;;                  1    wreg      void 
  3768 ;; Registers used:
  3769 ;;		wreg, status,2, status,0, cstack
  3770 ;; Tracked objects:
  3771 ;;		On entry : 0/0
  3772 ;;		On exit  : 0/0
  3773 ;;		Unchanged: 0/0
  3774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3775 ;;      Params:         0       0       0       0       0       0       0
  3776 ;;      Locals:         1       0       0       0       0       0       0
  3777 ;;      Temps:          1       0       0       0       0       0       0
  3778 ;;      Totals:         2       0       0       0       0       0       0
  3779 ;;Total ram usage:        2 bytes
  3780 ;; Hardware stack levels used: 1
  3781 ;; Hardware stack levels required when called: 5
  3782 ;; This function calls:
  3783 ;;		_LCD_Lowlevel_Init
  3784 ;; This function is called by:
  3785 ;;		_Factory_init
  3786 ;; This function uses a non-reentrant model
  3787 ;;
  3788                           
  3789                           	psect	text7
  3790  00293A                     __ptext7:
  3791                           	callstack 0
  3792  00293A                     _LCD_Init:
  3793                           	callstack 24
  3794                           
  3795                           ;libraries/lcd_highlevel.c: 22:   uint8_t i;;libraries/lcd_highlevel.c: 86:   LCD_Lowlev
      +                          el_Init();
  3796                           
  3797                           ; BSR set to: 0
  3798                           ;incstack = 0
  3799  00293A  EC75  F027         	call	_LCD_Lowlevel_Init	;wreg free
  3800                           
  3801                           ;libraries/lcd_highlevel.c: 87:   PORTA = 0x11; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 =
      +                           1;;
  3802  00293E  0E11               	movlw	17
  3803  002940  6E80               	movwf	128,c	;volatile
  3804  002942  988B               	bcf	3979,4,c	;volatile
  3805  002944  968B               	bcf	3979,3,c	;volatile
  3806  002946  868B               	bsf	3979,3,c	;volatile
  3807  002948  888B               	bsf	3979,4,c	;volatile
  3808                           
  3809                           ;libraries/lcd_highlevel.c: 88:   for(i=0;i<10;i++)
  3810  00294A  0E00               	movlw	0
  3811  00294C  6E18               	movwf	LCD_Init@i^0,c
  3812  00294E                     l4160:
  3813                           
  3814                           ;libraries/lcd_highlevel.c: 89:   {;libraries/lcd_highlevel.c: 90:     _delay((unsigned 
      +                          long)((10)*(64000000L/4000.0)));
  3815  00294E  0ED0               	movlw	208
  3816  002950  6E17               	movwf	??_LCD_Init^0,c
  3817  002952  0ECA               	movlw	202
  3818  002954                     u6527:
  3819  002954  2EE8               	decfsz	wreg,f,c
  3820  002956  D7FE               	bra	u6527
  3821  002958  2E17               	decfsz	??_LCD_Init^0,f,c
  3822  00295A  D7FC               	bra	u6527
  3823                           
  3824                           ;libraries/lcd_highlevel.c: 91:   }
  3825  00295C  2A18               	incf	LCD_Init@i^0,f,c
  3826  00295E  0E09               	movlw	9
  3827  002960  6418               	cpfsgt	LCD_Init@i^0,c
  3828  002962  D7F5               	goto	l4160
  3829                           
  3830                           ;libraries/lcd_highlevel.c: 92:   PORTA = 0x36; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 =
      +                           1;;
  3831  002964  0E36               	movlw	54
  3832  002966  6E80               	movwf	128,c	;volatile
  3833  002968  988B               	bcf	3979,4,c	;volatile
  3834  00296A  968B               	bcf	3979,3,c	;volatile
  3835  00296C  868B               	bsf	3979,3,c	;volatile
  3836  00296E  888B               	bsf	3979,4,c	;volatile
  3837                           
  3838                           ;libraries/lcd_highlevel.c: 93:   PORTA = 0b00000000; LATC3 = 0; LATC3 = 1;;
  3839  002970  0E00               	movlw	0
  3840  002972  6E80               	movwf	128,c	;volatile
  3841  002974  968B               	bcf	3979,3,c	;volatile
  3842  002976  868B               	bsf	3979,3,c	;volatile
  3843                           
  3844                           ;libraries/lcd_highlevel.c: 94:   PORTA = 0x3A; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 =
      +                           1;;
  3845  002978  0E3A               	movlw	58
  3846  00297A  6E80               	movwf	128,c	;volatile
  3847  00297C  988B               	bcf	3979,4,c	;volatile
  3848  00297E  968B               	bcf	3979,3,c	;volatile
  3849  002980  868B               	bsf	3979,3,c	;volatile
  3850  002982  888B               	bsf	3979,4,c	;volatile
  3851                           
  3852                           ;libraries/lcd_highlevel.c: 95:   PORTA = 0x55; LATC3 = 0; LATC3 = 1;;
  3853  002984  0E55               	movlw	85
  3854  002986  6E80               	movwf	128,c	;volatile
  3855  002988  968B               	bcf	3979,3,c	;volatile
  3856  00298A  868B               	bsf	3979,3,c	;volatile
  3857                           
  3858                           ;libraries/lcd_highlevel.c: 96:   PORTA = 0xB2; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 =
      +                           1;;
  3859  00298C  0EB2               	movlw	178
  3860  00298E  6E80               	movwf	128,c	;volatile
  3861  002990  988B               	bcf	3979,4,c	;volatile
  3862  002992  968B               	bcf	3979,3,c	;volatile
  3863  002994  868B               	bsf	3979,3,c	;volatile
  3864  002996  888B               	bsf	3979,4,c	;volatile
  3865                           
  3866                           ;libraries/lcd_highlevel.c: 97:   PORTA = 0x0C; LATC3 = 0; LATC3 = 1;;
  3867  002998  0E0C               	movlw	12
  3868  00299A  6E80               	movwf	128,c	;volatile
  3869  00299C  968B               	bcf	3979,3,c	;volatile
  3870  00299E  868B               	bsf	3979,3,c	;volatile
  3871                           
  3872                           ;libraries/lcd_highlevel.c: 98:   PORTA = 0x0C; LATC3 = 0; LATC3 = 1;;
  3873  0029A0  0E0C               	movlw	12
  3874  0029A2  6E80               	movwf	128,c	;volatile
  3875  0029A4  968B               	bcf	3979,3,c	;volatile
  3876  0029A6  868B               	bsf	3979,3,c	;volatile
  3877                           
  3878                           ;libraries/lcd_highlevel.c: 99:   PORTA = 0x33; LATC3 = 0; LATC3 = 1;;
  3879  0029A8  0E33               	movlw	51
  3880  0029AA  6E80               	movwf	128,c	;volatile
  3881  0029AC  968B               	bcf	3979,3,c	;volatile
  3882  0029AE  868B               	bsf	3979,3,c	;volatile
  3883                           
  3884                           ;libraries/lcd_highlevel.c: 100:   PORTA = 0x33; LATC3 = 0; LATC3 = 1;;
  3885  0029B0  0E33               	movlw	51
  3886  0029B2  6E80               	movwf	128,c	;volatile
  3887  0029B4  968B               	bcf	3979,3,c	;volatile
  3888  0029B6  868B               	bsf	3979,3,c	;volatile
  3889                           
  3890                           ;libraries/lcd_highlevel.c: 101:   PORTA = 0xB7; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  3891  0029B8  0EB7               	movlw	183
  3892  0029BA  6E80               	movwf	128,c	;volatile
  3893  0029BC  988B               	bcf	3979,4,c	;volatile
  3894  0029BE  968B               	bcf	3979,3,c	;volatile
  3895  0029C0  868B               	bsf	3979,3,c	;volatile
  3896  0029C2  888B               	bsf	3979,4,c	;volatile
  3897                           
  3898                           ;libraries/lcd_highlevel.c: 102:   PORTA = 0x35; LATC3 = 0; LATC3 = 1;;
  3899  0029C4  0E35               	movlw	53
  3900  0029C6  6E80               	movwf	128,c	;volatile
  3901  0029C8  968B               	bcf	3979,3,c	;volatile
  3902  0029CA  868B               	bsf	3979,3,c	;volatile
  3903                           
  3904                           ;libraries/lcd_highlevel.c: 103:   PORTA = 0xBB; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  3905  0029CC  0EBB               	movlw	187
  3906  0029CE  6E80               	movwf	128,c	;volatile
  3907  0029D0  988B               	bcf	3979,4,c	;volatile
  3908  0029D2  968B               	bcf	3979,3,c	;volatile
  3909  0029D4  868B               	bsf	3979,3,c	;volatile
  3910  0029D6  888B               	bsf	3979,4,c	;volatile
  3911                           
  3912                           ;libraries/lcd_highlevel.c: 104:   PORTA = 0x2B; LATC3 = 0; LATC3 = 1;;
  3913  0029D8  0E2B               	movlw	43
  3914  0029DA  6E80               	movwf	128,c	;volatile
  3915  0029DC  968B               	bcf	3979,3,c	;volatile
  3916  0029DE  868B               	bsf	3979,3,c	;volatile
  3917                           
  3918                           ;libraries/lcd_highlevel.c: 105:   PORTA = 0xC0; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  3919  0029E0  0EC0               	movlw	192
  3920  0029E2  6E80               	movwf	128,c	;volatile
  3921  0029E4  988B               	bcf	3979,4,c	;volatile
  3922  0029E6  968B               	bcf	3979,3,c	;volatile
  3923  0029E8  868B               	bsf	3979,3,c	;volatile
  3924  0029EA  888B               	bsf	3979,4,c	;volatile
  3925                           
  3926                           ;libraries/lcd_highlevel.c: 106:   PORTA = 0x2C; LATC3 = 0; LATC3 = 1;;
  3927  0029EC  0E2C               	movlw	44
  3928  0029EE  6E80               	movwf	128,c	;volatile
  3929  0029F0  968B               	bcf	3979,3,c	;volatile
  3930  0029F2  868B               	bsf	3979,3,c	;volatile
  3931                           
  3932                           ;libraries/lcd_highlevel.c: 107:   PORTA = 0xC2; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  3933  0029F4  0EC2               	movlw	194
  3934  0029F6  6E80               	movwf	128,c	;volatile
  3935  0029F8  988B               	bcf	3979,4,c	;volatile
  3936  0029FA  968B               	bcf	3979,3,c	;volatile
  3937  0029FC  868B               	bsf	3979,3,c	;volatile
  3938  0029FE  888B               	bsf	3979,4,c	;volatile
  3939                           
  3940                           ;libraries/lcd_highlevel.c: 108:   PORTA = 0x01; LATC3 = 0; LATC3 = 1;;
  3941  002A00  0E01               	movlw	1
  3942  002A02  6E80               	movwf	128,c	;volatile
  3943  002A04  968B               	bcf	3979,3,c	;volatile
  3944  002A06  868B               	bsf	3979,3,c	;volatile
  3945                           
  3946                           ;libraries/lcd_highlevel.c: 109:   PORTA = 0xFF; LATC3 = 0; LATC3 = 1;;
  3947  002A08  6880               	setf	128,c	;volatile
  3948  002A0A  968B               	bcf	3979,3,c	;volatile
  3949  002A0C  868B               	bsf	3979,3,c	;volatile
  3950                           
  3951                           ;libraries/lcd_highlevel.c: 110:   PORTA = 0XC3; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  3952  002A0E  0EC3               	movlw	195
  3953  002A10  6E80               	movwf	128,c	;volatile
  3954  002A12  988B               	bcf	3979,4,c	;volatile
  3955  002A14  968B               	bcf	3979,3,c	;volatile
  3956  002A16  868B               	bsf	3979,3,c	;volatile
  3957  002A18  888B               	bsf	3979,4,c	;volatile
  3958                           
  3959                           ;libraries/lcd_highlevel.c: 111:   PORTA = 0x11; LATC3 = 0; LATC3 = 1;;
  3960  002A1A  0E11               	movlw	17
  3961  002A1C  6E80               	movwf	128,c	;volatile
  3962  002A1E  968B               	bcf	3979,3,c	;volatile
  3963  002A20  868B               	bsf	3979,3,c	;volatile
  3964                           
  3965                           ;libraries/lcd_highlevel.c: 112:   PORTA = 0xC4; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  3966  002A22  0EC4               	movlw	196
  3967  002A24  6E80               	movwf	128,c	;volatile
  3968  002A26  988B               	bcf	3979,4,c	;volatile
  3969  002A28  968B               	bcf	3979,3,c	;volatile
  3970  002A2A  868B               	bsf	3979,3,c	;volatile
  3971  002A2C  888B               	bsf	3979,4,c	;volatile
  3972                           
  3973                           ;libraries/lcd_highlevel.c: 113:   PORTA = 0x20; LATC3 = 0; LATC3 = 1;;
  3974  002A2E  0E20               	movlw	32
  3975  002A30  6E80               	movwf	128,c	;volatile
  3976  002A32  968B               	bcf	3979,3,c	;volatile
  3977  002A34  868B               	bsf	3979,3,c	;volatile
  3978                           
  3979                           ;libraries/lcd_highlevel.c: 114:   PORTA = 0xC6; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  3980  002A36  0EC6               	movlw	198
  3981  002A38  6E80               	movwf	128,c	;volatile
  3982  002A3A  988B               	bcf	3979,4,c	;volatile
  3983  002A3C  968B               	bcf	3979,3,c	;volatile
  3984  002A3E  868B               	bsf	3979,3,c	;volatile
  3985  002A40  888B               	bsf	3979,4,c	;volatile
  3986                           
  3987                           ;libraries/lcd_highlevel.c: 115:   PORTA = 0x09; LATC3 = 0; LATC3 = 1;;
  3988  002A42  0E09               	movlw	9
  3989  002A44  6E80               	movwf	128,c	;volatile
  3990  002A46  968B               	bcf	3979,3,c	;volatile
  3991  002A48  868B               	bsf	3979,3,c	;volatile
  3992                           
  3993                           ;libraries/lcd_highlevel.c: 116:   PORTA = 0xD0; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  3994  002A4A  0ED0               	movlw	208
  3995  002A4C  6E80               	movwf	128,c	;volatile
  3996  002A4E  988B               	bcf	3979,4,c	;volatile
  3997  002A50  968B               	bcf	3979,3,c	;volatile
  3998  002A52  868B               	bsf	3979,3,c	;volatile
  3999  002A54  888B               	bsf	3979,4,c	;volatile
  4000                           
  4001                           ;libraries/lcd_highlevel.c: 117:   PORTA = 0xA4; LATC3 = 0; LATC3 = 1;;
  4002  002A56  0EA4               	movlw	164
  4003  002A58  6E80               	movwf	128,c	;volatile
  4004  002A5A  968B               	bcf	3979,3,c	;volatile
  4005  002A5C  868B               	bsf	3979,3,c	;volatile
  4006                           
  4007                           ;libraries/lcd_highlevel.c: 118:   PORTA = 0xA1; LATC3 = 0; LATC3 = 1;;
  4008  002A5E  0EA1               	movlw	161
  4009  002A60  6E80               	movwf	128,c	;volatile
  4010  002A62  968B               	bcf	3979,3,c	;volatile
  4011  002A64  868B               	bsf	3979,3,c	;volatile
  4012                           
  4013                           ;libraries/lcd_highlevel.c: 119:   PORTA = 0xE0; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  4014  002A66  0EE0               	movlw	224
  4015  002A68  6E80               	movwf	128,c	;volatile
  4016  002A6A  988B               	bcf	3979,4,c	;volatile
  4017  002A6C  968B               	bcf	3979,3,c	;volatile
  4018  002A6E  868B               	bsf	3979,3,c	;volatile
  4019  002A70  888B               	bsf	3979,4,c	;volatile
  4020                           
  4021                           ;libraries/lcd_highlevel.c: 120:   PORTA = 0xD0; LATC3 = 0; LATC3 = 1;;
  4022  002A72  0ED0               	movlw	208
  4023  002A74  6E80               	movwf	128,c	;volatile
  4024  002A76  968B               	bcf	3979,3,c	;volatile
  4025  002A78  868B               	bsf	3979,3,c	;volatile
  4026                           
  4027                           ;libraries/lcd_highlevel.c: 121:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
  4028  002A7A  0E00               	movlw	0
  4029  002A7C  6E80               	movwf	128,c	;volatile
  4030  002A7E  968B               	bcf	3979,3,c	;volatile
  4031  002A80  868B               	bsf	3979,3,c	;volatile
  4032                           
  4033                           ;libraries/lcd_highlevel.c: 122:   PORTA = 0x05; LATC3 = 0; LATC3 = 1;;
  4034  002A82  0E05               	movlw	5
  4035  002A84  6E80               	movwf	128,c	;volatile
  4036  002A86  968B               	bcf	3979,3,c	;volatile
  4037  002A88  868B               	bsf	3979,3,c	;volatile
  4038                           
  4039                           ;libraries/lcd_highlevel.c: 123:   PORTA = 0x0E; LATC3 = 0; LATC3 = 1;;
  4040  002A8A  0E0E               	movlw	14
  4041  002A8C  6E80               	movwf	128,c	;volatile
  4042  002A8E  968B               	bcf	3979,3,c	;volatile
  4043  002A90  868B               	bsf	3979,3,c	;volatile
  4044                           
  4045                           ;libraries/lcd_highlevel.c: 124:   PORTA = 0x15; LATC3 = 0; LATC3 = 1;;
  4046  002A92  0E15               	movlw	21
  4047  002A94  6E80               	movwf	128,c	;volatile
  4048  002A96  968B               	bcf	3979,3,c	;volatile
  4049  002A98  868B               	bsf	3979,3,c	;volatile
  4050                           
  4051                           ;libraries/lcd_highlevel.c: 125:   PORTA = 0x0D; LATC3 = 0; LATC3 = 1;;
  4052  002A9A  0E0D               	movlw	13
  4053  002A9C  6E80               	movwf	128,c	;volatile
  4054  002A9E  968B               	bcf	3979,3,c	;volatile
  4055  002AA0  868B               	bsf	3979,3,c	;volatile
  4056                           
  4057                           ;libraries/lcd_highlevel.c: 126:   PORTA = 0x37; LATC3 = 0; LATC3 = 1;;
  4058  002AA2  0E37               	movlw	55
  4059  002AA4  6E80               	movwf	128,c	;volatile
  4060  002AA6  968B               	bcf	3979,3,c	;volatile
  4061  002AA8  868B               	bsf	3979,3,c	;volatile
  4062                           
  4063                           ;libraries/lcd_highlevel.c: 127:   PORTA = 0x43; LATC3 = 0; LATC3 = 1;;
  4064  002AAA  0E43               	movlw	67
  4065  002AAC  6E80               	movwf	128,c	;volatile
  4066  002AAE  968B               	bcf	3979,3,c	;volatile
  4067  002AB0  868B               	bsf	3979,3,c	;volatile
  4068                           
  4069                           ;libraries/lcd_highlevel.c: 128:   PORTA = 0x47; LATC3 = 0; LATC3 = 1;;
  4070  002AB2  0E47               	movlw	71
  4071  002AB4  6E80               	movwf	128,c	;volatile
  4072  002AB6  968B               	bcf	3979,3,c	;volatile
  4073  002AB8  868B               	bsf	3979,3,c	;volatile
  4074                           
  4075                           ;libraries/lcd_highlevel.c: 129:   PORTA = 0x09; LATC3 = 0; LATC3 = 1;;
  4076  002ABA  0E09               	movlw	9
  4077  002ABC  6E80               	movwf	128,c	;volatile
  4078  002ABE  968B               	bcf	3979,3,c	;volatile
  4079  002AC0  868B               	bsf	3979,3,c	;volatile
  4080                           
  4081                           ;libraries/lcd_highlevel.c: 130:   PORTA = 0x15; LATC3 = 0; LATC3 = 1;;
  4082  002AC2  0E15               	movlw	21
  4083  002AC4  6E80               	movwf	128,c	;volatile
  4084  002AC6  968B               	bcf	3979,3,c	;volatile
  4085  002AC8  868B               	bsf	3979,3,c	;volatile
  4086                           
  4087                           ;libraries/lcd_highlevel.c: 131:   PORTA = 0x12; LATC3 = 0; LATC3 = 1;;
  4088  002ACA  0E12               	movlw	18
  4089  002ACC  6E80               	movwf	128,c	;volatile
  4090  002ACE  968B               	bcf	3979,3,c	;volatile
  4091  002AD0  868B               	bsf	3979,3,c	;volatile
  4092                           
  4093                           ;libraries/lcd_highlevel.c: 132:   PORTA = 0x16; LATC3 = 0; LATC3 = 1;;
  4094  002AD2  0E16               	movlw	22
  4095  002AD4  6E80               	movwf	128,c	;volatile
  4096  002AD6  968B               	bcf	3979,3,c	;volatile
  4097  002AD8  868B               	bsf	3979,3,c	;volatile
  4098                           
  4099                           ;libraries/lcd_highlevel.c: 133:   PORTA = 0x19; LATC3 = 0; LATC3 = 1;;
  4100  002ADA  0E19               	movlw	25
  4101  002ADC  6E80               	movwf	128,c	;volatile
  4102  002ADE  968B               	bcf	3979,3,c	;volatile
  4103  002AE0  868B               	bsf	3979,3,c	;volatile
  4104                           
  4105                           ;libraries/lcd_highlevel.c: 134:   PORTA = 0xE1; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  4106  002AE2  0EE1               	movlw	225
  4107  002AE4  6E80               	movwf	128,c	;volatile
  4108  002AE6  988B               	bcf	3979,4,c	;volatile
  4109  002AE8  968B               	bcf	3979,3,c	;volatile
  4110  002AEA  868B               	bsf	3979,3,c	;volatile
  4111  002AEC  888B               	bsf	3979,4,c	;volatile
  4112                           
  4113                           ;libraries/lcd_highlevel.c: 135:   PORTA = 0xD0; LATC3 = 0; LATC3 = 1;;
  4114  002AEE  0ED0               	movlw	208
  4115  002AF0  6E80               	movwf	128,c	;volatile
  4116  002AF2  968B               	bcf	3979,3,c	;volatile
  4117  002AF4  868B               	bsf	3979,3,c	;volatile
  4118                           
  4119                           ;libraries/lcd_highlevel.c: 136:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
  4120  002AF6  0E00               	movlw	0
  4121  002AF8  6E80               	movwf	128,c	;volatile
  4122  002AFA  968B               	bcf	3979,3,c	;volatile
  4123  002AFC  868B               	bsf	3979,3,c	;volatile
  4124                           
  4125                           ;libraries/lcd_highlevel.c: 137:   PORTA = 0x05; LATC3 = 0; LATC3 = 1;;
  4126  002AFE  0E05               	movlw	5
  4127  002B00  6E80               	movwf	128,c	;volatile
  4128  002B02  968B               	bcf	3979,3,c	;volatile
  4129  002B04  868B               	bsf	3979,3,c	;volatile
  4130                           
  4131                           ;libraries/lcd_highlevel.c: 138:   PORTA = 0x0D; LATC3 = 0; LATC3 = 1;;
  4132  002B06  0E0D               	movlw	13
  4133  002B08  6E80               	movwf	128,c	;volatile
  4134  002B0A  968B               	bcf	3979,3,c	;volatile
  4135  002B0C  868B               	bsf	3979,3,c	;volatile
  4136                           
  4137                           ;libraries/lcd_highlevel.c: 139:   PORTA = 0x0C; LATC3 = 0; LATC3 = 1;;
  4138  002B0E  0E0C               	movlw	12
  4139  002B10  6E80               	movwf	128,c	;volatile
  4140  002B12  968B               	bcf	3979,3,c	;volatile
  4141  002B14  868B               	bsf	3979,3,c	;volatile
  4142                           
  4143                           ;libraries/lcd_highlevel.c: 140:   PORTA = 0x06; LATC3 = 0; LATC3 = 1;;
  4144  002B16  0E06               	movlw	6
  4145  002B18  6E80               	movwf	128,c	;volatile
  4146  002B1A  968B               	bcf	3979,3,c	;volatile
  4147  002B1C  868B               	bsf	3979,3,c	;volatile
  4148                           
  4149                           ;libraries/lcd_highlevel.c: 141:   PORTA = 0x2D; LATC3 = 0; LATC3 = 1;;
  4150  002B1E  0E2D               	movlw	45
  4151  002B20  6E80               	movwf	128,c	;volatile
  4152  002B22  968B               	bcf	3979,3,c	;volatile
  4153  002B24  868B               	bsf	3979,3,c	;volatile
  4154                           
  4155                           ;libraries/lcd_highlevel.c: 142:   PORTA = 0x44; LATC3 = 0; LATC3 = 1;;
  4156  002B26  0E44               	movlw	68
  4157  002B28  6E80               	movwf	128,c	;volatile
  4158  002B2A  968B               	bcf	3979,3,c	;volatile
  4159  002B2C  868B               	bsf	3979,3,c	;volatile
  4160                           
  4161                           ;libraries/lcd_highlevel.c: 143:   PORTA = 0x40; LATC3 = 0; LATC3 = 1;;
  4162  002B2E  0E40               	movlw	64
  4163  002B30  6E80               	movwf	128,c	;volatile
  4164  002B32  968B               	bcf	3979,3,c	;volatile
  4165  002B34  868B               	bsf	3979,3,c	;volatile
  4166                           
  4167                           ;libraries/lcd_highlevel.c: 144:   PORTA = 0x0E; LATC3 = 0; LATC3 = 1;;
  4168  002B36  0E0E               	movlw	14
  4169  002B38  6E80               	movwf	128,c	;volatile
  4170  002B3A  968B               	bcf	3979,3,c	;volatile
  4171  002B3C  868B               	bsf	3979,3,c	;volatile
  4172                           
  4173                           ;libraries/lcd_highlevel.c: 145:   PORTA = 0x1C; LATC3 = 0; LATC3 = 1;;
  4174  002B3E  0E1C               	movlw	28
  4175  002B40  6E80               	movwf	128,c	;volatile
  4176  002B42  968B               	bcf	3979,3,c	;volatile
  4177  002B44  868B               	bsf	3979,3,c	;volatile
  4178                           
  4179                           ;libraries/lcd_highlevel.c: 146:   PORTA = 0x18; LATC3 = 0; LATC3 = 1;;
  4180  002B46  0E18               	movlw	24
  4181  002B48  6E80               	movwf	128,c	;volatile
  4182  002B4A  968B               	bcf	3979,3,c	;volatile
  4183  002B4C  868B               	bsf	3979,3,c	;volatile
  4184                           
  4185                           ;libraries/lcd_highlevel.c: 147:   PORTA = 0x16; LATC3 = 0; LATC3 = 1;;
  4186  002B4E  0E16               	movlw	22
  4187  002B50  6E80               	movwf	128,c	;volatile
  4188  002B52  968B               	bcf	3979,3,c	;volatile
  4189  002B54  868B               	bsf	3979,3,c	;volatile
  4190                           
  4191                           ;libraries/lcd_highlevel.c: 148:   PORTA = 0x19; LATC3 = 0; LATC3 = 1;;
  4192  002B56  0E19               	movlw	25
  4193  002B58  6E80               	movwf	128,c	;volatile
  4194  002B5A  968B               	bcf	3979,3,c	;volatile
  4195  002B5C  868B               	bsf	3979,3,c	;volatile
  4196                           
  4197                           ;libraries/lcd_highlevel.c: 149:   PORTA = 0x2A; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  4198  002B5E  0E2A               	movlw	42
  4199  002B60  6E80               	movwf	128,c	;volatile
  4200  002B62  988B               	bcf	3979,4,c	;volatile
  4201  002B64  968B               	bcf	3979,3,c	;volatile
  4202  002B66  868B               	bsf	3979,3,c	;volatile
  4203  002B68  888B               	bsf	3979,4,c	;volatile
  4204                           
  4205                           ;libraries/lcd_highlevel.c: 150:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
  4206  002B6A  0E00               	movlw	0
  4207  002B6C  6E80               	movwf	128,c	;volatile
  4208  002B6E  968B               	bcf	3979,3,c	;volatile
  4209  002B70  868B               	bsf	3979,3,c	;volatile
  4210                           
  4211                           ;libraries/lcd_highlevel.c: 151:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
  4212  002B72  0E00               	movlw	0
  4213  002B74  6E80               	movwf	128,c	;volatile
  4214  002B76  968B               	bcf	3979,3,c	;volatile
  4215  002B78  868B               	bsf	3979,3,c	;volatile
  4216                           
  4217                           ;libraries/lcd_highlevel.c: 152:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
  4218  002B7A  0E00               	movlw	0
  4219  002B7C  6E80               	movwf	128,c	;volatile
  4220  002B7E  968B               	bcf	3979,3,c	;volatile
  4221  002B80  868B               	bsf	3979,3,c	;volatile
  4222                           
  4223                           ;libraries/lcd_highlevel.c: 153:   PORTA = 0xEF; LATC3 = 0; LATC3 = 1;;
  4224  002B82  0EEF               	movlw	239
  4225  002B84  6E80               	movwf	128,c	;volatile
  4226  002B86  968B               	bcf	3979,3,c	;volatile
  4227  002B88  868B               	bsf	3979,3,c	;volatile
  4228                           
  4229                           ;libraries/lcd_highlevel.c: 154:   PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  4230  002B8A  0E2B               	movlw	43
  4231  002B8C  6E80               	movwf	128,c	;volatile
  4232  002B8E  988B               	bcf	3979,4,c	;volatile
  4233  002B90  968B               	bcf	3979,3,c	;volatile
  4234  002B92  868B               	bsf	3979,3,c	;volatile
  4235  002B94  888B               	bsf	3979,4,c	;volatile
  4236                           
  4237                           ;libraries/lcd_highlevel.c: 155:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
  4238  002B96  0E00               	movlw	0
  4239  002B98  6E80               	movwf	128,c	;volatile
  4240  002B9A  968B               	bcf	3979,3,c	;volatile
  4241  002B9C  868B               	bsf	3979,3,c	;volatile
  4242                           
  4243                           ;libraries/lcd_highlevel.c: 156:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
  4244  002B9E  0E00               	movlw	0
  4245  002BA0  6E80               	movwf	128,c	;volatile
  4246  002BA2  968B               	bcf	3979,3,c	;volatile
  4247  002BA4  868B               	bsf	3979,3,c	;volatile
  4248                           
  4249                           ;libraries/lcd_highlevel.c: 157:   PORTA = 0x01; LATC3 = 0; LATC3 = 1;;
  4250  002BA6  0E01               	movlw	1
  4251  002BA8  6E80               	movwf	128,c	;volatile
  4252  002BAA  968B               	bcf	3979,3,c	;volatile
  4253  002BAC  868B               	bsf	3979,3,c	;volatile
  4254                           
  4255                           ;libraries/lcd_highlevel.c: 158:   PORTA = 0x3F; LATC3 = 0; LATC3 = 1;;
  4256  002BAE  0E3F               	movlw	63
  4257  002BB0  6E80               	movwf	128,c	;volatile
  4258  002BB2  968B               	bcf	3979,3,c	;volatile
  4259  002BB4  868B               	bsf	3979,3,c	;volatile
  4260                           
  4261                           ;libraries/lcd_highlevel.c: 159:   PORTA = 0x26; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  4262  002BB6  0E26               	movlw	38
  4263  002BB8  6E80               	movwf	128,c	;volatile
  4264  002BBA  988B               	bcf	3979,4,c	;volatile
  4265  002BBC  968B               	bcf	3979,3,c	;volatile
  4266  002BBE  868B               	bsf	3979,3,c	;volatile
  4267  002BC0  888B               	bsf	3979,4,c	;volatile
  4268                           
  4269                           ;libraries/lcd_highlevel.c: 160:   PORTA = 0x01; LATC3 = 0; LATC3 = 1;;
  4270  002BC2  0E01               	movlw	1
  4271  002BC4  6E80               	movwf	128,c	;volatile
  4272  002BC6  968B               	bcf	3979,3,c	;volatile
  4273  002BC8  868B               	bsf	3979,3,c	;volatile
  4274                           
  4275                           ;libraries/lcd_highlevel.c: 161:   PORTA = 0x29; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  4276  002BCA  0E29               	movlw	41
  4277  002BCC  6E80               	movwf	128,c	;volatile
  4278  002BCE  988B               	bcf	3979,4,c	;volatile
  4279  002BD0  968B               	bcf	3979,3,c	;volatile
  4280  002BD2  868B               	bsf	3979,3,c	;volatile
  4281  002BD4  888B               	bsf	3979,4,c	;volatile
  4282  002BD6  0012               	return		;funcret
  4283  002BD8                     __end_of_LCD_Init:
  4284                           	callstack 0
  4285                           
  4286 ;; *************** function _LCD_Lowlevel_Init *****************
  4287 ;; Defined at:
  4288 ;;		line 17 in file "libraries/lcd_lowlevel.c"
  4289 ;; Parameters:    Size  Location     Type
  4290 ;;		None
  4291 ;; Auto vars:     Size  Location     Type
  4292 ;;  i               4   18[COMRAM] unsigned long 
  4293 ;; Return value:  Size  Location     Type
  4294 ;;                  1    wreg      void 
  4295 ;; Registers used:
  4296 ;;		wreg, status,2, status,0
  4297 ;; Tracked objects:
  4298 ;;		On entry : 0/0
  4299 ;;		On exit  : 0/0
  4300 ;;		Unchanged: 0/0
  4301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4302 ;;      Params:         0       0       0       0       0       0       0
  4303 ;;      Locals:         4       0       0       0       0       0       0
  4304 ;;      Temps:          1       0       0       0       0       0       0
  4305 ;;      Totals:         5       0       0       0       0       0       0
  4306 ;;Total ram usage:        5 bytes
  4307 ;; Hardware stack levels used: 1
  4308 ;; Hardware stack levels required when called: 4
  4309 ;; This function calls:
  4310 ;;		Nothing
  4311 ;; This function is called by:
  4312 ;;		_LCD_Init
  4313 ;; This function uses a non-reentrant model
  4314 ;;
  4315                           
  4316                           	psect	text8
  4317  004EEA                     __ptext8:
  4318                           	callstack 0
  4319  004EEA                     _LCD_Lowlevel_Init:
  4320                           	callstack 24
  4321                           
  4322                           ;libraries/lcd_lowlevel.c: 19:   uint32_t i;;libraries/lcd_lowlevel.c: 20:   TRISC5 = 0;
  4323                           
  4324                           ;incstack = 0
  4325  004EEA  9A94               	bcf	3988,5,c	;volatile
  4326                           
  4327                           ;libraries/lcd_lowlevel.c: 21:   TRISC2 = 0;
  4328  004EEC  9494               	bcf	3988,2,c	;volatile
  4329                           
  4330                           ;libraries/lcd_lowlevel.c: 22:   TRISC3 = 0;
  4331  004EEE  9694               	bcf	3988,3,c	;volatile
  4332                           
  4333                           ;libraries/lcd_lowlevel.c: 23:   TRISC4 = 0;
  4334  004EF0  9894               	bcf	3988,4,c	;volatile
  4335                           
  4336                           ;libraries/lcd_lowlevel.c: 25:   TRISA = 0x00;
  4337  004EF2  0E00               	movlw	0
  4338  004EF4  6E92               	movwf	146,c	;volatile
  4339                           
  4340                           ;libraries/lcd_lowlevel.c: 28:  LATC5 = 0;
  4341  004EF6  9A8B               	bcf	3979,5,c	;volatile
  4342                           
  4343                           ;libraries/lcd_lowlevel.c: 29:  LATC2 = 1;
  4344  004EF8  848B               	bsf	3979,2,c	;volatile
  4345                           
  4346                           ;libraries/lcd_lowlevel.c: 30:  LATC3 = 1;
  4347  004EFA  868B               	bsf	3979,3,c	;volatile
  4348                           
  4349                           ;libraries/lcd_lowlevel.c: 31:  LATC4 = 1;
  4350  004EFC  888B               	bsf	3979,4,c	;volatile
  4351                           
  4352                           ;libraries/lcd_lowlevel.c: 33:   for(i=0;i<12;i++)
  4353  004EFE  0E00               	movlw	0
  4354  004F00  6E13               	movwf	LCD_Lowlevel_Init@i^0,c
  4355  004F02  0E00               	movlw	0
  4356  004F04  6E14               	movwf	(LCD_Lowlevel_Init@i+1)^0,c
  4357  004F06  0E00               	movlw	0
  4358  004F08  6E15               	movwf	(LCD_Lowlevel_Init@i+2)^0,c
  4359  004F0A  0E00               	movlw	0
  4360  004F0C  6E16               	movwf	(LCD_Lowlevel_Init@i+3)^0,c
  4361  004F0E                     l3998:
  4362                           
  4363                           ;libraries/lcd_lowlevel.c: 34:   {;libraries/lcd_lowlevel.c: 35:     _delay((unsigned lo
      +                          ng)((10)*(64000000L/4000.0)));
  4364  004F0E  0ED0               	movlw	208
  4365  004F10  6E12               	movwf	??_LCD_Lowlevel_Init^0,c
  4366  004F12  0ECA               	movlw	202
  4367  004F14                     u6537:
  4368  004F14  2EE8               	decfsz	wreg,f,c
  4369  004F16  D7FE               	bra	u6537
  4370  004F18  2E12               	decfsz	??_LCD_Lowlevel_Init^0,f,c
  4371  004F1A  D7FC               	bra	u6537
  4372                           
  4373                           ;libraries/lcd_lowlevel.c: 36:   }
  4374  004F1C  0E01               	movlw	1
  4375  004F1E  2613               	addwf	LCD_Lowlevel_Init@i^0,f,c
  4376  004F20  0E00               	movlw	0
  4377  004F22  2214               	addwfc	(LCD_Lowlevel_Init@i+1)^0,f,c
  4378  004F24  2215               	addwfc	(LCD_Lowlevel_Init@i+2)^0,f,c
  4379  004F26  2216               	addwfc	(LCD_Lowlevel_Init@i+3)^0,f,c
  4380  004F28  5016               	movf	(LCD_Lowlevel_Init@i+3)^0,w,c
  4381  004F2A  1015               	iorwf	(LCD_Lowlevel_Init@i+2)^0,w,c
  4382  004F2C  1014               	iorwf	(LCD_Lowlevel_Init@i+1)^0,w,c
  4383  004F2E  E104               	bnz	u2400
  4384  004F30  0E0C               	movlw	12
  4385  004F32  5C13               	subwf	LCD_Lowlevel_Init@i^0,w,c
  4386  004F34  A0D8               	btfss	status,0,c
  4387  004F36  D7EB               	goto	l3998
  4388  004F38                     u2400:
  4389                           
  4390                           ;libraries/lcd_lowlevel.c: 38:   for(i=0;i<12;i++)
  4391  004F38  0E00               	movlw	0
  4392  004F3A  6E13               	movwf	LCD_Lowlevel_Init@i^0,c
  4393  004F3C  0E00               	movlw	0
  4394  004F3E  6E14               	movwf	(LCD_Lowlevel_Init@i+1)^0,c
  4395  004F40  0E00               	movlw	0
  4396  004F42  6E15               	movwf	(LCD_Lowlevel_Init@i+2)^0,c
  4397  004F44  0E00               	movlw	0
  4398  004F46  6E16               	movwf	(LCD_Lowlevel_Init@i+3)^0,c
  4399  004F48                     l4010:
  4400                           
  4401                           ;libraries/lcd_lowlevel.c: 39:   {;libraries/lcd_lowlevel.c: 40:     _delay((unsigned lo
      +                          ng)((10)*(64000000L/4000.0)));
  4402  004F48  0ED0               	movlw	208
  4403  004F4A  6E12               	movwf	??_LCD_Lowlevel_Init^0,c
  4404  004F4C  0ECA               	movlw	202
  4405  004F4E                     u6547:
  4406  004F4E  2EE8               	decfsz	wreg,f,c
  4407  004F50  D7FE               	bra	u6547
  4408  004F52  2E12               	decfsz	??_LCD_Lowlevel_Init^0,f,c
  4409  004F54  D7FC               	bra	u6547
  4410                           
  4411                           ;libraries/lcd_lowlevel.c: 41:   }
  4412  004F56  0E01               	movlw	1
  4413  004F58  2613               	addwf	LCD_Lowlevel_Init@i^0,f,c
  4414  004F5A  0E00               	movlw	0
  4415  004F5C  2214               	addwfc	(LCD_Lowlevel_Init@i+1)^0,f,c
  4416  004F5E  2215               	addwfc	(LCD_Lowlevel_Init@i+2)^0,f,c
  4417  004F60  2216               	addwfc	(LCD_Lowlevel_Init@i+3)^0,f,c
  4418  004F62  5016               	movf	(LCD_Lowlevel_Init@i+3)^0,w,c
  4419  004F64  1015               	iorwf	(LCD_Lowlevel_Init@i+2)^0,w,c
  4420  004F66  1014               	iorwf	(LCD_Lowlevel_Init@i+1)^0,w,c
  4421  004F68  E105               	bnz	u2410
  4422  004F6A  0E0C               	movlw	12
  4423  004F6C  5C13               	subwf	LCD_Lowlevel_Init@i^0,w,c
  4424  004F6E  B0D8               	btfsc	status,0,c
  4425  004F70  0012               	return	
  4426  004F72  D7EA               	goto	l4010
  4427  004F74                     u2410:
  4428  004F74  0012               	return		;funcret
  4429  004F76                     __end_of_LCD_Lowlevel_Init:
  4430                           	callstack 0
  4431                           
  4432 ;; *************** function _Factory_exec *****************
  4433 ;; Defined at:
  4434 ;;		line 63 in file "class/factory.c"
  4435 ;; Parameters:    Size  Location     Type
  4436 ;;		None
  4437 ;; Auto vars:     Size  Location     Type
  4438 ;;  ev              1   70[BANK0 ] unsigned char 
  4439 ;; Return value:  Size  Location     Type
  4440 ;;                  1    wreg      void 
  4441 ;; Registers used:
  4442 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4443 ;; Tracked objects:
  4444 ;;		On entry : 0/0
  4445 ;;		On exit  : 0/0
  4446 ;;		Unchanged: 0/0
  4447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4448 ;;      Params:         0       0       0       0       0       0       0
  4449 ;;      Locals:         0       1       0       0       0       0       0
  4450 ;;      Temps:          0       0       0       0       0       0       0
  4451 ;;      Totals:         0       1       0       0       0       0       0
  4452 ;;Total ram usage:        1 bytes
  4453 ;; Hardware stack levels used: 1
  4454 ;; Hardware stack levels required when called: 15
  4455 ;; This function calls:
  4456 ;;		_XF_popEvent
  4457 ;;		_displaySM
  4458 ;;		_gameControllerSM
  4459 ;;		_sleepSM
  4460 ;;		_touchScreenSM
  4461 ;; This function is called by:
  4462 ;;		_main
  4463 ;; This function uses a non-reentrant model
  4464 ;;
  4465                           
  4466                           	psect	text9
  4467  00552A                     __ptext9:
  4468                           	callstack 0
  4469  00552A                     _Factory_exec:
  4470                           	callstack 15
  4471                           
  4472                           ;class/factory.c: 66:     Event ev;;class/factory.c: 67:     ev = XF_popEvent(0);
  4473                           
  4474                           ;incstack = 0
  4475  00552A  0E00               	movlw	0
  4476  00552C  EC6E  F02A         	call	_XF_popEvent
  4477  005530  0100               	movlb	0	; () banked
  4478  005532  6FF0               	movwf	Factory_exec@ev& (0+255),b
  4479                           
  4480                           ; BSR set to: 0
  4481                           ;class/factory.c: 68:     if (ev != NULLEVENT)
  4482  005534  51F0               	movf	Factory_exec@ev& (0+255),w,b
  4483  005536  B4D8               	btfsc	status,2,c
  4484  005538  0012               	return	
  4485                           
  4486                           ; BSR set to: 0
  4487                           ;class/factory.c: 69:     {;class/factory.c: 70:         sleepSM(ev);
  4488  00553A  51F0               	movf	Factory_exec@ev& (0+255),w,b
  4489  00553C  ECC7  F02B         	call	_sleepSM
  4490                           
  4491                           ;class/factory.c: 71:         touchScreenSM(ev,&g1);
  4492  005540  0E00               	movlw	low _g1
  4493  005542  0100               	movlb	0	; () banked
  4494  005544  6FB6               	movwf	touchScreenSM@g& (0+255),b
  4495  005546  0E01               	movlw	high _g1
  4496  005548  6FB7               	movwf	(touchScreenSM@g+1)& (0+255),b
  4497  00554A  51F0               	movf	Factory_exec@ev& (0+255),w,b
  4498  00554C  EC9B  F029         	call	_touchScreenSM
  4499                           
  4500                           ;class/factory.c: 72:         displaySM(ev,&g1);
  4501  005550  0E00               	movlw	low _g1
  4502  005552  0100               	movlb	0	; () banked
  4503  005554  6FEB               	movwf	displaySM@g& (0+255),b
  4504  005556  0E01               	movlw	high _g1
  4505  005558  6FEC               	movwf	(displaySM@g+1)& (0+255),b
  4506  00555A  51F0               	movf	Factory_exec@ev& (0+255),w,b
  4507  00555C  ECF3  F025         	call	_displaySM
  4508                           
  4509                           ;class/factory.c: 73:         gameControllerSM(ev,&g1);
  4510  005560  0E00               	movlw	low _g1
  4511  005562  6E3C               	movwf	gameControllerSM@g^0,c
  4512  005564  0E01               	movlw	high _g1
  4513  005566  6E3D               	movwf	(gameControllerSM@g+1)^0,c
  4514  005568  0100               	movlb	0	; () banked
  4515  00556A  51F0               	movf	Factory_exec@ev& (0+255),w,b
  4516  00556C  EC19  F021         	call	_gameControllerSM
  4517  005570  0012               	return		;funcret
  4518  005572                     __end_of_Factory_exec:
  4519                           	callstack 0
  4520                           
  4521 ;; *************** function _touchScreenSM *****************
  4522 ;; Defined at:
  4523 ;;		line 31 in file "stateMachine/touchScreenSM.c"
  4524 ;; Parameters:    Size  Location     Type
  4525 ;;  ev              1    wreg     unsigned char 
  4526 ;;  g               2   12[BANK0 ] PTR struct GameParameter
  4527 ;;		 -> g1(240), 
  4528 ;; Auto vars:     Size  Location     Type
  4529 ;;  ev              1   68[COMRAM] unsigned char 
  4530 ;; Return value:  Size  Location     Type
  4531 ;;                  1    wreg      void 
  4532 ;; Registers used:
  4533 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4534 ;; Tracked objects:
  4535 ;;		On entry : 3F/0
  4536 ;;		On exit  : 0/0
  4537 ;;		Unchanged: 0/0
  4538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4539 ;;      Params:         0       2       0       0       0       0       0
  4540 ;;      Locals:         1       0       0       0       0       0       0
  4541 ;;      Temps:          0       2       0       0       0       0       0
  4542 ;;      Totals:         1       4       0       0       0       0       0
  4543 ;;Total ram usage:        5 bytes
  4544 ;; Hardware stack levels used: 1
  4545 ;; Hardware stack levels required when called: 7
  4546 ;; This function calls:
  4547 ;;		_touchScreenController
  4548 ;; This function is called by:
  4549 ;;		_Factory_exec
  4550 ;; This function uses a non-reentrant model
  4551 ;;
  4552                           
  4553                           	psect	text10
  4554  005336                     __ptext10:
  4555                           	callstack 0
  4556  005336                     _touchScreenSM:
  4557                           	callstack 22
  4558                           
  4559                           ;incstack = 0
  4560                           ;touchScreenSM@ev stored from wreg
  4561  005336  6E45               	movwf	touchScreenSM@ev^0,c
  4562                           
  4563                           ;stateMachine/touchScreenSM.c: 31: void touchScreenSM(Event ev, GameParameters* g);state
      +                          Machine/touchScreenSM.c: 32: {;stateMachine/touchScreenSM.c: 33:     switch(touchScreenS
      +                          tate)
  4564  005338  D01D               	goto	l8750
  4565  00533A                     l8732:
  4566                           
  4567                           ; BSR set to: 0
  4568                           ;stateMachine/touchScreenSM.c: 36:             if(ev==evPress)
  4569  00533A  0445               	decf	touchScreenSM@ev^0,w,c
  4570  00533C  A4D8               	btfss	status,2,c
  4571  00533E  0012               	return	
  4572                           
  4573                           ; BSR set to: 0
  4574                           ;stateMachine/touchScreenSM.c: 37:             {;stateMachine/touchScreenSM.c: 38:      
      +                                     touchScreenState=CALCULATEPOSITION;
  4575  005340  0E01               	movlw	1
  4576  005342  6E4D               	movwf	_touchScreenState^0,c
  4577  005344                     l8736:
  4578                           
  4579                           ;stateMachine/touchScreenSM.c: 39:                 touchScreenController(g);
  4580  005344  C0B6  F043         	movff	touchScreenSM@g,touchScreenController@g
  4581  005348  C0B7  F044         	movff	touchScreenSM@g+1,touchScreenController@g+1
  4582  00534C  EC4F  F019         	call	_touchScreenController	;wreg free
  4583  005350  0012               	return	
  4584  005352                     l8738:
  4585                           
  4586                           ; BSR set to: 0
  4587                           ;stateMachine/touchScreenSM.c: 44:             if(ev==evRelease)
  4588  005352  0E02               	movlw	2
  4589  005354  1845               	xorwf	touchScreenSM@ev^0,w,c
  4590  005356  A4D8               	btfss	status,2,c
  4591  005358  D008               	goto	l8744
  4592                           
  4593                           ; BSR set to: 0
  4594                           ;stateMachine/touchScreenSM.c: 45:             {;stateMachine/touchScreenSM.c: 46:      
      +                                     touchScreenState=WAITING;
  4595  00535A  0E00               	movlw	0
  4596  00535C  6E4D               	movwf	_touchScreenState^0,c
  4597                           
  4598                           ; BSR set to: 0
  4599                           ;stateMachine/touchScreenSM.c: 47:                 touchScreenController(g);
  4600  00535E  C0B6  F043         	movff	touchScreenSM@g,touchScreenController@g
  4601  005362  C0B7  F044         	movff	touchScreenSM@g+1,touchScreenController@g+1
  4602  005366  EC4F  F019         	call	_touchScreenController	;wreg free
  4603  00536A                     l8744:
  4604                           
  4605                           ;stateMachine/touchScreenSM.c: 49:             if(ev==evTimerPos)
  4606  00536A  0E04               	movlw	4
  4607  00536C  1845               	xorwf	touchScreenSM@ev^0,w,c
  4608  00536E  A4D8               	btfss	status,2,c
  4609  005370  0012               	return	
  4610  005372  D7E8               	goto	l8736
  4611  005374                     l8750:
  4612  005374  504D               	movf	_touchScreenState^0,w,c
  4613  005376  0100               	movlb	0	; () banked
  4614  005378  6FB8               	movwf	??_touchScreenSM& (0+255),b
  4615  00537A  6BB9               	clrf	(??_touchScreenSM+1)& (0+255),b
  4616                           
  4617                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4618                           ; Switch size 1, requested type "simple"
  4619                           ; Number of cases is 1, Range of values is 0 to 0
  4620                           ; switch strategies available:
  4621                           ; Name         Instructions Cycles
  4622                           ; simple_byte            4     3 (average)
  4623                           ;	Chosen strategy is simple_byte
  4624  00537C  51B9               	movf	(??_touchScreenSM+1)& (0+255),w,b
  4625  00537E  0A00               	xorlw	0	; case 0
  4626  005380  A4D8               	btfss	status,2,c
  4627  005382  0012               	return	
  4628                           
  4629                           ; BSR set to: 0
  4630                           ; Switch size 1, requested type "simple"
  4631                           ; Number of cases is 2, Range of values is 0 to 1
  4632                           ; switch strategies available:
  4633                           ; Name         Instructions Cycles
  4634                           ; simple_byte            7     4 (average)
  4635                           ;	Chosen strategy is simple_byte
  4636  005384  51B8               	movf	??_touchScreenSM& (0+255),w,b
  4637  005386  0A00               	xorlw	0	; case 0
  4638  005388  B4D8               	btfsc	status,2,c
  4639  00538A  D7D7               	goto	l8732
  4640  00538C  0A01               	xorlw	1	; case 1
  4641  00538E  A4D8               	btfss	status,2,c
  4642  005390  0012               	return	
  4643  005392  D7DF               	goto	l8738
  4644  005394                     __end_of_touchScreenSM:
  4645                           	callstack 0
  4646                           
  4647 ;; *************** function _touchScreenController *****************
  4648 ;; Defined at:
  4649 ;;		line 67 in file "stateMachine/touchScreenSM.c"
  4650 ;; Parameters:    Size  Location     Type
  4651 ;;  g               2   66[COMRAM] PTR struct GameParameter
  4652 ;;		 -> g1(240), 
  4653 ;; Auto vars:     Size  Location     Type
  4654 ;;  i               2    8[BANK0 ] int 
  4655 ;;  valueX          2   10[BANK0 ] unsigned short 
  4656 ;;  valueY          2    6[BANK0 ] unsigned short 
  4657 ;; Return value:  Size  Location     Type
  4658 ;;                  1    wreg      void 
  4659 ;; Registers used:
  4660 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4661 ;; Tracked objects:
  4662 ;;		On entry : 0/0
  4663 ;;		On exit  : 0/0
  4664 ;;		Unchanged: 0/0
  4665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4666 ;;      Params:         2       0       0       0       0       0       0
  4667 ;;      Locals:         0       6       0       0       0       0       0
  4668 ;;      Temps:          0       6       0       0       0       0       0
  4669 ;;      Totals:         2      12       0       0       0       0       0
  4670 ;;Total ram usage:       14 bytes
  4671 ;; Hardware stack levels used: 1
  4672 ;; Hardware stack levels required when called: 6
  4673 ;; This function calls:
  4674 ;;		_GameParameters_setX
  4675 ;;		_GameParameters_setY
  4676 ;;		_XF_scheduleTimer
  4677 ;;		_XF_unscheduleTimer
  4678 ;;		___fldiv
  4679 ;;		___fltol
  4680 ;;		___xxtofl
  4681 ;;		_configMeasure
  4682 ;;		_configTouch
  4683 ;; This function is called by:
  4684 ;;		_touchScreenSM
  4685 ;; This function uses a non-reentrant model
  4686 ;;
  4687                           
  4688                           	psect	text11
  4689  00329E                     __ptext11:
  4690                           	callstack 0
  4691  00329E                     _touchScreenController:
  4692                           	callstack 22
  4693                           
  4694                           ;stateMachine/touchScreenSM.c: 67: void touchScreenController(GameParameters* g);stateMa
      +                          chine/touchScreenSM.c: 68: {;stateMachine/touchScreenSM.c: 69:     switch(touchScreenSta
      +                          te)
  4695                           
  4696                           ;incstack = 0
  4697  00329E  D0D5               	goto	l7520
  4698  0032A0                     l532:
  4699                           
  4700                           ; BSR set to: 0
  4701                           ;stateMachine/touchScreenSM.c: 73:             INTEDG1=0;
  4702  0032A0  9AF1               	bcf	4081,5,c	;volatile
  4703                           
  4704                           ; BSR set to: 0
  4705                           ;stateMachine/touchScreenSM.c: 74:             XF_scheduleTimer(30000,evSleep,0);
  4706  0032A2  0E75               	movlw	117
  4707  0032A4  6E21               	movwf	(XF_scheduleTimer@tm+1)^0,c
  4708  0032A6  0E30               	movlw	48
  4709  0032A8  6E20               	movwf	XF_scheduleTimer@tm^0,c
  4710  0032AA  0E03               	movlw	3
  4711  0032AC  6E22               	movwf	XF_scheduleTimer@ev^0,c
  4712  0032AE  0E00               	movlw	0
  4713  0032B0  6E23               	movwf	XF_scheduleTimer@inISR^0,c
  4714  0032B2  ECF3  F029         	call	_XF_scheduleTimer	;wreg free
  4715                           
  4716                           ;stateMachine/touchScreenSM.c: 75:             configTouch();
  4717  0032B6  EC8E  F02C         	call	_configTouch	;wreg free
  4718                           
  4719                           ;stateMachine/touchScreenSM.c: 77:             break;
  4720  0032BA  0012               	return	
  4721  0032BC                     l7476:
  4722                           
  4723                           ; BSR set to: 0
  4724                           ;stateMachine/touchScreenSM.c: 80:             for (int i=0; i<8; i++)
  4725  0032BC  0E00               	movlw	0
  4726  0032BE  6FB3               	movwf	(touchScreenController@i+1)& (0+255),b
  4727  0032C0  0E00               	movlw	0
  4728  0032C2  6FB2               	movwf	touchScreenController@i& (0+255),b
  4729  0032C4                     l7482:
  4730                           
  4731                           ; BSR set to: 0
  4732                           ;stateMachine/touchScreenSM.c: 81:             {;stateMachine/touchScreenSM.c: 82:      
      +                                     if (theXF.timerList[i].ev == evSleep)
  4733  0032C4  51B2               	movf	touchScreenController@i& (0+255),w,b
  4734  0032C6  0D03               	mullw	3
  4735  0032C8  50F3               	movf	243,w,c
  4736  0032CA  0F62               	addlw	low (_theXF+2)
  4737  0032CC  6ED9               	movwf	fsr2l,c
  4738  0032CE  6ADA               	clrf	fsr2h,c
  4739  0032D0  0E03               	movlw	3
  4740  0032D2  18DE               	xorwf	postinc2,w,c
  4741  0032D4  A4D8               	btfss	status,2,c
  4742  0032D6  D005               	goto	l7486
  4743                           
  4744                           ; BSR set to: 0
  4745                           ;stateMachine/touchScreenSM.c: 83:                 {;stateMachine/touchScreenSM.c: 84:  
      +                                             XF_unscheduleTimer(i, 0);
  4746  0032D8  0E00               	movlw	0
  4747  0032DA  6E13               	movwf	XF_unscheduleTimer@inISR^0,c
  4748  0032DC  51B2               	movf	touchScreenController@i& (0+255),w,b
  4749  0032DE  EC7A  F02B         	call	_XF_unscheduleTimer
  4750  0032E2                     l7486:
  4751                           
  4752                           ;stateMachine/touchScreenSM.c: 86:             }
  4753  0032E2  0100               	movlb	0	; () banked
  4754  0032E4  4BB2               	infsnz	touchScreenController@i& (0+255),f,b
  4755  0032E6  2BB3               	incf	(touchScreenController@i+1)& (0+255),f,b
  4756                           
  4757                           ; BSR set to: 0
  4758  0032E8  BFB3               	btfsc	(touchScreenController@i+1)& (0+255),7,b
  4759  0032EA  D7EC               	goto	l7482
  4760  0032EC  51B3               	movf	(touchScreenController@i+1)& (0+255),w,b
  4761  0032EE  E104               	bnz	u5290
  4762  0032F0  0E08               	movlw	8
  4763  0032F2  5DB2               	subwf	touchScreenController@i& (0+255),w,b
  4764  0032F4  A0D8               	btfss	status,0,c
  4765  0032F6  D7E6               	goto	l7482
  4766  0032F8                     u5290:
  4767                           
  4768                           ; BSR set to: 0
  4769                           ;stateMachine/touchScreenSM.c: 90:             INT1IE=0;
  4770  0032F8  96F0               	bcf	4080,3,c	;volatile
  4771                           
  4772                           ; BSR set to: 0
  4773                           ;stateMachine/touchScreenSM.c: 91:             configMeasure(0);
  4774  0032FA  0E00               	movlw	0
  4775  0032FC  EC40  F02B         	call	_configMeasure
  4776  003300                     l538:
  4777  003300  B2C2               	btfsc	194,1,c	;volatile
  4778  003302  D7FE               	goto	l538
  4779                           
  4780                           ;stateMachine/touchScreenSM.c: 93:             uint16_t valueX;;stateMachine/touchScreen
      +                          SM.c: 94:             valueX=(ADRESH<<8)+ADRESL;
  4781  003304  50C4               	movf	196,w,c	;volatile
  4782  003306  0100               	movlb	0	; () banked
  4783  003308  6FAB               	movwf	(??_touchScreenController+1)& (0+255),b
  4784  00330A  6BAA               	clrf	??_touchScreenController& (0+255),b
  4785  00330C  50C3               	movf	195,w,c	;volatile
  4786  00330E  25AA               	addwf	??_touchScreenController& (0+255),w,b
  4787  003310  6FB4               	movwf	touchScreenController@valueX& (0+255),b
  4788  003312  0E00               	movlw	0
  4789  003314  21AB               	addwfc	(??_touchScreenController+1)& (0+255),w,b
  4790  003316  6FB5               	movwf	(touchScreenController@valueX+1)& (0+255),b
  4791                           
  4792                           ;stateMachine/touchScreenSM.c: 95:             if(valueX<=120)
  4793  003318  51B5               	movf	(touchScreenController@valueX+1)& (0+255),w,b
  4794  00331A  E108               	bnz	l7496
  4795  00331C  0E79               	movlw	121
  4796  00331E  5DB4               	subwf	touchScreenController@valueX& (0+255),w,b
  4797  003320  B0D8               	btfsc	status,0,c
  4798  003322  D004               	goto	l7496
  4799                           
  4800                           ; BSR set to: 0
  4801                           ;stateMachine/touchScreenSM.c: 96:             {;stateMachine/touchScreenSM.c: 97:      
      +                                     valueX=120;
  4802  003324  0E00               	movlw	0
  4803  003326  6FB5               	movwf	(touchScreenController@valueX+1)& (0+255),b
  4804  003328  0E78               	movlw	120
  4805  00332A  6FB4               	movwf	touchScreenController@valueX& (0+255),b
  4806  00332C                     l7496:
  4807                           
  4808                           ; BSR set to: 0
  4809                           ;stateMachine/touchScreenSM.c: 99:             valueX=(valueX-120)/2.35;
  4810  00332C  0E66               	movlw	102
  4811  00332E  6E24               	movwf	___fldiv@a^0,c
  4812  003330  0E66               	movlw	102
  4813  003332  6E25               	movwf	(___fldiv@a+1)^0,c
  4814  003334  0E16               	movlw	22
  4815  003336  6E26               	movwf	(___fldiv@a+2)^0,c
  4816  003338  0E40               	movlw	64
  4817  00333A  6E27               	movwf	(___fldiv@a+3)^0,c
  4818  00333C  0E88               	movlw	136
  4819  00333E  6FAA               	movwf	??_touchScreenController& (0+255),b
  4820  003340  0EFF               	movlw	255
  4821  003342  6FAB               	movwf	(??_touchScreenController+1)& (0+255),b
  4822  003344  C0B4  F0AC         	movff	touchScreenController@valueX,??_touchScreenController+2
  4823  003348  C0B5  F0AD         	movff	touchScreenController@valueX+1,??_touchScreenController+3
  4824  00334C  51AA               	movf	??_touchScreenController& (0+255),w,b
  4825  00334E  27AC               	addwf	(??_touchScreenController+2)& (0+255),f,b
  4826  003350  51AB               	movf	(??_touchScreenController+1)& (0+255),w,b
  4827  003352  23AD               	addwfc	(??_touchScreenController+3)& (0+255),f,b
  4828  003354  C0AC  F012         	movff	??_touchScreenController+2,___xxtofl@val
  4829  003358  C0AD  F013         	movff	??_touchScreenController+3,___xxtofl@val+1
  4830  00335C  6A14               	clrf	(___xxtofl@val+2)^0,c
  4831  00335E  6A15               	clrf	(___xxtofl@val+3)^0,c
  4832  003360  0E00               	movlw	0
  4833  003362  EC2C  F01C         	call	___xxtofl
  4834  003366  C012  F020         	movff	?___xxtofl,___fldiv@b
  4835  00336A  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  4836  00336E  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  4837  003372  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  4838  003376  ECEC  F015         	call	___fldiv	;wreg free
  4839  00337A  C020  F039         	movff	?___fldiv,___fltol@f1
  4840  00337E  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  4841  003382  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  4842  003386  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  4843  00338A  EC8C  F023         	call	___fltol	;wreg free
  4844  00338E  C039  F0B4         	movff	?___fltol,touchScreenController@valueX
  4845  003392  C03A  F0B5         	movff	?___fltol+1,touchScreenController@valueX+1
  4846                           
  4847                           ;stateMachine/touchScreenSM.c: 100:             valueX=240 -valueX;
  4848  003396  0100               	movlb	0	; () banked
  4849  003398  51B4               	movf	touchScreenController@valueX& (0+255),w,b
  4850  00339A  08F0               	sublw	240
  4851  00339C  6FB4               	movwf	touchScreenController@valueX& (0+255),b
  4852  00339E  51B5               	movf	(touchScreenController@valueX+1)& (0+255),w,b
  4853  0033A0  A0D8               	btfss	status,0,c
  4854  0033A2  2AE8               	incf	wreg,f,c
  4855  0033A4  0800               	sublw	0
  4856  0033A6  6FB5               	movwf	(touchScreenController@valueX+1)& (0+255),b
  4857                           
  4858                           ; BSR set to: 0
  4859                           ;stateMachine/touchScreenSM.c: 102:             configMeasure(1);
  4860  0033A8  0E01               	movlw	1
  4861  0033AA  EC40  F02B         	call	_configMeasure
  4862  0033AE                     l542:
  4863  0033AE  B2C2               	btfsc	194,1,c	;volatile
  4864  0033B0  D7FE               	goto	l542
  4865                           
  4866                           ;stateMachine/touchScreenSM.c: 104:             uint16_t valueY;;stateMachine/touchScree
      +                          nSM.c: 105:             valueY=(ADRESH<<8)+ADRESL;
  4867  0033B2  50C4               	movf	196,w,c	;volatile
  4868  0033B4  0100               	movlb	0	; () banked
  4869  0033B6  6FAB               	movwf	(??_touchScreenController+1)& (0+255),b
  4870  0033B8  6BAA               	clrf	??_touchScreenController& (0+255),b
  4871  0033BA  50C3               	movf	195,w,c	;volatile
  4872  0033BC  25AA               	addwf	??_touchScreenController& (0+255),w,b
  4873  0033BE  6FB0               	movwf	touchScreenController@valueY& (0+255),b
  4874  0033C0  0E00               	movlw	0
  4875  0033C2  21AB               	addwfc	(??_touchScreenController+1)& (0+255),w,b
  4876  0033C4  6FB1               	movwf	(touchScreenController@valueY+1)& (0+255),b
  4877                           
  4878                           ;stateMachine/touchScreenSM.c: 106:             if(valueY<=105)
  4879  0033C6  51B1               	movf	(touchScreenController@valueY+1)& (0+255),w,b
  4880  0033C8  E108               	bnz	l7506
  4881  0033CA  0E6A               	movlw	106
  4882  0033CC  5DB0               	subwf	touchScreenController@valueY& (0+255),w,b
  4883  0033CE  B0D8               	btfsc	status,0,c
  4884  0033D0  D004               	goto	l7506
  4885                           
  4886                           ; BSR set to: 0
  4887                           ;stateMachine/touchScreenSM.c: 107:             {;stateMachine/touchScreenSM.c: 108:    
      +                                       valueY=105;
  4888  0033D2  0E00               	movlw	0
  4889  0033D4  6FB1               	movwf	(touchScreenController@valueY+1)& (0+255),b
  4890  0033D6  0E69               	movlw	105
  4891  0033D8  6FB0               	movwf	touchScreenController@valueY& (0+255),b
  4892  0033DA                     l7506:
  4893                           
  4894                           ; BSR set to: 0
  4895                           ;stateMachine/touchScreenSM.c: 110:             valueY=(valueY-105)/2;
  4896  0033DA  0E97               	movlw	151
  4897  0033DC  6FAA               	movwf	??_touchScreenController& (0+255),b
  4898  0033DE  0EFF               	movlw	255
  4899  0033E0  6FAB               	movwf	(??_touchScreenController+1)& (0+255),b
  4900  0033E2  C0B0  F0AC         	movff	touchScreenController@valueY,??_touchScreenController+2
  4901  0033E6  C0B1  F0AD         	movff	touchScreenController@valueY+1,??_touchScreenController+3
  4902  0033EA  51AA               	movf	??_touchScreenController& (0+255),w,b
  4903  0033EC  27AC               	addwf	(??_touchScreenController+2)& (0+255),f,b
  4904  0033EE  51AB               	movf	(??_touchScreenController+1)& (0+255),w,b
  4905  0033F0  23AD               	addwfc	(??_touchScreenController+3)& (0+255),f,b
  4906  0033F2  90D8               	bcf	status,0,c
  4907  0033F4  31AD               	rrcf	(??_touchScreenController+3)& (0+255),w,b
  4908  0033F6  6FAE               	movwf	(??_touchScreenController+4)& (0+255),b
  4909  0033F8  31AC               	rrcf	(??_touchScreenController+2)& (0+255),w,b
  4910  0033FA  6FB0               	movwf	touchScreenController@valueY& (0+255),b
  4911  0033FC  C0AE  F0B1         	movff	??_touchScreenController+4,touchScreenController@valueY+1
  4912                           
  4913                           ; BSR set to: 0
  4914                           ;stateMachine/touchScreenSM.c: 111:             XF_scheduleTimer(4,evTimerPos,0);
  4915  003400  0E00               	movlw	0
  4916  003402  6E21               	movwf	(XF_scheduleTimer@tm+1)^0,c
  4917  003404  0E04               	movlw	4
  4918  003406  6E20               	movwf	XF_scheduleTimer@tm^0,c
  4919  003408  0E04               	movlw	4
  4920  00340A  6E22               	movwf	XF_scheduleTimer@ev^0,c
  4921  00340C  0E00               	movlw	0
  4922  00340E  6E23               	movwf	XF_scheduleTimer@inISR^0,c
  4923  003410  ECF3  F029         	call	_XF_scheduleTimer	;wreg free
  4924                           
  4925                           ;stateMachine/touchScreenSM.c: 113:             ADCON0=0b00101000;
  4926  003414  0E28               	movlw	40
  4927  003416  6EC2               	movwf	194,c	;volatile
  4928                           
  4929                           ;stateMachine/touchScreenSM.c: 114:             configTouch();
  4930  003418  EC8E  F02C         	call	_configTouch	;wreg free
  4931                           
  4932                           ;stateMachine/touchScreenSM.c: 116:             if(PORTBbits.RB1 == 0)
  4933  00341C  B281               	btfsc	129,1,c	;volatile
  4934  00341E  0012               	return	
  4935                           
  4936                           ;stateMachine/touchScreenSM.c: 117:             {;stateMachine/touchScreenSM.c: 118:    
      +                                       GameParameters_setX(g,valueX);
  4937  003420  C043  F012         	movff	touchScreenController@g,GameParameters_setX@s
  4938  003424  C044  F013         	movff	touchScreenController@g+1,GameParameters_setX@s+1
  4939  003428  C0B4  F014         	movff	touchScreenController@valueX,GameParameters_setX@value
  4940  00342C  C0B5  F015         	movff	touchScreenController@valueX+1,GameParameters_setX@value+1
  4941  003430  ECDE  F02C         	call	_GameParameters_setX	;wreg free
  4942                           
  4943                           ;stateMachine/touchScreenSM.c: 119:                 GameParameters_setY(g,valueY);
  4944  003434  C043  F012         	movff	touchScreenController@g,GameParameters_setY@s
  4945  003438  C044  F013         	movff	touchScreenController@g+1,GameParameters_setY@s+1
  4946  00343C  C0B0  F014         	movff	touchScreenController@valueY,GameParameters_setY@value
  4947  003440  C0B1  F015         	movff	touchScreenController@valueY+1,GameParameters_setY@value+1
  4948  003444  ECD3  F02C         	call	_GameParameters_setY	;wreg free
  4949  003448  0012               	return	
  4950  00344A                     l7520:
  4951  00344A  504D               	movf	_touchScreenState^0,w,c
  4952  00344C  0100               	movlb	0	; () banked
  4953  00344E  6FAA               	movwf	??_touchScreenController& (0+255),b
  4954  003450  6BAB               	clrf	(??_touchScreenController+1)& (0+255),b
  4955                           
  4956                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4957                           ; Switch size 1, requested type "simple"
  4958                           ; Number of cases is 1, Range of values is 0 to 0
  4959                           ; switch strategies available:
  4960                           ; Name         Instructions Cycles
  4961                           ; simple_byte            4     3 (average)
  4962                           ;	Chosen strategy is simple_byte
  4963  003452  51AB               	movf	(??_touchScreenController+1)& (0+255),w,b
  4964  003454  0A00               	xorlw	0	; case 0
  4965  003456  A4D8               	btfss	status,2,c
  4966  003458  0012               	return	
  4967                           
  4968                           ; BSR set to: 0
  4969                           ; Switch size 1, requested type "simple"
  4970                           ; Number of cases is 2, Range of values is 0 to 1
  4971                           ; switch strategies available:
  4972                           ; Name         Instructions Cycles
  4973                           ; simple_byte            7     4 (average)
  4974                           ;	Chosen strategy is simple_byte
  4975  00345A  51AA               	movf	??_touchScreenController& (0+255),w,b
  4976  00345C  0A00               	xorlw	0	; case 0
  4977  00345E  B4D8               	btfsc	status,2,c
  4978  003460  D71F               	goto	l532
  4979  003462  0A01               	xorlw	1	; case 1
  4980  003464  A4D8               	btfss	status,2,c
  4981  003466  0012               	return	
  4982  003468  D729               	goto	l7476
  4983  00346A                     __end_of_touchScreenController:
  4984                           	callstack 0
  4985                           
  4986 ;; *************** function _configMeasure *****************
  4987 ;; Defined at:
  4988 ;;		line 153 in file "stateMachine/touchScreenSM.c"
  4989 ;; Parameters:    Size  Location     Type
  4990 ;;  channel         1    wreg     _Bool 
  4991 ;; Auto vars:     Size  Location     Type
  4992 ;;  channel         1   17[COMRAM] _Bool 
  4993 ;; Return value:  Size  Location     Type
  4994 ;;                  1    wreg      void 
  4995 ;; Registers used:
  4996 ;;		wreg, status,2, status,0
  4997 ;; Tracked objects:
  4998 ;;		On entry : 3F/0
  4999 ;;		On exit  : 0/0
  5000 ;;		Unchanged: 0/0
  5001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5002 ;;      Params:         0       0       0       0       0       0       0
  5003 ;;      Locals:         1       0       0       0       0       0       0
  5004 ;;      Temps:          0       0       0       0       0       0       0
  5005 ;;      Totals:         1       0       0       0       0       0       0
  5006 ;;Total ram usage:        1 bytes
  5007 ;; Hardware stack levels used: 1
  5008 ;; Hardware stack levels required when called: 4
  5009 ;; This function calls:
  5010 ;;		Nothing
  5011 ;; This function is called by:
  5012 ;;		_touchScreenController
  5013 ;; This function uses a non-reentrant model
  5014 ;;
  5015                           
  5016                           	psect	text12
  5017  005680                     __ptext12:
  5018                           	callstack 0
  5019  005680                     _configMeasure:
  5020                           	callstack 23
  5021                           
  5022                           ;incstack = 0
  5023                           ;configMeasure@channel stored from wreg
  5024  005680  6E12               	movwf	configMeasure@channel^0,c
  5025                           
  5026                           ;stateMachine/touchScreenSM.c: 153: void configMeasure(_Bool channel);stateMachine/touch
      +                          ScreenSM.c: 154: {;stateMachine/touchScreenSM.c: 155:     if(channel==0)
  5027  005682  5012               	movf	configMeasure@channel^0,w,c
  5028  005684  A4D8               	btfss	status,2,c
  5029  005686  D00B               	goto	l7102
  5030                           
  5031                           ;stateMachine/touchScreenSM.c: 156:     {;stateMachine/touchScreenSM.c: 157:         ANS
      +                          B1=0;
  5032  005688  010F               	movlb	15	; () banked
  5033  00568A  9339               	bcf	57,1,b	;volatile
  5034                           
  5035                           ;stateMachine/touchScreenSM.c: 158:         TRISB1=0;
  5036  00568C  9293               	bcf	3987,1,c	;volatile
  5037                           
  5038                           ;stateMachine/touchScreenSM.c: 159:         LATB1=0;
  5039  00568E  928A               	bcf	3978,1,c	;volatile
  5040                           
  5041                           ;stateMachine/touchScreenSM.c: 160:         TRISB3=0;
  5042  005690  9693               	bcf	3987,3,c	;volatile
  5043                           
  5044                           ;stateMachine/touchScreenSM.c: 161:         LATB3=1;
  5045  005692  868A               	bsf	3978,3,c	;volatile
  5046                           
  5047                           ;stateMachine/touchScreenSM.c: 162:         TRISB4=1;
  5048  005694  8893               	bsf	3987,4,c	;volatile
  5049                           
  5050                           ;stateMachine/touchScreenSM.c: 163:         TRISB2=1;
  5051  005696  8493               	bsf	3987,2,c	;volatile
  5052                           
  5053                           ;stateMachine/touchScreenSM.c: 164:         ANSB2=1;
  5054  005698  8539               	bsf	57,2,b	;volatile
  5055                           
  5056                           ; BSR set to: 15
  5057                           ;stateMachine/touchScreenSM.c: 165:         ADCON0=0b00100011;
  5058  00569A  0E23               	movlw	35
  5059  00569C  6EC2               	movwf	194,c	;volatile
  5060  00569E                     l7102:
  5061                           
  5062                           ;stateMachine/touchScreenSM.c: 167:     if(channel==1)
  5063  00569E  0412               	decf	configMeasure@channel^0,w,c
  5064  0056A0  A4D8               	btfss	status,2,c
  5065  0056A2  0012               	return	
  5066                           
  5067                           ;stateMachine/touchScreenSM.c: 168:     {;stateMachine/touchScreenSM.c: 169:         ANS
      +                          B2=0;
  5068  0056A4  010F               	movlb	15	; () banked
  5069  0056A6  9539               	bcf	57,2,b	;volatile
  5070                           
  5071                           ;stateMachine/touchScreenSM.c: 170:         TRISB2=0;
  5072  0056A8  9493               	bcf	3987,2,c	;volatile
  5073                           
  5074                           ;stateMachine/touchScreenSM.c: 171:         LATB2=0;
  5075  0056AA  948A               	bcf	3978,2,c	;volatile
  5076                           
  5077                           ;stateMachine/touchScreenSM.c: 172:         TRISB4=0;
  5078  0056AC  9893               	bcf	3987,4,c	;volatile
  5079                           
  5080                           ;stateMachine/touchScreenSM.c: 173:         LATB4=1;
  5081  0056AE  888A               	bsf	3978,4,c	;volatile
  5082                           
  5083                           ;stateMachine/touchScreenSM.c: 174:         TRISB3=1;
  5084  0056B0  8693               	bsf	3987,3,c	;volatile
  5085                           
  5086                           ;stateMachine/touchScreenSM.c: 175:         TRISB1=1;
  5087  0056B2  8293               	bsf	3987,1,c	;volatile
  5088                           
  5089                           ;stateMachine/touchScreenSM.c: 176:         ANSB1=1;
  5090  0056B4  8339               	bsf	57,1,b	;volatile
  5091                           
  5092                           ; BSR set to: 15
  5093                           ;stateMachine/touchScreenSM.c: 177:         ADCON0=0b00101011;
  5094  0056B6  0E2B               	movlw	43
  5095  0056B8  6EC2               	movwf	194,c	;volatile
  5096  0056BA  0012               	return		;funcret
  5097  0056BC                     __end_of_configMeasure:
  5098                           	callstack 0
  5099                           
  5100 ;; *************** function ___xxtofl *****************
  5101 ;; Defined at:
  5102 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\xxtofl.c"
  5103 ;; Parameters:    Size  Location     Type
  5104 ;;  sign            1    wreg     unsigned char 
  5105 ;;  val             4   17[COMRAM] long 
  5106 ;; Auto vars:     Size  Location     Type
  5107 ;;  sign            1   25[COMRAM] unsigned char 
  5108 ;;  arg             4   27[COMRAM] unsigned long 
  5109 ;;  exp             1   26[COMRAM] unsigned char 
  5110 ;; Return value:  Size  Location     Type
  5111 ;;                  4   17[COMRAM] unsigned char 
  5112 ;; Registers used:
  5113 ;;		wreg, status,2, status,0
  5114 ;; Tracked objects:
  5115 ;;		On entry : 3F/0
  5116 ;;		On exit  : 0/0
  5117 ;;		Unchanged: 0/0
  5118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5119 ;;      Params:         4       0       0       0       0       0       0
  5120 ;;      Locals:         6       0       0       0       0       0       0
  5121 ;;      Temps:          4       0       0       0       0       0       0
  5122 ;;      Totals:        14       0       0       0       0       0       0
  5123 ;;Total ram usage:       14 bytes
  5124 ;; Hardware stack levels used: 1
  5125 ;; Hardware stack levels required when called: 4
  5126 ;; This function calls:
  5127 ;;		Nothing
  5128 ;; This function is called by:
  5129 ;;		_touchScreenController
  5130 ;; This function uses a non-reentrant model
  5131 ;;
  5132                           
  5133                           	psect	text13
  5134  003858                     __ptext13:
  5135                           	callstack 0
  5136  003858                     ___xxtofl:
  5137                           	callstack 23
  5138                           
  5139                           ;incstack = 0
  5140                           ;___xxtofl@sign stored from wreg
  5141  003858  6E1A               	movwf	___xxtofl@sign^0,c
  5142  00385A  501A               	movf	___xxtofl@sign^0,w,c
  5143  00385C  A4D8               	btfss	status,2,c
  5144  00385E  AE15               	btfss	(___xxtofl@val+3)^0,7,c
  5145  003860  D01A               	goto	l1529
  5146  003862  C012  F016         	movff	___xxtofl@val,??___xxtofl
  5147  003866  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  5148  00386A  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  5149  00386E  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  5150  003872  1E16               	comf	??___xxtofl^0,f,c
  5151  003874  1E17               	comf	(??___xxtofl+1)^0,f,c
  5152  003876  1E18               	comf	(??___xxtofl+2)^0,f,c
  5153  003878  1E19               	comf	(??___xxtofl+3)^0,f,c
  5154  00387A  2A16               	incf	??___xxtofl^0,f,c
  5155  00387C  0E00               	movlw	0
  5156  00387E  2217               	addwfc	(??___xxtofl+1)^0,f,c
  5157  003880  2218               	addwfc	(??___xxtofl+2)^0,f,c
  5158  003882  2219               	addwfc	(??___xxtofl+3)^0,f,c
  5159  003884  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  5160  003888  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  5161  00388C  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  5162  003890  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  5163  003894  D008               	goto	l7392
  5164  003896                     l1529:
  5165  003896  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  5166  00389A  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  5167  00389E  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  5168  0038A2  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  5169  0038A6                     l7392:
  5170  0038A6  5012               	movf	___xxtofl@val^0,w,c
  5171  0038A8  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  5172  0038AA  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  5173  0038AC  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  5174  0038AE  A4D8               	btfss	status,2,c
  5175  0038B0  D009               	goto	l7398
  5176  0038B2  0E00               	movlw	0
  5177  0038B4  6E12               	movwf	?___xxtofl^0,c
  5178  0038B6  0E00               	movlw	0
  5179  0038B8  6E13               	movwf	(?___xxtofl+1)^0,c
  5180  0038BA  0E00               	movlw	0
  5181  0038BC  6E14               	movwf	(?___xxtofl+2)^0,c
  5182  0038BE  0E00               	movlw	0
  5183  0038C0  6E15               	movwf	(?___xxtofl+3)^0,c
  5184  0038C2  0012               	return	
  5185  0038C4                     l7398:
  5186  0038C4  0E96               	movlw	150
  5187  0038C6  6E1B               	movwf	___xxtofl@exp^0,c
  5188  0038C8  D006               	goto	l7402
  5189  0038CA                     l7400:
  5190  0038CA  2A1B               	incf	___xxtofl@exp^0,f,c
  5191  0038CC  90D8               	bcf	status,0,c
  5192  0038CE  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  5193  0038D0  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  5194  0038D2  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  5195  0038D4  321C               	rrcf	___xxtofl@arg^0,f,c
  5196  0038D6                     l7402:
  5197  0038D6  0E00               	movlw	0
  5198  0038D8  141C               	andwf	___xxtofl@arg^0,w,c
  5199  0038DA  6E16               	movwf	??___xxtofl^0,c
  5200  0038DC  0E00               	movlw	0
  5201  0038DE  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  5202  0038E0  6E17               	movwf	(??___xxtofl+1)^0,c
  5203  0038E2  0E00               	movlw	0
  5204  0038E4  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  5205  0038E6  6E18               	movwf	(??___xxtofl+2)^0,c
  5206  0038E8  0EFE               	movlw	254
  5207  0038EA  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  5208  0038EC  6E19               	movwf	(??___xxtofl+3)^0,c
  5209  0038EE  5016               	movf	??___xxtofl^0,w,c
  5210  0038F0  1017               	iorwf	(??___xxtofl+1)^0,w,c
  5211  0038F2  1018               	iorwf	(??___xxtofl+2)^0,w,c
  5212  0038F4  1019               	iorwf	(??___xxtofl+3)^0,w,c
  5213  0038F6  B4D8               	btfsc	status,2,c
  5214  0038F8  D00D               	goto	l1536
  5215  0038FA  D7E7               	goto	l7400
  5216  0038FC                     l7404:
  5217  0038FC  2A1B               	incf	___xxtofl@exp^0,f,c
  5218  0038FE  0E01               	movlw	1
  5219  003900  261C               	addwf	___xxtofl@arg^0,f,c
  5220  003902  0E00               	movlw	0
  5221  003904  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  5222  003906  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  5223  003908  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  5224  00390A  90D8               	bcf	status,0,c
  5225  00390C  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  5226  00390E  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  5227  003910  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  5228  003912  321C               	rrcf	___xxtofl@arg^0,f,c
  5229  003914                     l1536:
  5230  003914  0E00               	movlw	0
  5231  003916  141C               	andwf	___xxtofl@arg^0,w,c
  5232  003918  6E16               	movwf	??___xxtofl^0,c
  5233  00391A  0E00               	movlw	0
  5234  00391C  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  5235  00391E  6E17               	movwf	(??___xxtofl+1)^0,c
  5236  003920  0E00               	movlw	0
  5237  003922  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  5238  003924  6E18               	movwf	(??___xxtofl+2)^0,c
  5239  003926  0EFF               	movlw	255
  5240  003928  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  5241  00392A  6E19               	movwf	(??___xxtofl+3)^0,c
  5242  00392C  5016               	movf	??___xxtofl^0,w,c
  5243  00392E  1017               	iorwf	(??___xxtofl+1)^0,w,c
  5244  003930  1018               	iorwf	(??___xxtofl+2)^0,w,c
  5245  003932  1019               	iorwf	(??___xxtofl+3)^0,w,c
  5246  003934  B4D8               	btfsc	status,2,c
  5247  003936  D007               	goto	l7412
  5248  003938  D7E1               	goto	l7404
  5249  00393A                     l7410:
  5250  00393A  061B               	decf	___xxtofl@exp^0,f,c
  5251  00393C  90D8               	bcf	status,0,c
  5252  00393E  361C               	rlcf	___xxtofl@arg^0,f,c
  5253  003940  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  5254  003942  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  5255  003944  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  5256  003946                     l7412:
  5257  003946  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  5258  003948  D003               	goto	u5240
  5259  00394A  0E02               	movlw	2
  5260  00394C  601B               	cpfslt	___xxtofl@exp^0,c
  5261  00394E  D7F5               	goto	l7410
  5262  003950                     u5240:
  5263  003950  A01B               	btfss	___xxtofl@exp^0,0,c
  5264  003952  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  5265  003954  90D8               	bcf	status,0,c
  5266  003956  321B               	rrcf	___xxtofl@exp^0,f,c
  5267  003958  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  5268  00395C  6A17               	clrf	(??___xxtofl+1)^0,c
  5269  00395E  6A18               	clrf	(??___xxtofl+2)^0,c
  5270  003960  6A19               	clrf	(??___xxtofl+3)^0,c
  5271  003962  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  5272  003966  6A18               	clrf	(??___xxtofl+2)^0,c
  5273  003968  6A17               	clrf	(??___xxtofl+1)^0,c
  5274  00396A  6A16               	clrf	??___xxtofl^0,c
  5275  00396C  5016               	movf	??___xxtofl^0,w,c
  5276  00396E  121C               	iorwf	___xxtofl@arg^0,f,c
  5277  003970  5017               	movf	(??___xxtofl+1)^0,w,c
  5278  003972  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  5279  003974  5018               	movf	(??___xxtofl+2)^0,w,c
  5280  003976  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  5281  003978  5019               	movf	(??___xxtofl+3)^0,w,c
  5282  00397A  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  5283  00397C  501A               	movf	___xxtofl@sign^0,w,c
  5284  00397E  A4D8               	btfss	status,2,c
  5285  003980  AE15               	btfss	(___xxtofl@val+3)^0,7,c
  5286  003982  D001               	goto	l7428
  5287  003984  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  5288  003986                     l7428:
  5289  003986  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  5290  00398A  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  5291  00398E  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  5292  003992  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  5293  003996  0012               	return		;funcret
  5294  003998                     __end_of___xxtofl:
  5295                           	callstack 0
  5296                           
  5297 ;; *************** function ___fltol *****************
  5298 ;; Defined at:
  5299 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\fltol.c"
  5300 ;; Parameters:    Size  Location     Type
  5301 ;;  f1              4   56[COMRAM] unsigned char 
  5302 ;; Auto vars:     Size  Location     Type
  5303 ;;  exp1            1   65[COMRAM] unsigned char 
  5304 ;;  sign1           1   64[COMRAM] unsigned char 
  5305 ;; Return value:  Size  Location     Type
  5306 ;;                  4   56[COMRAM] long 
  5307 ;; Registers used:
  5308 ;;		wreg, status,2, status,0
  5309 ;; Tracked objects:
  5310 ;;		On entry : 0/0
  5311 ;;		On exit  : 0/0
  5312 ;;		Unchanged: 0/0
  5313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5314 ;;      Params:         4       0       0       0       0       0       0
  5315 ;;      Locals:         2       0       0       0       0       0       0
  5316 ;;      Temps:          4       0       0       0       0       0       0
  5317 ;;      Totals:        10       0       0       0       0       0       0
  5318 ;;Total ram usage:       10 bytes
  5319 ;; Hardware stack levels used: 1
  5320 ;; Hardware stack levels required when called: 4
  5321 ;; This function calls:
  5322 ;;		Nothing
  5323 ;; This function is called by:
  5324 ;;		_touchScreenController
  5325 ;; This function uses a non-reentrant model
  5326 ;;
  5327                           
  5328                           	psect	text14
  5329  004718                     __ptext14:
  5330                           	callstack 0
  5331  004718                     ___fltol:
  5332                           	callstack 23
  5333                           
  5334                           ;incstack = 0
  5335  004718  343B               	rlcf	(___fltol@f1+2)^0,w,c
  5336  00471A  343C               	rlcf	(___fltol@f1+3)^0,w,c
  5337  00471C  6E42               	movwf	___fltol@exp1^0,c
  5338  00471E  5042               	movf	___fltol@exp1^0,w,c
  5339  004720  A4D8               	btfss	status,2,c
  5340  004722  D009               	goto	l7348
  5341  004724                     u5110:
  5342  004724  0E00               	movlw	0
  5343  004726  6E39               	movwf	?___fltol^0,c
  5344  004728  0E00               	movlw	0
  5345  00472A  6E3A               	movwf	(?___fltol+1)^0,c
  5346  00472C  0E00               	movlw	0
  5347  00472E  6E3B               	movwf	(?___fltol+2)^0,c
  5348  004730  0E00               	movlw	0
  5349  004732  6E3C               	movwf	(?___fltol+3)^0,c
  5350  004734  0012               	return	
  5351  004736                     l7348:
  5352  004736  C039  F03D         	movff	___fltol@f1,??___fltol
  5353  00473A  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  5354  00473E  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  5355  004742  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  5356  004746  0E20               	movlw	32
  5357  004748  D005               	goto	u5120
  5358  00474A                     u5125:
  5359  00474A  90D8               	bcf	status,0,c
  5360  00474C  3240               	rrcf	(??___fltol+3)^0,f,c
  5361  00474E  323F               	rrcf	(??___fltol+2)^0,f,c
  5362  004750  323E               	rrcf	(??___fltol+1)^0,f,c
  5363  004752  323D               	rrcf	??___fltol^0,f,c
  5364  004754                     u5120:
  5365  004754  2EE8               	decfsz	wreg,f,c
  5366  004756  D7F9               	goto	u5125
  5367  004758  503D               	movf	??___fltol^0,w,c
  5368  00475A  6E41               	movwf	___fltol@sign1^0,c
  5369  00475C  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  5370  00475E  0EFF               	movlw	255
  5371  004760  1639               	andwf	___fltol@f1^0,f,c
  5372  004762  0EFF               	movlw	255
  5373  004764  163A               	andwf	(___fltol@f1+1)^0,f,c
  5374  004766  0EFF               	movlw	255
  5375  004768  163B               	andwf	(___fltol@f1+2)^0,f,c
  5376  00476A  0E00               	movlw	0
  5377  00476C  163C               	andwf	(___fltol@f1+3)^0,f,c
  5378  00476E  0E96               	movlw	150
  5379  004770  5E42               	subwf	___fltol@exp1^0,f,c
  5380  004772  AE42               	btfss	___fltol@exp1^0,7,c
  5381  004774  D00D               	goto	l7368
  5382  004776  5042               	movf	___fltol@exp1^0,w,c
  5383  004778  0A80               	xorlw	128
  5384  00477A  0F97               	addlw	151
  5385  00477C  A0D8               	btfss	status,0,c
  5386  00477E  D7D2               	goto	u5110
  5387  004780                     l7364:
  5388  004780  90D8               	bcf	status,0,c
  5389  004782  323C               	rrcf	(___fltol@f1+3)^0,f,c
  5390  004784  323B               	rrcf	(___fltol@f1+2)^0,f,c
  5391  004786  323A               	rrcf	(___fltol@f1+1)^0,f,c
  5392  004788  3239               	rrcf	___fltol@f1^0,f,c
  5393  00478A  3E42               	incfsz	___fltol@exp1^0,f,c
  5394  00478C  D7F9               	goto	l7364
  5395  00478E  D00D               	goto	u5160
  5396  004790                     l7368:
  5397  004790  0E1F               	movlw	31
  5398  004792  6442               	cpfsgt	___fltol@exp1^0,c
  5399  004794  D007               	goto	l7376
  5400  004796  D7C6               	goto	u5110
  5401  004798                     l7374:
  5402  004798  90D8               	bcf	status,0,c
  5403  00479A  3639               	rlcf	___fltol@f1^0,f,c
  5404  00479C  363A               	rlcf	(___fltol@f1+1)^0,f,c
  5405  00479E  363B               	rlcf	(___fltol@f1+2)^0,f,c
  5406  0047A0  363C               	rlcf	(___fltol@f1+3)^0,f,c
  5407  0047A2  0642               	decf	___fltol@exp1^0,f,c
  5408  0047A4                     l7376:
  5409  0047A4  5042               	movf	___fltol@exp1^0,w,c
  5410  0047A6  A4D8               	btfss	status,2,c
  5411  0047A8  D7F7               	goto	l7374
  5412  0047AA                     u5160:
  5413  0047AA  5041               	movf	___fltol@sign1^0,w,c
  5414  0047AC  B4D8               	btfsc	status,2,c
  5415  0047AE  D008               	goto	l7382
  5416  0047B0  1E3C               	comf	(___fltol@f1+3)^0,f,c
  5417  0047B2  1E3B               	comf	(___fltol@f1+2)^0,f,c
  5418  0047B4  1E3A               	comf	(___fltol@f1+1)^0,f,c
  5419  0047B6  6C39               	negf	___fltol@f1^0,c
  5420  0047B8  0E00               	movlw	0
  5421  0047BA  223A               	addwfc	(___fltol@f1+1)^0,f,c
  5422  0047BC  223B               	addwfc	(___fltol@f1+2)^0,f,c
  5423  0047BE  223C               	addwfc	(___fltol@f1+3)^0,f,c
  5424  0047C0                     l7382:
  5425  0047C0  C039  F039         	movff	___fltol@f1,?___fltol
  5426  0047C4  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  5427  0047C8  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  5428  0047CC  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  5429  0047D0  0012               	return		;funcret
  5430  0047D2                     __end_of___fltol:
  5431                           	callstack 0
  5432                           
  5433 ;; *************** function ___fldiv *****************
  5434 ;; Defined at:
  5435 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\sprcdiv.c"
  5436 ;; Parameters:    Size  Location     Type
  5437 ;;  b               4   31[COMRAM] long 
  5438 ;;  a               4   35[COMRAM] long 
  5439 ;; Auto vars:     Size  Location     Type
  5440 ;;  grs             4   50[COMRAM] unsigned long 
  5441 ;;  rem             4   43[COMRAM] unsigned long 
  5442 ;;  new_exp         2   48[COMRAM] short 
  5443 ;;  aexp            1   55[COMRAM] unsigned char 
  5444 ;;  bexp            1   54[COMRAM] unsigned char 
  5445 ;;  sign            1   47[COMRAM] unsigned char 
  5446 ;; Return value:  Size  Location     Type
  5447 ;;                  4   31[COMRAM] unsigned char 
  5448 ;; Registers used:
  5449 ;;		wreg, status,2, status,0
  5450 ;; Tracked objects:
  5451 ;;		On entry : 0/0
  5452 ;;		On exit  : 0/0
  5453 ;;		Unchanged: 0/0
  5454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5455 ;;      Params:         8       0       0       0       0       0       0
  5456 ;;      Locals:        13       0       0       0       0       0       0
  5457 ;;      Temps:          4       0       0       0       0       0       0
  5458 ;;      Totals:        25       0       0       0       0       0       0
  5459 ;;Total ram usage:       25 bytes
  5460 ;; Hardware stack levels used: 1
  5461 ;; Hardware stack levels required when called: 4
  5462 ;; This function calls:
  5463 ;;		Nothing
  5464 ;; This function is called by:
  5465 ;;		_touchScreenController
  5466 ;; This function uses a non-reentrant model
  5467 ;;
  5468                           
  5469                           	psect	text15
  5470  002BD8                     __ptext15:
  5471                           	callstack 0
  5472  002BD8                     ___fldiv:
  5473                           	callstack 23
  5474                           
  5475                           ;incstack = 0
  5476  002BD8  5023               	movf	(___fldiv@b+3)^0,w,c
  5477  002BDA  0B80               	andlw	128
  5478  002BDC  6E30               	movwf	___fldiv@sign^0,c
  5479  002BDE  5023               	movf	(___fldiv@b+3)^0,w,c
  5480  002BE0  2423               	addwf	(___fldiv@b+3)^0,w,c
  5481  002BE2  6E37               	movwf	___fldiv@bexp^0,c
  5482  002BE4  BE22               	btfsc	(___fldiv@b+2)^0,7,c
  5483  002BE6  8037               	bsf	___fldiv@bexp^0,0,c
  5484  002BE8  5037               	movf	___fldiv@bexp^0,w,c
  5485  002BEA  B4D8               	btfsc	status,2,c
  5486  002BEC  D00D               	goto	l7220
  5487  002BEE  2837               	incf	___fldiv@bexp^0,w,c
  5488  002BF0  A4D8               	btfss	status,2,c
  5489  002BF2  D008               	goto	l7216
  5490  002BF4  0E00               	movlw	0
  5491  002BF6  6E20               	movwf	___fldiv@b^0,c
  5492  002BF8  0E00               	movlw	0
  5493  002BFA  6E21               	movwf	(___fldiv@b+1)^0,c
  5494  002BFC  0E00               	movlw	0
  5495  002BFE  6E22               	movwf	(___fldiv@b+2)^0,c
  5496  002C00  0E00               	movlw	0
  5497  002C02  6E23               	movwf	(___fldiv@b+3)^0,c
  5498  002C04                     l7216:
  5499  002C04  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5500  002C06  D006               	goto	L1
  5501  002C08                     l7220:
  5502  002C08  0E00               	movlw	0
  5503  002C0A  6E20               	movwf	___fldiv@b^0,c
  5504  002C0C  0E00               	movlw	0
  5505  002C0E  6E21               	movwf	(___fldiv@b+1)^0,c
  5506  002C10  0E00               	movlw	0
  5507  002C12  6E22               	movwf	(___fldiv@b+2)^0,c
  5508  002C14                     L1:
  5509  002C14  0E00               	movlw	0
  5510  002C16  6E23               	movwf	(___fldiv@b+3)^0,c
  5511  002C18  5027               	movf	(___fldiv@a+3)^0,w,c
  5512  002C1A  0B80               	andlw	128
  5513  002C1C  1A30               	xorwf	___fldiv@sign^0,f,c
  5514  002C1E  5027               	movf	(___fldiv@a+3)^0,w,c
  5515  002C20  2427               	addwf	(___fldiv@a+3)^0,w,c
  5516  002C22  6E38               	movwf	___fldiv@aexp^0,c
  5517  002C24  BE26               	btfsc	(___fldiv@a+2)^0,7,c
  5518  002C26  8038               	bsf	___fldiv@aexp^0,0,c
  5519  002C28  5038               	movf	___fldiv@aexp^0,w,c
  5520  002C2A  B4D8               	btfsc	status,2,c
  5521  002C2C  D00D               	goto	l7240
  5522  002C2E  2838               	incf	___fldiv@aexp^0,w,c
  5523  002C30  A4D8               	btfss	status,2,c
  5524  002C32  D008               	goto	l7236
  5525  002C34  0E00               	movlw	0
  5526  002C36  6E24               	movwf	___fldiv@a^0,c
  5527  002C38  0E00               	movlw	0
  5528  002C3A  6E25               	movwf	(___fldiv@a+1)^0,c
  5529  002C3C  0E00               	movlw	0
  5530  002C3E  6E26               	movwf	(___fldiv@a+2)^0,c
  5531  002C40  0E00               	movlw	0
  5532  002C42  6E27               	movwf	(___fldiv@a+3)^0,c
  5533  002C44                     l7236:
  5534  002C44  8E26               	bsf	(___fldiv@a+2)^0,7,c
  5535  002C46  D006               	goto	L2
  5536  002C48                     l7240:
  5537  002C48  0E00               	movlw	0
  5538  002C4A  6E24               	movwf	___fldiv@a^0,c
  5539  002C4C  0E00               	movlw	0
  5540  002C4E  6E25               	movwf	(___fldiv@a+1)^0,c
  5541  002C50  0E00               	movlw	0
  5542  002C52  6E26               	movwf	(___fldiv@a+2)^0,c
  5543  002C54                     L2:
  5544  002C54  0E00               	movlw	0
  5545  002C56  6E27               	movwf	(___fldiv@a+3)^0,c
  5546  002C58  5024               	movf	___fldiv@a^0,w,c
  5547  002C5A  1025               	iorwf	(___fldiv@a+1)^0,w,c
  5548  002C5C  1026               	iorwf	(___fldiv@a+2)^0,w,c
  5549  002C5E  1027               	iorwf	(___fldiv@a+3)^0,w,c
  5550  002C60  A4D8               	btfss	status,2,c
  5551  002C62  D017               	goto	l7254
  5552  002C64  0E00               	movlw	0
  5553  002C66  6E20               	movwf	___fldiv@b^0,c
  5554  002C68  0E00               	movlw	0
  5555  002C6A  6E21               	movwf	(___fldiv@b+1)^0,c
  5556  002C6C  0E00               	movlw	0
  5557  002C6E  6E22               	movwf	(___fldiv@b+2)^0,c
  5558  002C70  0E00               	movlw	0
  5559  002C72  6E23               	movwf	(___fldiv@b+3)^0,c
  5560  002C74  0E80               	movlw	128
  5561  002C76  1222               	iorwf	(___fldiv@b+2)^0,f,c
  5562  002C78  0E7F               	movlw	127
  5563  002C7A  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5564  002C7C                     l7248:
  5565  002C7C  5030               	movf	___fldiv@sign^0,w,c
  5566  002C7E  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5567  002C80  C020  F020         	movff	___fldiv@b,?___fldiv
  5568  002C84  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  5569  002C88  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  5570  002C8C  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  5571  002C90  0012               	return	
  5572  002C92                     l7254:
  5573  002C92  5037               	movf	___fldiv@bexp^0,w,c
  5574  002C94  A4D8               	btfss	status,2,c
  5575  002C96  D009               	goto	l7262
  5576  002C98  0E00               	movlw	0
  5577  002C9A  6E20               	movwf	?___fldiv^0,c
  5578  002C9C  0E00               	movlw	0
  5579  002C9E  6E21               	movwf	(?___fldiv+1)^0,c
  5580  002CA0  0E00               	movlw	0
  5581  002CA2  6E22               	movwf	(?___fldiv+2)^0,c
  5582  002CA4  0E00               	movlw	0
  5583  002CA6  6E23               	movwf	(?___fldiv+3)^0,c
  5584  002CA8  0012               	return	
  5585  002CAA                     l7262:
  5586  002CAA  5038               	movf	___fldiv@aexp^0,w,c
  5587  002CAC  C037  F028         	movff	___fldiv@bexp,??___fldiv
  5588  002CB0  6A29               	clrf	(??___fldiv+1)^0,c
  5589  002CB2  5E28               	subwf	??___fldiv^0,f,c
  5590  002CB4  0E00               	movlw	0
  5591  002CB6  5A29               	subwfb	(??___fldiv+1)^0,f,c
  5592  002CB8  0E7F               	movlw	127
  5593  002CBA  2428               	addwf	??___fldiv^0,w,c
  5594  002CBC  6E31               	movwf	___fldiv@new_exp^0,c
  5595  002CBE  0E00               	movlw	0
  5596  002CC0  2029               	addwfc	(??___fldiv+1)^0,w,c
  5597  002CC2  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5598  002CC4  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  5599  002CC8  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  5600  002CCC  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  5601  002CD0  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  5602  002CD4  0E00               	movlw	0
  5603  002CD6  6E20               	movwf	___fldiv@b^0,c
  5604  002CD8  0E00               	movlw	0
  5605  002CDA  6E21               	movwf	(___fldiv@b+1)^0,c
  5606  002CDC  0E00               	movlw	0
  5607  002CDE  6E22               	movwf	(___fldiv@b+2)^0,c
  5608  002CE0  0E00               	movlw	0
  5609  002CE2  6E23               	movwf	(___fldiv@b+3)^0,c
  5610  002CE4  0E00               	movlw	0
  5611  002CE6  6E33               	movwf	___fldiv@grs^0,c
  5612  002CE8  0E00               	movlw	0
  5613  002CEA  6E34               	movwf	(___fldiv@grs+1)^0,c
  5614  002CEC  0E00               	movlw	0
  5615  002CEE  6E35               	movwf	(___fldiv@grs+2)^0,c
  5616  002CF0  0E00               	movlw	0
  5617  002CF2  6E36               	movwf	(___fldiv@grs+3)^0,c
  5618  002CF4  0E00               	movlw	0
  5619  002CF6  6E38               	movwf	___fldiv@aexp^0,c
  5620  002CF8  D028               	goto	l1458
  5621  002CFA                     l7272:
  5622  002CFA  5038               	movf	___fldiv@aexp^0,w,c
  5623  002CFC  B4D8               	btfsc	status,2,c
  5624  002CFE  D011               	goto	l7280
  5625  002D00  90D8               	bcf	status,0,c
  5626  002D02  362C               	rlcf	___fldiv@rem^0,f,c
  5627  002D04  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  5628  002D06  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  5629  002D08  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  5630  002D0A  90D8               	bcf	status,0,c
  5631  002D0C  3620               	rlcf	___fldiv@b^0,f,c
  5632  002D0E  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5633  002D10  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5634  002D12  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5635  002D14  BE36               	btfsc	(___fldiv@grs+3)^0,7,c
  5636  002D16  8020               	bsf	___fldiv@b^0,0,c
  5637  002D18  90D8               	bcf	status,0,c
  5638  002D1A  3633               	rlcf	___fldiv@grs^0,f,c
  5639  002D1C  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5640  002D1E  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5641  002D20  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5642  002D22                     l7280:
  5643  002D22  5024               	movf	___fldiv@a^0,w,c
  5644  002D24  5C2C               	subwf	___fldiv@rem^0,w,c
  5645  002D26  5025               	movf	(___fldiv@a+1)^0,w,c
  5646  002D28  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  5647  002D2A  5026               	movf	(___fldiv@a+2)^0,w,c
  5648  002D2C  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  5649  002D2E  5027               	movf	(___fldiv@a+3)^0,w,c
  5650  002D30  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  5651  002D32  A0D8               	btfss	status,0,c
  5652  002D34  D009               	goto	l7286
  5653  002D36  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  5654  002D38  5024               	movf	___fldiv@a^0,w,c
  5655  002D3A  5E2C               	subwf	___fldiv@rem^0,f,c
  5656  002D3C  5025               	movf	(___fldiv@a+1)^0,w,c
  5657  002D3E  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  5658  002D40  5026               	movf	(___fldiv@a+2)^0,w,c
  5659  002D42  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  5660  002D44  5027               	movf	(___fldiv@a+3)^0,w,c
  5661  002D46  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  5662  002D48                     l7286:
  5663  002D48  2A38               	incf	___fldiv@aexp^0,f,c
  5664  002D4A                     l1458:
  5665  002D4A  0E19               	movlw	25
  5666  002D4C  6438               	cpfsgt	___fldiv@aexp^0,c
  5667  002D4E  D7D5               	goto	l7272
  5668  002D50  502C               	movf	___fldiv@rem^0,w,c
  5669  002D52  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  5670  002D54  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  5671  002D56  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  5672  002D58  B4D8               	btfsc	status,2,c
  5673  002D5A  D011               	goto	l7298
  5674  002D5C  8033               	bsf	___fldiv@grs^0,0,c
  5675  002D5E  D00F               	goto	l7298
  5676  002D60                     l7292:
  5677  002D60  90D8               	bcf	status,0,c
  5678  002D62  3620               	rlcf	___fldiv@b^0,f,c
  5679  002D64  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5680  002D66  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5681  002D68  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5682  002D6A  BE36               	btfsc	(___fldiv@grs+3)^0,7,c
  5683  002D6C  8020               	bsf	___fldiv@b^0,0,c
  5684  002D6E  90D8               	bcf	status,0,c
  5685  002D70  3633               	rlcf	___fldiv@grs^0,f,c
  5686  002D72  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5687  002D74  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5688  002D76  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5689  002D78  0631               	decf	___fldiv@new_exp^0,f,c
  5690  002D7A  A0D8               	btfss	status,0,c
  5691  002D7C  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  5692  002D7E                     l7298:
  5693  002D7E  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5694  002D80  D7EF               	goto	l7292
  5695  002D82  0E00               	movlw	0
  5696  002D84  6E38               	movwf	___fldiv@aexp^0,c
  5697  002D86  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5698  002D88  D017               	goto	l1469
  5699  002D8A  0EFF               	movlw	255
  5700  002D8C  1433               	andwf	___fldiv@grs^0,w,c
  5701  002D8E  6E28               	movwf	??___fldiv^0,c
  5702  002D90  0EFF               	movlw	255
  5703  002D92  1434               	andwf	(___fldiv@grs+1)^0,w,c
  5704  002D94  6E29               	movwf	(??___fldiv+1)^0,c
  5705  002D96  0EFF               	movlw	255
  5706  002D98  1435               	andwf	(___fldiv@grs+2)^0,w,c
  5707  002D9A  6E2A               	movwf	(??___fldiv+2)^0,c
  5708  002D9C  0E7F               	movlw	127
  5709  002D9E  1436               	andwf	(___fldiv@grs+3)^0,w,c
  5710  002DA0  6E2B               	movwf	(??___fldiv+3)^0,c
  5711  002DA2  5028               	movf	??___fldiv^0,w,c
  5712  002DA4  1029               	iorwf	(??___fldiv+1)^0,w,c
  5713  002DA6  102A               	iorwf	(??___fldiv+2)^0,w,c
  5714  002DA8  102B               	iorwf	(??___fldiv+3)^0,w,c
  5715  002DAA  B4D8               	btfsc	status,2,c
  5716  002DAC  D003               	goto	l1470
  5717  002DAE                     u5040:
  5718  002DAE  0E01               	movlw	1
  5719  002DB0  6E38               	movwf	___fldiv@aexp^0,c
  5720  002DB2  D002               	goto	l1469
  5721  002DB4                     l1470:
  5722  002DB4  B020               	btfsc	___fldiv@b^0,0,c
  5723  002DB6  D7FB               	goto	u5040
  5724  002DB8                     l1469:
  5725  002DB8  5038               	movf	___fldiv@aexp^0,w,c
  5726  002DBA  B4D8               	btfsc	status,2,c
  5727  002DBC  D01F               	goto	l7318
  5728  002DBE  0E01               	movlw	1
  5729  002DC0  2620               	addwf	___fldiv@b^0,f,c
  5730  002DC2  0E00               	movlw	0
  5731  002DC4  2221               	addwfc	(___fldiv@b+1)^0,f,c
  5732  002DC6  2222               	addwfc	(___fldiv@b+2)^0,f,c
  5733  002DC8  2223               	addwfc	(___fldiv@b+3)^0,f,c
  5734  002DCA  A023               	btfss	(___fldiv@b+3)^0,0,c
  5735  002DCC  D017               	goto	l7318
  5736  002DCE  C020  F028         	movff	___fldiv@b,??___fldiv
  5737  002DD2  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  5738  002DD6  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  5739  002DDA  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  5740  002DDE  342B               	rlcf	(??___fldiv+3)^0,w,c
  5741  002DE0  322B               	rrcf	(??___fldiv+3)^0,f,c
  5742  002DE2  322A               	rrcf	(??___fldiv+2)^0,f,c
  5743  002DE4  3229               	rrcf	(??___fldiv+1)^0,f,c
  5744  002DE6  3228               	rrcf	??___fldiv^0,f,c
  5745  002DE8  C028  F020         	movff	??___fldiv,___fldiv@b
  5746  002DEC  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  5747  002DF0  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  5748  002DF4  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  5749  002DF8  4A31               	infsnz	___fldiv@new_exp^0,f,c
  5750  002DFA  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  5751  002DFC                     l7318:
  5752  002DFC  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5753  002DFE  D010               	goto	l7322
  5754  002E00  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5755  002E02  E103               	bnz	u5080
  5756  002E04  2831               	incf	___fldiv@new_exp^0,w,c
  5757  002E06  A0D8               	btfss	status,0,c
  5758  002E08  D00B               	goto	l7322
  5759  002E0A                     u5080:
  5760  002E0A  0E00               	movlw	0
  5761  002E0C  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5762  002E0E  6831               	setf	___fldiv@new_exp^0,c
  5763  002E10  0E00               	movlw	0
  5764  002E12  6E20               	movwf	___fldiv@b^0,c
  5765  002E14  0E00               	movlw	0
  5766  002E16  6E21               	movwf	(___fldiv@b+1)^0,c
  5767  002E18  0E00               	movlw	0
  5768  002E1A  6E22               	movwf	(___fldiv@b+2)^0,c
  5769  002E1C  0E00               	movlw	0
  5770  002E1E  6E23               	movwf	(___fldiv@b+3)^0,c
  5771  002E20                     l7322:
  5772  002E20  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5773  002E22  D005               	goto	u5090
  5774  002E24  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5775  002E26  E111               	bnz	l7326
  5776  002E28  0431               	decf	___fldiv@new_exp^0,w,c
  5777  002E2A  B0D8               	btfsc	status,0,c
  5778  002E2C  D00E               	goto	l7326
  5779  002E2E                     u5090:
  5780  002E2E  0E00               	movlw	0
  5781  002E30  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5782  002E32  0E00               	movlw	0
  5783  002E34  6E31               	movwf	___fldiv@new_exp^0,c
  5784  002E36  0E00               	movlw	0
  5785  002E38  6E20               	movwf	___fldiv@b^0,c
  5786  002E3A  0E00               	movlw	0
  5787  002E3C  6E21               	movwf	(___fldiv@b+1)^0,c
  5788  002E3E  0E00               	movlw	0
  5789  002E40  6E22               	movwf	(___fldiv@b+2)^0,c
  5790  002E42  0E00               	movlw	0
  5791  002E44  6E23               	movwf	(___fldiv@b+3)^0,c
  5792  002E46  0E00               	movlw	0
  5793  002E48  6E30               	movwf	___fldiv@sign^0,c
  5794  002E4A                     l7326:
  5795  002E4A  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5796  002E4E  A037               	btfss	___fldiv@bexp^0,0,c
  5797  002E50  D002               	goto	l7332
  5798  002E52  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5799  002E54  D001               	goto	l7334
  5800  002E56                     l7332:
  5801  002E56  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5802  002E58                     l7334:
  5803  002E58  90D8               	bcf	status,0,c
  5804  002E5A  3037               	rrcf	___fldiv@bexp^0,w,c
  5805  002E5C  6E23               	movwf	(___fldiv@b+3)^0,c
  5806  002E5E  D70E               	goto	l7248
  5807  002E60                     __end_of___fldiv:
  5808                           	callstack 0
  5809                           
  5810 ;; *************** function _XF_unscheduleTimer *****************
  5811 ;; Defined at:
  5812 ;;		line 125 in file "xf/xf.c"
  5813 ;; Parameters:    Size  Location     Type
  5814 ;;  id              1    wreg     unsigned char 
  5815 ;;  inISR           1   18[COMRAM] _Bool 
  5816 ;; Auto vars:     Size  Location     Type
  5817 ;;  id              1   19[COMRAM] unsigned char 
  5818 ;; Return value:  Size  Location     Type
  5819 ;;                  1    wreg      void 
  5820 ;; Registers used:
  5821 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5822 ;; Tracked objects:
  5823 ;;		On entry : 3F/0
  5824 ;;		On exit  : 0/0
  5825 ;;		Unchanged: 0/0
  5826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5827 ;;      Params:         1       0       0       0       0       0       0
  5828 ;;      Locals:         1       0       0       0       0       0       0
  5829 ;;      Temps:          0       0       0       0       0       0       0
  5830 ;;      Totals:         2       0       0       0       0       0       0
  5831 ;;Total ram usage:        2 bytes
  5832 ;; Hardware stack levels used: 1
  5833 ;; Hardware stack levels required when called: 5
  5834 ;; This function calls:
  5835 ;;		_ENTERCRITICAL
  5836 ;;		_LEAVECRITICAL
  5837 ;; This function is called by:
  5838 ;;		_touchScreenController
  5839 ;; This function uses a non-reentrant model
  5840 ;;
  5841                           
  5842                           	psect	text16
  5843  0056F4                     __ptext16:
  5844                           	callstack 0
  5845  0056F4                     _XF_unscheduleTimer:
  5846                           	callstack 22
  5847                           
  5848                           ;incstack = 0
  5849                           ;XF_unscheduleTimer@id stored from wreg
  5850  0056F4  6E14               	movwf	XF_unscheduleTimer@id^0,c
  5851                           
  5852                           ;xf/xf.c: 125: void XF_unscheduleTimer(TimerID id, _Bool inISR);xf/xf.c: 126: {;xf/xf.c:
      +                           127:     ENTERCRITICAL(inISR);
  5853  0056F6  5013               	movf	XF_unscheduleTimer@inISR^0,w,c
  5854  0056F8  ECFA  F02C         	call	_ENTERCRITICAL
  5855                           
  5856                           ;xf/xf.c: 128:     theXF.timerList[id].tm = 0;
  5857  0056FC  5014               	movf	XF_unscheduleTimer@id^0,w,c
  5858  0056FE  0D03               	mullw	3
  5859  005700  50F3               	movf	243,w,c
  5860  005702  0F60               	addlw	low _theXF
  5861  005704  6ED9               	movwf	fsr2l,c
  5862  005706  6ADA               	clrf	fsr2h,c
  5863  005708  0E00               	movlw	0
  5864  00570A  6EDE               	movwf	postinc2,c
  5865  00570C  0E00               	movlw	0
  5866  00570E  6EDD               	movwf	postdec2,c
  5867                           
  5868                           ;xf/xf.c: 129:     theXF.timerList[id].ev = NULLEVENT;
  5869  005710  5014               	movf	XF_unscheduleTimer@id^0,w,c
  5870  005712  0D03               	mullw	3
  5871  005714  50F3               	movf	243,w,c
  5872  005716  0F62               	addlw	low (_theXF+2)
  5873  005718  6ED9               	movwf	fsr2l,c
  5874  00571A  6ADA               	clrf	fsr2h,c
  5875  00571C  0E00               	movlw	0
  5876  00571E  6EDF               	movwf	indf2,c
  5877                           
  5878                           ;xf/xf.c: 130:     LEAVECRITICAL(inISR);
  5879  005720  5013               	movf	XF_unscheduleTimer@inISR^0,w,c
  5880  005722  ECF4  F02C         	call	_LEAVECRITICAL
  5881  005726  0012               	return		;funcret
  5882  005728                     __end_of_XF_unscheduleTimer:
  5883                           	callstack 0
  5884                           
  5885 ;; *************** function _GameParameters_setY *****************
  5886 ;; Defined at:
  5887 ;;		line 79 in file "class/gameParameters.c"
  5888 ;; Parameters:    Size  Location     Type
  5889 ;;  s               2   17[COMRAM] PTR struct GameParameter
  5890 ;;		 -> g1(240), 
  5891 ;;  value           2   19[COMRAM] unsigned short 
  5892 ;; Auto vars:     Size  Location     Type
  5893 ;;		None
  5894 ;; Return value:  Size  Location     Type
  5895 ;;                  1    wreg      void 
  5896 ;; Registers used:
  5897 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5898 ;; Tracked objects:
  5899 ;;		On entry : 0/0
  5900 ;;		On exit  : 0/0
  5901 ;;		Unchanged: 0/0
  5902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5903 ;;      Params:         4       0       0       0       0       0       0
  5904 ;;      Locals:         0       0       0       0       0       0       0
  5905 ;;      Temps:          0       0       0       0       0       0       0
  5906 ;;      Totals:         4       0       0       0       0       0       0
  5907 ;;Total ram usage:        4 bytes
  5908 ;; Hardware stack levels used: 1
  5909 ;; Hardware stack levels required when called: 4
  5910 ;; This function calls:
  5911 ;;		Nothing
  5912 ;; This function is called by:
  5913 ;;		_touchScreenController
  5914 ;; This function uses a non-reentrant model
  5915 ;;
  5916                           
  5917                           	psect	text17
  5918  0059A6                     __ptext17:
  5919                           	callstack 0
  5920  0059A6                     _GameParameters_setY:
  5921                           	callstack 23
  5922                           
  5923                           ;class/gameParameters.c: 79: void GameParameters_setY(struct GameParameters* s, uint16_t
      +                           value);class/gameParameters.c: 80: {;class/gameParameters.c: 81:     s->y=value;
  5924                           
  5925                           ;incstack = 0
  5926  0059A6  EE20 F004          	lfsr	2,4
  5927  0059AA  5012               	movf	GameParameters_setY@s^0,w,c
  5928  0059AC  26D9               	addwf	fsr2l,f,c
  5929  0059AE  5013               	movf	(GameParameters_setY@s+1)^0,w,c
  5930  0059B0  22DA               	addwfc	fsr2h,f,c
  5931  0059B2  C014  FFDE         	movff	GameParameters_setY@value,postinc2
  5932  0059B6  C015  FFDD         	movff	GameParameters_setY@value+1,postdec2
  5933  0059BA  0012               	return		;funcret
  5934  0059BC                     __end_of_GameParameters_setY:
  5935                           	callstack 0
  5936                           
  5937 ;; *************** function _GameParameters_setX *****************
  5938 ;; Defined at:
  5939 ;;		line 71 in file "class/gameParameters.c"
  5940 ;; Parameters:    Size  Location     Type
  5941 ;;  s               2   17[COMRAM] PTR struct GameParameter
  5942 ;;		 -> g1(240), 
  5943 ;;  value           2   19[COMRAM] unsigned short 
  5944 ;; Auto vars:     Size  Location     Type
  5945 ;;		None
  5946 ;; Return value:  Size  Location     Type
  5947 ;;                  1    wreg      void 
  5948 ;; Registers used:
  5949 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5950 ;; Tracked objects:
  5951 ;;		On entry : 0/0
  5952 ;;		On exit  : 0/0
  5953 ;;		Unchanged: 0/0
  5954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5955 ;;      Params:         4       0       0       0       0       0       0
  5956 ;;      Locals:         0       0       0       0       0       0       0
  5957 ;;      Temps:          0       0       0       0       0       0       0
  5958 ;;      Totals:         4       0       0       0       0       0       0
  5959 ;;Total ram usage:        4 bytes
  5960 ;; Hardware stack levels used: 1
  5961 ;; Hardware stack levels required when called: 4
  5962 ;; This function calls:
  5963 ;;		Nothing
  5964 ;; This function is called by:
  5965 ;;		_touchScreenController
  5966 ;; This function uses a non-reentrant model
  5967 ;;
  5968                           
  5969                           	psect	text18
  5970  0059BC                     __ptext18:
  5971                           	callstack 0
  5972  0059BC                     _GameParameters_setX:
  5973                           	callstack 23
  5974                           
  5975                           ;class/gameParameters.c: 71: void GameParameters_setX(struct GameParameters* s, uint16_t
      +                           value);class/gameParameters.c: 72: {;class/gameParameters.c: 73:     s->x=value;
  5976                           
  5977                           ;incstack = 0
  5978  0059BC  EE20 F002          	lfsr	2,2
  5979  0059C0  5012               	movf	GameParameters_setX@s^0,w,c
  5980  0059C2  26D9               	addwf	fsr2l,f,c
  5981  0059C4  5013               	movf	(GameParameters_setX@s+1)^0,w,c
  5982  0059C6  22DA               	addwfc	fsr2h,f,c
  5983  0059C8  C014  FFDE         	movff	GameParameters_setX@value,postinc2
  5984  0059CC  C015  FFDD         	movff	GameParameters_setX@value+1,postdec2
  5985  0059D0  0012               	return		;funcret
  5986  0059D2                     __end_of_GameParameters_setX:
  5987                           	callstack 0
  5988                           
  5989 ;; *************** function _sleepSM *****************
  5990 ;; Defined at:
  5991 ;;		line 27 in file "stateMachine/sleepSM.c"
  5992 ;; Parameters:    Size  Location     Type
  5993 ;;  ev              1    wreg     unsigned char 
  5994 ;; Auto vars:     Size  Location     Type
  5995 ;;  ev              1   21[COMRAM] unsigned char 
  5996 ;; Return value:  Size  Location     Type
  5997 ;;                  1    wreg      void 
  5998 ;; Registers used:
  5999 ;;		wreg, status,2, status,0, cstack
  6000 ;; Tracked objects:
  6001 ;;		On entry : 3F/0
  6002 ;;		On exit  : 0/0
  6003 ;;		Unchanged: 0/0
  6004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6005 ;;      Params:         0       0       0       0       0       0       0
  6006 ;;      Locals:         1       0       0       0       0       0       0
  6007 ;;      Temps:          2       0       0       0       0       0       0
  6008 ;;      Totals:         3       0       0       0       0       0       0
  6009 ;;Total ram usage:        3 bytes
  6010 ;; Hardware stack levels used: 1
  6011 ;; Hardware stack levels required when called: 7
  6012 ;; This function calls:
  6013 ;;		_sleepController
  6014 ;; This function is called by:
  6015 ;;		_Factory_exec
  6016 ;; This function uses a non-reentrant model
  6017 ;;
  6018                           
  6019                           	psect	text19
  6020  00578E                     __ptext19:
  6021                           	callstack 0
  6022  00578E                     _sleepSM:
  6023                           	callstack 22
  6024                           
  6025                           ;incstack = 0
  6026                           ;sleepSM@ev stored from wreg
  6027  00578E  6E16               	movwf	sleepSM@ev^0,c
  6028                           
  6029                           ;stateMachine/sleepSM.c: 27: void sleepSM(Event ev);stateMachine/sleepSM.c: 28: {;stateM
      +                          achine/sleepSM.c: 29:     switch(sleepState)
  6030  005790  D009               	goto	l7640
  6031  005792                     l7632:
  6032                           
  6033                           ; BSR set to: 0
  6034                           ;stateMachine/sleepSM.c: 32:             if(ev==evSleep)
  6035  005792  0E03               	movlw	3
  6036  005794  1816               	xorwf	sleepSM@ev^0,w,c
  6037  005796  A4D8               	btfss	status,2,c
  6038  005798  0012               	return	
  6039                           
  6040                           ; BSR set to: 0
  6041                           ;stateMachine/sleepSM.c: 33:             {;stateMachine/sleepSM.c: 34:                sl
      +                          eepState=SLEEP;
  6042  00579A  0E01               	movlw	1
  6043  00579C  6F89               	movwf	_sleepState& (0+255),b
  6044                           
  6045                           ; BSR set to: 0
  6046                           ;stateMachine/sleepSM.c: 35:                sleepController();
  6047  00579E  EC2A  F02C         	call	_sleepController	;wreg free
  6048  0057A2  0012               	return	
  6049  0057A4                     l7640:
  6050  0057A4  0100               	movlb	0	; () banked
  6051  0057A6  5189               	movf	_sleepState& (0+255),w,b
  6052  0057A8  6E14               	movwf	??_sleepSM^0,c
  6053  0057AA  6A15               	clrf	(??_sleepSM+1)^0,c
  6054                           
  6055                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6056                           ; Switch size 1, requested type "simple"
  6057                           ; Number of cases is 1, Range of values is 0 to 0
  6058                           ; switch strategies available:
  6059                           ; Name         Instructions Cycles
  6060                           ; simple_byte            4     3 (average)
  6061                           ;	Chosen strategy is simple_byte
  6062  0057AC  5015               	movf	(??_sleepSM+1)^0,w,c
  6063  0057AE  0A00               	xorlw	0	; case 0
  6064  0057B0  A4D8               	btfss	status,2,c
  6065  0057B2  0012               	return	
  6066                           
  6067                           ; BSR set to: 0
  6068                           ; Switch size 1, requested type "simple"
  6069                           ; Number of cases is 2, Range of values is 0 to 1
  6070                           ; switch strategies available:
  6071                           ; Name         Instructions Cycles
  6072                           ; simple_byte            7     4 (average)
  6073                           ;	Chosen strategy is simple_byte
  6074  0057B4  5014               	movf	??_sleepSM^0,w,c
  6075  0057B6  0A00               	xorlw	0	; case 0
  6076  0057B8  B4D8               	btfsc	status,2,c
  6077  0057BA  D7EB               	goto	l7632
  6078  0057BC  0A01               	xorlw	1	; case 1
  6079  0057BE  0012               	return	
  6080  0057C0                     __end_of_sleepSM:
  6081                           	callstack 0
  6082                           
  6083 ;; *************** function _sleepController *****************
  6084 ;; Defined at:
  6085 ;;		line 54 in file "stateMachine/sleepSM.c"
  6086 ;; Parameters:    Size  Location     Type
  6087 ;;		None
  6088 ;; Auto vars:     Size  Location     Type
  6089 ;;		None
  6090 ;; Return value:  Size  Location     Type
  6091 ;;                  1    wreg      void 
  6092 ;; Registers used:
  6093 ;;		wreg, status,2, status,0, cstack
  6094 ;; Tracked objects:
  6095 ;;		On entry : 0/0
  6096 ;;		On exit  : 0/0
  6097 ;;		Unchanged: 0/0
  6098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6099 ;;      Params:         0       0       0       0       0       0       0
  6100 ;;      Locals:         0       0       0       0       0       0       0
  6101 ;;      Temps:          2       0       0       0       0       0       0
  6102 ;;      Totals:         2       0       0       0       0       0       0
  6103 ;;Total ram usage:        2 bytes
  6104 ;; Hardware stack levels used: 1
  6105 ;; Hardware stack levels required when called: 6
  6106 ;; This function calls:
  6107 ;;		_configPinSleep
  6108 ;; This function is called by:
  6109 ;;		_sleepInit
  6110 ;;		_sleepSM
  6111 ;; This function uses a non-reentrant model
  6112 ;;
  6113                           
  6114                           	psect	text20
  6115  005854                     __ptext20:
  6116                           	callstack 0
  6117  005854                     _sleepController:
  6118                           	callstack 22
  6119                           
  6120                           ;stateMachine/sleepSM.c: 56:     switch(sleepState)
  6121                           
  6122                           ;incstack = 0
  6123  005854  D005               	goto	l7464
  6124  005856                     l7460:
  6125                           
  6126                           ; BSR set to: 0
  6127                           ;stateMachine/sleepSM.c: 62:             configPinSleep();
  6128  005856  ECAE  F02C         	call	_configPinSleep	;wreg free
  6129  00585A  0003               	sleep		;# 
  6130  00585C  00FF               	reset		;# 
  6131                           
  6132                           ;stateMachine/sleepSM.c: 65:             break;
  6133  00585E  0012               	return	
  6134  005860                     l7464:
  6135  005860  0100               	movlb	0	; () banked
  6136  005862  5189               	movf	_sleepState& (0+255),w,b
  6137  005864  6E12               	movwf	??_sleepController^0,c
  6138  005866  6A13               	clrf	(??_sleepController+1)^0,c
  6139                           
  6140                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6141                           ; Switch size 1, requested type "simple"
  6142                           ; Number of cases is 1, Range of values is 0 to 0
  6143                           ; switch strategies available:
  6144                           ; Name         Instructions Cycles
  6145                           ; simple_byte            4     3 (average)
  6146                           ;	Chosen strategy is simple_byte
  6147  005868  5013               	movf	(??_sleepController+1)^0,w,c
  6148  00586A  0A00               	xorlw	0	; case 0
  6149  00586C  A4D8               	btfss	status,2,c
  6150  00586E  0012               	return	
  6151                           
  6152                           ; BSR set to: 0
  6153                           ; Switch size 1, requested type "simple"
  6154                           ; Number of cases is 2, Range of values is 0 to 1
  6155                           ; switch strategies available:
  6156                           ; Name         Instructions Cycles
  6157                           ; simple_byte            7     4 (average)
  6158                           ;	Chosen strategy is simple_byte
  6159  005870  5012               	movf	??_sleepController^0,w,c
  6160  005872  0A00               	xorlw	0	; case 0
  6161  005874  B4D8               	btfsc	status,2,c
  6162  005876  0012               	return	
  6163  005878  0A01               	xorlw	1	; case 1
  6164  00587A  A4D8               	btfss	status,2,c
  6165  00587C  0012               	return	
  6166  00587E  D7EB               	goto	l7460
  6167  005880                     __end_of_sleepController:
  6168                           	callstack 0
  6169                           
  6170 ;; *************** function _configPinSleep *****************
  6171 ;; Defined at:
  6172 ;;		line 75 in file "stateMachine/sleepSM.c"
  6173 ;; Parameters:    Size  Location     Type
  6174 ;;		None
  6175 ;; Auto vars:     Size  Location     Type
  6176 ;;		None
  6177 ;; Return value:  Size  Location     Type
  6178 ;;                  1    wreg      void 
  6179 ;; Registers used:
  6180 ;;		wreg, status,2, cstack
  6181 ;; Tracked objects:
  6182 ;;		On entry : 0/0
  6183 ;;		On exit  : 0/0
  6184 ;;		Unchanged: 0/0
  6185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6186 ;;      Params:         0       0       0       0       0       0       0
  6187 ;;      Locals:         0       0       0       0       0       0       0
  6188 ;;      Temps:          0       0       0       0       0       0       0
  6189 ;;      Totals:         0       0       0       0       0       0       0
  6190 ;;Total ram usage:        0 bytes
  6191 ;; Hardware stack levels used: 1
  6192 ;; Hardware stack levels required when called: 5
  6193 ;; This function calls:
  6194 ;;		_configTouch
  6195 ;; This function is called by:
  6196 ;;		_sleepController
  6197 ;; This function uses a non-reentrant model
  6198 ;;
  6199                           
  6200                           	psect	text21
  6201  00595C                     __ptext21:
  6202                           	callstack 0
  6203  00595C                     _configPinSleep:
  6204                           	callstack 22
  6205                           
  6206                           ;stateMachine/sleepSM.c: 77:     TRISC=0b10000010;
  6207                           
  6208                           ;incstack = 0
  6209  00595C  0E82               	movlw	130
  6210  00595E  6E94               	movwf	148,c	;volatile
  6211                           
  6212                           ;stateMachine/sleepSM.c: 78:     TRISA=0;
  6213  005960  0E00               	movlw	0
  6214  005962  6E92               	movwf	146,c	;volatile
  6215                           
  6216                           ;stateMachine/sleepSM.c: 79:     LATA=0xFF;
  6217  005964  6889               	setf	137,c	;volatile
  6218                           
  6219                           ;stateMachine/sleepSM.c: 80:     LATC0=0;
  6220  005966  908B               	bcf	3979,0,c	;volatile
  6221                           
  6222                           ;stateMachine/sleepSM.c: 81:     CCPR2L=0;
  6223  005968  0E00               	movlw	0
  6224  00596A  6E67               	movwf	103,c	;volatile
  6225                           
  6226                           ;stateMachine/sleepSM.c: 82:     LATC2=1;
  6227  00596C  848B               	bsf	3979,2,c	;volatile
  6228                           
  6229                           ;stateMachine/sleepSM.c: 83:     LATC3=1;
  6230  00596E  868B               	bsf	3979,3,c	;volatile
  6231                           
  6232                           ;stateMachine/sleepSM.c: 84:     LATC4=1;
  6233  005970  888B               	bsf	3979,4,c	;volatile
  6234                           
  6235                           ;stateMachine/sleepSM.c: 85:     LATC5=1;
  6236  005972  8A8B               	bsf	3979,5,c	;volatile
  6237                           
  6238                           ;stateMachine/sleepSM.c: 86:     configTouch();
  6239  005974  EC8E  F02C         	call	_configTouch	;wreg free
  6240  005978  0012               	return		;funcret
  6241  00597A                     __end_of_configPinSleep:
  6242                           	callstack 0
  6243                           
  6244 ;; *************** function _configTouch *****************
  6245 ;; Defined at:
  6246 ;;		line 132 in file "stateMachine/touchScreenSM.c"
  6247 ;; Parameters:    Size  Location     Type
  6248 ;;		None
  6249 ;; Auto vars:     Size  Location     Type
  6250 ;;		None
  6251 ;; Return value:  Size  Location     Type
  6252 ;;                  1    wreg      void 
  6253 ;; Registers used:
  6254 ;;		wreg, status,2
  6255 ;; Tracked objects:
  6256 ;;		On entry : 0/0
  6257 ;;		On exit  : 0/0
  6258 ;;		Unchanged: 0/0
  6259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6260 ;;      Params:         0       0       0       0       0       0       0
  6261 ;;      Locals:         0       0       0       0       0       0       0
  6262 ;;      Temps:          0       0       0       0       0       0       0
  6263 ;;      Totals:         0       0       0       0       0       0       0
  6264 ;;Total ram usage:        0 bytes
  6265 ;; Hardware stack levels used: 1
  6266 ;; Hardware stack levels required when called: 4
  6267 ;; This function calls:
  6268 ;;		Nothing
  6269 ;; This function is called by:
  6270 ;;		_configPinSleep
  6271 ;;		_touchScreenInit
  6272 ;;		_touchScreenController
  6273 ;; This function uses a non-reentrant model
  6274 ;;
  6275                           
  6276                           	psect	text22
  6277  00591C                     __ptext22:
  6278                           	callstack 0
  6279  00591C                     _configTouch:
  6280                           	callstack 23
  6281                           
  6282                           ;stateMachine/touchScreenSM.c: 134:     ANSB1=0;
  6283                           
  6284                           ;incstack = 0
  6285  00591C  010F               	movlb	15	; () banked
  6286  00591E  9339               	bcf	57,1,b	;volatile
  6287                           
  6288                           ;stateMachine/touchScreenSM.c: 135:     ANSB2=0;
  6289  005920  9539               	bcf	57,2,b	;volatile
  6290                           
  6291                           ;stateMachine/touchScreenSM.c: 136:     TRISB2=0;
  6292  005922  9493               	bcf	3987,2,c	;volatile
  6293                           
  6294                           ;stateMachine/touchScreenSM.c: 137:     LATB2=0;
  6295  005924  948A               	bcf	3978,2,c	;volatile
  6296                           
  6297                           ;stateMachine/touchScreenSM.c: 138:     TRISB1=1;
  6298  005926  8293               	bsf	3987,1,c	;volatile
  6299                           
  6300                           ;stateMachine/touchScreenSM.c: 139:     RBPU=0;
  6301  005928  9EF1               	bcf	4081,7,c	;volatile
  6302                           
  6303                           ; BSR set to: 15
  6304                           ;stateMachine/touchScreenSM.c: 140:     WPUB=0b00000010;
  6305  00592A  0E02               	movlw	2
  6306  00592C  6E61               	movwf	97,c	;volatile
  6307                           
  6308                           ; BSR set to: 15
  6309                           ;stateMachine/touchScreenSM.c: 141:     TRISB3=0;
  6310  00592E  9693               	bcf	3987,3,c	;volatile
  6311                           
  6312                           ; BSR set to: 15
  6313                           ;stateMachine/touchScreenSM.c: 142:     LATB3=1;
  6314  005930  868A               	bsf	3978,3,c	;volatile
  6315                           
  6316                           ; BSR set to: 15
  6317                           ;stateMachine/touchScreenSM.c: 143:     __nop();
  6318  005932  F000               	nop	
  6319                           
  6320                           ;stateMachine/touchScreenSM.c: 144:     TRISB3=1;
  6321  005934  8693               	bsf	3987,3,c	;volatile
  6322                           
  6323                           ;stateMachine/touchScreenSM.c: 145:     TRISB4=1;
  6324  005936  8893               	bsf	3987,4,c	;volatile
  6325                           
  6326                           ;stateMachine/touchScreenSM.c: 146:     INT1IF=0;
  6327  005938  90F0               	bcf	4080,0,c	;volatile
  6328                           
  6329                           ;stateMachine/touchScreenSM.c: 147:     INT1IE=1;
  6330  00593A  86F0               	bsf	4080,3,c	;volatile
  6331  00593C  0012               	return		;funcret
  6332  00593E                     __end_of_configTouch:
  6333                           	callstack 0
  6334                           
  6335 ;; *************** function _gameControllerSM *****************
  6336 ;; Defined at:
  6337 ;;		line 26 in file "stateMachine/gameController.c"
  6338 ;; Parameters:    Size  Location     Type
  6339 ;;  ev              1    wreg     unsigned char 
  6340 ;;  g               2   59[COMRAM] PTR struct GameParameter
  6341 ;;		 -> g1(240), 
  6342 ;; Auto vars:     Size  Location     Type
  6343 ;;  ev              1   63[COMRAM] unsigned char 
  6344 ;; Return value:  Size  Location     Type
  6345 ;;                  1    wreg      void 
  6346 ;; Registers used:
  6347 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6348 ;; Tracked objects:
  6349 ;;		On entry : 3F/0
  6350 ;;		On exit  : 0/0
  6351 ;;		Unchanged: 0/0
  6352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6353 ;;      Params:         2       0       0       0       0       0       0
  6354 ;;      Locals:         1       0       0       0       0       0       0
  6355 ;;      Temps:          2       0       0       0       0       0       0
  6356 ;;      Totals:         5       0       0       0       0       0       0
  6357 ;;Total ram usage:        5 bytes
  6358 ;; Hardware stack levels used: 1
  6359 ;; Hardware stack levels required when called: 9
  6360 ;; This function calls:
  6361 ;;		_XF_scheduleTimer
  6362 ;;		___wmul
  6363 ;;		_gameControllerController
  6364 ;; This function is called by:
  6365 ;;		_Factory_exec
  6366 ;; This function uses a non-reentrant model
  6367 ;;
  6368                           
  6369                           	psect	text23
  6370  004232                     __ptext23:
  6371                           	callstack 0
  6372  004232                     _gameControllerSM:
  6373                           	callstack 20
  6374                           
  6375                           ;incstack = 0
  6376                           ;gameControllerSM@ev stored from wreg
  6377  004232  6E40               	movwf	gameControllerSM@ev^0,c
  6378                           
  6379                           ;stateMachine/gameController.c: 26: void gameControllerSM(Event ev,GameParameters* g);st
      +                          ateMachine/gameController.c: 27: {;stateMachine/gameController.c: 28:    switch(gameStat
      +                          eMachine)
  6380  004234  D05C               	goto	l7772
  6381  004236                     l7734:
  6382                           
  6383                           ;stateMachine/gameController.c: 31:             gameControllerController(g,NULLEVENT);
  6384  004236  C03C  F037         	movff	gameControllerSM@g,gameControllerController@g
  6385  00423A  C03D  F038         	movff	gameControllerSM@g+1,gameControllerController@g+1
  6386  00423E  0E00               	movlw	0
  6387  004240  6E39               	movwf	gameControllerController@ev^0,c
  6388  004242  EC81  F009         	call	_gameControllerController	;wreg free
  6389                           
  6390                           ;stateMachine/gameController.c: 32:             if(ev==evParameters)
  6391  004246  0E07               	movlw	7
  6392  004248  1840               	xorwf	gameControllerSM@ev^0,w,c
  6393  00424A  A4D8               	btfss	status,2,c
  6394  00424C  D002               	goto	l7740
  6395                           
  6396                           ;stateMachine/gameController.c: 33:             {;stateMachine/gameController.c: 34:    
      +                                       gameStateMachine=PARAMETERS;
  6397  00424E  0E01               	movlw	1
  6398  004250  6E4C               	movwf	_gameStateMachine^0,c
  6399  004252                     l7740:
  6400                           
  6401                           ;stateMachine/gameController.c: 36:             if(ev==evOnePlayer)
  6402  004252  0E05               	movlw	5
  6403  004254  1840               	xorwf	gameControllerSM@ev^0,w,c
  6404  004256  A4D8               	btfss	status,2,c
  6405  004258  0012               	return	
  6406                           
  6407                           ;stateMachine/gameController.c: 37:             {;stateMachine/gameController.c: 38:    
      +                                       gameStateMachine=LOCAL;
  6408  00425A  0E02               	movlw	2
  6409  00425C  6E4C               	movwf	_gameStateMachine^0,c
  6410                           
  6411                           ;stateMachine/gameController.c: 39:                 XF_scheduleTimer(40-(g->level*10),ev
      +                          GameUpdate,0);
  6412  00425E  EE20 F006          	lfsr	2,6
  6413  004262  503C               	movf	gameControllerSM@g^0,w,c
  6414  004264  26D9               	addwf	fsr2l,f,c
  6415  004266  503D               	movf	(gameControllerSM@g+1)^0,w,c
  6416  004268  22DA               	addwfc	fsr2h,f,c
  6417  00426A  CFDE F01A          	movff	postinc2,___wmul@multiplier
  6418  00426E  CFDD F01B          	movff	postdec2,___wmul@multiplier+1
  6419  004272  0EFF               	movlw	255
  6420  004274  6E1D               	movwf	(___wmul@multiplicand+1)^0,c
  6421  004276  0EF6               	movlw	246
  6422  004278  6E1C               	movwf	___wmul@multiplicand^0,c
  6423  00427A  EC7B  F02C         	call	___wmul	;wreg free
  6424  00427E  0E28               	movlw	40
  6425  004280  241A               	addwf	?___wmul^0,w,c
  6426  004282  6E20               	movwf	XF_scheduleTimer@tm^0,c
  6427  004284  0E00               	movlw	0
  6428  004286  201B               	addwfc	(?___wmul+1)^0,w,c
  6429  004288  6E21               	movwf	(XF_scheduleTimer@tm+1)^0,c
  6430  00428A  0E0A               	movlw	10
  6431  00428C  6E22               	movwf	XF_scheduleTimer@ev^0,c
  6432  00428E  0E00               	movlw	0
  6433  004290  6E23               	movwf	XF_scheduleTimer@inISR^0,c
  6434  004292  ECF3  F029         	call	_XF_scheduleTimer	;wreg free
  6435  004296  0012               	return	
  6436  004298                     l7752:
  6437                           
  6438                           ;stateMachine/gameController.c: 49:             gameControllerController(g,NULLEVENT);
  6439  004298  C03C  F037         	movff	gameControllerSM@g,gameControllerController@g
  6440  00429C  C03D  F038         	movff	gameControllerSM@g+1,gameControllerController@g+1
  6441  0042A0  0E00               	movlw	0
  6442  0042A2  6E39               	movwf	gameControllerController@ev^0,c
  6443  0042A4  EC81  F009         	call	_gameControllerController	;wreg free
  6444                           
  6445                           ;stateMachine/gameController.c: 50:             if(ev==evLeave)
  6446  0042A8  0E08               	movlw	8
  6447  0042AA  1840               	xorwf	gameControllerSM@ev^0,w,c
  6448  0042AC  A4D8               	btfss	status,2,c
  6449  0042AE  0012               	return	
  6450  0042B0                     u5590:
  6451                           
  6452                           ;stateMachine/gameController.c: 51:             {;stateMachine/gameController.c: 52:    
      +                                       gameStateMachine=NOGAME;
  6453  0042B0  0E00               	movlw	0
  6454  0042B2  6E4C               	movwf	_gameStateMachine^0,c
  6455  0042B4  0012               	return	
  6456  0042B6                     l7758:
  6457                           
  6458                           ;stateMachine/gameController.c: 57:             gameControllerController(g,ev);
  6459  0042B6  C03C  F037         	movff	gameControllerSM@g,gameControllerController@g
  6460  0042BA  C03D  F038         	movff	gameControllerSM@g+1,gameControllerController@g+1
  6461  0042BE  C040  F039         	movff	gameControllerSM@ev,gameControllerController@ev
  6462  0042C2  EC81  F009         	call	_gameControllerController	;wreg free
  6463                           
  6464                           ;stateMachine/gameController.c: 58:             if(ev==evLeave)
  6465  0042C6  0E08               	movlw	8
  6466  0042C8  1840               	xorwf	gameControllerSM@ev^0,w,c
  6467  0042CA  B4D8               	btfsc	status,2,c
  6468  0042CC  D7F1               	goto	u5590
  6469  0042CE  0E09               	movlw	9
  6470  0042D0  1840               	xorwf	gameControllerSM@ev^0,w,c
  6471  0042D2  A4D8               	btfss	status,2,c
  6472  0042D4  0012               	return	
  6473                           
  6474                           ;stateMachine/gameController.c: 63:             {;stateMachine/gameController.c: 64:    
      +                                       gameStateMachine=ENDGAME;
  6475  0042D6  0E04               	movlw	4
  6476  0042D8  6E4C               	movwf	_gameStateMachine^0,c
  6477  0042DA  0012               	return	
  6478  0042DC                     l7768:
  6479                           
  6480                           ;stateMachine/gameController.c: 73:            gameControllerController(g,ev);
  6481  0042DC  C03C  F037         	movff	gameControllerSM@g,gameControllerController@g
  6482  0042E0  C03D  F038         	movff	gameControllerSM@g+1,gameControllerController@g+1
  6483  0042E4  C040  F039         	movff	gameControllerSM@ev,gameControllerController@ev
  6484  0042E8  EC81  F009         	call	_gameControllerController	;wreg free
  6485                           
  6486                           ;stateMachine/gameController.c: 74:            break;
  6487  0042EC  0012               	return	
  6488  0042EE                     l7772:
  6489  0042EE  504C               	movf	_gameStateMachine^0,w,c
  6490  0042F0  6E3E               	movwf	??_gameControllerSM^0,c
  6491  0042F2  6A3F               	clrf	(??_gameControllerSM+1)^0,c
  6492                           
  6493                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6494                           ; Switch size 1, requested type "simple"
  6495                           ; Number of cases is 1, Range of values is 0 to 0
  6496                           ; switch strategies available:
  6497                           ; Name         Instructions Cycles
  6498                           ; simple_byte            4     3 (average)
  6499                           ;	Chosen strategy is simple_byte
  6500  0042F4  503F               	movf	(??_gameControllerSM+1)^0,w,c
  6501  0042F6  0A00               	xorlw	0	; case 0
  6502  0042F8  A4D8               	btfss	status,2,c
  6503  0042FA  0012               	return	
  6504                           
  6505                           ; Switch size 1, requested type "simple"
  6506                           ; Number of cases is 5, Range of values is 0 to 4
  6507                           ; switch strategies available:
  6508                           ; Name         Instructions Cycles
  6509                           ; simple_byte           16     9 (average)
  6510                           ;	Chosen strategy is simple_byte
  6511  0042FC  503E               	movf	??_gameControllerSM^0,w,c
  6512  0042FE  0A00               	xorlw	0	; case 0
  6513  004300  B4D8               	btfsc	status,2,c
  6514  004302  D799               	goto	l7734
  6515  004304  0A01               	xorlw	1	; case 1
  6516  004306  B4D8               	btfsc	status,2,c
  6517  004308  D7C7               	goto	l7752
  6518  00430A  0A03               	xorlw	3	; case 2
  6519  00430C  B4D8               	btfsc	status,2,c
  6520  00430E  D7D3               	goto	l7758
  6521  004310  0A01               	xorlw	1	; case 3
  6522  004312  B4D8               	btfsc	status,2,c
  6523  004314  0012               	return	
  6524  004316  0A07               	xorlw	7	; case 4
  6525  004318  A4D8               	btfss	status,2,c
  6526  00431A  0012               	return	
  6527  00431C  D7DF               	goto	l7768
  6528  00431E                     __end_of_gameControllerSM:
  6529                           	callstack 0
  6530                           
  6531 ;; *************** function _gameControllerController *****************
  6532 ;; Defined at:
  6533 ;;		line 89 in file "stateMachine/gameController.c"
  6534 ;; Parameters:    Size  Location     Type
  6535 ;;  g               2   54[COMRAM] PTR struct GameParameter
  6536 ;;		 -> g1(240), 
  6537 ;;  ev              1   56[COMRAM] unsigned char 
  6538 ;; Auto vars:     Size  Location     Type
  6539 ;;		None
  6540 ;; Return value:  Size  Location     Type
  6541 ;;                  1    wreg      void 
  6542 ;; Registers used:
  6543 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6544 ;; Tracked objects:
  6545 ;;		On entry : 0/0
  6546 ;;		On exit  : 0/0
  6547 ;;		Unchanged: 0/0
  6548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6549 ;;      Params:         3       0       0       0       0       0       0
  6550 ;;      Locals:         0       0       0       0       0       0       0
  6551 ;;      Temps:          2       0       0       0       0       0       0
  6552 ;;      Totals:         5       0       0       0       0       0       0
  6553 ;;Total ram usage:        5 bytes
  6554 ;; Hardware stack levels used: 1
  6555 ;; Hardware stack levels required when called: 8
  6556 ;; This function calls:
  6557 ;;		_GameParameters_init
  6558 ;;		_GameParameters_resetPos
  6559 ;;		_LCD_InButton
  6560 ;;		_LCD_InSlider
  6561 ;;		_LCD_SliderUpdate
  6562 ;;		_XF_pushEvent
  6563 ;;		_XF_scheduleTimer
  6564 ;;		___wmul
  6565 ;;		_backlightController
  6566 ;;		_levelController
  6567 ;;		_mooveBall
  6568 ;;		_moovePaddle1
  6569 ;;		_moovePaddle2
  6570 ;; This function is called by:
  6571 ;;		_gameControllerInit
  6572 ;;		_gameControllerSM
  6573 ;; This function uses a non-reentrant model
  6574 ;;
  6575                           
  6576                           	psect	text24
  6577  001302                     __ptext24:
  6578                           	callstack 0
  6579  001302                     _gameControllerController:
  6580                           	callstack 19
  6581                           
  6582                           ;stateMachine/gameController.c: 89: void gameControllerController(GameParameters* g,Even
      +                          t ev);stateMachine/gameController.c: 90: {;stateMachine/gameController.c: 91:     switch
      +                          (gameStateMachine)
  6583                           
  6584                           ;incstack = 0
  6585  001302  D1F3               	goto	l7198
  6586  001304                     l7144:
  6587                           
  6588                           ;stateMachine/gameController.c: 95:             if(LCD_InButton(&(g->btnParam),g->x,g->y
      +                          ))
  6589  001304  0E08               	movlw	8
  6590  001306  2437               	addwf	gameControllerController@g^0,w,c
  6591  001308  6E12               	movwf	LCD_InButton@button^0,c
  6592  00130A  0E00               	movlw	0
  6593  00130C  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6594  00130E  6E13               	movwf	(LCD_InButton@button+1)^0,c
  6595  001310  EE20 F002          	lfsr	2,2
  6596  001314  5037               	movf	gameControllerController@g^0,w,c
  6597  001316  26D9               	addwf	fsr2l,f,c
  6598  001318  5038               	movf	(gameControllerController@g+1)^0,w,c
  6599  00131A  22DA               	addwfc	fsr2h,f,c
  6600  00131C  CFDE F014          	movff	postinc2,LCD_InButton@posX
  6601  001320  CFDD F015          	movff	postdec2,LCD_InButton@posX+1
  6602  001324  EE20 F004          	lfsr	2,4
  6603  001328  5037               	movf	gameControllerController@g^0,w,c
  6604  00132A  26D9               	addwf	fsr2l,f,c
  6605  00132C  5038               	movf	(gameControllerController@g+1)^0,w,c
  6606  00132E  22DA               	addwfc	fsr2h,f,c
  6607  001330  CFDE F016          	movff	postinc2,LCD_InButton@posY
  6608  001334  CFDD F017          	movff	postdec2,LCD_InButton@posY+1
  6609  001338  EC9F  F025         	call	_LCD_InButton	;wreg free
  6610  00133C  0900               	iorlw	0
  6611  00133E  B4D8               	btfsc	status,2,c
  6612  001340  D00B               	goto	l667
  6613                           
  6614                           ;stateMachine/gameController.c: 96:             {;stateMachine/gameController.c: 97:    
      +                                       XF_pushEvent(evParameters,0);
  6615  001342  0E00               	movlw	0
  6616  001344  6E18               	movwf	XF_pushEvent@inISR^0,c
  6617  001346  0E07               	movlw	7
  6618  001348  ECCA  F029         	call	_XF_pushEvent
  6619                           
  6620                           ;stateMachine/gameController.c: 98:                 GameParameters_resetPos(g);
  6621  00134C  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  6622  001350  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  6623  001354  EC40  F02C         	call	_GameParameters_resetPos	;wreg free
  6624  001358                     l667:
  6625                           
  6626                           ;stateMachine/gameController.c: 100:             if(LCD_InButton(&(g->btnOnePlayer),g->x
      +                          ,g->y))
  6627  001358  0E20               	movlw	32
  6628  00135A  2437               	addwf	gameControllerController@g^0,w,c
  6629  00135C  6E12               	movwf	LCD_InButton@button^0,c
  6630  00135E  0E00               	movlw	0
  6631  001360  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6632  001362  6E13               	movwf	(LCD_InButton@button+1)^0,c
  6633  001364  EE20 F002          	lfsr	2,2
  6634  001368  5037               	movf	gameControllerController@g^0,w,c
  6635  00136A  26D9               	addwf	fsr2l,f,c
  6636  00136C  5038               	movf	(gameControllerController@g+1)^0,w,c
  6637  00136E  22DA               	addwfc	fsr2h,f,c
  6638  001370  CFDE F014          	movff	postinc2,LCD_InButton@posX
  6639  001374  CFDD F015          	movff	postdec2,LCD_InButton@posX+1
  6640  001378  EE20 F004          	lfsr	2,4
  6641  00137C  5037               	movf	gameControllerController@g^0,w,c
  6642  00137E  26D9               	addwf	fsr2l,f,c
  6643  001380  5038               	movf	(gameControllerController@g+1)^0,w,c
  6644  001382  22DA               	addwfc	fsr2h,f,c
  6645  001384  CFDE F016          	movff	postinc2,LCD_InButton@posY
  6646  001388  CFDD F017          	movff	postdec2,LCD_InButton@posY+1
  6647  00138C  EC9F  F025         	call	_LCD_InButton	;wreg free
  6648  001390  0900               	iorlw	0
  6649  001392  B4D8               	btfsc	status,2,c
  6650  001394  D00B               	goto	l668
  6651                           
  6652                           ;stateMachine/gameController.c: 101:             {;stateMachine/gameController.c: 102:  
      +                                         XF_pushEvent(evOnePlayer,0);
  6653  001396  0E00               	movlw	0
  6654  001398  6E18               	movwf	XF_pushEvent@inISR^0,c
  6655  00139A  0E05               	movlw	5
  6656  00139C  ECCA  F029         	call	_XF_pushEvent
  6657                           
  6658                           ;stateMachine/gameController.c: 103:                 GameParameters_resetPos(g);
  6659  0013A0  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  6660  0013A4  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  6661  0013A8  EC40  F02C         	call	_GameParameters_resetPos	;wreg free
  6662  0013AC                     l668:
  6663                           
  6664                           ;stateMachine/gameController.c: 105:             if(LCD_InButton(&(g->btnTwoPlayer),g->x
      +                          ,g->y))
  6665  0013AC  0E38               	movlw	56
  6666  0013AE  2437               	addwf	gameControllerController@g^0,w,c
  6667  0013B0  6E12               	movwf	LCD_InButton@button^0,c
  6668  0013B2  0E00               	movlw	0
  6669  0013B4  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6670  0013B6  6E13               	movwf	(LCD_InButton@button+1)^0,c
  6671  0013B8  EE20 F002          	lfsr	2,2
  6672  0013BC  5037               	movf	gameControllerController@g^0,w,c
  6673  0013BE  26D9               	addwf	fsr2l,f,c
  6674  0013C0  5038               	movf	(gameControllerController@g+1)^0,w,c
  6675  0013C2  22DA               	addwfc	fsr2h,f,c
  6676  0013C4  CFDE F014          	movff	postinc2,LCD_InButton@posX
  6677  0013C8  CFDD F015          	movff	postdec2,LCD_InButton@posX+1
  6678  0013CC  EE20 F004          	lfsr	2,4
  6679  0013D0  5037               	movf	gameControllerController@g^0,w,c
  6680  0013D2  26D9               	addwf	fsr2l,f,c
  6681  0013D4  5038               	movf	(gameControllerController@g+1)^0,w,c
  6682  0013D6  22DA               	addwfc	fsr2h,f,c
  6683  0013D8  CFDE F016          	movff	postinc2,LCD_InButton@posY
  6684  0013DC  CFDD F017          	movff	postdec2,LCD_InButton@posY+1
  6685  0013E0  EC9F  F025         	call	_LCD_InButton	;wreg free
  6686  0013E4  0900               	iorlw	0
  6687  0013E6  B4D8               	btfsc	status,2,c
  6688  0013E8  D00B               	goto	l669
  6689                           
  6690                           ;stateMachine/gameController.c: 106:             {;stateMachine/gameController.c: 107:  
      +                                         XF_pushEvent(evTwoPlayer,0);
  6691  0013EA  0E00               	movlw	0
  6692  0013EC  6E18               	movwf	XF_pushEvent@inISR^0,c
  6693  0013EE  0E06               	movlw	6
  6694  0013F0  ECCA  F029         	call	_XF_pushEvent
  6695                           
  6696                           ;stateMachine/gameController.c: 108:                 GameParameters_resetPos(g);
  6697  0013F4  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  6698  0013F8  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  6699  0013FC  EC40  F02C         	call	_GameParameters_resetPos	;wreg free
  6700  001400                     l669:
  6701                           
  6702                           ;stateMachine/gameController.c: 110:             if(LCD_InButton(&(g->btnTurnOff),g->x,g
      +                          ->y))
  6703  001400  0E80               	movlw	128
  6704  001402  2437               	addwf	gameControllerController@g^0,w,c
  6705  001404  6E12               	movwf	LCD_InButton@button^0,c
  6706  001406  0E00               	movlw	0
  6707  001408  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6708  00140A  6E13               	movwf	(LCD_InButton@button+1)^0,c
  6709  00140C  EE20 F002          	lfsr	2,2
  6710  001410  5037               	movf	gameControllerController@g^0,w,c
  6711  001412  26D9               	addwf	fsr2l,f,c
  6712  001414  5038               	movf	(gameControllerController@g+1)^0,w,c
  6713  001416  22DA               	addwfc	fsr2h,f,c
  6714  001418  CFDE F014          	movff	postinc2,LCD_InButton@posX
  6715  00141C  CFDD F015          	movff	postdec2,LCD_InButton@posX+1
  6716  001420  EE20 F004          	lfsr	2,4
  6717  001424  5037               	movf	gameControllerController@g^0,w,c
  6718  001426  26D9               	addwf	fsr2l,f,c
  6719  001428  5038               	movf	(gameControllerController@g+1)^0,w,c
  6720  00142A  22DA               	addwfc	fsr2h,f,c
  6721  00142C  CFDE F016          	movff	postinc2,LCD_InButton@posY
  6722  001430  CFDD F017          	movff	postdec2,LCD_InButton@posY+1
  6723  001434  EC9F  F025         	call	_LCD_InButton	;wreg free
  6724  001438  0900               	iorlw	0
  6725  00143A  B4D8               	btfsc	status,2,c
  6726  00143C  0012               	return	
  6727                           
  6728                           ;stateMachine/gameController.c: 111:             {;stateMachine/gameController.c: 112:  
      +                                         XF_pushEvent(evSleep,0);
  6729  00143E  0E00               	movlw	0
  6730  001440  6E18               	movwf	XF_pushEvent@inISR^0,c
  6731  001442  0E03               	movlw	3
  6732  001444  ECCA  F029         	call	_XF_pushEvent
  6733                           
  6734                           ;stateMachine/gameController.c: 113:                 GameParameters_resetPos(g);
  6735  001448  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  6736  00144C  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  6737  001450  EC40  F02C         	call	_GameParameters_resetPos	;wreg free
  6738  001454  0012               	return	
  6739  001456                     l7154:
  6740                           
  6741                           ;stateMachine/gameController.c: 120:             if(LCD_InSlider(&(g->sldBackLight),g->x
      +                          ,g->y))
  6742  001456  0E98               	movlw	152
  6743  001458  2437               	addwf	gameControllerController@g^0,w,c
  6744  00145A  6E12               	movwf	LCD_InSlider@slider^0,c
  6745  00145C  0E00               	movlw	0
  6746  00145E  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6747  001460  6E13               	movwf	(LCD_InSlider@slider+1)^0,c
  6748  001462  EE20 F002          	lfsr	2,2
  6749  001466  5037               	movf	gameControllerController@g^0,w,c
  6750  001468  26D9               	addwf	fsr2l,f,c
  6751  00146A  5038               	movf	(gameControllerController@g+1)^0,w,c
  6752  00146C  22DA               	addwfc	fsr2h,f,c
  6753  00146E  CFDE F014          	movff	postinc2,LCD_InSlider@posX
  6754  001472  CFDD F015          	movff	postdec2,LCD_InSlider@posX+1
  6755  001476  EE20 F004          	lfsr	2,4
  6756  00147A  5037               	movf	gameControllerController@g^0,w,c
  6757  00147C  26D9               	addwf	fsr2l,f,c
  6758  00147E  5038               	movf	(gameControllerController@g+1)^0,w,c
  6759  001480  22DA               	addwfc	fsr2h,f,c
  6760  001482  CFDE F016          	movff	postinc2,LCD_InSlider@posY
  6761  001486  CFDD F017          	movff	postdec2,LCD_InSlider@posY+1
  6762  00148A  EC4B  F025         	call	_LCD_InSlider	;wreg free
  6763  00148E  0900               	iorlw	0
  6764  001490  B4D8               	btfsc	status,2,c
  6765  001492  D014               	goto	l7160
  6766                           
  6767                           ;stateMachine/gameController.c: 121:             {;stateMachine/gameController.c: 122:  
      +                                         backlightController(g);
  6768  001494  C037  F018         	movff	gameControllerController@g,backlightController@g
  6769  001498  C038  F019         	movff	gameControllerController@g+1,backlightController@g+1
  6770  00149C  EC6A  F011         	call	_backlightController	;wreg free
  6771                           
  6772                           ;stateMachine/gameController.c: 123:                 LCD_SliderUpdate(&(g->sldBackLight)
      +                          );
  6773  0014A0  0E98               	movlw	152
  6774  0014A2  2437               	addwf	gameControllerController@g^0,w,c
  6775  0014A4  6E27               	movwf	LCD_SliderUpdate@slider^0,c
  6776  0014A6  0E00               	movlw	0
  6777  0014A8  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6778  0014AA  6E28               	movwf	(LCD_SliderUpdate@slider+1)^0,c
  6779  0014AC  EC8D  F00B         	call	_LCD_SliderUpdate	;wreg free
  6780                           
  6781                           ;stateMachine/gameController.c: 124:                 GameParameters_resetPos(g);
  6782  0014B0  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  6783  0014B4  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  6784  0014B8  EC40  F02C         	call	_GameParameters_resetPos	;wreg free
  6785  0014BC                     l7160:
  6786                           
  6787                           ;stateMachine/gameController.c: 126:             if(LCD_InSlider(&(g->sldLevel),g->x,g->
      +                          y))
  6788  0014BC  0EB1               	movlw	177
  6789  0014BE  2437               	addwf	gameControllerController@g^0,w,c
  6790  0014C0  6E12               	movwf	LCD_InSlider@slider^0,c
  6791  0014C2  0E00               	movlw	0
  6792  0014C4  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6793  0014C6  6E13               	movwf	(LCD_InSlider@slider+1)^0,c
  6794  0014C8  EE20 F002          	lfsr	2,2
  6795  0014CC  5037               	movf	gameControllerController@g^0,w,c
  6796  0014CE  26D9               	addwf	fsr2l,f,c
  6797  0014D0  5038               	movf	(gameControllerController@g+1)^0,w,c
  6798  0014D2  22DA               	addwfc	fsr2h,f,c
  6799  0014D4  CFDE F014          	movff	postinc2,LCD_InSlider@posX
  6800  0014D8  CFDD F015          	movff	postdec2,LCD_InSlider@posX+1
  6801  0014DC  EE20 F004          	lfsr	2,4
  6802  0014E0  5037               	movf	gameControllerController@g^0,w,c
  6803  0014E2  26D9               	addwf	fsr2l,f,c
  6804  0014E4  5038               	movf	(gameControllerController@g+1)^0,w,c
  6805  0014E6  22DA               	addwfc	fsr2h,f,c
  6806  0014E8  CFDE F016          	movff	postinc2,LCD_InSlider@posY
  6807  0014EC  CFDD F017          	movff	postdec2,LCD_InSlider@posY+1
  6808  0014F0  EC4B  F025         	call	_LCD_InSlider	;wreg free
  6809  0014F4  0900               	iorlw	0
  6810  0014F6  B4D8               	btfsc	status,2,c
  6811  0014F8  D014               	goto	l7168
  6812                           
  6813                           ;stateMachine/gameController.c: 127:             {;stateMachine/gameController.c: 128:  
      +                                         levelController(g);
  6814  0014FA  C037  F016         	movff	gameControllerController@g,levelController@g
  6815  0014FE  C038  F017         	movff	gameControllerController@g+1,levelController@g+1
  6816  001502  EC69  F022         	call	_levelController	;wreg free
  6817                           
  6818                           ;stateMachine/gameController.c: 129:                 LCD_SliderUpdate(&(g->sldLevel));
  6819  001506  0EB1               	movlw	177
  6820  001508  2437               	addwf	gameControllerController@g^0,w,c
  6821  00150A  6E27               	movwf	LCD_SliderUpdate@slider^0,c
  6822  00150C  0E00               	movlw	0
  6823  00150E  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6824  001510  6E28               	movwf	(LCD_SliderUpdate@slider+1)^0,c
  6825  001512  EC8D  F00B         	call	_LCD_SliderUpdate	;wreg free
  6826                           
  6827                           ;stateMachine/gameController.c: 130:                 GameParameters_resetPos(g);
  6828  001516  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  6829  00151A  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  6830  00151E  EC40  F02C         	call	_GameParameters_resetPos	;wreg free
  6831  001522                     l7168:
  6832                           
  6833                           ;stateMachine/gameController.c: 133:             if(LCD_InButton(&(g->btnLeave),g->x,g->
      +                          y))
  6834  001522  0E50               	movlw	80
  6835  001524  2437               	addwf	gameControllerController@g^0,w,c
  6836  001526  6E12               	movwf	LCD_InButton@button^0,c
  6837  001528  0E00               	movlw	0
  6838  00152A  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6839  00152C  6E13               	movwf	(LCD_InButton@button+1)^0,c
  6840  00152E  EE20 F002          	lfsr	2,2
  6841  001532  5037               	movf	gameControllerController@g^0,w,c
  6842  001534  26D9               	addwf	fsr2l,f,c
  6843  001536  5038               	movf	(gameControllerController@g+1)^0,w,c
  6844  001538  22DA               	addwfc	fsr2h,f,c
  6845  00153A  CFDE F014          	movff	postinc2,LCD_InButton@posX
  6846  00153E  CFDD F015          	movff	postdec2,LCD_InButton@posX+1
  6847  001542  EE20 F004          	lfsr	2,4
  6848  001546  5037               	movf	gameControllerController@g^0,w,c
  6849  001548  26D9               	addwf	fsr2l,f,c
  6850  00154A  5038               	movf	(gameControllerController@g+1)^0,w,c
  6851  00154C  22DA               	addwfc	fsr2h,f,c
  6852  00154E  CFDE F016          	movff	postinc2,LCD_InButton@posY
  6853  001552  CFDD F017          	movff	postdec2,LCD_InButton@posY+1
  6854  001556  EC9F  F025         	call	_LCD_InButton	;wreg free
  6855  00155A  0900               	iorlw	0
  6856  00155C  B4D8               	btfsc	status,2,c
  6857  00155E  0012               	return	
  6858                           
  6859                           ;stateMachine/gameController.c: 134:             {;stateMachine/gameController.c: 135:  
      +                                         XF_pushEvent(evLeave,0);
  6860  001560  0E00               	movlw	0
  6861  001562  6E18               	movwf	XF_pushEvent@inISR^0,c
  6862  001564  0E08               	movlw	8
  6863  001566  ECCA  F029         	call	_XF_pushEvent
  6864                           
  6865                           ;stateMachine/gameController.c: 136:                 GameParameters_resetPos(g);
  6866  00156A  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  6867  00156E  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  6868  001572  EC40  F02C         	call	_GameParameters_resetPos	;wreg free
  6869  001576  0012               	return	
  6870  001578                     l7172:
  6871                           
  6872                           ;stateMachine/gameController.c: 141:             if(LCD_InButton(&(g->btnLeave),g->x,g->
      +                          y))
  6873  001578  0E50               	movlw	80
  6874  00157A  2437               	addwf	gameControllerController@g^0,w,c
  6875  00157C  6E12               	movwf	LCD_InButton@button^0,c
  6876  00157E  0E00               	movlw	0
  6877  001580  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6878  001582  6E13               	movwf	(LCD_InButton@button+1)^0,c
  6879  001584  EE20 F002          	lfsr	2,2
  6880  001588  5037               	movf	gameControllerController@g^0,w,c
  6881  00158A  26D9               	addwf	fsr2l,f,c
  6882  00158C  5038               	movf	(gameControllerController@g+1)^0,w,c
  6883  00158E  22DA               	addwfc	fsr2h,f,c
  6884  001590  CFDE F014          	movff	postinc2,LCD_InButton@posX
  6885  001594  CFDD F015          	movff	postdec2,LCD_InButton@posX+1
  6886  001598  EE20 F004          	lfsr	2,4
  6887  00159C  5037               	movf	gameControllerController@g^0,w,c
  6888  00159E  26D9               	addwf	fsr2l,f,c
  6889  0015A0  5038               	movf	(gameControllerController@g+1)^0,w,c
  6890  0015A2  22DA               	addwfc	fsr2h,f,c
  6891  0015A4  CFDE F016          	movff	postinc2,LCD_InButton@posY
  6892  0015A8  CFDD F017          	movff	postdec2,LCD_InButton@posY+1
  6893  0015AC  EC9F  F025         	call	_LCD_InButton	;wreg free
  6894  0015B0  0900               	iorlw	0
  6895  0015B2  B4D8               	btfsc	status,2,c
  6896  0015B4  D00B               	goto	l7176
  6897                           
  6898                           ;stateMachine/gameController.c: 142:             {;stateMachine/gameController.c: 143:  
      +                                         XF_pushEvent(evLeave,0);
  6899  0015B6  0E00               	movlw	0
  6900  0015B8  6E18               	movwf	XF_pushEvent@inISR^0,c
  6901  0015BA  0E08               	movlw	8
  6902  0015BC  ECCA  F029         	call	_XF_pushEvent
  6903                           
  6904                           ;stateMachine/gameController.c: 144:                 GameParameters_resetPos(g);
  6905  0015C0  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  6906  0015C4  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  6907  0015C8  EC40  F02C         	call	_GameParameters_resetPos	;wreg free
  6908  0015CC                     l7176:
  6909                           
  6910                           ;stateMachine/gameController.c: 147:             if (ev==evTimerPos)
  6911  0015CC  0E04               	movlw	4
  6912  0015CE  1839               	xorwf	gameControllerController@ev^0,w,c
  6913  0015D0  A4D8               	btfss	status,2,c
  6914  0015D2  D007               	goto	l7180
  6915                           
  6916                           ;stateMachine/gameController.c: 148:             {;stateMachine/gameController.c: 150:  
      +                                         moovePaddle1(g);
  6917  0015D4  C037  F01C         	movff	gameControllerController@g,moovePaddle1@g
  6918  0015D8  C038  F01D         	movff	gameControllerController@g+1,moovePaddle1@g+1
  6919  0015DC  ECF5  F024         	call	_moovePaddle1	;wreg free
  6920                           
  6921                           ;stateMachine/gameController.c: 152:             }
  6922  0015E0  0012               	return	
  6923  0015E2                     l7180:
  6924  0015E2  0E0A               	movlw	10
  6925  0015E4  1839               	xorwf	gameControllerController@ev^0,w,c
  6926  0015E6  A4D8               	btfss	status,2,c
  6927  0015E8  0012               	return	
  6928                           
  6929                           ;stateMachine/gameController.c: 154:             {;stateMachine/gameController.c: 156:  
      +                                         mooveBall(g);
  6930  0015EA  C037  F025         	movff	gameControllerController@g,mooveBall@g
  6931  0015EE  C038  F026         	movff	gameControllerController@g+1,mooveBall@g+1
  6932  0015F2  ECE0  F02B         	call	_mooveBall	;wreg free
  6933                           
  6934                           ;stateMachine/gameController.c: 157:                 moovePaddle2(g);
  6935  0015F6  C037  F01C         	movff	gameControllerController@g,moovePaddle2@g
  6936  0015FA  C038  F01D         	movff	gameControllerController@g+1,moovePaddle2@g+1
  6937  0015FE  EC8F  F021         	call	_moovePaddle2	;wreg free
  6938                           
  6939                           ;stateMachine/gameController.c: 158:                 XF_scheduleTimer(40-(g->level*10),e
      +                          vGameUpdate,0);
  6940  001602  EE20 F006          	lfsr	2,6
  6941  001606  5037               	movf	gameControllerController@g^0,w,c
  6942  001608  26D9               	addwf	fsr2l,f,c
  6943  00160A  5038               	movf	(gameControllerController@g+1)^0,w,c
  6944  00160C  22DA               	addwfc	fsr2h,f,c
  6945  00160E  CFDE F01A          	movff	postinc2,___wmul@multiplier
  6946  001612  CFDD F01B          	movff	postdec2,___wmul@multiplier+1
  6947  001616  0EFF               	movlw	255
  6948  001618  6E1D               	movwf	(___wmul@multiplicand+1)^0,c
  6949  00161A  0EF6               	movlw	246
  6950  00161C  6E1C               	movwf	___wmul@multiplicand^0,c
  6951  00161E  EC7B  F02C         	call	___wmul	;wreg free
  6952  001622  0E28               	movlw	40
  6953  001624  241A               	addwf	?___wmul^0,w,c
  6954  001626  6E20               	movwf	XF_scheduleTimer@tm^0,c
  6955  001628  0E00               	movlw	0
  6956  00162A  201B               	addwfc	(?___wmul+1)^0,w,c
  6957  00162C  6E21               	movwf	(XF_scheduleTimer@tm+1)^0,c
  6958  00162E  0E0A               	movlw	10
  6959  001630  6E22               	movwf	XF_scheduleTimer@ev^0,c
  6960  001632  0E00               	movlw	0
  6961  001634  6E23               	movwf	XF_scheduleTimer@inISR^0,c
  6962  001636  ECF3  F029         	call	_XF_scheduleTimer	;wreg free
  6963  00163A  0012               	return	
  6964  00163C                     l7186:
  6965                           
  6966                           ;stateMachine/gameController.c: 167:             if(LCD_InButton(&(g->btnNewGame),g->x,g
      +                          ->y))
  6967  00163C  0E68               	movlw	104
  6968  00163E  2437               	addwf	gameControllerController@g^0,w,c
  6969  001640  6E12               	movwf	LCD_InButton@button^0,c
  6970  001642  0E00               	movlw	0
  6971  001644  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6972  001646  6E13               	movwf	(LCD_InButton@button+1)^0,c
  6973  001648  EE20 F002          	lfsr	2,2
  6974  00164C  5037               	movf	gameControllerController@g^0,w,c
  6975  00164E  26D9               	addwf	fsr2l,f,c
  6976  001650  5038               	movf	(gameControllerController@g+1)^0,w,c
  6977  001652  22DA               	addwfc	fsr2h,f,c
  6978  001654  CFDE F014          	movff	postinc2,LCD_InButton@posX
  6979  001658  CFDD F015          	movff	postdec2,LCD_InButton@posX+1
  6980  00165C  EE20 F004          	lfsr	2,4
  6981  001660  5037               	movf	gameControllerController@g^0,w,c
  6982  001662  26D9               	addwf	fsr2l,f,c
  6983  001664  5038               	movf	(gameControllerController@g+1)^0,w,c
  6984  001666  22DA               	addwfc	fsr2h,f,c
  6985  001668  CFDE F016          	movff	postinc2,LCD_InButton@posY
  6986  00166C  CFDD F017          	movff	postdec2,LCD_InButton@posY+1
  6987  001670  EC9F  F025         	call	_LCD_InButton	;wreg free
  6988  001674  0900               	iorlw	0
  6989  001676  B4D8               	btfsc	status,2,c
  6990  001678  D00D               	goto	l7192
  6991                           
  6992                           ;stateMachine/gameController.c: 168:             {;stateMachine/gameController.c: 170:  
      +                                         GameParameters_init(g);
  6993  00167A  C037  F02B         	movff	gameControllerController@g,GameParameters_init@s
  6994  00167E  C038  F02C         	movff	gameControllerController@g+1,GameParameters_init@s+1
  6995  001682  EC8E  F00D         	call	_GameParameters_init	;wreg free
  6996                           
  6997                           ;stateMachine/gameController.c: 171:                 XF_pushEvent(evNewGame,0);
  6998  001686  0E00               	movlw	0
  6999  001688  6E18               	movwf	XF_pushEvent@inISR^0,c
  7000  00168A  0E0F               	movlw	15
  7001  00168C  ECCA  F029         	call	_XF_pushEvent
  7002                           
  7003                           ;stateMachine/gameController.c: 172:                 gameStateMachine=NOGAME;
  7004  001690  0E00               	movlw	0
  7005  001692  6E4C               	movwf	_gameStateMachine^0,c
  7006  001694                     l7192:
  7007                           
  7008                           ;stateMachine/gameController.c: 174:             if(LCD_InButton(&(g->btnTurnOff),g->x,g
      +                          ->y))
  7009  001694  0E80               	movlw	128
  7010  001696  2437               	addwf	gameControllerController@g^0,w,c
  7011  001698  6E12               	movwf	LCD_InButton@button^0,c
  7012  00169A  0E00               	movlw	0
  7013  00169C  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  7014  00169E  6E13               	movwf	(LCD_InButton@button+1)^0,c
  7015  0016A0  EE20 F002          	lfsr	2,2
  7016  0016A4  5037               	movf	gameControllerController@g^0,w,c
  7017  0016A6  26D9               	addwf	fsr2l,f,c
  7018  0016A8  5038               	movf	(gameControllerController@g+1)^0,w,c
  7019  0016AA  22DA               	addwfc	fsr2h,f,c
  7020  0016AC  CFDE F014          	movff	postinc2,LCD_InButton@posX
  7021  0016B0  CFDD F015          	movff	postdec2,LCD_InButton@posX+1
  7022  0016B4  EE20 F004          	lfsr	2,4
  7023  0016B8  5037               	movf	gameControllerController@g^0,w,c
  7024  0016BA  26D9               	addwf	fsr2l,f,c
  7025  0016BC  5038               	movf	(gameControllerController@g+1)^0,w,c
  7026  0016BE  22DA               	addwfc	fsr2h,f,c
  7027  0016C0  CFDE F016          	movff	postinc2,LCD_InButton@posY
  7028  0016C4  CFDD F017          	movff	postdec2,LCD_InButton@posY+1
  7029  0016C8  EC9F  F025         	call	_LCD_InButton	;wreg free
  7030  0016CC  0900               	iorlw	0
  7031  0016CE  B4D8               	btfsc	status,2,c
  7032  0016D0  0012               	return	
  7033                           
  7034                           ;stateMachine/gameController.c: 175:             {;stateMachine/gameController.c: 176:  
      +                                         XF_pushEvent(evSleep,0);
  7035  0016D2  0E00               	movlw	0
  7036  0016D4  6E18               	movwf	XF_pushEvent@inISR^0,c
  7037  0016D6  0E03               	movlw	3
  7038  0016D8  ECCA  F029         	call	_XF_pushEvent
  7039                           
  7040                           ;stateMachine/gameController.c: 177:                 GameParameters_resetPos(g);
  7041  0016DC  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  7042  0016E0  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  7043  0016E4  EC40  F02C         	call	_GameParameters_resetPos	;wreg free
  7044  0016E8  0012               	return	
  7045  0016EA                     l7198:
  7046  0016EA  504C               	movf	_gameStateMachine^0,w,c
  7047  0016EC  6E3A               	movwf	??_gameControllerController^0,c
  7048  0016EE  6A3B               	clrf	(??_gameControllerController+1)^0,c
  7049                           
  7050                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7051                           ; Switch size 1, requested type "simple"
  7052                           ; Number of cases is 1, Range of values is 0 to 0
  7053                           ; switch strategies available:
  7054                           ; Name         Instructions Cycles
  7055                           ; simple_byte            4     3 (average)
  7056                           ;	Chosen strategy is simple_byte
  7057  0016F0  503B               	movf	(??_gameControllerController+1)^0,w,c
  7058  0016F2  0A00               	xorlw	0	; case 0
  7059  0016F4  A4D8               	btfss	status,2,c
  7060  0016F6  0012               	return	
  7061                           
  7062                           ; Switch size 1, requested type "simple"
  7063                           ; Number of cases is 5, Range of values is 0 to 4
  7064                           ; switch strategies available:
  7065                           ; Name         Instructions Cycles
  7066                           ; simple_byte           16     9 (average)
  7067                           ;	Chosen strategy is simple_byte
  7068  0016F8  503A               	movf	??_gameControllerController^0,w,c
  7069  0016FA  0A00               	xorlw	0	; case 0
  7070  0016FC  B4D8               	btfsc	status,2,c
  7071  0016FE  D602               	goto	l7144
  7072  001700  0A01               	xorlw	1	; case 1
  7073  001702  B4D8               	btfsc	status,2,c
  7074  001704  D6A8               	goto	l7154
  7075  001706  0A03               	xorlw	3	; case 2
  7076  001708  B4D8               	btfsc	status,2,c
  7077  00170A  D736               	goto	l7172
  7078  00170C  0A01               	xorlw	1	; case 3
  7079  00170E  B4D8               	btfsc	status,2,c
  7080  001710  0012               	return	
  7081  001712  0A07               	xorlw	7	; case 4
  7082  001714  A4D8               	btfss	status,2,c
  7083  001716  0012               	return	
  7084  001718  D791               	goto	l7186
  7085  00171A                     __end_of_gameControllerController:
  7086                           	callstack 0
  7087                           
  7088 ;; *************** function _moovePaddle2 *****************
  7089 ;; Defined at:
  7090 ;;		line 25 in file "gameFunction.c"
  7091 ;; Parameters:    Size  Location     Type
  7092 ;;  g               2   27[COMRAM] PTR struct GameParameter
  7093 ;;		 -> g1(240), 
  7094 ;; Auto vars:     Size  Location     Type
  7095 ;;		None
  7096 ;; Return value:  Size  Location     Type
  7097 ;;                  1    wreg      void 
  7098 ;; Registers used:
  7099 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7100 ;; Tracked objects:
  7101 ;;		On entry : 0/0
  7102 ;;		On exit  : 0/0
  7103 ;;		Unchanged: 0/0
  7104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7105 ;;      Params:         2       0       0       0       0       0       0
  7106 ;;      Locals:         0       0       0       0       0       0       0
  7107 ;;      Temps:          6       0       0       0       0       0       0
  7108 ;;      Totals:         8       0       0       0       0       0       0
  7109 ;;Total ram usage:        8 bytes
  7110 ;; Hardware stack levels used: 1
  7111 ;; Hardware stack levels required when called: 6
  7112 ;; This function calls:
  7113 ;;		_Paddle_addX
  7114 ;;		_XF_pushEvent
  7115 ;; This function is called by:
  7116 ;;		_gameControllerController
  7117 ;; This function uses a non-reentrant model
  7118 ;;
  7119                           
  7120                           	psect	text25
  7121  00431E                     __ptext25:
  7122                           	callstack 0
  7123  00431E                     _moovePaddle2:
  7124                           	callstack 20
  7125                           
  7126                           ;gameFunction.c: 25: void moovePaddle2(GameParameters* g);gameFunction.c: 26: {;gameFunc
      +                          tion.c: 28:     if(g->p2.x+(50/2)<g->b.x-2)
  7127                           
  7128                           ;incstack = 0
  7129  00431E  0EFE               	movlw	254
  7130  004320  6E1E               	movwf	??_moovePaddle2^0,c
  7131  004322  0EFF               	movlw	255
  7132  004324  6E1F               	movwf	(??_moovePaddle2+1)^0,c
  7133  004326  EE20 F0CA          	lfsr	2,202
  7134  00432A  501C               	movf	moovePaddle2@g^0,w,c
  7135  00432C  26D9               	addwf	fsr2l,f,c
  7136  00432E  501D               	movf	(moovePaddle2@g+1)^0,w,c
  7137  004330  22DA               	addwfc	fsr2h,f,c
  7138  004332  CFDE F020          	movff	postinc2,??_moovePaddle2+2
  7139  004336  CFDD F021          	movff	postdec2,??_moovePaddle2+3
  7140  00433A  501E               	movf	??_moovePaddle2^0,w,c
  7141  00433C  2620               	addwf	(??_moovePaddle2+2)^0,f,c
  7142  00433E  501F               	movf	(??_moovePaddle2+1)^0,w,c
  7143  004340  2221               	addwfc	(??_moovePaddle2+3)^0,f,c
  7144  004342  EE20 F0E0          	lfsr	2,224
  7145  004346  501C               	movf	moovePaddle2@g^0,w,c
  7146  004348  26D9               	addwf	fsr2l,f,c
  7147  00434A  501D               	movf	(moovePaddle2@g+1)^0,w,c
  7148  00434C  22DA               	addwfc	fsr2h,f,c
  7149  00434E  CFDE F022          	movff	postinc2,??_moovePaddle2+4
  7150  004352  CFDD F023          	movff	postdec2,??_moovePaddle2+5
  7151  004356  0E19               	movlw	25
  7152  004358  2622               	addwf	(??_moovePaddle2+4)^0,f,c
  7153  00435A  0E00               	movlw	0
  7154  00435C  2223               	addwfc	(??_moovePaddle2+5)^0,f,c
  7155  00435E  5020               	movf	(??_moovePaddle2+2)^0,w,c
  7156  004360  5C22               	subwf	(??_moovePaddle2+4)^0,w,c
  7157  004362  5021               	movf	(??_moovePaddle2+3)^0,w,c
  7158  004364  5823               	subwfb	(??_moovePaddle2+5)^0,w,c
  7159  004366  B0D8               	btfsc	status,0,c
  7160  004368  D016               	goto	l7066
  7161                           
  7162                           ;gameFunction.c: 29:     {;gameFunction.c: 30:         Paddle_addX(&g->p2,2,1);
  7163  00436A  0EE0               	movlw	224
  7164  00436C  241C               	addwf	moovePaddle2@g^0,w,c
  7165  00436E  6E12               	movwf	Paddle_addX@p^0,c
  7166  004370  0E00               	movlw	0
  7167  004372  201D               	addwfc	(moovePaddle2@g+1)^0,w,c
  7168  004374  6E13               	movwf	(Paddle_addX@p+1)^0,c
  7169  004376  0E00               	movlw	0
  7170  004378  6E15               	movwf	(Paddle_addX@value+1)^0,c
  7171  00437A  0E02               	movlw	2
  7172  00437C  6E14               	movwf	Paddle_addX@value^0,c
  7173  00437E  0E00               	movlw	0
  7174  004380  6E17               	movwf	(Paddle_addX@add+1)^0,c
  7175  004382  0E01               	movlw	1
  7176  004384  6E16               	movwf	Paddle_addX@add^0,c
  7177  004386  ECCE  F022         	call	_Paddle_addX	;wreg free
  7178                           
  7179                           ;gameFunction.c: 31:         XF_pushEvent(evRedrawPaddle2,0);
  7180  00438A  0E00               	movlw	0
  7181  00438C  6E18               	movwf	XF_pushEvent@inISR^0,c
  7182  00438E  0E0C               	movlw	12
  7183  004390  ECCA  F029         	call	_XF_pushEvent
  7184                           
  7185                           ;gameFunction.c: 32:     }
  7186  004394  0012               	return	
  7187  004396                     l7066:
  7188  004396  EE20 F0E0          	lfsr	2,224
  7189  00439A  501C               	movf	moovePaddle2@g^0,w,c
  7190  00439C  26D9               	addwf	fsr2l,f,c
  7191  00439E  501D               	movf	(moovePaddle2@g+1)^0,w,c
  7192  0043A0  22DA               	addwfc	fsr2h,f,c
  7193  0043A2  CFDE F01E          	movff	postinc2,??_moovePaddle2
  7194  0043A6  CFDD F01F          	movff	postdec2,??_moovePaddle2+1
  7195  0043AA  0E19               	movlw	25
  7196  0043AC  261E               	addwf	??_moovePaddle2^0,f,c
  7197  0043AE  0E00               	movlw	0
  7198  0043B0  221F               	addwfc	(??_moovePaddle2+1)^0,f,c
  7199  0043B2  EE20 F0CA          	lfsr	2,202
  7200  0043B6  501C               	movf	moovePaddle2@g^0,w,c
  7201  0043B8  26D9               	addwf	fsr2l,f,c
  7202  0043BA  501D               	movf	(moovePaddle2@g+1)^0,w,c
  7203  0043BC  22DA               	addwfc	fsr2h,f,c
  7204  0043BE  CFDE F020          	movff	postinc2,??_moovePaddle2+2
  7205  0043C2  CFDD F021          	movff	postdec2,??_moovePaddle2+3
  7206  0043C6  0E02               	movlw	2
  7207  0043C8  2620               	addwf	(??_moovePaddle2+2)^0,f,c
  7208  0043CA  0E00               	movlw	0
  7209  0043CC  2221               	addwfc	(??_moovePaddle2+3)^0,f,c
  7210  0043CE  501E               	movf	??_moovePaddle2^0,w,c
  7211  0043D0  5C20               	subwf	(??_moovePaddle2+2)^0,w,c
  7212  0043D2  501F               	movf	(??_moovePaddle2+1)^0,w,c
  7213  0043D4  5821               	subwfb	(??_moovePaddle2+3)^0,w,c
  7214  0043D6  B0D8               	btfsc	status,0,c
  7215  0043D8  0012               	return	
  7216                           
  7217                           ;gameFunction.c: 34:     {;gameFunction.c: 35:         Paddle_addX(&g->p2,2,0);
  7218  0043DA  0EE0               	movlw	224
  7219  0043DC  241C               	addwf	moovePaddle2@g^0,w,c
  7220  0043DE  6E12               	movwf	Paddle_addX@p^0,c
  7221  0043E0  0E00               	movlw	0
  7222  0043E2  201D               	addwfc	(moovePaddle2@g+1)^0,w,c
  7223  0043E4  6E13               	movwf	(Paddle_addX@p+1)^0,c
  7224  0043E6  0E00               	movlw	0
  7225  0043E8  6E15               	movwf	(Paddle_addX@value+1)^0,c
  7226  0043EA  0E02               	movlw	2
  7227  0043EC  6E14               	movwf	Paddle_addX@value^0,c
  7228  0043EE  0E00               	movlw	0
  7229  0043F0  6E17               	movwf	(Paddle_addX@add+1)^0,c
  7230  0043F2  0E00               	movlw	0
  7231  0043F4  6E16               	movwf	Paddle_addX@add^0,c
  7232  0043F6  ECCE  F022         	call	_Paddle_addX	;wreg free
  7233                           
  7234                           ;gameFunction.c: 36:         XF_pushEvent(evRedrawPaddle2,0);
  7235  0043FA  0E00               	movlw	0
  7236  0043FC  6E18               	movwf	XF_pushEvent@inISR^0,c
  7237  0043FE  0E0C               	movlw	12
  7238  004400  ECCA  F029         	call	_XF_pushEvent
  7239  004404  0012               	return		;funcret
  7240  004406                     __end_of_moovePaddle2:
  7241                           	callstack 0
  7242                           
  7243 ;; *************** function _moovePaddle1 *****************
  7244 ;; Defined at:
  7245 ;;		line 5 in file "gameFunction.c"
  7246 ;; Parameters:    Size  Location     Type
  7247 ;;  g               2   27[COMRAM] PTR struct GameParameter
  7248 ;;		 -> g1(240), 
  7249 ;; Auto vars:     Size  Location     Type
  7250 ;;		None
  7251 ;; Return value:  Size  Location     Type
  7252 ;;                  1    wreg      void 
  7253 ;; Registers used:
  7254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7255 ;; Tracked objects:
  7256 ;;		On entry : 0/0
  7257 ;;		On exit  : 0/0
  7258 ;;		Unchanged: 0/0
  7259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7260 ;;      Params:         2       0       0       0       0       0       0
  7261 ;;      Locals:         0       0       0       0       0       0       0
  7262 ;;      Temps:          2       0       0       0       0       0       0
  7263 ;;      Totals:         4       0       0       0       0       0       0
  7264 ;;Total ram usage:        4 bytes
  7265 ;; Hardware stack levels used: 1
  7266 ;; Hardware stack levels required when called: 6
  7267 ;; This function calls:
  7268 ;;		_GameParameters_resetPos
  7269 ;;		_Paddle_addX
  7270 ;;		_XF_pushEvent
  7271 ;; This function is called by:
  7272 ;;		_gameControllerController
  7273 ;; This function uses a non-reentrant model
  7274 ;;
  7275                           
  7276                           	psect	text26
  7277  0049EA                     __ptext26:
  7278                           	callstack 0
  7279  0049EA                     _moovePaddle1:
  7280                           	callstack 20
  7281                           
  7282                           ;gameFunction.c: 5: void moovePaddle1(GameParameters* g);gameFunction.c: 6: {;gameFuncti
      +                          on.c: 8:     if((g->x>0)&&(g->x<110))
  7283                           
  7284                           ;incstack = 0
  7285  0049EA  EE20 F002          	lfsr	2,2
  7286  0049EE  501C               	movf	moovePaddle1@g^0,w,c
  7287  0049F0  26D9               	addwf	fsr2l,f,c
  7288  0049F2  501D               	movf	(moovePaddle1@g+1)^0,w,c
  7289  0049F4  22DA               	addwfc	fsr2h,f,c
  7290  0049F6  50DE               	movf	postinc2,w,c
  7291  0049F8  10DE               	iorwf	postinc2,w,c
  7292  0049FA  B4D8               	btfsc	status,2,c
  7293  0049FC  D023               	goto	l7056
  7294  0049FE  EE20 F002          	lfsr	2,2
  7295  004A02  501C               	movf	moovePaddle1@g^0,w,c
  7296  004A04  26D9               	addwf	fsr2l,f,c
  7297  004A06  501D               	movf	(moovePaddle1@g+1)^0,w,c
  7298  004A08  22DA               	addwfc	fsr2h,f,c
  7299  004A0A  0E01               	movlw	1
  7300  004A0C  50DB               	movf	plusw2,w,c
  7301  004A0E  E11A               	bnz	l7056
  7302  004A10  0E6E               	movlw	110
  7303  004A12  5CDE               	subwf	postinc2,w,c
  7304  004A14  B0D8               	btfsc	status,0,c
  7305  004A16  D016               	goto	l7056
  7306                           
  7307                           ;gameFunction.c: 9:     {;gameFunction.c: 10:         GameParameters_resetPos(g);
  7308  004A18  C01C  F012         	movff	moovePaddle1@g,GameParameters_resetPos@s
  7309  004A1C  C01D  F013         	movff	moovePaddle1@g+1,GameParameters_resetPos@s+1
  7310  004A20  EC40  F02C         	call	_GameParameters_resetPos	;wreg free
  7311                           
  7312                           ;gameFunction.c: 11:         Paddle_addX(&g->p1,1,0);
  7313  004A24  0ED6               	movlw	214
  7314  004A26  241C               	addwf	moovePaddle1@g^0,w,c
  7315  004A28  6E12               	movwf	Paddle_addX@p^0,c
  7316  004A2A  0E00               	movlw	0
  7317  004A2C  201D               	addwfc	(moovePaddle1@g+1)^0,w,c
  7318  004A2E  6E13               	movwf	(Paddle_addX@p+1)^0,c
  7319  004A30  0E00               	movlw	0
  7320  004A32  6E15               	movwf	(Paddle_addX@value+1)^0,c
  7321  004A34  0E01               	movlw	1
  7322  004A36  6E14               	movwf	Paddle_addX@value^0,c
  7323  004A38  0E00               	movlw	0
  7324  004A3A  6E17               	movwf	(Paddle_addX@add+1)^0,c
  7325  004A3C  0E00               	movlw	0
  7326  004A3E  6E16               	movwf	Paddle_addX@add^0,c
  7327  004A40  ECCE  F022         	call	_Paddle_addX	;wreg free
  7328  004A44                     l7056:
  7329                           
  7330                           ;gameFunction.c: 14:     if(g->x>=130)
  7331  004A44  EE20 F002          	lfsr	2,2
  7332  004A48  501C               	movf	moovePaddle1@g^0,w,c
  7333  004A4A  26D9               	addwf	fsr2l,f,c
  7334  004A4C  501D               	movf	(moovePaddle1@g+1)^0,w,c
  7335  004A4E  22DA               	addwfc	fsr2h,f,c
  7336  004A50  0E01               	movlw	1
  7337  004A52  50DB               	movf	plusw2,w,c
  7338  004A54  E104               	bnz	u4670
  7339  004A56  0E82               	movlw	130
  7340  004A58  5CDE               	subwf	postinc2,w,c
  7341  004A5A  A0D8               	btfss	status,0,c
  7342  004A5C  D016               	goto	l799
  7343  004A5E                     u4670:
  7344                           
  7345                           ;gameFunction.c: 15:     {;gameFunction.c: 16:         GameParameters_resetPos(g);
  7346  004A5E  C01C  F012         	movff	moovePaddle1@g,GameParameters_resetPos@s
  7347  004A62  C01D  F013         	movff	moovePaddle1@g+1,GameParameters_resetPos@s+1
  7348  004A66  EC40  F02C         	call	_GameParameters_resetPos	;wreg free
  7349                           
  7350                           ;gameFunction.c: 17:         Paddle_addX(&g->p1,1,1);
  7351  004A6A  0ED6               	movlw	214
  7352  004A6C  241C               	addwf	moovePaddle1@g^0,w,c
  7353  004A6E  6E12               	movwf	Paddle_addX@p^0,c
  7354  004A70  0E00               	movlw	0
  7355  004A72  201D               	addwfc	(moovePaddle1@g+1)^0,w,c
  7356  004A74  6E13               	movwf	(Paddle_addX@p+1)^0,c
  7357  004A76  0E00               	movlw	0
  7358  004A78  6E15               	movwf	(Paddle_addX@value+1)^0,c
  7359  004A7A  0E01               	movlw	1
  7360  004A7C  6E14               	movwf	Paddle_addX@value^0,c
  7361  004A7E  0E00               	movlw	0
  7362  004A80  6E17               	movwf	(Paddle_addX@add+1)^0,c
  7363  004A82  0E01               	movlw	1
  7364  004A84  6E16               	movwf	Paddle_addX@add^0,c
  7365  004A86  ECCE  F022         	call	_Paddle_addX	;wreg free
  7366  004A8A                     l799:
  7367                           
  7368                           ;gameFunction.c: 19:     XF_pushEvent(evRedrawPaddle1,0);
  7369  004A8A  0E00               	movlw	0
  7370  004A8C  6E18               	movwf	XF_pushEvent@inISR^0,c
  7371  004A8E  0E0B               	movlw	11
  7372  004A90  ECCA  F029         	call	_XF_pushEvent
  7373  004A94  0012               	return		;funcret
  7374  004A96                     __end_of_moovePaddle1:
  7375                           	callstack 0
  7376                           
  7377 ;; *************** function _Paddle_addX *****************
  7378 ;; Defined at:
  7379 ;;		line 28 in file "class/paddle.c"
  7380 ;; Parameters:    Size  Location     Type
  7381 ;;  p               2   17[COMRAM] PTR struct Paddle
  7382 ;;		 -> g1(240), 
  7383 ;;  value           2   19[COMRAM] unsigned short 
  7384 ;;  add             2   21[COMRAM] unsigned short 
  7385 ;; Auto vars:     Size  Location     Type
  7386 ;;		None
  7387 ;; Return value:  Size  Location     Type
  7388 ;;                  1    wreg      void 
  7389 ;; Registers used:
  7390 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7391 ;; Tracked objects:
  7392 ;;		On entry : 0/0
  7393 ;;		On exit  : 0/0
  7394 ;;		Unchanged: 0/0
  7395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7396 ;;      Params:         6       0       0       0       0       0       0
  7397 ;;      Locals:         0       0       0       0       0       0       0
  7398 ;;      Temps:          4       0       0       0       0       0       0
  7399 ;;      Totals:        10       0       0       0       0       0       0
  7400 ;;Total ram usage:       10 bytes
  7401 ;; Hardware stack levels used: 1
  7402 ;; Hardware stack levels required when called: 4
  7403 ;; This function calls:
  7404 ;;		Nothing
  7405 ;; This function is called by:
  7406 ;;		_moovePaddle1
  7407 ;;		_moovePaddle2
  7408 ;; This function uses a non-reentrant model
  7409 ;;
  7410                           
  7411                           	psect	text27
  7412  00459C                     __ptext27:
  7413                           	callstack 0
  7414  00459C                     _Paddle_addX:
  7415                           	callstack 21
  7416                           
  7417                           ;class/paddle.c: 28: void Paddle_addX(struct Paddle* p,uint16_t value,uint16_t add);clas
      +                          s/paddle.c: 29: {;class/paddle.c: 30:     if(add==1)
  7418                           
  7419                           ;incstack = 0
  7420  00459C  0416               	decf	Paddle_addX@add^0,w,c
  7421  00459E  1017               	iorwf	(Paddle_addX@add+1)^0,w,c
  7422  0045A0  A4D8               	btfss	status,2,c
  7423  0045A2  D02F               	goto	l6482
  7424                           
  7425                           ;class/paddle.c: 31:     {;class/paddle.c: 32:         p->x=(p->x)+value;
  7426  0045A4  C012  FFD9         	movff	Paddle_addX@p,fsr2l
  7427  0045A8  C013  FFDA         	movff	Paddle_addX@p+1,fsr2h
  7428  0045AC  CFDE F018          	movff	postinc2,??_Paddle_addX
  7429  0045B0  CFDD F019          	movff	postdec2,??_Paddle_addX+1
  7430  0045B4  5014               	movf	Paddle_addX@value^0,w,c
  7431  0045B6  2618               	addwf	??_Paddle_addX^0,f,c
  7432  0045B8  5015               	movf	(Paddle_addX@value+1)^0,w,c
  7433  0045BA  2219               	addwfc	(??_Paddle_addX+1)^0,f,c
  7434  0045BC  C012  FFD9         	movff	Paddle_addX@p,fsr2l
  7435  0045C0  C013  FFDA         	movff	Paddle_addX@p+1,fsr2h
  7436  0045C4  C018  FFDE         	movff	??_Paddle_addX,postinc2
  7437  0045C8  C019  FFDD         	movff	??_Paddle_addX+1,postdec2
  7438                           
  7439                           ;class/paddle.c: 33:         if((p->x+50)>239)
  7440  0045CC  C012  FFD9         	movff	Paddle_addX@p,fsr2l
  7441  0045D0  C013  FFDA         	movff	Paddle_addX@p+1,fsr2h
  7442  0045D4  CFDE F018          	movff	postinc2,??_Paddle_addX
  7443  0045D8  CFDD F019          	movff	postdec2,??_Paddle_addX+1
  7444  0045DC  0E32               	movlw	50
  7445  0045DE  2618               	addwf	??_Paddle_addX^0,f,c
  7446  0045E0  0E00               	movlw	0
  7447  0045E2  2219               	addwfc	(??_Paddle_addX+1)^0,f,c
  7448  0045E4  5019               	movf	(??_Paddle_addX+1)^0,w,c
  7449  0045E6  E104               	bnz	u3990
  7450  0045E8  0EF0               	movlw	240
  7451  0045EA  5C18               	subwf	??_Paddle_addX^0,w,c
  7452  0045EC  A0D8               	btfss	status,0,c
  7453  0045EE  0012               	return	
  7454  0045F0                     u3990:
  7455                           
  7456                           ;class/paddle.c: 34:         {;class/paddle.c: 35:             p->x=239-(50);
  7457  0045F0  C012  FFD9         	movff	Paddle_addX@p,fsr2l
  7458  0045F4  C013  FFDA         	movff	Paddle_addX@p+1,fsr2h
  7459  0045F8  0EBD               	movlw	189
  7460  0045FA  6EDE               	movwf	postinc2,c
  7461  0045FC  0E00               	movlw	0
  7462  0045FE  6EDD               	movwf	postdec2,c
  7463  004600  0012               	return	
  7464  004602                     l6482:
  7465                           
  7466                           ;class/paddle.c: 39:     {;class/paddle.c: 40:         if((p->x)<value+1)
  7467  004602  0E01               	movlw	1
  7468  004604  2414               	addwf	Paddle_addX@value^0,w,c
  7469  004606  6E18               	movwf	??_Paddle_addX^0,c
  7470  004608  0E00               	movlw	0
  7471  00460A  2015               	addwfc	(Paddle_addX@value+1)^0,w,c
  7472  00460C  6E19               	movwf	(??_Paddle_addX+1)^0,c
  7473  00460E  C012  FFD9         	movff	Paddle_addX@p,fsr2l
  7474  004612  C013  FFDA         	movff	Paddle_addX@p+1,fsr2h
  7475  004616  5018               	movf	??_Paddle_addX^0,w,c
  7476  004618  5CDE               	subwf	postinc2,w,c
  7477  00461A  5019               	movf	(??_Paddle_addX+1)^0,w,c
  7478  00461C  58DE               	subwfb	postinc2,w,c
  7479  00461E  B0D8               	btfsc	status,0,c
  7480  004620  D009               	goto	l6486
  7481                           
  7482                           ;class/paddle.c: 41:         {;class/paddle.c: 42:             p->x=0;
  7483  004622  C012  FFD9         	movff	Paddle_addX@p,fsr2l
  7484  004626  C013  FFDA         	movff	Paddle_addX@p+1,fsr2h
  7485  00462A  0E00               	movlw	0
  7486  00462C  6EDE               	movwf	postinc2,c
  7487  00462E  0E00               	movlw	0
  7488  004630  6EDD               	movwf	postdec2,c
  7489                           
  7490                           ;class/paddle.c: 43:         }
  7491  004632  0012               	return	
  7492  004634                     l6486:
  7493                           
  7494                           ;class/paddle.c: 45:         {;class/paddle.c: 46:             p->x=(p->x)-value;
  7495  004634  C012  FFD9         	movff	Paddle_addX@p,fsr2l
  7496  004638  C013  FFDA         	movff	Paddle_addX@p+1,fsr2h
  7497  00463C  CFDE F018          	movff	postinc2,??_Paddle_addX
  7498  004640  CFDD F019          	movff	postdec2,??_Paddle_addX+1
  7499  004644  5014               	movf	Paddle_addX@value^0,w,c
  7500  004646  5E18               	subwf	??_Paddle_addX^0,f,c
  7501  004648  5015               	movf	(Paddle_addX@value+1)^0,w,c
  7502  00464A  5A19               	subwfb	(??_Paddle_addX+1)^0,f,c
  7503  00464C  C012  FFD9         	movff	Paddle_addX@p,fsr2l
  7504  004650  C013  FFDA         	movff	Paddle_addX@p+1,fsr2h
  7505  004654  C018  FFDE         	movff	??_Paddle_addX,postinc2
  7506  004658  C019  FFDD         	movff	??_Paddle_addX+1,postdec2
  7507  00465C  0012               	return		;funcret
  7508  00465E                     __end_of_Paddle_addX:
  7509                           	callstack 0
  7510                           
  7511 ;; *************** function _GameParameters_resetPos *****************
  7512 ;; Defined at:
  7513 ;;		line 62 in file "class/gameParameters.c"
  7514 ;; Parameters:    Size  Location     Type
  7515 ;;  s               2   17[COMRAM] PTR struct GameParameter
  7516 ;;		 -> g1(240), 
  7517 ;; Auto vars:     Size  Location     Type
  7518 ;;		None
  7519 ;; Return value:  Size  Location     Type
  7520 ;;                  1    wreg      void 
  7521 ;; Registers used:
  7522 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7523 ;; Tracked objects:
  7524 ;;		On entry : 0/0
  7525 ;;		On exit  : 0/0
  7526 ;;		Unchanged: 0/0
  7527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7528 ;;      Params:         2       0       0       0       0       0       0
  7529 ;;      Locals:         0       0       0       0       0       0       0
  7530 ;;      Temps:          0       0       0       0       0       0       0
  7531 ;;      Totals:         2       0       0       0       0       0       0
  7532 ;;Total ram usage:        2 bytes
  7533 ;; Hardware stack levels used: 1
  7534 ;; Hardware stack levels required when called: 4
  7535 ;; This function calls:
  7536 ;;		Nothing
  7537 ;; This function is called by:
  7538 ;;		_gameControllerController
  7539 ;;		_moovePaddle1
  7540 ;; This function uses a non-reentrant model
  7541 ;;
  7542                           
  7543                           	psect	text28
  7544  005880                     __ptext28:
  7545                           	callstack 0
  7546  005880                     _GameParameters_resetPos:
  7547                           	callstack 21
  7548                           
  7549                           ;class/gameParameters.c: 62: void GameParameters_resetPos(struct GameParameters* s);clas
      +                          s/gameParameters.c: 63: {;class/gameParameters.c: 64:     s->x=0;
  7550                           
  7551                           ;incstack = 0
  7552  005880  EE20 F002          	lfsr	2,2
  7553  005884  5012               	movf	GameParameters_resetPos@s^0,w,c
  7554  005886  26D9               	addwf	fsr2l,f,c
  7555  005888  5013               	movf	(GameParameters_resetPos@s+1)^0,w,c
  7556  00588A  22DA               	addwfc	fsr2h,f,c
  7557  00588C  0E00               	movlw	0
  7558  00588E  6EDE               	movwf	postinc2,c
  7559  005890  0E00               	movlw	0
  7560  005892  6EDD               	movwf	postdec2,c
  7561                           
  7562                           ;class/gameParameters.c: 65:     s->y=0;
  7563  005894  EE20 F004          	lfsr	2,4
  7564  005898  5012               	movf	GameParameters_resetPos@s^0,w,c
  7565  00589A  26D9               	addwf	fsr2l,f,c
  7566  00589C  5013               	movf	(GameParameters_resetPos@s+1)^0,w,c
  7567  00589E  22DA               	addwfc	fsr2h,f,c
  7568  0058A0  0E00               	movlw	0
  7569  0058A2  6EDE               	movwf	postinc2,c
  7570  0058A4  0E00               	movlw	0
  7571  0058A6  6EDD               	movwf	postdec2,c
  7572  0058A8  0012               	return		;funcret
  7573  0058AA                     __end_of_GameParameters_resetPos:
  7574                           	callstack 0
  7575                           
  7576 ;; *************** function _mooveBall *****************
  7577 ;; Defined at:
  7578 ;;		line 44 in file "gameFunction.c"
  7579 ;; Parameters:    Size  Location     Type
  7580 ;;  g               2   36[COMRAM] PTR struct GameParameter
  7581 ;;		 -> g1(240), 
  7582 ;; Auto vars:     Size  Location     Type
  7583 ;;		None
  7584 ;; Return value:  Size  Location     Type
  7585 ;;                  1    wreg      void 
  7586 ;; Registers used:
  7587 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7588 ;; Tracked objects:
  7589 ;;		On entry : 0/0
  7590 ;;		On exit  : 0/0
  7591 ;;		Unchanged: 0/0
  7592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7593 ;;      Params:         2       0       0       0       0       0       0
  7594 ;;      Locals:         0       0       0       0       0       0       0
  7595 ;;      Temps:          0       0       0       0       0       0       0
  7596 ;;      Totals:         2       0       0       0       0       0       0
  7597 ;;Total ram usage:        2 bytes
  7598 ;; Hardware stack levels used: 1
  7599 ;; Hardware stack levels required when called: 7
  7600 ;; This function calls:
  7601 ;;		_Ball_Update
  7602 ;;		_XF_pushEvent
  7603 ;;		_checkCollision
  7604 ;; This function is called by:
  7605 ;;		_gameControllerController
  7606 ;; This function uses a non-reentrant model
  7607 ;;
  7608                           
  7609                           	psect	text29
  7610  0057C0                     __ptext29:
  7611                           	callstack 0
  7612  0057C0                     _mooveBall:
  7613                           	callstack 19
  7614                           
  7615                           ;gameFunction.c: 44: void mooveBall(GameParameters* g);gameFunction.c: 45: {;gameFunctio
      +                          n.c: 46:     checkCollision(g);
  7616                           
  7617                           ;incstack = 0
  7618  0057C0  C025  F01B         	movff	mooveBall@g,checkCollision@g
  7619  0057C4  C026  F01C         	movff	mooveBall@g+1,checkCollision@g+1
  7620  0057C8  EC38  F000         	call	_checkCollision	;wreg free
  7621                           
  7622                           ;gameFunction.c: 47:     Ball_Update(&g->b);
  7623  0057CC  0ECA               	movlw	202
  7624  0057CE  2425               	addwf	mooveBall@g^0,w,c
  7625  0057D0  6E12               	movwf	Ball_Update@b^0,c
  7626  0057D2  0E00               	movlw	0
  7627  0057D4  2026               	addwfc	(mooveBall@g+1)^0,w,c
  7628  0057D6  6E13               	movwf	(Ball_Update@b+1)^0,c
  7629  0057D8  EC3F  F028         	call	_Ball_Update	;wreg free
  7630                           
  7631                           ;gameFunction.c: 48:     XF_pushEvent(evRedrawBall,0);
  7632  0057DC  0E00               	movlw	0
  7633  0057DE  6E18               	movwf	XF_pushEvent@inISR^0,c
  7634  0057E0  0E0D               	movlw	13
  7635  0057E2  ECCA  F029         	call	_XF_pushEvent
  7636                           
  7637                           ;gameFunction.c: 49:     XF_pushEvent(evRedrawScore,0);
  7638  0057E6  0E00               	movlw	0
  7639  0057E8  6E18               	movwf	XF_pushEvent@inISR^0,c
  7640  0057EA  0E0E               	movlw	14
  7641  0057EC  ECCA  F029         	call	_XF_pushEvent
  7642  0057F0  0012               	return		;funcret
  7643  0057F2                     __end_of_mooveBall:
  7644                           	callstack 0
  7645                           
  7646 ;; *************** function _checkCollision *****************
  7647 ;; Defined at:
  7648 ;;		line 55 in file "gameFunction.c"
  7649 ;; Parameters:    Size  Location     Type
  7650 ;;  g               2   26[COMRAM] PTR struct GameParameter
  7651 ;;		 -> g1(240), 
  7652 ;; Auto vars:     Size  Location     Type
  7653 ;;  s              20    0        unsigned char [20]
  7654 ;; Return value:  Size  Location     Type
  7655 ;;                  1    wreg      void 
  7656 ;; Registers used:
  7657 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7658 ;; Tracked objects:
  7659 ;;		On entry : 0/0
  7660 ;;		On exit  : 0/0
  7661 ;;		Unchanged: 0/0
  7662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7663 ;;      Params:         2       0       0       0       0       0       0
  7664 ;;      Locals:         0       0       0       0       0       0       0
  7665 ;;      Temps:          8       0       0       0       0       0       0
  7666 ;;      Totals:        10       0       0       0       0       0       0
  7667 ;;Total ram usage:       10 bytes
  7668 ;; Hardware stack levels used: 1
  7669 ;; Hardware stack levels required when called: 6
  7670 ;; This function calls:
  7671 ;;		_XF_pushEvent
  7672 ;; This function is called by:
  7673 ;;		_mooveBall
  7674 ;; This function uses a non-reentrant model
  7675 ;;
  7676                           
  7677                           	psect	text30
  7678  000070                     __ptext30:
  7679                           	callstack 0
  7680  000070                     _checkCollision:
  7681                           	callstack 19
  7682                           
  7683                           ;gameFunction.c: 55: void checkCollision(GameParameters* g);gameFunction.c: 56: {;gameFu
      +                          nction.c: 57:     char s[20];;gameFunction.c: 59:     if(g->b.x+g->b.dx+8>=239)
  7684                           
  7685                           ;incstack = 0
  7686  000070  EE20 F0D2          	lfsr	2,210
  7687  000074  501B               	movf	checkCollision@g^0,w,c
  7688  000076  26D9               	addwf	fsr2l,f,c
  7689  000078  501C               	movf	(checkCollision@g+1)^0,w,c
  7690  00007A  22DA               	addwfc	fsr2h,f,c
  7691  00007C  CFDE F01D          	movff	postinc2,??_checkCollision
  7692  000080  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7693  000084  EE20 F0CA          	lfsr	2,202
  7694  000088  501B               	movf	checkCollision@g^0,w,c
  7695  00008A  26D9               	addwf	fsr2l,f,c
  7696  00008C  501C               	movf	(checkCollision@g+1)^0,w,c
  7697  00008E  22DA               	addwfc	fsr2h,f,c
  7698  000090  CFDE F01F          	movff	postinc2,??_checkCollision+2
  7699  000094  CFDD F020          	movff	postdec2,??_checkCollision+3
  7700  000098  501D               	movf	??_checkCollision^0,w,c
  7701  00009A  261F               	addwf	(??_checkCollision+2)^0,f,c
  7702  00009C  501E               	movf	(??_checkCollision+1)^0,w,c
  7703  00009E  2220               	addwfc	(??_checkCollision+3)^0,f,c
  7704  0000A0  0E08               	movlw	8
  7705  0000A2  261F               	addwf	(??_checkCollision+2)^0,f,c
  7706  0000A4  0E00               	movlw	0
  7707  0000A6  2220               	addwfc	(??_checkCollision+3)^0,f,c
  7708  0000A8  5020               	movf	(??_checkCollision+3)^0,w,c
  7709  0000AA  E104               	bnz	u4080
  7710  0000AC  0EEF               	movlw	239
  7711  0000AE  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  7712  0000B0  A0D8               	btfss	status,0,c
  7713  0000B2  D02C               	goto	l812
  7714  0000B4                     u4080:
  7715                           
  7716                           ;gameFunction.c: 60:     {;gameFunction.c: 61:         g->b.dx=-g->b.dx;
  7717  0000B4  EE20 F0D2          	lfsr	2,210
  7718  0000B8  501B               	movf	checkCollision@g^0,w,c
  7719  0000BA  26D9               	addwf	fsr2l,f,c
  7720  0000BC  501C               	movf	(checkCollision@g+1)^0,w,c
  7721  0000BE  22DA               	addwfc	fsr2h,f,c
  7722  0000C0  CFDE F01D          	movff	postinc2,??_checkCollision
  7723  0000C4  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7724  0000C8  1E1D               	comf	??_checkCollision^0,f,c
  7725  0000CA  1E1E               	comf	(??_checkCollision+1)^0,f,c
  7726  0000CC  4A1D               	infsnz	??_checkCollision^0,f,c
  7727  0000CE  2A1E               	incf	(??_checkCollision+1)^0,f,c
  7728  0000D0  EE20 F0D2          	lfsr	2,210
  7729  0000D4  501B               	movf	checkCollision@g^0,w,c
  7730  0000D6  26D9               	addwf	fsr2l,f,c
  7731  0000D8  501C               	movf	(checkCollision@g+1)^0,w,c
  7732  0000DA  22DA               	addwfc	fsr2h,f,c
  7733  0000DC  C01D  FFDE         	movff	??_checkCollision,postinc2
  7734  0000E0  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  7735                           
  7736                           ;gameFunction.c: 62:         g->b.x+=g->b.dx;
  7737  0000E4  EE20 F0D2          	lfsr	2,210
  7738  0000E8  501B               	movf	checkCollision@g^0,w,c
  7739  0000EA  26D9               	addwf	fsr2l,f,c
  7740  0000EC  501C               	movf	(checkCollision@g+1)^0,w,c
  7741  0000EE  22DA               	addwfc	fsr2h,f,c
  7742  0000F0  CFDE F01D          	movff	postinc2,??_checkCollision
  7743  0000F4  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7744  0000F8  EE20 F0CA          	lfsr	2,202
  7745  0000FC  501B               	movf	checkCollision@g^0,w,c
  7746  0000FE  26D9               	addwf	fsr2l,f,c
  7747  000100  501C               	movf	(checkCollision@g+1)^0,w,c
  7748  000102  22DA               	addwfc	fsr2h,f,c
  7749  000104  501D               	movf	??_checkCollision^0,w,c
  7750  000106  26DE               	addwf	postinc2,f,c
  7751  000108  501E               	movf	(??_checkCollision+1)^0,w,c
  7752  00010A  22DD               	addwfc	postdec2,f,c
  7753  00010C                     l812:
  7754                           
  7755                           ;gameFunction.c: 64:     if((int)(g->b.x+g->b.dx-8)<=1)
  7756  00010C  0EF8               	movlw	248
  7757  00010E  6E1D               	movwf	??_checkCollision^0,c
  7758  000110  0EFF               	movlw	255
  7759  000112  6E1E               	movwf	(??_checkCollision+1)^0,c
  7760  000114  EE20 F0D2          	lfsr	2,210
  7761  000118  501B               	movf	checkCollision@g^0,w,c
  7762  00011A  26D9               	addwf	fsr2l,f,c
  7763  00011C  501C               	movf	(checkCollision@g+1)^0,w,c
  7764  00011E  22DA               	addwfc	fsr2h,f,c
  7765  000120  CFDE F01F          	movff	postinc2,??_checkCollision+2
  7766  000124  CFDD F020          	movff	postdec2,??_checkCollision+3
  7767  000128  EE20 F0CA          	lfsr	2,202
  7768  00012C  501B               	movf	checkCollision@g^0,w,c
  7769  00012E  26D9               	addwf	fsr2l,f,c
  7770  000130  501C               	movf	(checkCollision@g+1)^0,w,c
  7771  000132  22DA               	addwfc	fsr2h,f,c
  7772  000134  CFDE F021          	movff	postinc2,??_checkCollision+4
  7773  000138  CFDD F022          	movff	postdec2,??_checkCollision+5
  7774  00013C  501F               	movf	(??_checkCollision+2)^0,w,c
  7775  00013E  2621               	addwf	(??_checkCollision+4)^0,f,c
  7776  000140  5020               	movf	(??_checkCollision+3)^0,w,c
  7777  000142  2222               	addwfc	(??_checkCollision+5)^0,f,c
  7778  000144  501D               	movf	??_checkCollision^0,w,c
  7779  000146  2621               	addwf	(??_checkCollision+4)^0,f,c
  7780  000148  501E               	movf	(??_checkCollision+1)^0,w,c
  7781  00014A  2222               	addwfc	(??_checkCollision+5)^0,f,c
  7782  00014C  BE22               	btfsc	(??_checkCollision+5)^0,7,c
  7783  00014E  D006               	goto	u4090
  7784  000150  5022               	movf	(??_checkCollision+5)^0,w,c
  7785  000152  E130               	bnz	l813
  7786  000154  0E02               	movlw	2
  7787  000156  5C21               	subwf	(??_checkCollision+4)^0,w,c
  7788  000158  B0D8               	btfsc	status,0,c
  7789  00015A  D02C               	goto	l813
  7790  00015C                     u4090:
  7791                           
  7792                           ;gameFunction.c: 65:     {;gameFunction.c: 66:         g->b.dx=-g->b.dx;
  7793  00015C  EE20 F0D2          	lfsr	2,210
  7794  000160  501B               	movf	checkCollision@g^0,w,c
  7795  000162  26D9               	addwf	fsr2l,f,c
  7796  000164  501C               	movf	(checkCollision@g+1)^0,w,c
  7797  000166  22DA               	addwfc	fsr2h,f,c
  7798  000168  CFDE F01D          	movff	postinc2,??_checkCollision
  7799  00016C  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7800  000170  1E1D               	comf	??_checkCollision^0,f,c
  7801  000172  1E1E               	comf	(??_checkCollision+1)^0,f,c
  7802  000174  4A1D               	infsnz	??_checkCollision^0,f,c
  7803  000176  2A1E               	incf	(??_checkCollision+1)^0,f,c
  7804  000178  EE20 F0D2          	lfsr	2,210
  7805  00017C  501B               	movf	checkCollision@g^0,w,c
  7806  00017E  26D9               	addwf	fsr2l,f,c
  7807  000180  501C               	movf	(checkCollision@g+1)^0,w,c
  7808  000182  22DA               	addwfc	fsr2h,f,c
  7809  000184  C01D  FFDE         	movff	??_checkCollision,postinc2
  7810  000188  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  7811                           
  7812                           ;gameFunction.c: 67:         g->b.x+=g->b.dx;
  7813  00018C  EE20 F0D2          	lfsr	2,210
  7814  000190  501B               	movf	checkCollision@g^0,w,c
  7815  000192  26D9               	addwf	fsr2l,f,c
  7816  000194  501C               	movf	(checkCollision@g+1)^0,w,c
  7817  000196  22DA               	addwfc	fsr2h,f,c
  7818  000198  CFDE F01D          	movff	postinc2,??_checkCollision
  7819  00019C  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7820  0001A0  EE20 F0CA          	lfsr	2,202
  7821  0001A4  501B               	movf	checkCollision@g^0,w,c
  7822  0001A6  26D9               	addwf	fsr2l,f,c
  7823  0001A8  501C               	movf	(checkCollision@g+1)^0,w,c
  7824  0001AA  22DA               	addwfc	fsr2h,f,c
  7825  0001AC  501D               	movf	??_checkCollision^0,w,c
  7826  0001AE  26DE               	addwf	postinc2,f,c
  7827  0001B0  501E               	movf	(??_checkCollision+1)^0,w,c
  7828  0001B2  22DD               	addwfc	postdec2,f,c
  7829  0001B4                     l813:
  7830                           
  7831                           ;gameFunction.c: 70:     if(g->b.y+8==g->p1.y-1)
  7832  0001B4  0EFF               	movlw	255
  7833  0001B6  6E1D               	movwf	??_checkCollision^0,c
  7834  0001B8  0EFF               	movlw	255
  7835  0001BA  6E1E               	movwf	(??_checkCollision+1)^0,c
  7836  0001BC  EE20 F0D8          	lfsr	2,216
  7837  0001C0  501B               	movf	checkCollision@g^0,w,c
  7838  0001C2  26D9               	addwf	fsr2l,f,c
  7839  0001C4  501C               	movf	(checkCollision@g+1)^0,w,c
  7840  0001C6  22DA               	addwfc	fsr2h,f,c
  7841  0001C8  CFDE F01F          	movff	postinc2,??_checkCollision+2
  7842  0001CC  CFDD F020          	movff	postdec2,??_checkCollision+3
  7843  0001D0  501D               	movf	??_checkCollision^0,w,c
  7844  0001D2  261F               	addwf	(??_checkCollision+2)^0,f,c
  7845  0001D4  501E               	movf	(??_checkCollision+1)^0,w,c
  7846  0001D6  2220               	addwfc	(??_checkCollision+3)^0,f,c
  7847  0001D8  EE20 F0CC          	lfsr	2,204
  7848  0001DC  501B               	movf	checkCollision@g^0,w,c
  7849  0001DE  26D9               	addwf	fsr2l,f,c
  7850  0001E0  501C               	movf	(checkCollision@g+1)^0,w,c
  7851  0001E2  22DA               	addwfc	fsr2h,f,c
  7852  0001E4  CFDE F021          	movff	postinc2,??_checkCollision+4
  7853  0001E8  CFDD F022          	movff	postdec2,??_checkCollision+5
  7854  0001EC  0E08               	movlw	8
  7855  0001EE  2621               	addwf	(??_checkCollision+4)^0,f,c
  7856  0001F0  0E00               	movlw	0
  7857  0001F2  2222               	addwfc	(??_checkCollision+5)^0,f,c
  7858  0001F4  501F               	movf	(??_checkCollision+2)^0,w,c
  7859  0001F6  1821               	xorwf	(??_checkCollision+4)^0,w,c
  7860  0001F8  E103               	bnz	u4101
  7861  0001FA  5020               	movf	(??_checkCollision+3)^0,w,c
  7862  0001FC  1822               	xorwf	(??_checkCollision+5)^0,w,c
  7863  0001FE  A4D8               	btfss	status,2,c
  7864  000200                     u4101:
  7865  000200  D17D               	goto	l6732
  7866                           
  7867                           ;gameFunction.c: 71:     {;gameFunction.c: 72:         if(g->b.x+8>g->p1.x)
  7868  000202  EE20 F0CA          	lfsr	2,202
  7869  000206  501B               	movf	checkCollision@g^0,w,c
  7870  000208  26D9               	addwf	fsr2l,f,c
  7871  00020A  501C               	movf	(checkCollision@g+1)^0,w,c
  7872  00020C  22DA               	addwfc	fsr2h,f,c
  7873  00020E  CFDE F01D          	movff	postinc2,??_checkCollision
  7874  000212  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7875  000216  0E08               	movlw	8
  7876  000218  261D               	addwf	??_checkCollision^0,f,c
  7877  00021A  0E00               	movlw	0
  7878  00021C  221E               	addwfc	(??_checkCollision+1)^0,f,c
  7879  00021E  EE20 F0D6          	lfsr	2,214
  7880  000222  501B               	movf	checkCollision@g^0,w,c
  7881  000224  26D9               	addwf	fsr2l,f,c
  7882  000226  501C               	movf	(checkCollision@g+1)^0,w,c
  7883  000228  22DA               	addwfc	fsr2h,f,c
  7884  00022A  501D               	movf	??_checkCollision^0,w,c
  7885  00022C  5CDE               	subwf	postinc2,w,c
  7886  00022E  501E               	movf	(??_checkCollision+1)^0,w,c
  7887  000230  58DE               	subwfb	postinc2,w,c
  7888  000232  B0D8               	btfsc	status,0,c
  7889  000234  D163               	goto	l6732
  7890                           
  7891                           ;gameFunction.c: 73:         {;gameFunction.c: 74:             if(g->b.x-8<g->p1.x+50)
  7892  000236  EE20 F0D6          	lfsr	2,214
  7893  00023A  501B               	movf	checkCollision@g^0,w,c
  7894  00023C  26D9               	addwf	fsr2l,f,c
  7895  00023E  501C               	movf	(checkCollision@g+1)^0,w,c
  7896  000240  22DA               	addwfc	fsr2h,f,c
  7897  000242  CFDE F01D          	movff	postinc2,??_checkCollision
  7898  000246  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7899  00024A  0E32               	movlw	50
  7900  00024C  261D               	addwf	??_checkCollision^0,f,c
  7901  00024E  0E00               	movlw	0
  7902  000250  221E               	addwfc	(??_checkCollision+1)^0,f,c
  7903  000252  0EF8               	movlw	248
  7904  000254  6E1F               	movwf	(??_checkCollision+2)^0,c
  7905  000256  0EFF               	movlw	255
  7906  000258  6E20               	movwf	(??_checkCollision+3)^0,c
  7907  00025A  EE20 F0CA          	lfsr	2,202
  7908  00025E  501B               	movf	checkCollision@g^0,w,c
  7909  000260  26D9               	addwf	fsr2l,f,c
  7910  000262  501C               	movf	(checkCollision@g+1)^0,w,c
  7911  000264  22DA               	addwfc	fsr2h,f,c
  7912  000266  CFDE F021          	movff	postinc2,??_checkCollision+4
  7913  00026A  CFDD F022          	movff	postdec2,??_checkCollision+5
  7914  00026E  501F               	movf	(??_checkCollision+2)^0,w,c
  7915  000270  2621               	addwf	(??_checkCollision+4)^0,f,c
  7916  000272  5020               	movf	(??_checkCollision+3)^0,w,c
  7917  000274  2222               	addwfc	(??_checkCollision+5)^0,f,c
  7918  000276  501D               	movf	??_checkCollision^0,w,c
  7919  000278  5C21               	subwf	(??_checkCollision+4)^0,w,c
  7920  00027A  501E               	movf	(??_checkCollision+1)^0,w,c
  7921  00027C  5822               	subwfb	(??_checkCollision+5)^0,w,c
  7922  00027E  B0D8               	btfsc	status,0,c
  7923  000280  D13D               	goto	l6732
  7924                           
  7925                           ;gameFunction.c: 75:             {;gameFunction.c: 77:                 if(g->b.x-g->p1.x
      +                          <10)
  7926  000282  EE20 F0D6          	lfsr	2,214
  7927  000286  501B               	movf	checkCollision@g^0,w,c
  7928  000288  26D9               	addwf	fsr2l,f,c
  7929  00028A  501C               	movf	(checkCollision@g+1)^0,w,c
  7930  00028C  22DA               	addwfc	fsr2h,f,c
  7931  00028E  CFDE F01D          	movff	postinc2,??_checkCollision
  7932  000292  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7933  000296  EE20 F0CA          	lfsr	2,202
  7934  00029A  501B               	movf	checkCollision@g^0,w,c
  7935  00029C  26D9               	addwf	fsr2l,f,c
  7936  00029E  501C               	movf	(checkCollision@g+1)^0,w,c
  7937  0002A0  22DA               	addwfc	fsr2h,f,c
  7938  0002A2  CFDE F01F          	movff	postinc2,??_checkCollision+2
  7939  0002A6  CFDD F020          	movff	postdec2,??_checkCollision+3
  7940  0002AA  501D               	movf	??_checkCollision^0,w,c
  7941  0002AC  5E1F               	subwf	(??_checkCollision+2)^0,f,c
  7942  0002AE  501E               	movf	(??_checkCollision+1)^0,w,c
  7943  0002B0  5A20               	subwfb	(??_checkCollision+3)^0,f,c
  7944  0002B2  5020               	movf	(??_checkCollision+3)^0,w,c
  7945  0002B4  E126               	bnz	l6716
  7946  0002B6  0E0A               	movlw	10
  7947  0002B8  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  7948  0002BA  B0D8               	btfsc	status,0,c
  7949  0002BC  D022               	goto	l6716
  7950                           
  7951                           ;gameFunction.c: 78:                 {;gameFunction.c: 80:                     g->b.dy=-
      +                          g->b.dy;
  7952  0002BE  EE20 F0D4          	lfsr	2,212
  7953  0002C2  501B               	movf	checkCollision@g^0,w,c
  7954  0002C4  26D9               	addwf	fsr2l,f,c
  7955  0002C6  501C               	movf	(checkCollision@g+1)^0,w,c
  7956  0002C8  22DA               	addwfc	fsr2h,f,c
  7957  0002CA  CFDE F01D          	movff	postinc2,??_checkCollision
  7958  0002CE  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7959  0002D2  1E1D               	comf	??_checkCollision^0,f,c
  7960  0002D4  1E1E               	comf	(??_checkCollision+1)^0,f,c
  7961  0002D6  4A1D               	infsnz	??_checkCollision^0,f,c
  7962  0002D8  2A1E               	incf	(??_checkCollision+1)^0,f,c
  7963  0002DA  EE20 F0D4          	lfsr	2,212
  7964  0002DE  501B               	movf	checkCollision@g^0,w,c
  7965  0002E0  26D9               	addwf	fsr2l,f,c
  7966  0002E2  501C               	movf	(checkCollision@g+1)^0,w,c
  7967  0002E4  22DA               	addwfc	fsr2h,f,c
  7968  0002E6  C01D  FFDE         	movff	??_checkCollision,postinc2
  7969  0002EA  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  7970                           
  7971                           ;gameFunction.c: 81:                     g->b.dx-=2;
  7972  0002EE  EE20 F0D2          	lfsr	2,210
  7973  0002F2  501B               	movf	checkCollision@g^0,w,c
  7974  0002F4  26D9               	addwf	fsr2l,f,c
  7975  0002F6  501C               	movf	(checkCollision@g+1)^0,w,c
  7976  0002F8  22DA               	addwfc	fsr2h,f,c
  7977  0002FA  0EFE               	movlw	254
  7978  0002FC  26DE               	addwf	postinc2,f,c
  7979  0002FE  0EFF               	movlw	255
  7980  000300  D0EE               	goto	L3
  7981  000302                     l6716:
  7982  000302  EE20 F0D6          	lfsr	2,214
  7983  000306  501B               	movf	checkCollision@g^0,w,c
  7984  000308  26D9               	addwf	fsr2l,f,c
  7985  00030A  501C               	movf	(checkCollision@g+1)^0,w,c
  7986  00030C  22DA               	addwfc	fsr2h,f,c
  7987  00030E  CFDE F01D          	movff	postinc2,??_checkCollision
  7988  000312  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7989  000316  EE20 F0CA          	lfsr	2,202
  7990  00031A  501B               	movf	checkCollision@g^0,w,c
  7991  00031C  26D9               	addwf	fsr2l,f,c
  7992  00031E  501C               	movf	(checkCollision@g+1)^0,w,c
  7993  000320  22DA               	addwfc	fsr2h,f,c
  7994  000322  CFDE F01F          	movff	postinc2,??_checkCollision+2
  7995  000326  CFDD F020          	movff	postdec2,??_checkCollision+3
  7996  00032A  501D               	movf	??_checkCollision^0,w,c
  7997  00032C  5E1F               	subwf	(??_checkCollision+2)^0,f,c
  7998  00032E  501E               	movf	(??_checkCollision+1)^0,w,c
  7999  000330  5A20               	subwfb	(??_checkCollision+3)^0,f,c
  8000  000332  5020               	movf	(??_checkCollision+3)^0,w,c
  8001  000334  E126               	bnz	l6720
  8002  000336  0E14               	movlw	20
  8003  000338  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  8004  00033A  B0D8               	btfsc	status,0,c
  8005  00033C  D022               	goto	l6720
  8006                           
  8007                           ;gameFunction.c: 84:                 {;gameFunction.c: 86:                     g->b.dy=-
      +                          g->b.dy;
  8008  00033E  EE20 F0D4          	lfsr	2,212
  8009  000342  501B               	movf	checkCollision@g^0,w,c
  8010  000344  26D9               	addwf	fsr2l,f,c
  8011  000346  501C               	movf	(checkCollision@g+1)^0,w,c
  8012  000348  22DA               	addwfc	fsr2h,f,c
  8013  00034A  CFDE F01D          	movff	postinc2,??_checkCollision
  8014  00034E  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8015  000352  1E1D               	comf	??_checkCollision^0,f,c
  8016  000354  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8017  000356  4A1D               	infsnz	??_checkCollision^0,f,c
  8018  000358  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8019  00035A  EE20 F0D4          	lfsr	2,212
  8020  00035E  501B               	movf	checkCollision@g^0,w,c
  8021  000360  26D9               	addwf	fsr2l,f,c
  8022  000362  501C               	movf	(checkCollision@g+1)^0,w,c
  8023  000364  22DA               	addwfc	fsr2h,f,c
  8024  000366  C01D  FFDE         	movff	??_checkCollision,postinc2
  8025  00036A  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8026                           
  8027                           ;gameFunction.c: 87:                     g->b.dx-=1;
  8028  00036E  EE20 F0D2          	lfsr	2,210
  8029  000372  501B               	movf	checkCollision@g^0,w,c
  8030  000374  26D9               	addwf	fsr2l,f,c
  8031  000376  501C               	movf	(checkCollision@g+1)^0,w,c
  8032  000378  22DA               	addwfc	fsr2h,f,c
  8033  00037A  06DE               	decf	postinc2,f,c
  8034  00037C  0E00               	movlw	0
  8035  00037E  5ADD               	subwfb	postdec2,f,c
  8036                           
  8037                           ;gameFunction.c: 88:                 }
  8038  000380  D0AF               	goto	l818
  8039  000382                     l6720:
  8040  000382  EE20 F0D6          	lfsr	2,214
  8041  000386  501B               	movf	checkCollision@g^0,w,c
  8042  000388  26D9               	addwf	fsr2l,f,c
  8043  00038A  501C               	movf	(checkCollision@g+1)^0,w,c
  8044  00038C  22DA               	addwfc	fsr2h,f,c
  8045  00038E  CFDE F01D          	movff	postinc2,??_checkCollision
  8046  000392  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8047  000396  EE20 F0CA          	lfsr	2,202
  8048  00039A  501B               	movf	checkCollision@g^0,w,c
  8049  00039C  26D9               	addwf	fsr2l,f,c
  8050  00039E  501C               	movf	(checkCollision@g+1)^0,w,c
  8051  0003A0  22DA               	addwfc	fsr2h,f,c
  8052  0003A2  CFDE F01F          	movff	postinc2,??_checkCollision+2
  8053  0003A6  CFDD F020          	movff	postdec2,??_checkCollision+3
  8054  0003AA  501D               	movf	??_checkCollision^0,w,c
  8055  0003AC  5E1F               	subwf	(??_checkCollision+2)^0,f,c
  8056  0003AE  501E               	movf	(??_checkCollision+1)^0,w,c
  8057  0003B0  5A20               	subwfb	(??_checkCollision+3)^0,f,c
  8058  0003B2  5020               	movf	(??_checkCollision+3)^0,w,c
  8059  0003B4  E135               	bnz	l6724
  8060  0003B6  0E1E               	movlw	30
  8061  0003B8  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  8062  0003BA  B0D8               	btfsc	status,0,c
  8063  0003BC  D031               	goto	l6724
  8064                           
  8065                           ;gameFunction.c: 90:                 {;gameFunction.c: 92:                     g->b.dx=-
      +                          g->b.dx;
  8066  0003BE  EE20 F0D2          	lfsr	2,210
  8067  0003C2  501B               	movf	checkCollision@g^0,w,c
  8068  0003C4  26D9               	addwf	fsr2l,f,c
  8069  0003C6  501C               	movf	(checkCollision@g+1)^0,w,c
  8070  0003C8  22DA               	addwfc	fsr2h,f,c
  8071  0003CA  CFDE F01D          	movff	postinc2,??_checkCollision
  8072  0003CE  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8073  0003D2  1E1D               	comf	??_checkCollision^0,f,c
  8074  0003D4  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8075  0003D6  4A1D               	infsnz	??_checkCollision^0,f,c
  8076  0003D8  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8077  0003DA  EE20 F0D2          	lfsr	2,210
  8078  0003DE  501B               	movf	checkCollision@g^0,w,c
  8079  0003E0  26D9               	addwf	fsr2l,f,c
  8080  0003E2  501C               	movf	(checkCollision@g+1)^0,w,c
  8081  0003E4  22DA               	addwfc	fsr2h,f,c
  8082  0003E6  C01D  FFDE         	movff	??_checkCollision,postinc2
  8083  0003EA  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8084                           
  8085                           ;gameFunction.c: 93:                     g->b.dy=-g->b.dy;
  8086  0003EE  EE20 F0D4          	lfsr	2,212
  8087  0003F2  501B               	movf	checkCollision@g^0,w,c
  8088  0003F4  26D9               	addwf	fsr2l,f,c
  8089  0003F6  501C               	movf	(checkCollision@g+1)^0,w,c
  8090  0003F8  22DA               	addwfc	fsr2h,f,c
  8091  0003FA  CFDE F01D          	movff	postinc2,??_checkCollision
  8092  0003FE  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8093  000402  1E1D               	comf	??_checkCollision^0,f,c
  8094  000404  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8095  000406  4A1D               	infsnz	??_checkCollision^0,f,c
  8096  000408  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8097  00040A  EE20 F0D4          	lfsr	2,212
  8098  00040E  501B               	movf	checkCollision@g^0,w,c
  8099  000410  26D9               	addwf	fsr2l,f,c
  8100  000412  501C               	movf	(checkCollision@g+1)^0,w,c
  8101  000414  22DA               	addwfc	fsr2h,f,c
  8102  000416  C01D  FFDE         	movff	??_checkCollision,postinc2
  8103  00041A  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8104                           
  8105                           ;gameFunction.c: 94:                 }
  8106  00041E  D060               	goto	l818
  8107  000420                     l6724:
  8108  000420  EE20 F0D6          	lfsr	2,214
  8109  000424  501B               	movf	checkCollision@g^0,w,c
  8110  000426  26D9               	addwf	fsr2l,f,c
  8111  000428  501C               	movf	(checkCollision@g+1)^0,w,c
  8112  00042A  22DA               	addwfc	fsr2h,f,c
  8113  00042C  CFDE F01D          	movff	postinc2,??_checkCollision
  8114  000430  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8115  000434  EE20 F0CA          	lfsr	2,202
  8116  000438  501B               	movf	checkCollision@g^0,w,c
  8117  00043A  26D9               	addwf	fsr2l,f,c
  8118  00043C  501C               	movf	(checkCollision@g+1)^0,w,c
  8119  00043E  22DA               	addwfc	fsr2h,f,c
  8120  000440  CFDE F01F          	movff	postinc2,??_checkCollision+2
  8121  000444  CFDD F020          	movff	postdec2,??_checkCollision+3
  8122  000448  501D               	movf	??_checkCollision^0,w,c
  8123  00044A  5E1F               	subwf	(??_checkCollision+2)^0,f,c
  8124  00044C  501E               	movf	(??_checkCollision+1)^0,w,c
  8125  00044E  5A20               	subwfb	(??_checkCollision+3)^0,f,c
  8126  000450  5020               	movf	(??_checkCollision+3)^0,w,c
  8127  000452  E124               	bnz	l6728
  8128  000454  0E28               	movlw	40
  8129  000456  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  8130  000458  B0D8               	btfsc	status,0,c
  8131  00045A  D020               	goto	l6728
  8132                           
  8133                           ;gameFunction.c: 96:                 {;gameFunction.c: 98:                     g->b.dy=-
      +                          g->b.dy;
  8134  00045C  EE20 F0D4          	lfsr	2,212
  8135  000460  501B               	movf	checkCollision@g^0,w,c
  8136  000462  26D9               	addwf	fsr2l,f,c
  8137  000464  501C               	movf	(checkCollision@g+1)^0,w,c
  8138  000466  22DA               	addwfc	fsr2h,f,c
  8139  000468  CFDE F01D          	movff	postinc2,??_checkCollision
  8140  00046C  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8141  000470  1E1D               	comf	??_checkCollision^0,f,c
  8142  000472  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8143  000474  4A1D               	infsnz	??_checkCollision^0,f,c
  8144  000476  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8145  000478  EE20 F0D4          	lfsr	2,212
  8146  00047C  501B               	movf	checkCollision@g^0,w,c
  8147  00047E  26D9               	addwf	fsr2l,f,c
  8148  000480  501C               	movf	(checkCollision@g+1)^0,w,c
  8149  000482  22DA               	addwfc	fsr2h,f,c
  8150  000484  C01D  FFDE         	movff	??_checkCollision,postinc2
  8151  000488  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8152                           
  8153                           ;gameFunction.c: 99:                     g->b.dx+=1;
  8154  00048C  EE20 F0D2          	lfsr	2,210
  8155  000490  501B               	movf	checkCollision@g^0,w,c
  8156  000492  26D9               	addwf	fsr2l,f,c
  8157  000494  501C               	movf	(checkCollision@g+1)^0,w,c
  8158  000496  22DA               	addwfc	fsr2h,f,c
  8159  000498  2ADE               	incf	postinc2,f,c
  8160  00049A  D020               	goto	L5
  8161  00049C                     l6728:
  8162                           
  8163                           ;gameFunction.c: 102:                 {;gameFunction.c: 104:                     g->b.dy
      +                          =-g->b.dy;
  8164  00049C  EE20 F0D4          	lfsr	2,212
  8165  0004A0  501B               	movf	checkCollision@g^0,w,c
  8166  0004A2  26D9               	addwf	fsr2l,f,c
  8167  0004A4  501C               	movf	(checkCollision@g+1)^0,w,c
  8168  0004A6  22DA               	addwfc	fsr2h,f,c
  8169  0004A8  CFDE F01D          	movff	postinc2,??_checkCollision
  8170  0004AC  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8171  0004B0  1E1D               	comf	??_checkCollision^0,f,c
  8172  0004B2  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8173  0004B4  4A1D               	infsnz	??_checkCollision^0,f,c
  8174  0004B6  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8175  0004B8  EE20 F0D4          	lfsr	2,212
  8176  0004BC  501B               	movf	checkCollision@g^0,w,c
  8177  0004BE  26D9               	addwf	fsr2l,f,c
  8178  0004C0  501C               	movf	(checkCollision@g+1)^0,w,c
  8179  0004C2  22DA               	addwfc	fsr2h,f,c
  8180  0004C4  C01D  FFDE         	movff	??_checkCollision,postinc2
  8181  0004C8  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8182                           
  8183                           ;gameFunction.c: 105:                     g->b.dx+=2;
  8184  0004CC  EE20 F0D2          	lfsr	2,210
  8185  0004D0  501B               	movf	checkCollision@g^0,w,c
  8186  0004D2  26D9               	addwf	fsr2l,f,c
  8187  0004D4  501C               	movf	(checkCollision@g+1)^0,w,c
  8188  0004D6  22DA               	addwfc	fsr2h,f,c
  8189  0004D8  0E02               	movlw	2
  8190  0004DA  26DE               	addwf	postinc2,f,c
  8191  0004DC                     L5:
  8192  0004DC  0E00               	movlw	0
  8193  0004DE                     L3:
  8194  0004DE  22DD               	addwfc	postdec2,f,c
  8195  0004E0                     l818:
  8196                           
  8197                           ;gameFunction.c: 109:                 g->s1.homeScore++;
  8198  0004E0  EE20 F0EA          	lfsr	2,234
  8199  0004E4  501B               	movf	checkCollision@g^0,w,c
  8200  0004E6  26D9               	addwf	fsr2l,f,c
  8201  0004E8  501C               	movf	(checkCollision@g+1)^0,w,c
  8202  0004EA  22DA               	addwfc	fsr2h,f,c
  8203  0004EC  2ADE               	incf	postinc2,f,c
  8204  0004EE  0E00               	movlw	0
  8205  0004F0  22DD               	addwfc	postdec2,f,c
  8206                           
  8207                           ;gameFunction.c: 110:                 XF_pushEvent(evRedrawScore,0);
  8208  0004F2  0E00               	movlw	0
  8209  0004F4  6E18               	movwf	XF_pushEvent@inISR^0,c
  8210  0004F6  0E0E               	movlw	14
  8211  0004F8  ECCA  F029         	call	_XF_pushEvent
  8212  0004FC                     l6732:
  8213                           
  8214                           ;gameFunction.c: 117:     if(g->b.y-8==g->p2.y+10 +1)
  8215  0004FC  EE20 F0E2          	lfsr	2,226
  8216  000500  501B               	movf	checkCollision@g^0,w,c
  8217  000502  26D9               	addwf	fsr2l,f,c
  8218  000504  501C               	movf	(checkCollision@g+1)^0,w,c
  8219  000506  22DA               	addwfc	fsr2h,f,c
  8220  000508  CFDE F01D          	movff	postinc2,??_checkCollision
  8221  00050C  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8222  000510  0E0B               	movlw	11
  8223  000512  261D               	addwf	??_checkCollision^0,f,c
  8224  000514  0E00               	movlw	0
  8225  000516  221E               	addwfc	(??_checkCollision+1)^0,f,c
  8226  000518  0EF8               	movlw	248
  8227  00051A  6E1F               	movwf	(??_checkCollision+2)^0,c
  8228  00051C  0EFF               	movlw	255
  8229  00051E  6E20               	movwf	(??_checkCollision+3)^0,c
  8230  000520  EE20 F0CC          	lfsr	2,204
  8231  000524  501B               	movf	checkCollision@g^0,w,c
  8232  000526  26D9               	addwf	fsr2l,f,c
  8233  000528  501C               	movf	(checkCollision@g+1)^0,w,c
  8234  00052A  22DA               	addwfc	fsr2h,f,c
  8235  00052C  CFDE F021          	movff	postinc2,??_checkCollision+4
  8236  000530  CFDD F022          	movff	postdec2,??_checkCollision+5
  8237  000534  501F               	movf	(??_checkCollision+2)^0,w,c
  8238  000536  2621               	addwf	(??_checkCollision+4)^0,f,c
  8239  000538  5020               	movf	(??_checkCollision+3)^0,w,c
  8240  00053A  2222               	addwfc	(??_checkCollision+5)^0,f,c
  8241  00053C  501D               	movf	??_checkCollision^0,w,c
  8242  00053E  1821               	xorwf	(??_checkCollision+4)^0,w,c
  8243  000540  E103               	bnz	u4171
  8244  000542  501E               	movf	(??_checkCollision+1)^0,w,c
  8245  000544  1822               	xorwf	(??_checkCollision+5)^0,w,c
  8246  000546  A4D8               	btfss	status,2,c
  8247  000548                     u4171:
  8248  000548  D17D               	goto	l6758
  8249                           
  8250                           ;gameFunction.c: 118:     {;gameFunction.c: 119:         if(g->b.x+8>g->p2.x)
  8251  00054A  EE20 F0CA          	lfsr	2,202
  8252  00054E  501B               	movf	checkCollision@g^0,w,c
  8253  000550  26D9               	addwf	fsr2l,f,c
  8254  000552  501C               	movf	(checkCollision@g+1)^0,w,c
  8255  000554  22DA               	addwfc	fsr2h,f,c
  8256  000556  CFDE F01D          	movff	postinc2,??_checkCollision
  8257  00055A  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8258  00055E  0E08               	movlw	8
  8259  000560  261D               	addwf	??_checkCollision^0,f,c
  8260  000562  0E00               	movlw	0
  8261  000564  221E               	addwfc	(??_checkCollision+1)^0,f,c
  8262  000566  EE20 F0E0          	lfsr	2,224
  8263  00056A  501B               	movf	checkCollision@g^0,w,c
  8264  00056C  26D9               	addwf	fsr2l,f,c
  8265  00056E  501C               	movf	(checkCollision@g+1)^0,w,c
  8266  000570  22DA               	addwfc	fsr2h,f,c
  8267  000572  501D               	movf	??_checkCollision^0,w,c
  8268  000574  5CDE               	subwf	postinc2,w,c
  8269  000576  501E               	movf	(??_checkCollision+1)^0,w,c
  8270  000578  58DE               	subwfb	postinc2,w,c
  8271  00057A  B0D8               	btfsc	status,0,c
  8272  00057C  D163               	goto	l6758
  8273                           
  8274                           ;gameFunction.c: 120:         {;gameFunction.c: 121:             if(g->b.x-8<g->p2.x+50)
  8275  00057E  EE20 F0E0          	lfsr	2,224
  8276  000582  501B               	movf	checkCollision@g^0,w,c
  8277  000584  26D9               	addwf	fsr2l,f,c
  8278  000586  501C               	movf	(checkCollision@g+1)^0,w,c
  8279  000588  22DA               	addwfc	fsr2h,f,c
  8280  00058A  CFDE F01D          	movff	postinc2,??_checkCollision
  8281  00058E  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8282  000592  0E32               	movlw	50
  8283  000594  261D               	addwf	??_checkCollision^0,f,c
  8284  000596  0E00               	movlw	0
  8285  000598  221E               	addwfc	(??_checkCollision+1)^0,f,c
  8286  00059A  0EF8               	movlw	248
  8287  00059C  6E1F               	movwf	(??_checkCollision+2)^0,c
  8288  00059E  0EFF               	movlw	255
  8289  0005A0  6E20               	movwf	(??_checkCollision+3)^0,c
  8290  0005A2  EE20 F0CA          	lfsr	2,202
  8291  0005A6  501B               	movf	checkCollision@g^0,w,c
  8292  0005A8  26D9               	addwf	fsr2l,f,c
  8293  0005AA  501C               	movf	(checkCollision@g+1)^0,w,c
  8294  0005AC  22DA               	addwfc	fsr2h,f,c
  8295  0005AE  CFDE F021          	movff	postinc2,??_checkCollision+4
  8296  0005B2  CFDD F022          	movff	postdec2,??_checkCollision+5
  8297  0005B6  501F               	movf	(??_checkCollision+2)^0,w,c
  8298  0005B8  2621               	addwf	(??_checkCollision+4)^0,f,c
  8299  0005BA  5020               	movf	(??_checkCollision+3)^0,w,c
  8300  0005BC  2222               	addwfc	(??_checkCollision+5)^0,f,c
  8301  0005BE  501D               	movf	??_checkCollision^0,w,c
  8302  0005C0  5C21               	subwf	(??_checkCollision+4)^0,w,c
  8303  0005C2  501E               	movf	(??_checkCollision+1)^0,w,c
  8304  0005C4  5822               	subwfb	(??_checkCollision+5)^0,w,c
  8305  0005C6  B0D8               	btfsc	status,0,c
  8306  0005C8  D13D               	goto	l6758
  8307                           
  8308                           ;gameFunction.c: 122:             {;gameFunction.c: 123:                 if(g->b.x-g->p2
      +                          .x<10)
  8309  0005CA  EE20 F0E0          	lfsr	2,224
  8310  0005CE  501B               	movf	checkCollision@g^0,w,c
  8311  0005D0  26D9               	addwf	fsr2l,f,c
  8312  0005D2  501C               	movf	(checkCollision@g+1)^0,w,c
  8313  0005D4  22DA               	addwfc	fsr2h,f,c
  8314  0005D6  CFDE F01D          	movff	postinc2,??_checkCollision
  8315  0005DA  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8316  0005DE  EE20 F0CA          	lfsr	2,202
  8317  0005E2  501B               	movf	checkCollision@g^0,w,c
  8318  0005E4  26D9               	addwf	fsr2l,f,c
  8319  0005E6  501C               	movf	(checkCollision@g+1)^0,w,c
  8320  0005E8  22DA               	addwfc	fsr2h,f,c
  8321  0005EA  CFDE F01F          	movff	postinc2,??_checkCollision+2
  8322  0005EE  CFDD F020          	movff	postdec2,??_checkCollision+3
  8323  0005F2  501D               	movf	??_checkCollision^0,w,c
  8324  0005F4  5E1F               	subwf	(??_checkCollision+2)^0,f,c
  8325  0005F6  501E               	movf	(??_checkCollision+1)^0,w,c
  8326  0005F8  5A20               	subwfb	(??_checkCollision+3)^0,f,c
  8327  0005FA  5020               	movf	(??_checkCollision+3)^0,w,c
  8328  0005FC  E126               	bnz	l6742
  8329  0005FE  0E0A               	movlw	10
  8330  000600  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  8331  000602  B0D8               	btfsc	status,0,c
  8332  000604  D022               	goto	l6742
  8333                           
  8334                           ;gameFunction.c: 124:                 {;gameFunction.c: 126:                     g->b.dy
      +                          =-g->b.dy;
  8335  000606  EE20 F0D4          	lfsr	2,212
  8336  00060A  501B               	movf	checkCollision@g^0,w,c
  8337  00060C  26D9               	addwf	fsr2l,f,c
  8338  00060E  501C               	movf	(checkCollision@g+1)^0,w,c
  8339  000610  22DA               	addwfc	fsr2h,f,c
  8340  000612  CFDE F01D          	movff	postinc2,??_checkCollision
  8341  000616  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8342  00061A  1E1D               	comf	??_checkCollision^0,f,c
  8343  00061C  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8344  00061E  4A1D               	infsnz	??_checkCollision^0,f,c
  8345  000620  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8346  000622  EE20 F0D4          	lfsr	2,212
  8347  000626  501B               	movf	checkCollision@g^0,w,c
  8348  000628  26D9               	addwf	fsr2l,f,c
  8349  00062A  501C               	movf	(checkCollision@g+1)^0,w,c
  8350  00062C  22DA               	addwfc	fsr2h,f,c
  8351  00062E  C01D  FFDE         	movff	??_checkCollision,postinc2
  8352  000632  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8353                           
  8354                           ;gameFunction.c: 127:                     g->b.dx-=2;
  8355  000636  EE20 F0D2          	lfsr	2,210
  8356  00063A  501B               	movf	checkCollision@g^0,w,c
  8357  00063C  26D9               	addwf	fsr2l,f,c
  8358  00063E  501C               	movf	(checkCollision@g+1)^0,w,c
  8359  000640  22DA               	addwfc	fsr2h,f,c
  8360  000642  0EFE               	movlw	254
  8361  000644  26DE               	addwf	postinc2,f,c
  8362  000646  0EFF               	movlw	255
  8363  000648  D0EE               	goto	L4
  8364  00064A                     l6742:
  8365  00064A  EE20 F0E0          	lfsr	2,224
  8366  00064E  501B               	movf	checkCollision@g^0,w,c
  8367  000650  26D9               	addwf	fsr2l,f,c
  8368  000652  501C               	movf	(checkCollision@g+1)^0,w,c
  8369  000654  22DA               	addwfc	fsr2h,f,c
  8370  000656  CFDE F01D          	movff	postinc2,??_checkCollision
  8371  00065A  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8372  00065E  EE20 F0CA          	lfsr	2,202
  8373  000662  501B               	movf	checkCollision@g^0,w,c
  8374  000664  26D9               	addwf	fsr2l,f,c
  8375  000666  501C               	movf	(checkCollision@g+1)^0,w,c
  8376  000668  22DA               	addwfc	fsr2h,f,c
  8377  00066A  CFDE F01F          	movff	postinc2,??_checkCollision+2
  8378  00066E  CFDD F020          	movff	postdec2,??_checkCollision+3
  8379  000672  501D               	movf	??_checkCollision^0,w,c
  8380  000674  5E1F               	subwf	(??_checkCollision+2)^0,f,c
  8381  000676  501E               	movf	(??_checkCollision+1)^0,w,c
  8382  000678  5A20               	subwfb	(??_checkCollision+3)^0,f,c
  8383  00067A  5020               	movf	(??_checkCollision+3)^0,w,c
  8384  00067C  E126               	bnz	l6746
  8385  00067E  0E14               	movlw	20
  8386  000680  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  8387  000682  B0D8               	btfsc	status,0,c
  8388  000684  D022               	goto	l6746
  8389                           
  8390                           ;gameFunction.c: 130:                 {;gameFunction.c: 132:                     g->b.dy
      +                          =-g->b.dy;
  8391  000686  EE20 F0D4          	lfsr	2,212
  8392  00068A  501B               	movf	checkCollision@g^0,w,c
  8393  00068C  26D9               	addwf	fsr2l,f,c
  8394  00068E  501C               	movf	(checkCollision@g+1)^0,w,c
  8395  000690  22DA               	addwfc	fsr2h,f,c
  8396  000692  CFDE F01D          	movff	postinc2,??_checkCollision
  8397  000696  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8398  00069A  1E1D               	comf	??_checkCollision^0,f,c
  8399  00069C  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8400  00069E  4A1D               	infsnz	??_checkCollision^0,f,c
  8401  0006A0  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8402  0006A2  EE20 F0D4          	lfsr	2,212
  8403  0006A6  501B               	movf	checkCollision@g^0,w,c
  8404  0006A8  26D9               	addwf	fsr2l,f,c
  8405  0006AA  501C               	movf	(checkCollision@g+1)^0,w,c
  8406  0006AC  22DA               	addwfc	fsr2h,f,c
  8407  0006AE  C01D  FFDE         	movff	??_checkCollision,postinc2
  8408  0006B2  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8409                           
  8410                           ;gameFunction.c: 133:                     g->b.dx-=1;
  8411  0006B6  EE20 F0D2          	lfsr	2,210
  8412  0006BA  501B               	movf	checkCollision@g^0,w,c
  8413  0006BC  26D9               	addwf	fsr2l,f,c
  8414  0006BE  501C               	movf	(checkCollision@g+1)^0,w,c
  8415  0006C0  22DA               	addwfc	fsr2h,f,c
  8416  0006C2  06DE               	decf	postinc2,f,c
  8417  0006C4  0E00               	movlw	0
  8418  0006C6  5ADD               	subwfb	postdec2,f,c
  8419                           
  8420                           ;gameFunction.c: 134:                 }
  8421  0006C8  D0AF               	goto	l829
  8422  0006CA                     l6746:
  8423  0006CA  EE20 F0E0          	lfsr	2,224
  8424  0006CE  501B               	movf	checkCollision@g^0,w,c
  8425  0006D0  26D9               	addwf	fsr2l,f,c
  8426  0006D2  501C               	movf	(checkCollision@g+1)^0,w,c
  8427  0006D4  22DA               	addwfc	fsr2h,f,c
  8428  0006D6  CFDE F01D          	movff	postinc2,??_checkCollision
  8429  0006DA  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8430  0006DE  EE20 F0CA          	lfsr	2,202
  8431  0006E2  501B               	movf	checkCollision@g^0,w,c
  8432  0006E4  26D9               	addwf	fsr2l,f,c
  8433  0006E6  501C               	movf	(checkCollision@g+1)^0,w,c
  8434  0006E8  22DA               	addwfc	fsr2h,f,c
  8435  0006EA  CFDE F01F          	movff	postinc2,??_checkCollision+2
  8436  0006EE  CFDD F020          	movff	postdec2,??_checkCollision+3
  8437  0006F2  501D               	movf	??_checkCollision^0,w,c
  8438  0006F4  5E1F               	subwf	(??_checkCollision+2)^0,f,c
  8439  0006F6  501E               	movf	(??_checkCollision+1)^0,w,c
  8440  0006F8  5A20               	subwfb	(??_checkCollision+3)^0,f,c
  8441  0006FA  5020               	movf	(??_checkCollision+3)^0,w,c
  8442  0006FC  E135               	bnz	l6750
  8443  0006FE  0E1E               	movlw	30
  8444  000700  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  8445  000702  B0D8               	btfsc	status,0,c
  8446  000704  D031               	goto	l6750
  8447                           
  8448                           ;gameFunction.c: 136:                 {;gameFunction.c: 138:                     g->b.dx
      +                          =-g->b.dx;
  8449  000706  EE20 F0D2          	lfsr	2,210
  8450  00070A  501B               	movf	checkCollision@g^0,w,c
  8451  00070C  26D9               	addwf	fsr2l,f,c
  8452  00070E  501C               	movf	(checkCollision@g+1)^0,w,c
  8453  000710  22DA               	addwfc	fsr2h,f,c
  8454  000712  CFDE F01D          	movff	postinc2,??_checkCollision
  8455  000716  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8456  00071A  1E1D               	comf	??_checkCollision^0,f,c
  8457  00071C  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8458  00071E  4A1D               	infsnz	??_checkCollision^0,f,c
  8459  000720  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8460  000722  EE20 F0D2          	lfsr	2,210
  8461  000726  501B               	movf	checkCollision@g^0,w,c
  8462  000728  26D9               	addwf	fsr2l,f,c
  8463  00072A  501C               	movf	(checkCollision@g+1)^0,w,c
  8464  00072C  22DA               	addwfc	fsr2h,f,c
  8465  00072E  C01D  FFDE         	movff	??_checkCollision,postinc2
  8466  000732  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8467                           
  8468                           ;gameFunction.c: 139:                     g->b.dy=-g->b.dy;
  8469  000736  EE20 F0D4          	lfsr	2,212
  8470  00073A  501B               	movf	checkCollision@g^0,w,c
  8471  00073C  26D9               	addwf	fsr2l,f,c
  8472  00073E  501C               	movf	(checkCollision@g+1)^0,w,c
  8473  000740  22DA               	addwfc	fsr2h,f,c
  8474  000742  CFDE F01D          	movff	postinc2,??_checkCollision
  8475  000746  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8476  00074A  1E1D               	comf	??_checkCollision^0,f,c
  8477  00074C  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8478  00074E  4A1D               	infsnz	??_checkCollision^0,f,c
  8479  000750  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8480  000752  EE20 F0D4          	lfsr	2,212
  8481  000756  501B               	movf	checkCollision@g^0,w,c
  8482  000758  26D9               	addwf	fsr2l,f,c
  8483  00075A  501C               	movf	(checkCollision@g+1)^0,w,c
  8484  00075C  22DA               	addwfc	fsr2h,f,c
  8485  00075E  C01D  FFDE         	movff	??_checkCollision,postinc2
  8486  000762  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8487                           
  8488                           ;gameFunction.c: 140:                 }
  8489  000766  D060               	goto	l829
  8490  000768                     l6750:
  8491  000768  EE20 F0E0          	lfsr	2,224
  8492  00076C  501B               	movf	checkCollision@g^0,w,c
  8493  00076E  26D9               	addwf	fsr2l,f,c
  8494  000770  501C               	movf	(checkCollision@g+1)^0,w,c
  8495  000772  22DA               	addwfc	fsr2h,f,c
  8496  000774  CFDE F01D          	movff	postinc2,??_checkCollision
  8497  000778  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8498  00077C  EE20 F0CA          	lfsr	2,202
  8499  000780  501B               	movf	checkCollision@g^0,w,c
  8500  000782  26D9               	addwf	fsr2l,f,c
  8501  000784  501C               	movf	(checkCollision@g+1)^0,w,c
  8502  000786  22DA               	addwfc	fsr2h,f,c
  8503  000788  CFDE F01F          	movff	postinc2,??_checkCollision+2
  8504  00078C  CFDD F020          	movff	postdec2,??_checkCollision+3
  8505  000790  501D               	movf	??_checkCollision^0,w,c
  8506  000792  5E1F               	subwf	(??_checkCollision+2)^0,f,c
  8507  000794  501E               	movf	(??_checkCollision+1)^0,w,c
  8508  000796  5A20               	subwfb	(??_checkCollision+3)^0,f,c
  8509  000798  5020               	movf	(??_checkCollision+3)^0,w,c
  8510  00079A  E124               	bnz	l6754
  8511  00079C  0E28               	movlw	40
  8512  00079E  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  8513  0007A0  B0D8               	btfsc	status,0,c
  8514  0007A2  D020               	goto	l6754
  8515                           
  8516                           ;gameFunction.c: 142:                 {;gameFunction.c: 144:                     g->b.dy
      +                          =-g->b.dy;
  8517  0007A4  EE20 F0D4          	lfsr	2,212
  8518  0007A8  501B               	movf	checkCollision@g^0,w,c
  8519  0007AA  26D9               	addwf	fsr2l,f,c
  8520  0007AC  501C               	movf	(checkCollision@g+1)^0,w,c
  8521  0007AE  22DA               	addwfc	fsr2h,f,c
  8522  0007B0  CFDE F01D          	movff	postinc2,??_checkCollision
  8523  0007B4  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8524  0007B8  1E1D               	comf	??_checkCollision^0,f,c
  8525  0007BA  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8526  0007BC  4A1D               	infsnz	??_checkCollision^0,f,c
  8527  0007BE  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8528  0007C0  EE20 F0D4          	lfsr	2,212
  8529  0007C4  501B               	movf	checkCollision@g^0,w,c
  8530  0007C6  26D9               	addwf	fsr2l,f,c
  8531  0007C8  501C               	movf	(checkCollision@g+1)^0,w,c
  8532  0007CA  22DA               	addwfc	fsr2h,f,c
  8533  0007CC  C01D  FFDE         	movff	??_checkCollision,postinc2
  8534  0007D0  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8535                           
  8536                           ;gameFunction.c: 145:                     g->b.dx+=1;
  8537  0007D4  EE20 F0D2          	lfsr	2,210
  8538  0007D8  501B               	movf	checkCollision@g^0,w,c
  8539  0007DA  26D9               	addwf	fsr2l,f,c
  8540  0007DC  501C               	movf	(checkCollision@g+1)^0,w,c
  8541  0007DE  22DA               	addwfc	fsr2h,f,c
  8542  0007E0  2ADE               	incf	postinc2,f,c
  8543  0007E2  D020               	goto	L6
  8544  0007E4                     l6754:
  8545                           
  8546                           ;gameFunction.c: 148:                 {;gameFunction.c: 150:                     g->b.dy
      +                          =-g->b.dy;
  8547  0007E4  EE20 F0D4          	lfsr	2,212
  8548  0007E8  501B               	movf	checkCollision@g^0,w,c
  8549  0007EA  26D9               	addwf	fsr2l,f,c
  8550  0007EC  501C               	movf	(checkCollision@g+1)^0,w,c
  8551  0007EE  22DA               	addwfc	fsr2h,f,c
  8552  0007F0  CFDE F01D          	movff	postinc2,??_checkCollision
  8553  0007F4  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8554  0007F8  1E1D               	comf	??_checkCollision^0,f,c
  8555  0007FA  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8556  0007FC  4A1D               	infsnz	??_checkCollision^0,f,c
  8557  0007FE  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8558  000800  EE20 F0D4          	lfsr	2,212
  8559  000804  501B               	movf	checkCollision@g^0,w,c
  8560  000806  26D9               	addwf	fsr2l,f,c
  8561  000808  501C               	movf	(checkCollision@g+1)^0,w,c
  8562  00080A  22DA               	addwfc	fsr2h,f,c
  8563  00080C  C01D  FFDE         	movff	??_checkCollision,postinc2
  8564  000810  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8565                           
  8566                           ;gameFunction.c: 151:                     g->b.dx+=2;
  8567  000814  EE20 F0D2          	lfsr	2,210
  8568  000818  501B               	movf	checkCollision@g^0,w,c
  8569  00081A  26D9               	addwf	fsr2l,f,c
  8570  00081C  501C               	movf	(checkCollision@g+1)^0,w,c
  8571  00081E  22DA               	addwfc	fsr2h,f,c
  8572  000820  0E02               	movlw	2
  8573  000822  26DE               	addwf	postinc2,f,c
  8574  000824                     L6:
  8575  000824  0E00               	movlw	0
  8576  000826                     L4:
  8577  000826  22DD               	addwfc	postdec2,f,c
  8578  000828                     l829:
  8579                           
  8580                           ;gameFunction.c: 154:                 g->s1.awayScore++;
  8581  000828  EE20 F0EC          	lfsr	2,236
  8582  00082C  501B               	movf	checkCollision@g^0,w,c
  8583  00082E  26D9               	addwf	fsr2l,f,c
  8584  000830  501C               	movf	(checkCollision@g+1)^0,w,c
  8585  000832  22DA               	addwfc	fsr2h,f,c
  8586  000834  2ADE               	incf	postinc2,f,c
  8587  000836  0E00               	movlw	0
  8588  000838  22DD               	addwfc	postdec2,f,c
  8589                           
  8590                           ;gameFunction.c: 155:                 XF_pushEvent(evRedrawScore,0);
  8591  00083A  0E00               	movlw	0
  8592  00083C  6E18               	movwf	XF_pushEvent@inISR^0,c
  8593  00083E  0E0E               	movlw	14
  8594  000840  ECCA  F029         	call	_XF_pushEvent
  8595  000844                     l6758:
  8596                           
  8597                           ;gameFunction.c: 161:     if(g->b.y-8<g->p2.y-10)
  8598  000844  0EF6               	movlw	246
  8599  000846  6E1D               	movwf	??_checkCollision^0,c
  8600  000848  0EFF               	movlw	255
  8601  00084A  6E1E               	movwf	(??_checkCollision+1)^0,c
  8602  00084C  EE20 F0E2          	lfsr	2,226
  8603  000850  501B               	movf	checkCollision@g^0,w,c
  8604  000852  26D9               	addwf	fsr2l,f,c
  8605  000854  501C               	movf	(checkCollision@g+1)^0,w,c
  8606  000856  22DA               	addwfc	fsr2h,f,c
  8607  000858  CFDE F01F          	movff	postinc2,??_checkCollision+2
  8608  00085C  CFDD F020          	movff	postdec2,??_checkCollision+3
  8609  000860  501D               	movf	??_checkCollision^0,w,c
  8610  000862  261F               	addwf	(??_checkCollision+2)^0,f,c
  8611  000864  501E               	movf	(??_checkCollision+1)^0,w,c
  8612  000866  2220               	addwfc	(??_checkCollision+3)^0,f,c
  8613  000868  0EF8               	movlw	248
  8614  00086A  6E21               	movwf	(??_checkCollision+4)^0,c
  8615  00086C  0EFF               	movlw	255
  8616  00086E  6E22               	movwf	(??_checkCollision+5)^0,c
  8617  000870  EE20 F0CC          	lfsr	2,204
  8618  000874  501B               	movf	checkCollision@g^0,w,c
  8619  000876  26D9               	addwf	fsr2l,f,c
  8620  000878  501C               	movf	(checkCollision@g+1)^0,w,c
  8621  00087A  22DA               	addwfc	fsr2h,f,c
  8622  00087C  CFDE F023          	movff	postinc2,??_checkCollision+6
  8623  000880  CFDD F024          	movff	postdec2,??_checkCollision+7
  8624  000884  5021               	movf	(??_checkCollision+4)^0,w,c
  8625  000886  2623               	addwf	(??_checkCollision+6)^0,f,c
  8626  000888  5022               	movf	(??_checkCollision+5)^0,w,c
  8627  00088A  2224               	addwfc	(??_checkCollision+7)^0,f,c
  8628  00088C  501F               	movf	(??_checkCollision+2)^0,w,c
  8629  00088E  5C23               	subwf	(??_checkCollision+6)^0,w,c
  8630  000890  5020               	movf	(??_checkCollision+3)^0,w,c
  8631  000892  5824               	subwfb	(??_checkCollision+7)^0,w,c
  8632  000894  B0D8               	btfsc	status,0,c
  8633  000896  D00F               	goto	l6764
  8634                           
  8635                           ;gameFunction.c: 162:     {;gameFunction.c: 164:         XF_pushEvent(evEndGame,0);
  8636  000898  0E00               	movlw	0
  8637  00089A  6E18               	movwf	XF_pushEvent@inISR^0,c
  8638  00089C  0E09               	movlw	9
  8639  00089E  ECCA  F029         	call	_XF_pushEvent
  8640                           
  8641                           ;gameFunction.c: 165:         g->s1.awayScore=0;
  8642  0008A2  EE20 F0EC          	lfsr	2,236
  8643  0008A6  501B               	movf	checkCollision@g^0,w,c
  8644  0008A8  26D9               	addwf	fsr2l,f,c
  8645  0008AA  501C               	movf	(checkCollision@g+1)^0,w,c
  8646  0008AC  22DA               	addwfc	fsr2h,f,c
  8647  0008AE  0E00               	movlw	0
  8648  0008B0  6EDE               	movwf	postinc2,c
  8649  0008B2  0E00               	movlw	0
  8650  0008B4  6EDD               	movwf	postdec2,c
  8651  0008B6                     l6764:
  8652                           
  8653                           ;gameFunction.c: 167:     if(g->b.y+8>g->p1.y+10)
  8654  0008B6  EE20 F0CC          	lfsr	2,204
  8655  0008BA  501B               	movf	checkCollision@g^0,w,c
  8656  0008BC  26D9               	addwf	fsr2l,f,c
  8657  0008BE  501C               	movf	(checkCollision@g+1)^0,w,c
  8658  0008C0  22DA               	addwfc	fsr2h,f,c
  8659  0008C2  CFDE F01D          	movff	postinc2,??_checkCollision
  8660  0008C6  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8661  0008CA  0E08               	movlw	8
  8662  0008CC  261D               	addwf	??_checkCollision^0,f,c
  8663  0008CE  0E00               	movlw	0
  8664  0008D0  221E               	addwfc	(??_checkCollision+1)^0,f,c
  8665  0008D2  EE20 F0D8          	lfsr	2,216
  8666  0008D6  501B               	movf	checkCollision@g^0,w,c
  8667  0008D8  26D9               	addwf	fsr2l,f,c
  8668  0008DA  501C               	movf	(checkCollision@g+1)^0,w,c
  8669  0008DC  22DA               	addwfc	fsr2h,f,c
  8670  0008DE  CFDE F01F          	movff	postinc2,??_checkCollision+2
  8671  0008E2  CFDD F020          	movff	postdec2,??_checkCollision+3
  8672  0008E6  0E0A               	movlw	10
  8673  0008E8  261F               	addwf	(??_checkCollision+2)^0,f,c
  8674  0008EA  0E00               	movlw	0
  8675  0008EC  2220               	addwfc	(??_checkCollision+3)^0,f,c
  8676  0008EE  501D               	movf	??_checkCollision^0,w,c
  8677  0008F0  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  8678  0008F2  501E               	movf	(??_checkCollision+1)^0,w,c
  8679  0008F4  5820               	subwfb	(??_checkCollision+3)^0,w,c
  8680  0008F6  B0D8               	btfsc	status,0,c
  8681  0008F8  0012               	return	
  8682                           
  8683                           ;gameFunction.c: 168:     {;gameFunction.c: 170:         XF_pushEvent(evEndGame,0);
  8684  0008FA  0E00               	movlw	0
  8685  0008FC  6E18               	movwf	XF_pushEvent@inISR^0,c
  8686  0008FE  0E09               	movlw	9
  8687  000900  ECCA  F029         	call	_XF_pushEvent
  8688                           
  8689                           ;gameFunction.c: 171:         g->s1.homeScore=0;
  8690  000904  EE20 F0EA          	lfsr	2,234
  8691  000908  501B               	movf	checkCollision@g^0,w,c
  8692  00090A  26D9               	addwf	fsr2l,f,c
  8693  00090C  501C               	movf	(checkCollision@g+1)^0,w,c
  8694  00090E  22DA               	addwfc	fsr2h,f,c
  8695  000910  0E00               	movlw	0
  8696  000912  6EDE               	movwf	postinc2,c
  8697  000914  0E00               	movlw	0
  8698  000916  6EDD               	movwf	postdec2,c
  8699  000918  0012               	return		;funcret
  8700  00091A                     __end_of_checkCollision:
  8701                           	callstack 0
  8702                           
  8703 ;; *************** function _XF_pushEvent *****************
  8704 ;; Defined at:
  8705 ;;		line 49 in file "xf/xf.c"
  8706 ;; Parameters:    Size  Location     Type
  8707 ;;  ev              1    wreg     unsigned char 
  8708 ;;  inISR           1   23[COMRAM] _Bool 
  8709 ;; Auto vars:     Size  Location     Type
  8710 ;;  ev              1   24[COMRAM] unsigned char 
  8711 ;;  temp            1   25[COMRAM] unsigned char 
  8712 ;; Return value:  Size  Location     Type
  8713 ;;                  1    wreg      _Bool 
  8714 ;; Registers used:
  8715 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8716 ;; Tracked objects:
  8717 ;;		On entry : 0/0
  8718 ;;		On exit  : 0/0
  8719 ;;		Unchanged: 0/0
  8720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8721 ;;      Params:         1       0       0       0       0       0       0
  8722 ;;      Locals:         2       0       0       0       0       0       0
  8723 ;;      Temps:          0       0       0       0       0       0       0
  8724 ;;      Totals:         3       0       0       0       0       0       0
  8725 ;;Total ram usage:        3 bytes
  8726 ;; Hardware stack levels used: 1
  8727 ;; Hardware stack levels required when called: 5
  8728 ;; This function calls:
  8729 ;;		_ENTERCRITICAL
  8730 ;;		_LEAVECRITICAL
  8731 ;;		___awmod
  8732 ;; This function is called by:
  8733 ;;		_gameControllerController
  8734 ;;		_moovePaddle1
  8735 ;;		_moovePaddle2
  8736 ;;		_mooveBall
  8737 ;;		_checkCollision
  8738 ;; This function uses a non-reentrant model
  8739 ;;
  8740                           
  8741                           	psect	text31
  8742  005394                     __ptext31:
  8743                           	callstack 0
  8744  005394                     _XF_pushEvent:
  8745                           	callstack 20
  8746                           
  8747                           ;incstack = 0
  8748                           ;XF_pushEvent@ev stored from wreg
  8749  005394  6E19               	movwf	XF_pushEvent@ev^0,c
  8750                           
  8751                           ;xf/xf.c: 49: _Bool XF_pushEvent(Event ev, _Bool inISR);xf/xf.c: 50: {;xf/xf.c: 51:   ui
      +                          nt8_t temp;;xf/xf.c: 52:     ENTERCRITICAL(inISR);
  8752  005396  5018               	movf	XF_pushEvent@inISR^0,w,c
  8753  005398  ECFA  F02C         	call	_ENTERCRITICAL
  8754                           
  8755                           ;xf/xf.c: 54:     temp = (theXF.in+1) % (uint8_t)sizeof(theXF.eventQueue);
  8756  00539C  0E01               	movlw	1
  8757  00539E  0100               	movlb	0	; () banked
  8758  0053A0  2584               	addwf	(_theXF+36)& (0+255),w,b
  8759  0053A2  6E12               	movwf	___awmod@dividend^0,c
  8760  0053A4  6A13               	clrf	(___awmod@dividend+1)^0,c
  8761  0053A6  0E00               	movlw	0
  8762  0053A8  2213               	addwfc	(___awmod@dividend+1)^0,f,c
  8763  0053AA  0E00               	movlw	0
  8764  0053AC  6E15               	movwf	(___awmod@divisor+1)^0,c
  8765  0053AE  0E0C               	movlw	12
  8766  0053B0  6E14               	movwf	___awmod@divisor^0,c
  8767  0053B2  ECFA  F028         	call	___awmod	;wreg free
  8768  0053B6  5012               	movf	?___awmod^0,w,c
  8769  0053B8  6E1A               	movwf	XF_pushEvent@temp^0,c
  8770                           
  8771                           ; BSR set to: 0
  8772                           ;xf/xf.c: 55:     if(temp == theXF.out)
  8773  0053BA  501A               	movf	XF_pushEvent@temp^0,w,c
  8774  0053BC  1985               	xorwf	(_theXF+37)& (0+255),w,b
  8775  0053BE  A4D8               	btfss	status,2,c
  8776  0053C0  D005               	goto	l6430
  8777                           
  8778                           ; BSR set to: 0
  8779                           ;xf/xf.c: 56:     {;xf/xf.c: 57:       LEAVECRITICAL(inISR);
  8780  0053C2  5018               	movf	XF_pushEvent@inISR^0,w,c
  8781  0053C4  ECF4  F02C         	call	_LEAVECRITICAL
  8782                           
  8783                           ;xf/xf.c: 58:       return 0;
  8784  0053C8  0E00               	movlw	0
  8785  0053CA  0012               	return	
  8786  0053CC                     l6430:
  8787                           
  8788                           ; BSR set to: 0
  8789                           ;xf/xf.c: 60:     theXF.eventQueue[theXF.in] = ev;
  8790  0053CC  5184               	movf	(_theXF+36)& (0+255),w,b
  8791  0053CE  0F78               	addlw	low (_theXF+24)
  8792  0053D0  6ED9               	movwf	fsr2l,c
  8793  0053D2  6ADA               	clrf	fsr2h,c
  8794  0053D4  C019  FFDF         	movff	XF_pushEvent@ev,indf2
  8795                           
  8796                           ; BSR set to: 0
  8797                           ;xf/xf.c: 61:     theXF.in = temp;
  8798  0053D8  C01A  F084         	movff	XF_pushEvent@temp,_theXF+36
  8799                           
  8800                           ; BSR set to: 0
  8801                           ;xf/xf.c: 62:     LEAVECRITICAL(inISR);
  8802  0053DC  5018               	movf	XF_pushEvent@inISR^0,w,c
  8803  0053DE  ECF4  F02C         	call	_LEAVECRITICAL
  8804                           
  8805                           ;xf/xf.c: 63:     return 1;
  8806  0053E2  0E01               	movlw	1
  8807  0053E4  0012               	return		;funcret
  8808  0053E6                     __end_of_XF_pushEvent:
  8809                           	callstack 0
  8810                           
  8811 ;; *************** function _Ball_Update *****************
  8812 ;; Defined at:
  8813 ;;		line 18 in file "class/ball.c"
  8814 ;; Parameters:    Size  Location     Type
  8815 ;;  b               2   17[COMRAM] PTR struct Ball
  8816 ;;		 -> g1(240), 
  8817 ;; Auto vars:     Size  Location     Type
  8818 ;;		None
  8819 ;; Return value:  Size  Location     Type
  8820 ;;                  1    wreg      void 
  8821 ;; Registers used:
  8822 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8823 ;; Tracked objects:
  8824 ;;		On entry : 0/0
  8825 ;;		On exit  : 0/0
  8826 ;;		Unchanged: 0/0
  8827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8828 ;;      Params:         2       0       0       0       0       0       0
  8829 ;;      Locals:         0       0       0       0       0       0       0
  8830 ;;      Temps:          4       0       0       0       0       0       0
  8831 ;;      Totals:         6       0       0       0       0       0       0
  8832 ;;Total ram usage:        6 bytes
  8833 ;; Hardware stack levels used: 1
  8834 ;; Hardware stack levels required when called: 4
  8835 ;; This function calls:
  8836 ;;		Nothing
  8837 ;; This function is called by:
  8838 ;;		_mooveBall
  8839 ;; This function uses a non-reentrant model
  8840 ;;
  8841                           
  8842                           	psect	text32
  8843  00507E                     __ptext32:
  8844                           	callstack 0
  8845  00507E                     _Ball_Update:
  8846                           	callstack 21
  8847                           
  8848                           ;class/ball.c: 18: void Ball_Update(struct Ball* b);class/ball.c: 19: {;class/ball.c: 20
      +                          :     b->x=b->x+b->dx;
  8849                           
  8850                           ;incstack = 0
  8851  00507E  EE20 F008          	lfsr	2,8
  8852  005082  5012               	movf	Ball_Update@b^0,w,c
  8853  005084  26D9               	addwf	fsr2l,f,c
  8854  005086  5013               	movf	(Ball_Update@b+1)^0,w,c
  8855  005088  22DA               	addwfc	fsr2h,f,c
  8856  00508A  CFDE F014          	movff	postinc2,??_Ball_Update
  8857  00508E  CFDD F015          	movff	postdec2,??_Ball_Update+1
  8858  005092  C012  FFD9         	movff	Ball_Update@b,fsr2l
  8859  005096  C013  FFDA         	movff	Ball_Update@b+1,fsr2h
  8860  00509A  CFDE F016          	movff	postinc2,??_Ball_Update+2
  8861  00509E  CFDD F017          	movff	postdec2,??_Ball_Update+3
  8862  0050A2  5014               	movf	??_Ball_Update^0,w,c
  8863  0050A4  2616               	addwf	(??_Ball_Update+2)^0,f,c
  8864  0050A6  5015               	movf	(??_Ball_Update+1)^0,w,c
  8865  0050A8  2217               	addwfc	(??_Ball_Update+3)^0,f,c
  8866  0050AA  C012  FFD9         	movff	Ball_Update@b,fsr2l
  8867  0050AE  C013  FFDA         	movff	Ball_Update@b+1,fsr2h
  8868  0050B2  C016  FFDE         	movff	??_Ball_Update+2,postinc2
  8869  0050B6  C017  FFDD         	movff	??_Ball_Update+3,postdec2
  8870                           
  8871                           ;class/ball.c: 21:     b->y=b->y+b->dy;
  8872  0050BA  EE20 F00A          	lfsr	2,10
  8873  0050BE  5012               	movf	Ball_Update@b^0,w,c
  8874  0050C0  26D9               	addwf	fsr2l,f,c
  8875  0050C2  5013               	movf	(Ball_Update@b+1)^0,w,c
  8876  0050C4  22DA               	addwfc	fsr2h,f,c
  8877  0050C6  CFDE F014          	movff	postinc2,??_Ball_Update
  8878  0050CA  CFDD F015          	movff	postdec2,??_Ball_Update+1
  8879  0050CE  EE20 F002          	lfsr	2,2
  8880  0050D2  5012               	movf	Ball_Update@b^0,w,c
  8881  0050D4  26D9               	addwf	fsr2l,f,c
  8882  0050D6  5013               	movf	(Ball_Update@b+1)^0,w,c
  8883  0050D8  22DA               	addwfc	fsr2h,f,c
  8884  0050DA  CFDE F016          	movff	postinc2,??_Ball_Update+2
  8885  0050DE  CFDD F017          	movff	postdec2,??_Ball_Update+3
  8886  0050E2  5014               	movf	??_Ball_Update^0,w,c
  8887  0050E4  2616               	addwf	(??_Ball_Update+2)^0,f,c
  8888  0050E6  5015               	movf	(??_Ball_Update+1)^0,w,c
  8889  0050E8  2217               	addwfc	(??_Ball_Update+3)^0,f,c
  8890  0050EA  EE20 F002          	lfsr	2,2
  8891  0050EE  5012               	movf	Ball_Update@b^0,w,c
  8892  0050F0  26D9               	addwf	fsr2l,f,c
  8893  0050F2  5013               	movf	(Ball_Update@b+1)^0,w,c
  8894  0050F4  22DA               	addwfc	fsr2h,f,c
  8895  0050F6  C016  FFDE         	movff	??_Ball_Update+2,postinc2
  8896  0050FA  C017  FFDD         	movff	??_Ball_Update+3,postdec2
  8897  0050FE  0012               	return		;funcret
  8898  005100                     __end_of_Ball_Update:
  8899                           	callstack 0
  8900                           
  8901 ;; *************** function _levelController *****************
  8902 ;; Defined at:
  8903 ;;		line 236 in file "gameFunction.c"
  8904 ;; Parameters:    Size  Location     Type
  8905 ;;  g               2   21[COMRAM] PTR struct GameParameter
  8906 ;;		 -> g1(240), 
  8907 ;; Auto vars:     Size  Location     Type
  8908 ;;		None
  8909 ;; Return value:  Size  Location     Type
  8910 ;;                  1    wreg      void 
  8911 ;; Registers used:
  8912 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8913 ;; Tracked objects:
  8914 ;;		On entry : 0/0
  8915 ;;		On exit  : 0/0
  8916 ;;		Unchanged: 0/0
  8917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8918 ;;      Params:         2       0       0       0       0       0       0
  8919 ;;      Locals:         0       0       0       0       0       0       0
  8920 ;;      Temps:          2       0       0       0       0       0       0
  8921 ;;      Totals:         4       0       0       0       0       0       0
  8922 ;;Total ram usage:        4 bytes
  8923 ;; Hardware stack levels used: 1
  8924 ;; Hardware stack levels required when called: 5
  8925 ;; This function calls:
  8926 ;;		_GameParameters_setLevel
  8927 ;; This function is called by:
  8928 ;;		_gameControllerController
  8929 ;; This function uses a non-reentrant model
  8930 ;;
  8931                           
  8932                           	psect	text33
  8933  0044D2                     __ptext33:
  8934                           	callstack 0
  8935  0044D2                     _levelController:
  8936                           	callstack 21
  8937                           
  8938                           ;gameFunction.c: 236: void levelController(GameParameters* g);gameFunction.c: 237: {;gam
      +                          eFunction.c: 239:     if(((g->x)>=105)&&((g->x)<160))
  8939                           
  8940                           ;incstack = 0
  8941  0044D2  EE20 F002          	lfsr	2,2
  8942  0044D6  5016               	movf	levelController@g^0,w,c
  8943  0044D8  26D9               	addwf	fsr2l,f,c
  8944  0044DA  5017               	movf	(levelController@g+1)^0,w,c
  8945  0044DC  22DA               	addwfc	fsr2h,f,c
  8946  0044DE  0E01               	movlw	1
  8947  0044E0  50DB               	movf	plusw2,w,c
  8948  0044E2  E104               	bnz	u4610
  8949  0044E4  0E69               	movlw	105
  8950  0044E6  5CDE               	subwf	postinc2,w,c
  8951  0044E8  A0D8               	btfss	status,0,c
  8952  0044EA  D018               	goto	l7040
  8953  0044EC                     u4610:
  8954  0044EC  EE20 F002          	lfsr	2,2
  8955  0044F0  5016               	movf	levelController@g^0,w,c
  8956  0044F2  26D9               	addwf	fsr2l,f,c
  8957  0044F4  5017               	movf	(levelController@g+1)^0,w,c
  8958  0044F6  22DA               	addwfc	fsr2h,f,c
  8959  0044F8  0E01               	movlw	1
  8960  0044FA  50DB               	movf	plusw2,w,c
  8961  0044FC  E10F               	bnz	l7040
  8962  0044FE  0EA0               	movlw	160
  8963  004500  5CDE               	subwf	postinc2,w,c
  8964  004502  B0D8               	btfsc	status,0,c
  8965  004504  D00B               	goto	l7040
  8966                           
  8967                           ;gameFunction.c: 240:     {;gameFunction.c: 241:         GameParameters_setLevel(g,2);
  8968  004506  C016  F012         	movff	levelController@g,GameParameters_setLevel@s
  8969  00450A  C017  F013         	movff	levelController@g+1,GameParameters_setLevel@s+1
  8970  00450E  0E00               	movlw	0
  8971  004510  6E15               	movwf	(GameParameters_setLevel@value+1)^0,c
  8972  004512  0E02               	movlw	2
  8973  004514  6E14               	movwf	GameParameters_setLevel@value^0,c
  8974  004516  ECE9  F02C         	call	_GameParameters_setLevel	;wreg free
  8975                           
  8976                           ;gameFunction.c: 242:     }
  8977  00451A  D02F               	goto	l7048
  8978  00451C                     l7040:
  8979  00451C  EE20 F002          	lfsr	2,2
  8980  004520  5016               	movf	levelController@g^0,w,c
  8981  004522  26D9               	addwf	fsr2l,f,c
  8982  004524  5017               	movf	(levelController@g+1)^0,w,c
  8983  004526  22DA               	addwfc	fsr2h,f,c
  8984  004528  0E01               	movlw	1
  8985  00452A  50DB               	movf	plusw2,w,c
  8986  00452C  E104               	bnz	u4630
  8987  00452E  0EA0               	movlw	160
  8988  004530  5CDE               	subwf	postinc2,w,c
  8989  004532  A0D8               	btfss	status,0,c
  8990  004534  D018               	goto	l7046
  8991  004536                     u4630:
  8992  004536  EE20 F002          	lfsr	2,2
  8993  00453A  5016               	movf	levelController@g^0,w,c
  8994  00453C  26D9               	addwf	fsr2l,f,c
  8995  00453E  5017               	movf	(levelController@g+1)^0,w,c
  8996  004540  22DA               	addwfc	fsr2h,f,c
  8997  004542  0E01               	movlw	1
  8998  004544  50DB               	movf	plusw2,w,c
  8999  004546  E10F               	bnz	l7046
  9000  004548  0ED7               	movlw	215
  9001  00454A  5CDE               	subwf	postinc2,w,c
  9002  00454C  B0D8               	btfsc	status,0,c
  9003  00454E  D00B               	goto	l7046
  9004                           
  9005                           ;gameFunction.c: 244:     {;gameFunction.c: 245:         GameParameters_setLevel(g,3);
  9006  004550  C016  F012         	movff	levelController@g,GameParameters_setLevel@s
  9007  004554  C017  F013         	movff	levelController@g+1,GameParameters_setLevel@s+1
  9008  004558  0E00               	movlw	0
  9009  00455A  6E15               	movwf	(GameParameters_setLevel@value+1)^0,c
  9010  00455C  0E03               	movlw	3
  9011  00455E  6E14               	movwf	GameParameters_setLevel@value^0,c
  9012  004560  ECE9  F02C         	call	_GameParameters_setLevel	;wreg free
  9013                           
  9014                           ;gameFunction.c: 246:     }
  9015  004564  D00A               	goto	l7048
  9016  004566                     l7046:
  9017                           
  9018                           ;gameFunction.c: 248:     {;gameFunction.c: 249:         GameParameters_setLevel(g,1);
  9019  004566  C016  F012         	movff	levelController@g,GameParameters_setLevel@s
  9020  00456A  C017  F013         	movff	levelController@g+1,GameParameters_setLevel@s+1
  9021  00456E  0E00               	movlw	0
  9022  004570  6E15               	movwf	(GameParameters_setLevel@value+1)^0,c
  9023  004572  0E01               	movlw	1
  9024  004574  6E14               	movwf	GameParameters_setLevel@value^0,c
  9025  004576  ECE9  F02C         	call	_GameParameters_setLevel	;wreg free
  9026  00457A                     l7048:
  9027                           
  9028                           ;gameFunction.c: 251:     g->sldLevel.value=g->level;
  9029  00457A  EE20 F006          	lfsr	2,6
  9030  00457E  5016               	movf	levelController@g^0,w,c
  9031  004580  26D9               	addwf	fsr2l,f,c
  9032  004582  5017               	movf	(levelController@g+1)^0,w,c
  9033  004584  22DA               	addwfc	fsr2h,f,c
  9034  004586  EE10 F0C2          	lfsr	1,194
  9035  00458A  5016               	movf	levelController@g^0,w,c
  9036  00458C  26E1               	addwf	fsr1l,f,c
  9037  00458E  5017               	movf	(levelController@g+1)^0,w,c
  9038  004590  22E2               	addwfc	fsr1h,f,c
  9039  004592  CFDE FFE6          	movff	postinc2,postinc1
  9040  004596  CFDD FFE5          	movff	postdec2,postdec1
  9041  00459A  0012               	return		;funcret
  9042  00459C                     __end_of_levelController:
  9043                           	callstack 0
  9044                           
  9045 ;; *************** function _GameParameters_setLevel *****************
  9046 ;; Defined at:
  9047 ;;		line 54 in file "class/gameParameters.c"
  9048 ;; Parameters:    Size  Location     Type
  9049 ;;  s               2   17[COMRAM] PTR struct GameParameter
  9050 ;;		 -> g1(240), 
  9051 ;;  value           2   19[COMRAM] unsigned short 
  9052 ;; Auto vars:     Size  Location     Type
  9053 ;;		None
  9054 ;; Return value:  Size  Location     Type
  9055 ;;                  1    wreg      void 
  9056 ;; Registers used:
  9057 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9058 ;; Tracked objects:
  9059 ;;		On entry : 0/0
  9060 ;;		On exit  : 0/0
  9061 ;;		Unchanged: 0/0
  9062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9063 ;;      Params:         4       0       0       0       0       0       0
  9064 ;;      Locals:         0       0       0       0       0       0       0
  9065 ;;      Temps:          0       0       0       0       0       0       0
  9066 ;;      Totals:         4       0       0       0       0       0       0
  9067 ;;Total ram usage:        4 bytes
  9068 ;; Hardware stack levels used: 1
  9069 ;; Hardware stack levels required when called: 4
  9070 ;; This function calls:
  9071 ;;		Nothing
  9072 ;; This function is called by:
  9073 ;;		_levelController
  9074 ;; This function uses a non-reentrant model
  9075 ;;
  9076                           
  9077                           	psect	text34
  9078  0059D2                     __ptext34:
  9079                           	callstack 0
  9080  0059D2                     _GameParameters_setLevel:
  9081                           	callstack 21
  9082                           
  9083                           ;class/gameParameters.c: 54: void GameParameters_setLevel(struct GameParameters* s, uint
      +                          16_t value);class/gameParameters.c: 55: {;class/gameParameters.c: 56:     s->level = val
      +                          ue;
  9084                           
  9085                           ;incstack = 0
  9086  0059D2  EE20 F006          	lfsr	2,6
  9087  0059D6  5012               	movf	GameParameters_setLevel@s^0,w,c
  9088  0059D8  26D9               	addwf	fsr2l,f,c
  9089  0059DA  5013               	movf	(GameParameters_setLevel@s+1)^0,w,c
  9090  0059DC  22DA               	addwfc	fsr2h,f,c
  9091  0059DE  C014  FFDE         	movff	GameParameters_setLevel@value,postinc2
  9092  0059E2  C015  FFDD         	movff	GameParameters_setLevel@value+1,postdec2
  9093  0059E6  0012               	return		;funcret
  9094  0059E8                     __end_of_GameParameters_setLevel:
  9095                           	callstack 0
  9096                           
  9097 ;; *************** function _backlightController *****************
  9098 ;; Defined at:
  9099 ;;		line 179 in file "gameFunction.c"
  9100 ;; Parameters:    Size  Location     Type
  9101 ;;  g               2   23[COMRAM] PTR struct GameParameter
  9102 ;;		 -> g1(240), 
  9103 ;; Auto vars:     Size  Location     Type
  9104 ;;		None
  9105 ;; Return value:  Size  Location     Type
  9106 ;;                  1    wreg      void 
  9107 ;; Registers used:
  9108 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9109 ;; Tracked objects:
  9110 ;;		On entry : 0/0
  9111 ;;		On exit  : 0/0
  9112 ;;		Unchanged: 0/0
  9113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9114 ;;      Params:         2       0       0       0       0       0       0
  9115 ;;      Locals:         0       0       0       0       0       0       0
  9116 ;;      Temps:          2       0       0       0       0       0       0
  9117 ;;      Totals:         4       0       0       0       0       0       0
  9118 ;;Total ram usage:        4 bytes
  9119 ;; Hardware stack levels used: 1
  9120 ;; Hardware stack levels required when called: 5
  9121 ;; This function calls:
  9122 ;;		_GameParameters_setBackLight
  9123 ;; This function is called by:
  9124 ;;		_gameControllerController
  9125 ;; This function uses a non-reentrant model
  9126 ;;
  9127                           
  9128                           	psect	text35
  9129  0022D4                     __ptext35:
  9130                           	callstack 0
  9131  0022D4                     _backlightController:
  9132                           	callstack 21
  9133                           
  9134                           ;gameFunction.c: 179: void backlightController(GameParameters* g);gameFunction.c: 180: {
      +                          ;gameFunction.c: 182:     if(((g->x)>=50)&&((g->x)<64))
  9135                           
  9136                           ;incstack = 0
  9137  0022D4  EE20 F002          	lfsr	2,2
  9138  0022D8  5018               	movf	backlightController@g^0,w,c
  9139  0022DA  26D9               	addwf	fsr2l,f,c
  9140  0022DC  5019               	movf	(backlightController@g+1)^0,w,c
  9141  0022DE  22DA               	addwfc	fsr2h,f,c
  9142  0022E0  0E01               	movlw	1
  9143  0022E2  50DB               	movf	plusw2,w,c
  9144  0022E4  E104               	bnz	u4370
  9145  0022E6  0E32               	movlw	50
  9146  0022E8  5CDE               	subwf	postinc2,w,c
  9147  0022EA  A0D8               	btfss	status,0,c
  9148  0022EC  D018               	goto	l6966
  9149  0022EE                     u4370:
  9150  0022EE  EE20 F002          	lfsr	2,2
  9151  0022F2  5018               	movf	backlightController@g^0,w,c
  9152  0022F4  26D9               	addwf	fsr2l,f,c
  9153  0022F6  5019               	movf	(backlightController@g+1)^0,w,c
  9154  0022F8  22DA               	addwfc	fsr2h,f,c
  9155  0022FA  0E01               	movlw	1
  9156  0022FC  50DB               	movf	plusw2,w,c
  9157  0022FE  E10F               	bnz	l6966
  9158  002300  0E40               	movlw	64
  9159  002302  5CDE               	subwf	postinc2,w,c
  9160  002304  B0D8               	btfsc	status,0,c
  9161  002306  D00B               	goto	l6966
  9162                           
  9163                           ;gameFunction.c: 183:     {;gameFunction.c: 184:         GameParameters_setBackLight(g,0
      +                          );
  9164  002308  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9165  00230C  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9166  002310  0E00               	movlw	0
  9167  002312  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9168  002314  0E00               	movlw	0
  9169  002316  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9170  002318  EC5E  F02B         	call	_GameParameters_setBackLight	;wreg free
  9171                           
  9172                           ;gameFunction.c: 185:     }
  9173  00231C  D196               	goto	l858
  9174  00231E                     l6966:
  9175  00231E  EE20 F002          	lfsr	2,2
  9176  002322  5018               	movf	backlightController@g^0,w,c
  9177  002324  26D9               	addwf	fsr2l,f,c
  9178  002326  5019               	movf	(backlightController@g+1)^0,w,c
  9179  002328  22DA               	addwfc	fsr2h,f,c
  9180  00232A  0E01               	movlw	1
  9181  00232C  50DB               	movf	plusw2,w,c
  9182  00232E  E104               	bnz	u4390
  9183  002330  0E40               	movlw	64
  9184  002332  5CDE               	subwf	postinc2,w,c
  9185  002334  A0D8               	btfss	status,0,c
  9186  002336  D018               	goto	l6972
  9187  002338                     u4390:
  9188  002338  EE20 F002          	lfsr	2,2
  9189  00233C  5018               	movf	backlightController@g^0,w,c
  9190  00233E  26D9               	addwf	fsr2l,f,c
  9191  002340  5019               	movf	(backlightController@g+1)^0,w,c
  9192  002342  22DA               	addwfc	fsr2h,f,c
  9193  002344  0E01               	movlw	1
  9194  002346  50DB               	movf	plusw2,w,c
  9195  002348  E10F               	bnz	l6972
  9196  00234A  0E4E               	movlw	78
  9197  00234C  5CDE               	subwf	postinc2,w,c
  9198  00234E  B0D8               	btfsc	status,0,c
  9199  002350  D00B               	goto	l6972
  9200                           
  9201                           ;gameFunction.c: 187:     {;gameFunction.c: 188:         GameParameters_setBackLight(g,1
      +                          );
  9202  002352  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9203  002356  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9204  00235A  0E00               	movlw	0
  9205  00235C  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9206  00235E  0E01               	movlw	1
  9207  002360  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9208  002362  EC5E  F02B         	call	_GameParameters_setBackLight	;wreg free
  9209                           
  9210                           ;gameFunction.c: 189:     }
  9211  002366  D171               	goto	l858
  9212  002368                     l6972:
  9213  002368  EE20 F002          	lfsr	2,2
  9214  00236C  5018               	movf	backlightController@g^0,w,c
  9215  00236E  26D9               	addwf	fsr2l,f,c
  9216  002370  5019               	movf	(backlightController@g+1)^0,w,c
  9217  002372  22DA               	addwfc	fsr2h,f,c
  9218  002374  0E01               	movlw	1
  9219  002376  50DB               	movf	plusw2,w,c
  9220  002378  E104               	bnz	u4410
  9221  00237A  0E4E               	movlw	78
  9222  00237C  5CDE               	subwf	postinc2,w,c
  9223  00237E  A0D8               	btfss	status,0,c
  9224  002380  D018               	goto	l6978
  9225  002382                     u4410:
  9226  002382  EE20 F002          	lfsr	2,2
  9227  002386  5018               	movf	backlightController@g^0,w,c
  9228  002388  26D9               	addwf	fsr2l,f,c
  9229  00238A  5019               	movf	(backlightController@g+1)^0,w,c
  9230  00238C  22DA               	addwfc	fsr2h,f,c
  9231  00238E  0E01               	movlw	1
  9232  002390  50DB               	movf	plusw2,w,c
  9233  002392  E10F               	bnz	l6978
  9234  002394  0E5C               	movlw	92
  9235  002396  5CDE               	subwf	postinc2,w,c
  9236  002398  B0D8               	btfsc	status,0,c
  9237  00239A  D00B               	goto	l6978
  9238                           
  9239                           ;gameFunction.c: 191:     {;gameFunction.c: 192:         GameParameters_setBackLight(g,2
      +                          );
  9240  00239C  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9241  0023A0  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9242  0023A4  0E00               	movlw	0
  9243  0023A6  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9244  0023A8  0E02               	movlw	2
  9245  0023AA  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9246  0023AC  EC5E  F02B         	call	_GameParameters_setBackLight	;wreg free
  9247                           
  9248                           ;gameFunction.c: 193:     }
  9249  0023B0  D14C               	goto	l858
  9250  0023B2                     l6978:
  9251  0023B2  EE20 F002          	lfsr	2,2
  9252  0023B6  5018               	movf	backlightController@g^0,w,c
  9253  0023B8  26D9               	addwf	fsr2l,f,c
  9254  0023BA  5019               	movf	(backlightController@g+1)^0,w,c
  9255  0023BC  22DA               	addwfc	fsr2h,f,c
  9256  0023BE  0E01               	movlw	1
  9257  0023C0  50DB               	movf	plusw2,w,c
  9258  0023C2  E104               	bnz	u4430
  9259  0023C4  0E5C               	movlw	92
  9260  0023C6  5CDE               	subwf	postinc2,w,c
  9261  0023C8  A0D8               	btfss	status,0,c
  9262  0023CA  D018               	goto	l6984
  9263  0023CC                     u4430:
  9264  0023CC  EE20 F002          	lfsr	2,2
  9265  0023D0  5018               	movf	backlightController@g^0,w,c
  9266  0023D2  26D9               	addwf	fsr2l,f,c
  9267  0023D4  5019               	movf	(backlightController@g+1)^0,w,c
  9268  0023D6  22DA               	addwfc	fsr2h,f,c
  9269  0023D8  0E01               	movlw	1
  9270  0023DA  50DB               	movf	plusw2,w,c
  9271  0023DC  E10F               	bnz	l6984
  9272  0023DE  0E6A               	movlw	106
  9273  0023E0  5CDE               	subwf	postinc2,w,c
  9274  0023E2  B0D8               	btfsc	status,0,c
  9275  0023E4  D00B               	goto	l6984
  9276                           
  9277                           ;gameFunction.c: 195:     {;gameFunction.c: 196:         GameParameters_setBackLight(g,3
      +                          );
  9278  0023E6  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9279  0023EA  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9280  0023EE  0E00               	movlw	0
  9281  0023F0  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9282  0023F2  0E03               	movlw	3
  9283  0023F4  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9284  0023F6  EC5E  F02B         	call	_GameParameters_setBackLight	;wreg free
  9285                           
  9286                           ;gameFunction.c: 197:     }
  9287  0023FA  D127               	goto	l858
  9288  0023FC                     l6984:
  9289  0023FC  EE20 F002          	lfsr	2,2
  9290  002400  5018               	movf	backlightController@g^0,w,c
  9291  002402  26D9               	addwf	fsr2l,f,c
  9292  002404  5019               	movf	(backlightController@g+1)^0,w,c
  9293  002406  22DA               	addwfc	fsr2h,f,c
  9294  002408  0E01               	movlw	1
  9295  00240A  50DB               	movf	plusw2,w,c
  9296  00240C  E104               	bnz	u4450
  9297  00240E  0E6A               	movlw	106
  9298  002410  5CDE               	subwf	postinc2,w,c
  9299  002412  A0D8               	btfss	status,0,c
  9300  002414  D018               	goto	l6990
  9301  002416                     u4450:
  9302  002416  EE20 F002          	lfsr	2,2
  9303  00241A  5018               	movf	backlightController@g^0,w,c
  9304  00241C  26D9               	addwf	fsr2l,f,c
  9305  00241E  5019               	movf	(backlightController@g+1)^0,w,c
  9306  002420  22DA               	addwfc	fsr2h,f,c
  9307  002422  0E01               	movlw	1
  9308  002424  50DB               	movf	plusw2,w,c
  9309  002426  E10F               	bnz	l6990
  9310  002428  0E78               	movlw	120
  9311  00242A  5CDE               	subwf	postinc2,w,c
  9312  00242C  B0D8               	btfsc	status,0,c
  9313  00242E  D00B               	goto	l6990
  9314                           
  9315                           ;gameFunction.c: 199:     {;gameFunction.c: 200:         GameParameters_setBackLight(g,4
      +                          );
  9316  002430  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9317  002434  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9318  002438  0E00               	movlw	0
  9319  00243A  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9320  00243C  0E04               	movlw	4
  9321  00243E  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9322  002440  EC5E  F02B         	call	_GameParameters_setBackLight	;wreg free
  9323                           
  9324                           ;gameFunction.c: 201:     }
  9325  002444  D102               	goto	l858
  9326  002446                     l6990:
  9327  002446  EE20 F002          	lfsr	2,2
  9328  00244A  5018               	movf	backlightController@g^0,w,c
  9329  00244C  26D9               	addwf	fsr2l,f,c
  9330  00244E  5019               	movf	(backlightController@g+1)^0,w,c
  9331  002450  22DA               	addwfc	fsr2h,f,c
  9332  002452  0E01               	movlw	1
  9333  002454  50DB               	movf	plusw2,w,c
  9334  002456  E104               	bnz	u4470
  9335  002458  0E78               	movlw	120
  9336  00245A  5CDE               	subwf	postinc2,w,c
  9337  00245C  A0D8               	btfss	status,0,c
  9338  00245E  D018               	goto	l6996
  9339  002460                     u4470:
  9340  002460  EE20 F002          	lfsr	2,2
  9341  002464  5018               	movf	backlightController@g^0,w,c
  9342  002466  26D9               	addwf	fsr2l,f,c
  9343  002468  5019               	movf	(backlightController@g+1)^0,w,c
  9344  00246A  22DA               	addwfc	fsr2h,f,c
  9345  00246C  0E01               	movlw	1
  9346  00246E  50DB               	movf	plusw2,w,c
  9347  002470  E10F               	bnz	l6996
  9348  002472  0E86               	movlw	134
  9349  002474  5CDE               	subwf	postinc2,w,c
  9350  002476  B0D8               	btfsc	status,0,c
  9351  002478  D00B               	goto	l6996
  9352                           
  9353                           ;gameFunction.c: 203:     {;gameFunction.c: 204:         GameParameters_setBackLight(g,5
      +                          );
  9354  00247A  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9355  00247E  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9356  002482  0E00               	movlw	0
  9357  002484  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9358  002486  0E05               	movlw	5
  9359  002488  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9360  00248A  EC5E  F02B         	call	_GameParameters_setBackLight	;wreg free
  9361                           
  9362                           ;gameFunction.c: 205:     }
  9363  00248E  D0DD               	goto	l858
  9364  002490                     l6996:
  9365  002490  EE20 F002          	lfsr	2,2
  9366  002494  5018               	movf	backlightController@g^0,w,c
  9367  002496  26D9               	addwf	fsr2l,f,c
  9368  002498  5019               	movf	(backlightController@g+1)^0,w,c
  9369  00249A  22DA               	addwfc	fsr2h,f,c
  9370  00249C  0E01               	movlw	1
  9371  00249E  50DB               	movf	plusw2,w,c
  9372  0024A0  E104               	bnz	u4490
  9373  0024A2  0E86               	movlw	134
  9374  0024A4  5CDE               	subwf	postinc2,w,c
  9375  0024A6  A0D8               	btfss	status,0,c
  9376  0024A8  D018               	goto	l7002
  9377  0024AA                     u4490:
  9378  0024AA  EE20 F002          	lfsr	2,2
  9379  0024AE  5018               	movf	backlightController@g^0,w,c
  9380  0024B0  26D9               	addwf	fsr2l,f,c
  9381  0024B2  5019               	movf	(backlightController@g+1)^0,w,c
  9382  0024B4  22DA               	addwfc	fsr2h,f,c
  9383  0024B6  0E01               	movlw	1
  9384  0024B8  50DB               	movf	plusw2,w,c
  9385  0024BA  E10F               	bnz	l7002
  9386  0024BC  0E96               	movlw	150
  9387  0024BE  5CDE               	subwf	postinc2,w,c
  9388  0024C0  B0D8               	btfsc	status,0,c
  9389  0024C2  D00B               	goto	l7002
  9390                           
  9391                           ;gameFunction.c: 207:     {;gameFunction.c: 208:         GameParameters_setBackLight(g,6
      +                          );
  9392  0024C4  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9393  0024C8  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9394  0024CC  0E00               	movlw	0
  9395  0024CE  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9396  0024D0  0E06               	movlw	6
  9397  0024D2  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9398  0024D4  EC5E  F02B         	call	_GameParameters_setBackLight	;wreg free
  9399                           
  9400                           ;gameFunction.c: 209:     }
  9401  0024D8  D0B8               	goto	l858
  9402  0024DA                     l7002:
  9403  0024DA  EE20 F002          	lfsr	2,2
  9404  0024DE  5018               	movf	backlightController@g^0,w,c
  9405  0024E0  26D9               	addwf	fsr2l,f,c
  9406  0024E2  5019               	movf	(backlightController@g+1)^0,w,c
  9407  0024E4  22DA               	addwfc	fsr2h,f,c
  9408  0024E6  0E01               	movlw	1
  9409  0024E8  50DB               	movf	plusw2,w,c
  9410  0024EA  E104               	bnz	u4510
  9411  0024EC  0E96               	movlw	150
  9412  0024EE  5CDE               	subwf	postinc2,w,c
  9413  0024F0  A0D8               	btfss	status,0,c
  9414  0024F2  D018               	goto	l7008
  9415  0024F4                     u4510:
  9416  0024F4  EE20 F002          	lfsr	2,2
  9417  0024F8  5018               	movf	backlightController@g^0,w,c
  9418  0024FA  26D9               	addwf	fsr2l,f,c
  9419  0024FC  5019               	movf	(backlightController@g+1)^0,w,c
  9420  0024FE  22DA               	addwfc	fsr2h,f,c
  9421  002500  0E01               	movlw	1
  9422  002502  50DB               	movf	plusw2,w,c
  9423  002504  E10F               	bnz	l7008
  9424  002506  0EA4               	movlw	164
  9425  002508  5CDE               	subwf	postinc2,w,c
  9426  00250A  B0D8               	btfsc	status,0,c
  9427  00250C  D00B               	goto	l7008
  9428                           
  9429                           ;gameFunction.c: 211:     {;gameFunction.c: 212:         GameParameters_setBackLight(g,7
      +                          );
  9430  00250E  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9431  002512  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9432  002516  0E00               	movlw	0
  9433  002518  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9434  00251A  0E07               	movlw	7
  9435  00251C  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9436  00251E  EC5E  F02B         	call	_GameParameters_setBackLight	;wreg free
  9437                           
  9438                           ;gameFunction.c: 213:     }
  9439  002522  D093               	goto	l858
  9440  002524                     l7008:
  9441  002524  EE20 F002          	lfsr	2,2
  9442  002528  5018               	movf	backlightController@g^0,w,c
  9443  00252A  26D9               	addwf	fsr2l,f,c
  9444  00252C  5019               	movf	(backlightController@g+1)^0,w,c
  9445  00252E  22DA               	addwfc	fsr2h,f,c
  9446  002530  0E01               	movlw	1
  9447  002532  50DB               	movf	plusw2,w,c
  9448  002534  E104               	bnz	u4530
  9449  002536  0EA4               	movlw	164
  9450  002538  5CDE               	subwf	postinc2,w,c
  9451  00253A  A0D8               	btfss	status,0,c
  9452  00253C  D018               	goto	l7014
  9453  00253E                     u4530:
  9454  00253E  EE20 F002          	lfsr	2,2
  9455  002542  5018               	movf	backlightController@g^0,w,c
  9456  002544  26D9               	addwf	fsr2l,f,c
  9457  002546  5019               	movf	(backlightController@g+1)^0,w,c
  9458  002548  22DA               	addwfc	fsr2h,f,c
  9459  00254A  0E01               	movlw	1
  9460  00254C  50DB               	movf	plusw2,w,c
  9461  00254E  E10F               	bnz	l7014
  9462  002550  0EB2               	movlw	178
  9463  002552  5CDE               	subwf	postinc2,w,c
  9464  002554  B0D8               	btfsc	status,0,c
  9465  002556  D00B               	goto	l7014
  9466                           
  9467                           ;gameFunction.c: 215:     {;gameFunction.c: 216:         GameParameters_setBackLight(g,8
      +                          );
  9468  002558  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9469  00255C  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9470  002560  0E00               	movlw	0
  9471  002562  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9472  002564  0E08               	movlw	8
  9473  002566  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9474  002568  EC5E  F02B         	call	_GameParameters_setBackLight	;wreg free
  9475                           
  9476                           ;gameFunction.c: 217:     }
  9477  00256C  D06E               	goto	l858
  9478  00256E                     l7014:
  9479  00256E  EE20 F002          	lfsr	2,2
  9480  002572  5018               	movf	backlightController@g^0,w,c
  9481  002574  26D9               	addwf	fsr2l,f,c
  9482  002576  5019               	movf	(backlightController@g+1)^0,w,c
  9483  002578  22DA               	addwfc	fsr2h,f,c
  9484  00257A  0E01               	movlw	1
  9485  00257C  50DB               	movf	plusw2,w,c
  9486  00257E  E104               	bnz	u4550
  9487  002580  0EB2               	movlw	178
  9488  002582  5CDE               	subwf	postinc2,w,c
  9489  002584  A0D8               	btfss	status,0,c
  9490  002586  D018               	goto	l7020
  9491  002588                     u4550:
  9492  002588  EE20 F002          	lfsr	2,2
  9493  00258C  5018               	movf	backlightController@g^0,w,c
  9494  00258E  26D9               	addwf	fsr2l,f,c
  9495  002590  5019               	movf	(backlightController@g+1)^0,w,c
  9496  002592  22DA               	addwfc	fsr2h,f,c
  9497  002594  0E01               	movlw	1
  9498  002596  50DB               	movf	plusw2,w,c
  9499  002598  E10F               	bnz	l7020
  9500  00259A  0EC0               	movlw	192
  9501  00259C  5CDE               	subwf	postinc2,w,c
  9502  00259E  B0D8               	btfsc	status,0,c
  9503  0025A0  D00B               	goto	l7020
  9504                           
  9505                           ;gameFunction.c: 219:     {;gameFunction.c: 220:         GameParameters_setBackLight(g,9
      +                          );
  9506  0025A2  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9507  0025A6  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9508  0025AA  0E00               	movlw	0
  9509  0025AC  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9510  0025AE  0E09               	movlw	9
  9511  0025B0  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9512  0025B2  EC5E  F02B         	call	_GameParameters_setBackLight	;wreg free
  9513                           
  9514                           ;gameFunction.c: 221:     }
  9515  0025B6  D049               	goto	l858
  9516  0025B8                     l7020:
  9517  0025B8  EE20 F002          	lfsr	2,2
  9518  0025BC  5018               	movf	backlightController@g^0,w,c
  9519  0025BE  26D9               	addwf	fsr2l,f,c
  9520  0025C0  5019               	movf	(backlightController@g+1)^0,w,c
  9521  0025C2  22DA               	addwfc	fsr2h,f,c
  9522  0025C4  0E01               	movlw	1
  9523  0025C6  50DB               	movf	plusw2,w,c
  9524  0025C8  E104               	bnz	u4570
  9525  0025CA  0EC0               	movlw	192
  9526  0025CC  5CDE               	subwf	postinc2,w,c
  9527  0025CE  A0D8               	btfss	status,0,c
  9528  0025D0  D018               	goto	l7026
  9529  0025D2                     u4570:
  9530  0025D2  EE20 F002          	lfsr	2,2
  9531  0025D6  5018               	movf	backlightController@g^0,w,c
  9532  0025D8  26D9               	addwf	fsr2l,f,c
  9533  0025DA  5019               	movf	(backlightController@g+1)^0,w,c
  9534  0025DC  22DA               	addwfc	fsr2h,f,c
  9535  0025DE  0E01               	movlw	1
  9536  0025E0  50DB               	movf	plusw2,w,c
  9537  0025E2  E10F               	bnz	l7026
  9538  0025E4  0ECE               	movlw	206
  9539  0025E6  5CDE               	subwf	postinc2,w,c
  9540  0025E8  B0D8               	btfsc	status,0,c
  9541  0025EA  D00B               	goto	l7026
  9542                           
  9543                           ;gameFunction.c: 223:     {;gameFunction.c: 224:         GameParameters_setBackLight(g,1
      +                          0);
  9544  0025EC  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9545  0025F0  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9546  0025F4  0E00               	movlw	0
  9547  0025F6  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9548  0025F8  0E0A               	movlw	10
  9549  0025FA  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9550  0025FC  EC5E  F02B         	call	_GameParameters_setBackLight	;wreg free
  9551                           
  9552                           ;gameFunction.c: 225:     }
  9553  002600  D024               	goto	l858
  9554  002602                     l7026:
  9555  002602  EE20 F002          	lfsr	2,2
  9556  002606  5018               	movf	backlightController@g^0,w,c
  9557  002608  26D9               	addwf	fsr2l,f,c
  9558  00260A  5019               	movf	(backlightController@g+1)^0,w,c
  9559  00260C  22DA               	addwfc	fsr2h,f,c
  9560  00260E  0E01               	movlw	1
  9561  002610  50DB               	movf	plusw2,w,c
  9562  002612  E104               	bnz	u4590
  9563  002614  0ECE               	movlw	206
  9564  002616  5CDE               	subwf	postinc2,w,c
  9565  002618  A0D8               	btfss	status,0,c
  9566  00261A  D017               	goto	l858
  9567  00261C                     u4590:
  9568  00261C  EE20 F002          	lfsr	2,2
  9569  002620  5018               	movf	backlightController@g^0,w,c
  9570  002622  26D9               	addwf	fsr2l,f,c
  9571  002624  5019               	movf	(backlightController@g+1)^0,w,c
  9572  002626  22DA               	addwfc	fsr2h,f,c
  9573  002628  0E01               	movlw	1
  9574  00262A  50DB               	movf	plusw2,w,c
  9575  00262C  E10E               	bnz	l858
  9576  00262E  0ED7               	movlw	215
  9577  002630  5CDE               	subwf	postinc2,w,c
  9578  002632  B0D8               	btfsc	status,0,c
  9579  002634  D00A               	goto	l858
  9580                           
  9581                           ;gameFunction.c: 227:     {;gameFunction.c: 228:         GameParameters_setBackLight(g,1
      +                          1);
  9582  002636  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9583  00263A  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9584  00263E  0E00               	movlw	0
  9585  002640  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9586  002642  0E0B               	movlw	11
  9587  002644  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9588  002646  EC5E  F02B         	call	_GameParameters_setBackLight	;wreg free
  9589  00264A                     l858:
  9590                           
  9591                           ;gameFunction.c: 230:     g->sldBackLight.value=g->backlight;
  9592  00264A  C018  FFD9         	movff	backlightController@g,fsr2l
  9593  00264E  C019  FFDA         	movff	backlightController@g+1,fsr2h
  9594  002652  EE10 F0A9          	lfsr	1,169
  9595  002656  5018               	movf	backlightController@g^0,w,c
  9596  002658  26E1               	addwf	fsr1l,f,c
  9597  00265A  5019               	movf	(backlightController@g+1)^0,w,c
  9598  00265C  22E2               	addwfc	fsr1h,f,c
  9599  00265E  CFDE FFE6          	movff	postinc2,postinc1
  9600  002662  CFDD FFE5          	movff	postdec2,postdec1
  9601  002666  0012               	return		;funcret
  9602  002668                     __end_of_backlightController:
  9603                           	callstack 0
  9604                           
  9605 ;; *************** function _GameParameters_setBackLight *****************
  9606 ;; Defined at:
  9607 ;;		line 38 in file "class/gameParameters.c"
  9608 ;; Parameters:    Size  Location     Type
  9609 ;;  s               2   17[COMRAM] PTR struct GameParameter
  9610 ;;		 -> g1(240), 
  9611 ;;  value           2   19[COMRAM] unsigned short 
  9612 ;; Auto vars:     Size  Location     Type
  9613 ;;		None
  9614 ;; Return value:  Size  Location     Type
  9615 ;;                  1    wreg      void 
  9616 ;; Registers used:
  9617 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9618 ;; Tracked objects:
  9619 ;;		On entry : 0/0
  9620 ;;		On exit  : 0/0
  9621 ;;		Unchanged: 0/0
  9622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9623 ;;      Params:         4       0       0       0       0       0       0
  9624 ;;      Locals:         0       0       0       0       0       0       0
  9625 ;;      Temps:          2       0       0       0       0       0       0
  9626 ;;      Totals:         6       0       0       0       0       0       0
  9627 ;;Total ram usage:        6 bytes
  9628 ;; Hardware stack levels used: 1
  9629 ;; Hardware stack levels required when called: 4
  9630 ;; This function calls:
  9631 ;;		Nothing
  9632 ;; This function is called by:
  9633 ;;		_backlightController
  9634 ;; This function uses a non-reentrant model
  9635 ;;
  9636                           
  9637                           	psect	text36
  9638  0056BC                     __ptext36:
  9639                           	callstack 0
  9640  0056BC                     _GameParameters_setBackLight:
  9641                           	callstack 21
  9642                           
  9643                           ;class/gameParameters.c: 38: void GameParameters_setBackLight(struct GameParameters* s, 
      +                          uint16_t value);class/gameParameters.c: 39: {;class/gameParameters.c: 40:     s->backlig
      +                          ht = value;
  9644                           
  9645                           ;incstack = 0
  9646  0056BC  C012  FFD9         	movff	GameParameters_setBackLight@s,fsr2l
  9647  0056C0  C013  FFDA         	movff	GameParameters_setBackLight@s+1,fsr2h
  9648  0056C4  C014  FFDE         	movff	GameParameters_setBackLight@value,postinc2
  9649  0056C8  C015  FFDD         	movff	GameParameters_setBackLight@value+1,postdec2
  9650                           
  9651                           ;class/gameParameters.c: 41:     if(s->backlight==11)
  9652  0056CC  C012  FFD9         	movff	GameParameters_setBackLight@s,fsr2l
  9653  0056D0  C013  FFDA         	movff	GameParameters_setBackLight@s+1,fsr2h
  9654  0056D4  0E0B               	movlw	11
  9655  0056D6  18DE               	xorwf	postinc2,w,c
  9656  0056D8  10DE               	iorwf	postinc2,w,c
  9657  0056DA  A4D8               	btfss	status,2,c
  9658  0056DC  D002               	goto	l6638
  9659                           
  9660                           ;class/gameParameters.c: 42:     {;class/gameParameters.c: 43:         CCPR2L = 255;
  9661  0056DE  6867               	setf	103,c	;volatile
  9662                           
  9663                           ;class/gameParameters.c: 44:     }
  9664  0056E0  0012               	return	
  9665  0056E2                     l6638:
  9666                           
  9667                           ;class/gameParameters.c: 46:     {;class/gameParameters.c: 47:         CCPR2L=(s->backli
      +                          ght)*23;
  9668  0056E2  C012  FFD9         	movff	GameParameters_setBackLight@s,fsr2l
  9669  0056E6  C013  FFDA         	movff	GameParameters_setBackLight@s+1,fsr2h
  9670  0056EA  50DF               	movf	indf2,w,c
  9671  0056EC  0D17               	mullw	23
  9672  0056EE  CFF3 FF67          	movff	prodl,3943	;volatile
  9673  0056F2  0012               	return		;funcret
  9674  0056F4                     __end_of_GameParameters_setBackLight:
  9675                           	callstack 0
  9676                           
  9677 ;; *************** function _XF_scheduleTimer *****************
  9678 ;; Defined at:
  9679 ;;		line 96 in file "xf/xf.c"
  9680 ;; Parameters:    Size  Location     Type
  9681 ;;  tm              2   31[COMRAM] unsigned short 
  9682 ;;  ev              1   33[COMRAM] unsigned char 
  9683 ;;  inISR           1   34[COMRAM] _Bool 
  9684 ;; Auto vars:     Size  Location     Type
  9685 ;;  i               1   35[COMRAM] unsigned char 
  9686 ;; Return value:  Size  Location     Type
  9687 ;;                  1    wreg      unsigned char 
  9688 ;; Registers used:
  9689 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9690 ;; Tracked objects:
  9691 ;;		On entry : 0/0
  9692 ;;		On exit  : 0/0
  9693 ;;		Unchanged: 0/0
  9694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9695 ;;      Params:         4       0       0       0       0       0       0
  9696 ;;      Locals:         1       0       0       0       0       0       0
  9697 ;;      Temps:          0       0       0       0       0       0       0
  9698 ;;      Totals:         5       0       0       0       0       0       0
  9699 ;;Total ram usage:        5 bytes
  9700 ;; Hardware stack levels used: 1
  9701 ;; Hardware stack levels required when called: 5
  9702 ;; This function calls:
  9703 ;;		_ENTERCRITICAL
  9704 ;;		_LEAVECRITICAL
  9705 ;; This function is called by:
  9706 ;;		_touchScreenInit
  9707 ;;		_touchScreenController
  9708 ;;		_gameControllerSM
  9709 ;;		_gameControllerController
  9710 ;; This function uses a non-reentrant model
  9711 ;;
  9712                           
  9713                           	psect	text37
  9714  0053E6                     __ptext37:
  9715                           	callstack 0
  9716  0053E6                     _XF_scheduleTimer:
  9717                           	callstack 22
  9718                           
  9719                           ;xf/xf.c: 96: TimerID XF_scheduleTimer(Time tm, Event ev, _Bool inISR);xf/xf.c: 97: {;xf
      +                          /xf.c: 98:     uint8_t i;;xf/xf.c: 100:     ENTERCRITICAL(inISR);
  9720                           
  9721                           ;incstack = 0
  9722  0053E6  5023               	movf	XF_scheduleTimer@inISR^0,w,c
  9723  0053E8  ECFA  F02C         	call	_ENTERCRITICAL
  9724                           
  9725                           ;xf/xf.c: 101:     for (i=0; i<8; i++)
  9726  0053EC  0E00               	movlw	0
  9727  0053EE  6E24               	movwf	XF_scheduleTimer@i^0,c
  9728  0053F0                     l6948:
  9729                           
  9730                           ;xf/xf.c: 102:     {;xf/xf.c: 103:         if (theXF.timerList[i].ev == NULLEVENT)
  9731  0053F0  5024               	movf	XF_scheduleTimer@i^0,w,c
  9732  0053F2  0D03               	mullw	3
  9733  0053F4  50F3               	movf	243,w,c
  9734  0053F6  0F62               	addlw	low (_theXF+2)
  9735  0053F8  6ED9               	movwf	fsr2l,c
  9736  0053FA  6ADA               	clrf	fsr2h,c
  9737  0053FC  50DF               	movf	indf2,w,c
  9738  0053FE  A4D8               	btfss	status,2,c
  9739  005400  D013               	goto	l6952
  9740                           
  9741                           ;xf/xf.c: 104:         {;xf/xf.c: 105:             theXF.timerList[i].tm = tm;
  9742  005402  5024               	movf	XF_scheduleTimer@i^0,w,c
  9743  005404  0D03               	mullw	3
  9744  005406  50F3               	movf	243,w,c
  9745  005408  0F60               	addlw	low _theXF
  9746  00540A  6ED9               	movwf	fsr2l,c
  9747  00540C  6ADA               	clrf	fsr2h,c
  9748  00540E  C020  FFDE         	movff	XF_scheduleTimer@tm,postinc2
  9749  005412  C021  FFDD         	movff	XF_scheduleTimer@tm+1,postdec2
  9750                           
  9751                           ;xf/xf.c: 106:             theXF.timerList[i].ev = ev;
  9752  005416  5024               	movf	XF_scheduleTimer@i^0,w,c
  9753  005418  0D03               	mullw	3
  9754  00541A  50F3               	movf	243,w,c
  9755  00541C  0F62               	addlw	low (_theXF+2)
  9756  00541E  6ED9               	movwf	fsr2l,c
  9757  005420  6ADA               	clrf	fsr2h,c
  9758  005422  C022  FFDF         	movff	XF_scheduleTimer@ev,indf2
  9759                           
  9760                           ;xf/xf.c: 107:             break;
  9761  005426  D004               	goto	u4360
  9762  005428                     l6952:
  9763                           
  9764                           ;xf/xf.c: 109:     }
  9765  005428  2A24               	incf	XF_scheduleTimer@i^0,f,c
  9766  00542A  0E07               	movlw	7
  9767  00542C  6424               	cpfsgt	XF_scheduleTimer@i^0,c
  9768  00542E  D7E0               	goto	l6948
  9769  005430                     u4360:
  9770                           
  9771                           ;xf/xf.c: 114:     LEAVECRITICAL(inISR);
  9772  005430  5023               	movf	XF_scheduleTimer@inISR^0,w,c
  9773  005432  ECF4  F02C         	call	_LEAVECRITICAL
  9774  005436  0012               	return		;funcret
  9775  005438                     __end_of_XF_scheduleTimer:
  9776                           	callstack 0
  9777                           
  9778 ;; *************** function _LCD_InSlider *****************
  9779 ;; Defined at:
  9780 ;;		line 546 in file "libraries/lcd_highlevel.c"
  9781 ;; Parameters:    Size  Location     Type
  9782 ;;  slider          2   17[COMRAM] PTR struct .
  9783 ;;		 -> g1(240), 
  9784 ;;  posX            2   19[COMRAM] unsigned short 
  9785 ;;  posY            2   21[COMRAM] unsigned short 
  9786 ;; Auto vars:     Size  Location     Type
  9787 ;;		None
  9788 ;; Return value:  Size  Location     Type
  9789 ;;                  1    wreg      unsigned char 
  9790 ;; Registers used:
  9791 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9792 ;; Tracked objects:
  9793 ;;		On entry : 0/0
  9794 ;;		On exit  : 0/0
  9795 ;;		Unchanged: 0/0
  9796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9797 ;;      Params:         6       0       0       0       0       0       0
  9798 ;;      Locals:         0       0       0       0       0       0       0
  9799 ;;      Temps:          4       0       0       0       0       0       0
  9800 ;;      Totals:        10       0       0       0       0       0       0
  9801 ;;Total ram usage:       10 bytes
  9802 ;; Hardware stack levels used: 1
  9803 ;; Hardware stack levels required when called: 4
  9804 ;; This function calls:
  9805 ;;		Nothing
  9806 ;; This function is called by:
  9807 ;;		_gameControllerController
  9808 ;; This function uses a non-reentrant model
  9809 ;;
  9810                           
  9811                           	psect	text38
  9812  004A96                     __ptext38:
  9813                           	callstack 0
  9814  004A96                     _LCD_InSlider:
  9815                           	callstack 22
  9816                           
  9817                           ;libraries/lcd_highlevel.c: 546: uint8_t LCD_InSlider(sld_t * slider, uint16_t posX, uin
      +                          t16_t posY);libraries/lcd_highlevel.c: 547: {;libraries/lcd_highlevel.c: 549:   if(posX 
      +                          < slider->posX)
  9818                           
  9819                           ;incstack = 0
  9820  004A96  C012  FFD9         	movff	LCD_InSlider@slider,fsr2l
  9821  004A9A  C013  FFDA         	movff	LCD_InSlider@slider+1,fsr2h
  9822  004A9E  50DE               	movf	postinc2,w,c
  9823  004AA0  5C14               	subwf	LCD_InSlider@posX^0,w,c
  9824  004AA2  50DE               	movf	postinc2,w,c
  9825  004AA4  5815               	subwfb	(LCD_InSlider@posX+1)^0,w,c
  9826  004AA6  B0D8               	btfsc	status,0,c
  9827  004AA8  D002               	goto	l6900
  9828  004AAA                     u4310:
  9829                           
  9830                           ;libraries/lcd_highlevel.c: 550:   {;libraries/lcd_highlevel.c: 551:     return 0;
  9831  004AAA  0E00               	movlw	0
  9832  004AAC  0012               	return	
  9833  004AAE                     l6900:
  9834                           
  9835                           ;libraries/lcd_highlevel.c: 554:   if(posX > (slider->posX + slider->width))
  9836  004AAE  EE20 F004          	lfsr	2,4
  9837  004AB2  5012               	movf	LCD_InSlider@slider^0,w,c
  9838  004AB4  26D9               	addwf	fsr2l,f,c
  9839  004AB6  5013               	movf	(LCD_InSlider@slider+1)^0,w,c
  9840  004AB8  22DA               	addwfc	fsr2h,f,c
  9841  004ABA  CFDE F018          	movff	postinc2,??_LCD_InSlider
  9842  004ABE  CFDD F019          	movff	postdec2,??_LCD_InSlider+1
  9843  004AC2  C012  FFD9         	movff	LCD_InSlider@slider,fsr2l
  9844  004AC6  C013  FFDA         	movff	LCD_InSlider@slider+1,fsr2h
  9845  004ACA  CFDE F01A          	movff	postinc2,??_LCD_InSlider+2
  9846  004ACE  CFDD F01B          	movff	postdec2,??_LCD_InSlider+3
  9847  004AD2  5018               	movf	??_LCD_InSlider^0,w,c
  9848  004AD4  261A               	addwf	(??_LCD_InSlider+2)^0,f,c
  9849  004AD6  5019               	movf	(??_LCD_InSlider+1)^0,w,c
  9850  004AD8  221B               	addwfc	(??_LCD_InSlider+3)^0,f,c
  9851  004ADA  5014               	movf	LCD_InSlider@posX^0,w,c
  9852  004ADC  5C1A               	subwf	(??_LCD_InSlider+2)^0,w,c
  9853  004ADE  5015               	movf	(LCD_InSlider@posX+1)^0,w,c
  9854  004AE0  581B               	subwfb	(??_LCD_InSlider+3)^0,w,c
  9855  004AE2  A0D8               	btfss	status,0,c
  9856  004AE4  D7E2               	goto	u4310
  9857                           
  9858                           ;libraries/lcd_highlevel.c: 559:   if(posY < slider->posY)
  9859  004AE6  EE20 F002          	lfsr	2,2
  9860  004AEA  5012               	movf	LCD_InSlider@slider^0,w,c
  9861  004AEC  26D9               	addwf	fsr2l,f,c
  9862  004AEE  5013               	movf	(LCD_InSlider@slider+1)^0,w,c
  9863  004AF0  22DA               	addwfc	fsr2h,f,c
  9864  004AF2  50DE               	movf	postinc2,w,c
  9865  004AF4  5C16               	subwf	LCD_InSlider@posY^0,w,c
  9866  004AF6  50DE               	movf	postinc2,w,c
  9867  004AF8  5817               	subwfb	(LCD_InSlider@posY+1)^0,w,c
  9868  004AFA  A0D8               	btfss	status,0,c
  9869  004AFC  D7D6               	goto	u4310
  9870                           
  9871                           ;libraries/lcd_highlevel.c: 564:   if(posY > (slider->posY + slider->height))
  9872  004AFE  EE20 F006          	lfsr	2,6
  9873  004B02  5012               	movf	LCD_InSlider@slider^0,w,c
  9874  004B04  26D9               	addwf	fsr2l,f,c
  9875  004B06  5013               	movf	(LCD_InSlider@slider+1)^0,w,c
  9876  004B08  22DA               	addwfc	fsr2h,f,c
  9877  004B0A  CFDE F018          	movff	postinc2,??_LCD_InSlider
  9878  004B0E  CFDD F019          	movff	postdec2,??_LCD_InSlider+1
  9879  004B12  EE20 F002          	lfsr	2,2
  9880  004B16  5012               	movf	LCD_InSlider@slider^0,w,c
  9881  004B18  26D9               	addwf	fsr2l,f,c
  9882  004B1A  5013               	movf	(LCD_InSlider@slider+1)^0,w,c
  9883  004B1C  22DA               	addwfc	fsr2h,f,c
  9884  004B1E  CFDE F01A          	movff	postinc2,??_LCD_InSlider+2
  9885  004B22  CFDD F01B          	movff	postdec2,??_LCD_InSlider+3
  9886  004B26  5018               	movf	??_LCD_InSlider^0,w,c
  9887  004B28  261A               	addwf	(??_LCD_InSlider+2)^0,f,c
  9888  004B2A  5019               	movf	(??_LCD_InSlider+1)^0,w,c
  9889  004B2C  221B               	addwfc	(??_LCD_InSlider+3)^0,f,c
  9890  004B2E  5016               	movf	LCD_InSlider@posY^0,w,c
  9891  004B30  5C1A               	subwf	(??_LCD_InSlider+2)^0,w,c
  9892  004B32  5017               	movf	(LCD_InSlider@posY+1)^0,w,c
  9893  004B34  581B               	subwfb	(??_LCD_InSlider+3)^0,w,c
  9894  004B36  A0D8               	btfss	status,0,c
  9895  004B38  D7B8               	goto	u4310
  9896                           
  9897                           ;libraries/lcd_highlevel.c: 568:   return 1;
  9898  004B3A  0E01               	movlw	1
  9899  004B3C  0012               	return		;funcret
  9900  004B3E                     __end_of_LCD_InSlider:
  9901                           	callstack 0
  9902                           
  9903 ;; *************** function _LCD_InButton *****************
  9904 ;; Defined at:
  9905 ;;		line 514 in file "libraries/lcd_highlevel.c"
  9906 ;; Parameters:    Size  Location     Type
  9907 ;;  button          2   17[COMRAM] PTR struct .
  9908 ;;		 -> g1(240), 
  9909 ;;  posX            2   19[COMRAM] unsigned short 
  9910 ;;  posY            2   21[COMRAM] unsigned short 
  9911 ;; Auto vars:     Size  Location     Type
  9912 ;;		None
  9913 ;; Return value:  Size  Location     Type
  9914 ;;                  1    wreg      unsigned char 
  9915 ;; Registers used:
  9916 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9917 ;; Tracked objects:
  9918 ;;		On entry : 0/0
  9919 ;;		On exit  : 0/0
  9920 ;;		Unchanged: 0/0
  9921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9922 ;;      Params:         6       0       0       0       0       0       0
  9923 ;;      Locals:         0       0       0       0       0       0       0
  9924 ;;      Temps:          4       0       0       0       0       0       0
  9925 ;;      Totals:        10       0       0       0       0       0       0
  9926 ;;Total ram usage:       10 bytes
  9927 ;; Hardware stack levels used: 1
  9928 ;; Hardware stack levels required when called: 4
  9929 ;; This function calls:
  9930 ;;		Nothing
  9931 ;; This function is called by:
  9932 ;;		_gameControllerController
  9933 ;; This function uses a non-reentrant model
  9934 ;;
  9935                           
  9936                           	psect	text39
  9937  004B3E                     __ptext39:
  9938                           	callstack 0
  9939  004B3E                     _LCD_InButton:
  9940                           	callstack 22
  9941                           
  9942                           ;libraries/lcd_highlevel.c: 514: uint8_t LCD_InButton(btn_t * button, uint16_t posX, uin
      +                          t16_t posY);libraries/lcd_highlevel.c: 515: {;libraries/lcd_highlevel.c: 517:   if(posX 
      +                          < button->posX)
  9943                           
  9944                           ;incstack = 0
  9945  004B3E  C012  FFD9         	movff	LCD_InButton@button,fsr2l
  9946  004B42  C013  FFDA         	movff	LCD_InButton@button+1,fsr2h
  9947  004B46  50DE               	movf	postinc2,w,c
  9948  004B48  5C14               	subwf	LCD_InButton@posX^0,w,c
  9949  004B4A  50DE               	movf	postinc2,w,c
  9950  004B4C  5815               	subwfb	(LCD_InButton@posX+1)^0,w,c
  9951  004B4E  B0D8               	btfsc	status,0,c
  9952  004B50  D002               	goto	l6872
  9953  004B52                     u4270:
  9954                           
  9955                           ;libraries/lcd_highlevel.c: 518:   {;libraries/lcd_highlevel.c: 519:     return 0;
  9956  004B52  0E00               	movlw	0
  9957  004B54  0012               	return	
  9958  004B56                     l6872:
  9959                           
  9960                           ;libraries/lcd_highlevel.c: 522:   if(posX > (button->posX + button->width))
  9961  004B56  EE20 F004          	lfsr	2,4
  9962  004B5A  5012               	movf	LCD_InButton@button^0,w,c
  9963  004B5C  26D9               	addwf	fsr2l,f,c
  9964  004B5E  5013               	movf	(LCD_InButton@button+1)^0,w,c
  9965  004B60  22DA               	addwfc	fsr2h,f,c
  9966  004B62  CFDE F018          	movff	postinc2,??_LCD_InButton
  9967  004B66  CFDD F019          	movff	postdec2,??_LCD_InButton+1
  9968  004B6A  C012  FFD9         	movff	LCD_InButton@button,fsr2l
  9969  004B6E  C013  FFDA         	movff	LCD_InButton@button+1,fsr2h
  9970  004B72  CFDE F01A          	movff	postinc2,??_LCD_InButton+2
  9971  004B76  CFDD F01B          	movff	postdec2,??_LCD_InButton+3
  9972  004B7A  5018               	movf	??_LCD_InButton^0,w,c
  9973  004B7C  261A               	addwf	(??_LCD_InButton+2)^0,f,c
  9974  004B7E  5019               	movf	(??_LCD_InButton+1)^0,w,c
  9975  004B80  221B               	addwfc	(??_LCD_InButton+3)^0,f,c
  9976  004B82  5014               	movf	LCD_InButton@posX^0,w,c
  9977  004B84  5C1A               	subwf	(??_LCD_InButton+2)^0,w,c
  9978  004B86  5015               	movf	(LCD_InButton@posX+1)^0,w,c
  9979  004B88  581B               	subwfb	(??_LCD_InButton+3)^0,w,c
  9980  004B8A  A0D8               	btfss	status,0,c
  9981  004B8C  D7E2               	goto	u4270
  9982                           
  9983                           ;libraries/lcd_highlevel.c: 527:   if(posY < button->posY)
  9984  004B8E  EE20 F002          	lfsr	2,2
  9985  004B92  5012               	movf	LCD_InButton@button^0,w,c
  9986  004B94  26D9               	addwf	fsr2l,f,c
  9987  004B96  5013               	movf	(LCD_InButton@button+1)^0,w,c
  9988  004B98  22DA               	addwfc	fsr2h,f,c
  9989  004B9A  50DE               	movf	postinc2,w,c
  9990  004B9C  5C16               	subwf	LCD_InButton@posY^0,w,c
  9991  004B9E  50DE               	movf	postinc2,w,c
  9992  004BA0  5817               	subwfb	(LCD_InButton@posY+1)^0,w,c
  9993  004BA2  A0D8               	btfss	status,0,c
  9994  004BA4  D7D6               	goto	u4270
  9995                           
  9996                           ;libraries/lcd_highlevel.c: 532:   if(posY > (button->posY + button->height))
  9997  004BA6  EE20 F006          	lfsr	2,6
  9998  004BAA  5012               	movf	LCD_InButton@button^0,w,c
  9999  004BAC  26D9               	addwf	fsr2l,f,c
 10000  004BAE  5013               	movf	(LCD_InButton@button+1)^0,w,c
 10001  004BB0  22DA               	addwfc	fsr2h,f,c
 10002  004BB2  CFDE F018          	movff	postinc2,??_LCD_InButton
 10003  004BB6  CFDD F019          	movff	postdec2,??_LCD_InButton+1
 10004  004BBA  EE20 F002          	lfsr	2,2
 10005  004BBE  5012               	movf	LCD_InButton@button^0,w,c
 10006  004BC0  26D9               	addwf	fsr2l,f,c
 10007  004BC2  5013               	movf	(LCD_InButton@button+1)^0,w,c
 10008  004BC4  22DA               	addwfc	fsr2h,f,c
 10009  004BC6  CFDE F01A          	movff	postinc2,??_LCD_InButton+2
 10010  004BCA  CFDD F01B          	movff	postdec2,??_LCD_InButton+3
 10011  004BCE  5018               	movf	??_LCD_InButton^0,w,c
 10012  004BD0  261A               	addwf	(??_LCD_InButton+2)^0,f,c
 10013  004BD2  5019               	movf	(??_LCD_InButton+1)^0,w,c
 10014  004BD4  221B               	addwfc	(??_LCD_InButton+3)^0,f,c
 10015  004BD6  5016               	movf	LCD_InButton@posY^0,w,c
 10016  004BD8  5C1A               	subwf	(??_LCD_InButton+2)^0,w,c
 10017  004BDA  5017               	movf	(LCD_InButton@posY+1)^0,w,c
 10018  004BDC  581B               	subwfb	(??_LCD_InButton+3)^0,w,c
 10019  004BDE  A0D8               	btfss	status,0,c
 10020  004BE0  D7B8               	goto	u4270
 10021                           
 10022                           ;libraries/lcd_highlevel.c: 536:   return 1;
 10023  004BE2  0E01               	movlw	1
 10024  004BE4  0012               	return		;funcret
 10025  004BE6                     __end_of_LCD_InButton:
 10026                           	callstack 0
 10027                           
 10028 ;; *************** function _GameParameters_init *****************
 10029 ;; Defined at:
 10030 ;;		line 7 in file "class/gameParameters.c"
 10031 ;; Parameters:    Size  Location     Type
 10032 ;;  s               2   42[COMRAM] PTR struct GameParameter
 10033 ;;		 -> g1(240), 
 10034 ;; Auto vars:     Size  Location     Type
 10035 ;;		None
 10036 ;; Return value:  Size  Location     Type
 10037 ;;                  1    wreg      void 
 10038 ;; Registers used:
 10039 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10040 ;; Tracked objects:
 10041 ;;		On entry : 0/0
 10042 ;;		On exit  : 0/0
 10043 ;;		Unchanged: 0/0
 10044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10045 ;;      Params:         2       0       0       0       0       0       0
 10046 ;;      Locals:         0       0       0       0       0       0       0
 10047 ;;      Temps:          0       0       0       0       0       0       0
 10048 ;;      Totals:         2       0       0       0       0       0       0
 10049 ;;Total ram usage:        2 bytes
 10050 ;; Hardware stack levels used: 1
 10051 ;; Hardware stack levels required when called: 5
 10052 ;; This function calls:
 10053 ;;		_Ball_init
 10054 ;;		_LCD_ButtonCreate
 10055 ;;		_LCD_SliderCreate
 10056 ;;		_Paddle_init
 10057 ;;		_Score_init
 10058 ;; This function is called by:
 10059 ;;		_Factory_init
 10060 ;;		_gameControllerController
 10061 ;; This function uses a non-reentrant model
 10062 ;;
 10063                           
 10064                           	psect	text40
 10065  001B1C                     __ptext40:
 10066                           	callstack 0
 10067  001B1C                     _GameParameters_init:
 10068                           	callstack 21
 10069                           
 10070                           ;class/gameParameters.c: 7: void GameParameters_init(struct GameParameters* s);class/gam
      +                          eParameters.c: 8: {;class/gameParameters.c: 10:     s->backlight = 11;
 10071                           
 10072                           ;incstack = 0
 10073  001B1C  C02B  FFD9         	movff	GameParameters_init@s,fsr2l
 10074  001B20  C02C  FFDA         	movff	GameParameters_init@s+1,fsr2h
 10075  001B24  0E0B               	movlw	11
 10076  001B26  6EDE               	movwf	postinc2,c
 10077  001B28  0E00               	movlw	0
 10078  001B2A  6EDD               	movwf	postdec2,c
 10079                           
 10080                           ;class/gameParameters.c: 11:     CCPR2L = 255;
 10081  001B2C  6867               	setf	103,c	;volatile
 10082                           
 10083                           ;class/gameParameters.c: 12:     s->x=0;
 10084  001B2E  EE20 F002          	lfsr	2,2
 10085  001B32  502B               	movf	GameParameters_init@s^0,w,c
 10086  001B34  26D9               	addwf	fsr2l,f,c
 10087  001B36  502C               	movf	(GameParameters_init@s+1)^0,w,c
 10088  001B38  22DA               	addwfc	fsr2h,f,c
 10089  001B3A  0E00               	movlw	0
 10090  001B3C  6EDE               	movwf	postinc2,c
 10091  001B3E  0E00               	movlw	0
 10092  001B40  6EDD               	movwf	postdec2,c
 10093                           
 10094                           ;class/gameParameters.c: 13:     s->y=0;
 10095  001B42  EE20 F004          	lfsr	2,4
 10096  001B46  502B               	movf	GameParameters_init@s^0,w,c
 10097  001B48  26D9               	addwf	fsr2l,f,c
 10098  001B4A  502C               	movf	(GameParameters_init@s+1)^0,w,c
 10099  001B4C  22DA               	addwfc	fsr2h,f,c
 10100  001B4E  0E00               	movlw	0
 10101  001B50  6EDE               	movwf	postinc2,c
 10102  001B52  0E00               	movlw	0
 10103  001B54  6EDD               	movwf	postdec2,c
 10104                           
 10105                           ;class/gameParameters.c: 14:     s->level=1;
 10106  001B56  EE20 F006          	lfsr	2,6
 10107  001B5A  502B               	movf	GameParameters_init@s^0,w,c
 10108  001B5C  26D9               	addwf	fsr2l,f,c
 10109  001B5E  502C               	movf	(GameParameters_init@s+1)^0,w,c
 10110  001B60  22DA               	addwfc	fsr2h,f,c
 10111  001B62  0E01               	movlw	1
 10112  001B64  6EDE               	movwf	postinc2,c
 10113  001B66  0E00               	movlw	0
 10114  001B68  6EDD               	movwf	postdec2,c
 10115                           
 10116                           ;class/gameParameters.c: 15:     Score_init(&s->s1);
 10117  001B6A  0EEA               	movlw	234
 10118  001B6C  242B               	addwf	GameParameters_init@s^0,w,c
 10119  001B6E  6E12               	movwf	Score_init@s^0,c
 10120  001B70  0E00               	movlw	0
 10121  001B72  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10122  001B74  6E13               	movwf	(Score_init@s+1)^0,c
 10123  001B76  EC68  F02C         	call	_Score_init	;wreg free
 10124                           
 10125                           ;class/gameParameters.c: 16:     Ball_init(&(s->b));
 10126  001B7A  0ECA               	movlw	202
 10127  001B7C  242B               	addwf	GameParameters_init@s^0,w,c
 10128  001B7E  6E12               	movwf	Ball_init@b^0,c
 10129  001B80  0E00               	movlw	0
 10130  001B82  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10131  001B84  6E13               	movwf	(Ball_init@b+1)^0,c
 10132  001B86  EC6A  F029         	call	_Ball_init	;wreg free
 10133                           
 10134                           ;class/gameParameters.c: 17:     s->b.dy=1;
 10135  001B8A  EE20 F0D4          	lfsr	2,212
 10136  001B8E  502B               	movf	GameParameters_init@s^0,w,c
 10137  001B90  26D9               	addwf	fsr2l,f,c
 10138  001B92  502C               	movf	(GameParameters_init@s+1)^0,w,c
 10139  001B94  22DA               	addwfc	fsr2h,f,c
 10140  001B96  0E01               	movlw	1
 10141  001B98  6EDE               	movwf	postinc2,c
 10142  001B9A  0E00               	movlw	0
 10143  001B9C  6EDD               	movwf	postdec2,c
 10144                           
 10145                           ;class/gameParameters.c: 18:     Paddle_init(&(s->p1),0);
 10146  001B9E  0ED6               	movlw	214
 10147  001BA0  242B               	addwf	GameParameters_init@s^0,w,c
 10148  001BA2  6E12               	movwf	Paddle_init@p^0,c
 10149  001BA4  0E00               	movlw	0
 10150  001BA6  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10151  001BA8  6E13               	movwf	(Paddle_init@p+1)^0,c
 10152  001BAA  0E00               	movlw	0
 10153  001BAC  6E15               	movwf	(Paddle_init@team+1)^0,c
 10154  001BAE  0E00               	movlw	0
 10155  001BB0  6E14               	movwf	Paddle_init@team^0,c
 10156  001BB2  EC46  F026         	call	_Paddle_init	;wreg free
 10157                           
 10158                           ;class/gameParameters.c: 19:     Paddle_init(&(s->p2),1);
 10159  001BB6  0EE0               	movlw	224
 10160  001BB8  242B               	addwf	GameParameters_init@s^0,w,c
 10161  001BBA  6E12               	movwf	Paddle_init@p^0,c
 10162  001BBC  0E00               	movlw	0
 10163  001BBE  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10164  001BC0  6E13               	movwf	(Paddle_init@p+1)^0,c
 10165  001BC2  0E00               	movlw	0
 10166  001BC4  6E15               	movwf	(Paddle_init@team+1)^0,c
 10167  001BC6  0E01               	movlw	1
 10168  001BC8  6E14               	movwf	Paddle_init@team^0,c
 10169  001BCA  EC46  F026         	call	_Paddle_init	;wreg free
 10170                           
 10171                           ;class/gameParameters.c: 22:     LCD_ButtonCreate(10,200,90,30,0b0000000000000000,0b1111
      +                          111111111111,"1 Player",&arialNarrow_12ptFontInfo,((void*)0),((void*)0),((void*)0),&(s->
      +                          btnOnePlayer),1);
 10172  001BCE  0E00               	movlw	0
 10173  001BD0  6E13               	movwf	(LCD_ButtonCreate@posX+1)^0,c
 10174  001BD2  0E0A               	movlw	10
 10175  001BD4  6E12               	movwf	LCD_ButtonCreate@posX^0,c
 10176  001BD6  0E00               	movlw	0
 10177  001BD8  6E15               	movwf	(LCD_ButtonCreate@posY+1)^0,c
 10178  001BDA  0EC8               	movlw	200
 10179  001BDC  6E14               	movwf	LCD_ButtonCreate@posY^0,c
 10180  001BDE  0E00               	movlw	0
 10181  001BE0  6E17               	movwf	(LCD_ButtonCreate@width+1)^0,c
 10182  001BE2  0E5A               	movlw	90
 10183  001BE4  6E16               	movwf	LCD_ButtonCreate@width^0,c
 10184  001BE6  0E00               	movlw	0
 10185  001BE8  6E19               	movwf	(LCD_ButtonCreate@height+1)^0,c
 10186  001BEA  0E1E               	movlw	30
 10187  001BEC  6E18               	movwf	LCD_ButtonCreate@height^0,c
 10188  001BEE  0E00               	movlw	0
 10189  001BF0  6E1B               	movwf	(LCD_ButtonCreate@txtColor+1)^0,c
 10190  001BF2  0E00               	movlw	0
 10191  001BF4  6E1A               	movwf	LCD_ButtonCreate@txtColor^0,c
 10192  001BF6  0EFF               	movlw	255
 10193  001BF8  6E1D               	movwf	(LCD_ButtonCreate@bgColor+1)^0,c
 10194  001BFA  681C               	setf	LCD_ButtonCreate@bgColor^0,c
 10195  001BFC  0ED9               	movlw	low STR_4
 10196  001BFE  6E1E               	movwf	LCD_ButtonCreate@textOrBmp^0,c
 10197  001C00  0E7F               	movlw	high STR_4
 10198  001C02  6E1F               	movwf	(LCD_ButtonCreate@textOrBmp+1)^0,c
 10199  001C04  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 10200  001C06  6E20               	movwf	LCD_ButtonCreate@font^0,c
 10201  001C08  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 10202  001C0A  6E21               	movwf	(LCD_ButtonCreate@font+1)^0,c
 10203  001C0C  0E00               	movlw	0
 10204  001C0E  6E22               	movwf	LCD_ButtonCreate@fpPress^0,c
 10205  001C10  0E00               	movlw	0
 10206  001C12  6E23               	movwf	(LCD_ButtonCreate@fpPress+1)^0,c
 10207  001C14  0E00               	movlw	0
 10208  001C16  6E24               	movwf	LCD_ButtonCreate@fpReleased^0,c
 10209  001C18  0E00               	movlw	0
 10210  001C1A  6E25               	movwf	(LCD_ButtonCreate@fpReleased+1)^0,c
 10211  001C1C  0E00               	movlw	0
 10212  001C1E  6E26               	movwf	LCD_ButtonCreate@fpOut^0,c
 10213  001C20  0E00               	movlw	0
 10214  001C22  6E27               	movwf	(LCD_ButtonCreate@fpOut+1)^0,c
 10215  001C24  0E20               	movlw	32
 10216  001C26  242B               	addwf	GameParameters_init@s^0,w,c
 10217  001C28  6E28               	movwf	LCD_ButtonCreate@button^0,c
 10218  001C2A  0E00               	movlw	0
 10219  001C2C  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10220  001C2E  6E29               	movwf	(LCD_ButtonCreate@button+1)^0,c
 10221  001C30  0E01               	movlw	1
 10222  001C32  6E2A               	movwf	LCD_ButtonCreate@index^0,c
 10223  001C34  ECAE  F01F         	call	_LCD_ButtonCreate	;wreg free
 10224                           
 10225                           ;class/gameParameters.c: 23:     LCD_ButtonCreate(140,200,90,30,0b0000000000000000,0b111
      +                          1111111111111,"2 Player",&arialNarrow_12ptFontInfo,((void*)0),((void*)0),((void*)0),&(s-
      +                          >btnTwoPlayer),2);
 10226  001C38  0E00               	movlw	0
 10227  001C3A  6E13               	movwf	(LCD_ButtonCreate@posX+1)^0,c
 10228  001C3C  0E8C               	movlw	140
 10229  001C3E  6E12               	movwf	LCD_ButtonCreate@posX^0,c
 10230  001C40  0E00               	movlw	0
 10231  001C42  6E15               	movwf	(LCD_ButtonCreate@posY+1)^0,c
 10232  001C44  0EC8               	movlw	200
 10233  001C46  6E14               	movwf	LCD_ButtonCreate@posY^0,c
 10234  001C48  0E00               	movlw	0
 10235  001C4A  6E17               	movwf	(LCD_ButtonCreate@width+1)^0,c
 10236  001C4C  0E5A               	movlw	90
 10237  001C4E  6E16               	movwf	LCD_ButtonCreate@width^0,c
 10238  001C50  0E00               	movlw	0
 10239  001C52  6E19               	movwf	(LCD_ButtonCreate@height+1)^0,c
 10240  001C54  0E1E               	movlw	30
 10241  001C56  6E18               	movwf	LCD_ButtonCreate@height^0,c
 10242  001C58  0E00               	movlw	0
 10243  001C5A  6E1B               	movwf	(LCD_ButtonCreate@txtColor+1)^0,c
 10244  001C5C  0E00               	movlw	0
 10245  001C5E  6E1A               	movwf	LCD_ButtonCreate@txtColor^0,c
 10246  001C60  0EFF               	movlw	255
 10247  001C62  6E1D               	movwf	(LCD_ButtonCreate@bgColor+1)^0,c
 10248  001C64  681C               	setf	LCD_ButtonCreate@bgColor^0,c
 10249  001C66  0EE2               	movlw	low STR_5
 10250  001C68  6E1E               	movwf	LCD_ButtonCreate@textOrBmp^0,c
 10251  001C6A  0E7F               	movlw	high STR_5
 10252  001C6C  6E1F               	movwf	(LCD_ButtonCreate@textOrBmp+1)^0,c
 10253  001C6E  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 10254  001C70  6E20               	movwf	LCD_ButtonCreate@font^0,c
 10255  001C72  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 10256  001C74  6E21               	movwf	(LCD_ButtonCreate@font+1)^0,c
 10257  001C76  0E00               	movlw	0
 10258  001C78  6E22               	movwf	LCD_ButtonCreate@fpPress^0,c
 10259  001C7A  0E00               	movlw	0
 10260  001C7C  6E23               	movwf	(LCD_ButtonCreate@fpPress+1)^0,c
 10261  001C7E  0E00               	movlw	0
 10262  001C80  6E24               	movwf	LCD_ButtonCreate@fpReleased^0,c
 10263  001C82  0E00               	movlw	0
 10264  001C84  6E25               	movwf	(LCD_ButtonCreate@fpReleased+1)^0,c
 10265  001C86  0E00               	movlw	0
 10266  001C88  6E26               	movwf	LCD_ButtonCreate@fpOut^0,c
 10267  001C8A  0E00               	movlw	0
 10268  001C8C  6E27               	movwf	(LCD_ButtonCreate@fpOut+1)^0,c
 10269  001C8E  0E38               	movlw	56
 10270  001C90  242B               	addwf	GameParameters_init@s^0,w,c
 10271  001C92  6E28               	movwf	LCD_ButtonCreate@button^0,c
 10272  001C94  0E00               	movlw	0
 10273  001C96  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10274  001C98  6E29               	movwf	(LCD_ButtonCreate@button+1)^0,c
 10275  001C9A  0E02               	movlw	2
 10276  001C9C  6E2A               	movwf	LCD_ButtonCreate@index^0,c
 10277  001C9E  ECAE  F01F         	call	_LCD_ButtonCreate	;wreg free
 10278                           
 10279                           ;class/gameParameters.c: 24:     LCD_ButtonCreate(10,250,90,30,0b0000000000000000,0b1111
      +                          111111111111,"Parametres",&arialNarrow_12ptFontInfo,((void*)0),((void*)0),((void*)0),&(s
      +                          ->btnParam),3);
 10280  001CA2  0E00               	movlw	0
 10281  001CA4  6E13               	movwf	(LCD_ButtonCreate@posX+1)^0,c
 10282  001CA6  0E0A               	movlw	10
 10283  001CA8  6E12               	movwf	LCD_ButtonCreate@posX^0,c
 10284  001CAA  0E00               	movlw	0
 10285  001CAC  6E15               	movwf	(LCD_ButtonCreate@posY+1)^0,c
 10286  001CAE  0EFA               	movlw	250
 10287  001CB0  6E14               	movwf	LCD_ButtonCreate@posY^0,c
 10288  001CB2  0E00               	movlw	0
 10289  001CB4  6E17               	movwf	(LCD_ButtonCreate@width+1)^0,c
 10290  001CB6  0E5A               	movlw	90
 10291  001CB8  6E16               	movwf	LCD_ButtonCreate@width^0,c
 10292  001CBA  0E00               	movlw	0
 10293  001CBC  6E19               	movwf	(LCD_ButtonCreate@height+1)^0,c
 10294  001CBE  0E1E               	movlw	30
 10295  001CC0  6E18               	movwf	LCD_ButtonCreate@height^0,c
 10296  001CC2  0E00               	movlw	0
 10297  001CC4  6E1B               	movwf	(LCD_ButtonCreate@txtColor+1)^0,c
 10298  001CC6  0E00               	movlw	0
 10299  001CC8  6E1A               	movwf	LCD_ButtonCreate@txtColor^0,c
 10300  001CCA  0EFF               	movlw	255
 10301  001CCC  6E1D               	movwf	(LCD_ButtonCreate@bgColor+1)^0,c
 10302  001CCE  681C               	setf	LCD_ButtonCreate@bgColor^0,c
 10303  001CD0  0EB2               	movlw	low STR_6
 10304  001CD2  6E1E               	movwf	LCD_ButtonCreate@textOrBmp^0,c
 10305  001CD4  0E7F               	movlw	high STR_6
 10306  001CD6  6E1F               	movwf	(LCD_ButtonCreate@textOrBmp+1)^0,c
 10307  001CD8  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 10308  001CDA  6E20               	movwf	LCD_ButtonCreate@font^0,c
 10309  001CDC  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 10310  001CDE  6E21               	movwf	(LCD_ButtonCreate@font+1)^0,c
 10311  001CE0  0E00               	movlw	0
 10312  001CE2  6E22               	movwf	LCD_ButtonCreate@fpPress^0,c
 10313  001CE4  0E00               	movlw	0
 10314  001CE6  6E23               	movwf	(LCD_ButtonCreate@fpPress+1)^0,c
 10315  001CE8  0E00               	movlw	0
 10316  001CEA  6E24               	movwf	LCD_ButtonCreate@fpReleased^0,c
 10317  001CEC  0E00               	movlw	0
 10318  001CEE  6E25               	movwf	(LCD_ButtonCreate@fpReleased+1)^0,c
 10319  001CF0  0E00               	movlw	0
 10320  001CF2  6E26               	movwf	LCD_ButtonCreate@fpOut^0,c
 10321  001CF4  0E00               	movlw	0
 10322  001CF6  6E27               	movwf	(LCD_ButtonCreate@fpOut+1)^0,c
 10323  001CF8  0E08               	movlw	8
 10324  001CFA  242B               	addwf	GameParameters_init@s^0,w,c
 10325  001CFC  6E28               	movwf	LCD_ButtonCreate@button^0,c
 10326  001CFE  0E00               	movlw	0
 10327  001D00  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10328  001D02  6E29               	movwf	(LCD_ButtonCreate@button+1)^0,c
 10329  001D04  0E03               	movlw	3
 10330  001D06  6E2A               	movwf	LCD_ButtonCreate@index^0,c
 10331  001D08  ECAE  F01F         	call	_LCD_ButtonCreate	;wreg free
 10332                           
 10333                           ;class/gameParameters.c: 25:     LCD_ButtonCreate(140,250,90,30,0b0000000000000000,0b111
      +                          1111111111111,"Turn Off",&arialNarrow_12ptFontInfo,((void*)0),((void*)0),((void*)0),&(s-
      +                          >btnTurnOff),4);
 10334  001D0C  0E00               	movlw	0
 10335  001D0E  6E13               	movwf	(LCD_ButtonCreate@posX+1)^0,c
 10336  001D10  0E8C               	movlw	140
 10337  001D12  6E12               	movwf	LCD_ButtonCreate@posX^0,c
 10338  001D14  0E00               	movlw	0
 10339  001D16  6E15               	movwf	(LCD_ButtonCreate@posY+1)^0,c
 10340  001D18  0EFA               	movlw	250
 10341  001D1A  6E14               	movwf	LCD_ButtonCreate@posY^0,c
 10342  001D1C  0E00               	movlw	0
 10343  001D1E  6E17               	movwf	(LCD_ButtonCreate@width+1)^0,c
 10344  001D20  0E5A               	movlw	90
 10345  001D22  6E16               	movwf	LCD_ButtonCreate@width^0,c
 10346  001D24  0E00               	movlw	0
 10347  001D26  6E19               	movwf	(LCD_ButtonCreate@height+1)^0,c
 10348  001D28  0E1E               	movlw	30
 10349  001D2A  6E18               	movwf	LCD_ButtonCreate@height^0,c
 10350  001D2C  0E00               	movlw	0
 10351  001D2E  6E1B               	movwf	(LCD_ButtonCreate@txtColor+1)^0,c
 10352  001D30  0E00               	movlw	0
 10353  001D32  6E1A               	movwf	LCD_ButtonCreate@txtColor^0,c
 10354  001D34  0EFF               	movlw	255
 10355  001D36  6E1D               	movwf	(LCD_ButtonCreate@bgColor+1)^0,c
 10356  001D38  681C               	setf	LCD_ButtonCreate@bgColor^0,c
 10357  001D3A  0ED0               	movlw	low STR_7
 10358  001D3C  6E1E               	movwf	LCD_ButtonCreate@textOrBmp^0,c
 10359  001D3E  0E7F               	movlw	high STR_7
 10360  001D40  6E1F               	movwf	(LCD_ButtonCreate@textOrBmp+1)^0,c
 10361  001D42  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 10362  001D44  6E20               	movwf	LCD_ButtonCreate@font^0,c
 10363  001D46  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 10364  001D48  6E21               	movwf	(LCD_ButtonCreate@font+1)^0,c
 10365  001D4A  0E00               	movlw	0
 10366  001D4C  6E22               	movwf	LCD_ButtonCreate@fpPress^0,c
 10367  001D4E  0E00               	movlw	0
 10368  001D50  6E23               	movwf	(LCD_ButtonCreate@fpPress+1)^0,c
 10369  001D52  0E00               	movlw	0
 10370  001D54  6E24               	movwf	LCD_ButtonCreate@fpReleased^0,c
 10371  001D56  0E00               	movlw	0
 10372  001D58  6E25               	movwf	(LCD_ButtonCreate@fpReleased+1)^0,c
 10373  001D5A  0E00               	movlw	0
 10374  001D5C  6E26               	movwf	LCD_ButtonCreate@fpOut^0,c
 10375  001D5E  0E00               	movlw	0
 10376  001D60  6E27               	movwf	(LCD_ButtonCreate@fpOut+1)^0,c
 10377  001D62  0E80               	movlw	128
 10378  001D64  242B               	addwf	GameParameters_init@s^0,w,c
 10379  001D66  6E28               	movwf	LCD_ButtonCreate@button^0,c
 10380  001D68  0E00               	movlw	0
 10381  001D6A  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10382  001D6C  6E29               	movwf	(LCD_ButtonCreate@button+1)^0,c
 10383  001D6E  0E04               	movlw	4
 10384  001D70  6E2A               	movwf	LCD_ButtonCreate@index^0,c
 10385  001D72  ECAE  F01F         	call	_LCD_ButtonCreate	;wreg free
 10386                           
 10387                           ;class/gameParameters.c: 27:     LCD_ButtonCreate(220,0,20,20,0b0000000000000000,0b11111
      +                          00000000000,"X",&arialNarrow_12ptFontInfo,((void*)0),((void*)0),((void*)0),&(s->btnLeave
      +                          ),5);
 10388  001D76  0E00               	movlw	0
 10389  001D78  6E13               	movwf	(LCD_ButtonCreate@posX+1)^0,c
 10390  001D7A  0EDC               	movlw	220
 10391  001D7C  6E12               	movwf	LCD_ButtonCreate@posX^0,c
 10392  001D7E  0E00               	movlw	0
 10393  001D80  6E15               	movwf	(LCD_ButtonCreate@posY+1)^0,c
 10394  001D82  0E00               	movlw	0
 10395  001D84  6E14               	movwf	LCD_ButtonCreate@posY^0,c
 10396  001D86  0E00               	movlw	0
 10397  001D88  6E17               	movwf	(LCD_ButtonCreate@width+1)^0,c
 10398  001D8A  0E14               	movlw	20
 10399  001D8C  6E16               	movwf	LCD_ButtonCreate@width^0,c
 10400  001D8E  0E00               	movlw	0
 10401  001D90  6E19               	movwf	(LCD_ButtonCreate@height+1)^0,c
 10402  001D92  0E14               	movlw	20
 10403  001D94  6E18               	movwf	LCD_ButtonCreate@height^0,c
 10404  001D96  0E00               	movlw	0
 10405  001D98  6E1B               	movwf	(LCD_ButtonCreate@txtColor+1)^0,c
 10406  001D9A  0E00               	movlw	0
 10407  001D9C  6E1A               	movwf	LCD_ButtonCreate@txtColor^0,c
 10408  001D9E  0EF8               	movlw	248
 10409  001DA0  6E1D               	movwf	(LCD_ButtonCreate@bgColor+1)^0,c
 10410  001DA2  0E00               	movlw	0
 10411  001DA4  6E1C               	movwf	LCD_ButtonCreate@bgColor^0,c
 10412  001DA6  0EFC               	movlw	low STR_8
 10413  001DA8  6E1E               	movwf	LCD_ButtonCreate@textOrBmp^0,c
 10414  001DAA  0E7F               	movlw	high STR_8
 10415  001DAC  6E1F               	movwf	(LCD_ButtonCreate@textOrBmp+1)^0,c
 10416  001DAE  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 10417  001DB0  6E20               	movwf	LCD_ButtonCreate@font^0,c
 10418  001DB2  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 10419  001DB4  6E21               	movwf	(LCD_ButtonCreate@font+1)^0,c
 10420  001DB6  0E00               	movlw	0
 10421  001DB8  6E22               	movwf	LCD_ButtonCreate@fpPress^0,c
 10422  001DBA  0E00               	movlw	0
 10423  001DBC  6E23               	movwf	(LCD_ButtonCreate@fpPress+1)^0,c
 10424  001DBE  0E00               	movlw	0
 10425  001DC0  6E24               	movwf	LCD_ButtonCreate@fpReleased^0,c
 10426  001DC2  0E00               	movlw	0
 10427  001DC4  6E25               	movwf	(LCD_ButtonCreate@fpReleased+1)^0,c
 10428  001DC6  0E00               	movlw	0
 10429  001DC8  6E26               	movwf	LCD_ButtonCreate@fpOut^0,c
 10430  001DCA  0E00               	movlw	0
 10431  001DCC  6E27               	movwf	(LCD_ButtonCreate@fpOut+1)^0,c
 10432  001DCE  0E50               	movlw	80
 10433  001DD0  242B               	addwf	GameParameters_init@s^0,w,c
 10434  001DD2  6E28               	movwf	LCD_ButtonCreate@button^0,c
 10435  001DD4  0E00               	movlw	0
 10436  001DD6  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10437  001DD8  6E29               	movwf	(LCD_ButtonCreate@button+1)^0,c
 10438  001DDA  0E05               	movlw	5
 10439  001DDC  6E2A               	movwf	LCD_ButtonCreate@index^0,c
 10440  001DDE  ECAE  F01F         	call	_LCD_ButtonCreate	;wreg free
 10441                           
 10442                           ;class/gameParameters.c: 28:     LCD_ButtonCreate(10,250,90,30,0b0000000000000000,0b1111
      +                          111111111111,"New Game",&arialNarrow_12ptFontInfo,((void*)0),((void*)0),((void*)0),&(s->
      +                          btnNewGame),6);
 10443  001DE2  0E00               	movlw	0
 10444  001DE4  6E13               	movwf	(LCD_ButtonCreate@posX+1)^0,c
 10445  001DE6  0E0A               	movlw	10
 10446  001DE8  6E12               	movwf	LCD_ButtonCreate@posX^0,c
 10447  001DEA  0E00               	movlw	0
 10448  001DEC  6E15               	movwf	(LCD_ButtonCreate@posY+1)^0,c
 10449  001DEE  0EFA               	movlw	250
 10450  001DF0  6E14               	movwf	LCD_ButtonCreate@posY^0,c
 10451  001DF2  0E00               	movlw	0
 10452  001DF4  6E17               	movwf	(LCD_ButtonCreate@width+1)^0,c
 10453  001DF6  0E5A               	movlw	90
 10454  001DF8  6E16               	movwf	LCD_ButtonCreate@width^0,c
 10455  001DFA  0E00               	movlw	0
 10456  001DFC  6E19               	movwf	(LCD_ButtonCreate@height+1)^0,c
 10457  001DFE  0E1E               	movlw	30
 10458  001E00  6E18               	movwf	LCD_ButtonCreate@height^0,c
 10459  001E02  0E00               	movlw	0
 10460  001E04  6E1B               	movwf	(LCD_ButtonCreate@txtColor+1)^0,c
 10461  001E06  0E00               	movlw	0
 10462  001E08  6E1A               	movwf	LCD_ButtonCreate@txtColor^0,c
 10463  001E0A  0EFF               	movlw	255
 10464  001E0C  6E1D               	movwf	(LCD_ButtonCreate@bgColor+1)^0,c
 10465  001E0E  681C               	setf	LCD_ButtonCreate@bgColor^0,c
 10466  001E10  0EC7               	movlw	low STR_9
 10467  001E12  6E1E               	movwf	LCD_ButtonCreate@textOrBmp^0,c
 10468  001E14  0E7F               	movlw	high STR_9
 10469  001E16  6E1F               	movwf	(LCD_ButtonCreate@textOrBmp+1)^0,c
 10470  001E18  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 10471  001E1A  6E20               	movwf	LCD_ButtonCreate@font^0,c
 10472  001E1C  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 10473  001E1E  6E21               	movwf	(LCD_ButtonCreate@font+1)^0,c
 10474  001E20  0E00               	movlw	0
 10475  001E22  6E22               	movwf	LCD_ButtonCreate@fpPress^0,c
 10476  001E24  0E00               	movlw	0
 10477  001E26  6E23               	movwf	(LCD_ButtonCreate@fpPress+1)^0,c
 10478  001E28  0E00               	movlw	0
 10479  001E2A  6E24               	movwf	LCD_ButtonCreate@fpReleased^0,c
 10480  001E2C  0E00               	movlw	0
 10481  001E2E  6E25               	movwf	(LCD_ButtonCreate@fpReleased+1)^0,c
 10482  001E30  0E00               	movlw	0
 10483  001E32  6E26               	movwf	LCD_ButtonCreate@fpOut^0,c
 10484  001E34  0E00               	movlw	0
 10485  001E36  6E27               	movwf	(LCD_ButtonCreate@fpOut+1)^0,c
 10486  001E38  0E68               	movlw	104
 10487  001E3A  242B               	addwf	GameParameters_init@s^0,w,c
 10488  001E3C  6E28               	movwf	LCD_ButtonCreate@button^0,c
 10489  001E3E  0E00               	movlw	0
 10490  001E40  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10491  001E42  6E29               	movwf	(LCD_ButtonCreate@button+1)^0,c
 10492  001E44  0E06               	movlw	6
 10493  001E46  6E2A               	movwf	LCD_ButtonCreate@index^0,c
 10494  001E48  ECAE  F01F         	call	_LCD_ButtonCreate	;wreg free
 10495                           
 10496                           ;class/gameParameters.c: 31:     LCD_SliderCreate(50,110,165,20,0b0000000000000000,0b111
      +                          1111111111111,0b1111100000000000,0,11,((void*)0),&(s->sldBackLight));
 10497  001E4C  0E00               	movlw	0
 10498  001E4E  6E13               	movwf	(LCD_SliderCreate@posX+1)^0,c
 10499  001E50  0E32               	movlw	50
 10500  001E52  6E12               	movwf	LCD_SliderCreate@posX^0,c
 10501  001E54  0E00               	movlw	0
 10502  001E56  6E15               	movwf	(LCD_SliderCreate@posY+1)^0,c
 10503  001E58  0E6E               	movlw	110
 10504  001E5A  6E14               	movwf	LCD_SliderCreate@posY^0,c
 10505  001E5C  0E00               	movlw	0
 10506  001E5E  6E17               	movwf	(LCD_SliderCreate@width+1)^0,c
 10507  001E60  0EA5               	movlw	165
 10508  001E62  6E16               	movwf	LCD_SliderCreate@width^0,c
 10509  001E64  0E00               	movlw	0
 10510  001E66  6E19               	movwf	(LCD_SliderCreate@height+1)^0,c
 10511  001E68  0E14               	movlw	20
 10512  001E6A  6E18               	movwf	LCD_SliderCreate@height^0,c
 10513  001E6C  0E00               	movlw	0
 10514  001E6E  6E1B               	movwf	(LCD_SliderCreate@sldColor+1)^0,c
 10515  001E70  0E00               	movlw	0
 10516  001E72  6E1A               	movwf	LCD_SliderCreate@sldColor^0,c
 10517  001E74  0EFF               	movlw	255
 10518  001E76  6E1D               	movwf	(LCD_SliderCreate@bgColor+1)^0,c
 10519  001E78  681C               	setf	LCD_SliderCreate@bgColor^0,c
 10520  001E7A  0EF8               	movlw	248
 10521  001E7C  6E1F               	movwf	(LCD_SliderCreate@borderColor+1)^0,c
 10522  001E7E  0E00               	movlw	0
 10523  001E80  6E1E               	movwf	LCD_SliderCreate@borderColor^0,c
 10524  001E82  0E00               	movlw	0
 10525  001E84  6E21               	movwf	(LCD_SliderCreate@cursorWidth+1)^0,c
 10526  001E86  0E00               	movlw	0
 10527  001E88  6E20               	movwf	LCD_SliderCreate@cursorWidth^0,c
 10528  001E8A  0E00               	movlw	0
 10529  001E8C  6E23               	movwf	(LCD_SliderCreate@steps+1)^0,c
 10530  001E8E  0E0B               	movlw	11
 10531  001E90  6E22               	movwf	LCD_SliderCreate@steps^0,c
 10532  001E92  0E00               	movlw	0
 10533  001E94  6E24               	movwf	LCD_SliderCreate@fpPress^0,c
 10534  001E96  0E00               	movlw	0
 10535  001E98  6E25               	movwf	(LCD_SliderCreate@fpPress+1)^0,c
 10536  001E9A  0E98               	movlw	152
 10537  001E9C  242B               	addwf	GameParameters_init@s^0,w,c
 10538  001E9E  6E26               	movwf	LCD_SliderCreate@slider^0,c
 10539  001EA0  0E00               	movlw	0
 10540  001EA2  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10541  001EA4  6E27               	movwf	(LCD_SliderCreate@slider+1)^0,c
 10542  001EA6  EC2B  F020         	call	_LCD_SliderCreate	;wreg free
 10543                           
 10544                           ;class/gameParameters.c: 32:     LCD_SliderCreate(50,160,165,20,0b0000000000000000,0b111
      +                          1111111111111,0b1111100000000000,0,3,((void*)0),&(s->sldLevel));
 10545  001EAA  0E00               	movlw	0
 10546  001EAC  6E13               	movwf	(LCD_SliderCreate@posX+1)^0,c
 10547  001EAE  0E32               	movlw	50
 10548  001EB0  6E12               	movwf	LCD_SliderCreate@posX^0,c
 10549  001EB2  0E00               	movlw	0
 10550  001EB4  6E15               	movwf	(LCD_SliderCreate@posY+1)^0,c
 10551  001EB6  0EA0               	movlw	160
 10552  001EB8  6E14               	movwf	LCD_SliderCreate@posY^0,c
 10553  001EBA  0E00               	movlw	0
 10554  001EBC  6E17               	movwf	(LCD_SliderCreate@width+1)^0,c
 10555  001EBE  0EA5               	movlw	165
 10556  001EC0  6E16               	movwf	LCD_SliderCreate@width^0,c
 10557  001EC2  0E00               	movlw	0
 10558  001EC4  6E19               	movwf	(LCD_SliderCreate@height+1)^0,c
 10559  001EC6  0E14               	movlw	20
 10560  001EC8  6E18               	movwf	LCD_SliderCreate@height^0,c
 10561  001ECA  0E00               	movlw	0
 10562  001ECC  6E1B               	movwf	(LCD_SliderCreate@sldColor+1)^0,c
 10563  001ECE  0E00               	movlw	0
 10564  001ED0  6E1A               	movwf	LCD_SliderCreate@sldColor^0,c
 10565  001ED2  0EFF               	movlw	255
 10566  001ED4  6E1D               	movwf	(LCD_SliderCreate@bgColor+1)^0,c
 10567  001ED6  681C               	setf	LCD_SliderCreate@bgColor^0,c
 10568  001ED8  0EF8               	movlw	248
 10569  001EDA  6E1F               	movwf	(LCD_SliderCreate@borderColor+1)^0,c
 10570  001EDC  0E00               	movlw	0
 10571  001EDE  6E1E               	movwf	LCD_SliderCreate@borderColor^0,c
 10572  001EE0  0E00               	movlw	0
 10573  001EE2  6E21               	movwf	(LCD_SliderCreate@cursorWidth+1)^0,c
 10574  001EE4  0E00               	movlw	0
 10575  001EE6  6E20               	movwf	LCD_SliderCreate@cursorWidth^0,c
 10576  001EE8  0E00               	movlw	0
 10577  001EEA  6E23               	movwf	(LCD_SliderCreate@steps+1)^0,c
 10578  001EEC  0E03               	movlw	3
 10579  001EEE  6E22               	movwf	LCD_SliderCreate@steps^0,c
 10580  001EF0  0E00               	movlw	0
 10581  001EF2  6E24               	movwf	LCD_SliderCreate@fpPress^0,c
 10582  001EF4  0E00               	movlw	0
 10583  001EF6  6E25               	movwf	(LCD_SliderCreate@fpPress+1)^0,c
 10584  001EF8  0EB1               	movlw	177
 10585  001EFA  242B               	addwf	GameParameters_init@s^0,w,c
 10586  001EFC  6E26               	movwf	LCD_SliderCreate@slider^0,c
 10587  001EFE  0E00               	movlw	0
 10588  001F00  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10589  001F02  6E27               	movwf	(LCD_SliderCreate@slider+1)^0,c
 10590  001F04  EC2B  F020         	call	_LCD_SliderCreate	;wreg free
 10591  001F08  0012               	return		;funcret
 10592  001F0A                     __end_of_GameParameters_init:
 10593                           	callstack 0
 10594                           
 10595 ;; *************** function _Score_init *****************
 10596 ;; Defined at:
 10597 ;;		line 7 in file "class/score.c"
 10598 ;; Parameters:    Size  Location     Type
 10599 ;;  s               2   17[COMRAM] PTR struct Score
 10600 ;;		 -> g1(240), 
 10601 ;; Auto vars:     Size  Location     Type
 10602 ;;		None
 10603 ;; Return value:  Size  Location     Type
 10604 ;;                  1    wreg      void 
 10605 ;; Registers used:
 10606 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10607 ;; Tracked objects:
 10608 ;;		On entry : 0/0
 10609 ;;		On exit  : 0/0
 10610 ;;		Unchanged: 0/0
 10611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10612 ;;      Params:         2       0       0       0       0       0       0
 10613 ;;      Locals:         0       0       0       0       0       0       0
 10614 ;;      Temps:          0       0       0       0       0       0       0
 10615 ;;      Totals:         2       0       0       0       0       0       0
 10616 ;;Total ram usage:        2 bytes
 10617 ;; Hardware stack levels used: 1
 10618 ;; Hardware stack levels required when called: 4
 10619 ;; This function calls:
 10620 ;;		Nothing
 10621 ;; This function is called by:
 10622 ;;		_GameParameters_init
 10623 ;; This function uses a non-reentrant model
 10624 ;;
 10625                           
 10626                           	psect	text41
 10627  0058D0                     __ptext41:
 10628                           	callstack 0
 10629  0058D0                     _Score_init:
 10630                           	callstack 21
 10631                           
 10632                           ;class/score.c: 7: void Score_init(struct Score* s);class/score.c: 8: {;class/score.c: 9
      +                          :     s->homeScore = 0;
 10633                           
 10634                           ;incstack = 0
 10635  0058D0  C012  FFD9         	movff	Score_init@s,fsr2l
 10636  0058D4  C013  FFDA         	movff	Score_init@s+1,fsr2h
 10637  0058D8  0E00               	movlw	0
 10638  0058DA  6EDE               	movwf	postinc2,c
 10639  0058DC  0E00               	movlw	0
 10640  0058DE  6EDD               	movwf	postdec2,c
 10641                           
 10642                           ;class/score.c: 10:     s->awayScore = 0;
 10643  0058E0  EE20 F002          	lfsr	2,2
 10644  0058E4  5012               	movf	Score_init@s^0,w,c
 10645  0058E6  26D9               	addwf	fsr2l,f,c
 10646  0058E8  5013               	movf	(Score_init@s+1)^0,w,c
 10647  0058EA  22DA               	addwfc	fsr2h,f,c
 10648  0058EC  0E00               	movlw	0
 10649  0058EE  6EDE               	movwf	postinc2,c
 10650  0058F0  0E00               	movlw	0
 10651  0058F2  6EDD               	movwf	postdec2,c
 10652  0058F4  0012               	return		;funcret
 10653  0058F6                     __end_of_Score_init:
 10654                           	callstack 0
 10655                           
 10656 ;; *************** function _Paddle_init *****************
 10657 ;; Defined at:
 10658 ;;		line 6 in file "class/paddle.c"
 10659 ;; Parameters:    Size  Location     Type
 10660 ;;  p               2   17[COMRAM] PTR struct Paddle
 10661 ;;		 -> g1(240), 
 10662 ;;  team            2   19[COMRAM] unsigned short 
 10663 ;; Auto vars:     Size  Location     Type
 10664 ;;		None
 10665 ;; Return value:  Size  Location     Type
 10666 ;;                  1    wreg      void 
 10667 ;; Registers used:
 10668 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10669 ;; Tracked objects:
 10670 ;;		On entry : 0/0
 10671 ;;		On exit  : 0/0
 10672 ;;		Unchanged: 0/0
 10673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10674 ;;      Params:         4       0       0       0       0       0       0
 10675 ;;      Locals:         0       0       0       0       0       0       0
 10676 ;;      Temps:          0       0       0       0       0       0       0
 10677 ;;      Totals:         4       0       0       0       0       0       0
 10678 ;;Total ram usage:        4 bytes
 10679 ;; Hardware stack levels used: 1
 10680 ;; Hardware stack levels required when called: 4
 10681 ;; This function calls:
 10682 ;;		Nothing
 10683 ;; This function is called by:
 10684 ;;		_GameParameters_init
 10685 ;; This function uses a non-reentrant model
 10686 ;;
 10687                           
 10688                           	psect	text42
 10689  004C8C                     __ptext42:
 10690                           	callstack 0
 10691  004C8C                     _Paddle_init:
 10692                           	callstack 21
 10693                           
 10694                           ;class/paddle.c: 6: void Paddle_init(struct Paddle* p,uint16_t team);class/paddle.c: 7: 
      +                          {;class/paddle.c: 8:     p->oldx=0;
 10695                           
 10696                           ;incstack = 0
 10697  004C8C  EE20 F004          	lfsr	2,4
 10698  004C90  5012               	movf	Paddle_init@p^0,w,c
 10699  004C92  26D9               	addwf	fsr2l,f,c
 10700  004C94  5013               	movf	(Paddle_init@p+1)^0,w,c
 10701  004C96  22DA               	addwfc	fsr2h,f,c
 10702  004C98  0E00               	movlw	0
 10703  004C9A  6EDE               	movwf	postinc2,c
 10704  004C9C  0E00               	movlw	0
 10705  004C9E  6EDD               	movwf	postdec2,c
 10706                           
 10707                           ;class/paddle.c: 9:     p->oldy=0;
 10708  004CA0  EE20 F006          	lfsr	2,6
 10709  004CA4  5012               	movf	Paddle_init@p^0,w,c
 10710  004CA6  26D9               	addwf	fsr2l,f,c
 10711  004CA8  5013               	movf	(Paddle_init@p+1)^0,w,c
 10712  004CAA  22DA               	addwfc	fsr2h,f,c
 10713  004CAC  0E00               	movlw	0
 10714  004CAE  6EDE               	movwf	postinc2,c
 10715  004CB0  0E00               	movlw	0
 10716  004CB2  6EDD               	movwf	postdec2,c
 10717                           
 10718                           ;class/paddle.c: 10:     if(team)
 10719  004CB4  5014               	movf	Paddle_init@team^0,w,c
 10720  004CB6  1015               	iorwf	(Paddle_init@team+1)^0,w,c
 10721  004CB8  B4D8               	btfsc	status,2,c
 10722  004CBA  D01D               	goto	l6470
 10723                           
 10724                           ;class/paddle.c: 11:     {;class/paddle.c: 12:         p->x = 90;
 10725  004CBC  C012  FFD9         	movff	Paddle_init@p,fsr2l
 10726  004CC0  C013  FFDA         	movff	Paddle_init@p+1,fsr2h
 10727  004CC4  0E5A               	movlw	90
 10728  004CC6  6EDE               	movwf	postinc2,c
 10729  004CC8  0E00               	movlw	0
 10730  004CCA  6EDD               	movwf	postdec2,c
 10731                           
 10732                           ;class/paddle.c: 13:         p->y = 20;
 10733  004CCC  EE20 F002          	lfsr	2,2
 10734  004CD0  5012               	movf	Paddle_init@p^0,w,c
 10735  004CD2  26D9               	addwf	fsr2l,f,c
 10736  004CD4  5013               	movf	(Paddle_init@p+1)^0,w,c
 10737  004CD6  22DA               	addwfc	fsr2h,f,c
 10738  004CD8  0E14               	movlw	20
 10739  004CDA  6EDE               	movwf	postinc2,c
 10740  004CDC  0E00               	movlw	0
 10741  004CDE  6EDD               	movwf	postdec2,c
 10742                           
 10743                           ;class/paddle.c: 14:         p->color = 0b1111111111111111;
 10744  004CE0  EE20 F008          	lfsr	2,8
 10745  004CE4  5012               	movf	Paddle_init@p^0,w,c
 10746  004CE6  26D9               	addwf	fsr2l,f,c
 10747  004CE8  5013               	movf	(Paddle_init@p+1)^0,w,c
 10748  004CEA  22DA               	addwfc	fsr2h,f,c
 10749  004CEC  0EFF               	movlw	255
 10750  004CEE  6EDE               	movwf	postinc2,c
 10751  004CF0  0EFF               	movlw	255
 10752  004CF2  6EDD               	movwf	postdec2,c
 10753                           
 10754                           ;class/paddle.c: 15:     }
 10755  004CF4  0012               	return	
 10756  004CF6                     l6470:
 10757                           
 10758                           ;class/paddle.c: 17:     {;class/paddle.c: 18:         p->x = 90;
 10759  004CF6  C012  FFD9         	movff	Paddle_init@p,fsr2l
 10760  004CFA  C013  FFDA         	movff	Paddle_init@p+1,fsr2h
 10761  004CFE  0E5A               	movlw	90
 10762  004D00  6EDE               	movwf	postinc2,c
 10763  004D02  0E00               	movlw	0
 10764  004D04  6EDD               	movwf	postdec2,c
 10765                           
 10766                           ;class/paddle.c: 19:         p->y = 280;
 10767  004D06  EE20 F002          	lfsr	2,2
 10768  004D0A  5012               	movf	Paddle_init@p^0,w,c
 10769  004D0C  26D9               	addwf	fsr2l,f,c
 10770  004D0E  5013               	movf	(Paddle_init@p+1)^0,w,c
 10771  004D10  22DA               	addwfc	fsr2h,f,c
 10772  004D12  0E18               	movlw	24
 10773  004D14  6EDE               	movwf	postinc2,c
 10774  004D16  0E01               	movlw	1
 10775  004D18  6EDD               	movwf	postdec2,c
 10776                           
 10777                           ;class/paddle.c: 20:         p->color = 0b1111111111111111;
 10778  004D1A  EE20 F008          	lfsr	2,8
 10779  004D1E  5012               	movf	Paddle_init@p^0,w,c
 10780  004D20  26D9               	addwf	fsr2l,f,c
 10781  004D22  5013               	movf	(Paddle_init@p+1)^0,w,c
 10782  004D24  22DA               	addwfc	fsr2h,f,c
 10783  004D26  0EFF               	movlw	255
 10784  004D28  6EDE               	movwf	postinc2,c
 10785  004D2A  0EFF               	movlw	255
 10786  004D2C  6EDD               	movwf	postdec2,c
 10787  004D2E  0012               	return		;funcret
 10788  004D30                     __end_of_Paddle_init:
 10789                           	callstack 0
 10790                           
 10791 ;; *************** function _LCD_SliderCreate *****************
 10792 ;; Defined at:
 10793 ;;		line 291 in file "libraries/lcd_highlevel.c"
 10794 ;; Parameters:    Size  Location     Type
 10795 ;;  posX            2   17[COMRAM] unsigned short 
 10796 ;;  posY            2   19[COMRAM] unsigned short 
 10797 ;;  width           2   21[COMRAM] unsigned short 
 10798 ;;  height          2   23[COMRAM] unsigned short 
 10799 ;;  sldColor        2   25[COMRAM] unsigned short 
 10800 ;;  bgColor         2   27[COMRAM] unsigned short 
 10801 ;;  borderColor     2   29[COMRAM] unsigned short 
 10802 ;;  cursorWidth     2   31[COMRAM] unsigned short 
 10803 ;;  steps           2   33[COMRAM] unsigned short 
 10804 ;;  fpPress         2   35[COMRAM] PTR FTN()void 
 10805 ;;		 -> Absolute function(1), 
 10806 ;;  slider          2   37[COMRAM] PTR struct .
 10807 ;;		 -> g1(240), 
 10808 ;; Auto vars:     Size  Location     Type
 10809 ;;		None
 10810 ;; Return value:  Size  Location     Type
 10811 ;;                  1    wreg      void 
 10812 ;; Registers used:
 10813 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10814 ;; Tracked objects:
 10815 ;;		On entry : 0/0
 10816 ;;		On exit  : 0/0
 10817 ;;		Unchanged: 0/0
 10818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10819 ;;      Params:        22       0       0       0       0       0       0
 10820 ;;      Locals:         0       0       0       0       0       0       0
 10821 ;;      Temps:          0       0       0       0       0       0       0
 10822 ;;      Totals:        22       0       0       0       0       0       0
 10823 ;;Total ram usage:       22 bytes
 10824 ;; Hardware stack levels used: 1
 10825 ;; Hardware stack levels required when called: 4
 10826 ;; This function calls:
 10827 ;;		Nothing
 10828 ;; This function is called by:
 10829 ;;		_GameParameters_init
 10830 ;; This function uses a non-reentrant model
 10831 ;;
 10832                           
 10833                           	psect	text43
 10834  004056                     __ptext43:
 10835                           	callstack 0
 10836  004056                     _LCD_SliderCreate:
 10837                           	callstack 21
 10838                           
 10839                           ;libraries/lcd_highlevel.c: 291: void LCD_SliderCreate(uint16_t posX, uint16_t posY,;lib
      +                          raries/lcd_highlevel.c: 292:                       uint16_t width, uint16_t height,;libr
      +                          aries/lcd_highlevel.c: 293:                       uint16_t sldColor, uint16_t bgColor, u
      +                          int16_t borderColor,;libraries/lcd_highlevel.c: 294:                       uint16_t curs
      +                          orWidth,;libraries/lcd_highlevel.c: 295:                       uint16_t steps,;libraries
      +                          /lcd_highlevel.c: 296:                       void (* fpPress)(),;libraries/lcd_highlevel
      +                          .c: 297:                       sld_t * slider)
 10840                           
 10841                           ;incstack = 0
 10842  004056  C026  FFD9         	movff	LCD_SliderCreate@slider,fsr2l
 10843  00405A  C027  FFDA         	movff	LCD_SliderCreate@slider+1,fsr2h
 10844  00405E  C012  FFDE         	movff	LCD_SliderCreate@posX,postinc2
 10845  004062  C013  FFDD         	movff	LCD_SliderCreate@posX+1,postdec2
 10846                           
 10847                           ;libraries/lcd_highlevel.c: 300:   slider->posY = posY;
 10848  004066  EE20 F002          	lfsr	2,2
 10849  00406A  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10850  00406C  26D9               	addwf	fsr2l,f,c
 10851  00406E  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10852  004070  22DA               	addwfc	fsr2h,f,c
 10853  004072  C014  FFDE         	movff	LCD_SliderCreate@posY,postinc2
 10854  004076  C015  FFDD         	movff	LCD_SliderCreate@posY+1,postdec2
 10855                           
 10856                           ;libraries/lcd_highlevel.c: 301:   slider->height = height;
 10857  00407A  EE20 F006          	lfsr	2,6
 10858  00407E  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10859  004080  26D9               	addwf	fsr2l,f,c
 10860  004082  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10861  004084  22DA               	addwfc	fsr2h,f,c
 10862  004086  C018  FFDE         	movff	LCD_SliderCreate@height,postinc2
 10863  00408A  C019  FFDD         	movff	LCD_SliderCreate@height+1,postdec2
 10864                           
 10865                           ;libraries/lcd_highlevel.c: 302:   slider->width = width;
 10866  00408E  EE20 F004          	lfsr	2,4
 10867  004092  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10868  004094  26D9               	addwf	fsr2l,f,c
 10869  004096  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10870  004098  22DA               	addwfc	fsr2h,f,c
 10871  00409A  C016  FFDE         	movff	LCD_SliderCreate@width,postinc2
 10872  00409E  C017  FFDD         	movff	LCD_SliderCreate@width+1,postdec2
 10873                           
 10874                           ;libraries/lcd_highlevel.c: 303:   slider->sldColor = sldColor;
 10875  0040A2  EE20 F008          	lfsr	2,8
 10876  0040A6  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10877  0040A8  26D9               	addwf	fsr2l,f,c
 10878  0040AA  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10879  0040AC  22DA               	addwfc	fsr2h,f,c
 10880  0040AE  C01A  FFDE         	movff	LCD_SliderCreate@sldColor,postinc2
 10881  0040B2  C01B  FFDD         	movff	LCD_SliderCreate@sldColor+1,postdec2
 10882                           
 10883                           ;libraries/lcd_highlevel.c: 304:   slider->bgColor = bgColor;
 10884  0040B6  EE20 F00A          	lfsr	2,10
 10885  0040BA  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10886  0040BC  26D9               	addwf	fsr2l,f,c
 10887  0040BE  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10888  0040C0  22DA               	addwfc	fsr2h,f,c
 10889  0040C2  C01C  FFDE         	movff	LCD_SliderCreate@bgColor,postinc2
 10890  0040C6  C01D  FFDD         	movff	LCD_SliderCreate@bgColor+1,postdec2
 10891                           
 10892                           ;libraries/lcd_highlevel.c: 305:   slider->borderColor = borderColor;
 10893  0040CA  EE20 F00C          	lfsr	2,12
 10894  0040CE  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10895  0040D0  26D9               	addwf	fsr2l,f,c
 10896  0040D2  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10897  0040D4  22DA               	addwfc	fsr2h,f,c
 10898  0040D6  C01E  FFDE         	movff	LCD_SliderCreate@borderColor,postinc2
 10899  0040DA  C01F  FFDD         	movff	LCD_SliderCreate@borderColor+1,postdec2
 10900                           
 10901                           ;libraries/lcd_highlevel.c: 306:   slider->cursorWidth = cursorWidth;
 10902  0040DE  EE20 F00E          	lfsr	2,14
 10903  0040E2  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10904  0040E4  26D9               	addwf	fsr2l,f,c
 10905  0040E6  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10906  0040E8  22DA               	addwfc	fsr2h,f,c
 10907  0040EA  C020  FFDE         	movff	LCD_SliderCreate@cursorWidth,postinc2
 10908  0040EE  C021  FFDD         	movff	LCD_SliderCreate@cursorWidth+1,postdec2
 10909                           
 10910                           ;libraries/lcd_highlevel.c: 307:   slider->fpPress = fpPress;
 10911  0040F2  EE20 F017          	lfsr	2,23
 10912  0040F6  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10913  0040F8  26D9               	addwf	fsr2l,f,c
 10914  0040FA  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10915  0040FC  22DA               	addwfc	fsr2h,f,c
 10916  0040FE  C024  FFDE         	movff	LCD_SliderCreate@fpPress,postinc2
 10917  004102  C025  FFDD         	movff	LCD_SliderCreate@fpPress+1,postdec2
 10918                           
 10919                           ;libraries/lcd_highlevel.c: 308:   slider->steps = steps;
 10920  004106  EE20 F015          	lfsr	2,21
 10921  00410A  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10922  00410C  26D9               	addwf	fsr2l,f,c
 10923  00410E  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10924  004110  22DA               	addwfc	fsr2h,f,c
 10925  004112  C022  FFDE         	movff	LCD_SliderCreate@steps,postinc2
 10926  004116  C023  FFDD         	movff	LCD_SliderCreate@steps+1,postdec2
 10927                           
 10928                           ;libraries/lcd_highlevel.c: 309:   slider->value = 0;
 10929  00411A  EE20 F011          	lfsr	2,17
 10930  00411E  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10931  004120  26D9               	addwf	fsr2l,f,c
 10932  004122  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10933  004124  22DA               	addwfc	fsr2h,f,c
 10934  004126  0E00               	movlw	0
 10935  004128  6EDE               	movwf	postinc2,c
 10936  00412A  0E00               	movlw	0
 10937  00412C  6EDD               	movwf	postdec2,c
 10938                           
 10939                           ;libraries/lcd_highlevel.c: 310:   slider->oldValue = 0;
 10940  00412E  EE20 F013          	lfsr	2,19
 10941  004132  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10942  004134  26D9               	addwf	fsr2l,f,c
 10943  004136  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10944  004138  22DA               	addwfc	fsr2h,f,c
 10945  00413A  0E00               	movlw	0
 10946  00413C  6EDE               	movwf	postinc2,c
 10947  00413E  0E00               	movlw	0
 10948  004140  6EDD               	movwf	postdec2,c
 10949  004142  0012               	return		;funcret
 10950  004144                     __end_of_LCD_SliderCreate:
 10951                           	callstack 0
 10952                           
 10953 ;; *************** function _LCD_ButtonCreate *****************
 10954 ;; Defined at:
 10955 ;;		line 396 in file "libraries/lcd_highlevel.c"
 10956 ;; Parameters:    Size  Location     Type
 10957 ;;  posX            2   17[COMRAM] unsigned short 
 10958 ;;  posY            2   19[COMRAM] unsigned short 
 10959 ;;  width           2   21[COMRAM] unsigned short 
 10960 ;;  height          2   23[COMRAM] unsigned short 
 10961 ;;  txtColor        2   25[COMRAM] unsigned short 
 10962 ;;  bgColor         2   27[COMRAM] unsigned short 
 10963 ;;  textOrBmp       2   29[COMRAM] PTR const unsigned char 
 10964 ;;		 -> STR_9(9), STR_8(2), STR_7(9), STR_6(11), 
 10965 ;;		 -> STR_5(9), STR_4(9), 
 10966 ;;  font            2   31[COMRAM] PTR struct .
 10967 ;;		 -> arialNarrow_12ptFontInfo(7), 
 10968 ;;  fpPress         2   33[COMRAM] PTR FTN(unsigned char ,)
 10969 ;;		 -> Absolute function(1), 
 10970 ;;  fpReleased      2   35[COMRAM] PTR FTN(unsigned char ,)
 10971 ;;		 -> Absolute function(1), 
 10972 ;;  fpOut           2   37[COMRAM] PTR FTN(unsigned char ,)
 10973 ;;		 -> Absolute function(1), 
 10974 ;;  button          2   39[COMRAM] PTR struct .
 10975 ;;		 -> g1(240), 
 10976 ;;  index           1   41[COMRAM] unsigned char 
 10977 ;; Auto vars:     Size  Location     Type
 10978 ;;		None
 10979 ;; Return value:  Size  Location     Type
 10980 ;;                  1    wreg      void 
 10981 ;; Registers used:
 10982 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10983 ;; Tracked objects:
 10984 ;;		On entry : 0/0
 10985 ;;		On exit  : 0/0
 10986 ;;		Unchanged: 0/0
 10987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10988 ;;      Params:        25       0       0       0       0       0       0
 10989 ;;      Locals:         0       0       0       0       0       0       0
 10990 ;;      Temps:          0       0       0       0       0       0       0
 10991 ;;      Totals:        25       0       0       0       0       0       0
 10992 ;;Total ram usage:       25 bytes
 10993 ;; Hardware stack levels used: 1
 10994 ;; Hardware stack levels required when called: 4
 10995 ;; This function calls:
 10996 ;;		Nothing
 10997 ;; This function is called by:
 10998 ;;		_GameParameters_init
 10999 ;; This function uses a non-reentrant model
 11000 ;;
 11001                           
 11002                           	psect	text44
 11003  003F5C                     __ptext44:
 11004                           	callstack 0
 11005  003F5C                     _LCD_ButtonCreate:
 11006                           	callstack 21
 11007                           
 11008                           ;libraries/lcd_highlevel.c: 396: void LCD_ButtonCreate(uint16_t posX, uint16_t posY,;lib
      +                          raries/lcd_highlevel.c: 397:                       uint16_t width, uint16_t height,;libr
      +                          aries/lcd_highlevel.c: 398:                       uint16_t txtColor, uint16_t bgColor,;l
      +                          ibraries/lcd_highlevel.c: 399:                       const uint8_t * textOrBmp, FONT_INF
      +                          O * font,;libraries/lcd_highlevel.c: 400:                       void (*fpPress)(uint8_t)
      +                          , void (* fpReleased)(uint8_t), void (* fpOut)(uint8_t),;libraries/lcd_highlevel.c: 401:
      +                                                 btn_t * button,
 11009                           
 11010                           ;incstack = 0
 11011  003F5C  C028  FFD9         	movff	LCD_ButtonCreate@button,fsr2l
 11012  003F60  C029  FFDA         	movff	LCD_ButtonCreate@button+1,fsr2h
 11013  003F64  C012  FFDE         	movff	LCD_ButtonCreate@posX,postinc2
 11014  003F68  C013  FFDD         	movff	LCD_ButtonCreate@posX+1,postdec2
 11015                           
 11016                           ;libraries/lcd_highlevel.c: 405:   button->posY = posY;
 11017  003F6C  EE20 F002          	lfsr	2,2
 11018  003F70  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11019  003F72  26D9               	addwf	fsr2l,f,c
 11020  003F74  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11021  003F76  22DA               	addwfc	fsr2h,f,c
 11022  003F78  C014  FFDE         	movff	LCD_ButtonCreate@posY,postinc2
 11023  003F7C  C015  FFDD         	movff	LCD_ButtonCreate@posY+1,postdec2
 11024                           
 11025                           ;libraries/lcd_highlevel.c: 406:   button->height = height;
 11026  003F80  EE20 F006          	lfsr	2,6
 11027  003F84  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11028  003F86  26D9               	addwf	fsr2l,f,c
 11029  003F88  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11030  003F8A  22DA               	addwfc	fsr2h,f,c
 11031  003F8C  C018  FFDE         	movff	LCD_ButtonCreate@height,postinc2
 11032  003F90  C019  FFDD         	movff	LCD_ButtonCreate@height+1,postdec2
 11033                           
 11034                           ;libraries/lcd_highlevel.c: 407:   button->width = width;
 11035  003F94  EE20 F004          	lfsr	2,4
 11036  003F98  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11037  003F9A  26D9               	addwf	fsr2l,f,c
 11038  003F9C  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11039  003F9E  22DA               	addwfc	fsr2h,f,c
 11040  003FA0  C016  FFDE         	movff	LCD_ButtonCreate@width,postinc2
 11041  003FA4  C017  FFDD         	movff	LCD_ButtonCreate@width+1,postdec2
 11042                           
 11043                           ;libraries/lcd_highlevel.c: 408:   button->txtColor = txtColor;
 11044  003FA8  EE20 F008          	lfsr	2,8
 11045  003FAC  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11046  003FAE  26D9               	addwf	fsr2l,f,c
 11047  003FB0  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11048  003FB2  22DA               	addwfc	fsr2h,f,c
 11049  003FB4  C01A  FFDE         	movff	LCD_ButtonCreate@txtColor,postinc2
 11050  003FB8  C01B  FFDD         	movff	LCD_ButtonCreate@txtColor+1,postdec2
 11051                           
 11052                           ;libraries/lcd_highlevel.c: 409:   button->bgColor = bgColor;
 11053  003FBC  EE20 F00A          	lfsr	2,10
 11054  003FC0  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11055  003FC2  26D9               	addwf	fsr2l,f,c
 11056  003FC4  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11057  003FC6  22DA               	addwfc	fsr2h,f,c
 11058  003FC8  C01C  FFDE         	movff	LCD_ButtonCreate@bgColor,postinc2
 11059  003FCC  C01D  FFDD         	movff	LCD_ButtonCreate@bgColor+1,postdec2
 11060                           
 11061                           ;libraries/lcd_highlevel.c: 410:   button->text = textOrBmp;
 11062  003FD0  EE20 F00C          	lfsr	2,12
 11063  003FD4  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11064  003FD6  26D9               	addwf	fsr2l,f,c
 11065  003FD8  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11066  003FDA  22DA               	addwfc	fsr2h,f,c
 11067  003FDC  C01E  FFDE         	movff	LCD_ButtonCreate@textOrBmp,postinc2
 11068  003FE0  C01F  FFDD         	movff	LCD_ButtonCreate@textOrBmp+1,postdec2
 11069                           
 11070                           ;libraries/lcd_highlevel.c: 411:   button->font = font;
 11071  003FE4  EE20 F00E          	lfsr	2,14
 11072  003FE8  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11073  003FEA  26D9               	addwf	fsr2l,f,c
 11074  003FEC  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11075  003FEE  22DA               	addwfc	fsr2h,f,c
 11076  003FF0  C020  FFDE         	movff	LCD_ButtonCreate@font,postinc2
 11077  003FF4  C021  FFDD         	movff	LCD_ButtonCreate@font+1,postdec2
 11078                           
 11079                           ;libraries/lcd_highlevel.c: 412:   button->fpPress = fpPress;
 11080  003FF8  EE20 F011          	lfsr	2,17
 11081  003FFC  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11082  003FFE  26D9               	addwf	fsr2l,f,c
 11083  004000  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11084  004002  22DA               	addwfc	fsr2h,f,c
 11085  004004  C022  FFDE         	movff	LCD_ButtonCreate@fpPress,postinc2
 11086  004008  C023  FFDD         	movff	LCD_ButtonCreate@fpPress+1,postdec2
 11087                           
 11088                           ;libraries/lcd_highlevel.c: 413:   button->fpReleased = fpReleased;
 11089  00400C  EE20 F013          	lfsr	2,19
 11090  004010  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11091  004012  26D9               	addwf	fsr2l,f,c
 11092  004014  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11093  004016  22DA               	addwfc	fsr2h,f,c
 11094  004018  C024  FFDE         	movff	LCD_ButtonCreate@fpReleased,postinc2
 11095  00401C  C025  FFDD         	movff	LCD_ButtonCreate@fpReleased+1,postdec2
 11096                           
 11097                           ;libraries/lcd_highlevel.c: 414:   button->fpOut = fpOut;
 11098  004020  EE20 F015          	lfsr	2,21
 11099  004024  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11100  004026  26D9               	addwf	fsr2l,f,c
 11101  004028  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11102  00402A  22DA               	addwfc	fsr2h,f,c
 11103  00402C  C026  FFDE         	movff	LCD_ButtonCreate@fpOut,postinc2
 11104  004030  C027  FFDD         	movff	LCD_ButtonCreate@fpOut+1,postdec2
 11105                           
 11106                           ;libraries/lcd_highlevel.c: 415:   button->index = index;
 11107  004034  EE20 F017          	lfsr	2,23
 11108  004038  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11109  00403A  26D9               	addwf	fsr2l,f,c
 11110  00403C  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11111  00403E  22DA               	addwfc	fsr2h,f,c
 11112  004040  C02A  FFDF         	movff	LCD_ButtonCreate@index,indf2
 11113                           
 11114                           ;libraries/lcd_highlevel.c: 416:   button->pressed = 0;
 11115  004044  EE20 F010          	lfsr	2,16
 11116  004048  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11117  00404A  26D9               	addwf	fsr2l,f,c
 11118  00404C  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11119  00404E  22DA               	addwfc	fsr2h,f,c
 11120  004050  0E00               	movlw	0
 11121  004052  6EDF               	movwf	indf2,c
 11122  004054  0012               	return		;funcret
 11123  004056                     __end_of_LCD_ButtonCreate:
 11124                           	callstack 0
 11125                           
 11126 ;; *************** function _Ball_init *****************
 11127 ;; Defined at:
 11128 ;;		line 6 in file "class/ball.c"
 11129 ;; Parameters:    Size  Location     Type
 11130 ;;  b               2   17[COMRAM] PTR struct Ball
 11131 ;;		 -> g1(240), 
 11132 ;; Auto vars:     Size  Location     Type
 11133 ;;		None
 11134 ;; Return value:  Size  Location     Type
 11135 ;;                  1    wreg      void 
 11136 ;; Registers used:
 11137 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11138 ;; Tracked objects:
 11139 ;;		On entry : 0/0
 11140 ;;		On exit  : 0/0
 11141 ;;		Unchanged: 0/0
 11142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11143 ;;      Params:         2       0       0       0       0       0       0
 11144 ;;      Locals:         0       0       0       0       0       0       0
 11145 ;;      Temps:          0       0       0       0       0       0       0
 11146 ;;      Totals:         2       0       0       0       0       0       0
 11147 ;;Total ram usage:        2 bytes
 11148 ;; Hardware stack levels used: 1
 11149 ;; Hardware stack levels required when called: 4
 11150 ;; This function calls:
 11151 ;;		Nothing
 11152 ;; This function is called by:
 11153 ;;		_GameParameters_init
 11154 ;; This function uses a non-reentrant model
 11155 ;;
 11156                           
 11157                           	psect	text45
 11158  0052D4                     __ptext45:
 11159                           	callstack 0
 11160  0052D4                     _Ball_init:
 11161                           	callstack 21
 11162                           
 11163                           ;class/ball.c: 6: void Ball_init(struct Ball* b);class/ball.c: 7: {;class/ball.c: 8:    
      +                           b->x = 90;
 11164                           
 11165                           ;incstack = 0
 11166  0052D4  C012  FFD9         	movff	Ball_init@b,fsr2l
 11167  0052D8  C013  FFDA         	movff	Ball_init@b+1,fsr2h
 11168  0052DC  0E5A               	movlw	90
 11169  0052DE  6EDE               	movwf	postinc2,c
 11170  0052E0  0E00               	movlw	0
 11171  0052E2  6EDD               	movwf	postdec2,c
 11172                           
 11173                           ;class/ball.c: 9:     b->y = 150;
 11174  0052E4  EE20 F002          	lfsr	2,2
 11175  0052E8  5012               	movf	Ball_init@b^0,w,c
 11176  0052EA  26D9               	addwf	fsr2l,f,c
 11177  0052EC  5013               	movf	(Ball_init@b+1)^0,w,c
 11178  0052EE  22DA               	addwfc	fsr2h,f,c
 11179  0052F0  0E96               	movlw	150
 11180  0052F2  6EDE               	movwf	postinc2,c
 11181  0052F4  0E00               	movlw	0
 11182  0052F6  6EDD               	movwf	postdec2,c
 11183                           
 11184                           ;class/ball.c: 10:     b->oldx=20;
 11185  0052F8  EE20 F004          	lfsr	2,4
 11186  0052FC  5012               	movf	Ball_init@b^0,w,c
 11187  0052FE  26D9               	addwf	fsr2l,f,c
 11188  005300  5013               	movf	(Ball_init@b+1)^0,w,c
 11189  005302  22DA               	addwfc	fsr2h,f,c
 11190  005304  0E14               	movlw	20
 11191  005306  6EDE               	movwf	postinc2,c
 11192  005308  0E00               	movlw	0
 11193  00530A  6EDD               	movwf	postdec2,c
 11194                           
 11195                           ;class/ball.c: 11:     b->oldy=20;
 11196  00530C  EE20 F006          	lfsr	2,6
 11197  005310  5012               	movf	Ball_init@b^0,w,c
 11198  005312  26D9               	addwf	fsr2l,f,c
 11199  005314  5013               	movf	(Ball_init@b+1)^0,w,c
 11200  005316  22DA               	addwfc	fsr2h,f,c
 11201  005318  0E14               	movlw	20
 11202  00531A  6EDE               	movwf	postinc2,c
 11203  00531C  0E00               	movlw	0
 11204  00531E  6EDD               	movwf	postdec2,c
 11205                           
 11206                           ;class/ball.c: 12:     b->dx = 0;
 11207  005320  EE20 F008          	lfsr	2,8
 11208  005324  5012               	movf	Ball_init@b^0,w,c
 11209  005326  26D9               	addwf	fsr2l,f,c
 11210  005328  5013               	movf	(Ball_init@b+1)^0,w,c
 11211  00532A  22DA               	addwfc	fsr2h,f,c
 11212  00532C  0E00               	movlw	0
 11213  00532E  6EDE               	movwf	postinc2,c
 11214  005330  0E00               	movlw	0
 11215  005332  6EDD               	movwf	postdec2,c
 11216  005334  0012               	return		;funcret
 11217  005336                     __end_of_Ball_init:
 11218                           	callstack 0
 11219                           
 11220 ;; *************** function _displaySM *****************
 11221 ;; Defined at:
 11222 ;;		line 30 in file "stateMachine/display.c"
 11223 ;; Parameters:    Size  Location     Type
 11224 ;;  ev              1    wreg     unsigned char 
 11225 ;;  g               2   65[BANK0 ] PTR struct GameParameter
 11226 ;;		 -> g1(240), 
 11227 ;; Auto vars:     Size  Location     Type
 11228 ;;  ev              1   69[BANK0 ] unsigned char 
 11229 ;; Return value:  Size  Location     Type
 11230 ;;                  1    wreg      void 
 11231 ;; Registers used:
 11232 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11233 ;; Tracked objects:
 11234 ;;		On entry : 3F/0
 11235 ;;		On exit  : 0/0
 11236 ;;		Unchanged: 0/0
 11237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11238 ;;      Params:         0       2       0       0       0       0       0
 11239 ;;      Locals:         0       1       0       0       0       0       0
 11240 ;;      Temps:          0       2       0       0       0       0       0
 11241 ;;      Totals:         0       5       0       0       0       0       0
 11242 ;;Total ram usage:        5 bytes
 11243 ;; Hardware stack levels used: 1
 11244 ;; Hardware stack levels required when called: 14
 11245 ;; This function calls:
 11246 ;;		_Menu_inGameDraw
 11247 ;;		_displayController
 11248 ;; This function is called by:
 11249 ;;		_Factory_exec
 11250 ;; This function uses a non-reentrant model
 11251 ;;
 11252                           
 11253                           	psect	text46
 11254  004BE6                     __ptext46:
 11255                           	callstack 0
 11256  004BE6                     _displaySM:
 11257                           	callstack 15
 11258                           
 11259                           ;incstack = 0
 11260                           ;displaySM@ev stored from wreg
 11261  004BE6  6FEF               	movwf	displaySM@ev& (0+255),b
 11262                           
 11263                           ;stateMachine/display.c: 30: void displaySM(Event ev, GameParameters* g);stateMachine/di
      +                          splay.c: 31: {;stateMachine/display.c: 32:    switch(displayState)
 11264  004BE8  D03B               	goto	l8804
 11265  004BEA                     l8760:
 11266                           
 11267                           ; BSR set to: 0
 11268                           ;stateMachine/display.c: 35:             if((ev==evOnePlayer)||(ev==evTwoPlayer))
 11269  004BEA  0E05               	movlw	5
 11270  004BEC  19EF               	xorwf	displaySM@ev& (0+255),w,b
 11271  004BEE  B4D8               	btfsc	status,2,c
 11272  004BF0  D004               	goto	u6440
 11273                           
 11274                           ; BSR set to: 0
 11275  004BF2  0E06               	movlw	6
 11276  004BF4  19EF               	xorwf	displaySM@ev& (0+255),w,b
 11277  004BF6  A4D8               	btfss	status,2,c
 11278  004BF8  D010               	goto	l8770
 11279  004BFA                     u6440:
 11280                           
 11281                           ; BSR set to: 0
 11282                           ;stateMachine/display.c: 36:             {;stateMachine/display.c: 37:                 d
      +                          isplayState=INGAME;
 11283  004BFA  0E02               	movlw	2
 11284  004BFC  6F88               	movwf	_displayState& (0+255),b
 11285                           
 11286                           ; BSR set to: 0
 11287                           ;stateMachine/display.c: 38:                 Menu_inGameDraw(g);
 11288  004BFE  C0EB  F0E4         	movff	displaySM@g,Menu_inGameDraw@g
 11289  004C02  C0EC  F0E5         	movff	displaySM@g+1,Menu_inGameDraw@g+1
 11290  004C06  EC98  F026         	call	_Menu_inGameDraw	;wreg free
 11291                           
 11292                           ;stateMachine/display.c: 39:                 displayController(g,ev);
 11293  004C0A  C0EB  F0E6         	movff	displaySM@g,displayController@g
 11294  004C0E  C0EC  F0E7         	movff	displaySM@g+1,displayController@g+1
 11295  004C12  C0EF  F0E8         	movff	displaySM@ev,displayController@ev
 11296  004C16  ECA2  F020         	call	_displayController	;wreg free
 11297  004C1A                     l8770:
 11298                           
 11299                           ;stateMachine/display.c: 41:             if(ev==evParameters)
 11300  004C1A  0E07               	movlw	7
 11301  004C1C  0100               	movlb	0	; () banked
 11302  004C1E  19EF               	xorwf	displaySM@ev& (0+255),w,b
 11303  004C20  A4D8               	btfss	status,2,c
 11304  004C22  0012               	return	
 11305                           
 11306                           ; BSR set to: 0
 11307                           ;stateMachine/display.c: 42:             {;stateMachine/display.c: 43:                 d
      +                          isplayState=PARAMETERS;
 11308  004C24  0E01               	movlw	1
 11309  004C26                     L7:
 11310  004C26  6F88               	movwf	_displayState& (0+255),b
 11311  004C28                     l8774:
 11312                           
 11313                           ; BSR set to: 0
 11314                           ;stateMachine/display.c: 44:                 displayController(g,ev);
 11315  004C28  C0EB  F0E6         	movff	displaySM@g,displayController@g
 11316  004C2C  C0EC  F0E7         	movff	displaySM@g+1,displayController@g+1
 11317  004C30  C0EF  F0E8         	movff	displaySM@ev,displayController@ev
 11318  004C34  ECA2  F020         	call	_displayController	;wreg free
 11319  004C38  0012               	return	
 11320  004C3A                     l8776:
 11321                           
 11322                           ; BSR set to: 0
 11323                           ;stateMachine/display.c: 49:             if(ev==evLeave)
 11324  004C3A  0E08               	movlw	8
 11325  004C3C  19EF               	xorwf	displaySM@ev& (0+255),w,b
 11326  004C3E  A4D8               	btfss	status,2,c
 11327  004C40  0012               	return	
 11328  004C42                     u6460:
 11329                           
 11330                           ; BSR set to: 0
 11331                           ;stateMachine/display.c: 50:             {;stateMachine/display.c: 51:                 d
      +                          isplayState=WELCOME;
 11332  004C42  0E00               	movlw	0
 11333  004C44  D7F0               	goto	L7
 11334  004C46                     l8782:
 11335                           
 11336                           ; BSR set to: 0
 11337                           ;stateMachine/display.c: 57:             if(ev==evEndGame)
 11338  004C46  0E09               	movlw	9
 11339  004C48  19EF               	xorwf	displaySM@ev& (0+255),w,b
 11340  004C4A  A4D8               	btfss	status,2,c
 11341  004C4C  D002               	goto	l8788
 11342                           
 11343                           ; BSR set to: 0
 11344                           ;stateMachine/display.c: 58:             {;stateMachine/display.c: 59:                 d
      +                          isplayState=ENDGAME;
 11345  004C4E  0E03               	movlw	3
 11346  004C50  D7EA               	goto	L7
 11347  004C52                     l8788:
 11348                           
 11349                           ; BSR set to: 0
 11350  004C52  0E08               	movlw	8
 11351  004C54  19EF               	xorwf	displaySM@ev& (0+255),w,b
 11352  004C56  B4D8               	btfsc	status,2,c
 11353  004C58  D7F4               	goto	u6460
 11354  004C5A  D7E6               	goto	l8774
 11355  004C5C                     l8796:
 11356                           
 11357                           ; BSR set to: 0
 11358                           ;stateMachine/display.c: 74:            if(ev==evNewGame)
 11359  004C5C  0E0F               	movlw	15
 11360  004C5E  D7EE               	goto	L14
 11361  004C60                     l8804:
 11362  004C60  0100               	movlb	0	; () banked
 11363  004C62  5188               	movf	_displayState& (0+255),w,b
 11364  004C64  6FED               	movwf	??_displaySM& (0+255),b
 11365  004C66  6BEE               	clrf	(??_displaySM+1)& (0+255),b
 11366                           
 11367                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11368                           ; Switch size 1, requested type "simple"
 11369                           ; Number of cases is 1, Range of values is 0 to 0
 11370                           ; switch strategies available:
 11371                           ; Name         Instructions Cycles
 11372                           ; simple_byte            4     3 (average)
 11373                           ;	Chosen strategy is simple_byte
 11374  004C68  51EE               	movf	(??_displaySM+1)& (0+255),w,b
 11375  004C6A  0A00               	xorlw	0	; case 0
 11376  004C6C  A4D8               	btfss	status,2,c
 11377  004C6E  0012               	return	
 11378                           
 11379                           ; BSR set to: 0
 11380                           ; Switch size 1, requested type "simple"
 11381                           ; Number of cases is 4, Range of values is 0 to 3
 11382                           ; switch strategies available:
 11383                           ; Name         Instructions Cycles
 11384                           ; simple_byte           13     7 (average)
 11385                           ;	Chosen strategy is simple_byte
 11386  004C70  51ED               	movf	??_displaySM& (0+255),w,b
 11387  004C72  0A00               	xorlw	0	; case 0
 11388  004C74  B4D8               	btfsc	status,2,c
 11389  004C76  D7B9               	goto	l8760
 11390  004C78  0A01               	xorlw	1	; case 1
 11391  004C7A  B4D8               	btfsc	status,2,c
 11392  004C7C  D7DE               	goto	l8776
 11393  004C7E  0A03               	xorlw	3	; case 2
 11394  004C80  B4D8               	btfsc	status,2,c
 11395  004C82  D7E1               	goto	l8782
 11396  004C84  0A01               	xorlw	1	; case 3
 11397  004C86  A4D8               	btfss	status,2,c
 11398  004C88  0012               	return	
 11399  004C8A  D7E8               	goto	l8796
 11400  004C8C                     __end_of_displaySM:
 11401                           	callstack 0
 11402                           
 11403 ;; *************** function _displayController *****************
 11404 ;; Defined at:
 11405 ;;		line 94 in file "stateMachine/display.c"
 11406 ;; Parameters:    Size  Location     Type
 11407 ;;  g               2   60[BANK0 ] PTR struct GameParameter
 11408 ;;		 -> g1(240), 
 11409 ;;  ev              1   62[BANK0 ] unsigned char 
 11410 ;; Auto vars:     Size  Location     Type
 11411 ;;		None
 11412 ;; Return value:  Size  Location     Type
 11413 ;;                  1    wreg      void 
 11414 ;; Registers used:
 11415 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11416 ;; Tracked objects:
 11417 ;;		On entry : 0/0
 11418 ;;		On exit  : 0/0
 11419 ;;		Unchanged: 0/0
 11420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11421 ;;      Params:         0       3       0       0       0       0       0
 11422 ;;      Locals:         0       0       0       0       0       0       0
 11423 ;;      Temps:          0       2       0       0       0       0       0
 11424 ;;      Totals:         0       5       0       0       0       0       0
 11425 ;;Total ram usage:        5 bytes
 11426 ;; Hardware stack levels used: 1
 11427 ;; Hardware stack levels required when called: 13
 11428 ;; This function calls:
 11429 ;;		_Ball_draw
 11430 ;;		_LCD_DrawRect
 11431 ;;		_Menu_endGame
 11432 ;;		_Menu_parametersDraw
 11433 ;;		_Menu_welcomeDraw
 11434 ;;		_Paddle_draw
 11435 ;;		_Score_draw
 11436 ;; This function is called by:
 11437 ;;		_displayInit
 11438 ;;		_displaySM
 11439 ;; This function uses a non-reentrant model
 11440 ;;
 11441                           
 11442                           	psect	text47
 11443  004144                     __ptext47:
 11444                           	callstack 0
 11445  004144                     _displayController:
 11446                           	callstack 14
 11447                           
 11448                           ;stateMachine/display.c: 94: void displayController(GameParameters* g,Event ev);stateMac
      +                          hine/display.c: 95: {;stateMachine/display.c: 96:     switch(displayState)
 11449                           
 11450                           ;incstack = 0
 11451  004144  D060               	goto	l8698
 11452  004146                     l8672:
 11453                           
 11454                           ; BSR set to: 0
 11455                           ;stateMachine/display.c: 100:             Menu_welcomeDraw(g);
 11456  004146  C0E6  F044         	movff	displayController@g,Menu_welcomeDraw@g
 11457  00414A  C0E7  F045         	movff	displayController@g+1,Menu_welcomeDraw@g+1
 11458  00414E  ECBB  F027         	call	_Menu_welcomeDraw	;wreg free
 11459                           
 11460                           ;stateMachine/display.c: 101:             break;
 11461  004152  0012               	return	
 11462  004154                     l8674:
 11463                           
 11464                           ; BSR set to: 0
 11465                           ;stateMachine/display.c: 105:             Menu_parametersDraw(g);
 11466  004154  C0E6  F0E4         	movff	displayController@g,Menu_parametersDraw@g
 11467  004158  C0E7  F0E5         	movff	displayController@g+1,Menu_parametersDraw@g+1
 11468  00415C  EC96  F01E         	call	_Menu_parametersDraw	;wreg free
 11469                           
 11470                           ;stateMachine/display.c: 106:             break;
 11471  004160  0012               	return	
 11472  004162                     l8676:
 11473                           
 11474                           ; BSR set to: 0
 11475                           ;stateMachine/display.c: 110:             if(ev==evRedrawPaddle1)
 11476  004162  0E0B               	movlw	11
 11477  004164  19E8               	xorwf	displayController@ev& (0+255),w,b
 11478  004166  A4D8               	btfss	status,2,c
 11479  004168  D008               	goto	l8680
 11480                           
 11481                           ; BSR set to: 0
 11482                           ;stateMachine/display.c: 111:             {;stateMachine/display.c: 112:                
      +                           Paddle_draw(&g->p1);
 11483  00416A  0ED6               	movlw	214
 11484  00416C  25E6               	addwf	displayController@g& (0+255),w,b
 11485  00416E  6E25               	movwf	Paddle_draw@p^0,c
 11486  004170  0E00               	movlw	0
 11487  004172  21E7               	addwfc	(displayController@g+1)& (0+255),w,b
 11488  004174  6E26               	movwf	(Paddle_draw@p+1)^0,c
 11489  004176  EC6B  F01D         	call	_Paddle_draw	;wreg free
 11490  00417A                     l8680:
 11491                           
 11492                           ;stateMachine/display.c: 114:             if(ev==evRedrawPaddle2)
 11493  00417A  0E0C               	movlw	12
 11494  00417C  0100               	movlb	0	; () banked
 11495  00417E  19E8               	xorwf	displayController@ev& (0+255),w,b
 11496  004180  A4D8               	btfss	status,2,c
 11497  004182  D008               	goto	l8684
 11498                           
 11499                           ; BSR set to: 0
 11500                           ;stateMachine/display.c: 115:             {;stateMachine/display.c: 116:                
      +                           Paddle_draw(&g->p2);
 11501  004184  0EE0               	movlw	224
 11502  004186  25E6               	addwf	displayController@g& (0+255),w,b
 11503  004188  6E25               	movwf	Paddle_draw@p^0,c
 11504  00418A  0E00               	movlw	0
 11505  00418C  21E7               	addwfc	(displayController@g+1)& (0+255),w,b
 11506  00418E  6E26               	movwf	(Paddle_draw@p+1)^0,c
 11507  004190  EC6B  F01D         	call	_Paddle_draw	;wreg free
 11508  004194                     l8684:
 11509                           
 11510                           ;stateMachine/display.c: 118:             if(ev==evRedrawBall)
 11511  004194  0E0D               	movlw	13
 11512  004196  0100               	movlb	0	; () banked
 11513  004198  19E8               	xorwf	displayController@ev& (0+255),w,b
 11514  00419A  A4D8               	btfss	status,2,c
 11515  00419C  D008               	goto	l8688
 11516                           
 11517                           ; BSR set to: 0
 11518                           ;stateMachine/display.c: 119:             {;stateMachine/display.c: 120:                
      +                           Ball_draw(&g->b);
 11519  00419E  0ECA               	movlw	202
 11520  0041A0  25E6               	addwf	displayController@g& (0+255),w,b
 11521  0041A2  6E25               	movwf	Ball_draw@b^0,c
 11522  0041A4  0E00               	movlw	0
 11523  0041A6  21E7               	addwfc	(displayController@g+1)& (0+255),w,b
 11524  0041A8  6E26               	movwf	(Ball_draw@b+1)^0,c
 11525  0041AA  EC35  F01A         	call	_Ball_draw	;wreg free
 11526  0041AE                     l8688:
 11527                           
 11528                           ;stateMachine/display.c: 122:             if(ev==evRedrawScore)
 11529  0041AE  0E0E               	movlw	14
 11530  0041B0  0100               	movlb	0	; () banked
 11531  0041B2  19E8               	xorwf	displayController@ev& (0+255),w,b
 11532  0041B4  A4D8               	btfss	status,2,c
 11533  0041B6  0012               	return	
 11534                           
 11535                           ; BSR set to: 0
 11536                           ;stateMachine/display.c: 123:             {;stateMachine/display.c: 124:                
      +                           Score_draw(&g->s1);
 11537  0041B8  0EEA               	movlw	234
 11538  0041BA  25E6               	addwf	displayController@g& (0+255),w,b
 11539  0041BC  6FD5               	movwf	Score_draw@s& (0+255),b
 11540  0041BE  0E00               	movlw	0
 11541  0041C0  21E7               	addwfc	(displayController@g+1)& (0+255),w,b
 11542  0041C2  6FD6               	movwf	(Score_draw@s+1)& (0+255),b
 11543  0041C4  EC03  F022         	call	_Score_draw	;wreg free
 11544                           
 11545                           ;stateMachine/display.c: 125:                 LCD_DrawRect(0,160,239,160,1,0b11111111111
      +                          11111);
 11546  0041C8  0E00               	movlw	0
 11547  0041CA  6E13               	movwf	(LCD_DrawRect@posX1+1)^0,c
 11548  0041CC  0E00               	movlw	0
 11549  0041CE  6E12               	movwf	LCD_DrawRect@posX1^0,c
 11550  0041D0  0E00               	movlw	0
 11551  0041D2  6E15               	movwf	(LCD_DrawRect@posY1+1)^0,c
 11552  0041D4  0EA0               	movlw	160
 11553  0041D6  6E14               	movwf	LCD_DrawRect@posY1^0,c
 11554  0041D8  0E00               	movlw	0
 11555  0041DA  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 11556  0041DC  0EEF               	movlw	239
 11557  0041DE  6E16               	movwf	LCD_DrawRect@posX2^0,c
 11558  0041E0  0E00               	movlw	0
 11559  0041E2  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 11560  0041E4  0EA0               	movlw	160
 11561  0041E6  6E18               	movwf	LCD_DrawRect@posY2^0,c
 11562  0041E8  0E01               	movlw	1
 11563  0041EA  6E1A               	movwf	LCD_DrawRect@fill^0,c
 11564  0041EC  0EFF               	movlw	255
 11565  0041EE  6E1C               	movwf	(LCD_DrawRect@color+1)^0,c
 11566  0041F0  681B               	setf	LCD_DrawRect@color^0,c
 11567  0041F2  EC34  F013         	call	_LCD_DrawRect	;wreg free
 11568  0041F6  0012               	return	
 11569  0041F8                     l8694:
 11570                           
 11571                           ; BSR set to: 0
 11572                           ;stateMachine/display.c: 130:             Menu_endGame(g);
 11573  0041F8  C0E6  F044         	movff	displayController@g,Menu_endGame@g
 11574  0041FC  C0E7  F045         	movff	displayController@g+1,Menu_endGame@g+1
 11575  004200  EC46  F024         	call	_Menu_endGame	;wreg free
 11576                           
 11577                           ;stateMachine/display.c: 131:             break;
 11578  004204  0012               	return	
 11579  004206                     l8698:
 11580  004206  0100               	movlb	0	; () banked
 11581  004208  5188               	movf	_displayState& (0+255),w,b
 11582  00420A  6FE9               	movwf	??_displayController& (0+255),b
 11583  00420C  6BEA               	clrf	(??_displayController+1)& (0+255),b
 11584                           
 11585                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11586                           ; Switch size 1, requested type "simple"
 11587                           ; Number of cases is 1, Range of values is 0 to 0
 11588                           ; switch strategies available:
 11589                           ; Name         Instructions Cycles
 11590                           ; simple_byte            4     3 (average)
 11591                           ;	Chosen strategy is simple_byte
 11592  00420E  51EA               	movf	(??_displayController+1)& (0+255),w,b
 11593  004210  0A00               	xorlw	0	; case 0
 11594  004212  A4D8               	btfss	status,2,c
 11595  004214  0012               	return	
 11596                           
 11597                           ; BSR set to: 0
 11598                           ; Switch size 1, requested type "simple"
 11599                           ; Number of cases is 4, Range of values is 0 to 3
 11600                           ; switch strategies available:
 11601                           ; Name         Instructions Cycles
 11602                           ; simple_byte           13     7 (average)
 11603                           ;	Chosen strategy is simple_byte
 11604  004216  51E9               	movf	??_displayController& (0+255),w,b
 11605  004218  0A00               	xorlw	0	; case 0
 11606  00421A  B4D8               	btfsc	status,2,c
 11607  00421C  D794               	goto	l8672
 11608  00421E  0A01               	xorlw	1	; case 1
 11609  004220  B4D8               	btfsc	status,2,c
 11610  004222  D798               	goto	l8674
 11611  004224  0A03               	xorlw	3	; case 2
 11612  004226  B4D8               	btfsc	status,2,c
 11613  004228  D79C               	goto	l8676
 11614  00422A  0A01               	xorlw	1	; case 3
 11615  00422C  A4D8               	btfss	status,2,c
 11616  00422E  0012               	return	
 11617  004230  D7E3               	goto	l8694
 11618  004232                     __end_of_displayController:
 11619                           	callstack 0
 11620                           
 11621 ;; *************** function _Menu_welcomeDraw *****************
 11622 ;; Defined at:
 11623 ;;		line 7 in file "class/menu.c"
 11624 ;; Parameters:    Size  Location     Type
 11625 ;;  g               2   67[COMRAM] PTR struct GameParameter
 11626 ;;		 -> g1(240), 
 11627 ;; Auto vars:     Size  Location     Type
 11628 ;;		None
 11629 ;; Return value:  Size  Location     Type
 11630 ;;                  1    wreg      void 
 11631 ;; Registers used:
 11632 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11633 ;; Tracked objects:
 11634 ;;		On entry : 0/0
 11635 ;;		On exit  : 0/0
 11636 ;;		Unchanged: 0/0
 11637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11638 ;;      Params:         2       0       0       0       0       0       0
 11639 ;;      Locals:         0       0       0       0       0       0       0
 11640 ;;      Temps:          0       0       0       0       0       0       0
 11641 ;;      Totals:         2       0       0       0       0       0       0
 11642 ;;Total ram usage:        2 bytes
 11643 ;; Hardware stack levels used: 1
 11644 ;; Hardware stack levels required when called: 7
 11645 ;; This function calls:
 11646 ;;		_LCD_ButtonDraw
 11647 ;;		_LCD_DrawText
 11648 ;;		_LCD_Fill
 11649 ;; This function is called by:
 11650 ;;		_displayController
 11651 ;; This function uses a non-reentrant model
 11652 ;;
 11653                           
 11654                           	psect	text48
 11655  004F76                     __ptext48:
 11656                           	callstack 0
 11657  004F76                     _Menu_welcomeDraw:
 11658                           	callstack 19
 11659                           
 11660                           ;class/menu.c: 7: void Menu_welcomeDraw(GameParameters* g);class/menu.c: 8: {;class/menu
      +                          .c: 9:     LCD_Fill(0b0000000000000000);
 11661                           
 11662                           ;incstack = 0
 11663  004F76  0E00               	movlw	0
 11664  004F78  6E13               	movwf	(LCD_Fill@color+1)^0,c
 11665  004F7A  0E00               	movlw	0
 11666  004F7C  6E12               	movwf	LCD_Fill@color^0,c
 11667  004F7E  EC9E  F024         	call	_LCD_Fill	;wreg free
 11668                           
 11669                           ;class/menu.c: 10:     LCD_DrawText("WELCOME",&arialNarrow_12ptFontInfo,A_CENTER,120,50,
      +                          0b1111111111111111,0b0000000000000000);
 11670  004F82  0EEB               	movlw	low STR_10
 11671  004F84  6E20               	movwf	LCD_DrawText@msg^0,c
 11672  004F86  0E7F               	movlw	high STR_10
 11673  004F88  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
 11674  004F8A  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 11675  004F8C  6E22               	movwf	LCD_DrawText@font^0,c
 11676  004F8E  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 11677  004F90  6E23               	movwf	(LCD_DrawText@font+1)^0,c
 11678  004F92  0E02               	movlw	2
 11679  004F94  6E24               	movwf	LCD_DrawText@align^0,c
 11680  004F96  0E00               	movlw	0
 11681  004F98  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 11682  004F9A  0E78               	movlw	120
 11683  004F9C  6E25               	movwf	LCD_DrawText@posX^0,c
 11684  004F9E  0E00               	movlw	0
 11685  004FA0  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
 11686  004FA2  0E32               	movlw	50
 11687  004FA4  6E27               	movwf	LCD_DrawText@posY^0,c
 11688  004FA6  0EFF               	movlw	255
 11689  004FA8  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
 11690  004FAA  6829               	setf	LCD_DrawText@color^0,c
 11691  004FAC  0E00               	movlw	0
 11692  004FAE  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
 11693  004FB0  0E00               	movlw	0
 11694  004FB2  6E2B               	movwf	LCD_DrawText@bg_color^0,c
 11695  004FB4  EC85  F00F         	call	_LCD_DrawText	;wreg free
 11696                           
 11697                           ;class/menu.c: 12:     LCD_ButtonDraw(&(g->btnOnePlayer));
 11698  004FB8  0E20               	movlw	32
 11699  004FBA  2444               	addwf	Menu_welcomeDraw@g^0,w,c
 11700  004FBC  6E42               	movwf	LCD_ButtonDraw@button^0,c
 11701  004FBE  0E00               	movlw	0
 11702  004FC0  2045               	addwfc	(Menu_welcomeDraw@g+1)^0,w,c
 11703  004FC2  6E43               	movwf	(LCD_ButtonDraw@button+1)^0,c
 11704  004FC4  EC26  F007         	call	_LCD_ButtonDraw	;wreg free
 11705                           
 11706                           ;class/menu.c: 13:     LCD_ButtonDraw(&(g->btnTwoPlayer));
 11707  004FC8  0E38               	movlw	56
 11708  004FCA  2444               	addwf	Menu_welcomeDraw@g^0,w,c
 11709  004FCC  6E42               	movwf	LCD_ButtonDraw@button^0,c
 11710  004FCE  0E00               	movlw	0
 11711  004FD0  2045               	addwfc	(Menu_welcomeDraw@g+1)^0,w,c
 11712  004FD2  6E43               	movwf	(LCD_ButtonDraw@button+1)^0,c
 11713  004FD4  EC26  F007         	call	_LCD_ButtonDraw	;wreg free
 11714                           
 11715                           ;class/menu.c: 14:     LCD_ButtonDraw(&(g->btnParam));
 11716  004FD8  0E08               	movlw	8
 11717  004FDA  2444               	addwf	Menu_welcomeDraw@g^0,w,c
 11718  004FDC  6E42               	movwf	LCD_ButtonDraw@button^0,c
 11719  004FDE  0E00               	movlw	0
 11720  004FE0  2045               	addwfc	(Menu_welcomeDraw@g+1)^0,w,c
 11721  004FE2  6E43               	movwf	(LCD_ButtonDraw@button+1)^0,c
 11722  004FE4  EC26  F007         	call	_LCD_ButtonDraw	;wreg free
 11723                           
 11724                           ;class/menu.c: 15:     LCD_ButtonDraw(&(g->btnTurnOff));
 11725  004FE8  0E80               	movlw	128
 11726  004FEA  2444               	addwf	Menu_welcomeDraw@g^0,w,c
 11727  004FEC  6E42               	movwf	LCD_ButtonDraw@button^0,c
 11728  004FEE  0E00               	movlw	0
 11729  004FF0  2045               	addwfc	(Menu_welcomeDraw@g+1)^0,w,c
 11730  004FF2  6E43               	movwf	(LCD_ButtonDraw@button+1)^0,c
 11731  004FF4  EC26  F007         	call	_LCD_ButtonDraw	;wreg free
 11732  004FF8  0012               	return		;funcret
 11733  004FFA                     __end_of_Menu_welcomeDraw:
 11734                           	callstack 0
 11735                           
 11736 ;; *************** function _Menu_parametersDraw *****************
 11737 ;; Defined at:
 11738 ;;		line 21 in file "class/menu.c"
 11739 ;; Parameters:    Size  Location     Type
 11740 ;;  g               2   58[BANK0 ] PTR struct GameParameter
 11741 ;;		 -> g1(240), 
 11742 ;; Auto vars:     Size  Location     Type
 11743 ;;		None
 11744 ;; Return value:  Size  Location     Type
 11745 ;;                  1    wreg      void 
 11746 ;; Registers used:
 11747 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11748 ;; Tracked objects:
 11749 ;;		On entry : 0/0
 11750 ;;		On exit  : 0/0
 11751 ;;		Unchanged: 0/0
 11752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11753 ;;      Params:         0       2       0       0       0       0       0
 11754 ;;      Locals:         0       0       0       0       0       0       0
 11755 ;;      Temps:          0       0       0       0       0       0       0
 11756 ;;      Totals:         0       2       0       0       0       0       0
 11757 ;;Total ram usage:        2 bytes
 11758 ;; Hardware stack levels used: 1
 11759 ;; Hardware stack levels required when called: 7
 11760 ;; This function calls:
 11761 ;;		_LCD_ButtonDraw
 11762 ;;		_LCD_DrawText
 11763 ;;		_LCD_Fill
 11764 ;;		_LCD_SliderDraw
 11765 ;; This function is called by:
 11766 ;;		_displayController
 11767 ;; This function uses a non-reentrant model
 11768 ;;
 11769                           
 11770                           	psect	text49
 11771  003D2C                     __ptext49:
 11772                           	callstack 0
 11773  003D2C                     _Menu_parametersDraw:
 11774                           	callstack 19
 11775                           
 11776                           ;class/menu.c: 21: void Menu_parametersDraw(GameParameters* g);class/menu.c: 22: {;class
      +                          /menu.c: 23:     LCD_Fill(0b0000000000000000);
 11777                           
 11778                           ;incstack = 0
 11779  003D2C  0E00               	movlw	0
 11780  003D2E  6E13               	movwf	(LCD_Fill@color+1)^0,c
 11781  003D30  0E00               	movlw	0
 11782  003D32  6E12               	movwf	LCD_Fill@color^0,c
 11783  003D34  EC9E  F024         	call	_LCD_Fill	;wreg free
 11784                           
 11785                           ;class/menu.c: 24:     LCD_DrawText("PARAMETERS",&arialNarrow_12ptFontInfo,A_CENTER,120,
      +                          50,0b1111111111111111,0b0000000000000000);
 11786  003D38  0E9C               	movlw	low STR_11
 11787  003D3A  6E20               	movwf	LCD_DrawText@msg^0,c
 11788  003D3C  0E7F               	movlw	high STR_11
 11789  003D3E  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
 11790  003D40  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 11791  003D42  6E22               	movwf	LCD_DrawText@font^0,c
 11792  003D44  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 11793  003D46  6E23               	movwf	(LCD_DrawText@font+1)^0,c
 11794  003D48  0E02               	movlw	2
 11795  003D4A  6E24               	movwf	LCD_DrawText@align^0,c
 11796  003D4C  0E00               	movlw	0
 11797  003D4E  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 11798  003D50  0E78               	movlw	120
 11799  003D52  6E25               	movwf	LCD_DrawText@posX^0,c
 11800  003D54  0E00               	movlw	0
 11801  003D56  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
 11802  003D58  0E32               	movlw	50
 11803  003D5A  6E27               	movwf	LCD_DrawText@posY^0,c
 11804  003D5C  0EFF               	movlw	255
 11805  003D5E  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
 11806  003D60  6829               	setf	LCD_DrawText@color^0,c
 11807  003D62  0E00               	movlw	0
 11808  003D64  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
 11809  003D66  0E00               	movlw	0
 11810  003D68  6E2B               	movwf	LCD_DrawText@bg_color^0,c
 11811  003D6A  EC85  F00F         	call	_LCD_DrawText	;wreg free
 11812                           
 11813                           ;class/menu.c: 25:     LCD_ButtonDraw(&(g->btnLeave));
 11814  003D6E  0E50               	movlw	80
 11815  003D70  0100               	movlb	0	; () banked
 11816  003D72  25E4               	addwf	Menu_parametersDraw@g& (0+255),w,b
 11817  003D74  6E42               	movwf	LCD_ButtonDraw@button^0,c
 11818  003D76  0E00               	movlw	0
 11819  003D78  21E5               	addwfc	(Menu_parametersDraw@g+1)& (0+255),w,b
 11820  003D7A  6E43               	movwf	(LCD_ButtonDraw@button+1)^0,c
 11821  003D7C  EC26  F007         	call	_LCD_ButtonDraw	;wreg free
 11822                           
 11823                           ;class/menu.c: 26:     g->sldBackLight.value=g->backlight;
 11824  003D80  C0E4  FFD9         	movff	Menu_parametersDraw@g,fsr2l
 11825  003D84  C0E5  FFDA         	movff	Menu_parametersDraw@g+1,fsr2h
 11826  003D88  0100               	movlb	0	; () banked
 11827  003D8A  EE10 F0A9          	lfsr	1,169
 11828  003D8E  51E4               	movf	Menu_parametersDraw@g& (0+255),w,b
 11829  003D90  26E1               	addwf	fsr1l,f,c
 11830  003D92  51E5               	movf	(Menu_parametersDraw@g+1)& (0+255),w,b
 11831  003D94  22E2               	addwfc	fsr1h,f,c
 11832  003D96  CFDE FFE6          	movff	postinc2,postinc1
 11833  003D9A  CFDD FFE5          	movff	postdec2,postdec1
 11834                           
 11835                           ; BSR set to: 0
 11836                           ;class/menu.c: 27:     LCD_SliderDraw(&(g->sldBackLight));
 11837  003D9E  0E98               	movlw	152
 11838  003DA0  25E4               	addwf	Menu_parametersDraw@g& (0+255),w,b
 11839  003DA2  6E37               	movwf	LCD_SliderDraw@slider^0,c
 11840  003DA4  0E00               	movlw	0
 11841  003DA6  21E5               	addwfc	(Menu_parametersDraw@g+1)& (0+255),w,b
 11842  003DA8  6E38               	movwf	(LCD_SliderDraw@slider+1)^0,c
 11843  003DAA  EC27  F01F         	call	_LCD_SliderDraw	;wreg free
 11844                           
 11845                           ;class/menu.c: 28:     LCD_DrawText("LUMINOSITY",&arialNarrow_12ptFontInfo,A_LEFT,50,95,
      +                          0b1111111111111111,0b0000000000000000);
 11846  003DAE  0EA7               	movlw	low STR_12
 11847  003DB0  6E20               	movwf	LCD_DrawText@msg^0,c
 11848  003DB2  0E7F               	movlw	high STR_12
 11849  003DB4  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
 11850  003DB6  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 11851  003DB8  6E22               	movwf	LCD_DrawText@font^0,c
 11852  003DBA  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 11853  003DBC  6E23               	movwf	(LCD_DrawText@font+1)^0,c
 11854  003DBE  0E00               	movlw	0
 11855  003DC0  6E24               	movwf	LCD_DrawText@align^0,c
 11856  003DC2  0E00               	movlw	0
 11857  003DC4  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 11858  003DC6  0E32               	movlw	50
 11859  003DC8  6E25               	movwf	LCD_DrawText@posX^0,c
 11860  003DCA  0E00               	movlw	0
 11861  003DCC  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
 11862  003DCE  0E5F               	movlw	95
 11863  003DD0  6E27               	movwf	LCD_DrawText@posY^0,c
 11864  003DD2  0EFF               	movlw	255
 11865  003DD4  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
 11866  003DD6  6829               	setf	LCD_DrawText@color^0,c
 11867  003DD8  0E00               	movlw	0
 11868  003DDA  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
 11869  003DDC  0E00               	movlw	0
 11870  003DDE  6E2B               	movwf	LCD_DrawText@bg_color^0,c
 11871  003DE0  EC85  F00F         	call	_LCD_DrawText	;wreg free
 11872                           
 11873                           ;class/menu.c: 29:     g->sldLevel.value=g->level;
 11874  003DE4  0100               	movlb	0	; () banked
 11875  003DE6  EE20 F006          	lfsr	2,6
 11876  003DEA  51E4               	movf	Menu_parametersDraw@g& (0+255),w,b
 11877  003DEC  26D9               	addwf	fsr2l,f,c
 11878  003DEE  51E5               	movf	(Menu_parametersDraw@g+1)& (0+255),w,b
 11879  003DF0  22DA               	addwfc	fsr2h,f,c
 11880  003DF2  EE10 F0C2          	lfsr	1,194
 11881  003DF6  51E4               	movf	Menu_parametersDraw@g& (0+255),w,b
 11882  003DF8  26E1               	addwf	fsr1l,f,c
 11883  003DFA  51E5               	movf	(Menu_parametersDraw@g+1)& (0+255),w,b
 11884  003DFC  22E2               	addwfc	fsr1h,f,c
 11885  003DFE  CFDE FFE6          	movff	postinc2,postinc1
 11886  003E02  CFDD FFE5          	movff	postdec2,postdec1
 11887                           
 11888                           ; BSR set to: 0
 11889                           ;class/menu.c: 30:     LCD_SliderDraw(&(g->sldLevel));
 11890  003E06  0EB1               	movlw	177
 11891  003E08  25E4               	addwf	Menu_parametersDraw@g& (0+255),w,b
 11892  003E0A  6E37               	movwf	LCD_SliderDraw@slider^0,c
 11893  003E0C  0E00               	movlw	0
 11894  003E0E  21E5               	addwfc	(Menu_parametersDraw@g+1)& (0+255),w,b
 11895  003E10  6E38               	movwf	(LCD_SliderDraw@slider+1)^0,c
 11896  003E12  EC27  F01F         	call	_LCD_SliderDraw	;wreg free
 11897                           
 11898                           ;class/menu.c: 31:     LCD_DrawText("LEVEL",&arialNarrow_12ptFontInfo,A_LEFT,50,145,0b11
      +                          11111111111111,0b0000000000000000);
 11899  003E16  0EF3               	movlw	low STR_13
 11900  003E18  6E20               	movwf	LCD_DrawText@msg^0,c
 11901  003E1A  0E7F               	movlw	high STR_13
 11902  003E1C  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
 11903  003E1E  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 11904  003E20  6E22               	movwf	LCD_DrawText@font^0,c
 11905  003E22  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 11906  003E24  6E23               	movwf	(LCD_DrawText@font+1)^0,c
 11907  003E26  0E00               	movlw	0
 11908  003E28  6E24               	movwf	LCD_DrawText@align^0,c
 11909  003E2A  0E00               	movlw	0
 11910  003E2C  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 11911  003E2E  0E32               	movlw	50
 11912  003E30  6E25               	movwf	LCD_DrawText@posX^0,c
 11913  003E32  0E00               	movlw	0
 11914  003E34  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
 11915  003E36  0E91               	movlw	145
 11916  003E38  6E27               	movwf	LCD_DrawText@posY^0,c
 11917  003E3A  0EFF               	movlw	255
 11918  003E3C  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
 11919  003E3E  6829               	setf	LCD_DrawText@color^0,c
 11920  003E40  0E00               	movlw	0
 11921  003E42  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
 11922  003E44  0E00               	movlw	0
 11923  003E46  6E2B               	movwf	LCD_DrawText@bg_color^0,c
 11924  003E48  EC85  F00F         	call	_LCD_DrawText	;wreg free
 11925  003E4C  0012               	return		;funcret
 11926  003E4E                     __end_of_Menu_parametersDraw:
 11927                           	callstack 0
 11928                           
 11929 ;; *************** function _LCD_SliderDraw *****************
 11930 ;; Defined at:
 11931 ;;		line 371 in file "libraries/lcd_highlevel.c"
 11932 ;; Parameters:    Size  Location     Type
 11933 ;;  slider          2   54[COMRAM] PTR struct .
 11934 ;;		 -> g1(240), 
 11935 ;; Auto vars:     Size  Location     Type
 11936 ;;  y2              2   66[COMRAM] unsigned short 
 11937 ;;  y1              2   64[COMRAM] unsigned short 
 11938 ;;  x2              2   62[COMRAM] unsigned short 
 11939 ;;  x1              2   60[COMRAM] unsigned short 
 11940 ;; Return value:  Size  Location     Type
 11941 ;;                  1    wreg      void 
 11942 ;; Registers used:
 11943 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11944 ;; Tracked objects:
 11945 ;;		On entry : 3F/0
 11946 ;;		On exit  : 0/0
 11947 ;;		Unchanged: 0/0
 11948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11949 ;;      Params:         2       0       0       0       0       0       0
 11950 ;;      Locals:         8       0       0       0       0       0       0
 11951 ;;      Temps:          4       0       0       0       0       0       0
 11952 ;;      Totals:        14       0       0       0       0       0       0
 11953 ;;Total ram usage:       14 bytes
 11954 ;; Hardware stack levels used: 1
 11955 ;; Hardware stack levels required when called: 6
 11956 ;; This function calls:
 11957 ;;		_LCD_DrawRect
 11958 ;;		_LCD_SliderUpdate
 11959 ;; This function is called by:
 11960 ;;		_Menu_parametersDraw
 11961 ;; This function uses a non-reentrant model
 11962 ;;
 11963                           
 11964                           	psect	text50
 11965  003E4E                     __ptext50:
 11966                           	callstack 0
 11967  003E4E                     _LCD_SliderDraw:
 11968                           	callstack 19
 11969                           
 11970                           ; BSR set to: 0
 11971                           ;libraries/lcd_highlevel.c: 371: void LCD_SliderDraw(sld_t * slider);libraries/lcd_highl
      +                          evel.c: 372: {;libraries/lcd_highlevel.c: 373:   uint16_t x1,x2,y1,y2;;libraries/lcd_hig
      +                          hlevel.c: 375:   x1 = slider->posX;
 11972                           
 11973                           ;incstack = 0
 11974  003E4E  C037  FFD9         	movff	LCD_SliderDraw@slider,fsr2l
 11975  003E52  C038  FFDA         	movff	LCD_SliderDraw@slider+1,fsr2h
 11976  003E56  CFDE F03D          	movff	postinc2,LCD_SliderDraw@x1
 11977  003E5A  CFDD F03E          	movff	postdec2,LCD_SliderDraw@x1+1
 11978                           
 11979                           ; BSR set to: 0
 11980                           ;libraries/lcd_highlevel.c: 376:   x2 = slider->posX + slider->width;
 11981  003E5E  EE20 F004          	lfsr	2,4
 11982  003E62  5037               	movf	LCD_SliderDraw@slider^0,w,c
 11983  003E64  26D9               	addwf	fsr2l,f,c
 11984  003E66  5038               	movf	(LCD_SliderDraw@slider+1)^0,w,c
 11985  003E68  22DA               	addwfc	fsr2h,f,c
 11986  003E6A  CFDE F039          	movff	postinc2,??_LCD_SliderDraw
 11987  003E6E  CFDD F03A          	movff	postdec2,??_LCD_SliderDraw+1
 11988  003E72  C037  FFD9         	movff	LCD_SliderDraw@slider,fsr2l
 11989  003E76  C038  FFDA         	movff	LCD_SliderDraw@slider+1,fsr2h
 11990  003E7A  CFDE F03B          	movff	postinc2,??_LCD_SliderDraw+2
 11991  003E7E  CFDD F03C          	movff	postdec2,??_LCD_SliderDraw+3
 11992  003E82  5039               	movf	??_LCD_SliderDraw^0,w,c
 11993  003E84  243B               	addwf	(??_LCD_SliderDraw+2)^0,w,c
 11994  003E86  6E3F               	movwf	LCD_SliderDraw@x2^0,c
 11995  003E88  503A               	movf	(??_LCD_SliderDraw+1)^0,w,c
 11996  003E8A  203C               	addwfc	(??_LCD_SliderDraw+3)^0,w,c
 11997  003E8C  6E40               	movwf	(LCD_SliderDraw@x2+1)^0,c
 11998                           
 11999                           ; BSR set to: 0
 12000                           ;libraries/lcd_highlevel.c: 377:   y1 = slider->posY;
 12001  003E8E  EE20 F002          	lfsr	2,2
 12002  003E92  5037               	movf	LCD_SliderDraw@slider^0,w,c
 12003  003E94  26D9               	addwf	fsr2l,f,c
 12004  003E96  5038               	movf	(LCD_SliderDraw@slider+1)^0,w,c
 12005  003E98  22DA               	addwfc	fsr2h,f,c
 12006  003E9A  CFDE F041          	movff	postinc2,LCD_SliderDraw@y1
 12007  003E9E  CFDD F042          	movff	postdec2,LCD_SliderDraw@y1+1
 12008                           
 12009                           ; BSR set to: 0
 12010                           ;libraries/lcd_highlevel.c: 378:   y2 = slider->posY + slider->height;
 12011  003EA2  EE20 F006          	lfsr	2,6
 12012  003EA6  5037               	movf	LCD_SliderDraw@slider^0,w,c
 12013  003EA8  26D9               	addwf	fsr2l,f,c
 12014  003EAA  5038               	movf	(LCD_SliderDraw@slider+1)^0,w,c
 12015  003EAC  22DA               	addwfc	fsr2h,f,c
 12016  003EAE  CFDE F039          	movff	postinc2,??_LCD_SliderDraw
 12017  003EB2  CFDD F03A          	movff	postdec2,??_LCD_SliderDraw+1
 12018  003EB6  EE20 F002          	lfsr	2,2
 12019  003EBA  5037               	movf	LCD_SliderDraw@slider^0,w,c
 12020  003EBC  26D9               	addwf	fsr2l,f,c
 12021  003EBE  5038               	movf	(LCD_SliderDraw@slider+1)^0,w,c
 12022  003EC0  22DA               	addwfc	fsr2h,f,c
 12023  003EC2  CFDE F03B          	movff	postinc2,??_LCD_SliderDraw+2
 12024  003EC6  CFDD F03C          	movff	postdec2,??_LCD_SliderDraw+3
 12025  003ECA  5039               	movf	??_LCD_SliderDraw^0,w,c
 12026  003ECC  243B               	addwf	(??_LCD_SliderDraw+2)^0,w,c
 12027  003ECE  6E43               	movwf	LCD_SliderDraw@y2^0,c
 12028  003ED0  503A               	movf	(??_LCD_SliderDraw+1)^0,w,c
 12029  003ED2  203C               	addwfc	(??_LCD_SliderDraw+3)^0,w,c
 12030  003ED4  6E44               	movwf	(LCD_SliderDraw@y2+1)^0,c
 12031                           
 12032                           ; BSR set to: 0
 12033                           ;libraries/lcd_highlevel.c: 379:   LCD_DrawRect(x1, y1, x2, y2, 1, slider->bgColor);
 12034  003ED6  C03D  F012         	movff	LCD_SliderDraw@x1,LCD_DrawRect@posX1
 12035  003EDA  C03E  F013         	movff	LCD_SliderDraw@x1+1,LCD_DrawRect@posX1+1
 12036  003EDE  C041  F014         	movff	LCD_SliderDraw@y1,LCD_DrawRect@posY1
 12037  003EE2  C042  F015         	movff	LCD_SliderDraw@y1+1,LCD_DrawRect@posY1+1
 12038  003EE6  C03F  F016         	movff	LCD_SliderDraw@x2,LCD_DrawRect@posX2
 12039  003EEA  C040  F017         	movff	LCD_SliderDraw@x2+1,LCD_DrawRect@posX2+1
 12040  003EEE  C043  F018         	movff	LCD_SliderDraw@y2,LCD_DrawRect@posY2
 12041  003EF2  C044  F019         	movff	LCD_SliderDraw@y2+1,LCD_DrawRect@posY2+1
 12042  003EF6  0E01               	movlw	1
 12043  003EF8  6E1A               	movwf	LCD_DrawRect@fill^0,c
 12044  003EFA  EE20 F00A          	lfsr	2,10
 12045  003EFE  5037               	movf	LCD_SliderDraw@slider^0,w,c
 12046  003F00  26D9               	addwf	fsr2l,f,c
 12047  003F02  5038               	movf	(LCD_SliderDraw@slider+1)^0,w,c
 12048  003F04  22DA               	addwfc	fsr2h,f,c
 12049  003F06  CFDE F01B          	movff	postinc2,LCD_DrawRect@color
 12050  003F0A  CFDD F01C          	movff	postdec2,LCD_DrawRect@color+1
 12051  003F0E  EC34  F013         	call	_LCD_DrawRect	;wreg free
 12052                           
 12053                           ;libraries/lcd_highlevel.c: 380:   LCD_DrawRect(x1, y1, x2, y2, 0, slider->borderColor);
 12054  003F12  C03D  F012         	movff	LCD_SliderDraw@x1,LCD_DrawRect@posX1
 12055  003F16  C03E  F013         	movff	LCD_SliderDraw@x1+1,LCD_DrawRect@posX1+1
 12056  003F1A  C041  F014         	movff	LCD_SliderDraw@y1,LCD_DrawRect@posY1
 12057  003F1E  C042  F015         	movff	LCD_SliderDraw@y1+1,LCD_DrawRect@posY1+1
 12058  003F22  C03F  F016         	movff	LCD_SliderDraw@x2,LCD_DrawRect@posX2
 12059  003F26  C040  F017         	movff	LCD_SliderDraw@x2+1,LCD_DrawRect@posX2+1
 12060  003F2A  C043  F018         	movff	LCD_SliderDraw@y2,LCD_DrawRect@posY2
 12061  003F2E  C044  F019         	movff	LCD_SliderDraw@y2+1,LCD_DrawRect@posY2+1
 12062  003F32  0E00               	movlw	0
 12063  003F34  6E1A               	movwf	LCD_DrawRect@fill^0,c
 12064  003F36  EE20 F00C          	lfsr	2,12
 12065  003F3A  5037               	movf	LCD_SliderDraw@slider^0,w,c
 12066  003F3C  26D9               	addwf	fsr2l,f,c
 12067  003F3E  5038               	movf	(LCD_SliderDraw@slider+1)^0,w,c
 12068  003F40  22DA               	addwfc	fsr2h,f,c
 12069  003F42  CFDE F01B          	movff	postinc2,LCD_DrawRect@color
 12070  003F46  CFDD F01C          	movff	postdec2,LCD_DrawRect@color+1
 12071  003F4A  EC34  F013         	call	_LCD_DrawRect	;wreg free
 12072                           
 12073                           ;libraries/lcd_highlevel.c: 381:   LCD_SliderUpdate(slider);
 12074  003F4E  C037  F027         	movff	LCD_SliderDraw@slider,LCD_SliderUpdate@slider
 12075  003F52  C038  F028         	movff	LCD_SliderDraw@slider+1,LCD_SliderUpdate@slider+1
 12076  003F56  EC8D  F00B         	call	_LCD_SliderUpdate	;wreg free
 12077  003F5A  0012               	return		;funcret
 12078  003F5C                     __end_of_LCD_SliderDraw:
 12079                           	callstack 0
 12080                           
 12081 ;; *************** function _LCD_SliderUpdate *****************
 12082 ;; Defined at:
 12083 ;;		line 319 in file "libraries/lcd_highlevel.c"
 12084 ;; Parameters:    Size  Location     Type
 12085 ;;  slider          2   38[COMRAM] PTR struct .
 12086 ;;		 -> g1(240), 
 12087 ;; Auto vars:     Size  Location     Type
 12088 ;;  x1              2   52[COMRAM] unsigned short 
 12089 ;;  y2              2   50[COMRAM] unsigned short 
 12090 ;;  y1              2   48[COMRAM] unsigned short 
 12091 ;;  x2              2   46[COMRAM] unsigned short 
 12092 ;; Return value:  Size  Location     Type
 12093 ;;                  1    wreg      void 
 12094 ;; Registers used:
 12095 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12096 ;; Tracked objects:
 12097 ;;		On entry : 0/0
 12098 ;;		On exit  : 0/0
 12099 ;;		Unchanged: 0/0
 12100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12101 ;;      Params:         2       0       0       0       0       0       0
 12102 ;;      Locals:         8       0       0       0       0       0       0
 12103 ;;      Temps:          6       0       0       0       0       0       0
 12104 ;;      Totals:        16       0       0       0       0       0       0
 12105 ;;Total ram usage:       16 bytes
 12106 ;; Hardware stack levels used: 1
 12107 ;; Hardware stack levels required when called: 5
 12108 ;; This function calls:
 12109 ;;		_LCD_DrawRect
 12110 ;;		___lwdiv
 12111 ;;		___wmul
 12112 ;; This function is called by:
 12113 ;;		_LCD_SliderDraw
 12114 ;;		_gameControllerController
 12115 ;; This function uses a non-reentrant model
 12116 ;;
 12117                           
 12118                           	psect	text51
 12119  00171A                     __ptext51:
 12120                           	callstack 0
 12121  00171A                     _LCD_SliderUpdate:
 12122                           	callstack 21
 12123                           
 12124                           ;libraries/lcd_highlevel.c: 319: void LCD_SliderUpdate(sld_t * slider);libraries/lcd_hig
      +                          hlevel.c: 320: {;libraries/lcd_highlevel.c: 321:   uint16_t x1,x2,y1,y2;;libraries/lcd_h
      +                          ighlevel.c: 325:   if(slider->cursorWidth != 0)
 12125                           
 12126                           ;incstack = 0
 12127  00171A  EE20 F00E          	lfsr	2,14
 12128  00171E  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12129  001720  26D9               	addwf	fsr2l,f,c
 12130  001722  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12131  001724  22DA               	addwfc	fsr2h,f,c
 12132  001726  50DE               	movf	postinc2,w,c
 12133  001728  10DE               	iorwf	postinc2,w,c
 12134  00172A  B4D8               	btfsc	status,2,c
 12135  00172C  D05C               	goto	l6108
 12136                           
 12137                           ;libraries/lcd_highlevel.c: 326:   {;libraries/lcd_highlevel.c: 327:     x1 = slider->po
      +                          sX + 1 + (((slider->width-slider->cursorWidth) * slider->oldValue)/ slider->steps);
 12138  00172E  C027  FFD9         	movff	LCD_SliderUpdate@slider,fsr2l
 12139  001732  C028  FFDA         	movff	LCD_SliderUpdate@slider+1,fsr2h
 12140  001736  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12141  00173A  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12142  00173E  EE20 F00E          	lfsr	2,14
 12143  001742  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12144  001744  26D9               	addwf	fsr2l,f,c
 12145  001746  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12146  001748  22DA               	addwfc	fsr2h,f,c
 12147  00174A  CFDE F02B          	movff	postinc2,??_LCD_SliderUpdate+2
 12148  00174E  CFDD F02C          	movff	postdec2,??_LCD_SliderUpdate+3
 12149  001752  EE20 F004          	lfsr	2,4
 12150  001756  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12151  001758  26D9               	addwf	fsr2l,f,c
 12152  00175A  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12153  00175C  22DA               	addwfc	fsr2h,f,c
 12154  00175E  CFDE F02D          	movff	postinc2,??_LCD_SliderUpdate+4
 12155  001762  CFDD F02E          	movff	postdec2,??_LCD_SliderUpdate+5
 12156  001766  502B               	movf	(??_LCD_SliderUpdate+2)^0,w,c
 12157  001768  5C2D               	subwf	(??_LCD_SliderUpdate+4)^0,w,c
 12158  00176A  6E1A               	movwf	___wmul@multiplier^0,c
 12159  00176C  502C               	movf	(??_LCD_SliderUpdate+3)^0,w,c
 12160  00176E  582E               	subwfb	(??_LCD_SliderUpdate+5)^0,w,c
 12161  001770  6E1B               	movwf	(___wmul@multiplier+1)^0,c
 12162  001772  EE20 F013          	lfsr	2,19
 12163  001776  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12164  001778  26D9               	addwf	fsr2l,f,c
 12165  00177A  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12166  00177C  22DA               	addwfc	fsr2h,f,c
 12167  00177E  CFDE F01C          	movff	postinc2,___wmul@multiplicand
 12168  001782  CFDD F01D          	movff	postdec2,___wmul@multiplicand+1
 12169  001786  EC7B  F02C         	call	___wmul	;wreg free
 12170  00178A  C01A  F020         	movff	?___wmul,___lwdiv@dividend
 12171  00178E  C01B  F021         	movff	?___wmul+1,___lwdiv@dividend+1
 12172  001792  EE20 F015          	lfsr	2,21
 12173  001796  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12174  001798  26D9               	addwf	fsr2l,f,c
 12175  00179A  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12176  00179C  22DA               	addwfc	fsr2h,f,c
 12177  00179E  CFDE F022          	movff	postinc2,___lwdiv@divisor
 12178  0017A2  CFDD F023          	movff	postdec2,___lwdiv@divisor+1
 12179  0017A6  EC1C  F02A         	call	___lwdiv	;wreg free
 12180  0017AA  5029               	movf	??_LCD_SliderUpdate^0,w,c
 12181  0017AC  2620               	addwf	?___lwdiv^0,f,c
 12182  0017AE  502A               	movf	(??_LCD_SliderUpdate+1)^0,w,c
 12183  0017B0  2221               	addwfc	(?___lwdiv+1)^0,f,c
 12184  0017B2  0E01               	movlw	1
 12185  0017B4  2420               	addwf	?___lwdiv^0,w,c
 12186  0017B6  6E35               	movwf	LCD_SliderUpdate@x1^0,c
 12187  0017B8  0E00               	movlw	0
 12188  0017BA  2021               	addwfc	(?___lwdiv+1)^0,w,c
 12189  0017BC  6E36               	movwf	(LCD_SliderUpdate@x1+1)^0,c
 12190                           
 12191                           ;libraries/lcd_highlevel.c: 328:     x2 = x1 + slider->cursorWidth-2;
 12192  0017BE  EE20 F00E          	lfsr	2,14
 12193  0017C2  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12194  0017C4  26D9               	addwf	fsr2l,f,c
 12195  0017C6  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12196  0017C8  22DA               	addwfc	fsr2h,f,c
 12197  0017CA  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12198  0017CE  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12199  0017D2  5035               	movf	LCD_SliderUpdate@x1^0,w,c
 12200  0017D4  2629               	addwf	??_LCD_SliderUpdate^0,f,c
 12201  0017D6  5036               	movf	(LCD_SliderUpdate@x1+1)^0,w,c
 12202  0017D8  222A               	addwfc	(??_LCD_SliderUpdate+1)^0,f,c
 12203  0017DA  0EFE               	movlw	254
 12204  0017DC  2429               	addwf	??_LCD_SliderUpdate^0,w,c
 12205  0017DE  6E2F               	movwf	LCD_SliderUpdate@x2^0,c
 12206  0017E0  0EFF               	movlw	255
 12207  0017E2  202A               	addwfc	(??_LCD_SliderUpdate+1)^0,w,c
 12208  0017E4  D045               	goto	L15
 12209  0017E6                     l6108:
 12210                           
 12211                           ;libraries/lcd_highlevel.c: 333:   {;libraries/lcd_highlevel.c: 334:     x1 = slider->po
      +                          sX + 1;
 12212  0017E6  C027  FFD9         	movff	LCD_SliderUpdate@slider,fsr2l
 12213  0017EA  C028  FFDA         	movff	LCD_SliderUpdate@slider+1,fsr2h
 12214  0017EE  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12215  0017F2  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12216  0017F6  0E01               	movlw	1
 12217  0017F8  2429               	addwf	??_LCD_SliderUpdate^0,w,c
 12218  0017FA  6E35               	movwf	LCD_SliderUpdate@x1^0,c
 12219  0017FC  0E00               	movlw	0
 12220  0017FE  202A               	addwfc	(??_LCD_SliderUpdate+1)^0,w,c
 12221  001800  6E36               	movwf	(LCD_SliderUpdate@x1+1)^0,c
 12222                           
 12223                           ;libraries/lcd_highlevel.c: 335:     x2 = slider->posX - 1 + ((slider->width * slider->o
      +                          ldValue)/ slider->steps);
 12224  001802  C027  FFD9         	movff	LCD_SliderUpdate@slider,fsr2l
 12225  001806  C028  FFDA         	movff	LCD_SliderUpdate@slider+1,fsr2h
 12226  00180A  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12227  00180E  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12228  001812  EE20 F004          	lfsr	2,4
 12229  001816  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12230  001818  26D9               	addwf	fsr2l,f,c
 12231  00181A  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12232  00181C  22DA               	addwfc	fsr2h,f,c
 12233  00181E  CFDE F01A          	movff	postinc2,___wmul@multiplier
 12234  001822  CFDD F01B          	movff	postdec2,___wmul@multiplier+1
 12235  001826  EE20 F013          	lfsr	2,19
 12236  00182A  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12237  00182C  26D9               	addwf	fsr2l,f,c
 12238  00182E  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12239  001830  22DA               	addwfc	fsr2h,f,c
 12240  001832  CFDE F01C          	movff	postinc2,___wmul@multiplicand
 12241  001836  CFDD F01D          	movff	postdec2,___wmul@multiplicand+1
 12242  00183A  EC7B  F02C         	call	___wmul	;wreg free
 12243  00183E  C01A  F020         	movff	?___wmul,___lwdiv@dividend
 12244  001842  C01B  F021         	movff	?___wmul+1,___lwdiv@dividend+1
 12245  001846  EE20 F015          	lfsr	2,21
 12246  00184A  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12247  00184C  26D9               	addwf	fsr2l,f,c
 12248  00184E  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12249  001850  22DA               	addwfc	fsr2h,f,c
 12250  001852  CFDE F022          	movff	postinc2,___lwdiv@divisor
 12251  001856  CFDD F023          	movff	postdec2,___lwdiv@divisor+1
 12252  00185A  EC1C  F02A         	call	___lwdiv	;wreg free
 12253  00185E  5029               	movf	??_LCD_SliderUpdate^0,w,c
 12254  001860  2620               	addwf	?___lwdiv^0,f,c
 12255  001862  502A               	movf	(??_LCD_SliderUpdate+1)^0,w,c
 12256  001864  2221               	addwfc	(?___lwdiv+1)^0,f,c
 12257  001866  0EFF               	movlw	255
 12258  001868  2420               	addwf	?___lwdiv^0,w,c
 12259  00186A  6E2F               	movwf	LCD_SliderUpdate@x2^0,c
 12260  00186C  0EFF               	movlw	255
 12261  00186E  2021               	addwfc	(?___lwdiv+1)^0,w,c
 12262  001870                     L15:
 12263  001870  6E30               	movwf	(LCD_SliderUpdate@x2+1)^0,c
 12264                           
 12265                           ;libraries/lcd_highlevel.c: 336:     y1 = slider->posY + 2;
 12266  001872  EE20 F002          	lfsr	2,2
 12267  001876  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12268  001878  26D9               	addwf	fsr2l,f,c
 12269  00187A  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12270  00187C  22DA               	addwfc	fsr2h,f,c
 12271  00187E  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12272  001882  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12273  001886  0E02               	movlw	2
 12274  001888  2429               	addwf	??_LCD_SliderUpdate^0,w,c
 12275  00188A  6E31               	movwf	LCD_SliderUpdate@y1^0,c
 12276  00188C  0E00               	movlw	0
 12277  00188E  202A               	addwfc	(??_LCD_SliderUpdate+1)^0,w,c
 12278  001890  6E32               	movwf	(LCD_SliderUpdate@y1+1)^0,c
 12279                           
 12280                           ;libraries/lcd_highlevel.c: 337:     y2 = slider->posY + slider->height - 2;
 12281  001892  EE20 F006          	lfsr	2,6
 12282  001896  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12283  001898  26D9               	addwf	fsr2l,f,c
 12284  00189A  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12285  00189C  22DA               	addwfc	fsr2h,f,c
 12286  00189E  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12287  0018A2  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12288  0018A6  EE20 F002          	lfsr	2,2
 12289  0018AA  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12290  0018AC  26D9               	addwf	fsr2l,f,c
 12291  0018AE  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12292  0018B0  22DA               	addwfc	fsr2h,f,c
 12293  0018B2  CFDE F02B          	movff	postinc2,??_LCD_SliderUpdate+2
 12294  0018B6  CFDD F02C          	movff	postdec2,??_LCD_SliderUpdate+3
 12295  0018BA  5029               	movf	??_LCD_SliderUpdate^0,w,c
 12296  0018BC  262B               	addwf	(??_LCD_SliderUpdate+2)^0,f,c
 12297  0018BE  502A               	movf	(??_LCD_SliderUpdate+1)^0,w,c
 12298  0018C0  222C               	addwfc	(??_LCD_SliderUpdate+3)^0,f,c
 12299  0018C2  0EFE               	movlw	254
 12300  0018C4  242B               	addwf	(??_LCD_SliderUpdate+2)^0,w,c
 12301  0018C6  6E33               	movwf	LCD_SliderUpdate@y2^0,c
 12302  0018C8  0EFF               	movlw	255
 12303  0018CA  202C               	addwfc	(??_LCD_SliderUpdate+3)^0,w,c
 12304  0018CC  6E34               	movwf	(LCD_SliderUpdate@y2+1)^0,c
 12305                           
 12306                           ;libraries/lcd_highlevel.c: 339:   LCD_DrawRect(x1,
 12307  0018CE  C035  F012         	movff	LCD_SliderUpdate@x1,LCD_DrawRect@posX1
 12308  0018D2  C036  F013         	movff	LCD_SliderUpdate@x1+1,LCD_DrawRect@posX1+1
 12309  0018D6  C031  F014         	movff	LCD_SliderUpdate@y1,LCD_DrawRect@posY1
 12310  0018DA  C032  F015         	movff	LCD_SliderUpdate@y1+1,LCD_DrawRect@posY1+1
 12311  0018DE  C02F  F016         	movff	LCD_SliderUpdate@x2,LCD_DrawRect@posX2
 12312  0018E2  C030  F017         	movff	LCD_SliderUpdate@x2+1,LCD_DrawRect@posX2+1
 12313  0018E6  C033  F018         	movff	LCD_SliderUpdate@y2,LCD_DrawRect@posY2
 12314  0018EA  C034  F019         	movff	LCD_SliderUpdate@y2+1,LCD_DrawRect@posY2+1
 12315  0018EE  0E01               	movlw	1
 12316  0018F0  6E1A               	movwf	LCD_DrawRect@fill^0,c
 12317  0018F2  EE20 F00A          	lfsr	2,10
 12318  0018F6  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12319  0018F8  26D9               	addwf	fsr2l,f,c
 12320  0018FA  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12321  0018FC  22DA               	addwfc	fsr2h,f,c
 12322  0018FE  CFDE F01B          	movff	postinc2,LCD_DrawRect@color
 12323  001902  CFDD F01C          	movff	postdec2,LCD_DrawRect@color+1
 12324  001906  EC34  F013         	call	_LCD_DrawRect	;wreg free
 12325                           
 12326                           ;libraries/lcd_highlevel.c: 344:   slider->oldValue = slider->value;
 12327  00190A  EE20 F011          	lfsr	2,17
 12328  00190E  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12329  001910  26D9               	addwf	fsr2l,f,c
 12330  001912  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12331  001914  22DA               	addwfc	fsr2h,f,c
 12332  001916  EE10 F013          	lfsr	1,19
 12333  00191A  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12334  00191C  26E1               	addwf	fsr1l,f,c
 12335  00191E  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12336  001920  22E2               	addwfc	fsr1h,f,c
 12337  001922  CFDE FFE6          	movff	postinc2,postinc1
 12338  001926  CFDD FFE5          	movff	postdec2,postdec1
 12339                           
 12340                           ;libraries/lcd_highlevel.c: 347:   if(slider->cursorWidth == 0)
 12341  00192A  EE20 F00E          	lfsr	2,14
 12342  00192E  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12343  001930  26D9               	addwf	fsr2l,f,c
 12344  001932  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12345  001934  22DA               	addwfc	fsr2h,f,c
 12346  001936  50DE               	movf	postinc2,w,c
 12347  001938  10DE               	iorwf	postinc2,w,c
 12348  00193A  A4D8               	btfss	status,2,c
 12349  00193C  D046               	goto	l6130
 12350                           
 12351                           ;libraries/lcd_highlevel.c: 348:   {;libraries/lcd_highlevel.c: 349:     x1 = slider->po
      +                          sX + 1;
 12352  00193E  C027  FFD9         	movff	LCD_SliderUpdate@slider,fsr2l
 12353  001942  C028  FFDA         	movff	LCD_SliderUpdate@slider+1,fsr2h
 12354  001946  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12355  00194A  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12356  00194E  0E01               	movlw	1
 12357  001950  2429               	addwf	??_LCD_SliderUpdate^0,w,c
 12358  001952  6E35               	movwf	LCD_SliderUpdate@x1^0,c
 12359  001954  0E00               	movlw	0
 12360  001956  202A               	addwfc	(??_LCD_SliderUpdate+1)^0,w,c
 12361  001958  6E36               	movwf	(LCD_SliderUpdate@x1+1)^0,c
 12362                           
 12363                           ;libraries/lcd_highlevel.c: 350:     x2 = slider->posX - 1 + ((slider->width * slider->v
      +                          alue)/ slider->steps);
 12364  00195A  C027  FFD9         	movff	LCD_SliderUpdate@slider,fsr2l
 12365  00195E  C028  FFDA         	movff	LCD_SliderUpdate@slider+1,fsr2h
 12366  001962  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12367  001966  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12368  00196A  EE20 F004          	lfsr	2,4
 12369  00196E  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12370  001970  26D9               	addwf	fsr2l,f,c
 12371  001972  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12372  001974  22DA               	addwfc	fsr2h,f,c
 12373  001976  CFDE F01A          	movff	postinc2,___wmul@multiplier
 12374  00197A  CFDD F01B          	movff	postdec2,___wmul@multiplier+1
 12375  00197E  EE20 F011          	lfsr	2,17
 12376  001982  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12377  001984  26D9               	addwf	fsr2l,f,c
 12378  001986  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12379  001988  22DA               	addwfc	fsr2h,f,c
 12380  00198A  CFDE F01C          	movff	postinc2,___wmul@multiplicand
 12381  00198E  CFDD F01D          	movff	postdec2,___wmul@multiplicand+1
 12382  001992  EC7B  F02C         	call	___wmul	;wreg free
 12383  001996  C01A  F020         	movff	?___wmul,___lwdiv@dividend
 12384  00199A  C01B  F021         	movff	?___wmul+1,___lwdiv@dividend+1
 12385  00199E  EE20 F015          	lfsr	2,21
 12386  0019A2  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12387  0019A4  26D9               	addwf	fsr2l,f,c
 12388  0019A6  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12389  0019A8  22DA               	addwfc	fsr2h,f,c
 12390  0019AA  CFDE F022          	movff	postinc2,___lwdiv@divisor
 12391  0019AE  CFDD F023          	movff	postdec2,___lwdiv@divisor+1
 12392  0019B2  EC1C  F02A         	call	___lwdiv	;wreg free
 12393  0019B6  5029               	movf	??_LCD_SliderUpdate^0,w,c
 12394  0019B8  2620               	addwf	?___lwdiv^0,f,c
 12395  0019BA  502A               	movf	(??_LCD_SliderUpdate+1)^0,w,c
 12396  0019BC  2221               	addwfc	(?___lwdiv+1)^0,f,c
 12397  0019BE  0EFF               	movlw	255
 12398  0019C0  2420               	addwf	?___lwdiv^0,w,c
 12399  0019C2  6E2F               	movwf	LCD_SliderUpdate@x2^0,c
 12400  0019C4  0EFF               	movlw	255
 12401  0019C6  2021               	addwfc	(?___lwdiv+1)^0,w,c
 12402  0019C8  D05B               	goto	L16
 12403  0019CA                     l6130:
 12404                           
 12405                           ;libraries/lcd_highlevel.c: 357:   {;libraries/lcd_highlevel.c: 358:     x1 = slider->po
      +                          sX + 1 + (((slider->width-slider->cursorWidth) * slider->value)/ slider->steps);
 12406  0019CA  C027  FFD9         	movff	LCD_SliderUpdate@slider,fsr2l
 12407  0019CE  C028  FFDA         	movff	LCD_SliderUpdate@slider+1,fsr2h
 12408  0019D2  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12409  0019D6  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12410  0019DA  EE20 F00E          	lfsr	2,14
 12411  0019DE  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12412  0019E0  26D9               	addwf	fsr2l,f,c
 12413  0019E2  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12414  0019E4  22DA               	addwfc	fsr2h,f,c
 12415  0019E6  CFDE F02B          	movff	postinc2,??_LCD_SliderUpdate+2
 12416  0019EA  CFDD F02C          	movff	postdec2,??_LCD_SliderUpdate+3
 12417  0019EE  EE20 F004          	lfsr	2,4
 12418  0019F2  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12419  0019F4  26D9               	addwf	fsr2l,f,c
 12420  0019F6  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12421  0019F8  22DA               	addwfc	fsr2h,f,c
 12422  0019FA  CFDE F02D          	movff	postinc2,??_LCD_SliderUpdate+4
 12423  0019FE  CFDD F02E          	movff	postdec2,??_LCD_SliderUpdate+5
 12424  001A02  502B               	movf	(??_LCD_SliderUpdate+2)^0,w,c
 12425  001A04  5C2D               	subwf	(??_LCD_SliderUpdate+4)^0,w,c
 12426  001A06  6E1A               	movwf	___wmul@multiplier^0,c
 12427  001A08  502C               	movf	(??_LCD_SliderUpdate+3)^0,w,c
 12428  001A0A  582E               	subwfb	(??_LCD_SliderUpdate+5)^0,w,c
 12429  001A0C  6E1B               	movwf	(___wmul@multiplier+1)^0,c
 12430  001A0E  EE20 F011          	lfsr	2,17
 12431  001A12  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12432  001A14  26D9               	addwf	fsr2l,f,c
 12433  001A16  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12434  001A18  22DA               	addwfc	fsr2h,f,c
 12435  001A1A  CFDE F01C          	movff	postinc2,___wmul@multiplicand
 12436  001A1E  CFDD F01D          	movff	postdec2,___wmul@multiplicand+1
 12437  001A22  EC7B  F02C         	call	___wmul	;wreg free
 12438  001A26  C01A  F020         	movff	?___wmul,___lwdiv@dividend
 12439  001A2A  C01B  F021         	movff	?___wmul+1,___lwdiv@dividend+1
 12440  001A2E  EE20 F015          	lfsr	2,21
 12441  001A32  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12442  001A34  26D9               	addwf	fsr2l,f,c
 12443  001A36  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12444  001A38  22DA               	addwfc	fsr2h,f,c
 12445  001A3A  CFDE F022          	movff	postinc2,___lwdiv@divisor
 12446  001A3E  CFDD F023          	movff	postdec2,___lwdiv@divisor+1
 12447  001A42  EC1C  F02A         	call	___lwdiv	;wreg free
 12448  001A46  5029               	movf	??_LCD_SliderUpdate^0,w,c
 12449  001A48  2620               	addwf	?___lwdiv^0,f,c
 12450  001A4A  502A               	movf	(??_LCD_SliderUpdate+1)^0,w,c
 12451  001A4C  2221               	addwfc	(?___lwdiv+1)^0,f,c
 12452  001A4E  0E01               	movlw	1
 12453  001A50  2420               	addwf	?___lwdiv^0,w,c
 12454  001A52  6E35               	movwf	LCD_SliderUpdate@x1^0,c
 12455  001A54  0E00               	movlw	0
 12456  001A56  2021               	addwfc	(?___lwdiv+1)^0,w,c
 12457  001A58  6E36               	movwf	(LCD_SliderUpdate@x1+1)^0,c
 12458                           
 12459                           ;libraries/lcd_highlevel.c: 359:     x2 = x1 + slider->cursorWidth-2;
 12460  001A5A  EE20 F00E          	lfsr	2,14
 12461  001A5E  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12462  001A60  26D9               	addwf	fsr2l,f,c
 12463  001A62  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12464  001A64  22DA               	addwfc	fsr2h,f,c
 12465  001A66  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12466  001A6A  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12467  001A6E  5035               	movf	LCD_SliderUpdate@x1^0,w,c
 12468  001A70  2629               	addwf	??_LCD_SliderUpdate^0,f,c
 12469  001A72  5036               	movf	(LCD_SliderUpdate@x1+1)^0,w,c
 12470  001A74  222A               	addwfc	(??_LCD_SliderUpdate+1)^0,f,c
 12471  001A76  0EFE               	movlw	254
 12472  001A78  2429               	addwf	??_LCD_SliderUpdate^0,w,c
 12473  001A7A  6E2F               	movwf	LCD_SliderUpdate@x2^0,c
 12474  001A7C  0EFF               	movlw	255
 12475  001A7E  202A               	addwfc	(??_LCD_SliderUpdate+1)^0,w,c
 12476  001A80                     L16:
 12477  001A80  6E30               	movwf	(LCD_SliderUpdate@x2+1)^0,c
 12478                           
 12479                           ;libraries/lcd_highlevel.c: 360:     y1 = slider->posY + 2;
 12480  001A82  EE20 F002          	lfsr	2,2
 12481  001A86  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12482  001A88  26D9               	addwf	fsr2l,f,c
 12483  001A8A  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12484  001A8C  22DA               	addwfc	fsr2h,f,c
 12485  001A8E  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12486  001A92  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12487  001A96  0E02               	movlw	2
 12488  001A98  2429               	addwf	??_LCD_SliderUpdate^0,w,c
 12489  001A9A  6E31               	movwf	LCD_SliderUpdate@y1^0,c
 12490  001A9C  0E00               	movlw	0
 12491  001A9E  202A               	addwfc	(??_LCD_SliderUpdate+1)^0,w,c
 12492  001AA0  6E32               	movwf	(LCD_SliderUpdate@y1+1)^0,c
 12493                           
 12494                           ;libraries/lcd_highlevel.c: 361:     y2 = slider->posY + slider->height - 2;
 12495  001AA2  EE20 F006          	lfsr	2,6
 12496  001AA6  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12497  001AA8  26D9               	addwf	fsr2l,f,c
 12498  001AAA  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12499  001AAC  22DA               	addwfc	fsr2h,f,c
 12500  001AAE  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12501  001AB2  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12502  001AB6  EE20 F002          	lfsr	2,2
 12503  001ABA  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12504  001ABC  26D9               	addwf	fsr2l,f,c
 12505  001ABE  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12506  001AC0  22DA               	addwfc	fsr2h,f,c
 12507  001AC2  CFDE F02B          	movff	postinc2,??_LCD_SliderUpdate+2
 12508  001AC6  CFDD F02C          	movff	postdec2,??_LCD_SliderUpdate+3
 12509  001ACA  5029               	movf	??_LCD_SliderUpdate^0,w,c
 12510  001ACC  262B               	addwf	(??_LCD_SliderUpdate+2)^0,f,c
 12511  001ACE  502A               	movf	(??_LCD_SliderUpdate+1)^0,w,c
 12512  001AD0  222C               	addwfc	(??_LCD_SliderUpdate+3)^0,f,c
 12513  001AD2  0EFE               	movlw	254
 12514  001AD4  242B               	addwf	(??_LCD_SliderUpdate+2)^0,w,c
 12515  001AD6  6E33               	movwf	LCD_SliderUpdate@y2^0,c
 12516  001AD8  0EFF               	movlw	255
 12517  001ADA  202C               	addwfc	(??_LCD_SliderUpdate+3)^0,w,c
 12518  001ADC  6E34               	movwf	(LCD_SliderUpdate@y2+1)^0,c
 12519                           
 12520                           ;libraries/lcd_highlevel.c: 363:   LCD_DrawRect(x1, y1, x2, y2, 1, slider->sldColor);
 12521  001ADE  C035  F012         	movff	LCD_SliderUpdate@x1,LCD_DrawRect@posX1
 12522  001AE2  C036  F013         	movff	LCD_SliderUpdate@x1+1,LCD_DrawRect@posX1+1
 12523  001AE6  C031  F014         	movff	LCD_SliderUpdate@y1,LCD_DrawRect@posY1
 12524  001AEA  C032  F015         	movff	LCD_SliderUpdate@y1+1,LCD_DrawRect@posY1+1
 12525  001AEE  C02F  F016         	movff	LCD_SliderUpdate@x2,LCD_DrawRect@posX2
 12526  001AF2  C030  F017         	movff	LCD_SliderUpdate@x2+1,LCD_DrawRect@posX2+1
 12527  001AF6  C033  F018         	movff	LCD_SliderUpdate@y2,LCD_DrawRect@posY2
 12528  001AFA  C034  F019         	movff	LCD_SliderUpdate@y2+1,LCD_DrawRect@posY2+1
 12529  001AFE  0E01               	movlw	1
 12530  001B00  6E1A               	movwf	LCD_DrawRect@fill^0,c
 12531  001B02  EE20 F008          	lfsr	2,8
 12532  001B06  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12533  001B08  26D9               	addwf	fsr2l,f,c
 12534  001B0A  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12535  001B0C  22DA               	addwfc	fsr2h,f,c
 12536  001B0E  CFDE F01B          	movff	postinc2,LCD_DrawRect@color
 12537  001B12  CFDD F01C          	movff	postdec2,LCD_DrawRect@color+1
 12538  001B16  EC34  F013         	call	_LCD_DrawRect	;wreg free
 12539  001B1A  0012               	return		;funcret
 12540  001B1C                     __end_of_LCD_SliderUpdate:
 12541                           	callstack 0
 12542                           
 12543 ;; *************** function _Menu_endGame *****************
 12544 ;; Defined at:
 12545 ;;		line 51 in file "class/menu.c"
 12546 ;; Parameters:    Size  Location     Type
 12547 ;;  g               2   67[COMRAM] PTR struct GameParameter
 12548 ;;		 -> g1(240), 
 12549 ;; Auto vars:     Size  Location     Type
 12550 ;;		None
 12551 ;; Return value:  Size  Location     Type
 12552 ;;                  1    wreg      void 
 12553 ;; Registers used:
 12554 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12555 ;; Tracked objects:
 12556 ;;		On entry : 0/0
 12557 ;;		On exit  : 0/0
 12558 ;;		Unchanged: 0/0
 12559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12560 ;;      Params:         2       0       0       0       0       0       0
 12561 ;;      Locals:         0       0       0       0       0       0       0
 12562 ;;      Temps:          0       2       0       0       0       0       0
 12563 ;;      Totals:         2       2       0       0       0       0       0
 12564 ;;Total ram usage:        4 bytes
 12565 ;; Hardware stack levels used: 1
 12566 ;; Hardware stack levels required when called: 7
 12567 ;; This function calls:
 12568 ;;		_LCD_ButtonDraw
 12569 ;;		_LCD_DrawText
 12570 ;;		_LCD_Fill
 12571 ;; This function is called by:
 12572 ;;		_displayController
 12573 ;; This function uses a non-reentrant model
 12574 ;;
 12575                           
 12576                           	psect	text52
 12577  00488C                     __ptext52:
 12578                           	callstack 0
 12579  00488C                     _Menu_endGame:
 12580                           	callstack 19
 12581                           
 12582                           ;class/menu.c: 51: void Menu_endGame(GameParameters* g);class/menu.c: 52: {;class/menu.c
      +                          : 53:     LCD_Fill(0b0000000000000000);
 12583                           
 12584                           ;incstack = 0
 12585  00488C  0E00               	movlw	0
 12586  00488E  6E13               	movwf	(LCD_Fill@color+1)^0,c
 12587  004890  0E00               	movlw	0
 12588  004892  6E12               	movwf	LCD_Fill@color^0,c
 12589  004894  EC9E  F024         	call	_LCD_Fill	;wreg free
 12590                           
 12591                           ;class/menu.c: 54:     LCD_ButtonDraw(&(g->btnNewGame));
 12592  004898  0E68               	movlw	104
 12593  00489A  2444               	addwf	Menu_endGame@g^0,w,c
 12594  00489C  6E42               	movwf	LCD_ButtonDraw@button^0,c
 12595  00489E  0E00               	movlw	0
 12596  0048A0  2045               	addwfc	(Menu_endGame@g+1)^0,w,c
 12597  0048A2  6E43               	movwf	(LCD_ButtonDraw@button+1)^0,c
 12598  0048A4  EC26  F007         	call	_LCD_ButtonDraw	;wreg free
 12599                           
 12600                           ;class/menu.c: 55:     LCD_ButtonDraw(&(g->btnTurnOff));
 12601  0048A8  0E80               	movlw	128
 12602  0048AA  2444               	addwf	Menu_endGame@g^0,w,c
 12603  0048AC  6E42               	movwf	LCD_ButtonDraw@button^0,c
 12604  0048AE  0E00               	movlw	0
 12605  0048B0  2045               	addwfc	(Menu_endGame@g+1)^0,w,c
 12606  0048B2  6E43               	movwf	(LCD_ButtonDraw@button+1)^0,c
 12607  0048B4  EC26  F007         	call	_LCD_ButtonDraw	;wreg free
 12608                           
 12609                           ;class/menu.c: 57:     if(g->s1.homeScore==0)
 12610  0048B8  EE20 F0EA          	lfsr	2,234
 12611  0048BC  5044               	movf	Menu_endGame@g^0,w,c
 12612  0048BE  26D9               	addwf	fsr2l,f,c
 12613  0048C0  5045               	movf	(Menu_endGame@g+1)^0,w,c
 12614  0048C2  22DA               	addwfc	fsr2h,f,c
 12615  0048C4  50DE               	movf	postinc2,w,c
 12616  0048C6  10DE               	iorwf	postinc2,w,c
 12617  0048C8  A4D8               	btfss	status,2,c
 12618  0048CA  D01C               	goto	l8668
 12619                           
 12620                           ;class/menu.c: 58:     {;class/menu.c: 59:         LCD_DrawText("PLAYER 2 WIN",&arialNar
      +                          row_12ptFontInfo,A_CENTER,100,50,0b1111111111111111,0b0000000000000000);
 12621  0048CC  0E8F               	movlw	low STR_14
 12622  0048CE  6E20               	movwf	LCD_DrawText@msg^0,c
 12623  0048D0  0E7F               	movlw	high STR_14
 12624  0048D2  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
 12625  0048D4  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 12626  0048D6  6E22               	movwf	LCD_DrawText@font^0,c
 12627  0048D8  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 12628  0048DA  6E23               	movwf	(LCD_DrawText@font+1)^0,c
 12629  0048DC  0E02               	movlw	2
 12630  0048DE  6E24               	movwf	LCD_DrawText@align^0,c
 12631  0048E0  0E00               	movlw	0
 12632  0048E2  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 12633  0048E4  0E64               	movlw	100
 12634  0048E6  6E25               	movwf	LCD_DrawText@posX^0,c
 12635  0048E8  0E00               	movlw	0
 12636  0048EA  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
 12637  0048EC  0E32               	movlw	50
 12638  0048EE  6E27               	movwf	LCD_DrawText@posY^0,c
 12639  0048F0  0EFF               	movlw	255
 12640  0048F2  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
 12641  0048F4  6829               	setf	LCD_DrawText@color^0,c
 12642  0048F6  0E00               	movlw	0
 12643  0048F8  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
 12644  0048FA  0E00               	movlw	0
 12645  0048FC  6E2B               	movwf	LCD_DrawText@bg_color^0,c
 12646  0048FE  EC85  F00F         	call	_LCD_DrawText	;wreg free
 12647                           
 12648                           ;class/menu.c: 60:     }
 12649  004902  0012               	return	
 12650  004904                     l8668:
 12651                           
 12652                           ;class/menu.c: 62:     {;class/menu.c: 63:         LCD_DrawText("PLAYER 1 WIN",&arialNar
      +                          row_12ptFontInfo,A_CENTER,100,50,0b1111111111111111,0b0000000000000000);
 12653  004904  0E82               	movlw	low STR_15
 12654  004906  6E20               	movwf	LCD_DrawText@msg^0,c
 12655  004908  0E7F               	movlw	high STR_15
 12656  00490A  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
 12657  00490C  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 12658  00490E  6E22               	movwf	LCD_DrawText@font^0,c
 12659  004910  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 12660  004912  6E23               	movwf	(LCD_DrawText@font+1)^0,c
 12661  004914  0E02               	movlw	2
 12662  004916  6E24               	movwf	LCD_DrawText@align^0,c
 12663  004918  0E00               	movlw	0
 12664  00491A  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 12665  00491C  0E64               	movlw	100
 12666  00491E  6E25               	movwf	LCD_DrawText@posX^0,c
 12667  004920  0E00               	movlw	0
 12668  004922  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
 12669  004924  0E32               	movlw	50
 12670  004926  6E27               	movwf	LCD_DrawText@posY^0,c
 12671  004928  0EFF               	movlw	255
 12672  00492A  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
 12673  00492C  6829               	setf	LCD_DrawText@color^0,c
 12674  00492E  0E00               	movlw	0
 12675  004930  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
 12676  004932  0E00               	movlw	0
 12677  004934  6E2B               	movwf	LCD_DrawText@bg_color^0,c
 12678  004936  EC85  F00F         	call	_LCD_DrawText	;wreg free
 12679  00493A  0012               	return		;funcret
 12680  00493C                     __end_of_Menu_endGame:
 12681                           	callstack 0
 12682                           
 12683 ;; *************** function _Menu_inGameDraw *****************
 12684 ;; Defined at:
 12685 ;;		line 37 in file "class/menu.c"
 12686 ;; Parameters:    Size  Location     Type
 12687 ;;  g               2   58[BANK0 ] PTR struct GameParameter
 12688 ;;		 -> g1(240), 
 12689 ;; Auto vars:     Size  Location     Type
 12690 ;;		None
 12691 ;; Return value:  Size  Location     Type
 12692 ;;                  1    wreg      void 
 12693 ;; Registers used:
 12694 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12695 ;; Tracked objects:
 12696 ;;		On entry : 3F/0
 12697 ;;		On exit  : 0/0
 12698 ;;		Unchanged: 0/0
 12699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12700 ;;      Params:         0       2       0       0       0       0       0
 12701 ;;      Locals:         0       0       0       0       0       0       0
 12702 ;;      Temps:          0       0       0       0       0       0       0
 12703 ;;      Totals:         0       2       0       0       0       0       0
 12704 ;;Total ram usage:        2 bytes
 12705 ;; Hardware stack levels used: 1
 12706 ;; Hardware stack levels required when called: 13
 12707 ;; This function calls:
 12708 ;;		_Ball_draw
 12709 ;;		_LCD_ButtonDraw
 12710 ;;		_LCD_DrawRect
 12711 ;;		_LCD_Fill
 12712 ;;		_Paddle_draw
 12713 ;;		_Score_draw
 12714 ;; This function is called by:
 12715 ;;		_displaySM
 12716 ;; This function uses a non-reentrant model
 12717 ;;
 12718                           
 12719                           	psect	text53
 12720  004D30                     __ptext53:
 12721                           	callstack 0
 12722  004D30                     _Menu_inGameDraw:
 12723                           	callstack 15
 12724                           
 12725                           ; BSR set to: 0
 12726                           ;class/menu.c: 37: void Menu_inGameDraw(GameParameters* g);class/menu.c: 38: {;class/men
      +                          u.c: 39:     LCD_Fill(0b0000000000000000);
 12727                           
 12728                           ;incstack = 0
 12729  004D30  0E00               	movlw	0
 12730  004D32  6E13               	movwf	(LCD_Fill@color+1)^0,c
 12731  004D34  0E00               	movlw	0
 12732  004D36  6E12               	movwf	LCD_Fill@color^0,c
 12733  004D38  EC9E  F024         	call	_LCD_Fill	;wreg free
 12734                           
 12735                           ;class/menu.c: 40:     LCD_ButtonDraw(&(g->btnLeave));
 12736  004D3C  0E50               	movlw	80
 12737  004D3E  0100               	movlb	0	; () banked
 12738  004D40  25E4               	addwf	Menu_inGameDraw@g& (0+255),w,b
 12739  004D42  6E42               	movwf	LCD_ButtonDraw@button^0,c
 12740  004D44  0E00               	movlw	0
 12741  004D46  21E5               	addwfc	(Menu_inGameDraw@g+1)& (0+255),w,b
 12742  004D48  6E43               	movwf	(LCD_ButtonDraw@button+1)^0,c
 12743  004D4A  EC26  F007         	call	_LCD_ButtonDraw	;wreg free
 12744                           
 12745                           ;class/menu.c: 41:     LCD_DrawRect(0,160,239,160,1,0b1111111111111111);
 12746  004D4E  0E00               	movlw	0
 12747  004D50  6E13               	movwf	(LCD_DrawRect@posX1+1)^0,c
 12748  004D52  0E00               	movlw	0
 12749  004D54  6E12               	movwf	LCD_DrawRect@posX1^0,c
 12750  004D56  0E00               	movlw	0
 12751  004D58  6E15               	movwf	(LCD_DrawRect@posY1+1)^0,c
 12752  004D5A  0EA0               	movlw	160
 12753  004D5C  6E14               	movwf	LCD_DrawRect@posY1^0,c
 12754  004D5E  0E00               	movlw	0
 12755  004D60  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 12756  004D62  0EEF               	movlw	239
 12757  004D64  6E16               	movwf	LCD_DrawRect@posX2^0,c
 12758  004D66  0E00               	movlw	0
 12759  004D68  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 12760  004D6A  0EA0               	movlw	160
 12761  004D6C  6E18               	movwf	LCD_DrawRect@posY2^0,c
 12762  004D6E  0E01               	movlw	1
 12763  004D70  6E1A               	movwf	LCD_DrawRect@fill^0,c
 12764  004D72  0EFF               	movlw	255
 12765  004D74  6E1C               	movwf	(LCD_DrawRect@color+1)^0,c
 12766  004D76  681B               	setf	LCD_DrawRect@color^0,c
 12767  004D78  EC34  F013         	call	_LCD_DrawRect	;wreg free
 12768                           
 12769                           ;class/menu.c: 42:     Score_draw(&g->s1);
 12770  004D7C  0EEA               	movlw	234
 12771  004D7E  0100               	movlb	0	; () banked
 12772  004D80  25E4               	addwf	Menu_inGameDraw@g& (0+255),w,b
 12773  004D82  6FD5               	movwf	Score_draw@s& (0+255),b
 12774  004D84  0E00               	movlw	0
 12775  004D86  21E5               	addwfc	(Menu_inGameDraw@g+1)& (0+255),w,b
 12776  004D88  6FD6               	movwf	(Score_draw@s+1)& (0+255),b
 12777  004D8A  EC03  F022         	call	_Score_draw	;wreg free
 12778                           
 12779                           ;class/menu.c: 43:     Paddle_draw(&g->p1);
 12780  004D8E  0ED6               	movlw	214
 12781  004D90  0100               	movlb	0	; () banked
 12782  004D92  25E4               	addwf	Menu_inGameDraw@g& (0+255),w,b
 12783  004D94  6E25               	movwf	Paddle_draw@p^0,c
 12784  004D96  0E00               	movlw	0
 12785  004D98  21E5               	addwfc	(Menu_inGameDraw@g+1)& (0+255),w,b
 12786  004D9A  6E26               	movwf	(Paddle_draw@p+1)^0,c
 12787  004D9C  EC6B  F01D         	call	_Paddle_draw	;wreg free
 12788                           
 12789                           ;class/menu.c: 44:     Paddle_draw(&g->p2);
 12790  004DA0  0EE0               	movlw	224
 12791  004DA2  0100               	movlb	0	; () banked
 12792  004DA4  25E4               	addwf	Menu_inGameDraw@g& (0+255),w,b
 12793  004DA6  6E25               	movwf	Paddle_draw@p^0,c
 12794  004DA8  0E00               	movlw	0
 12795  004DAA  21E5               	addwfc	(Menu_inGameDraw@g+1)& (0+255),w,b
 12796  004DAC  6E26               	movwf	(Paddle_draw@p+1)^0,c
 12797  004DAE  EC6B  F01D         	call	_Paddle_draw	;wreg free
 12798                           
 12799                           ;class/menu.c: 45:     Ball_draw(&g->b);
 12800  004DB2  0ECA               	movlw	202
 12801  004DB4  0100               	movlb	0	; () banked
 12802  004DB6  25E4               	addwf	Menu_inGameDraw@g& (0+255),w,b
 12803  004DB8  6E25               	movwf	Ball_draw@b^0,c
 12804  004DBA  0E00               	movlw	0
 12805  004DBC  21E5               	addwfc	(Menu_inGameDraw@g+1)& (0+255),w,b
 12806  004DBE  6E26               	movwf	(Ball_draw@b+1)^0,c
 12807  004DC0  EC35  F01A         	call	_Ball_draw	;wreg free
 12808  004DC4  0012               	return		;funcret
 12809  004DC6                     __end_of_Menu_inGameDraw:
 12810                           	callstack 0
 12811                           
 12812 ;; *************** function _Score_draw *****************
 12813 ;; Defined at:
 12814 ;;		line 32 in file "class/score.c"
 12815 ;; Parameters:    Size  Location     Type
 12816 ;;  s               2   43[BANK0 ] PTR struct Score
 12817 ;;		 -> g1(240), 
 12818 ;; Auto vars:     Size  Location     Type
 12819 ;;		None
 12820 ;; Return value:  Size  Location     Type
 12821 ;;                  1    wreg      void 
 12822 ;; Registers used:
 12823 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12824 ;; Tracked objects:
 12825 ;;		On entry : 3F/0
 12826 ;;		On exit  : 0/0
 12827 ;;		Unchanged: 0/0
 12828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12829 ;;      Params:         0       2       0       0       0       0       0
 12830 ;;      Locals:         0       0       0       0       0       0       0
 12831 ;;      Temps:          0       0       0       0       0       0       0
 12832 ;;      Totals:         0       2       0       0       0       0       0
 12833 ;;Total ram usage:        2 bytes
 12834 ;; Hardware stack levels used: 1
 12835 ;; Hardware stack levels required when called: 12
 12836 ;; This function calls:
 12837 ;;		_LCD_DrawText
 12838 ;;		_sprintf
 12839 ;; This function is called by:
 12840 ;;		_Menu_inGameDraw
 12841 ;;		_displayController
 12842 ;; This function uses a non-reentrant model
 12843 ;;
 12844                           
 12845                           	psect	text54
 12846  004406                     __ptext54:
 12847                           	callstack 0
 12848  004406                     _Score_draw:
 12849                           	callstack 14
 12850                           
 12851                           ; BSR set to: 0
 12852                           ;class/score.c: 32: void Score_draw(struct Score* s);class/score.c: 33: {;class/score.c:
      +                           34:     sprintf(s->str,"%d",s->homeScore);
 12853                           
 12854                           ;incstack = 0
 12855  004406  0E04               	movlw	4
 12856  004408  25D5               	addwf	Score_draw@s& (0+255),w,b
 12857  00440A  6FC8               	movwf	sprintf@s& (0+255),b
 12858  00440C  0E00               	movlw	0
 12859  00440E  21D6               	addwfc	(Score_draw@s+1)& (0+255),w,b
 12860  004410  6FC9               	movwf	(sprintf@s+1)& (0+255),b
 12861  004412  0EF9               	movlw	low STR_2
 12862  004414  6FCA               	movwf	sprintf@fmt& (0+255),b
 12863  004416  0E7F               	movlw	high STR_2
 12864  004418  6FCB               	movwf	(sprintf@fmt+1)& (0+255),b
 12865  00441A  C0D5  FFD9         	movff	Score_draw@s,fsr2l
 12866  00441E  C0D6  FFDA         	movff	Score_draw@s+1,fsr2h
 12867  004422  CFDE F0CC          	movff	postinc2,?_sprintf+4
 12868  004426  CFDD F0CD          	movff	postdec2,?_sprintf+5
 12869  00442A  ECDD  F02A         	call	_sprintf	;wreg free
 12870                           
 12871                           ; BSR set to: 0
 12872                           ;class/score.c: 35:     LCD_DrawText(s->str,&arialNarrow_12ptFontInfo,A_LEFT,20,170,0b11
      +                          11111111111111,0b0000000000000000);
 12873  00442E  0E04               	movlw	4
 12874  004430  25D5               	addwf	Score_draw@s& (0+255),w,b
 12875  004432  6E20               	movwf	LCD_DrawText@msg^0,c
 12876  004434  0E00               	movlw	0
 12877  004436  21D6               	addwfc	(Score_draw@s+1)& (0+255),w,b
 12878  004438  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
 12879  00443A  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 12880  00443C  6E22               	movwf	LCD_DrawText@font^0,c
 12881  00443E  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 12882  004440  6E23               	movwf	(LCD_DrawText@font+1)^0,c
 12883  004442  0E00               	movlw	0
 12884  004444  6E24               	movwf	LCD_DrawText@align^0,c
 12885  004446  0E00               	movlw	0
 12886  004448  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 12887  00444A  0E14               	movlw	20
 12888  00444C  6E25               	movwf	LCD_DrawText@posX^0,c
 12889  00444E  0E00               	movlw	0
 12890  004450  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
 12891  004452  0EAA               	movlw	170
 12892  004454  6E27               	movwf	LCD_DrawText@posY^0,c
 12893  004456  0EFF               	movlw	255
 12894  004458  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
 12895  00445A  6829               	setf	LCD_DrawText@color^0,c
 12896  00445C  0E00               	movlw	0
 12897  00445E  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
 12898  004460  0E00               	movlw	0
 12899  004462  6E2B               	movwf	LCD_DrawText@bg_color^0,c
 12900  004464  EC85  F00F         	call	_LCD_DrawText	;wreg free
 12901                           
 12902                           ;class/score.c: 36:     sprintf(s->str,"%d",s->awayScore);
 12903  004468  0E04               	movlw	4
 12904  00446A  0100               	movlb	0	; () banked
 12905  00446C  25D5               	addwf	Score_draw@s& (0+255),w,b
 12906  00446E  6FC8               	movwf	sprintf@s& (0+255),b
 12907  004470  0E00               	movlw	0
 12908  004472  21D6               	addwfc	(Score_draw@s+1)& (0+255),w,b
 12909  004474  6FC9               	movwf	(sprintf@s+1)& (0+255),b
 12910  004476  0EF9               	movlw	low STR_2
 12911  004478  6FCA               	movwf	sprintf@fmt& (0+255),b
 12912  00447A  0E7F               	movlw	high STR_2
 12913  00447C  6FCB               	movwf	(sprintf@fmt+1)& (0+255),b
 12914  00447E  EE20 F002          	lfsr	2,2
 12915  004482  51D5               	movf	Score_draw@s& (0+255),w,b
 12916  004484  26D9               	addwf	fsr2l,f,c
 12917  004486  51D6               	movf	(Score_draw@s+1)& (0+255),w,b
 12918  004488  22DA               	addwfc	fsr2h,f,c
 12919  00448A  CFDE F0CC          	movff	postinc2,?_sprintf+4
 12920  00448E  CFDD F0CD          	movff	postdec2,?_sprintf+5
 12921  004492  ECDD  F02A         	call	_sprintf	;wreg free
 12922                           
 12923                           ;class/score.c: 37:     LCD_DrawText(s->str,&arialNarrow_12ptFontInfo,A_LEFT,20,138,0b11
      +                          11111111111111,0b0000000000000000);
 12924  004496  0E04               	movlw	4
 12925  004498  25D5               	addwf	Score_draw@s& (0+255),w,b
 12926  00449A  6E20               	movwf	LCD_DrawText@msg^0,c
 12927  00449C  0E00               	movlw	0
 12928  00449E  21D6               	addwfc	(Score_draw@s+1)& (0+255),w,b
 12929  0044A0  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
 12930  0044A2  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 12931  0044A4  6E22               	movwf	LCD_DrawText@font^0,c
 12932  0044A6  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 12933  0044A8  6E23               	movwf	(LCD_DrawText@font+1)^0,c
 12934  0044AA  0E00               	movlw	0
 12935  0044AC  6E24               	movwf	LCD_DrawText@align^0,c
 12936  0044AE  0E00               	movlw	0
 12937  0044B0  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 12938  0044B2  0E14               	movlw	20
 12939  0044B4  6E25               	movwf	LCD_DrawText@posX^0,c
 12940  0044B6  0E00               	movlw	0
 12941  0044B8  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
 12942  0044BA  0E8A               	movlw	138
 12943  0044BC  6E27               	movwf	LCD_DrawText@posY^0,c
 12944  0044BE  0EFF               	movlw	255
 12945  0044C0  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
 12946  0044C2  6829               	setf	LCD_DrawText@color^0,c
 12947  0044C4  0E00               	movlw	0
 12948  0044C6  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
 12949  0044C8  0E00               	movlw	0
 12950  0044CA  6E2B               	movwf	LCD_DrawText@bg_color^0,c
 12951  0044CC  EC85  F00F         	call	_LCD_DrawText	;wreg free
 12952  0044D0  0012               	return		;funcret
 12953  0044D2                     __end_of_Score_draw:
 12954                           	callstack 0
 12955                           
 12956 ;; *************** function _sprintf *****************
 12957 ;; Defined at:
 12958 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_sprintf.c"
 12959 ;; Parameters:    Size  Location     Type
 12960 ;;  s               2   30[BANK0 ] PTR unsigned char 
 12961 ;;		 -> g1(240), 
 12962 ;;  fmt             2   32[BANK0 ] PTR const unsigned char 
 12963 ;;		 -> STR_3(3), STR_2(3), 
 12964 ;; Auto vars:     Size  Location     Type
 12965 ;;  f               6   37[BANK0 ] struct _IO_FILE
 12966 ;;  ret             2    0        int 
 12967 ;;  ap              1   36[BANK0 ] PTR void [1]
 12968 ;;		 -> ?_sprintf(2), 
 12969 ;; Return value:  Size  Location     Type
 12970 ;;                  2   30[BANK0 ] int 
 12971 ;; Registers used:
 12972 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12973 ;; Tracked objects:
 12974 ;;		On entry : 3F/0
 12975 ;;		On exit  : 3F/0
 12976 ;;		Unchanged: 0/0
 12977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12978 ;;      Params:         0       6       0       0       0       0       0
 12979 ;;      Locals:         0       7       0       0       0       0       0
 12980 ;;      Temps:          0       0       0       0       0       0       0
 12981 ;;      Totals:         0      13       0       0       0       0       0
 12982 ;;Total ram usage:       13 bytes
 12983 ;; Hardware stack levels used: 1
 12984 ;; Hardware stack levels required when called: 11
 12985 ;; This function calls:
 12986 ;;		_vfprintf
 12987 ;; This function is called by:
 12988 ;;		_Score_draw
 12989 ;; This function uses a non-reentrant model
 12990 ;;
 12991                           
 12992                           	psect	text55
 12993  0055BA                     __ptext55:
 12994                           	callstack 0
 12995  0055BA                     _sprintf:
 12996                           	callstack 14
 12997                           
 12998                           ; BSR set to: 0
 12999                           
 13000                           ;incstack = 0
 13001  0055BA  0ECC               	movlw	low (?_sprintf+4)
 13002  0055BC  6FCE               	movwf	sprintf@ap& (0+255),b
 13003  0055BE  C0C8  F0CF         	movff	sprintf@s,sprintf@f
 13004  0055C2  C0C9  F0D0         	movff	sprintf@s+1,sprintf@f+1
 13005                           
 13006                           ; BSR set to: 0
 13007  0055C6  0E00               	movlw	0
 13008  0055C8  6FD2               	movwf	(sprintf@f+3)& (0+255),b
 13009  0055CA  0E00               	movlw	0
 13010  0055CC  6FD1               	movwf	(sprintf@f+2)& (0+255),b
 13011                           
 13012                           ; BSR set to: 0
 13013  0055CE  0E00               	movlw	0
 13014  0055D0  6FD4               	movwf	(sprintf@f+5)& (0+255),b
 13015  0055D2  0E00               	movlw	0
 13016  0055D4  6FD3               	movwf	(sprintf@f+4)& (0+255),b
 13017                           
 13018                           ; BSR set to: 0
 13019  0055D6  0ECF               	movlw	low sprintf@f
 13020  0055D8  6FC4               	movwf	vfprintf@fp& (0+255),b
 13021  0055DA  C0CA  F0C5         	movff	sprintf@fmt,vfprintf@fmt
 13022  0055DE  C0CB  F0C6         	movff	sprintf@fmt+1,vfprintf@fmt+1
 13023  0055E2  0ECE               	movlw	low sprintf@ap
 13024  0055E4  6FC7               	movwf	vfprintf@ap& (0+255),b
 13025  0055E6  ECB9  F02A         	call	_vfprintf	;wreg free
 13026                           
 13027                           ; BSR set to: 0
 13028  0055EA  51D1               	movf	(sprintf@f+2)& (0+255),w,b
 13029  0055EC  25C8               	addwf	sprintf@s& (0+255),w,b
 13030  0055EE  6ED9               	movwf	fsr2l,c
 13031  0055F0  51D2               	movf	(sprintf@f+3)& (0+255),w,b
 13032  0055F2  21C9               	addwfc	(sprintf@s+1)& (0+255),w,b
 13033  0055F4  6EDA               	movwf	fsr2h,c
 13034  0055F6  0E00               	movlw	0
 13035  0055F8  6EDF               	movwf	indf2,c
 13036                           
 13037                           ; BSR set to: 0
 13038  0055FA  0012               	return		;funcret
 13039  0055FC                     __end_of_sprintf:
 13040                           	callstack 0
 13041                           
 13042 ;; *************** function _vfprintf *****************
 13043 ;; Defined at:
 13044 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
 13045 ;; Parameters:    Size  Location     Type
 13046 ;;  fp              1   26[BANK0 ] PTR struct _IO_FILE
 13047 ;;		 -> sprintf@f(6), 
 13048 ;;  fmt             2   27[BANK0 ] PTR const unsigned char 
 13049 ;;		 -> STR_3(3), STR_2(3), 
 13050 ;;  ap              1   29[BANK0 ] PTR PTR void 
 13051 ;;		 -> sprintf@ap(1), 
 13052 ;; Auto vars:     Size  Location     Type
 13053 ;;  cfmt            2   63[COMRAM] PTR unsigned char 
 13054 ;;		 -> STR_3(3), STR_2(3), 
 13055 ;; Return value:  Size  Location     Type
 13056 ;;                  2   26[BANK0 ] int 
 13057 ;; Registers used:
 13058 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13059 ;; Tracked objects:
 13060 ;;		On entry : 3F/0
 13061 ;;		On exit  : 3F/0
 13062 ;;		Unchanged: 0/0
 13063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13064 ;;      Params:         0       4       0       0       0       0       0
 13065 ;;      Locals:         2       0       0       0       0       0       0
 13066 ;;      Temps:          0       0       0       0       0       0       0
 13067 ;;      Totals:         2       4       0       0       0       0       0
 13068 ;;Total ram usage:        6 bytes
 13069 ;; Hardware stack levels used: 1
 13070 ;; Hardware stack levels required when called: 10
 13071 ;; This function calls:
 13072 ;;		_vfpfcnvrt
 13073 ;; This function is called by:
 13074 ;;		_sprintf
 13075 ;; This function uses a non-reentrant model
 13076 ;;
 13077                           
 13078                           	psect	text56
 13079  005572                     __ptext56:
 13080                           	callstack 0
 13081  005572                     _vfprintf:
 13082                           	callstack 14
 13083                           
 13084                           ; BSR set to: 0
 13085                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
 13086                           
 13087                           ; BSR set to: 0
 13088                           ;incstack = 0
 13089  005572  C0C5  F040         	movff	vfprintf@fmt,vfprintf@cfmt
 13090  005576  C0C6  F041         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
 13091                           
 13092                           ; BSR set to: 0
 13093                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
 13094  00557A  0E00               	movlw	0
 13095  00557C  6F87               	movwf	(_nout+1)& (0+255),b
 13096  00557E  0E00               	movlw	0
 13097  005580  6F86               	movwf	_nout& (0+255),b
 13098                           
 13099                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
 13100  005582  D00D               	goto	l8564
 13101  005584                     l8562:
 13102                           
 13103                           ; BSR set to: 0
 13104                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
 13105  005584  C0C4  F03D         	movff	vfprintf@fp,vfpfcnvrt@fp
 13106  005588  0E40               	movlw	low vfprintf@cfmt
 13107  00558A  6E3E               	movwf	vfpfcnvrt@fmt^0,c
 13108  00558C  C0C7  F03F         	movff	vfprintf@ap,vfpfcnvrt@ap
 13109  005590  ECE0  F01A         	call	_vfpfcnvrt	;wreg free
 13110  005594  503D               	movf	?_vfpfcnvrt^0,w,c
 13111  005596  0100               	movlb	0	; () banked
 13112  005598  2786               	addwf	_nout& (0+255),f,b
 13113  00559A  503E               	movf	(?_vfpfcnvrt+1)^0,w,c
 13114  00559C  2387               	addwfc	(_nout+1)& (0+255),f,b
 13115  00559E                     l8564:
 13116                           
 13117                           ; BSR set to: 0
 13118                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
 13119  00559E  C040  FFF6         	movff	vfprintf@cfmt,tblptrl
 13120  0055A2  C041  FFF7         	movff	vfprintf@cfmt+1,tblptrh
 13121  0055A6                     	if	0	;tblptru may be non-zero
 13122  0055A6                     	endif
 13123  0055A6                     	if	0	;tblptru may be non-zero
 13124  0055A6                     	endif
 13125  0055A6  0008               	tblrd		*
 13126  0055A8  50F5               	movf	tablat,w,c
 13127  0055AA  0900               	iorlw	0
 13128  0055AC  A4D8               	btfss	status,2,c
 13129  0055AE  D7EA               	goto	l8562
 13130                           
 13131                           ; BSR set to: 0
 13132                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
 13133  0055B0  C086  F0C4         	movff	_nout,?_vfprintf
 13134  0055B4  C087  F0C5         	movff	_nout+1,?_vfprintf+1
 13135                           
 13136                           ; BSR set to: 0
 13137  0055B8  0012               	return		;funcret
 13138  0055BA                     __end_of_vfprintf:
 13139                           	callstack 0
 13140                           
 13141 ;; *************** function _vfpfcnvrt *****************
 13142 ;; Defined at:
 13143 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
 13144 ;; Parameters:    Size  Location     Type
 13145 ;;  fp              1   60[COMRAM] PTR struct _IO_FILE
 13146 ;;		 -> sprintf@f(6), 
 13147 ;;  fmt             1   61[COMRAM] PTR PTR unsigned char 
 13148 ;;		 -> vfprintf@cfmt(2), 
 13149 ;;  ap              1   62[COMRAM] PTR PTR void 
 13150 ;;		 -> sprintf@ap(1), 
 13151 ;; Auto vars:     Size  Location     Type
 13152 ;;  ll              8   18[BANK0 ] long long 
 13153 ;;  llu             8    0        unsigned long long 
 13154 ;;  f               4    0        unsigned long long 
 13155 ;;  vp              3    0        PTR void 
 13156 ;;  ct              3    0        unsigned char [3]
 13157 ;;  cp              3    0        PTR unsigned char 
 13158 ;;  i               2    0        int 
 13159 ;;  done            2    0        int 
 13160 ;;  c               1    0        unsigned char 
 13161 ;; Return value:  Size  Location     Type
 13162 ;;                  2   60[COMRAM] int 
 13163 ;; Registers used:
 13164 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13165 ;; Tracked objects:
 13166 ;;		On entry : 3F/0
 13167 ;;		On exit  : 0/0
 13168 ;;		Unchanged: 0/0
 13169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13170 ;;      Params:         3       0       0       0       0       0       0
 13171 ;;      Locals:         0       8       0       0       0       0       0
 13172 ;;      Temps:          0       0       0       0       0       0       0
 13173 ;;      Totals:         3       8       0       0       0       0       0
 13174 ;;Total ram usage:       11 bytes
 13175 ;; Hardware stack levels used: 1
 13176 ;; Hardware stack levels required when called: 9
 13177 ;; This function calls:
 13178 ;;		_dtoa
 13179 ;;		_fputc
 13180 ;; This function is called by:
 13181 ;;		_vfprintf
 13182 ;; This function uses a non-reentrant model
 13183 ;;
 13184                           
 13185                           	psect	text57
 13186  0035C0                     __ptext57:
 13187                           	callstack 0
 13188  0035C0                     _vfpfcnvrt:
 13189                           	callstack 14
 13190                           
 13191                           ; BSR set to: 0
 13192                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.32\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          2\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
 13193                           
 13194                           ; BSR set to: 0
 13195                           ;incstack = 0
 13196  0035C0  503E               	movf	vfpfcnvrt@fmt^0,w,c
 13197  0035C2  6ED9               	movwf	fsr2l,c
 13198  0035C4  6ADA               	clrf	fsr2h,c
 13199  0035C6  CFDE FFF6          	movff	postinc2,tblptrl
 13200  0035CA  CFDD FFF7          	movff	postdec2,tblptrh
 13201  0035CE                     	if	0	;tblptru may be non-zero
 13202  0035CE                     	endif
 13203  0035CE                     	if	0	;tblptru may be non-zero
 13204  0035CE                     	endif
 13205  0035CE  0008               	tblrd		*
 13206  0035D0  50F5               	movf	tablat,w,c
 13207  0035D2  0A25               	xorlw	37
 13208  0035D4  A4D8               	btfss	status,2,c
 13209  0035D6  D086               	goto	l8406
 13210                           
 13211                           ; BSR set to: 0
 13212                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
 13213  0035D8  503E               	movf	vfpfcnvrt@fmt^0,w,c
 13214  0035DA  6ED9               	movwf	fsr2l,c
 13215  0035DC  6ADA               	clrf	fsr2h,c
 13216  0035DE  2ADE               	incf	postinc2,f,c
 13217  0035E0  0E00               	movlw	0
 13218  0035E2  22DD               	addwfc	postdec2,f,c
 13219                           
 13220                           ; BSR set to: 0
 13221                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
 13222  0035E4  0E00               	movlw	0
 13223  0035E6  6E47               	movwf	(_width+1)^0,c
 13224  0035E8  0E00               	movlw	0
 13225  0035EA  6E46               	movwf	_width^0,c
 13226  0035EC  C046  F04A         	movff	_width,_flags
 13227  0035F0  C047  F04B         	movff	_width+1,_flags+1
 13228                           
 13229                           ; BSR set to: 0
 13230                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
 13231  0035F4  6848               	setf	_prec^0,c
 13232  0035F6  6849               	setf	(_prec+1)^0,c
 13233                           
 13234                           ; BSR set to: 0
 13235                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 847:         if (
      +                          (*fmt[0] == 'd') || (*fmt[0] == 'i')) {
 13236  0035F8  503E               	movf	vfpfcnvrt@fmt^0,w,c
 13237  0035FA  6ED9               	movwf	fsr2l,c
 13238  0035FC  6ADA               	clrf	fsr2h,c
 13239  0035FE  CFDE FFF6          	movff	postinc2,tblptrl
 13240  003602  CFDD FFF7          	movff	postdec2,tblptrh
 13241  003606                     	if	0	;tblptru may be non-zero
 13242  003606                     	endif
 13243  003606                     	if	0	;tblptru may be non-zero
 13244  003606                     	endif
 13245  003606  0008               	tblrd		*
 13246  003608  50F5               	movf	tablat,w,c
 13247  00360A  0A64               	xorlw	100
 13248  00360C  B4D8               	btfsc	status,2,c
 13249  00360E  D00C               	goto	u6160
 13250                           
 13251                           ; BSR set to: 0
 13252  003610  503E               	movf	vfpfcnvrt@fmt^0,w,c
 13253  003612  6ED9               	movwf	fsr2l,c
 13254  003614  6ADA               	clrf	fsr2h,c
 13255  003616  CFDE FFF6          	movff	postinc2,tblptrl
 13256  00361A  CFDD FFF7          	movff	postdec2,tblptrh
 13257  00361E                     	if	0	;tblptru may be non-zero
 13258  00361E                     	endif
 13259  00361E                     	if	0	;tblptru may be non-zero
 13260  00361E                     	endif
 13261  00361E  0008               	tblrd		*
 13262  003620  50F5               	movf	tablat,w,c
 13263  003622  0A69               	xorlw	105
 13264  003624  A4D8               	btfss	status,2,c
 13265  003626  D034               	goto	l8390
 13266  003628                     u6160:
 13267                           
 13268                           ; BSR set to: 0
 13269                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 849:             
      +                          ++*fmt;
 13270  003628  503E               	movf	vfpfcnvrt@fmt^0,w,c
 13271  00362A  6ED9               	movwf	fsr2l,c
 13272  00362C  6ADA               	clrf	fsr2h,c
 13273  00362E  2ADE               	incf	postinc2,f,c
 13274  003630  0E00               	movlw	0
 13275  003632  22DD               	addwfc	postdec2,f,c
 13276                           
 13277                           ; BSR set to: 0
 13278                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 850:             
      +                          ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
 13279  003634  503F               	movf	vfpfcnvrt@ap^0,w,c
 13280  003636  6ED9               	movwf	fsr2l,c
 13281  003638  6ADA               	clrf	fsr2h,c
 13282  00363A  50DF               	movf	indf2,w,c
 13283  00363C  2ADF               	incf	indf2,f,c
 13284  00363E  2ADF               	incf	indf2,f,c
 13285  003640  6ED9               	movwf	fsr2l,c
 13286  003642  6ADA               	clrf	fsr2h,c
 13287  003644  CFDE F0BC          	movff	postinc2,vfpfcnvrt@ll
 13288  003648  CFDD F0BD          	movff	postdec2,vfpfcnvrt@ll+1
 13289  00364C  0E00               	movlw	0
 13290  00364E  BFBD               	btfsc	(vfpfcnvrt@ll+1)& (0+255),7,b
 13291  003650  0EFF               	movlw	-1
 13292  003652  6FBE               	movwf	(vfpfcnvrt@ll+2)& (0+255),b
 13293  003654  6FBF               	movwf	(vfpfcnvrt@ll+3)& (0+255),b
 13294  003656  6FC0               	movwf	(vfpfcnvrt@ll+4)& (0+255),b
 13295  003658  6FC1               	movwf	(vfpfcnvrt@ll+5)& (0+255),b
 13296  00365A  6FC2               	movwf	(vfpfcnvrt@ll+6)& (0+255),b
 13297  00365C  6FC3               	movwf	(vfpfcnvrt@ll+7)& (0+255),b
 13298                           
 13299                           ; BSR set to: 0
 13300                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 852:             
      +                          return dtoa(fp, ll);
 13301  00365E  C03D  F02C         	movff	vfpfcnvrt@fp,dtoa@fp
 13302  003662  C0BC  F02D         	movff	vfpfcnvrt@ll,dtoa@d
 13303  003666  C0BD  F02E         	movff	vfpfcnvrt@ll+1,dtoa@d+1
 13304  00366A  C0BE  F02F         	movff	vfpfcnvrt@ll+2,dtoa@d+2
 13305  00366E  C0BF  F030         	movff	vfpfcnvrt@ll+3,dtoa@d+3
 13306  003672  C0C0  F031         	movff	vfpfcnvrt@ll+4,dtoa@d+4
 13307  003676  C0C1  F032         	movff	vfpfcnvrt@ll+5,dtoa@d+5
 13308  00367A  C0C2  F033         	movff	vfpfcnvrt@ll+6,dtoa@d+6
 13309  00367E  C0C3  F034         	movff	vfpfcnvrt@ll+7,dtoa@d+7
 13310  003682  EC30  F017         	call	_dtoa	;wreg free
 13311  003686  C02C  F03D         	movff	?_dtoa,?_vfpfcnvrt
 13312  00368A  C02D  F03E         	movff	?_dtoa+1,?_vfpfcnvrt+1
 13313  00368E  0012               	return	
 13314  003690                     l8390:
 13315                           
 13316                           ; BSR set to: 0
 13317                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
 13318  003690  503E               	movf	vfpfcnvrt@fmt^0,w,c
 13319  003692  6ED9               	movwf	fsr2l,c
 13320  003694  6ADA               	clrf	fsr2h,c
 13321  003696  CFDE FFF6          	movff	postinc2,tblptrl
 13322  00369A  CFDD FFF7          	movff	postdec2,tblptrh
 13323  00369E                     	if	0	;tblptru may be non-zero
 13324  00369E                     	endif
 13325  00369E                     	if	0	;tblptru may be non-zero
 13326  00369E                     	endif
 13327  00369E  0008               	tblrd		*
 13328  0036A0  50F5               	movf	tablat,w,c
 13329  0036A2  0A25               	xorlw	37
 13330  0036A4  A4D8               	btfss	status,2,c
 13331  0036A6  D013               	goto	l8400
 13332                           
 13333                           ; BSR set to: 0
 13334                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
 13335  0036A8  503E               	movf	vfpfcnvrt@fmt^0,w,c
 13336  0036AA  6ED9               	movwf	fsr2l,c
 13337  0036AC  6ADA               	clrf	fsr2h,c
 13338  0036AE  2ADE               	incf	postinc2,f,c
 13339  0036B0  0E00               	movlw	0
 13340  0036B2  22DD               	addwfc	postdec2,f,c
 13341                           
 13342                           ; BSR set to: 0
 13343                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
 13344  0036B4  0E00               	movlw	0
 13345  0036B6  6E13               	movwf	(fputc@c+1)^0,c
 13346  0036B8  0E25               	movlw	37
 13347  0036BA  6E12               	movwf	fputc@c^0,c
 13348  0036BC  C03D  F014         	movff	vfpfcnvrt@fp,fputc@fp
 13349  0036C0  EC2D  F027         	call	_fputc	;wreg free
 13350  0036C4                     l8396:
 13351                           
 13352                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
 13353  0036C4  0E00               	movlw	0
 13354  0036C6  6E3E               	movwf	(?_vfpfcnvrt+1)^0,c
 13355  0036C8  0E01               	movlw	1
 13356  0036CA  6E3D               	movwf	?_vfpfcnvrt^0,c
 13357  0036CC  0012               	return	
 13358  0036CE                     l8400:
 13359                           
 13360                           ; BSR set to: 0
 13361                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
 13362  0036CE  503E               	movf	vfpfcnvrt@fmt^0,w,c
 13363  0036D0  6ED9               	movwf	fsr2l,c
 13364  0036D2  6ADA               	clrf	fsr2h,c
 13365  0036D4  2ADE               	incf	postinc2,f,c
 13366  0036D6  0E00               	movlw	0
 13367  0036D8  22DD               	addwfc	postdec2,f,c
 13368                           
 13369                           ; BSR set to: 0
 13370                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
 13371  0036DA  0E00               	movlw	0
 13372  0036DC  6E3E               	movwf	(?_vfpfcnvrt+1)^0,c
 13373  0036DE  0E00               	movlw	0
 13374  0036E0  6E3D               	movwf	?_vfpfcnvrt^0,c
 13375  0036E2  0012               	return	
 13376  0036E4                     l8406:
 13377                           
 13378                           ; BSR set to: 0
 13379                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
 13380  0036E4  503E               	movf	vfpfcnvrt@fmt^0,w,c
 13381  0036E6  6ED9               	movwf	fsr2l,c
 13382  0036E8  6ADA               	clrf	fsr2h,c
 13383  0036EA  CFDE FFF6          	movff	postinc2,tblptrl
 13384  0036EE  CFDD FFF7          	movff	postdec2,tblptrh
 13385  0036F2                     	if	0	;tblptru may be non-zero
 13386  0036F2                     	endif
 13387  0036F2                     	if	0	;tblptru may be non-zero
 13388  0036F2                     	endif
 13389  0036F2  0008               	tblrd		*
 13390  0036F4  50F5               	movf	tablat,w,c
 13391  0036F6  6E12               	movwf	fputc@c^0,c
 13392  0036F8  6A13               	clrf	(fputc@c+1)^0,c
 13393  0036FA  C03D  F014         	movff	vfpfcnvrt@fp,fputc@fp
 13394  0036FE  EC2D  F027         	call	_fputc	;wreg free
 13395                           
 13396                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
 13397  003702  503E               	movf	vfpfcnvrt@fmt^0,w,c
 13398  003704  6ED9               	movwf	fsr2l,c
 13399  003706  6ADA               	clrf	fsr2h,c
 13400  003708  2ADE               	incf	postinc2,f,c
 13401  00370A  0E00               	movlw	0
 13402  00370C  22DD               	addwfc	postdec2,f,c
 13403  00370E  D7DA               	goto	l8396
 13404  003710                     __end_of_vfpfcnvrt:
 13405                           	callstack 0
 13406                           
 13407 ;; *************** function _dtoa *****************
 13408 ;; Defined at:
 13409 ;;		line 287 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
 13410 ;; Parameters:    Size  Location     Type
 13411 ;;  fp              1   43[COMRAM] PTR struct _IO_FILE
 13412 ;;		 -> sprintf@f(6), 
 13413 ;;  d               8   44[COMRAM] long long 
 13414 ;; Auto vars:     Size  Location     Type
 13415 ;;  n               8    8[BANK0 ] long long 
 13416 ;;  i               2   16[BANK0 ] int 
 13417 ;;  s               2    6[BANK0 ] int 
 13418 ;;  w               2    4[BANK0 ] int 
 13419 ;;  p               2    2[BANK0 ] int 
 13420 ;; Return value:  Size  Location     Type
 13421 ;;                  2   43[COMRAM] int 
 13422 ;; Registers used:
 13423 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13424 ;; Tracked objects:
 13425 ;;		On entry : 3F/0
 13426 ;;		On exit  : 0/0
 13427 ;;		Unchanged: 0/0
 13428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13429 ;;      Params:         9       0       0       0       0       0       0
 13430 ;;      Locals:         0      18       0       0       0       0       0
 13431 ;;      Temps:          8       0       0       0       0       0       0
 13432 ;;      Totals:        17      18       0       0       0       0       0
 13433 ;;Total ram usage:       35 bytes
 13434 ;; Hardware stack levels used: 1
 13435 ;; Hardware stack levels required when called: 8
 13436 ;; This function calls:
 13437 ;;		___aodiv
 13438 ;;		___aomod
 13439 ;;		_abs
 13440 ;;		_pad
 13441 ;; This function is called by:
 13442 ;;		_vfpfcnvrt
 13443 ;; This function uses a non-reentrant model
 13444 ;;
 13445                           
 13446                           	psect	text58
 13447  002E60                     __ptext58:
 13448                           	callstack 0
 13449  002E60                     _dtoa:
 13450                           	callstack 14
 13451                           
 13452                           ; BSR set to: 0
 13453                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 287: static int d
      +                          toa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\d
      +                          oprnt.c: 288: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 28
      +                          9:     int i, p, s, w;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprn
      +                          t.c: 290:     long long n;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\d
      +                          oprnt.c: 293:     n = d;
 13454                           
 13455                           ;incstack = 0
 13456  002E60  C02D  F0B2         	movff	dtoa@d,dtoa@n
 13457  002E64  C02E  F0B3         	movff	dtoa@d+1,dtoa@n+1
 13458  002E68  C02F  F0B4         	movff	dtoa@d+2,dtoa@n+2
 13459  002E6C  C030  F0B5         	movff	dtoa@d+3,dtoa@n+3
 13460  002E70  C031  F0B6         	movff	dtoa@d+4,dtoa@n+4
 13461  002E74  C032  F0B7         	movff	dtoa@d+5,dtoa@n+5
 13462  002E78  C033  F0B8         	movff	dtoa@d+6,dtoa@n+6
 13463  002E7C  C034  F0B9         	movff	dtoa@d+7,dtoa@n+7
 13464                           
 13465                           ; BSR set to: 0
 13466                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 294:     s = n < 
      +                          0 ? 1 : 0;
 13467  002E80  AFB9               	btfss	(dtoa@n+7)& (0+255),7,b
 13468  002E82  D002               	goto	u5990
 13469  002E84  0E01               	movlw	1
 13470  002E86  D001               	goto	u6000
 13471  002E88                     u5990:
 13472  002E88  0E00               	movlw	0
 13473  002E8A                     u6000:
 13474  002E8A  6FB0               	movwf	dtoa@s& (0+255),b
 13475  002E8C  6BB1               	clrf	(dtoa@s+1)& (0+255),b
 13476                           
 13477                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 295:     if (s) {
 13478  002E8E  51B0               	movf	dtoa@s& (0+255),w,b
 13479  002E90  11B1               	iorwf	(dtoa@s+1)& (0+255),w,b
 13480  002E92  B4D8               	btfsc	status,2,c
 13481  002E94  D010               	goto	l8314
 13482                           
 13483                           ; BSR set to: 0
 13484                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 296:         n = 
      +                          -n;
 13485  002E96  1FB9               	comf	(dtoa@n+7)& (0+255),f,b
 13486  002E98  1FB8               	comf	(dtoa@n+6)& (0+255),f,b
 13487  002E9A  1FB7               	comf	(dtoa@n+5)& (0+255),f,b
 13488  002E9C  1FB6               	comf	(dtoa@n+4)& (0+255),f,b
 13489  002E9E  1FB5               	comf	(dtoa@n+3)& (0+255),f,b
 13490  002EA0  1FB4               	comf	(dtoa@n+2)& (0+255),f,b
 13491  002EA2  1FB3               	comf	(dtoa@n+1)& (0+255),f,b
 13492  002EA4  6DB2               	negf	dtoa@n& (0+255),b
 13493  002EA6  0E00               	movlw	0
 13494  002EA8  23B3               	addwfc	(dtoa@n+1)& (0+255),f,b
 13495  002EAA  23B4               	addwfc	(dtoa@n+2)& (0+255),f,b
 13496  002EAC  23B5               	addwfc	(dtoa@n+3)& (0+255),f,b
 13497  002EAE  23B6               	addwfc	(dtoa@n+4)& (0+255),f,b
 13498  002EB0  23B7               	addwfc	(dtoa@n+5)& (0+255),f,b
 13499  002EB2  23B8               	addwfc	(dtoa@n+6)& (0+255),f,b
 13500  002EB4  23B9               	addwfc	(dtoa@n+7)& (0+255),f,b
 13501  002EB6                     l8314:
 13502                           
 13503                           ; BSR set to: 0
 13504                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 300:     if (!(pr
      +                          ec < 0)) {
 13505  002EB6  AE49               	btfss	(_prec+1)^0,7,c
 13506                           
 13507                           ; BSR set to: 0
 13508                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 301:         flag
      +                          s &= ~(1 << 1);
 13509  002EB8  924A               	bcf	_flags^0,1,c
 13510                           
 13511                           ; BSR set to: 0
 13512                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 303:     p = (0 <
      +                           prec) ? prec : 1;
 13513  002EBA  BE49               	btfsc	(_prec+1)^0,7,c
 13514  002EBC  D005               	goto	u6030
 13515  002EBE  5049               	movf	(_prec+1)^0,w,c
 13516  002EC0  E108               	bnz	l1590
 13517  002EC2  0448               	decf	_prec^0,w,c
 13518  002EC4  B0D8               	btfsc	status,0,c
 13519  002EC6  D005               	goto	l1590
 13520  002EC8                     u6030:
 13521                           
 13522                           ; BSR set to: 0
 13523  002EC8  0E00               	movlw	0
 13524  002ECA  6FAD               	movwf	(dtoa@p+1)& (0+255),b
 13525  002ECC  0E01               	movlw	1
 13526  002ECE  6FAC               	movwf	dtoa@p& (0+255),b
 13527  002ED0  D004               	goto	l1592
 13528  002ED2                     l1590:
 13529                           
 13530                           ; BSR set to: 0
 13531  002ED2  C048  F0AC         	movff	_prec,dtoa@p
 13532  002ED6  C049  F0AD         	movff	_prec+1,dtoa@p+1
 13533  002EDA                     l1592:
 13534                           
 13535                           ; BSR set to: 0
 13536                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 304:     w = widt
      +                          h;
 13537  002EDA  C046  F0AE         	movff	_width,dtoa@w
 13538  002EDE  C047  F0AF         	movff	_width+1,dtoa@w+1
 13539                           
 13540                           ; BSR set to: 0
 13541                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 305:     if (s ||
      +                           (flags & (1 << 2))) {
 13542  002EE2  51B0               	movf	dtoa@s& (0+255),w,b
 13543  002EE4  11B1               	iorwf	(dtoa@s+1)& (0+255),w,b
 13544  002EE6  A4D8               	btfss	status,2,c
 13545  002EE8  D002               	goto	u6050
 13546                           
 13547                           ; BSR set to: 0
 13548  002EEA  A44A               	btfss	_flags^0,2,c
 13549  002EEC  D003               	goto	l8328
 13550  002EEE                     u6050:
 13551                           
 13552                           ; BSR set to: 0
 13553                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 306:         --w;
 13554  002EEE  07AE               	decf	dtoa@w& (0+255),f,b
 13555  002EF0  A0D8               	btfss	status,0,c
 13556  002EF2  07AF               	decf	(dtoa@w+1)& (0+255),f,b
 13557  002EF4                     l8328:
 13558                           
 13559                           ; BSR set to: 0
 13560                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 310:     i = size
      +                          of(dbuf) - 1;
 13561  002EF4  0E00               	movlw	0
 13562  002EF6  6FBB               	movwf	(dtoa@i+1)& (0+255),b
 13563  002EF8  0E1F               	movlw	31
 13564  002EFA  6FBA               	movwf	dtoa@i& (0+255),b
 13565                           
 13566                           ; BSR set to: 0
 13567                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 311:     dbuf[i] 
      +                          = '\0';
 13568  002EFC  0E00               	movlw	0
 13569  002EFE  6FA9               	movwf	(_dbuf+31)& (0+255),b
 13570                           
 13571                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 13572  002F00  D07A               	goto	l8342
 13573  002F02                     l8332:
 13574                           
 13575                           ; BSR set to: 0
 13576                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 313:         --i;
 13577  002F02  07BA               	decf	dtoa@i& (0+255),f,b
 13578  002F04  A0D8               	btfss	status,0,c
 13579  002F06  07BB               	decf	(dtoa@i+1)& (0+255),f,b
 13580                           
 13581                           ; BSR set to: 0
 13582                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 314:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
 13583  002F08  51BA               	movf	dtoa@i& (0+255),w,b
 13584  002F0A  0F8A               	addlw	low _dbuf
 13585  002F0C  6ED9               	movwf	fsr2l,c
 13586  002F0E  6ADA               	clrf	fsr2h,c
 13587  002F10  C0B2  F012         	movff	dtoa@n,___aomod@dividend
 13588  002F14  C0B3  F013         	movff	dtoa@n+1,___aomod@dividend+1
 13589  002F18  C0B4  F014         	movff	dtoa@n+2,___aomod@dividend+2
 13590  002F1C  C0B5  F015         	movff	dtoa@n+3,___aomod@dividend+3
 13591  002F20  C0B6  F016         	movff	dtoa@n+4,___aomod@dividend+4
 13592  002F24  C0B7  F017         	movff	dtoa@n+5,___aomod@dividend+5
 13593  002F28  C0B8  F018         	movff	dtoa@n+6,___aomod@dividend+6
 13594  002F2C  C0B9  F019         	movff	dtoa@n+7,___aomod@dividend+7
 13595  002F30  0E0A               	movlw	10
 13596  002F32  6E1A               	movwf	___aomod@divisor^0,c
 13597  002F34  0E00               	movlw	0
 13598  002F36  6E1B               	movwf	(___aomod@divisor+1)^0,c
 13599  002F38  0E00               	movlw	0
 13600  002F3A  6E1C               	movwf	(___aomod@divisor+2)^0,c
 13601  002F3C  0E00               	movlw	0
 13602  002F3E  6E1D               	movwf	(___aomod@divisor+3)^0,c
 13603  002F40  0E00               	movlw	0
 13604  002F42  6E1E               	movwf	(___aomod@divisor+4)^0,c
 13605  002F44  0E00               	movlw	0
 13606  002F46  6E1F               	movwf	(___aomod@divisor+5)^0,c
 13607  002F48  0E00               	movlw	0
 13608  002F4A  6E20               	movwf	(___aomod@divisor+6)^0,c
 13609  002F4C  0E00               	movlw	0
 13610  002F4E  6E21               	movwf	(___aomod@divisor+7)^0,c
 13611  002F50  EC04  F01E         	call	___aomod	;wreg free
 13612  002F54  C012  F035         	movff	?___aomod,??_dtoa
 13613  002F58  C013  F036         	movff	?___aomod+1,??_dtoa+1
 13614  002F5C  C014  F037         	movff	?___aomod+2,??_dtoa+2
 13615  002F60  C015  F038         	movff	?___aomod+3,??_dtoa+3
 13616  002F64  C016  F039         	movff	?___aomod+4,??_dtoa+4
 13617  002F68  C017  F03A         	movff	?___aomod+5,??_dtoa+5
 13618  002F6C  C018  F03B         	movff	?___aomod+6,??_dtoa+6
 13619  002F70  C019  F03C         	movff	?___aomod+7,??_dtoa+7
 13620  002F74  C035  F024         	movff	??_dtoa,abs@a
 13621  002F78  C037  F025         	movff	??_dtoa+2,abs@a+1
 13622  002F7C  ECF9  F02B         	call	_abs	;wreg free
 13623  002F80  5024               	movf	?_abs^0,w,c
 13624  002F82  0F30               	addlw	48
 13625  002F84  6EDF               	movwf	indf2,c
 13626                           
 13627                           ; BSR set to: 0
 13628                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 315:         --p;
 13629  002F86  07AC               	decf	dtoa@p& (0+255),f,b
 13630  002F88  A0D8               	btfss	status,0,c
 13631  002F8A  07AD               	decf	(dtoa@p+1)& (0+255),f,b
 13632                           
 13633                           ; BSR set to: 0
 13634                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 316:         --w;
 13635  002F8C  07AE               	decf	dtoa@w& (0+255),f,b
 13636  002F8E  A0D8               	btfss	status,0,c
 13637  002F90  07AF               	decf	(dtoa@w+1)& (0+255),f,b
 13638                           
 13639                           ; BSR set to: 0
 13640                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 317:         n = 
      +                          n / 10;
 13641  002F92  C0B2  F012         	movff	dtoa@n,___aodiv@dividend
 13642  002F96  C0B3  F013         	movff	dtoa@n+1,___aodiv@dividend+1
 13643  002F9A  C0B4  F014         	movff	dtoa@n+2,___aodiv@dividend+2
 13644  002F9E  C0B5  F015         	movff	dtoa@n+3,___aodiv@dividend+3
 13645  002FA2  C0B6  F016         	movff	dtoa@n+4,___aodiv@dividend+4
 13646  002FA6  C0B7  F017         	movff	dtoa@n+5,___aodiv@dividend+5
 13647  002FAA  C0B8  F018         	movff	dtoa@n+6,___aodiv@dividend+6
 13648  002FAE  C0B9  F019         	movff	dtoa@n+7,___aodiv@dividend+7
 13649  002FB2  0E0A               	movlw	10
 13650  002FB4  6E1A               	movwf	___aodiv@divisor^0,c
 13651  002FB6  0E00               	movlw	0
 13652  002FB8  6E1B               	movwf	(___aodiv@divisor+1)^0,c
 13653  002FBA  0E00               	movlw	0
 13654  002FBC  6E1C               	movwf	(___aodiv@divisor+2)^0,c
 13655  002FBE  0E00               	movlw	0
 13656  002FC0  6E1D               	movwf	(___aodiv@divisor+3)^0,c
 13657  002FC2  0E00               	movlw	0
 13658  002FC4  6E1E               	movwf	(___aodiv@divisor+4)^0,c
 13659  002FC6  0E00               	movlw	0
 13660  002FC8  6E1F               	movwf	(___aodiv@divisor+5)^0,c
 13661  002FCA  0E00               	movlw	0
 13662  002FCC  6E20               	movwf	(___aodiv@divisor+6)^0,c
 13663  002FCE  0E00               	movlw	0
 13664  002FD0  6E21               	movwf	(___aodiv@divisor+7)^0,c
 13665  002FD2  EC88  F01B         	call	___aodiv	;wreg free
 13666  002FD6  C012  F0B2         	movff	?___aodiv,dtoa@n
 13667  002FDA  C013  F0B3         	movff	?___aodiv+1,dtoa@n+1
 13668  002FDE  C014  F0B4         	movff	?___aodiv+2,dtoa@n+2
 13669  002FE2  C015  F0B5         	movff	?___aodiv+3,dtoa@n+3
 13670  002FE6  C016  F0B6         	movff	?___aodiv+4,dtoa@n+4
 13671  002FEA  C017  F0B7         	movff	?___aodiv+5,dtoa@n+5
 13672  002FEE  C018  F0B8         	movff	?___aodiv+6,dtoa@n+6
 13673  002FF2  C019  F0B9         	movff	?___aodiv+7,dtoa@n+7
 13674  002FF6                     l8342:
 13675                           
 13676                           ; BSR set to: 0
 13677                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 13678  002FF6  BFBB               	btfsc	(dtoa@i+1)& (0+255),7,b
 13679  002FF8  D01F               	goto	u6100
 13680  002FFA  51BB               	movf	(dtoa@i+1)& (0+255),w,b
 13681  002FFC  E103               	bnz	u6060
 13682  002FFE  05BA               	decf	dtoa@i& (0+255),w,b
 13683  003000  A0D8               	btfss	status,0,c
 13684  003002  D01A               	goto	u6100
 13685  003004                     u6060:
 13686                           
 13687                           ; BSR set to: 0
 13688  003004  51B2               	movf	dtoa@n& (0+255),w,b
 13689  003006  11B3               	iorwf	(dtoa@n+1)& (0+255),w,b
 13690  003008  11B4               	iorwf	(dtoa@n+2)& (0+255),w,b
 13691  00300A  11B5               	iorwf	(dtoa@n+3)& (0+255),w,b
 13692  00300C  11B6               	iorwf	(dtoa@n+4)& (0+255),w,b
 13693  00300E  11B7               	iorwf	(dtoa@n+5)& (0+255),w,b
 13694  003010  11B8               	iorwf	(dtoa@n+6)& (0+255),w,b
 13695  003012  11B9               	iorwf	(dtoa@n+7)& (0+255),w,b
 13696  003014  A4D8               	btfss	status,2,c
 13697  003016  D775               	goto	l8332
 13698                           
 13699                           ; BSR set to: 0
 13700  003018  BFAD               	btfsc	(dtoa@p+1)& (0+255),7,b
 13701  00301A  D005               	goto	u6080
 13702  00301C  51AD               	movf	(dtoa@p+1)& (0+255),w,b
 13703  00301E  E102               	bnz	u6081
 13704  003020  05AC               	decf	dtoa@p& (0+255),w,b
 13705  003022  B0D8               	btfsc	status,0,c
 13706  003024                     u6081:
 13707  003024  D76E               	goto	l8332
 13708  003026                     u6080:
 13709                           
 13710                           ; BSR set to: 0
 13711  003026  BFAF               	btfsc	(dtoa@w+1)& (0+255),7,b
 13712  003028  D007               	goto	u6100
 13713  00302A  51AF               	movf	(dtoa@w+1)& (0+255),w,b
 13714  00302C  E103               	bnz	u6090
 13715  00302E  05AE               	decf	dtoa@w& (0+255),w,b
 13716  003030  A0D8               	btfss	status,0,c
 13717  003032  D002               	goto	u6100
 13718  003034                     u6090:
 13719                           
 13720                           ; BSR set to: 0
 13721  003034  B24A               	btfsc	_flags^0,1,c
 13722  003036  D765               	goto	l8332
 13723  003038                     u6100:
 13724                           
 13725                           ; BSR set to: 0
 13726                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 321:     if (s ||
      +                           (flags & (1 << 2))) {
 13727  003038  51B0               	movf	dtoa@s& (0+255),w,b
 13728  00303A  11B1               	iorwf	(dtoa@s+1)& (0+255),w,b
 13729  00303C  A4D8               	btfss	status,2,c
 13730  00303E  D002               	goto	u6120
 13731                           
 13732                           ; BSR set to: 0
 13733  003040  A44A               	btfss	_flags^0,2,c
 13734  003042  D015               	goto	l8366
 13735  003044                     u6120:
 13736                           
 13737                           ; BSR set to: 0
 13738                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 322:         --i;
 13739  003044  07BA               	decf	dtoa@i& (0+255),f,b
 13740  003046  A0D8               	btfss	status,0,c
 13741  003048  07BB               	decf	(dtoa@i+1)& (0+255),f,b
 13742                           
 13743                           ; BSR set to: 0
 13744                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 323:         dbuf
      +                          [i] = s ? '-' : '+';
 13745  00304A  51B0               	movf	dtoa@s& (0+255),w,b
 13746  00304C  11B1               	iorwf	(dtoa@s+1)& (0+255),w,b
 13747  00304E  A4D8               	btfss	status,2,c
 13748  003050  D004               	goto	l8362
 13749                           
 13750                           ; BSR set to: 0
 13751  003052  0E00               	movlw	0
 13752  003054  6FAB               	movwf	(_dtoa$5500+1)& (0+255),b
 13753  003056  0E2B               	movlw	43
 13754  003058  D003               	goto	L8
 13755  00305A                     l8362:
 13756                           
 13757                           ; BSR set to: 0
 13758  00305A  0E00               	movlw	0
 13759  00305C  6FAB               	movwf	(_dtoa$5500+1)& (0+255),b
 13760  00305E  0E2D               	movlw	45
 13761  003060                     L8:
 13762  003060  6FAA               	movwf	_dtoa$5500& (0+255),b
 13763                           
 13764                           ; BSR set to: 0
 13765  003062  51BA               	movf	dtoa@i& (0+255),w,b
 13766  003064  0F8A               	addlw	low _dbuf
 13767  003066  6ED9               	movwf	fsr2l,c
 13768  003068  6ADA               	clrf	fsr2h,c
 13769  00306A  C0AA  FFDF         	movff	_dtoa$5500,indf2
 13770  00306E                     l8366:
 13771                           
 13772                           ; BSR set to: 0
 13773                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 327:     return p
      +                          ad(fp, &dbuf[i], w);
 13774  00306E  C02C  F01F         	movff	dtoa@fp,pad@fp
 13775  003072  51BA               	movf	dtoa@i& (0+255),w,b
 13776  003074  0F8A               	addlw	low _dbuf
 13777  003076  6E20               	movwf	pad@buf^0,c
 13778  003078  C0AE  F021         	movff	dtoa@w,pad@p
 13779  00307C  C0AF  F022         	movff	dtoa@w+1,pad@p+1
 13780  003080  EC80  F028         	call	_pad	;wreg free
 13781  003084  C01F  F02C         	movff	?_pad,?_dtoa
 13782  003088  C020  F02D         	movff	?_pad+1,?_dtoa+1
 13783  00308C  0012               	return		;funcret
 13784  00308E                     __end_of_dtoa:
 13785                           	callstack 0
 13786                           
 13787 ;; *************** function _pad *****************
 13788 ;; Defined at:
 13789 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
 13790 ;; Parameters:    Size  Location     Type
 13791 ;;  fp              1   30[COMRAM] PTR struct _IO_FILE
 13792 ;;		 -> sprintf@f(6), 
 13793 ;;  buf             1   31[COMRAM] PTR unsigned char 
 13794 ;;		 -> dbuf(32), 
 13795 ;;  p               2   32[COMRAM] int 
 13796 ;; Auto vars:     Size  Location     Type
 13797 ;;  w               2   37[COMRAM] int 
 13798 ;;  i               2   35[COMRAM] int 
 13799 ;; Return value:  Size  Location     Type
 13800 ;;                  2   30[COMRAM] int 
 13801 ;; Registers used:
 13802 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13803 ;; Tracked objects:
 13804 ;;		On entry : 3F/0
 13805 ;;		On exit  : 0/0
 13806 ;;		Unchanged: 0/0
 13807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13808 ;;      Params:         4       0       0       0       0       0       0
 13809 ;;      Locals:         4       0       0       0       0       0       0
 13810 ;;      Temps:          1       0       0       0       0       0       0
 13811 ;;      Totals:         9       0       0       0       0       0       0
 13812 ;;Total ram usage:        9 bytes
 13813 ;; Hardware stack levels used: 1
 13814 ;; Hardware stack levels required when called: 7
 13815 ;; This function calls:
 13816 ;;		_fputc
 13817 ;;		_fputs
 13818 ;;		_strlen
 13819 ;; This function is called by:
 13820 ;;		_dtoa
 13821 ;; This function uses a non-reentrant model
 13822 ;;
 13823                           
 13824                           	psect	text59
 13825  005100                     __ptext59:
 13826                           	callstack 0
 13827  005100                     _pad:
 13828                           	callstack 14
 13829                           
 13830                           ; BSR set to: 0
 13831                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
 13832                           
 13833                           ;incstack = 0
 13834  005100  A04A               	btfss	_flags^0,0,c
 13835  005102  D006               	goto	l8286
 13836                           
 13837                           ; BSR set to: 0
 13838                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
 13839  005104  C020  F01A         	movff	pad@buf,fputs@s
 13840  005108  C01F  F01B         	movff	pad@fp,fputs@fp
 13841  00510C  EC12  F02C         	call	_fputs	;wreg free
 13842  005110                     l8286:
 13843                           
 13844                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
 13845  005110  BE22               	btfsc	(pad@p+1)^0,7,c
 13846  005112  D005               	goto	l8290
 13847  005114  C021  F026         	movff	pad@p,pad@w
 13848  005118  C022  F027         	movff	pad@p+1,pad@w+1
 13849  00511C  D004               	goto	l1579
 13850  00511E                     l8290:
 13851  00511E  0E00               	movlw	0
 13852  005120  6E27               	movwf	(pad@w+1)^0,c
 13853  005122  0E00               	movlw	0
 13854  005124  6E26               	movwf	pad@w^0,c
 13855  005126                     l1579:
 13856                           
 13857                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 83:     i = 0;
 13858  005126  0E00               	movlw	0
 13859  005128  6E25               	movwf	(pad@i+1)^0,c
 13860  00512A  0E00               	movlw	0
 13861  00512C  6E24               	movwf	pad@i^0,c
 13862                           
 13863                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
 13864  00512E  D00A               	goto	l8296
 13865  005130                     l8292:
 13866                           
 13867                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
 13868  005130  0E00               	movlw	0
 13869  005132  6E13               	movwf	(fputc@c+1)^0,c
 13870  005134  0E20               	movlw	32
 13871  005136  6E12               	movwf	fputc@c^0,c
 13872  005138  C01F  F014         	movff	pad@fp,fputc@fp
 13873  00513C  EC2D  F027         	call	_fputc	;wreg free
 13874                           
 13875                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 86:         ++i;
 13876  005140  4A24               	infsnz	pad@i^0,f,c
 13877  005142  2A25               	incf	(pad@i+1)^0,f,c
 13878  005144                     l8296:
 13879                           
 13880                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
 13881  005144  5026               	movf	pad@w^0,w,c
 13882  005146  5C24               	subwf	pad@i^0,w,c
 13883  005148  5025               	movf	(pad@i+1)^0,w,c
 13884  00514A  0A80               	xorlw	128
 13885  00514C  6E23               	movwf	??_pad^0,c
 13886  00514E  5027               	movf	(pad@w+1)^0,w,c
 13887  005150  0A80               	xorlw	128
 13888  005152  5823               	subwfb	??_pad^0,w,c
 13889  005154  A0D8               	btfss	status,0,c
 13890  005156  D7EC               	goto	l8292
 13891                           
 13892                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
 13893  005158  B04A               	btfsc	_flags^0,0,c
 13894  00515A  D006               	goto	l8300
 13895                           
 13896                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
 13897  00515C  C020  F01A         	movff	pad@buf,fputs@s
 13898  005160  C01F  F01B         	movff	pad@fp,fputs@fp
 13899  005164  EC12  F02C         	call	_fputs	;wreg free
 13900  005168                     l8300:
 13901                           
 13902                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 94:     return (i
      +                          nt)(strlen(buf) + (size_t)w);
 13903  005168  C020  F012         	movff	pad@buf,strlen@s
 13904  00516C  6A13               	clrf	(strlen@s+1)^0,c
 13905  00516E  ECFE  F02A         	call	_strlen	;wreg free
 13906  005172  5026               	movf	pad@w^0,w,c
 13907  005174  2412               	addwf	?_strlen^0,w,c
 13908  005176  6E1F               	movwf	?_pad^0,c
 13909  005178  5027               	movf	(pad@w+1)^0,w,c
 13910  00517A  2013               	addwfc	(?_strlen+1)^0,w,c
 13911  00517C  6E20               	movwf	(?_pad+1)^0,c
 13912  00517E  0012               	return		;funcret
 13913  005180                     __end_of_pad:
 13914                           	callstack 0
 13915                           
 13916 ;; *************** function _fputs *****************
 13917 ;; Defined at:
 13918 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputs.c"
 13919 ;; Parameters:    Size  Location     Type
 13920 ;;  s               1   25[COMRAM] PTR const unsigned char 
 13921 ;;		 -> dbuf(32), 
 13922 ;;  fp              1   26[COMRAM] PTR struct _IO_FILE
 13923 ;;		 -> sprintf@f(6), 
 13924 ;; Auto vars:     Size  Location     Type
 13925 ;;  i               2   28[COMRAM] int 
 13926 ;;  c               1   27[COMRAM] unsigned char 
 13927 ;; Return value:  Size  Location     Type
 13928 ;;                  2   25[COMRAM] int 
 13929 ;; Registers used:
 13930 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13931 ;; Tracked objects:
 13932 ;;		On entry : 0/0
 13933 ;;		On exit  : 0/0
 13934 ;;		Unchanged: 0/0
 13935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13936 ;;      Params:         2       0       0       0       0       0       0
 13937 ;;      Locals:         3       0       0       0       0       0       0
 13938 ;;      Temps:          0       0       0       0       0       0       0
 13939 ;;      Totals:         5       0       0       0       0       0       0
 13940 ;;Total ram usage:        5 bytes
 13941 ;; Hardware stack levels used: 1
 13942 ;; Hardware stack levels required when called: 6
 13943 ;; This function calls:
 13944 ;;		_fputc
 13945 ;; This function is called by:
 13946 ;;		_pad
 13947 ;; This function uses a non-reentrant model
 13948 ;;
 13949                           
 13950                           	psect	text60
 13951  005824                     __ptext60:
 13952                           	callstack 0
 13953  005824                     _fputs:
 13954                           	callstack 14
 13955                           
 13956                           ;incstack = 0
 13957  005824  0E00               	movlw	0
 13958  005826  6E1E               	movwf	(fputs@i+1)^0,c
 13959  005828  0E00               	movlw	0
 13960  00582A  6E1D               	movwf	fputs@i^0,c
 13961  00582C  D009               	goto	l8200
 13962  00582E                     l8196:
 13963  00582E  C01C  F012         	movff	fputs@c,fputc@c
 13964  005832  6A13               	clrf	(fputc@c+1)^0,c
 13965  005834  C01B  F014         	movff	fputs@fp,fputc@fp
 13966  005838  EC2D  F027         	call	_fputc	;wreg free
 13967  00583C  4A1D               	infsnz	fputs@i^0,f,c
 13968  00583E  2A1E               	incf	(fputs@i+1)^0,f,c
 13969  005840                     l8200:
 13970  005840  501A               	movf	fputs@s^0,w,c
 13971  005842  241D               	addwf	fputs@i^0,w,c
 13972  005844  6ED9               	movwf	fsr2l,c
 13973  005846  6ADA               	clrf	fsr2h,c
 13974  005848  50DF               	movf	indf2,w,c
 13975  00584A  6E1C               	movwf	fputs@c^0,c
 13976  00584C  501C               	movf	fputs@c^0,w,c
 13977  00584E  B4D8               	btfsc	status,2,c
 13978  005850  0012               	return	
 13979  005852  D7ED               	goto	l8196
 13980  005854                     __end_of_fputs:
 13981                           	callstack 0
 13982                           
 13983 ;; *************** function _fputc *****************
 13984 ;; Defined at:
 13985 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputc.c"
 13986 ;; Parameters:    Size  Location     Type
 13987 ;;  c               2   17[COMRAM] int 
 13988 ;;  fp              1   19[COMRAM] PTR struct _IO_FILE
 13989 ;;		 -> sprintf@f(6), 
 13990 ;; Auto vars:     Size  Location     Type
 13991 ;;		None
 13992 ;; Return value:  Size  Location     Type
 13993 ;;                  2   17[COMRAM] int 
 13994 ;; Registers used:
 13995 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13996 ;; Tracked objects:
 13997 ;;		On entry : 0/0
 13998 ;;		On exit  : 0/0
 13999 ;;		Unchanged: 0/0
 14000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14001 ;;      Params:         3       0       0       0       0       0       0
 14002 ;;      Locals:         0       0       0       0       0       0       0
 14003 ;;      Temps:          5       0       0       0       0       0       0
 14004 ;;      Totals:         8       0       0       0       0       0       0
 14005 ;;Total ram usage:        8 bytes
 14006 ;; Hardware stack levels used: 1
 14007 ;; Hardware stack levels required when called: 5
 14008 ;; This function calls:
 14009 ;;		_putch
 14010 ;; This function is called by:
 14011 ;;		_pad
 14012 ;;		_vfpfcnvrt
 14013 ;;		_fputs
 14014 ;; This function uses a non-reentrant model
 14015 ;;
 14016                           
 14017                           	psect	text61
 14018  004E5A                     __ptext61:
 14019                           	callstack 0
 14020  004E5A                     _fputc:
 14021                           	callstack 17
 14022                           
 14023                           ;incstack = 0
 14024  004E5A  5014               	movf	fputc@fp^0,w,c
 14025  004E5C  B4D8               	btfsc	status,2,c
 14026  004E5E  D003               	goto	u5750
 14027  004E60  5014               	movf	fputc@fp^0,w,c
 14028  004E62  A4D8               	btfss	status,2,c
 14029  004E64  D004               	goto	l8176
 14030  004E66                     u5750:
 14031  004E66  5012               	movf	fputc@c^0,w,c
 14032  004E68  EC11  F02D         	call	_putch
 14033  004E6C  0012               	return	
 14034  004E6E                     l8176:
 14035  004E6E  5014               	movf	fputc@fp^0,w,c
 14036  004E70  6ED9               	movwf	fsr2l,c
 14037  004E72  6ADA               	clrf	fsr2h,c
 14038  004E74  0E04               	movlw	4
 14039  004E76  26D9               	addwf	fsr2l,f,c
 14040  004E78  50DE               	movf	postinc2,w,c
 14041  004E7A  10DE               	iorwf	postinc2,w,c
 14042  004E7C  B4D8               	btfsc	status,2,c
 14043  004E7E  D014               	goto	u5770
 14044  004E80  5014               	movf	fputc@fp^0,w,c
 14045  004E82  6ED9               	movwf	fsr2l,c
 14046  004E84  6ADA               	clrf	fsr2h,c
 14047  004E86  0E04               	movlw	4
 14048  004E88  26D9               	addwf	fsr2l,f,c
 14049  004E8A  5014               	movf	fputc@fp^0,w,c
 14050  004E8C  6EE1               	movwf	fsr1l,c
 14051  004E8E  6AE2               	clrf	fsr1h,c
 14052  004E90  0E02               	movlw	2
 14053  004E92  26E1               	addwf	fsr1l,f,c
 14054  004E94  50DE               	movf	postinc2,w,c
 14055  004E96  5CE6               	subwf	postinc1,w,c
 14056  004E98  50E6               	movf	postinc1,w,c
 14057  004E9A  0A80               	xorlw	128
 14058  004E9C  6E19               	movwf	(??_fputc+4)^0,c
 14059  004E9E  50DE               	movf	postinc2,w,c
 14060  004EA0  0A80               	xorlw	128
 14061  004EA2  5819               	subwfb	(??_fputc+4)^0,w,c
 14062  004EA4  B0D8               	btfsc	status,0,c
 14063  004EA6  0012               	return	
 14064  004EA8                     u5770:
 14065  004EA8  5014               	movf	fputc@fp^0,w,c
 14066  004EAA  6ED9               	movwf	fsr2l,c
 14067  004EAC  6ADA               	clrf	fsr2h,c
 14068  004EAE  0E02               	movlw	2
 14069  004EB0  26D9               	addwf	fsr2l,f,c
 14070  004EB2  CFDE F015          	movff	postinc2,??_fputc
 14071  004EB6  CFDD F016          	movff	postdec2,??_fputc+1
 14072  004EBA  5014               	movf	fputc@fp^0,w,c
 14073  004EBC  6ED9               	movwf	fsr2l,c
 14074  004EBE  6ADA               	clrf	fsr2h,c
 14075  004EC0  CFDE F017          	movff	postinc2,??_fputc+2
 14076  004EC4  CFDD F018          	movff	postdec2,??_fputc+3
 14077  004EC8  5015               	movf	??_fputc^0,w,c
 14078  004ECA  2417               	addwf	(??_fputc+2)^0,w,c
 14079  004ECC  6ED9               	movwf	fsr2l,c
 14080  004ECE  5016               	movf	(??_fputc+1)^0,w,c
 14081  004ED0  2018               	addwfc	(??_fputc+3)^0,w,c
 14082  004ED2  6EDA               	movwf	fsr2h,c
 14083  004ED4  C012  FFDF         	movff	fputc@c,indf2
 14084  004ED8  5014               	movf	fputc@fp^0,w,c
 14085  004EDA  6ED9               	movwf	fsr2l,c
 14086  004EDC  6ADA               	clrf	fsr2h,c
 14087  004EDE  0E02               	movlw	2
 14088  004EE0  26D9               	addwf	fsr2l,f,c
 14089  004EE2  2ADE               	incf	postinc2,f,c
 14090  004EE4  0E00               	movlw	0
 14091  004EE6  22DD               	addwfc	postdec2,f,c
 14092  004EE8  0012               	return		;funcret
 14093  004EEA                     __end_of_fputc:
 14094                           	callstack 0
 14095                           
 14096 ;; *************** function _putch *****************
 14097 ;; Defined at:
 14098 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\putch.c"
 14099 ;; Parameters:    Size  Location     Type
 14100 ;;  c               1    wreg     unsigned char 
 14101 ;; Auto vars:     Size  Location     Type
 14102 ;;  c               1    0[COMRAM] unsigned char 
 14103 ;; Return value:  Size  Location     Type
 14104 ;;                  1    wreg      void 
 14105 ;; Registers used:
 14106 ;;		wreg
 14107 ;; Tracked objects:
 14108 ;;		On entry : 0/0
 14109 ;;		On exit  : 0/0
 14110 ;;		Unchanged: 0/0
 14111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14112 ;;      Params:         0       0       0       0       0       0       0
 14113 ;;      Locals:         0       0       0       0       0       0       0
 14114 ;;      Temps:          0       0       0       0       0       0       0
 14115 ;;      Totals:         0       0       0       0       0       0       0
 14116 ;;Total ram usage:        0 bytes
 14117 ;; Hardware stack levels used: 1
 14118 ;; Hardware stack levels required when called: 4
 14119 ;; This function calls:
 14120 ;;		Nothing
 14121 ;; This function is called by:
 14122 ;;		_fputc
 14123 ;; This function uses a non-reentrant model
 14124 ;;
 14125                           
 14126                           	psect	text62
 14127  005A22                     __ptext62:
 14128                           	callstack 0
 14129  005A22                     _putch:
 14130                           	callstack 17
 14131                           
 14132                           ;incstack = 0
 14133  005A22  0012               	return		;funcret
 14134  005A24                     __end_of_putch:
 14135                           	callstack 0
 14136                           
 14137 ;; *************** function _abs *****************
 14138 ;; Defined at:
 14139 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\abs.c"
 14140 ;; Parameters:    Size  Location     Type
 14141 ;;  a               2   35[COMRAM] int 
 14142 ;; Auto vars:     Size  Location     Type
 14143 ;;		None
 14144 ;; Return value:  Size  Location     Type
 14145 ;;                  2   35[COMRAM] int 
 14146 ;; Registers used:
 14147 ;;		wreg, status,2, status,0
 14148 ;; Tracked objects:
 14149 ;;		On entry : 3F/0
 14150 ;;		On exit  : 3F/0
 14151 ;;		Unchanged: 3F/0
 14152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14153 ;;      Params:         2       0       0       0       0       0       0
 14154 ;;      Locals:         0       0       0       0       0       0       0
 14155 ;;      Temps:          2       0       0       0       0       0       0
 14156 ;;      Totals:         4       0       0       0       0       0       0
 14157 ;;Total ram usage:        4 bytes
 14158 ;; Hardware stack levels used: 1
 14159 ;; Hardware stack levels required when called: 4
 14160 ;; This function calls:
 14161 ;;		Nothing
 14162 ;; This function is called by:
 14163 ;;		_dtoa
 14164 ;; This function uses a non-reentrant model
 14165 ;;
 14166                           
 14167                           	psect	text63
 14168  0057F2                     __ptext63:
 14169                           	callstack 0
 14170  0057F2                     _abs:
 14171                           	callstack 17
 14172                           
 14173                           ; BSR set to: 0
 14174                           
 14175                           ;incstack = 0
 14176  0057F2  BE25               	btfsc	(abs@a+1)^0,7,c
 14177  0057F4  D005               	goto	u5980
 14178  0057F6  5025               	movf	(abs@a+1)^0,w,c
 14179  0057F8  E110               	bnz	l1628
 14180  0057FA  0424               	decf	abs@a^0,w,c
 14181  0057FC  B0D8               	btfsc	status,0,c
 14182  0057FE  D00D               	goto	l1628
 14183  005800                     u5980:
 14184                           
 14185                           ; BSR set to: 0
 14186  005800  C024  F026         	movff	abs@a,??_abs
 14187  005804  C025  F027         	movff	abs@a+1,??_abs+1
 14188  005808  1E26               	comf	??_abs^0,f,c
 14189  00580A  1E27               	comf	(??_abs+1)^0,f,c
 14190  00580C  4A26               	infsnz	??_abs^0,f,c
 14191  00580E  2A27               	incf	(??_abs+1)^0,f,c
 14192  005810  C026  F024         	movff	??_abs,?_abs
 14193  005814  C027  F025         	movff	??_abs+1,?_abs+1
 14194  005818  0012               	return	
 14195  00581A                     l1628:
 14196                           
 14197                           ; BSR set to: 0
 14198  00581A  C024  F024         	movff	abs@a,?_abs
 14199  00581E  C025  F025         	movff	abs@a+1,?_abs+1
 14200                           
 14201                           ; BSR set to: 0
 14202  005822  0012               	return		;funcret
 14203  005824                     __end_of_abs:
 14204                           	callstack 0
 14205                           
 14206 ;; *************** function ___aomod *****************
 14207 ;; Defined at:
 14208 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\aomod.c"
 14209 ;; Parameters:    Size  Location     Type
 14210 ;;  dividend        8   17[COMRAM] long long 
 14211 ;;  divisor         8   25[COMRAM] long long 
 14212 ;; Auto vars:     Size  Location     Type
 14213 ;;  sign            1   34[COMRAM] unsigned char 
 14214 ;;  counter         1   33[COMRAM] unsigned char 
 14215 ;; Return value:  Size  Location     Type
 14216 ;;                  8   17[COMRAM] long long 
 14217 ;; Registers used:
 14218 ;;		wreg, status,2, status,0
 14219 ;; Tracked objects:
 14220 ;;		On entry : 3F/0
 14221 ;;		On exit  : 3F/0
 14222 ;;		Unchanged: 3F/0
 14223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14224 ;;      Params:        16       0       0       0       0       0       0
 14225 ;;      Locals:         2       0       0       0       0       0       0
 14226 ;;      Temps:          0       0       0       0       0       0       0
 14227 ;;      Totals:        18       0       0       0       0       0       0
 14228 ;;Total ram usage:       18 bytes
 14229 ;; Hardware stack levels used: 1
 14230 ;; Hardware stack levels required when called: 4
 14231 ;; This function calls:
 14232 ;;		Nothing
 14233 ;; This function is called by:
 14234 ;;		_dtoa
 14235 ;; This function uses a non-reentrant model
 14236 ;;
 14237                           
 14238                           	psect	text64
 14239  003C08                     __ptext64:
 14240                           	callstack 0
 14241  003C08                     ___aomod:
 14242                           	callstack 17
 14243                           
 14244                           ; BSR set to: 0
 14245                           
 14246                           ; BSR set to: 0
 14247                           ;incstack = 0
 14248  003C08  0E00               	movlw	0
 14249  003C0A  6E23               	movwf	___aomod@sign^0,c
 14250                           
 14251                           ; BSR set to: 0
 14252  003C0C  AE19               	btfss	(___aomod@dividend+7)^0,7,c
 14253  003C0E  D012               	goto	l8254
 14254                           
 14255                           ; BSR set to: 0
 14256  003C10  1E19               	comf	(___aomod@dividend+7)^0,f,c
 14257  003C12  1E18               	comf	(___aomod@dividend+6)^0,f,c
 14258  003C14  1E17               	comf	(___aomod@dividend+5)^0,f,c
 14259  003C16  1E16               	comf	(___aomod@dividend+4)^0,f,c
 14260  003C18  1E15               	comf	(___aomod@dividend+3)^0,f,c
 14261  003C1A  1E14               	comf	(___aomod@dividend+2)^0,f,c
 14262  003C1C  1E13               	comf	(___aomod@dividend+1)^0,f,c
 14263  003C1E  6C12               	negf	___aomod@dividend^0,c
 14264  003C20  0E00               	movlw	0
 14265  003C22  2213               	addwfc	(___aomod@dividend+1)^0,f,c
 14266  003C24  2214               	addwfc	(___aomod@dividend+2)^0,f,c
 14267  003C26  2215               	addwfc	(___aomod@dividend+3)^0,f,c
 14268  003C28  2216               	addwfc	(___aomod@dividend+4)^0,f,c
 14269  003C2A  2217               	addwfc	(___aomod@dividend+5)^0,f,c
 14270  003C2C  2218               	addwfc	(___aomod@dividend+6)^0,f,c
 14271  003C2E  2219               	addwfc	(___aomod@dividend+7)^0,f,c
 14272                           
 14273                           ; BSR set to: 0
 14274  003C30  0E01               	movlw	1
 14275  003C32  6E23               	movwf	___aomod@sign^0,c
 14276  003C34                     l8254:
 14277                           
 14278                           ; BSR set to: 0
 14279  003C34  AE21               	btfss	(___aomod@divisor+7)^0,7,c
 14280  003C36  D010               	goto	l8258
 14281                           
 14282                           ; BSR set to: 0
 14283  003C38  1E21               	comf	(___aomod@divisor+7)^0,f,c
 14284  003C3A  1E20               	comf	(___aomod@divisor+6)^0,f,c
 14285  003C3C  1E1F               	comf	(___aomod@divisor+5)^0,f,c
 14286  003C3E  1E1E               	comf	(___aomod@divisor+4)^0,f,c
 14287  003C40  1E1D               	comf	(___aomod@divisor+3)^0,f,c
 14288  003C42  1E1C               	comf	(___aomod@divisor+2)^0,f,c
 14289  003C44  1E1B               	comf	(___aomod@divisor+1)^0,f,c
 14290  003C46  6C1A               	negf	___aomod@divisor^0,c
 14291  003C48  0E00               	movlw	0
 14292  003C4A  221B               	addwfc	(___aomod@divisor+1)^0,f,c
 14293  003C4C  221C               	addwfc	(___aomod@divisor+2)^0,f,c
 14294  003C4E  221D               	addwfc	(___aomod@divisor+3)^0,f,c
 14295  003C50  221E               	addwfc	(___aomod@divisor+4)^0,f,c
 14296  003C52  221F               	addwfc	(___aomod@divisor+5)^0,f,c
 14297  003C54  2220               	addwfc	(___aomod@divisor+6)^0,f,c
 14298  003C56  2221               	addwfc	(___aomod@divisor+7)^0,f,c
 14299  003C58                     l8258:
 14300                           
 14301                           ; BSR set to: 0
 14302  003C58  501A               	movf	___aomod@divisor^0,w,c
 14303  003C5A  101B               	iorwf	(___aomod@divisor+1)^0,w,c
 14304  003C5C  101C               	iorwf	(___aomod@divisor+2)^0,w,c
 14305  003C5E  101D               	iorwf	(___aomod@divisor+3)^0,w,c
 14306  003C60  101E               	iorwf	(___aomod@divisor+4)^0,w,c
 14307  003C62  101F               	iorwf	(___aomod@divisor+5)^0,w,c
 14308  003C64  1020               	iorwf	(___aomod@divisor+6)^0,w,c
 14309  003C66  1021               	iorwf	(___aomod@divisor+7)^0,w,c
 14310  003C68  B4D8               	btfsc	status,2,c
 14311  003C6A  D03C               	goto	l8274
 14312                           
 14313                           ; BSR set to: 0
 14314  003C6C  0E01               	movlw	1
 14315  003C6E  6E22               	movwf	___aomod@counter^0,c
 14316  003C70  D00A               	goto	l8264
 14317  003C72                     l8262:
 14318                           
 14319                           ; BSR set to: 0
 14320  003C72  90D8               	bcf	status,0,c
 14321  003C74  361A               	rlcf	___aomod@divisor^0,f,c
 14322  003C76  361B               	rlcf	(___aomod@divisor+1)^0,f,c
 14323  003C78  361C               	rlcf	(___aomod@divisor+2)^0,f,c
 14324  003C7A  361D               	rlcf	(___aomod@divisor+3)^0,f,c
 14325  003C7C  361E               	rlcf	(___aomod@divisor+4)^0,f,c
 14326  003C7E  361F               	rlcf	(___aomod@divisor+5)^0,f,c
 14327  003C80  3620               	rlcf	(___aomod@divisor+6)^0,f,c
 14328  003C82  3621               	rlcf	(___aomod@divisor+7)^0,f,c
 14329  003C84  2A22               	incf	___aomod@counter^0,f,c
 14330  003C86                     l8264:
 14331                           
 14332                           ; BSR set to: 0
 14333  003C86  AE21               	btfss	(___aomod@divisor+7)^0,7,c
 14334  003C88  D7F4               	goto	l8262
 14335  003C8A                     u5910:
 14336                           
 14337                           ; BSR set to: 0
 14338  003C8A  501A               	movf	___aomod@divisor^0,w,c
 14339  003C8C  5C12               	subwf	___aomod@dividend^0,w,c
 14340  003C8E  501B               	movf	(___aomod@divisor+1)^0,w,c
 14341  003C90  5813               	subwfb	(___aomod@dividend+1)^0,w,c
 14342  003C92  501C               	movf	(___aomod@divisor+2)^0,w,c
 14343  003C94  5814               	subwfb	(___aomod@dividend+2)^0,w,c
 14344  003C96  501D               	movf	(___aomod@divisor+3)^0,w,c
 14345  003C98  5815               	subwfb	(___aomod@dividend+3)^0,w,c
 14346  003C9A  501E               	movf	(___aomod@divisor+4)^0,w,c
 14347  003C9C  5816               	subwfb	(___aomod@dividend+4)^0,w,c
 14348  003C9E  501F               	movf	(___aomod@divisor+5)^0,w,c
 14349  003CA0  5817               	subwfb	(___aomod@dividend+5)^0,w,c
 14350  003CA2  5020               	movf	(___aomod@divisor+6)^0,w,c
 14351  003CA4  5818               	subwfb	(___aomod@dividend+6)^0,w,c
 14352  003CA6  5021               	movf	(___aomod@divisor+7)^0,w,c
 14353  003CA8  5819               	subwfb	(___aomod@dividend+7)^0,w,c
 14354  003CAA  A0D8               	btfss	status,0,c
 14355  003CAC  D010               	goto	l8270
 14356                           
 14357                           ; BSR set to: 0
 14358  003CAE  501A               	movf	___aomod@divisor^0,w,c
 14359  003CB0  5E12               	subwf	___aomod@dividend^0,f,c
 14360  003CB2  501B               	movf	(___aomod@divisor+1)^0,w,c
 14361  003CB4  5A13               	subwfb	(___aomod@dividend+1)^0,f,c
 14362  003CB6  501C               	movf	(___aomod@divisor+2)^0,w,c
 14363  003CB8  5A14               	subwfb	(___aomod@dividend+2)^0,f,c
 14364  003CBA  501D               	movf	(___aomod@divisor+3)^0,w,c
 14365  003CBC  5A15               	subwfb	(___aomod@dividend+3)^0,f,c
 14366  003CBE  501E               	movf	(___aomod@divisor+4)^0,w,c
 14367  003CC0  5A16               	subwfb	(___aomod@dividend+4)^0,f,c
 14368  003CC2  501F               	movf	(___aomod@divisor+5)^0,w,c
 14369  003CC4  5A17               	subwfb	(___aomod@dividend+5)^0,f,c
 14370  003CC6  5020               	movf	(___aomod@divisor+6)^0,w,c
 14371  003CC8  5A18               	subwfb	(___aomod@dividend+6)^0,f,c
 14372  003CCA  5021               	movf	(___aomod@divisor+7)^0,w,c
 14373  003CCC  5A19               	subwfb	(___aomod@dividend+7)^0,f,c
 14374  003CCE                     l8270:
 14375                           
 14376                           ; BSR set to: 0
 14377  003CCE  90D8               	bcf	status,0,c
 14378  003CD0  3221               	rrcf	(___aomod@divisor+7)^0,f,c
 14379  003CD2  3220               	rrcf	(___aomod@divisor+6)^0,f,c
 14380  003CD4  321F               	rrcf	(___aomod@divisor+5)^0,f,c
 14381  003CD6  321E               	rrcf	(___aomod@divisor+4)^0,f,c
 14382  003CD8  321D               	rrcf	(___aomod@divisor+3)^0,f,c
 14383  003CDA  321C               	rrcf	(___aomod@divisor+2)^0,f,c
 14384  003CDC  321B               	rrcf	(___aomod@divisor+1)^0,f,c
 14385  003CDE  321A               	rrcf	___aomod@divisor^0,f,c
 14386                           
 14387                           ; BSR set to: 0
 14388  003CE0  2E22               	decfsz	___aomod@counter^0,f,c
 14389  003CE2  D7D3               	goto	u5910
 14390  003CE4                     l8274:
 14391                           
 14392                           ; BSR set to: 0
 14393  003CE4  5023               	movf	___aomod@sign^0,w,c
 14394  003CE6  B4D8               	btfsc	status,2,c
 14395  003CE8  D010               	goto	l8278
 14396                           
 14397                           ; BSR set to: 0
 14398  003CEA  1E19               	comf	(___aomod@dividend+7)^0,f,c
 14399  003CEC  1E18               	comf	(___aomod@dividend+6)^0,f,c
 14400  003CEE  1E17               	comf	(___aomod@dividend+5)^0,f,c
 14401  003CF0  1E16               	comf	(___aomod@dividend+4)^0,f,c
 14402  003CF2  1E15               	comf	(___aomod@dividend+3)^0,f,c
 14403  003CF4  1E14               	comf	(___aomod@dividend+2)^0,f,c
 14404  003CF6  1E13               	comf	(___aomod@dividend+1)^0,f,c
 14405  003CF8  6C12               	negf	___aomod@dividend^0,c
 14406  003CFA  0E00               	movlw	0
 14407  003CFC  2213               	addwfc	(___aomod@dividend+1)^0,f,c
 14408  003CFE  2214               	addwfc	(___aomod@dividend+2)^0,f,c
 14409  003D00  2215               	addwfc	(___aomod@dividend+3)^0,f,c
 14410  003D02  2216               	addwfc	(___aomod@dividend+4)^0,f,c
 14411  003D04  2217               	addwfc	(___aomod@dividend+5)^0,f,c
 14412  003D06  2218               	addwfc	(___aomod@dividend+6)^0,f,c
 14413  003D08  2219               	addwfc	(___aomod@dividend+7)^0,f,c
 14414  003D0A                     l8278:
 14415                           
 14416                           ; BSR set to: 0
 14417  003D0A  C012  F012         	movff	___aomod@dividend,?___aomod
 14418  003D0E  C013  F013         	movff	___aomod@dividend+1,?___aomod+1
 14419  003D12  C014  F014         	movff	___aomod@dividend+2,?___aomod+2
 14420  003D16  C015  F015         	movff	___aomod@dividend+3,?___aomod+3
 14421  003D1A  C016  F016         	movff	___aomod@dividend+4,?___aomod+4
 14422  003D1E  C017  F017         	movff	___aomod@dividend+5,?___aomod+5
 14423  003D22  C018  F018         	movff	___aomod@dividend+6,?___aomod+6
 14424  003D26  C019  F019         	movff	___aomod@dividend+7,?___aomod+7
 14425                           
 14426                           ; BSR set to: 0
 14427  003D2A  0012               	return		;funcret
 14428  003D2C                     __end_of___aomod:
 14429                           	callstack 0
 14430                           
 14431 ;; *************** function ___aodiv *****************
 14432 ;; Defined at:
 14433 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\aodiv.c"
 14434 ;; Parameters:    Size  Location     Type
 14435 ;;  dividend        8   17[COMRAM] long long 
 14436 ;;  divisor         8   25[COMRAM] long long 
 14437 ;; Auto vars:     Size  Location     Type
 14438 ;;  quotient        8   35[COMRAM] long long 
 14439 ;;  sign            1   34[COMRAM] unsigned char 
 14440 ;;  counter         1   33[COMRAM] unsigned char 
 14441 ;; Return value:  Size  Location     Type
 14442 ;;                  8   17[COMRAM] long long 
 14443 ;; Registers used:
 14444 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14445 ;; Tracked objects:
 14446 ;;		On entry : 3F/0
 14447 ;;		On exit  : 3F/0
 14448 ;;		Unchanged: 3F/0
 14449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14450 ;;      Params:        16       0       0       0       0       0       0
 14451 ;;      Locals:        10       0       0       0       0       0       0
 14452 ;;      Temps:          0       0       0       0       0       0       0
 14453 ;;      Totals:        26       0       0       0       0       0       0
 14454 ;;Total ram usage:       26 bytes
 14455 ;; Hardware stack levels used: 1
 14456 ;; Hardware stack levels required when called: 4
 14457 ;; This function calls:
 14458 ;;		Nothing
 14459 ;; This function is called by:
 14460 ;;		_dtoa
 14461 ;; This function uses a non-reentrant model
 14462 ;;
 14463                           
 14464                           	psect	text65
 14465  003710                     __ptext65:
 14466                           	callstack 0
 14467  003710                     ___aodiv:
 14468                           	callstack 17
 14469                           
 14470                           ; BSR set to: 0
 14471                           
 14472                           ; BSR set to: 0
 14473                           ;incstack = 0
 14474  003710  0E00               	movlw	0
 14475  003712  6E23               	movwf	___aodiv@sign^0,c
 14476                           
 14477                           ; BSR set to: 0
 14478  003714  AE21               	btfss	(___aodiv@divisor+7)^0,7,c
 14479  003716  D012               	goto	l8210
 14480                           
 14481                           ; BSR set to: 0
 14482  003718  1E21               	comf	(___aodiv@divisor+7)^0,f,c
 14483  00371A  1E20               	comf	(___aodiv@divisor+6)^0,f,c
 14484  00371C  1E1F               	comf	(___aodiv@divisor+5)^0,f,c
 14485  00371E  1E1E               	comf	(___aodiv@divisor+4)^0,f,c
 14486  003720  1E1D               	comf	(___aodiv@divisor+3)^0,f,c
 14487  003722  1E1C               	comf	(___aodiv@divisor+2)^0,f,c
 14488  003724  1E1B               	comf	(___aodiv@divisor+1)^0,f,c
 14489  003726  6C1A               	negf	___aodiv@divisor^0,c
 14490  003728  0E00               	movlw	0
 14491  00372A  221B               	addwfc	(___aodiv@divisor+1)^0,f,c
 14492  00372C  221C               	addwfc	(___aodiv@divisor+2)^0,f,c
 14493  00372E  221D               	addwfc	(___aodiv@divisor+3)^0,f,c
 14494  003730  221E               	addwfc	(___aodiv@divisor+4)^0,f,c
 14495  003732  221F               	addwfc	(___aodiv@divisor+5)^0,f,c
 14496  003734  2220               	addwfc	(___aodiv@divisor+6)^0,f,c
 14497  003736  2221               	addwfc	(___aodiv@divisor+7)^0,f,c
 14498                           
 14499                           ; BSR set to: 0
 14500  003738  0E01               	movlw	1
 14501  00373A  6E23               	movwf	___aodiv@sign^0,c
 14502  00373C                     l8210:
 14503                           
 14504                           ; BSR set to: 0
 14505  00373C  AE19               	btfss	(___aodiv@dividend+7)^0,7,c
 14506  00373E  D012               	goto	l8216
 14507                           
 14508                           ; BSR set to: 0
 14509  003740  1E19               	comf	(___aodiv@dividend+7)^0,f,c
 14510  003742  1E18               	comf	(___aodiv@dividend+6)^0,f,c
 14511  003744  1E17               	comf	(___aodiv@dividend+5)^0,f,c
 14512  003746  1E16               	comf	(___aodiv@dividend+4)^0,f,c
 14513  003748  1E15               	comf	(___aodiv@dividend+3)^0,f,c
 14514  00374A  1E14               	comf	(___aodiv@dividend+2)^0,f,c
 14515  00374C  1E13               	comf	(___aodiv@dividend+1)^0,f,c
 14516  00374E  6C12               	negf	___aodiv@dividend^0,c
 14517  003750  0E00               	movlw	0
 14518  003752  2213               	addwfc	(___aodiv@dividend+1)^0,f,c
 14519  003754  2214               	addwfc	(___aodiv@dividend+2)^0,f,c
 14520  003756  2215               	addwfc	(___aodiv@dividend+3)^0,f,c
 14521  003758  2216               	addwfc	(___aodiv@dividend+4)^0,f,c
 14522  00375A  2217               	addwfc	(___aodiv@dividend+5)^0,f,c
 14523  00375C  2218               	addwfc	(___aodiv@dividend+6)^0,f,c
 14524  00375E  2219               	addwfc	(___aodiv@dividend+7)^0,f,c
 14525                           
 14526                           ; BSR set to: 0
 14527  003760  0E01               	movlw	1
 14528  003762  1A23               	xorwf	___aodiv@sign^0,f,c
 14529  003764                     l8216:
 14530                           
 14531                           ; BSR set to: 0
 14532  003764  EE20  F024         	lfsr	2,___aodiv@quotient
 14533  003768  0E07               	movlw	7
 14534  00376A                     u5831:
 14535  00376A  6ADE               	clrf	postinc2,c
 14536  00376C  06E8               	decf	wreg,f,c
 14537  00376E  E2FD               	bc	u5831
 14538                           
 14539                           ; BSR set to: 0
 14540  003770  501A               	movf	___aodiv@divisor^0,w,c
 14541  003772  101B               	iorwf	(___aodiv@divisor+1)^0,w,c
 14542  003774  101C               	iorwf	(___aodiv@divisor+2)^0,w,c
 14543  003776  101D               	iorwf	(___aodiv@divisor+3)^0,w,c
 14544  003778  101E               	iorwf	(___aodiv@divisor+4)^0,w,c
 14545  00377A  101F               	iorwf	(___aodiv@divisor+5)^0,w,c
 14546  00377C  1020               	iorwf	(___aodiv@divisor+6)^0,w,c
 14547  00377E  1021               	iorwf	(___aodiv@divisor+7)^0,w,c
 14548  003780  B4D8               	btfsc	status,2,c
 14549  003782  D046               	goto	l8238
 14550                           
 14551                           ; BSR set to: 0
 14552  003784  0E01               	movlw	1
 14553  003786  6E22               	movwf	___aodiv@counter^0,c
 14554  003788  D00A               	goto	l8224
 14555  00378A                     l8222:
 14556                           
 14557                           ; BSR set to: 0
 14558  00378A  90D8               	bcf	status,0,c
 14559  00378C  361A               	rlcf	___aodiv@divisor^0,f,c
 14560  00378E  361B               	rlcf	(___aodiv@divisor+1)^0,f,c
 14561  003790  361C               	rlcf	(___aodiv@divisor+2)^0,f,c
 14562  003792  361D               	rlcf	(___aodiv@divisor+3)^0,f,c
 14563  003794  361E               	rlcf	(___aodiv@divisor+4)^0,f,c
 14564  003796  361F               	rlcf	(___aodiv@divisor+5)^0,f,c
 14565  003798  3620               	rlcf	(___aodiv@divisor+6)^0,f,c
 14566  00379A  3621               	rlcf	(___aodiv@divisor+7)^0,f,c
 14567  00379C  2A22               	incf	___aodiv@counter^0,f,c
 14568  00379E                     l8224:
 14569                           
 14570                           ; BSR set to: 0
 14571  00379E  AE21               	btfss	(___aodiv@divisor+7)^0,7,c
 14572  0037A0  D7F4               	goto	l8222
 14573  0037A2                     u5850:
 14574                           
 14575                           ; BSR set to: 0
 14576  0037A2  90D8               	bcf	status,0,c
 14577  0037A4  3624               	rlcf	___aodiv@quotient^0,f,c
 14578  0037A6  3625               	rlcf	(___aodiv@quotient+1)^0,f,c
 14579  0037A8  3626               	rlcf	(___aodiv@quotient+2)^0,f,c
 14580  0037AA  3627               	rlcf	(___aodiv@quotient+3)^0,f,c
 14581  0037AC  3628               	rlcf	(___aodiv@quotient+4)^0,f,c
 14582  0037AE  3629               	rlcf	(___aodiv@quotient+5)^0,f,c
 14583  0037B0  362A               	rlcf	(___aodiv@quotient+6)^0,f,c
 14584  0037B2  362B               	rlcf	(___aodiv@quotient+7)^0,f,c
 14585                           
 14586                           ; BSR set to: 0
 14587  0037B4  501A               	movf	___aodiv@divisor^0,w,c
 14588  0037B6  5C12               	subwf	___aodiv@dividend^0,w,c
 14589  0037B8  501B               	movf	(___aodiv@divisor+1)^0,w,c
 14590  0037BA  5813               	subwfb	(___aodiv@dividend+1)^0,w,c
 14591  0037BC  501C               	movf	(___aodiv@divisor+2)^0,w,c
 14592  0037BE  5814               	subwfb	(___aodiv@dividend+2)^0,w,c
 14593  0037C0  501D               	movf	(___aodiv@divisor+3)^0,w,c
 14594  0037C2  5815               	subwfb	(___aodiv@dividend+3)^0,w,c
 14595  0037C4  501E               	movf	(___aodiv@divisor+4)^0,w,c
 14596  0037C6  5816               	subwfb	(___aodiv@dividend+4)^0,w,c
 14597  0037C8  501F               	movf	(___aodiv@divisor+5)^0,w,c
 14598  0037CA  5817               	subwfb	(___aodiv@dividend+5)^0,w,c
 14599  0037CC  5020               	movf	(___aodiv@divisor+6)^0,w,c
 14600  0037CE  5818               	subwfb	(___aodiv@dividend+6)^0,w,c
 14601  0037D0  5021               	movf	(___aodiv@divisor+7)^0,w,c
 14602  0037D2  5819               	subwfb	(___aodiv@dividend+7)^0,w,c
 14603  0037D4  A0D8               	btfss	status,0,c
 14604  0037D6  D011               	goto	l8234
 14605                           
 14606                           ; BSR set to: 0
 14607  0037D8  501A               	movf	___aodiv@divisor^0,w,c
 14608  0037DA  5E12               	subwf	___aodiv@dividend^0,f,c
 14609  0037DC  501B               	movf	(___aodiv@divisor+1)^0,w,c
 14610  0037DE  5A13               	subwfb	(___aodiv@dividend+1)^0,f,c
 14611  0037E0  501C               	movf	(___aodiv@divisor+2)^0,w,c
 14612  0037E2  5A14               	subwfb	(___aodiv@dividend+2)^0,f,c
 14613  0037E4  501D               	movf	(___aodiv@divisor+3)^0,w,c
 14614  0037E6  5A15               	subwfb	(___aodiv@dividend+3)^0,f,c
 14615  0037E8  501E               	movf	(___aodiv@divisor+4)^0,w,c
 14616  0037EA  5A16               	subwfb	(___aodiv@dividend+4)^0,f,c
 14617  0037EC  501F               	movf	(___aodiv@divisor+5)^0,w,c
 14618  0037EE  5A17               	subwfb	(___aodiv@dividend+5)^0,f,c
 14619  0037F0  5020               	movf	(___aodiv@divisor+6)^0,w,c
 14620  0037F2  5A18               	subwfb	(___aodiv@dividend+6)^0,f,c
 14621  0037F4  5021               	movf	(___aodiv@divisor+7)^0,w,c
 14622  0037F6  5A19               	subwfb	(___aodiv@dividend+7)^0,f,c
 14623                           
 14624                           ; BSR set to: 0
 14625  0037F8  8024               	bsf	___aodiv@quotient^0,0,c
 14626  0037FA                     l8234:
 14627                           
 14628                           ; BSR set to: 0
 14629  0037FA  90D8               	bcf	status,0,c
 14630  0037FC  3221               	rrcf	(___aodiv@divisor+7)^0,f,c
 14631  0037FE  3220               	rrcf	(___aodiv@divisor+6)^0,f,c
 14632  003800  321F               	rrcf	(___aodiv@divisor+5)^0,f,c
 14633  003802  321E               	rrcf	(___aodiv@divisor+4)^0,f,c
 14634  003804  321D               	rrcf	(___aodiv@divisor+3)^0,f,c
 14635  003806  321C               	rrcf	(___aodiv@divisor+2)^0,f,c
 14636  003808  321B               	rrcf	(___aodiv@divisor+1)^0,f,c
 14637  00380A  321A               	rrcf	___aodiv@divisor^0,f,c
 14638                           
 14639                           ; BSR set to: 0
 14640  00380C  2E22               	decfsz	___aodiv@counter^0,f,c
 14641  00380E  D7C9               	goto	u5850
 14642  003810                     l8238:
 14643                           
 14644                           ; BSR set to: 0
 14645  003810  5023               	movf	___aodiv@sign^0,w,c
 14646  003812  B4D8               	btfsc	status,2,c
 14647  003814  D010               	goto	l8242
 14648                           
 14649                           ; BSR set to: 0
 14650  003816  1E2B               	comf	(___aodiv@quotient+7)^0,f,c
 14651  003818  1E2A               	comf	(___aodiv@quotient+6)^0,f,c
 14652  00381A  1E29               	comf	(___aodiv@quotient+5)^0,f,c
 14653  00381C  1E28               	comf	(___aodiv@quotient+4)^0,f,c
 14654  00381E  1E27               	comf	(___aodiv@quotient+3)^0,f,c
 14655  003820  1E26               	comf	(___aodiv@quotient+2)^0,f,c
 14656  003822  1E25               	comf	(___aodiv@quotient+1)^0,f,c
 14657  003824  6C24               	negf	___aodiv@quotient^0,c
 14658  003826  0E00               	movlw	0
 14659  003828  2225               	addwfc	(___aodiv@quotient+1)^0,f,c
 14660  00382A  2226               	addwfc	(___aodiv@quotient+2)^0,f,c
 14661  00382C  2227               	addwfc	(___aodiv@quotient+3)^0,f,c
 14662  00382E  2228               	addwfc	(___aodiv@quotient+4)^0,f,c
 14663  003830  2229               	addwfc	(___aodiv@quotient+5)^0,f,c
 14664  003832  222A               	addwfc	(___aodiv@quotient+6)^0,f,c
 14665  003834  222B               	addwfc	(___aodiv@quotient+7)^0,f,c
 14666  003836                     l8242:
 14667                           
 14668                           ; BSR set to: 0
 14669  003836  C024  F012         	movff	___aodiv@quotient,?___aodiv
 14670  00383A  C025  F013         	movff	___aodiv@quotient+1,?___aodiv+1
 14671  00383E  C026  F014         	movff	___aodiv@quotient+2,?___aodiv+2
 14672  003842  C027  F015         	movff	___aodiv@quotient+3,?___aodiv+3
 14673  003846  C028  F016         	movff	___aodiv@quotient+4,?___aodiv+4
 14674  00384A  C029  F017         	movff	___aodiv@quotient+5,?___aodiv+5
 14675  00384E  C02A  F018         	movff	___aodiv@quotient+6,?___aodiv+6
 14676  003852  C02B  F019         	movff	___aodiv@quotient+7,?___aodiv+7
 14677                           
 14678                           ; BSR set to: 0
 14679  003856  0012               	return		;funcret
 14680  003858                     __end_of___aodiv:
 14681                           	callstack 0
 14682                           
 14683 ;; *************** function _Paddle_draw *****************
 14684 ;; Defined at:
 14685 ;;		line 55 in file "class/paddle.c"
 14686 ;; Parameters:    Size  Location     Type
 14687 ;;  p               2   36[COMRAM] PTR struct Paddle
 14688 ;;		 -> g1(240), 
 14689 ;; Auto vars:     Size  Location     Type
 14690 ;;		None
 14691 ;; Return value:  Size  Location     Type
 14692 ;;                  1    wreg      void 
 14693 ;; Registers used:
 14694 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14695 ;; Tracked objects:
 14696 ;;		On entry : 3F/0
 14697 ;;		On exit  : 0/0
 14698 ;;		Unchanged: 0/0
 14699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14700 ;;      Params:         2       0       0       0       0       0       0
 14701 ;;      Locals:         0       0       0       0       0       0       0
 14702 ;;      Temps:          4       0       0       0       0       0       0
 14703 ;;      Totals:         6       0       0       0       0       0       0
 14704 ;;Total ram usage:        6 bytes
 14705 ;; Hardware stack levels used: 1
 14706 ;; Hardware stack levels required when called: 5
 14707 ;; This function calls:
 14708 ;;		_LCD_DrawRect
 14709 ;; This function is called by:
 14710 ;;		_Menu_inGameDraw
 14711 ;;		_displayController
 14712 ;; This function uses a non-reentrant model
 14713 ;;
 14714                           
 14715                           	psect	text66
 14716  003AD6                     __ptext66:
 14717                           	callstack 0
 14718  003AD6                     _Paddle_draw:
 14719                           	callstack 21
 14720                           
 14721                           ; BSR set to: 0
 14722                           ;class/paddle.c: 55: void Paddle_draw(struct Paddle* p);class/paddle.c: 56: {;class/padd
      +                          le.c: 58:     LCD_DrawRect(p->oldx,p->oldy,p->oldx+50,p->oldy+10,1,0b0000000000000000);
 14723                           
 14724                           ; BSR set to: 0
 14725                           ;incstack = 0
 14726  003AD6  EE20 F004          	lfsr	2,4
 14727  003ADA  5025               	movf	Paddle_draw@p^0,w,c
 14728  003ADC  26D9               	addwf	fsr2l,f,c
 14729  003ADE  5026               	movf	(Paddle_draw@p+1)^0,w,c
 14730  003AE0  22DA               	addwfc	fsr2h,f,c
 14731  003AE2  CFDE F012          	movff	postinc2,LCD_DrawRect@posX1
 14732  003AE6  CFDD F013          	movff	postdec2,LCD_DrawRect@posX1+1
 14733  003AEA  EE20 F006          	lfsr	2,6
 14734  003AEE  5025               	movf	Paddle_draw@p^0,w,c
 14735  003AF0  26D9               	addwf	fsr2l,f,c
 14736  003AF2  5026               	movf	(Paddle_draw@p+1)^0,w,c
 14737  003AF4  22DA               	addwfc	fsr2h,f,c
 14738  003AF6  CFDE F014          	movff	postinc2,LCD_DrawRect@posY1
 14739  003AFA  CFDD F015          	movff	postdec2,LCD_DrawRect@posY1+1
 14740  003AFE  EE20 F004          	lfsr	2,4
 14741  003B02  5025               	movf	Paddle_draw@p^0,w,c
 14742  003B04  26D9               	addwf	fsr2l,f,c
 14743  003B06  5026               	movf	(Paddle_draw@p+1)^0,w,c
 14744  003B08  22DA               	addwfc	fsr2h,f,c
 14745  003B0A  CFDE F027          	movff	postinc2,??_Paddle_draw
 14746  003B0E  CFDD F028          	movff	postdec2,??_Paddle_draw+1
 14747  003B12  0E32               	movlw	50
 14748  003B14  2427               	addwf	??_Paddle_draw^0,w,c
 14749  003B16  6E16               	movwf	LCD_DrawRect@posX2^0,c
 14750  003B18  0E00               	movlw	0
 14751  003B1A  2028               	addwfc	(??_Paddle_draw+1)^0,w,c
 14752  003B1C  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 14753  003B1E  EE20 F006          	lfsr	2,6
 14754  003B22  5025               	movf	Paddle_draw@p^0,w,c
 14755  003B24  26D9               	addwf	fsr2l,f,c
 14756  003B26  5026               	movf	(Paddle_draw@p+1)^0,w,c
 14757  003B28  22DA               	addwfc	fsr2h,f,c
 14758  003B2A  CFDE F029          	movff	postinc2,??_Paddle_draw+2
 14759  003B2E  CFDD F02A          	movff	postdec2,??_Paddle_draw+3
 14760  003B32  0E0A               	movlw	10
 14761  003B34  2429               	addwf	(??_Paddle_draw+2)^0,w,c
 14762  003B36  6E18               	movwf	LCD_DrawRect@posY2^0,c
 14763  003B38  0E00               	movlw	0
 14764  003B3A  202A               	addwfc	(??_Paddle_draw+3)^0,w,c
 14765  003B3C  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 14766  003B3E  0E01               	movlw	1
 14767  003B40  6E1A               	movwf	LCD_DrawRect@fill^0,c
 14768  003B42  0E00               	movlw	0
 14769  003B44  6E1C               	movwf	(LCD_DrawRect@color+1)^0,c
 14770  003B46  0E00               	movlw	0
 14771  003B48  6E1B               	movwf	LCD_DrawRect@color^0,c
 14772  003B4A  EC34  F013         	call	_LCD_DrawRect	;wreg free
 14773                           
 14774                           ;class/paddle.c: 60:     p->oldx=p->x;
 14775  003B4E  C025  FFD9         	movff	Paddle_draw@p,fsr2l
 14776  003B52  C026  FFDA         	movff	Paddle_draw@p+1,fsr2h
 14777  003B56  EE10 F004          	lfsr	1,4
 14778  003B5A  5025               	movf	Paddle_draw@p^0,w,c
 14779  003B5C  26E1               	addwf	fsr1l,f,c
 14780  003B5E  5026               	movf	(Paddle_draw@p+1)^0,w,c
 14781  003B60  22E2               	addwfc	fsr1h,f,c
 14782  003B62  CFDE FFE6          	movff	postinc2,postinc1
 14783  003B66  CFDD FFE5          	movff	postdec2,postdec1
 14784                           
 14785                           ;class/paddle.c: 61:     p->oldy=p->y;
 14786  003B6A  EE20 F002          	lfsr	2,2
 14787  003B6E  5025               	movf	Paddle_draw@p^0,w,c
 14788  003B70  26D9               	addwf	fsr2l,f,c
 14789  003B72  5026               	movf	(Paddle_draw@p+1)^0,w,c
 14790  003B74  22DA               	addwfc	fsr2h,f,c
 14791  003B76  EE10 F006          	lfsr	1,6
 14792  003B7A  5025               	movf	Paddle_draw@p^0,w,c
 14793  003B7C  26E1               	addwf	fsr1l,f,c
 14794  003B7E  5026               	movf	(Paddle_draw@p+1)^0,w,c
 14795  003B80  22E2               	addwfc	fsr1h,f,c
 14796  003B82  CFDE FFE6          	movff	postinc2,postinc1
 14797  003B86  CFDD FFE5          	movff	postdec2,postdec1
 14798                           
 14799                           ;class/paddle.c: 63:     LCD_DrawRect(p->x,p->y,p->x+50,p->y+10,1,p->color);
 14800  003B8A  C025  FFD9         	movff	Paddle_draw@p,fsr2l
 14801  003B8E  C026  FFDA         	movff	Paddle_draw@p+1,fsr2h
 14802  003B92  CFDE F012          	movff	postinc2,LCD_DrawRect@posX1
 14803  003B96  CFDD F013          	movff	postdec2,LCD_DrawRect@posX1+1
 14804  003B9A  EE20 F002          	lfsr	2,2
 14805  003B9E  5025               	movf	Paddle_draw@p^0,w,c
 14806  003BA0  26D9               	addwf	fsr2l,f,c
 14807  003BA2  5026               	movf	(Paddle_draw@p+1)^0,w,c
 14808  003BA4  22DA               	addwfc	fsr2h,f,c
 14809  003BA6  CFDE F014          	movff	postinc2,LCD_DrawRect@posY1
 14810  003BAA  CFDD F015          	movff	postdec2,LCD_DrawRect@posY1+1
 14811  003BAE  C025  FFD9         	movff	Paddle_draw@p,fsr2l
 14812  003BB2  C026  FFDA         	movff	Paddle_draw@p+1,fsr2h
 14813  003BB6  CFDE F027          	movff	postinc2,??_Paddle_draw
 14814  003BBA  CFDD F028          	movff	postdec2,??_Paddle_draw+1
 14815  003BBE  0E32               	movlw	50
 14816  003BC0  2427               	addwf	??_Paddle_draw^0,w,c
 14817  003BC2  6E16               	movwf	LCD_DrawRect@posX2^0,c
 14818  003BC4  0E00               	movlw	0
 14819  003BC6  2028               	addwfc	(??_Paddle_draw+1)^0,w,c
 14820  003BC8  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 14821  003BCA  EE20 F002          	lfsr	2,2
 14822  003BCE  5025               	movf	Paddle_draw@p^0,w,c
 14823  003BD0  26D9               	addwf	fsr2l,f,c
 14824  003BD2  5026               	movf	(Paddle_draw@p+1)^0,w,c
 14825  003BD4  22DA               	addwfc	fsr2h,f,c
 14826  003BD6  CFDE F029          	movff	postinc2,??_Paddle_draw+2
 14827  003BDA  CFDD F02A          	movff	postdec2,??_Paddle_draw+3
 14828  003BDE  0E0A               	movlw	10
 14829  003BE0  2429               	addwf	(??_Paddle_draw+2)^0,w,c
 14830  003BE2  6E18               	movwf	LCD_DrawRect@posY2^0,c
 14831  003BE4  0E00               	movlw	0
 14832  003BE6  202A               	addwfc	(??_Paddle_draw+3)^0,w,c
 14833  003BE8  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 14834  003BEA  0E01               	movlw	1
 14835  003BEC  6E1A               	movwf	LCD_DrawRect@fill^0,c
 14836  003BEE  EE20 F008          	lfsr	2,8
 14837  003BF2  5025               	movf	Paddle_draw@p^0,w,c
 14838  003BF4  26D9               	addwf	fsr2l,f,c
 14839  003BF6  5026               	movf	(Paddle_draw@p+1)^0,w,c
 14840  003BF8  22DA               	addwfc	fsr2h,f,c
 14841  003BFA  CFDE F01B          	movff	postinc2,LCD_DrawRect@color
 14842  003BFE  CFDD F01C          	movff	postdec2,LCD_DrawRect@color+1
 14843  003C02  EC34  F013         	call	_LCD_DrawRect	;wreg free
 14844  003C06  0012               	return		;funcret
 14845  003C08                     __end_of_Paddle_draw:
 14846                           	callstack 0
 14847                           
 14848 ;; *************** function _LCD_Fill *****************
 14849 ;; Defined at:
 14850 ;;		line 218 in file "libraries/lcd_highlevel.c"
 14851 ;; Parameters:    Size  Location     Type
 14852 ;;  color           2   17[COMRAM] unsigned short 
 14853 ;; Auto vars:     Size  Location     Type
 14854 ;;  page            2   23[COMRAM] unsigned short 
 14855 ;;  column          2   21[COMRAM] unsigned short 
 14856 ;;  colorL          1   20[COMRAM] unsigned char 
 14857 ;;  colorH          1   19[COMRAM] unsigned char 
 14858 ;; Return value:  Size  Location     Type
 14859 ;;                  1    wreg      void 
 14860 ;; Registers used:
 14861 ;;		wreg, status,2, status,0
 14862 ;; Tracked objects:
 14863 ;;		On entry : 0/0
 14864 ;;		On exit  : 0/0
 14865 ;;		Unchanged: 0/0
 14866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14867 ;;      Params:         2       0       0       0       0       0       0
 14868 ;;      Locals:         6       0       0       0       0       0       0
 14869 ;;      Temps:          0       0       0       0       0       0       0
 14870 ;;      Totals:         8       0       0       0       0       0       0
 14871 ;;Total ram usage:        8 bytes
 14872 ;; Hardware stack levels used: 1
 14873 ;; Hardware stack levels required when called: 4
 14874 ;; This function calls:
 14875 ;;		Nothing
 14876 ;; This function is called by:
 14877 ;;		_Factory_init
 14878 ;;		_Menu_welcomeDraw
 14879 ;;		_Menu_parametersDraw
 14880 ;;		_Menu_inGameDraw
 14881 ;;		_Menu_endGame
 14882 ;; This function uses a non-reentrant model
 14883 ;;
 14884                           
 14885                           	psect	text67
 14886  00493C                     __ptext67:
 14887                           	callstack 0
 14888  00493C                     _LCD_Fill:
 14889                           	callstack 21
 14890                           
 14891                           ;libraries/lcd_highlevel.c: 218: void LCD_Fill(uint16_t color);libraries/lcd_highlevel.c
      +                          : 219: {;libraries/lcd_highlevel.c: 220:   uint16_t column;;libraries/lcd_highlevel.c: 2
      +                          21:   uint16_t page;;libraries/lcd_highlevel.c: 222:   uint8_t colorH, colorL;;libraries
      +                          /lcd_highlevel.c: 223:   colorH = color >> 8;
 14892                           
 14893                           ;incstack = 0
 14894  00493C  C013  F014         	movff	LCD_Fill@color+1,LCD_Fill@colorH
 14895                           
 14896                           ;libraries/lcd_highlevel.c: 224:   colorL = color;
 14897  004940  C012  F015         	movff	LCD_Fill@color,LCD_Fill@colorL
 14898                           
 14899                           ;libraries/lcd_highlevel.c: 226:   PORTA = 0x2A; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
 14900  004944  0E2A               	movlw	42
 14901  004946  6E80               	movwf	128,c	;volatile
 14902  004948  988B               	bcf	3979,4,c	;volatile
 14903  00494A  968B               	bcf	3979,3,c	;volatile
 14904  00494C  868B               	bsf	3979,3,c	;volatile
 14905  00494E  888B               	bsf	3979,4,c	;volatile
 14906                           
 14907                           ;libraries/lcd_highlevel.c: 227:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
 14908  004950  0E00               	movlw	0
 14909  004952  6E80               	movwf	128,c	;volatile
 14910  004954  968B               	bcf	3979,3,c	;volatile
 14911  004956  868B               	bsf	3979,3,c	;volatile
 14912                           
 14913                           ;libraries/lcd_highlevel.c: 228:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
 14914  004958  0E00               	movlw	0
 14915  00495A  6E80               	movwf	128,c	;volatile
 14916  00495C  968B               	bcf	3979,3,c	;volatile
 14917  00495E  868B               	bsf	3979,3,c	;volatile
 14918                           
 14919                           ;libraries/lcd_highlevel.c: 229:   PORTA = (240 -1) >> 8; LATC3 = 0; LATC3 = 1;;
 14920  004960  0E00               	movlw	0
 14921  004962  6E80               	movwf	128,c	;volatile
 14922  004964  968B               	bcf	3979,3,c	;volatile
 14923  004966  868B               	bsf	3979,3,c	;volatile
 14924                           
 14925                           ;libraries/lcd_highlevel.c: 230:   PORTA = (240 -1); LATC3 = 0; LATC3 = 1;;
 14926  004968  0EEF               	movlw	239
 14927  00496A  6E80               	movwf	128,c	;volatile
 14928  00496C  968B               	bcf	3979,3,c	;volatile
 14929  00496E  868B               	bsf	3979,3,c	;volatile
 14930                           
 14931                           ;libraries/lcd_highlevel.c: 232:   PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
 14932  004970  0E2B               	movlw	43
 14933  004972  6E80               	movwf	128,c	;volatile
 14934  004974  988B               	bcf	3979,4,c	;volatile
 14935  004976  968B               	bcf	3979,3,c	;volatile
 14936  004978  868B               	bsf	3979,3,c	;volatile
 14937  00497A  888B               	bsf	3979,4,c	;volatile
 14938                           
 14939                           ;libraries/lcd_highlevel.c: 233:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
 14940  00497C  0E00               	movlw	0
 14941  00497E  6E80               	movwf	128,c	;volatile
 14942  004980  968B               	bcf	3979,3,c	;volatile
 14943  004982  868B               	bsf	3979,3,c	;volatile
 14944                           
 14945                           ;libraries/lcd_highlevel.c: 234:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
 14946  004984  0E00               	movlw	0
 14947  004986  6E80               	movwf	128,c	;volatile
 14948  004988  968B               	bcf	3979,3,c	;volatile
 14949  00498A  868B               	bsf	3979,3,c	;volatile
 14950                           
 14951                           ;libraries/lcd_highlevel.c: 235:   PORTA = (320 -1) >> 8; LATC3 = 0; LATC3 = 1;;
 14952  00498C  0E01               	movlw	1
 14953  00498E  6E80               	movwf	128,c	;volatile
 14954  004990  968B               	bcf	3979,3,c	;volatile
 14955  004992  868B               	bsf	3979,3,c	;volatile
 14956                           
 14957                           ;libraries/lcd_highlevel.c: 236:   PORTA = (320 -1); LATC3 = 0; LATC3 = 1;;
 14958  004994  0E3F               	movlw	63
 14959  004996  6E80               	movwf	128,c	;volatile
 14960  004998  968B               	bcf	3979,3,c	;volatile
 14961  00499A  868B               	bsf	3979,3,c	;volatile
 14962                           
 14963                           ;libraries/lcd_highlevel.c: 238:   PORTA = 0x2C; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
 14964  00499C  0E2C               	movlw	44
 14965  00499E  6E80               	movwf	128,c	;volatile
 14966  0049A0  988B               	bcf	3979,4,c	;volatile
 14967  0049A2  968B               	bcf	3979,3,c	;volatile
 14968  0049A4  868B               	bsf	3979,3,c	;volatile
 14969  0049A6  888B               	bsf	3979,4,c	;volatile
 14970                           
 14971                           ;libraries/lcd_highlevel.c: 239:   for(column=0; column<320; column++)
 14972  0049A8  0E00               	movlw	0
 14973  0049AA  6E17               	movwf	(LCD_Fill@column+1)^0,c
 14974  0049AC  0E00               	movlw	0
 14975  0049AE  6E16               	movwf	LCD_Fill@column^0,c
 14976  0049B0                     l6552:
 14977                           
 14978                           ;libraries/lcd_highlevel.c: 240:   {;libraries/lcd_highlevel.c: 241:     for(page=0; pag
      +                          e<240; page++)
 14979  0049B0  0E00               	movlw	0
 14980  0049B2  6E19               	movwf	(LCD_Fill@page+1)^0,c
 14981  0049B4  0E00               	movlw	0
 14982  0049B6  6E18               	movwf	LCD_Fill@page^0,c
 14983  0049B8                     l226:
 14984                           
 14985                           ;libraries/lcd_highlevel.c: 242:     {;libraries/lcd_highlevel.c: 243:       PORTA = col
      +                          orH;
 14986  0049B8  C014  FF80         	movff	LCD_Fill@colorH,3968	;volatile
 14987                           
 14988                           ;libraries/lcd_highlevel.c: 244:       LATC3 = 0;
 14989  0049BC  968B               	bcf	3979,3,c	;volatile
 14990                           
 14991                           ;libraries/lcd_highlevel.c: 245:       LATC3 = 1;
 14992  0049BE  868B               	bsf	3979,3,c	;volatile
 14993                           
 14994                           ;libraries/lcd_highlevel.c: 246:       PORTA = colorL;
 14995  0049C0  C015  FF80         	movff	LCD_Fill@colorL,3968	;volatile
 14996                           
 14997                           ;libraries/lcd_highlevel.c: 247:       LATC3 = 0;
 14998  0049C4  968B               	bcf	3979,3,c	;volatile
 14999                           
 15000                           ;libraries/lcd_highlevel.c: 248:       LATC3 = 1;
 15001  0049C6  868B               	bsf	3979,3,c	;volatile
 15002                           
 15003                           ;libraries/lcd_highlevel.c: 249:     }
 15004  0049C8  4A18               	infsnz	LCD_Fill@page^0,f,c
 15005  0049CA  2A19               	incf	(LCD_Fill@page+1)^0,f,c
 15006  0049CC  5019               	movf	(LCD_Fill@page+1)^0,w,c
 15007  0049CE  E104               	bnz	u4010
 15008  0049D0  0EF0               	movlw	240
 15009  0049D2  5C18               	subwf	LCD_Fill@page^0,w,c
 15010  0049D4  A0D8               	btfss	status,0,c
 15011  0049D6  D7F0               	goto	l226
 15012  0049D8                     u4010:
 15013                           
 15014                           ;libraries/lcd_highlevel.c: 250:   }
 15015  0049D8  4A16               	infsnz	LCD_Fill@column^0,f,c
 15016  0049DA  2A17               	incf	(LCD_Fill@column+1)^0,f,c
 15017  0049DC  0E40               	movlw	64
 15018  0049DE  5C16               	subwf	LCD_Fill@column^0,w,c
 15019  0049E0  0E01               	movlw	1
 15020  0049E2  5817               	subwfb	(LCD_Fill@column+1)^0,w,c
 15021  0049E4  B0D8               	btfsc	status,0,c
 15022  0049E6  0012               	return	
 15023  0049E8  D7E3               	goto	l6552
 15024  0049EA                     __end_of_LCD_Fill:
 15025                           	callstack 0
 15026                           
 15027 ;; *************** function _LCD_ButtonDraw *****************
 15028 ;; Defined at:
 15029 ;;		line 462 in file "libraries/lcd_highlevel.c"
 15030 ;; Parameters:    Size  Location     Type
 15031 ;;  button          2   65[COMRAM] PTR struct .
 15032 ;;		 -> g1(240), 
 15033 ;; Auto vars:     Size  Location     Type
 15034 ;;  bmpPtr          2   56[BANK0 ] PTR struct .
 15035 ;;		 -> STR_9(9), STR_8(2), STR_7(9), STR_6(11), 
 15036 ;;		 -> STR_5(9), STR_4(9), 
 15037 ;;  yText           2   53[BANK0 ] unsigned short 
 15038 ;;  xText           2   51[BANK0 ] unsigned short 
 15039 ;;  y2              2   49[BANK0 ] unsigned short 
 15040 ;;  y1              2   47[BANK0 ] unsigned short 
 15041 ;;  x2              2   45[BANK0 ] unsigned short 
 15042 ;;  x1              2   43[BANK0 ] unsigned short 
 15043 ;;  width           2   41[BANK0 ] unsigned short 
 15044 ;;  i               1   55[BANK0 ] unsigned char 
 15045 ;;  tempChar        1   40[BANK0 ] unsigned char 
 15046 ;; Return value:  Size  Location     Type
 15047 ;;                  1    wreg      void 
 15048 ;; Registers used:
 15049 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15050 ;; Tracked objects:
 15051 ;;		On entry : 0/0
 15052 ;;		On exit  : 0/0
 15053 ;;		Unchanged: 0/0
 15054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15055 ;;      Params:         2       0       0       0       0       0       0
 15056 ;;      Locals:         0      18       0       0       0       0       0
 15057 ;;      Temps:          0      12       0       0       0       0       0
 15058 ;;      Totals:         2      30       0       0       0       0       0
 15059 ;;Total ram usage:       32 bytes
 15060 ;; Hardware stack levels used: 1
 15061 ;; Hardware stack levels required when called: 6
 15062 ;; This function calls:
 15063 ;;		_LCD_Bitmap
 15064 ;;		_LCD_ButtonUpdate
 15065 ;;		_LCD_DrawRect
 15066 ;;		_LCD_DrawText
 15067 ;;		_strlen
 15068 ;; This function is called by:
 15069 ;;		_Menu_welcomeDraw
 15070 ;;		_Menu_parametersDraw
 15071 ;;		_Menu_inGameDraw
 15072 ;;		_Menu_endGame
 15073 ;; This function uses a non-reentrant model
 15074 ;;
 15075                           
 15076                           	psect	text68
 15077  000E4C                     __ptext68:
 15078                           	callstack 0
 15079  000E4C                     _LCD_ButtonDraw:
 15080                           	callstack 19
 15081                           
 15082                           ;libraries/lcd_highlevel.c: 462: void LCD_ButtonDraw(btn_t * button);libraries/lcd_highl
      +                          evel.c: 463: {;libraries/lcd_highlevel.c: 464:   uint16_t x1,x2,y1,y2;;libraries/lcd_hig
      +                          hlevel.c: 465:   uint16_t xText,yText;;libraries/lcd_highlevel.c: 466:   uint8_t i, temp
      +                          Char;;libraries/lcd_highlevel.c: 467:   uint16_t width=0;
 15083                           
 15084                           ;incstack = 0
 15085  000E4C  0E00               	movlw	0
 15086  000E4E  0100               	movlb	0	; () banked
 15087  000E50  6FD4               	movwf	(LCD_ButtonDraw@width+1)& (0+255),b
 15088  000E52  0E00               	movlw	0
 15089  000E54  6FD3               	movwf	LCD_ButtonDraw@width& (0+255),b
 15090                           
 15091                           ; BSR set to: 0
 15092                           ;libraries/lcd_highlevel.c: 468:   BMP_STRUCT *bmpPtr;;libraries/lcd_highlevel.c: 470:  
      +                           x1 = button->posX;
 15093  000E56  C042  FFD9         	movff	LCD_ButtonDraw@button,fsr2l
 15094  000E5A  C043  FFDA         	movff	LCD_ButtonDraw@button+1,fsr2h
 15095  000E5E  CFDE F0D5          	movff	postinc2,LCD_ButtonDraw@x1
 15096  000E62  CFDD F0D6          	movff	postdec2,LCD_ButtonDraw@x1+1
 15097                           
 15098                           ; BSR set to: 0
 15099                           ;libraries/lcd_highlevel.c: 471:   x2 = button->posX + button->width;
 15100  000E66  EE20 F004          	lfsr	2,4
 15101  000E6A  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15102  000E6C  26D9               	addwf	fsr2l,f,c
 15103  000E6E  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15104  000E70  22DA               	addwfc	fsr2h,f,c
 15105  000E72  CFDE F0C6          	movff	postinc2,??_LCD_ButtonDraw
 15106  000E76  CFDD F0C7          	movff	postdec2,??_LCD_ButtonDraw+1
 15107  000E7A  C042  FFD9         	movff	LCD_ButtonDraw@button,fsr2l
 15108  000E7E  C043  FFDA         	movff	LCD_ButtonDraw@button+1,fsr2h
 15109  000E82  CFDE F0C8          	movff	postinc2,??_LCD_ButtonDraw+2
 15110  000E86  CFDD F0C9          	movff	postdec2,??_LCD_ButtonDraw+3
 15111  000E8A  51C6               	movf	??_LCD_ButtonDraw& (0+255),w,b
 15112  000E8C  25C8               	addwf	(??_LCD_ButtonDraw+2)& (0+255),w,b
 15113  000E8E  6FD7               	movwf	LCD_ButtonDraw@x2& (0+255),b
 15114  000E90  51C7               	movf	(??_LCD_ButtonDraw+1)& (0+255),w,b
 15115  000E92  21C9               	addwfc	(??_LCD_ButtonDraw+3)& (0+255),w,b
 15116  000E94  6FD8               	movwf	(LCD_ButtonDraw@x2+1)& (0+255),b
 15117                           
 15118                           ; BSR set to: 0
 15119                           ;libraries/lcd_highlevel.c: 472:   y1 = button->posY;
 15120  000E96  EE20 F002          	lfsr	2,2
 15121  000E9A  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15122  000E9C  26D9               	addwf	fsr2l,f,c
 15123  000E9E  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15124  000EA0  22DA               	addwfc	fsr2h,f,c
 15125  000EA2  CFDE F0D9          	movff	postinc2,LCD_ButtonDraw@y1
 15126  000EA6  CFDD F0DA          	movff	postdec2,LCD_ButtonDraw@y1+1
 15127                           
 15128                           ; BSR set to: 0
 15129                           ;libraries/lcd_highlevel.c: 473:   y2 = button->posY + button->height;
 15130  000EAA  EE20 F006          	lfsr	2,6
 15131  000EAE  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15132  000EB0  26D9               	addwf	fsr2l,f,c
 15133  000EB2  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15134  000EB4  22DA               	addwfc	fsr2h,f,c
 15135  000EB6  CFDE F0C6          	movff	postinc2,??_LCD_ButtonDraw
 15136  000EBA  CFDD F0C7          	movff	postdec2,??_LCD_ButtonDraw+1
 15137  000EBE  EE20 F002          	lfsr	2,2
 15138  000EC2  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15139  000EC4  26D9               	addwf	fsr2l,f,c
 15140  000EC6  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15141  000EC8  22DA               	addwfc	fsr2h,f,c
 15142  000ECA  CFDE F0C8          	movff	postinc2,??_LCD_ButtonDraw+2
 15143  000ECE  CFDD F0C9          	movff	postdec2,??_LCD_ButtonDraw+3
 15144  000ED2  51C6               	movf	??_LCD_ButtonDraw& (0+255),w,b
 15145  000ED4  25C8               	addwf	(??_LCD_ButtonDraw+2)& (0+255),w,b
 15146  000ED6  6FDB               	movwf	LCD_ButtonDraw@y2& (0+255),b
 15147  000ED8  51C7               	movf	(??_LCD_ButtonDraw+1)& (0+255),w,b
 15148  000EDA  21C9               	addwfc	(??_LCD_ButtonDraw+3)& (0+255),w,b
 15149  000EDC  6FDC               	movwf	(LCD_ButtonDraw@y2+1)& (0+255),b
 15150                           
 15151                           ; BSR set to: 0
 15152                           ;libraries/lcd_highlevel.c: 474:   if(button->bgColor != button->txtColor)
 15153  000EDE  EE20 F008          	lfsr	2,8
 15154  000EE2  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15155  000EE4  26D9               	addwf	fsr2l,f,c
 15156  000EE6  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15157  000EE8  22DA               	addwfc	fsr2h,f,c
 15158  000EEA  EE10 F00A          	lfsr	1,10
 15159  000EEE  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15160  000EF0  26E1               	addwf	fsr1l,f,c
 15161  000EF2  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15162  000EF4  22E2               	addwfc	fsr1h,f,c
 15163  000EF6  50DE               	movf	postinc2,w,c
 15164  000EF8  18E6               	xorwf	postinc1,w,c
 15165  000EFA  E104               	bnz	u6310
 15166  000EFC  50DE               	movf	postinc2,w,c
 15167  000EFE  18E6               	xorwf	postinc1,w,c
 15168  000F00  B4D8               	btfsc	status,2,c
 15169  000F02  D03C               	goto	l8592
 15170  000F04                     u6310:
 15171                           
 15172                           ; BSR set to: 0
 15173                           ;libraries/lcd_highlevel.c: 475:   {;libraries/lcd_highlevel.c: 476:     LCD_DrawRect(x1
      +                          , y1, x2, y2, 1, button->bgColor);
 15174  000F04  C0D5  F012         	movff	LCD_ButtonDraw@x1,LCD_DrawRect@posX1
 15175  000F08  C0D6  F013         	movff	LCD_ButtonDraw@x1+1,LCD_DrawRect@posX1+1
 15176  000F0C  C0D9  F014         	movff	LCD_ButtonDraw@y1,LCD_DrawRect@posY1
 15177  000F10  C0DA  F015         	movff	LCD_ButtonDraw@y1+1,LCD_DrawRect@posY1+1
 15178  000F14  C0D7  F016         	movff	LCD_ButtonDraw@x2,LCD_DrawRect@posX2
 15179  000F18  C0D8  F017         	movff	LCD_ButtonDraw@x2+1,LCD_DrawRect@posX2+1
 15180  000F1C  C0DB  F018         	movff	LCD_ButtonDraw@y2,LCD_DrawRect@posY2
 15181  000F20  C0DC  F019         	movff	LCD_ButtonDraw@y2+1,LCD_DrawRect@posY2+1
 15182  000F24  0E01               	movlw	1
 15183  000F26  6E1A               	movwf	LCD_DrawRect@fill^0,c
 15184  000F28  EE20 F00A          	lfsr	2,10
 15185  000F2C  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15186  000F2E  26D9               	addwf	fsr2l,f,c
 15187  000F30  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15188  000F32  22DA               	addwfc	fsr2h,f,c
 15189  000F34  CFDE F01B          	movff	postinc2,LCD_DrawRect@color
 15190  000F38  CFDD F01C          	movff	postdec2,LCD_DrawRect@color+1
 15191  000F3C  EC34  F013         	call	_LCD_DrawRect	;wreg free
 15192                           
 15193                           ;libraries/lcd_highlevel.c: 477:     LCD_DrawRect(x1, y1, x2, y2, 0, button->txtColor);
 15194  000F40  C0D5  F012         	movff	LCD_ButtonDraw@x1,LCD_DrawRect@posX1
 15195  000F44  C0D6  F013         	movff	LCD_ButtonDraw@x1+1,LCD_DrawRect@posX1+1
 15196  000F48  C0D9  F014         	movff	LCD_ButtonDraw@y1,LCD_DrawRect@posY1
 15197  000F4C  C0DA  F015         	movff	LCD_ButtonDraw@y1+1,LCD_DrawRect@posY1+1
 15198  000F50  C0D7  F016         	movff	LCD_ButtonDraw@x2,LCD_DrawRect@posX2
 15199  000F54  C0D8  F017         	movff	LCD_ButtonDraw@x2+1,LCD_DrawRect@posX2+1
 15200  000F58  C0DB  F018         	movff	LCD_ButtonDraw@y2,LCD_DrawRect@posY2
 15201  000F5C  C0DC  F019         	movff	LCD_ButtonDraw@y2+1,LCD_DrawRect@posY2+1
 15202  000F60  0E00               	movlw	0
 15203  000F62  6E1A               	movwf	LCD_DrawRect@fill^0,c
 15204  000F64  EE20 F008          	lfsr	2,8
 15205  000F68  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15206  000F6A  26D9               	addwf	fsr2l,f,c
 15207  000F6C  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15208  000F6E  22DA               	addwfc	fsr2h,f,c
 15209  000F70  CFDE F01B          	movff	postinc2,LCD_DrawRect@color
 15210  000F74  CFDD F01C          	movff	postdec2,LCD_DrawRect@color+1
 15211  000F78  EC34  F013         	call	_LCD_DrawRect	;wreg free
 15212  000F7C                     l8592:
 15213                           
 15214                           ;libraries/lcd_highlevel.c: 482:   if((button->text[0] == 'B')&&(button->text[1] == 'M')
      +                          )
 15215  000F7C  EE20 F00C          	lfsr	2,12
 15216  000F80  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15217  000F82  26D9               	addwf	fsr2l,f,c
 15218  000F84  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15219  000F86  22DA               	addwfc	fsr2h,f,c
 15220  000F88  CFDE FFF6          	movff	postinc2,tblptrl
 15221  000F8C  CFDD FFF7          	movff	postdec2,tblptrh
 15222  000F90                     	if	0	;tblptru may be non-zero
 15223  000F90                     	endif
 15224  000F90                     	if	0	;tblptru may be non-zero
 15225  000F90                     	endif
 15226  000F90  0008               	tblrd		*
 15227  000F92  50F5               	movf	tablat,w,c
 15228  000F94  0A42               	xorlw	66
 15229  000F96  A4D8               	btfss	status,2,c
 15230  000F98  D0AB               	goto	l8604
 15231  000F9A  EE20 F00C          	lfsr	2,12
 15232  000F9E  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15233  000FA0  26D9               	addwf	fsr2l,f,c
 15234  000FA2  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15235  000FA4  22DA               	addwfc	fsr2h,f,c
 15236  000FA6  CFDE F0C6          	movff	postinc2,??_LCD_ButtonDraw
 15237  000FAA  CFDD F0C7          	movff	postdec2,??_LCD_ButtonDraw+1
 15238  000FAE  0E01               	movlw	1
 15239  000FB0  0100               	movlb	0	; () banked
 15240  000FB2  27C6               	addwf	??_LCD_ButtonDraw& (0+255),f,b
 15241  000FB4  0E00               	movlw	0
 15242  000FB6  23C7               	addwfc	(??_LCD_ButtonDraw+1)& (0+255),f,b
 15243  000FB8  C0C6  FFF6         	movff	??_LCD_ButtonDraw,tblptrl
 15244  000FBC  C0C7  FFF7         	movff	??_LCD_ButtonDraw+1,tblptrh
 15245  000FC0                     	if	0	;tblptru may be non-zero
 15246  000FC0                     	endif
 15247  000FC0                     	if	0	;tblptru may be non-zero
 15248  000FC0                     	endif
 15249  000FC0  0008               	tblrd		*
 15250  000FC2  50F5               	movf	tablat,w,c
 15251  000FC4  0A4D               	xorlw	77
 15252  000FC6  A4D8               	btfss	status,2,c
 15253  000FC8  D093               	goto	l8604
 15254                           
 15255                           ; BSR set to: 0
 15256                           ;libraries/lcd_highlevel.c: 483:   {;libraries/lcd_highlevel.c: 484:     bmpPtr = (BMP_S
      +                          TRUCT *)button->text;
 15257  000FCA  EE20 F00C          	lfsr	2,12
 15258  000FCE  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15259  000FD0  26D9               	addwf	fsr2l,f,c
 15260  000FD2  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15261  000FD4  22DA               	addwfc	fsr2h,f,c
 15262  000FD6  CFDE F0E2          	movff	postinc2,LCD_ButtonDraw@bmpPtr
 15263  000FDA  CFDD F0E3          	movff	postdec2,LCD_ButtonDraw@bmpPtr+1
 15264                           
 15265                           ; BSR set to: 0
 15266                           ;libraries/lcd_highlevel.c: 485:     yText = button->height / 2 + button->posY - (bmpPtr
      +                          ->biHeight / 2);
 15267  000FDE  EE20 F002          	lfsr	2,2
 15268  000FE2  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15269  000FE4  26D9               	addwf	fsr2l,f,c
 15270  000FE6  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15271  000FE8  22DA               	addwfc	fsr2h,f,c
 15272  000FEA  CFDE F0C6          	movff	postinc2,??_LCD_ButtonDraw
 15273  000FEE  CFDD F0C7          	movff	postdec2,??_LCD_ButtonDraw+1
 15274  000FF2  0E16               	movlw	22
 15275  000FF4  25E2               	addwf	LCD_ButtonDraw@bmpPtr& (0+255),w,b
 15276  000FF6  6FC8               	movwf	(??_LCD_ButtonDraw+2)& (0+255),b
 15277  000FF8  0E00               	movlw	0
 15278  000FFA  21E3               	addwfc	(LCD_ButtonDraw@bmpPtr+1)& (0+255),w,b
 15279  000FFC  6FC9               	movwf	(??_LCD_ButtonDraw+3)& (0+255),b
 15280  000FFE  C0C8  FFF6         	movff	??_LCD_ButtonDraw+2,tblptrl
 15281  001002  C0C9  FFF7         	movff	??_LCD_ButtonDraw+3,tblptrh
 15282  001006                     	if	0	;tblptru may be non-zero
 15283  001006                     	endif
 15284  001006                     	if	0	;tblptru may be non-zero
 15285  001006                     	endif
 15286  001006  0009               	tblrd		*+
 15287  001008  CFF5 F0CA          	movff	tablat,??_LCD_ButtonDraw+4
 15288  00100C  0009               	tblrd		*+
 15289  00100E  CFF5 F0CB          	movff	tablat,??_LCD_ButtonDraw+5
 15290  001012  0009               	tblrd		*+
 15291  001014  CFF5 F0CC          	movff	tablat,??_LCD_ButtonDraw+6
 15292  001018  0009               	tblrd		*+
 15293  00101A  CFF5 F0CD          	movff	tablat,??_LCD_ButtonDraw+7
 15294  00101E  90D8               	bcf	status,0,c
 15295  001020  33CD               	rrcf	(??_LCD_ButtonDraw+7)& (0+255),f,b
 15296  001022  33CC               	rrcf	(??_LCD_ButtonDraw+6)& (0+255),f,b
 15297  001024  33CB               	rrcf	(??_LCD_ButtonDraw+5)& (0+255),f,b
 15298  001026  33CA               	rrcf	(??_LCD_ButtonDraw+4)& (0+255),f,b
 15299  001028  EE20 F006          	lfsr	2,6
 15300  00102C  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15301  00102E  26D9               	addwf	fsr2l,f,c
 15302  001030  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15303  001032  22DA               	addwfc	fsr2h,f,c
 15304  001034  CFDE F0CE          	movff	postinc2,??_LCD_ButtonDraw+8
 15305  001038  CFDD F0CF          	movff	postdec2,??_LCD_ButtonDraw+9
 15306  00103C  90D8               	bcf	status,0,c
 15307  00103E  31CF               	rrcf	(??_LCD_ButtonDraw+9)& (0+255),w,b
 15308  001040  6FD1               	movwf	(??_LCD_ButtonDraw+11)& (0+255),b
 15309  001042  31CE               	rrcf	(??_LCD_ButtonDraw+8)& (0+255),w,b
 15310  001044  6FD0               	movwf	(??_LCD_ButtonDraw+10)& (0+255),b
 15311  001046  51CA               	movf	(??_LCD_ButtonDraw+4)& (0+255),w,b
 15312  001048  5FD0               	subwf	(??_LCD_ButtonDraw+10)& (0+255),f,b
 15313  00104A  51CB               	movf	(??_LCD_ButtonDraw+5)& (0+255),w,b
 15314  00104C  5BD1               	subwfb	(??_LCD_ButtonDraw+11)& (0+255),f,b
 15315  00104E  51C6               	movf	??_LCD_ButtonDraw& (0+255),w,b
 15316  001050  25D0               	addwf	(??_LCD_ButtonDraw+10)& (0+255),w,b
 15317  001052  6FDF               	movwf	LCD_ButtonDraw@yText& (0+255),b
 15318  001054  51C7               	movf	(??_LCD_ButtonDraw+1)& (0+255),w,b
 15319  001056  21D1               	addwfc	(??_LCD_ButtonDraw+11)& (0+255),w,b
 15320  001058  6FE0               	movwf	(LCD_ButtonDraw@yText+1)& (0+255),b
 15321                           
 15322                           ; BSR set to: 0
 15323                           ;libraries/lcd_highlevel.c: 486:     xText = button->width / 2 + button->posX - (bmpPtr-
      +                          >biWidth / 2);
 15324  00105A  C042  FFD9         	movff	LCD_ButtonDraw@button,fsr2l
 15325  00105E  C043  FFDA         	movff	LCD_ButtonDraw@button+1,fsr2h
 15326  001062  CFDE F0C6          	movff	postinc2,??_LCD_ButtonDraw
 15327  001066  CFDD F0C7          	movff	postdec2,??_LCD_ButtonDraw+1
 15328  00106A  0E12               	movlw	18
 15329  00106C  25E2               	addwf	LCD_ButtonDraw@bmpPtr& (0+255),w,b
 15330  00106E  6FC8               	movwf	(??_LCD_ButtonDraw+2)& (0+255),b
 15331  001070  0E00               	movlw	0
 15332  001072  21E3               	addwfc	(LCD_ButtonDraw@bmpPtr+1)& (0+255),w,b
 15333  001074  6FC9               	movwf	(??_LCD_ButtonDraw+3)& (0+255),b
 15334  001076  C0C8  FFF6         	movff	??_LCD_ButtonDraw+2,tblptrl
 15335  00107A  C0C9  FFF7         	movff	??_LCD_ButtonDraw+3,tblptrh
 15336  00107E                     	if	0	;tblptru may be non-zero
 15337  00107E                     	endif
 15338  00107E                     	if	0	;tblptru may be non-zero
 15339  00107E                     	endif
 15340  00107E  0009               	tblrd		*+
 15341  001080  CFF5 F0CA          	movff	tablat,??_LCD_ButtonDraw+4
 15342  001084  0009               	tblrd		*+
 15343  001086  CFF5 F0CB          	movff	tablat,??_LCD_ButtonDraw+5
 15344  00108A  0009               	tblrd		*+
 15345  00108C  CFF5 F0CC          	movff	tablat,??_LCD_ButtonDraw+6
 15346  001090  0009               	tblrd		*+
 15347  001092  CFF5 F0CD          	movff	tablat,??_LCD_ButtonDraw+7
 15348  001096  90D8               	bcf	status,0,c
 15349  001098  33CD               	rrcf	(??_LCD_ButtonDraw+7)& (0+255),f,b
 15350  00109A  33CC               	rrcf	(??_LCD_ButtonDraw+6)& (0+255),f,b
 15351  00109C  33CB               	rrcf	(??_LCD_ButtonDraw+5)& (0+255),f,b
 15352  00109E  33CA               	rrcf	(??_LCD_ButtonDraw+4)& (0+255),f,b
 15353  0010A0  EE20 F004          	lfsr	2,4
 15354  0010A4  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15355  0010A6  26D9               	addwf	fsr2l,f,c
 15356  0010A8  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15357  0010AA  22DA               	addwfc	fsr2h,f,c
 15358  0010AC  CFDE F0CE          	movff	postinc2,??_LCD_ButtonDraw+8
 15359  0010B0  CFDD F0CF          	movff	postdec2,??_LCD_ButtonDraw+9
 15360  0010B4  90D8               	bcf	status,0,c
 15361  0010B6  31CF               	rrcf	(??_LCD_ButtonDraw+9)& (0+255),w,b
 15362  0010B8  6FD1               	movwf	(??_LCD_ButtonDraw+11)& (0+255),b
 15363  0010BA  31CE               	rrcf	(??_LCD_ButtonDraw+8)& (0+255),w,b
 15364  0010BC  6FD0               	movwf	(??_LCD_ButtonDraw+10)& (0+255),b
 15365  0010BE  51CA               	movf	(??_LCD_ButtonDraw+4)& (0+255),w,b
 15366  0010C0  5FD0               	subwf	(??_LCD_ButtonDraw+10)& (0+255),f,b
 15367  0010C2  51CB               	movf	(??_LCD_ButtonDraw+5)& (0+255),w,b
 15368  0010C4  5BD1               	subwfb	(??_LCD_ButtonDraw+11)& (0+255),f,b
 15369  0010C6  51C6               	movf	??_LCD_ButtonDraw& (0+255),w,b
 15370  0010C8  25D0               	addwf	(??_LCD_ButtonDraw+10)& (0+255),w,b
 15371  0010CA  6FDD               	movwf	LCD_ButtonDraw@xText& (0+255),b
 15372  0010CC  51C7               	movf	(??_LCD_ButtonDraw+1)& (0+255),w,b
 15373  0010CE  21D1               	addwfc	(??_LCD_ButtonDraw+11)& (0+255),w,b
 15374  0010D0  6FDE               	movwf	(LCD_ButtonDraw@xText+1)& (0+255),b
 15375                           
 15376                           ; BSR set to: 0
 15377                           ;libraries/lcd_highlevel.c: 487:     LCD_Bitmap((const uint8_t *)bmpPtr,xText,yText);
 15378  0010D2  C0E2  F027         	movff	LCD_ButtonDraw@bmpPtr,LCD_Bitmap@bmpPtr
 15379  0010D6  C0E3  F028         	movff	LCD_ButtonDraw@bmpPtr+1,LCD_Bitmap@bmpPtr+1
 15380  0010DA  C0DD  F029         	movff	LCD_ButtonDraw@xText,LCD_Bitmap@posX
 15381  0010DE  C0DE  F02A         	movff	LCD_ButtonDraw@xText+1,LCD_Bitmap@posX+1
 15382  0010E2  C0DF  F02B         	movff	LCD_ButtonDraw@yText,LCD_Bitmap@posY
 15383  0010E6  C0E0  F02C         	movff	LCD_ButtonDraw@yText+1,LCD_Bitmap@posY+1
 15384  0010EA  EC8D  F004         	call	_LCD_Bitmap	;wreg free
 15385                           
 15386                           ;libraries/lcd_highlevel.c: 488:   }
 15387  0010EE  D102               	goto	l8620
 15388  0010F0                     l8604:
 15389                           
 15390                           ;libraries/lcd_highlevel.c: 493:   {;libraries/lcd_highlevel.c: 494:     yText = button-
      +                          >height / 2 + button->posY - (button->font->height / 2);
 15391  0010F0  EE20 F002          	lfsr	2,2
 15392  0010F4  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15393  0010F6  26D9               	addwf	fsr2l,f,c
 15394  0010F8  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15395  0010FA  22DA               	addwfc	fsr2h,f,c
 15396  0010FC  CFDE F0C6          	movff	postinc2,??_LCD_ButtonDraw
 15397  001100  CFDD F0C7          	movff	postdec2,??_LCD_ButtonDraw+1
 15398  001104  EE20 F006          	lfsr	2,6
 15399  001108  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15400  00110A  26D9               	addwf	fsr2l,f,c
 15401  00110C  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15402  00110E  22DA               	addwfc	fsr2h,f,c
 15403  001110  CFDE F0C8          	movff	postinc2,??_LCD_ButtonDraw+2
 15404  001114  CFDD F0C9          	movff	postdec2,??_LCD_ButtonDraw+3
 15405  001118  90D8               	bcf	status,0,c
 15406  00111A  0100               	movlb	0	; () banked
 15407  00111C  31C9               	rrcf	(??_LCD_ButtonDraw+3)& (0+255),w,b
 15408  00111E  6FCB               	movwf	(??_LCD_ButtonDraw+5)& (0+255),b
 15409  001120  31C8               	rrcf	(??_LCD_ButtonDraw+2)& (0+255),w,b
 15410  001122  6FCA               	movwf	(??_LCD_ButtonDraw+4)& (0+255),b
 15411  001124  EE20 F00E          	lfsr	2,14
 15412  001128  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15413  00112A  26D9               	addwf	fsr2l,f,c
 15414  00112C  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15415  00112E  22DA               	addwfc	fsr2h,f,c
 15416  001130  CFDE FFF6          	movff	postinc2,tblptrl
 15417  001134  CFDD FFF7          	movff	postdec2,tblptrh
 15418  001138                     	if	0	;tblptru may be non-zero
 15419  001138                     	endif
 15420  001138                     	if	0	;tblptru may be non-zero
 15421  001138                     	endif
 15422  001138  0008               	tblrd		*
 15423  00113A  CFF5 F0CC          	movff	tablat,??_LCD_ButtonDraw+6
 15424  00113E  90D8               	bcf	status,0,c
 15425  001140  33CC               	rrcf	(??_LCD_ButtonDraw+6)& (0+255),f,b
 15426  001142  51CC               	movf	(??_LCD_ButtonDraw+6)& (0+255),w,b
 15427  001144  5FCA               	subwf	(??_LCD_ButtonDraw+4)& (0+255),f,b
 15428  001146  0E00               	movlw	0
 15429  001148  5BCB               	subwfb	(??_LCD_ButtonDraw+5)& (0+255),f,b
 15430  00114A  51C6               	movf	??_LCD_ButtonDraw& (0+255),w,b
 15431  00114C  25CA               	addwf	(??_LCD_ButtonDraw+4)& (0+255),w,b
 15432  00114E  6FDF               	movwf	LCD_ButtonDraw@yText& (0+255),b
 15433  001150  51C7               	movf	(??_LCD_ButtonDraw+1)& (0+255),w,b
 15434  001152  21CB               	addwfc	(??_LCD_ButtonDraw+5)& (0+255),w,b
 15435  001154  6FE0               	movwf	(LCD_ButtonDraw@yText+1)& (0+255),b
 15436                           
 15437                           ; BSR set to: 0
 15438                           ;libraries/lcd_highlevel.c: 495:     for(i=0;i<strlen(button->text);i++)
 15439  001156  0E00               	movlw	0
 15440  001158  6FE1               	movwf	LCD_ButtonDraw@i& (0+255),b
 15441  00115A  D05C               	goto	l8614
 15442  00115C                     l8608:
 15443                           
 15444                           ; BSR set to: 0
 15445                           ;libraries/lcd_highlevel.c: 496:     {;libraries/lcd_highlevel.c: 497:       tempChar = 
      +                          (button->text[i]) - button->font->start_char;
 15446  00115C  EE20 F00E          	lfsr	2,14
 15447  001160  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15448  001162  26D9               	addwf	fsr2l,f,c
 15449  001164  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15450  001166  22DA               	addwfc	fsr2h,f,c
 15451  001168  CFDE F0C6          	movff	postinc2,??_LCD_ButtonDraw
 15452  00116C  CFDD F0C7          	movff	postdec2,??_LCD_ButtonDraw+1
 15453  001170  0E01               	movlw	1
 15454  001172  27C6               	addwf	??_LCD_ButtonDraw& (0+255),f,b
 15455  001174  0E00               	movlw	0
 15456  001176  23C7               	addwfc	(??_LCD_ButtonDraw+1)& (0+255),f,b
 15457  001178  C0C6  FFF6         	movff	??_LCD_ButtonDraw,tblptrl
 15458  00117C  C0C7  FFF7         	movff	??_LCD_ButtonDraw+1,tblptrh
 15459  001180                     	if	0	;tblptru may be non-zero
 15460  001180                     	endif
 15461  001180                     	if	0	;tblptru may be non-zero
 15462  001180                     	endif
 15463  001180  0008               	tblrd		*
 15464  001182  CFF5 F0C8          	movff	tablat,??_LCD_ButtonDraw+2
 15465  001186  EE20 F00C          	lfsr	2,12
 15466  00118A  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15467  00118C  26D9               	addwf	fsr2l,f,c
 15468  00118E  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15469  001190  22DA               	addwfc	fsr2h,f,c
 15470  001192  CFDE F0C9          	movff	postinc2,??_LCD_ButtonDraw+3
 15471  001196  CFDD F0CA          	movff	postdec2,??_LCD_ButtonDraw+4
 15472  00119A  51E1               	movf	LCD_ButtonDraw@i& (0+255),w,b
 15473  00119C  27C9               	addwf	(??_LCD_ButtonDraw+3)& (0+255),f,b
 15474  00119E  0E00               	movlw	0
 15475  0011A0  23CA               	addwfc	(??_LCD_ButtonDraw+4)& (0+255),f,b
 15476  0011A2  C0C9  FFF6         	movff	??_LCD_ButtonDraw+3,tblptrl
 15477  0011A6  C0CA  FFF7         	movff	??_LCD_ButtonDraw+4,tblptrh
 15478  0011AA                     	if	0	;tblptru may be non-zero
 15479  0011AA                     	endif
 15480  0011AA                     	if	0	;tblptru may be non-zero
 15481  0011AA                     	endif
 15482  0011AA  0008               	tblrd		*
 15483  0011AC  CFF5 F0CB          	movff	tablat,??_LCD_ButtonDraw+5
 15484  0011B0  51C8               	movf	(??_LCD_ButtonDraw+2)& (0+255),w,b
 15485  0011B2  5DCB               	subwf	(??_LCD_ButtonDraw+5)& (0+255),w,b
 15486  0011B4  6FD2               	movwf	LCD_ButtonDraw@tempChar& (0+255),b
 15487                           
 15488                           ; BSR set to: 0
 15489                           ;libraries/lcd_highlevel.c: 498:       width += button->font->descriptor[tempChar].width
      +                          +2;
 15490  0011B6  51D2               	movf	LCD_ButtonDraw@tempChar& (0+255),w,b
 15491  0011B8  0D03               	mullw	3
 15492  0011BA  EE20 F00E          	lfsr	2,14
 15493  0011BE  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15494  0011C0  26D9               	addwf	fsr2l,f,c
 15495  0011C2  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15496  0011C4  22DA               	addwfc	fsr2h,f,c
 15497  0011C6  CFDE F0C6          	movff	postinc2,??_LCD_ButtonDraw
 15498  0011CA  CFDD F0C7          	movff	postdec2,??_LCD_ButtonDraw+1
 15499  0011CE  0E03               	movlw	3
 15500  0011D0  27C6               	addwf	??_LCD_ButtonDraw& (0+255),f,b
 15501  0011D2  0E00               	movlw	0
 15502  0011D4  23C7               	addwfc	(??_LCD_ButtonDraw+1)& (0+255),f,b
 15503  0011D6  C0C6  FFF6         	movff	??_LCD_ButtonDraw,tblptrl
 15504  0011DA  C0C7  FFF7         	movff	??_LCD_ButtonDraw+1,tblptrh
 15505  0011DE                     	if	0	;tblptru may be non-zero
 15506  0011DE                     	endif
 15507  0011DE                     	if	0	;tblptru may be non-zero
 15508  0011DE                     	endif
 15509  0011DE  0009               	tblrd		*+
 15510  0011E0  CFF5 F0C8          	movff	tablat,??_LCD_ButtonDraw+2
 15511  0011E4  0009               	tblrd		*+
 15512  0011E6  CFF5 F0C9          	movff	tablat,??_LCD_ButtonDraw+3
 15513  0011EA  50F3               	movf	243,w,c
 15514  0011EC  27C8               	addwf	(??_LCD_ButtonDraw+2)& (0+255),f,b
 15515  0011EE  50F4               	movf	244,w,c
 15516  0011F0  23C9               	addwfc	(??_LCD_ButtonDraw+3)& (0+255),f,b
 15517  0011F2  C0C8  FFF6         	movff	??_LCD_ButtonDraw+2,tblptrl
 15518  0011F6  C0C9  FFF7         	movff	??_LCD_ButtonDraw+3,tblptrh
 15519  0011FA                     	if	0	;tblptru may be non-zero
 15520  0011FA                     	endif
 15521  0011FA                     	if	0	;tblptru may be non-zero
 15522  0011FA                     	endif
 15523  0011FA  0008               	tblrd		*
 15524  0011FC  50F5               	movf	tablat,w,c
 15525  0011FE  6FCA               	movwf	(??_LCD_ButtonDraw+4)& (0+255),b
 15526  001200  6BCB               	clrf	(??_LCD_ButtonDraw+5)& (0+255),b
 15527  001202  0E02               	movlw	2
 15528  001204  27CA               	addwf	(??_LCD_ButtonDraw+4)& (0+255),f,b
 15529  001206  0E00               	movlw	0
 15530  001208  23CB               	addwfc	(??_LCD_ButtonDraw+5)& (0+255),f,b
 15531  00120A  51CA               	movf	(??_LCD_ButtonDraw+4)& (0+255),w,b
 15532  00120C  27D3               	addwf	LCD_ButtonDraw@width& (0+255),f,b
 15533  00120E  51CB               	movf	(??_LCD_ButtonDraw+5)& (0+255),w,b
 15534  001210  23D4               	addwfc	(LCD_ButtonDraw@width+1)& (0+255),f,b
 15535                           
 15536                           ; BSR set to: 0
 15537                           ;libraries/lcd_highlevel.c: 499:     }
 15538  001212  2BE1               	incf	LCD_ButtonDraw@i& (0+255),f,b
 15539  001214                     l8614:
 15540                           
 15541                           ; BSR set to: 0
 15542  001214  EE20 F00C          	lfsr	2,12
 15543  001218  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15544  00121A  26D9               	addwf	fsr2l,f,c
 15545  00121C  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15546  00121E  22DA               	addwfc	fsr2h,f,c
 15547  001220  CFDE F012          	movff	postinc2,strlen@s
 15548  001224  CFDD F013          	movff	postdec2,strlen@s+1
 15549  001228  ECFE  F02A         	call	_strlen	;wreg free
 15550  00122C  0100               	movlb	0	; () banked
 15551  00122E  51E1               	movf	LCD_ButtonDraw@i& (0+255),w,b
 15552  001230  6FC6               	movwf	??_LCD_ButtonDraw& (0+255),b
 15553  001232  6BC7               	clrf	(??_LCD_ButtonDraw+1)& (0+255),b
 15554  001234  5012               	movf	?_strlen^0,w,c
 15555  001236  5DC6               	subwf	??_LCD_ButtonDraw& (0+255),w,b
 15556  001238  5013               	movf	(?_strlen+1)^0,w,c
 15557  00123A  59C7               	subwfb	(??_LCD_ButtonDraw+1)& (0+255),w,b
 15558  00123C  A0D8               	btfss	status,0,c
 15559  00123E  D78E               	goto	l8608
 15560                           
 15561                           ; BSR set to: 0
 15562                           ;libraries/lcd_highlevel.c: 500:     xText = button->width / 2 + button->posX - (width /
      +                           2);
 15563  001240  C042  FFD9         	movff	LCD_ButtonDraw@button,fsr2l
 15564  001244  C043  FFDA         	movff	LCD_ButtonDraw@button+1,fsr2h
 15565  001248  CFDE F0C6          	movff	postinc2,??_LCD_ButtonDraw
 15566  00124C  CFDD F0C7          	movff	postdec2,??_LCD_ButtonDraw+1
 15567  001250  90D8               	bcf	status,0,c
 15568  001252  31D4               	rrcf	(LCD_ButtonDraw@width+1)& (0+255),w,b
 15569  001254  6FC9               	movwf	(??_LCD_ButtonDraw+3)& (0+255),b
 15570  001256  31D3               	rrcf	LCD_ButtonDraw@width& (0+255),w,b
 15571  001258  6FC8               	movwf	(??_LCD_ButtonDraw+2)& (0+255),b
 15572  00125A  EE20 F004          	lfsr	2,4
 15573  00125E  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15574  001260  26D9               	addwf	fsr2l,f,c
 15575  001262  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15576  001264  22DA               	addwfc	fsr2h,f,c
 15577  001266  CFDE F0CA          	movff	postinc2,??_LCD_ButtonDraw+4
 15578  00126A  CFDD F0CB          	movff	postdec2,??_LCD_ButtonDraw+5
 15579  00126E  90D8               	bcf	status,0,c
 15580  001270  31CB               	rrcf	(??_LCD_ButtonDraw+5)& (0+255),w,b
 15581  001272  6FCD               	movwf	(??_LCD_ButtonDraw+7)& (0+255),b
 15582  001274  31CA               	rrcf	(??_LCD_ButtonDraw+4)& (0+255),w,b
 15583  001276  6FCC               	movwf	(??_LCD_ButtonDraw+6)& (0+255),b
 15584  001278  51C8               	movf	(??_LCD_ButtonDraw+2)& (0+255),w,b
 15585  00127A  5FCC               	subwf	(??_LCD_ButtonDraw+6)& (0+255),f,b
 15586  00127C  51C9               	movf	(??_LCD_ButtonDraw+3)& (0+255),w,b
 15587  00127E  5BCD               	subwfb	(??_LCD_ButtonDraw+7)& (0+255),f,b
 15588  001280  51C6               	movf	??_LCD_ButtonDraw& (0+255),w,b
 15589  001282  25CC               	addwf	(??_LCD_ButtonDraw+6)& (0+255),w,b
 15590  001284  6FDD               	movwf	LCD_ButtonDraw@xText& (0+255),b
 15591  001286  51C7               	movf	(??_LCD_ButtonDraw+1)& (0+255),w,b
 15592  001288  21CD               	addwfc	(??_LCD_ButtonDraw+7)& (0+255),w,b
 15593  00128A  6FDE               	movwf	(LCD_ButtonDraw@xText+1)& (0+255),b
 15594                           
 15595                           ; BSR set to: 0
 15596                           ;libraries/lcd_highlevel.c: 501:     LCD_DrawText(button->text, button->font,A_LEFT,
 15597  00128C  EE20 F00C          	lfsr	2,12
 15598  001290  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15599  001292  26D9               	addwf	fsr2l,f,c
 15600  001294  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15601  001296  22DA               	addwfc	fsr2h,f,c
 15602  001298  CFDE F020          	movff	postinc2,LCD_DrawText@msg
 15603  00129C  CFDD F021          	movff	postdec2,LCD_DrawText@msg+1
 15604  0012A0  EE20 F00E          	lfsr	2,14
 15605  0012A4  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15606  0012A6  26D9               	addwf	fsr2l,f,c
 15607  0012A8  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15608  0012AA  22DA               	addwfc	fsr2h,f,c
 15609  0012AC  CFDE F022          	movff	postinc2,LCD_DrawText@font
 15610  0012B0  CFDD F023          	movff	postdec2,LCD_DrawText@font+1
 15611  0012B4  0E00               	movlw	0
 15612  0012B6  6E24               	movwf	LCD_DrawText@align^0,c
 15613  0012B8  C0DD  F025         	movff	LCD_ButtonDraw@xText,LCD_DrawText@posX
 15614  0012BC  C0DE  F026         	movff	LCD_ButtonDraw@xText+1,LCD_DrawText@posX+1
 15615  0012C0  C0DF  F027         	movff	LCD_ButtonDraw@yText,LCD_DrawText@posY
 15616  0012C4  C0E0  F028         	movff	LCD_ButtonDraw@yText+1,LCD_DrawText@posY+1
 15617  0012C8  EE20 F008          	lfsr	2,8
 15618  0012CC  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15619  0012CE  26D9               	addwf	fsr2l,f,c
 15620  0012D0  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15621  0012D2  22DA               	addwfc	fsr2h,f,c
 15622  0012D4  CFDE F029          	movff	postinc2,LCD_DrawText@color
 15623  0012D8  CFDD F02A          	movff	postdec2,LCD_DrawText@color+1
 15624  0012DC  EE20 F00A          	lfsr	2,10
 15625  0012E0  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15626  0012E2  26D9               	addwf	fsr2l,f,c
 15627  0012E4  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15628  0012E6  22DA               	addwfc	fsr2h,f,c
 15629  0012E8  CFDE F02B          	movff	postinc2,LCD_DrawText@bg_color
 15630  0012EC  CFDD F02C          	movff	postdec2,LCD_DrawText@bg_color+1
 15631  0012F0  EC85  F00F         	call	_LCD_DrawText	;wreg free
 15632  0012F4                     l8620:
 15633                           
 15634                           ;libraries/lcd_highlevel.c: 504:   LCD_ButtonUpdate(button);
 15635  0012F4  C042  F025         	movff	LCD_ButtonDraw@button,LCD_ButtonUpdate@button
 15636  0012F8  C043  F026         	movff	LCD_ButtonDraw@button+1,LCD_ButtonUpdate@button+1
 15637  0012FC  EC47  F018         	call	_LCD_ButtonUpdate	;wreg free
 15638  001300  0012               	return		;funcret
 15639  001302                     __end_of_LCD_ButtonDraw:
 15640                           	callstack 0
 15641                           
 15642 ;; *************** function _LCD_DrawText *****************
 15643 ;; Defined at:
 15644 ;;		line 713 in file "libraries/lcd_highlevel.c"
 15645 ;; Parameters:    Size  Location     Type
 15646 ;;  msg             2   31[COMRAM] PTR const unsigned char 
 15647 ;;		 -> g1.str(2), STR_15(13), STR_14(13), STR_13(6), 
 15648 ;;		 -> STR_12(11), STR_11(11), STR_10(8), STR_9(9), 
 15649 ;;		 -> STR_8(2), STR_7(9), STR_6(11), STR_5(9), 
 15650 ;;		 -> STR_4(9), g1(240), STR_1(10), 
 15651 ;;  font            2   33[COMRAM] PTR const struct .
 15652 ;;		 -> arialNarrow_12ptFontInfo(7), 
 15653 ;;  align           1   35[COMRAM] enum E355
 15654 ;;  posX            2   36[COMRAM] unsigned short 
 15655 ;;  posY            2   38[COMRAM] unsigned short 
 15656 ;;  color           2   40[COMRAM] unsigned short 
 15657 ;;  bg_color        2   42[COMRAM] unsigned short 
 15658 ;; Auto vars:     Size  Location     Type
 15659 ;;  posXEnd         2   58[COMRAM] unsigned short 
 15660 ;;  posYEnd         2   56[COMRAM] unsigned short 
 15661 ;;  yOffset         2   52[COMRAM] unsigned short 
 15662 ;;  offset          2   50[COMRAM] unsigned short 
 15663 ;;  width           1   64[COMRAM] unsigned char 
 15664 ;;  x               1   63[COMRAM] unsigned char 
 15665 ;;  tempChar        1   62[COMRAM] char 
 15666 ;;  i               1   61[COMRAM] unsigned char 
 15667 ;;  y               1   60[COMRAM] unsigned char 
 15668 ;;  fontPixel       1   55[COMRAM] unsigned char 
 15669 ;;  fontByte        1   54[COMRAM] unsigned char 
 15670 ;; Return value:  Size  Location     Type
 15671 ;;                  1    wreg      void 
 15672 ;; Registers used:
 15673 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15674 ;; Tracked objects:
 15675 ;;		On entry : 0/0
 15676 ;;		On exit  : 0/0
 15677 ;;		Unchanged: 0/0
 15678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15679 ;;      Params:        13       0       0       0       0       0       0
 15680 ;;      Locals:        15       0       0       0       0       0       0
 15681 ;;      Temps:          6       0       0       0       0       0       0
 15682 ;;      Totals:        34       0       0       0       0       0       0
 15683 ;;Total ram usage:       34 bytes
 15684 ;; Hardware stack levels used: 1
 15685 ;; Hardware stack levels required when called: 5
 15686 ;; This function calls:
 15687 ;;		___awdiv
 15688 ;;		___wmul
 15689 ;;		_strlen
 15690 ;; This function is called by:
 15691 ;;		_Factory_init
 15692 ;;		_Score_draw
 15693 ;;		_Menu_welcomeDraw
 15694 ;;		_Menu_parametersDraw
 15695 ;;		_Menu_endGame
 15696 ;;		_LCD_ButtonDraw
 15697 ;; This function uses a non-reentrant model
 15698 ;;
 15699                           
 15700                           	psect	text69
 15701  001F0A                     __ptext69:
 15702                           	callstack 0
 15703  001F0A                     _LCD_DrawText:
 15704                           	callstack 20
 15705                           
 15706                           ;libraries/lcd_highlevel.c: 713: void LCD_DrawText(const uint8_t * msg,const FONT_INFO *
      +                           font, ALIGN align,;libraries/lcd_highlevel.c: 714:         uint16_t posX, uint16_t posY
      +                          , uint16_t color, uint16_t bg_color);libraries/lcd_highlevel.c: 715: {;libraries/lcd_hig
      +                          hlevel.c: 716:   uint8_t x,y,i;;libraries/lcd_highlevel.c: 717:   int8_t tempChar;;libra
      +                          ries/lcd_highlevel.c: 718:   uint16_t offset;;libraries/lcd_highlevel.c: 719:   uint8_t 
      +                          width=0;
 15707                           
 15708                           ;incstack = 0
 15709  001F0A  0E00               	movlw	0
 15710  001F0C  6E41               	movwf	LCD_DrawText@width^0,c
 15711                           
 15712                           ;libraries/lcd_highlevel.c: 720:   uint8_t fontByte,fontPixel;;libraries/lcd_highlevel.c
      +                          : 721:   uint16_t posYEnd, posXEnd, yOffset;;libraries/lcd_highlevel.c: 725:   for(i=0;i
      +                          <strlen(msg);i++)
 15713  001F0E  0E00               	movlw	0
 15714  001F10  6E3E               	movwf	LCD_DrawText@i^0,c
 15715  001F12  D04F               	goto	l8422
 15716  001F14                     l8416:
 15717                           
 15718                           ;libraries/lcd_highlevel.c: 726:   {;libraries/lcd_highlevel.c: 727:     tempChar = (msg
      +                          [i]) - font->start_char;
 15719  001F14  0E01               	movlw	1
 15720  001F16  2422               	addwf	LCD_DrawText@font^0,w,c
 15721  001F18  6E2D               	movwf	??_LCD_DrawText^0,c
 15722  001F1A  0E00               	movlw	0
 15723  001F1C  2023               	addwfc	(LCD_DrawText@font+1)^0,w,c
 15724  001F1E  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 15725  001F20  C02D  FFF6         	movff	??_LCD_DrawText,tblptrl
 15726  001F24  C02E  FFF7         	movff	??_LCD_DrawText+1,tblptrh
 15727  001F28                     	if	0	;tblptru may be non-zero
 15728  001F28                     	endif
 15729  001F28                     	if	0	;tblptru may be non-zero
 15730  001F28                     	endif
 15731  001F28  0008               	tblrd		*
 15732  001F2A  CFF5 F02F          	movff	tablat,??_LCD_DrawText+2
 15733  001F2E  503E               	movf	LCD_DrawText@i^0,w,c
 15734  001F30  2420               	addwf	LCD_DrawText@msg^0,w,c
 15735  001F32  6E30               	movwf	(??_LCD_DrawText+3)^0,c
 15736  001F34  0E00               	movlw	0
 15737  001F36  2021               	addwfc	(LCD_DrawText@msg+1)^0,w,c
 15738  001F38  6E31               	movwf	(??_LCD_DrawText+4)^0,c
 15739  001F3A  C030  FFF6         	movff	??_LCD_DrawText+3,tblptrl
 15740  001F3E  C031  FFF7         	movff	??_LCD_DrawText+4,tblptrh
 15741  001F42  6AF8               	clrf	tblptru,c
 15742  001F44  0E05               	movlw	(high __ramtop+-1)
 15743  001F46  64F7               	cpfsgt	tblptrh,c
 15744  001F48  D003               	bra	u6187
 15745  001F4A  0008               	tblrd		*
 15746  001F4C  50F5               	movf	tablat,w,c
 15747  001F4E  D005               	bra	u6180
 15748  001F50                     u6187:
 15749  001F50  CFF6 FFE1          	movff	tblptrl,fsr1l
 15750  001F54  CFF7 FFE2          	movff	tblptrh,fsr1h
 15751  001F58  50E7               	movf	indf1,w,c
 15752  001F5A                     u6180:
 15753  001F5A  6E32               	movwf	(??_LCD_DrawText+5)^0,c
 15754  001F5C  502F               	movf	(??_LCD_DrawText+2)^0,w,c
 15755  001F5E  5C32               	subwf	(??_LCD_DrawText+5)^0,w,c
 15756  001F60  6E3F               	movwf	LCD_DrawText@tempChar^0,c
 15757                           
 15758                           ;libraries/lcd_highlevel.c: 728:     width += font->descriptor[tempChar].width+2;
 15759  001F62  503F               	movf	LCD_DrawText@tempChar^0,w,c
 15760  001F64  6E1A               	movwf	___wmul@multiplier^0,c
 15761  001F66  6A1B               	clrf	(___wmul@multiplier+1)^0,c
 15762  001F68  BE1A               	btfsc	___wmul@multiplier^0,7,c
 15763  001F6A  061B               	decf	(___wmul@multiplier+1)^0,f,c
 15764  001F6C  0E00               	movlw	0
 15765  001F6E  6E1D               	movwf	(___wmul@multiplicand+1)^0,c
 15766  001F70  0E03               	movlw	3
 15767  001F72  6E1C               	movwf	___wmul@multiplicand^0,c
 15768  001F74  EC7B  F02C         	call	___wmul	;wreg free
 15769  001F78  0E03               	movlw	3
 15770  001F7A  2422               	addwf	LCD_DrawText@font^0,w,c
 15771  001F7C  6E2D               	movwf	??_LCD_DrawText^0,c
 15772  001F7E  0E00               	movlw	0
 15773  001F80  2023               	addwfc	(LCD_DrawText@font+1)^0,w,c
 15774  001F82  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 15775  001F84  C02D  FFF6         	movff	??_LCD_DrawText,tblptrl
 15776  001F88  C02E  FFF7         	movff	??_LCD_DrawText+1,tblptrh
 15777  001F8C                     	if	0	;tblptru may be non-zero
 15778  001F8C                     	endif
 15779  001F8C                     	if	0	;tblptru may be non-zero
 15780  001F8C                     	endif
 15781  001F8C  0009               	tblrd		*+
 15782  001F8E  CFF5 F02F          	movff	tablat,??_LCD_DrawText+2
 15783  001F92  0009               	tblrd		*+
 15784  001F94  CFF5 F030          	movff	tablat,??_LCD_DrawText+3
 15785  001F98  501A               	movf	?___wmul^0,w,c
 15786  001F9A  262F               	addwf	(??_LCD_DrawText+2)^0,f,c
 15787  001F9C  501B               	movf	(?___wmul+1)^0,w,c
 15788  001F9E  2230               	addwfc	(??_LCD_DrawText+3)^0,f,c
 15789  001FA0  C02F  FFF6         	movff	??_LCD_DrawText+2,tblptrl
 15790  001FA4  C030  FFF7         	movff	??_LCD_DrawText+3,tblptrh
 15791  001FA8                     	if	0	;tblptru may be non-zero
 15792  001FA8                     	endif
 15793  001FA8                     	if	0	;tblptru may be non-zero
 15794  001FA8                     	endif
 15795  001FA8  0008               	tblrd		*
 15796  001FAA  50F5               	movf	tablat,w,c
 15797  001FAC  0F02               	addlw	2
 15798  001FAE  2641               	addwf	LCD_DrawText@width^0,f,c
 15799                           
 15800                           ;libraries/lcd_highlevel.c: 729:   }
 15801  001FB0  2A3E               	incf	LCD_DrawText@i^0,f,c
 15802  001FB2                     l8422:
 15803  001FB2  C020  F012         	movff	LCD_DrawText@msg,strlen@s
 15804  001FB6  C021  F013         	movff	LCD_DrawText@msg+1,strlen@s+1
 15805  001FBA  ECFE  F02A         	call	_strlen	;wreg free
 15806  001FBE  503E               	movf	LCD_DrawText@i^0,w,c
 15807  001FC0  6E2D               	movwf	??_LCD_DrawText^0,c
 15808  001FC2  6A2E               	clrf	(??_LCD_DrawText+1)^0,c
 15809  001FC4  5012               	movf	?_strlen^0,w,c
 15810  001FC6  5C2D               	subwf	??_LCD_DrawText^0,w,c
 15811  001FC8  5013               	movf	(?_strlen+1)^0,w,c
 15812  001FCA  582E               	subwfb	(??_LCD_DrawText+1)^0,w,c
 15813  001FCC  A0D8               	btfss	status,0,c
 15814  001FCE  D7A2               	goto	l8416
 15815                           
 15816                           ;libraries/lcd_highlevel.c: 730:   if(align == A_RIGHT)
 15817  001FD0  0424               	decf	LCD_DrawText@align^0,w,c
 15818  001FD2  A4D8               	btfss	status,2,c
 15819  001FD4  D002               	goto	l8428
 15820                           
 15821                           ;libraries/lcd_highlevel.c: 731:   {;libraries/lcd_highlevel.c: 732:     posX = posX - w
      +                          idth;
 15822  001FD6  5041               	movf	LCD_DrawText@width^0,w,c
 15823  001FD8  D009               	goto	L9
 15824  001FDA                     l8428:
 15825  001FDA  0E02               	movlw	2
 15826  001FDC  1824               	xorwf	LCD_DrawText@align^0,w,c
 15827  001FDE  A4D8               	btfss	status,2,c
 15828  001FE0  D00B               	goto	l8432
 15829                           
 15830                           ;libraries/lcd_highlevel.c: 735:   {;libraries/lcd_highlevel.c: 736:     posX = posX - w
      +                          idth / 2;
 15831  001FE2  C041  F02D         	movff	LCD_DrawText@width,??_LCD_DrawText
 15832  001FE6  90D8               	bcf	status,0,c
 15833  001FE8  322D               	rrcf	??_LCD_DrawText^0,f,c
 15834  001FEA  502D               	movf	??_LCD_DrawText^0,w,c
 15835  001FEC                     L9:
 15836  001FEC  5C25               	subwf	LCD_DrawText@posX^0,w,c
 15837  001FEE  6E25               	movwf	LCD_DrawText@posX^0,c
 15838  001FF0  5026               	movf	(LCD_DrawText@posX+1)^0,w,c
 15839  001FF2  A0D8               	btfss	status,0,c
 15840  001FF4  0426               	decf	(LCD_DrawText@posX+1)^0,w,c
 15841  001FF6  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 15842  001FF8                     l8432:
 15843                           
 15844                           ;libraries/lcd_highlevel.c: 740:   {;libraries/lcd_highlevel.c: 741:     tempChar = (*ms
      +                          g) - font->start_char;
 15845  001FF8  0E01               	movlw	1
 15846  001FFA  2422               	addwf	LCD_DrawText@font^0,w,c
 15847  001FFC  6E2D               	movwf	??_LCD_DrawText^0,c
 15848  001FFE  0E00               	movlw	0
 15849  002000  2023               	addwfc	(LCD_DrawText@font+1)^0,w,c
 15850  002002  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 15851  002004  C02D  FFF6         	movff	??_LCD_DrawText,tblptrl
 15852  002008  C02E  FFF7         	movff	??_LCD_DrawText+1,tblptrh
 15853  00200C                     	if	0	;tblptru may be non-zero
 15854  00200C                     	endif
 15855  00200C                     	if	0	;tblptru may be non-zero
 15856  00200C                     	endif
 15857  00200C  0008               	tblrd		*
 15858  00200E  CFF5 F02F          	movff	tablat,??_LCD_DrawText+2
 15859  002012  C020  FFF6         	movff	LCD_DrawText@msg,tblptrl
 15860  002016  C021  FFF7         	movff	LCD_DrawText@msg+1,tblptrh
 15861  00201A  6AF8               	clrf	tblptru,c
 15862  00201C  0E05               	movlw	(high __ramtop+-1)
 15863  00201E  64F7               	cpfsgt	tblptrh,c
 15864  002020  D003               	bra	u6227
 15865  002022  0008               	tblrd		*
 15866  002024  50F5               	movf	tablat,w,c
 15867  002026  D005               	bra	u6220
 15868  002028                     u6227:
 15869  002028  CFF6 FFE1          	movff	tblptrl,fsr1l
 15870  00202C  CFF7 FFE2          	movff	tblptrh,fsr1h
 15871  002030  50E7               	movf	indf1,w,c
 15872  002032                     u6220:
 15873  002032  6E30               	movwf	(??_LCD_DrawText+3)^0,c
 15874  002034  502F               	movf	(??_LCD_DrawText+2)^0,w,c
 15875  002036  5C30               	subwf	(??_LCD_DrawText+3)^0,w,c
 15876  002038  6E3F               	movwf	LCD_DrawText@tempChar^0,c
 15877                           
 15878                           ;libraries/lcd_highlevel.c: 742:     offset = font->descriptor[tempChar].offset;
 15879  00203A  503F               	movf	LCD_DrawText@tempChar^0,w,c
 15880  00203C  6E1A               	movwf	___wmul@multiplier^0,c
 15881  00203E  6A1B               	clrf	(___wmul@multiplier+1)^0,c
 15882  002040  BE1A               	btfsc	___wmul@multiplier^0,7,c
 15883  002042  061B               	decf	(___wmul@multiplier+1)^0,f,c
 15884  002044  0E00               	movlw	0
 15885  002046  6E1D               	movwf	(___wmul@multiplicand+1)^0,c
 15886  002048  0E03               	movlw	3
 15887  00204A  6E1C               	movwf	___wmul@multiplicand^0,c
 15888  00204C  EC7B  F02C         	call	___wmul	;wreg free
 15889  002050  0E03               	movlw	3
 15890  002052  2422               	addwf	LCD_DrawText@font^0,w,c
 15891  002054  6E2D               	movwf	??_LCD_DrawText^0,c
 15892  002056  0E00               	movlw	0
 15893  002058  2023               	addwfc	(LCD_DrawText@font+1)^0,w,c
 15894  00205A  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 15895  00205C  C02D  FFF6         	movff	??_LCD_DrawText,tblptrl
 15896  002060  C02E  FFF7         	movff	??_LCD_DrawText+1,tblptrh
 15897  002064                     	if	0	;tblptru may be non-zero
 15898  002064                     	endif
 15899  002064                     	if	0	;tblptru may be non-zero
 15900  002064                     	endif
 15901  002064  0009               	tblrd		*+
 15902  002066  CFF5 F02F          	movff	tablat,??_LCD_DrawText+2
 15903  00206A  0009               	tblrd		*+
 15904  00206C  CFF5 F030          	movff	tablat,??_LCD_DrawText+3
 15905  002070  501A               	movf	?___wmul^0,w,c
 15906  002072  262F               	addwf	(??_LCD_DrawText+2)^0,f,c
 15907  002074  501B               	movf	(?___wmul+1)^0,w,c
 15908  002076  2230               	addwfc	(??_LCD_DrawText+3)^0,f,c
 15909  002078  0E01               	movlw	1
 15910  00207A  262F               	addwf	(??_LCD_DrawText+2)^0,f,c
 15911  00207C  0E00               	movlw	0
 15912  00207E  2230               	addwfc	(??_LCD_DrawText+3)^0,f,c
 15913  002080  C02F  FFF6         	movff	??_LCD_DrawText+2,tblptrl
 15914  002084  C030  FFF7         	movff	??_LCD_DrawText+3,tblptrh
 15915  002088                     	if	0	;tblptru may be non-zero
 15916  002088                     	endif
 15917  002088                     	if	0	;tblptru may be non-zero
 15918  002088                     	endif
 15919  002088  0009               	tblrd		*+
 15920  00208A  CFF5 F033          	movff	tablat,LCD_DrawText@offset
 15921  00208E  000A               	tblrd		*-
 15922  002090  CFF5 F034          	movff	tablat,LCD_DrawText@offset+1
 15923                           
 15924                           ;libraries/lcd_highlevel.c: 743:     width = font->descriptor[tempChar].width;
 15925  002094  503F               	movf	LCD_DrawText@tempChar^0,w,c
 15926  002096  6E1A               	movwf	___wmul@multiplier^0,c
 15927  002098  6A1B               	clrf	(___wmul@multiplier+1)^0,c
 15928  00209A  BE1A               	btfsc	___wmul@multiplier^0,7,c
 15929  00209C  061B               	decf	(___wmul@multiplier+1)^0,f,c
 15930  00209E  0E00               	movlw	0
 15931  0020A0  6E1D               	movwf	(___wmul@multiplicand+1)^0,c
 15932  0020A2  0E03               	movlw	3
 15933  0020A4  6E1C               	movwf	___wmul@multiplicand^0,c
 15934  0020A6  EC7B  F02C         	call	___wmul	;wreg free
 15935  0020AA  0E03               	movlw	3
 15936  0020AC  2422               	addwf	LCD_DrawText@font^0,w,c
 15937  0020AE  6E2D               	movwf	??_LCD_DrawText^0,c
 15938  0020B0  0E00               	movlw	0
 15939  0020B2  2023               	addwfc	(LCD_DrawText@font+1)^0,w,c
 15940  0020B4  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 15941  0020B6  C02D  FFF6         	movff	??_LCD_DrawText,tblptrl
 15942  0020BA  C02E  FFF7         	movff	??_LCD_DrawText+1,tblptrh
 15943  0020BE                     	if	0	;tblptru may be non-zero
 15944  0020BE                     	endif
 15945  0020BE                     	if	0	;tblptru may be non-zero
 15946  0020BE                     	endif
 15947  0020BE  0009               	tblrd		*+
 15948  0020C0  CFF5 F02F          	movff	tablat,??_LCD_DrawText+2
 15949  0020C4  0009               	tblrd		*+
 15950  0020C6  CFF5 F030          	movff	tablat,??_LCD_DrawText+3
 15951  0020CA  501A               	movf	?___wmul^0,w,c
 15952  0020CC  262F               	addwf	(??_LCD_DrawText+2)^0,f,c
 15953  0020CE  501B               	movf	(?___wmul+1)^0,w,c
 15954  0020D0  2230               	addwfc	(??_LCD_DrawText+3)^0,f,c
 15955  0020D2  C02F  FFF6         	movff	??_LCD_DrawText+2,tblptrl
 15956  0020D6  C030  FFF7         	movff	??_LCD_DrawText+3,tblptrh
 15957  0020DA                     	if	0	;tblptru may be non-zero
 15958  0020DA                     	endif
 15959  0020DA                     	if	0	;tblptru may be non-zero
 15960  0020DA                     	endif
 15961  0020DA  0008               	tblrd		*
 15962  0020DC  CFF5 F041          	movff	tablat,LCD_DrawText@width
 15963                           
 15964                           ;libraries/lcd_highlevel.c: 748:     PORTA = 0x2A; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 15965  0020E0  0E2A               	movlw	42
 15966  0020E2  6E80               	movwf	128,c	;volatile
 15967  0020E4  988B               	bcf	3979,4,c	;volatile
 15968  0020E6  968B               	bcf	3979,3,c	;volatile
 15969  0020E8  868B               	bsf	3979,3,c	;volatile
 15970  0020EA  888B               	bsf	3979,4,c	;volatile
 15971                           
 15972                           ;libraries/lcd_highlevel.c: 749:     PORTA = posX>>8; LATC3 = 0; LATC3 = 1;;
 15973  0020EC  C026  FF80         	movff	LCD_DrawText@posX+1,3968	;volatile
 15974  0020F0  968B               	bcf	3979,3,c	;volatile
 15975  0020F2  868B               	bsf	3979,3,c	;volatile
 15976                           
 15977                           ;libraries/lcd_highlevel.c: 750:     PORTA = posX; LATC3 = 0; LATC3 = 1;;
 15978  0020F4  C025  FF80         	movff	LCD_DrawText@posX,3968	;volatile
 15979  0020F8  968B               	bcf	3979,3,c	;volatile
 15980  0020FA  868B               	bsf	3979,3,c	;volatile
 15981                           
 15982                           ;libraries/lcd_highlevel.c: 751:     posXEnd = posX+width-1+2;
 15983  0020FC  5041               	movf	LCD_DrawText@width^0,w,c
 15984  0020FE  2425               	addwf	LCD_DrawText@posX^0,w,c
 15985  002100  6E2D               	movwf	??_LCD_DrawText^0,c
 15986  002102  0E00               	movlw	0
 15987  002104  2026               	addwfc	(LCD_DrawText@posX+1)^0,w,c
 15988  002106  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 15989  002108  0E01               	movlw	1
 15990  00210A  242D               	addwf	??_LCD_DrawText^0,w,c
 15991  00210C  6E3B               	movwf	LCD_DrawText@posXEnd^0,c
 15992  00210E  0E00               	movlw	0
 15993  002110  202E               	addwfc	(??_LCD_DrawText+1)^0,w,c
 15994  002112  6E3C               	movwf	(LCD_DrawText@posXEnd+1)^0,c
 15995                           
 15996                           ;libraries/lcd_highlevel.c: 752:     PORTA = posXEnd>>8; LATC3 = 0; LATC3 = 1;;
 15997  002114  C03C  FF80         	movff	LCD_DrawText@posXEnd+1,3968	;volatile
 15998  002118  968B               	bcf	3979,3,c	;volatile
 15999  00211A  868B               	bsf	3979,3,c	;volatile
 16000                           
 16001                           ;libraries/lcd_highlevel.c: 753:     PORTA = posXEnd; LATC3 = 0; LATC3 = 1;;
 16002  00211C  C03B  FF80         	movff	LCD_DrawText@posXEnd,3968	;volatile
 16003  002120  968B               	bcf	3979,3,c	;volatile
 16004  002122  868B               	bsf	3979,3,c	;volatile
 16005                           
 16006                           ;libraries/lcd_highlevel.c: 755:     PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 16007  002124  0E2B               	movlw	43
 16008  002126  6E80               	movwf	128,c	;volatile
 16009  002128  988B               	bcf	3979,4,c	;volatile
 16010  00212A  968B               	bcf	3979,3,c	;volatile
 16011  00212C  868B               	bsf	3979,3,c	;volatile
 16012  00212E  888B               	bsf	3979,4,c	;volatile
 16013                           
 16014                           ;libraries/lcd_highlevel.c: 756:     PORTA = posY>>8; LATC3 = 0; LATC3 = 1;;
 16015  002130  C028  FF80         	movff	LCD_DrawText@posY+1,3968	;volatile
 16016  002134  968B               	bcf	3979,3,c	;volatile
 16017  002136  868B               	bsf	3979,3,c	;volatile
 16018                           
 16019                           ;libraries/lcd_highlevel.c: 757:     PORTA = posY; LATC3 = 0; LATC3 = 1;;
 16020  002138  C027  FF80         	movff	LCD_DrawText@posY,3968	;volatile
 16021  00213C  968B               	bcf	3979,3,c	;volatile
 16022  00213E  868B               	bsf	3979,3,c	;volatile
 16023                           
 16024                           ;libraries/lcd_highlevel.c: 758:     posYEnd = posY + font->height-1;
 16025  002140  C022  FFF6         	movff	LCD_DrawText@font,tblptrl
 16026  002144  C023  FFF7         	movff	LCD_DrawText@font+1,tblptrh
 16027  002148                     	if	0	;tblptru may be non-zero
 16028  002148                     	endif
 16029  002148                     	if	0	;tblptru may be non-zero
 16030  002148                     	endif
 16031  002148  0008               	tblrd		*
 16032  00214A  50F5               	movf	tablat,w,c
 16033  00214C  2427               	addwf	LCD_DrawText@posY^0,w,c
 16034  00214E  6E2D               	movwf	??_LCD_DrawText^0,c
 16035  002150  0E00               	movlw	0
 16036  002152  2028               	addwfc	(LCD_DrawText@posY+1)^0,w,c
 16037  002154  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 16038  002156  0EFF               	movlw	255
 16039  002158  242D               	addwf	??_LCD_DrawText^0,w,c
 16040  00215A  6E39               	movwf	LCD_DrawText@posYEnd^0,c
 16041  00215C  0EFF               	movlw	255
 16042  00215E  202E               	addwfc	(??_LCD_DrawText+1)^0,w,c
 16043  002160  6E3A               	movwf	(LCD_DrawText@posYEnd+1)^0,c
 16044                           
 16045                           ;libraries/lcd_highlevel.c: 759:     PORTA = posYEnd>>8; LATC3 = 0; LATC3 = 1;;
 16046  002162  C03A  FF80         	movff	LCD_DrawText@posYEnd+1,3968	;volatile
 16047  002166  968B               	bcf	3979,3,c	;volatile
 16048  002168  868B               	bsf	3979,3,c	;volatile
 16049                           
 16050                           ;libraries/lcd_highlevel.c: 760:     PORTA = posYEnd; LATC3 = 0; LATC3 = 1;;
 16051  00216A  C039  FF80         	movff	LCD_DrawText@posYEnd,3968	;volatile
 16052  00216E  968B               	bcf	3979,3,c	;volatile
 16053  002170  868B               	bsf	3979,3,c	;volatile
 16054                           
 16055                           ;libraries/lcd_highlevel.c: 761:     PORTA = 0x2C; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 16056  002172  0E2C               	movlw	44
 16057  002174  6E80               	movwf	128,c	;volatile
 16058  002176  988B               	bcf	3979,4,c	;volatile
 16059  002178  968B               	bcf	3979,3,c	;volatile
 16060  00217A  868B               	bsf	3979,3,c	;volatile
 16061  00217C  888B               	bsf	3979,4,c	;volatile
 16062                           
 16063                           ;libraries/lcd_highlevel.c: 763:     for(y=0;y<font->height;y++)
 16064  00217E  0E00               	movlw	0
 16065  002180  6E3D               	movwf	LCD_DrawText@y^0,c
 16066  002182  D07D               	goto	l8550
 16067  002184                     l8522:
 16068                           
 16069                           ;libraries/lcd_highlevel.c: 764:     {;libraries/lcd_highlevel.c: 765:       yOffset = o
      +                          ffset + (y * ((width+7)/8));
 16070  002184  C03D  F01A         	movff	LCD_DrawText@y,___wmul@multiplier
 16071  002188  6A1B               	clrf	(___wmul@multiplier+1)^0,c
 16072  00218A  0E00               	movlw	0
 16073  00218C  6E15               	movwf	(___awdiv@divisor+1)^0,c
 16074  00218E  0E08               	movlw	8
 16075  002190  6E14               	movwf	___awdiv@divisor^0,c
 16076  002192  0E07               	movlw	7
 16077  002194  2441               	addwf	LCD_DrawText@width^0,w,c
 16078  002196  6E12               	movwf	___awdiv@dividend^0,c
 16079  002198  6A13               	clrf	(___awdiv@dividend+1)^0,c
 16080  00219A  0E00               	movlw	0
 16081  00219C  2213               	addwfc	(___awdiv@dividend+1)^0,f,c
 16082  00219E  ECFD  F027         	call	___awdiv	;wreg free
 16083  0021A2  C012  F01C         	movff	?___awdiv,___wmul@multiplicand
 16084  0021A6  C013  F01D         	movff	?___awdiv+1,___wmul@multiplicand+1
 16085  0021AA  EC7B  F02C         	call	___wmul	;wreg free
 16086  0021AE  5033               	movf	LCD_DrawText@offset^0,w,c
 16087  0021B0  241A               	addwf	?___wmul^0,w,c
 16088  0021B2  6E35               	movwf	LCD_DrawText@yOffset^0,c
 16089  0021B4  5034               	movf	(LCD_DrawText@offset+1)^0,w,c
 16090  0021B6  201B               	addwfc	(?___wmul+1)^0,w,c
 16091  0021B8  6E36               	movwf	(LCD_DrawText@yOffset+1)^0,c
 16092                           
 16093                           ;libraries/lcd_highlevel.c: 766:       for(x=0;x<width;x++)
 16094  0021BA  0E00               	movlw	0
 16095  0021BC  6E40               	movwf	LCD_DrawText@x^0,c
 16096  0021BE  D04C               	goto	l8536
 16097  0021C0                     l8526:
 16098                           
 16099                           ;libraries/lcd_highlevel.c: 767:       {;libraries/lcd_highlevel.c: 768:         fontByt
      +                          e = font->bitmap[yOffset + (x/8)];
 16100  0021C0  0E05               	movlw	5
 16101  0021C2  2422               	addwf	LCD_DrawText@font^0,w,c
 16102  0021C4  6E2D               	movwf	??_LCD_DrawText^0,c
 16103  0021C6  0E00               	movlw	0
 16104  0021C8  2023               	addwfc	(LCD_DrawText@font+1)^0,w,c
 16105  0021CA  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 16106  0021CC  C02D  FFF6         	movff	??_LCD_DrawText,tblptrl
 16107  0021D0  C02E  FFF7         	movff	??_LCD_DrawText+1,tblptrh
 16108  0021D4                     	if	0	;tblptru may be non-zero
 16109  0021D4                     	endif
 16110  0021D4                     	if	0	;tblptru may be non-zero
 16111  0021D4                     	endif
 16112  0021D4  0009               	tblrd		*+
 16113  0021D6  CFF5 F02F          	movff	tablat,??_LCD_DrawText+2
 16114  0021DA  0009               	tblrd		*+
 16115  0021DC  CFF5 F030          	movff	tablat,??_LCD_DrawText+3
 16116  0021E0  C040  F031         	movff	LCD_DrawText@x,??_LCD_DrawText+4
 16117  0021E4  90D8               	bcf	status,0,c
 16118  0021E6  3231               	rrcf	(??_LCD_DrawText+4)^0,f,c
 16119  0021E8  90D8               	bcf	status,0,c
 16120  0021EA  3231               	rrcf	(??_LCD_DrawText+4)^0,f,c
 16121  0021EC  90D8               	bcf	status,0,c
 16122  0021EE  3231               	rrcf	(??_LCD_DrawText+4)^0,f,c
 16123  0021F0  5031               	movf	(??_LCD_DrawText+4)^0,w,c
 16124  0021F2  262F               	addwf	(??_LCD_DrawText+2)^0,f,c
 16125  0021F4  0E00               	movlw	0
 16126  0021F6  2230               	addwfc	(??_LCD_DrawText+3)^0,f,c
 16127  0021F8  5035               	movf	LCD_DrawText@yOffset^0,w,c
 16128  0021FA  262F               	addwf	(??_LCD_DrawText+2)^0,f,c
 16129  0021FC  5036               	movf	(LCD_DrawText@yOffset+1)^0,w,c
 16130  0021FE  2230               	addwfc	(??_LCD_DrawText+3)^0,f,c
 16131  002200  C02F  FFF6         	movff	??_LCD_DrawText+2,tblptrl
 16132  002204  C030  FFF7         	movff	??_LCD_DrawText+3,tblptrh
 16133  002208                     	if	0	;tblptru may be non-zero
 16134  002208                     	endif
 16135  002208                     	if	0	;tblptru may be non-zero
 16136  002208                     	endif
 16137  002208  0008               	tblrd		*
 16138  00220A  CFF5 F037          	movff	tablat,LCD_DrawText@fontByte
 16139                           
 16140                           ;libraries/lcd_highlevel.c: 769:         fontPixel = fontByte & (0x80 >> (x%8));
 16141  00220E  C040  F02D         	movff	LCD_DrawText@x,??_LCD_DrawText
 16142  002212  0E07               	movlw	7
 16143  002214  162D               	andwf	??_LCD_DrawText^0,f,c
 16144  002216  0E80               	movlw	128
 16145  002218  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 16146  00221A  0E00               	movlw	0
 16147  00221C  6E2F               	movwf	(??_LCD_DrawText+2)^0,c
 16148  00221E  2A2D               	incf	??_LCD_DrawText^0,f,c
 16149  002220  D003               	goto	u6234
 16150  002222                     u6235:
 16151  002222  342F               	rlcf	(??_LCD_DrawText+2)^0,w,c
 16152  002224  322F               	rrcf	(??_LCD_DrawText+2)^0,f,c
 16153  002226  322E               	rrcf	(??_LCD_DrawText+1)^0,f,c
 16154  002228                     u6234:
 16155  002228  2E2D               	decfsz	??_LCD_DrawText^0,f,c
 16156  00222A  D7FB               	goto	u6235
 16157  00222C  502E               	movf	(??_LCD_DrawText+1)^0,w,c
 16158  00222E  1437               	andwf	LCD_DrawText@fontByte^0,w,c
 16159  002230  6E38               	movwf	LCD_DrawText@fontPixel^0,c
 16160                           
 16161                           ;libraries/lcd_highlevel.c: 770:         if(fontPixel != 0)
 16162  002232  5038               	movf	LCD_DrawText@fontPixel^0,w,c
 16163  002234  B4D8               	btfsc	status,2,c
 16164  002236  D007               	goto	l315
 16165                           
 16166                           ;libraries/lcd_highlevel.c: 771:         {;libraries/lcd_highlevel.c: 772:           POR
      +                          TA = color>>8; LATC3 = 0; LATC3 = 1;;
 16167  002238  C02A  FF80         	movff	LCD_DrawText@color+1,3968	;volatile
 16168  00223C  968B               	bcf	3979,3,c	;volatile
 16169  00223E  868B               	bsf	3979,3,c	;volatile
 16170                           
 16171                           ;libraries/lcd_highlevel.c: 773:           PORTA = color; LATC3 = 0; LATC3 = 1;;
 16172  002240  C029  FF80         	movff	LCD_DrawText@color,3968	;volatile
 16173  002244  D006               	goto	L10
 16174  002246                     l315:
 16175                           
 16176                           ;libraries/lcd_highlevel.c: 776:         {;libraries/lcd_highlevel.c: 777:           POR
      +                          TA = bg_color>>8; LATC3 = 0; LATC3 = 1;;
 16177  002246  C02C  FF80         	movff	LCD_DrawText@bg_color+1,3968	;volatile
 16178  00224A  968B               	bcf	3979,3,c	;volatile
 16179  00224C  868B               	bsf	3979,3,c	;volatile
 16180                           
 16181                           ;libraries/lcd_highlevel.c: 778:           PORTA = bg_color; LATC3 = 0; LATC3 = 1;;
 16182  00224E  C02B  FF80         	movff	LCD_DrawText@bg_color,3968	;volatile
 16183  002252                     L10:
 16184  002252  968B               	bcf	3979,3,c	;volatile
 16185  002254  868B               	bsf	3979,3,c	;volatile
 16186                           
 16187                           ;libraries/lcd_highlevel.c: 780:       }
 16188  002256  2A40               	incf	LCD_DrawText@x^0,f,c
 16189  002258                     l8536:
 16190  002258  5041               	movf	LCD_DrawText@width^0,w,c
 16191  00225A  5C40               	subwf	LCD_DrawText@x^0,w,c
 16192  00225C  A0D8               	btfss	status,0,c
 16193  00225E  D7B0               	goto	l8526
 16194                           
 16195                           ;libraries/lcd_highlevel.c: 781:       for(x=0;x<2;x++)
 16196  002260  0E00               	movlw	0
 16197  002262  6E40               	movwf	LCD_DrawText@x^0,c
 16198  002264                     l318:
 16199                           
 16200                           ;libraries/lcd_highlevel.c: 782:       {;libraries/lcd_highlevel.c: 783:         PORTA =
      +                           bg_color>>8; LATC3 = 0; LATC3 = 1;;
 16201  002264  C02C  FF80         	movff	LCD_DrawText@bg_color+1,3968	;volatile
 16202  002268  968B               	bcf	3979,3,c	;volatile
 16203  00226A  868B               	bsf	3979,3,c	;volatile
 16204                           
 16205                           ;libraries/lcd_highlevel.c: 784:         PORTA = bg_color; LATC3 = 0; LATC3 = 1;;
 16206  00226C  C02B  FF80         	movff	LCD_DrawText@bg_color,3968	;volatile
 16207  002270  968B               	bcf	3979,3,c	;volatile
 16208  002272  868B               	bsf	3979,3,c	;volatile
 16209                           
 16210                           ;libraries/lcd_highlevel.c: 785:       }
 16211  002274  2A40               	incf	LCD_DrawText@x^0,f,c
 16212  002276  0E01               	movlw	1
 16213  002278  6440               	cpfsgt	LCD_DrawText@x^0,c
 16214  00227A  D7F4               	goto	l318
 16215                           
 16216                           ;libraries/lcd_highlevel.c: 786:     }
 16217  00227C  2A3D               	incf	LCD_DrawText@y^0,f,c
 16218  00227E                     l8550:
 16219  00227E  C022  FFF6         	movff	LCD_DrawText@font,tblptrl
 16220  002282  C023  FFF7         	movff	LCD_DrawText@font+1,tblptrh
 16221  002286                     	if	0	;tblptru may be non-zero
 16222  002286                     	endif
 16223  002286                     	if	0	;tblptru may be non-zero
 16224  002286                     	endif
 16225  002286  0009               	tblrd		*+
 16226  002288  50F5               	movf	tablat,w,c
 16227  00228A  5C3D               	subwf	LCD_DrawText@y^0,w,c
 16228  00228C  A0D8               	btfss	status,0,c
 16229  00228E  D77A               	goto	l8522
 16230                           
 16231                           ;libraries/lcd_highlevel.c: 787:     posX = posX + 2 + width;
 16232  002290  5041               	movf	LCD_DrawText@width^0,w,c
 16233  002292  2425               	addwf	LCD_DrawText@posX^0,w,c
 16234  002294  6E2D               	movwf	??_LCD_DrawText^0,c
 16235  002296  0E00               	movlw	0
 16236  002298  2026               	addwfc	(LCD_DrawText@posX+1)^0,w,c
 16237  00229A  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 16238  00229C  0E02               	movlw	2
 16239  00229E  242D               	addwf	??_LCD_DrawText^0,w,c
 16240  0022A0  6E25               	movwf	LCD_DrawText@posX^0,c
 16241  0022A2  0E00               	movlw	0
 16242  0022A4  202E               	addwfc	(??_LCD_DrawText+1)^0,w,c
 16243  0022A6  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 16244                           
 16245                           ;libraries/lcd_highlevel.c: 788:     msg++;
 16246  0022A8  4A20               	infsnz	LCD_DrawText@msg^0,f,c
 16247  0022AA  2A21               	incf	(LCD_DrawText@msg+1)^0,f,c
 16248                           
 16249                           ;libraries/lcd_highlevel.c: 789:  }while(*msg != 0);
 16250  0022AC  C020  FFF6         	movff	LCD_DrawText@msg,tblptrl
 16251  0022B0  C021  FFF7         	movff	LCD_DrawText@msg+1,tblptrh
 16252  0022B4  6AF8               	clrf	tblptru,c
 16253  0022B6  0E05               	movlw	(high __ramtop+-1)
 16254  0022B8  64F7               	cpfsgt	tblptrh,c
 16255  0022BA  D003               	bra	u6287
 16256  0022BC  0008               	tblrd		*
 16257  0022BE  50F5               	movf	tablat,w,c
 16258  0022C0  D005               	bra	u6280
 16259  0022C2                     u6287:
 16260  0022C2  CFF6 FFE1          	movff	tblptrl,fsr1l
 16261  0022C6  CFF7 FFE2          	movff	tblptrh,fsr1h
 16262  0022CA  50E7               	movf	indf1,w,c
 16263  0022CC                     u6280:
 16264  0022CC  0900               	iorlw	0
 16265  0022CE  B4D8               	btfsc	status,2,c
 16266  0022D0  0012               	return	
 16267  0022D2  D692               	goto	l8432
 16268  0022D4                     __end_of_LCD_DrawText:
 16269                           	callstack 0
 16270                           
 16271 ;; *************** function _strlen *****************
 16272 ;; Defined at:
 16273 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\strlen.c"
 16274 ;; Parameters:    Size  Location     Type
 16275 ;;  s               2   17[COMRAM] PTR const unsigned char 
 16276 ;;		 -> g1.str(2), dbuf(32), STR_15(13), STR_14(13), 
 16277 ;;		 -> STR_13(6), STR_12(11), STR_11(11), STR_10(8), 
 16278 ;;		 -> STR_9(9), STR_8(2), STR_7(9), STR_6(11), 
 16279 ;;		 -> STR_5(9), STR_4(9), g1(240), STR_1(10), 
 16280 ;; Auto vars:     Size  Location     Type
 16281 ;;  a               2   19[COMRAM] PTR const unsigned char 
 16282 ;;		 -> g1.str(2), dbuf(32), STR_15(13), STR_14(13), 
 16283 ;;		 -> STR_13(6), STR_12(11), STR_11(11), STR_10(8), 
 16284 ;;		 -> STR_9(9), STR_8(2), STR_7(9), STR_6(11), 
 16285 ;;		 -> STR_5(9), STR_4(9), g1(240), STR_1(10), 
 16286 ;; Return value:  Size  Location     Type
 16287 ;;                  2   17[COMRAM] unsigned int 
 16288 ;; Registers used:
 16289 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru
 16290 ;; Tracked objects:
 16291 ;;		On entry : 0/0
 16292 ;;		On exit  : 0/0
 16293 ;;		Unchanged: 0/0
 16294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16295 ;;      Params:         2       0       0       0       0       0       0
 16296 ;;      Locals:         2       0       0       0       0       0       0
 16297 ;;      Temps:          0       0       0       0       0       0       0
 16298 ;;      Totals:         4       0       0       0       0       0       0
 16299 ;;Total ram usage:        4 bytes
 16300 ;; Hardware stack levels used: 1
 16301 ;; Hardware stack levels required when called: 4
 16302 ;; This function calls:
 16303 ;;		Nothing
 16304 ;; This function is called by:
 16305 ;;		_LCD_ButtonDraw
 16306 ;;		_LCD_DrawText
 16307 ;;		_pad
 16308 ;; This function uses a non-reentrant model
 16309 ;;
 16310                           
 16311                           	psect	text70
 16312  0055FC                     __ptext70:
 16313                           	callstack 0
 16314  0055FC                     _strlen:
 16315                           	callstack 16
 16316                           
 16317                           ;incstack = 0
 16318  0055FC  C012  F014         	movff	strlen@s,strlen@a
 16319  005600  C013  F015         	movff	strlen@s+1,strlen@a+1
 16320  005604  D002               	goto	l8188
 16321  005606                     l8186:
 16322  005606  4A12               	infsnz	strlen@s^0,f,c
 16323  005608  2A13               	incf	(strlen@s+1)^0,f,c
 16324  00560A                     l8188:
 16325  00560A  C012  FFF6         	movff	strlen@s,tblptrl
 16326  00560E  C013  FFF7         	movff	strlen@s+1,tblptrh
 16327  005612  6AF8               	clrf	tblptru,c
 16328  005614  0E05               	movlw	(high __ramtop+-1)
 16329  005616  64F7               	cpfsgt	tblptrh,c
 16330  005618  D003               	bra	u5787
 16331  00561A  0008               	tblrd		*
 16332  00561C  50F5               	movf	tablat,w,c
 16333  00561E  D005               	bra	u5780
 16334  005620                     u5787:
 16335  005620  CFF6 FFE1          	movff	tblptrl,fsr1l
 16336  005624  CFF7 FFE2          	movff	tblptrh,fsr1h
 16337  005628  50E7               	movf	indf1,w,c
 16338  00562A                     u5780:
 16339  00562A  0900               	iorlw	0
 16340  00562C  A4D8               	btfss	status,2,c
 16341  00562E  D7EB               	goto	l8186
 16342  005630  5014               	movf	strlen@a^0,w,c
 16343  005632  5C12               	subwf	strlen@s^0,w,c
 16344  005634  6E12               	movwf	?_strlen^0,c
 16345  005636  5015               	movf	(strlen@a+1)^0,w,c
 16346  005638  5813               	subwfb	(strlen@s+1)^0,w,c
 16347  00563A  6E13               	movwf	(?_strlen+1)^0,c
 16348  00563C  0012               	return		;funcret
 16349  00563E                     __end_of_strlen:
 16350                           	callstack 0
 16351                           
 16352 ;; *************** function ___awdiv *****************
 16353 ;; Defined at:
 16354 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
 16355 ;; Parameters:    Size  Location     Type
 16356 ;;  dividend        2   17[COMRAM] int 
 16357 ;;  divisor         2   19[COMRAM] int 
 16358 ;; Auto vars:     Size  Location     Type
 16359 ;;  quotient        2   23[COMRAM] int 
 16360 ;;  sign            1   22[COMRAM] unsigned char 
 16361 ;;  counter         1   21[COMRAM] unsigned char 
 16362 ;; Return value:  Size  Location     Type
 16363 ;;                  2   17[COMRAM] int 
 16364 ;; Registers used:
 16365 ;;		wreg, status,2, status,0
 16366 ;; Tracked objects:
 16367 ;;		On entry : 0/0
 16368 ;;		On exit  : 0/0
 16369 ;;		Unchanged: 0/0
 16370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16371 ;;      Params:         4       0       0       0       0       0       0
 16372 ;;      Locals:         4       0       0       0       0       0       0
 16373 ;;      Temps:          0       0       0       0       0       0       0
 16374 ;;      Totals:         8       0       0       0       0       0       0
 16375 ;;Total ram usage:        8 bytes
 16376 ;; Hardware stack levels used: 1
 16377 ;; Hardware stack levels required when called: 4
 16378 ;; This function calls:
 16379 ;;		Nothing
 16380 ;; This function is called by:
 16381 ;;		_LCD_DrawText
 16382 ;; This function uses a non-reentrant model
 16383 ;;
 16384                           
 16385                           	psect	text71
 16386  004FFA                     __ptext71:
 16387                           	callstack 0
 16388  004FFA                     ___awdiv:
 16389                           	callstack 20
 16390                           
 16391                           ;incstack = 0
 16392  004FFA  0E00               	movlw	0
 16393  004FFC  6E17               	movwf	___awdiv@sign^0,c
 16394  004FFE  AE15               	btfss	(___awdiv@divisor+1)^0,7,c
 16395  005000  D006               	goto	l5800
 16396  005002  6C14               	negf	___awdiv@divisor^0,c
 16397  005004  1E15               	comf	(___awdiv@divisor+1)^0,f,c
 16398  005006  B0D8               	btfsc	status,0,c
 16399  005008  2A15               	incf	(___awdiv@divisor+1)^0,f,c
 16400  00500A  0E01               	movlw	1
 16401  00500C  6E17               	movwf	___awdiv@sign^0,c
 16402  00500E                     l5800:
 16403  00500E  AE13               	btfss	(___awdiv@dividend+1)^0,7,c
 16404  005010  D006               	goto	l5806
 16405  005012  6C12               	negf	___awdiv@dividend^0,c
 16406  005014  1E13               	comf	(___awdiv@dividend+1)^0,f,c
 16407  005016  B0D8               	btfsc	status,0,c
 16408  005018  2A13               	incf	(___awdiv@dividend+1)^0,f,c
 16409  00501A  0E01               	movlw	1
 16410  00501C  1A17               	xorwf	___awdiv@sign^0,f,c
 16411  00501E                     l5806:
 16412  00501E  0E00               	movlw	0
 16413  005020  6E19               	movwf	(___awdiv@quotient+1)^0,c
 16414  005022  0E00               	movlw	0
 16415  005024  6E18               	movwf	___awdiv@quotient^0,c
 16416  005026  5014               	movf	___awdiv@divisor^0,w,c
 16417  005028  1015               	iorwf	(___awdiv@divisor+1)^0,w,c
 16418  00502A  B4D8               	btfsc	status,2,c
 16419  00502C  D01C               	goto	l5828
 16420  00502E  0E01               	movlw	1
 16421  005030  6E16               	movwf	___awdiv@counter^0,c
 16422  005032  D004               	goto	l5814
 16423  005034                     l5812:
 16424  005034  90D8               	bcf	status,0,c
 16425  005036  3614               	rlcf	___awdiv@divisor^0,f,c
 16426  005038  3615               	rlcf	(___awdiv@divisor+1)^0,f,c
 16427  00503A  2A16               	incf	___awdiv@counter^0,f,c
 16428  00503C                     l5814:
 16429  00503C  AE15               	btfss	(___awdiv@divisor+1)^0,7,c
 16430  00503E  D7FA               	goto	l5812
 16431  005040                     u3470:
 16432  005040  90D8               	bcf	status,0,c
 16433  005042  3618               	rlcf	___awdiv@quotient^0,f,c
 16434  005044  3619               	rlcf	(___awdiv@quotient+1)^0,f,c
 16435  005046  5014               	movf	___awdiv@divisor^0,w,c
 16436  005048  5C12               	subwf	___awdiv@dividend^0,w,c
 16437  00504A  5015               	movf	(___awdiv@divisor+1)^0,w,c
 16438  00504C  5813               	subwfb	(___awdiv@dividend+1)^0,w,c
 16439  00504E  A0D8               	btfss	status,0,c
 16440  005050  D005               	goto	l5824
 16441  005052  5014               	movf	___awdiv@divisor^0,w,c
 16442  005054  5E12               	subwf	___awdiv@dividend^0,f,c
 16443  005056  5015               	movf	(___awdiv@divisor+1)^0,w,c
 16444  005058  5A13               	subwfb	(___awdiv@dividend+1)^0,f,c
 16445  00505A  8018               	bsf	___awdiv@quotient^0,0,c
 16446  00505C                     l5824:
 16447  00505C  90D8               	bcf	status,0,c
 16448  00505E  3215               	rrcf	(___awdiv@divisor+1)^0,f,c
 16449  005060  3214               	rrcf	___awdiv@divisor^0,f,c
 16450  005062  2E16               	decfsz	___awdiv@counter^0,f,c
 16451  005064  D7ED               	goto	u3470
 16452  005066                     l5828:
 16453  005066  5017               	movf	___awdiv@sign^0,w,c
 16454  005068  B4D8               	btfsc	status,2,c
 16455  00506A  D004               	goto	l5832
 16456  00506C  6C18               	negf	___awdiv@quotient^0,c
 16457  00506E  1E19               	comf	(___awdiv@quotient+1)^0,f,c
 16458  005070  B0D8               	btfsc	status,0,c
 16459  005072  2A19               	incf	(___awdiv@quotient+1)^0,f,c
 16460  005074                     l5832:
 16461  005074  C018  F012         	movff	___awdiv@quotient,?___awdiv
 16462  005078  C019  F013         	movff	___awdiv@quotient+1,?___awdiv+1
 16463  00507C  0012               	return		;funcret
 16464  00507E                     __end_of___awdiv:
 16465                           	callstack 0
 16466                           
 16467 ;; *************** function _LCD_ButtonUpdate *****************
 16468 ;; Defined at:
 16469 ;;		line 425 in file "libraries/lcd_highlevel.c"
 16470 ;; Parameters:    Size  Location     Type
 16471 ;;  button          2   36[COMRAM] PTR struct .
 16472 ;;		 -> g1(240), 
 16473 ;; Auto vars:     Size  Location     Type
 16474 ;;  y2              2   52[COMRAM] unsigned short 
 16475 ;;  x1              2   50[COMRAM] unsigned short 
 16476 ;;  y1              2   48[COMRAM] unsigned short 
 16477 ;;  x2              2   46[COMRAM] unsigned short 
 16478 ;;  colorIn         2   44[COMRAM] unsigned short 
 16479 ;;  colorOut        2   42[COMRAM] unsigned short 
 16480 ;; Return value:  Size  Location     Type
 16481 ;;                  1    wreg      void 
 16482 ;; Registers used:
 16483 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16484 ;; Tracked objects:
 16485 ;;		On entry : 0/0
 16486 ;;		On exit  : 0/0
 16487 ;;		Unchanged: 0/0
 16488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16489 ;;      Params:         2       0       0       0       0       0       0
 16490 ;;      Locals:        12       0       0       0       0       0       0
 16491 ;;      Temps:          4       0       0       0       0       0       0
 16492 ;;      Totals:        18       0       0       0       0       0       0
 16493 ;;Total ram usage:       18 bytes
 16494 ;; Hardware stack levels used: 1
 16495 ;; Hardware stack levels required when called: 5
 16496 ;; This function calls:
 16497 ;;		_LCD_DrawRect
 16498 ;;		_LCD_Read
 16499 ;; This function is called by:
 16500 ;;		_LCD_ButtonDraw
 16501 ;; This function uses a non-reentrant model
 16502 ;;
 16503                           
 16504                           	psect	text72
 16505  00308E                     __ptext72:
 16506                           	callstack 0
 16507  00308E                     _LCD_ButtonUpdate:
 16508                           	callstack 19
 16509                           
 16510                           ;libraries/lcd_highlevel.c: 425: void LCD_ButtonUpdate(btn_t * button);libraries/lcd_hig
      +                          hlevel.c: 426: {;libraries/lcd_highlevel.c: 427:   uint16_t x1,x2,y1,y2;;libraries/lcd_h
      +                          ighlevel.c: 428:   uint16_t colorOut, colorIn;;libraries/lcd_highlevel.c: 430:   x1 = bu
      +                          tton->posX;
 16511                           
 16512                           ;incstack = 0
 16513  00308E  C025  FFD9         	movff	LCD_ButtonUpdate@button,fsr2l
 16514  003092  C026  FFDA         	movff	LCD_ButtonUpdate@button+1,fsr2h
 16515  003096  CFDE F033          	movff	postinc2,LCD_ButtonUpdate@x1
 16516  00309A  CFDD F034          	movff	postdec2,LCD_ButtonUpdate@x1+1
 16517                           
 16518                           ;libraries/lcd_highlevel.c: 431:   x2 = button->posX + button->width;
 16519  00309E  EE20 F004          	lfsr	2,4
 16520  0030A2  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 16521  0030A4  26D9               	addwf	fsr2l,f,c
 16522  0030A6  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 16523  0030A8  22DA               	addwfc	fsr2h,f,c
 16524  0030AA  CFDE F027          	movff	postinc2,??_LCD_ButtonUpdate
 16525  0030AE  CFDD F028          	movff	postdec2,??_LCD_ButtonUpdate+1
 16526  0030B2  C025  FFD9         	movff	LCD_ButtonUpdate@button,fsr2l
 16527  0030B6  C026  FFDA         	movff	LCD_ButtonUpdate@button+1,fsr2h
 16528  0030BA  CFDE F029          	movff	postinc2,??_LCD_ButtonUpdate+2
 16529  0030BE  CFDD F02A          	movff	postdec2,??_LCD_ButtonUpdate+3
 16530  0030C2  5027               	movf	??_LCD_ButtonUpdate^0,w,c
 16531  0030C4  2429               	addwf	(??_LCD_ButtonUpdate+2)^0,w,c
 16532  0030C6  6E2F               	movwf	LCD_ButtonUpdate@x2^0,c
 16533  0030C8  5028               	movf	(??_LCD_ButtonUpdate+1)^0,w,c
 16534  0030CA  202A               	addwfc	(??_LCD_ButtonUpdate+3)^0,w,c
 16535  0030CC  6E30               	movwf	(LCD_ButtonUpdate@x2+1)^0,c
 16536                           
 16537                           ;libraries/lcd_highlevel.c: 432:   y1 = button->posY;
 16538  0030CE  EE20 F002          	lfsr	2,2
 16539  0030D2  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 16540  0030D4  26D9               	addwf	fsr2l,f,c
 16541  0030D6  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 16542  0030D8  22DA               	addwfc	fsr2h,f,c
 16543  0030DA  CFDE F031          	movff	postinc2,LCD_ButtonUpdate@y1
 16544  0030DE  CFDD F032          	movff	postdec2,LCD_ButtonUpdate@y1+1
 16545                           
 16546                           ;libraries/lcd_highlevel.c: 433:   y2 = button->posY + button->height;
 16547  0030E2  EE20 F006          	lfsr	2,6
 16548  0030E6  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 16549  0030E8  26D9               	addwf	fsr2l,f,c
 16550  0030EA  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 16551  0030EC  22DA               	addwfc	fsr2h,f,c
 16552  0030EE  CFDE F027          	movff	postinc2,??_LCD_ButtonUpdate
 16553  0030F2  CFDD F028          	movff	postdec2,??_LCD_ButtonUpdate+1
 16554  0030F6  EE20 F002          	lfsr	2,2
 16555  0030FA  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 16556  0030FC  26D9               	addwf	fsr2l,f,c
 16557  0030FE  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 16558  003100  22DA               	addwfc	fsr2h,f,c
 16559  003102  CFDE F029          	movff	postinc2,??_LCD_ButtonUpdate+2
 16560  003106  CFDD F02A          	movff	postdec2,??_LCD_ButtonUpdate+3
 16561  00310A  5027               	movf	??_LCD_ButtonUpdate^0,w,c
 16562  00310C  2429               	addwf	(??_LCD_ButtonUpdate+2)^0,w,c
 16563  00310E  6E35               	movwf	LCD_ButtonUpdate@y2^0,c
 16564  003110  5028               	movf	(??_LCD_ButtonUpdate+1)^0,w,c
 16565  003112  202A               	addwfc	(??_LCD_ButtonUpdate+3)^0,w,c
 16566  003114  6E36               	movwf	(LCD_ButtonUpdate@y2+1)^0,c
 16567                           
 16568                           ;libraries/lcd_highlevel.c: 435:   if(button->pressed == 0)
 16569  003116  EE20 F010          	lfsr	2,16
 16570  00311A  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 16571  00311C  26D9               	addwf	fsr2l,f,c
 16572  00311E  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 16573  003120  22DA               	addwfc	fsr2h,f,c
 16574  003122  50DF               	movf	indf2,w,c
 16575  003124  A4D8               	btfss	status,2,c
 16576  003126  D00D               	goto	l6152
 16577                           
 16578                           ;libraries/lcd_highlevel.c: 436:   {;libraries/lcd_highlevel.c: 437:     colorOut = butt
      +                          on->txtColor;
 16579  003128  EE20 F008          	lfsr	2,8
 16580  00312C  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 16581  00312E  26D9               	addwf	fsr2l,f,c
 16582  003130  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 16583  003132  22DA               	addwfc	fsr2h,f,c
 16584  003134  CFDE F02B          	movff	postinc2,LCD_ButtonUpdate@colorOut
 16585  003138  CFDD F02C          	movff	postdec2,LCD_ButtonUpdate@colorOut+1
 16586                           
 16587                           ;libraries/lcd_highlevel.c: 438:     colorIn = button->bgColor;
 16588  00313C  EE20 F00A          	lfsr	2,10
 16589  003140  D012               	goto	L11
 16590  003142                     l6152:
 16591                           
 16592                           ;libraries/lcd_highlevel.c: 441:   {;libraries/lcd_highlevel.c: 443:     colorOut = LCD_
      +                          Read(x1,y2+1);
 16593  003142  C033  F012         	movff	LCD_ButtonUpdate@x1,LCD_Read@posX
 16594  003146  C034  F013         	movff	LCD_ButtonUpdate@x1+1,LCD_Read@posX+1
 16595  00314A  0E01               	movlw	1
 16596  00314C  2435               	addwf	LCD_ButtonUpdate@y2^0,w,c
 16597  00314E  6E14               	movwf	LCD_Read@posY^0,c
 16598  003150  0E00               	movlw	0
 16599  003152  2036               	addwfc	(LCD_ButtonUpdate@y2+1)^0,w,c
 16600  003154  6E15               	movwf	(LCD_Read@posY+1)^0,c
 16601  003156  ECCC  F01C         	call	_LCD_Read	;wreg free
 16602  00315A  C012  F02B         	movff	?_LCD_Read,LCD_ButtonUpdate@colorOut
 16603  00315E  C013  F02C         	movff	?_LCD_Read+1,LCD_ButtonUpdate@colorOut+1
 16604                           
 16605                           ;libraries/lcd_highlevel.c: 444:     colorIn = button->txtColor;
 16606  003162  EE20 F008          	lfsr	2,8
 16607  003166                     L11:
 16608  003166  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 16609  003168  26D9               	addwf	fsr2l,f,c
 16610  00316A  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 16611  00316C  22DA               	addwfc	fsr2h,f,c
 16612  00316E  CFDE F02D          	movff	postinc2,LCD_ButtonUpdate@colorIn
 16613  003172  CFDD F02E          	movff	postdec2,LCD_ButtonUpdate@colorIn+1
 16614                           
 16615                           ;libraries/lcd_highlevel.c: 446:   if(button->bgColor != button->txtColor)
 16616  003176  EE20 F008          	lfsr	2,8
 16617  00317A  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 16618  00317C  26D9               	addwf	fsr2l,f,c
 16619  00317E  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 16620  003180  22DA               	addwfc	fsr2h,f,c
 16621  003182  EE10 F00A          	lfsr	1,10
 16622  003186  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 16623  003188  26E1               	addwf	fsr1l,f,c
 16624  00318A  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 16625  00318C  22E2               	addwfc	fsr1h,f,c
 16626  00318E  50DE               	movf	postinc2,w,c
 16627  003190  18E6               	xorwf	postinc1,w,c
 16628  003192  E104               	bnz	u3810
 16629  003194  50DE               	movf	postinc2,w,c
 16630  003196  18E6               	xorwf	postinc1,w,c
 16631  003198  B4D8               	btfsc	status,2,c
 16632  00319A  0012               	return	
 16633  00319C                     u3810:
 16634                           
 16635                           ;libraries/lcd_highlevel.c: 447:   {;libraries/lcd_highlevel.c: 449:     LCD_DrawRect(x1
      +                          +3, y2+1, x2+3, y2+3, 1, colorOut);
 16636  00319C  0E03               	movlw	3
 16637  00319E  2433               	addwf	LCD_ButtonUpdate@x1^0,w,c
 16638  0031A0  6E12               	movwf	LCD_DrawRect@posX1^0,c
 16639  0031A2  0E00               	movlw	0
 16640  0031A4  2034               	addwfc	(LCD_ButtonUpdate@x1+1)^0,w,c
 16641  0031A6  6E13               	movwf	(LCD_DrawRect@posX1+1)^0,c
 16642  0031A8  0E01               	movlw	1
 16643  0031AA  2435               	addwf	LCD_ButtonUpdate@y2^0,w,c
 16644  0031AC  6E14               	movwf	LCD_DrawRect@posY1^0,c
 16645  0031AE  0E00               	movlw	0
 16646  0031B0  2036               	addwfc	(LCD_ButtonUpdate@y2+1)^0,w,c
 16647  0031B2  6E15               	movwf	(LCD_DrawRect@posY1+1)^0,c
 16648  0031B4  0E03               	movlw	3
 16649  0031B6  242F               	addwf	LCD_ButtonUpdate@x2^0,w,c
 16650  0031B8  6E16               	movwf	LCD_DrawRect@posX2^0,c
 16651  0031BA  0E00               	movlw	0
 16652  0031BC  2030               	addwfc	(LCD_ButtonUpdate@x2+1)^0,w,c
 16653  0031BE  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 16654  0031C0  0E03               	movlw	3
 16655  0031C2  2435               	addwf	LCD_ButtonUpdate@y2^0,w,c
 16656  0031C4  6E18               	movwf	LCD_DrawRect@posY2^0,c
 16657  0031C6  0E00               	movlw	0
 16658  0031C8  2036               	addwfc	(LCD_ButtonUpdate@y2+1)^0,w,c
 16659  0031CA  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 16660  0031CC  0E01               	movlw	1
 16661  0031CE  6E1A               	movwf	LCD_DrawRect@fill^0,c
 16662  0031D0  C02B  F01B         	movff	LCD_ButtonUpdate@colorOut,LCD_DrawRect@color
 16663  0031D4  C02C  F01C         	movff	LCD_ButtonUpdate@colorOut+1,LCD_DrawRect@color+1
 16664  0031D8  EC34  F013         	call	_LCD_DrawRect	;wreg free
 16665                           
 16666                           ;libraries/lcd_highlevel.c: 450:     LCD_DrawRect(x2+1, y1+3, x2+3, y2+3, 1, colorOut);
 16667  0031DC  0E01               	movlw	1
 16668  0031DE  242F               	addwf	LCD_ButtonUpdate@x2^0,w,c
 16669  0031E0  6E12               	movwf	LCD_DrawRect@posX1^0,c
 16670  0031E2  0E00               	movlw	0
 16671  0031E4  2030               	addwfc	(LCD_ButtonUpdate@x2+1)^0,w,c
 16672  0031E6  6E13               	movwf	(LCD_DrawRect@posX1+1)^0,c
 16673  0031E8  0E03               	movlw	3
 16674  0031EA  2431               	addwf	LCD_ButtonUpdate@y1^0,w,c
 16675  0031EC  6E14               	movwf	LCD_DrawRect@posY1^0,c
 16676  0031EE  0E00               	movlw	0
 16677  0031F0  2032               	addwfc	(LCD_ButtonUpdate@y1+1)^0,w,c
 16678  0031F2  6E15               	movwf	(LCD_DrawRect@posY1+1)^0,c
 16679  0031F4  0E03               	movlw	3
 16680  0031F6  242F               	addwf	LCD_ButtonUpdate@x2^0,w,c
 16681  0031F8  6E16               	movwf	LCD_DrawRect@posX2^0,c
 16682  0031FA  0E00               	movlw	0
 16683  0031FC  2030               	addwfc	(LCD_ButtonUpdate@x2+1)^0,w,c
 16684  0031FE  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 16685  003200  0E03               	movlw	3
 16686  003202  2435               	addwf	LCD_ButtonUpdate@y2^0,w,c
 16687  003204  6E18               	movwf	LCD_DrawRect@posY2^0,c
 16688  003206  0E00               	movlw	0
 16689  003208  2036               	addwfc	(LCD_ButtonUpdate@y2+1)^0,w,c
 16690  00320A  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 16691  00320C  0E01               	movlw	1
 16692  00320E  6E1A               	movwf	LCD_DrawRect@fill^0,c
 16693  003210  C02B  F01B         	movff	LCD_ButtonUpdate@colorOut,LCD_DrawRect@color
 16694  003214  C02C  F01C         	movff	LCD_ButtonUpdate@colorOut+1,LCD_DrawRect@color+1
 16695  003218  EC34  F013         	call	_LCD_DrawRect	;wreg free
 16696                           
 16697                           ;libraries/lcd_highlevel.c: 451:     LCD_DrawRect(x1+1, y1+1, x2-1, y1+2, 1, colorIn);
 16698  00321C  0E01               	movlw	1
 16699  00321E  2433               	addwf	LCD_ButtonUpdate@x1^0,w,c
 16700  003220  6E12               	movwf	LCD_DrawRect@posX1^0,c
 16701  003222  0E00               	movlw	0
 16702  003224  2034               	addwfc	(LCD_ButtonUpdate@x1+1)^0,w,c
 16703  003226  6E13               	movwf	(LCD_DrawRect@posX1+1)^0,c
 16704  003228  0E01               	movlw	1
 16705  00322A  2431               	addwf	LCD_ButtonUpdate@y1^0,w,c
 16706  00322C  6E14               	movwf	LCD_DrawRect@posY1^0,c
 16707  00322E  0E00               	movlw	0
 16708  003230  2032               	addwfc	(LCD_ButtonUpdate@y1+1)^0,w,c
 16709  003232  6E15               	movwf	(LCD_DrawRect@posY1+1)^0,c
 16710  003234  0EFF               	movlw	255
 16711  003236  242F               	addwf	LCD_ButtonUpdate@x2^0,w,c
 16712  003238  6E16               	movwf	LCD_DrawRect@posX2^0,c
 16713  00323A  0EFF               	movlw	255
 16714  00323C  2030               	addwfc	(LCD_ButtonUpdate@x2+1)^0,w,c
 16715  00323E  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 16716  003240  0E02               	movlw	2
 16717  003242  2431               	addwf	LCD_ButtonUpdate@y1^0,w,c
 16718  003244  6E18               	movwf	LCD_DrawRect@posY2^0,c
 16719  003246  0E00               	movlw	0
 16720  003248  2032               	addwfc	(LCD_ButtonUpdate@y1+1)^0,w,c
 16721  00324A  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 16722  00324C  0E01               	movlw	1
 16723  00324E  6E1A               	movwf	LCD_DrawRect@fill^0,c
 16724  003250  C02D  F01B         	movff	LCD_ButtonUpdate@colorIn,LCD_DrawRect@color
 16725  003254  C02E  F01C         	movff	LCD_ButtonUpdate@colorIn+1,LCD_DrawRect@color+1
 16726  003258  EC34  F013         	call	_LCD_DrawRect	;wreg free
 16727                           
 16728                           ;libraries/lcd_highlevel.c: 452:     LCD_DrawRect(x1+1, y1+1, x1+2, y2-1, 1, colorIn);
 16729  00325C  0E01               	movlw	1
 16730  00325E  2433               	addwf	LCD_ButtonUpdate@x1^0,w,c
 16731  003260  6E12               	movwf	LCD_DrawRect@posX1^0,c
 16732  003262  0E00               	movlw	0
 16733  003264  2034               	addwfc	(LCD_ButtonUpdate@x1+1)^0,w,c
 16734  003266  6E13               	movwf	(LCD_DrawRect@posX1+1)^0,c
 16735  003268  0E01               	movlw	1
 16736  00326A  2431               	addwf	LCD_ButtonUpdate@y1^0,w,c
 16737  00326C  6E14               	movwf	LCD_DrawRect@posY1^0,c
 16738  00326E  0E00               	movlw	0
 16739  003270  2032               	addwfc	(LCD_ButtonUpdate@y1+1)^0,w,c
 16740  003272  6E15               	movwf	(LCD_DrawRect@posY1+1)^0,c
 16741  003274  0E02               	movlw	2
 16742  003276  2433               	addwf	LCD_ButtonUpdate@x1^0,w,c
 16743  003278  6E16               	movwf	LCD_DrawRect@posX2^0,c
 16744  00327A  0E00               	movlw	0
 16745  00327C  2034               	addwfc	(LCD_ButtonUpdate@x1+1)^0,w,c
 16746  00327E  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 16747  003280  0EFF               	movlw	255
 16748  003282  2435               	addwf	LCD_ButtonUpdate@y2^0,w,c
 16749  003284  6E18               	movwf	LCD_DrawRect@posY2^0,c
 16750  003286  0EFF               	movlw	255
 16751  003288  2036               	addwfc	(LCD_ButtonUpdate@y2+1)^0,w,c
 16752  00328A  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 16753  00328C  0E01               	movlw	1
 16754  00328E  6E1A               	movwf	LCD_DrawRect@fill^0,c
 16755  003290  C02D  F01B         	movff	LCD_ButtonUpdate@colorIn,LCD_DrawRect@color
 16756  003294  C02E  F01C         	movff	LCD_ButtonUpdate@colorIn+1,LCD_DrawRect@color+1
 16757  003298  EC34  F013         	call	_LCD_DrawRect	;wreg free
 16758  00329C  0012               	return		;funcret
 16759  00329E                     __end_of_LCD_ButtonUpdate:
 16760                           	callstack 0
 16761                           
 16762 ;; *************** function _LCD_Read *****************
 16763 ;; Defined at:
 16764 ;;		line 64 in file "libraries/lcd_lowlevel.c"
 16765 ;; Parameters:    Size  Location     Type
 16766 ;;  posX            2   17[COMRAM] unsigned short 
 16767 ;;  posY            2   19[COMRAM] unsigned short 
 16768 ;; Auto vars:     Size  Location     Type
 16769 ;;  temp16          2   25[COMRAM] unsigned short 
 16770 ;;  color           2   23[COMRAM] unsigned short 
 16771 ;; Return value:  Size  Location     Type
 16772 ;;                  2   17[COMRAM] unsigned short 
 16773 ;; Registers used:
 16774 ;;		wreg, status,2, status,0
 16775 ;; Tracked objects:
 16776 ;;		On entry : 0/0
 16777 ;;		On exit  : 0/0
 16778 ;;		Unchanged: 0/0
 16779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16780 ;;      Params:         4       0       0       0       0       0       0
 16781 ;;      Locals:         4       0       0       0       0       0       0
 16782 ;;      Temps:          2       0       0       0       0       0       0
 16783 ;;      Totals:        10       0       0       0       0       0       0
 16784 ;;Total ram usage:       10 bytes
 16785 ;; Hardware stack levels used: 1
 16786 ;; Hardware stack levels required when called: 4
 16787 ;; This function calls:
 16788 ;;		Nothing
 16789 ;; This function is called by:
 16790 ;;		_LCD_ButtonUpdate
 16791 ;; This function uses a non-reentrant model
 16792 ;;
 16793                           
 16794                           	psect	text73
 16795  003998                     __ptext73:
 16796                           	callstack 0
 16797  003998                     _LCD_Read:
 16798                           	callstack 19
 16799                           
 16800                           ;libraries/lcd_lowlevel.c: 64: uint16_t LCD_Read(uint16_t posX, uint16_t posY);libraries
      +                          /lcd_lowlevel.c: 65: {;libraries/lcd_lowlevel.c: 66:  uint16_t temp16;;libraries/lcd_low
      +                          level.c: 67:   uint16_t color;;libraries/lcd_lowlevel.c: 70:   PORTA = 0x2A; LATC4 = 0; 
      +                          LATC3 = 0; LATC3 = 1; LATC4 = 1;;
 16801                           
 16802                           ;incstack = 0
 16803  003998  0E2A               	movlw	42
 16804  00399A  6E80               	movwf	128,c	;volatile
 16805  00399C  988B               	bcf	3979,4,c	;volatile
 16806  00399E  968B               	bcf	3979,3,c	;volatile
 16807  0039A0  868B               	bsf	3979,3,c	;volatile
 16808  0039A2  888B               	bsf	3979,4,c	;volatile
 16809                           
 16810                           ;libraries/lcd_lowlevel.c: 71:   PORTA = posX>>8; LATC3 = 0; LATC3 = 1;;
 16811  0039A4  C013  FF80         	movff	LCD_Read@posX+1,3968	;volatile
 16812  0039A8  968B               	bcf	3979,3,c	;volatile
 16813  0039AA  868B               	bsf	3979,3,c	;volatile
 16814                           
 16815                           ;libraries/lcd_lowlevel.c: 72:   PORTA = posX; LATC3 = 0; LATC3 = 1;;
 16816  0039AC  C012  FF80         	movff	LCD_Read@posX,3968	;volatile
 16817  0039B0  968B               	bcf	3979,3,c	;volatile
 16818  0039B2  868B               	bsf	3979,3,c	;volatile
 16819                           
 16820                           ;libraries/lcd_lowlevel.c: 73:   PORTA = (240 -1) >> 8; LATC3 = 0; LATC3 = 1;;
 16821  0039B4  0E00               	movlw	0
 16822  0039B6  6E80               	movwf	128,c	;volatile
 16823  0039B8  968B               	bcf	3979,3,c	;volatile
 16824  0039BA  868B               	bsf	3979,3,c	;volatile
 16825                           
 16826                           ;libraries/lcd_lowlevel.c: 74:   PORTA = (240 -1); LATC3 = 0; LATC3 = 1;;
 16827  0039BC  0EEF               	movlw	239
 16828  0039BE  6E80               	movwf	128,c	;volatile
 16829  0039C0  968B               	bcf	3979,3,c	;volatile
 16830  0039C2  868B               	bsf	3979,3,c	;volatile
 16831                           
 16832                           ;libraries/lcd_lowlevel.c: 76:   PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 = 
      +                          1;;
 16833  0039C4  0E2B               	movlw	43
 16834  0039C6  6E80               	movwf	128,c	;volatile
 16835  0039C8  988B               	bcf	3979,4,c	;volatile
 16836  0039CA  968B               	bcf	3979,3,c	;volatile
 16837  0039CC  868B               	bsf	3979,3,c	;volatile
 16838  0039CE  888B               	bsf	3979,4,c	;volatile
 16839                           
 16840                           ;libraries/lcd_lowlevel.c: 77:   PORTA = posY>>8; LATC3 = 0; LATC3 = 1;;
 16841  0039D0  C015  FF80         	movff	LCD_Read@posY+1,3968	;volatile
 16842  0039D4  968B               	bcf	3979,3,c	;volatile
 16843  0039D6  868B               	bsf	3979,3,c	;volatile
 16844                           
 16845                           ;libraries/lcd_lowlevel.c: 78:   PORTA = posY; LATC3 = 0; LATC3 = 1;;
 16846  0039D8  C014  FF80         	movff	LCD_Read@posY,3968	;volatile
 16847  0039DC  968B               	bcf	3979,3,c	;volatile
 16848  0039DE  868B               	bsf	3979,3,c	;volatile
 16849                           
 16850                           ;libraries/lcd_lowlevel.c: 79:   PORTA = (320 -1) >> 8; LATC3 = 0; LATC3 = 1;;
 16851  0039E0  0E01               	movlw	1
 16852  0039E2  6E80               	movwf	128,c	;volatile
 16853  0039E4  968B               	bcf	3979,3,c	;volatile
 16854  0039E6  868B               	bsf	3979,3,c	;volatile
 16855                           
 16856                           ;libraries/lcd_lowlevel.c: 80:   PORTA = (320 -1); LATC3 = 0; LATC3 = 1;;
 16857  0039E8  0E3F               	movlw	63
 16858  0039EA  6E80               	movwf	128,c	;volatile
 16859  0039EC  968B               	bcf	3979,3,c	;volatile
 16860  0039EE  868B               	bsf	3979,3,c	;volatile
 16861                           
 16862                           ;libraries/lcd_lowlevel.c: 82:   PORTA = 0x2E; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 = 
      +                          1;;
 16863  0039F0  0E2E               	movlw	46
 16864  0039F2  6E80               	movwf	128,c	;volatile
 16865  0039F4  988B               	bcf	3979,4,c	;volatile
 16866  0039F6  968B               	bcf	3979,3,c	;volatile
 16867  0039F8  868B               	bsf	3979,3,c	;volatile
 16868  0039FA  888B               	bsf	3979,4,c	;volatile
 16869                           
 16870                           ;libraries/lcd_lowlevel.c: 83:  TRISA = 0xFF;
 16871  0039FC  6892               	setf	146,c	;volatile
 16872                           
 16873                           ;libraries/lcd_lowlevel.c: 84:  LATC2 = 0;
 16874  0039FE  948B               	bcf	3979,2,c	;volatile
 16875                           
 16876                           ;libraries/lcd_lowlevel.c: 85:   __nop();
 16877  003A00  F000               	nop	
 16878                           
 16879                           ;libraries/lcd_lowlevel.c: 86:  LATC2 = 1;
 16880  003A02  848B               	bsf	3979,2,c	;volatile
 16881                           
 16882                           ;libraries/lcd_lowlevel.c: 87:  TRISA = 0xFF;
 16883  003A04  6892               	setf	146,c	;volatile
 16884                           
 16885                           ;libraries/lcd_lowlevel.c: 88:  LATC2 = 0;
 16886  003A06  948B               	bcf	3979,2,c	;volatile
 16887                           
 16888                           ;libraries/lcd_lowlevel.c: 89:   __nop();
 16889  003A08  F000               	nop	
 16890                           
 16891                           ;libraries/lcd_lowlevel.c: 90:  temp16 = PORTA;
 16892  003A0A  CF80 F01A          	movff	3968,LCD_Read@temp16	;volatile
 16893  003A0E  6A1B               	clrf	(LCD_Read@temp16+1)^0,c
 16894                           
 16895                           ;libraries/lcd_lowlevel.c: 91:  LATC2 = 1;
 16896  003A10  848B               	bsf	3979,2,c	;volatile
 16897                           
 16898                           ;libraries/lcd_lowlevel.c: 92:   temp16 = temp16 >> 3;
 16899  003A12  C01A  F016         	movff	LCD_Read@temp16,??_LCD_Read
 16900  003A16  C01B  F017         	movff	LCD_Read@temp16+1,??_LCD_Read+1
 16901  003A1A  90D8               	bcf	status,0,c
 16902  003A1C  3217               	rrcf	(??_LCD_Read+1)^0,f,c
 16903  003A1E  3216               	rrcf	??_LCD_Read^0,f,c
 16904  003A20  90D8               	bcf	status,0,c
 16905  003A22  3217               	rrcf	(??_LCD_Read+1)^0,f,c
 16906  003A24  3216               	rrcf	??_LCD_Read^0,f,c
 16907  003A26  90D8               	bcf	status,0,c
 16908  003A28  3217               	rrcf	(??_LCD_Read+1)^0,f,c
 16909  003A2A  3216               	rrcf	??_LCD_Read^0,f,c
 16910  003A2C  C016  F01A         	movff	??_LCD_Read,LCD_Read@temp16
 16911  003A30  C017  F01B         	movff	??_LCD_Read+1,LCD_Read@temp16+1
 16912                           
 16913                           ;libraries/lcd_lowlevel.c: 93:   color = temp16 << 11;
 16914  003A34  C01A  F016         	movff	LCD_Read@temp16,??_LCD_Read
 16915  003A38  C01B  F017         	movff	LCD_Read@temp16+1,??_LCD_Read+1
 16916  003A3C  0E0B               	movlw	11
 16917  003A3E                     u3385:
 16918  003A3E  90D8               	bcf	status,0,c
 16919  003A40  3616               	rlcf	??_LCD_Read^0,f,c
 16920  003A42  3617               	rlcf	(??_LCD_Read+1)^0,f,c
 16921  003A44  2EE8               	decfsz	wreg,f,c
 16922  003A46  D7FB               	goto	u3385
 16923  003A48  C016  F018         	movff	??_LCD_Read,LCD_Read@color
 16924  003A4C  C017  F019         	movff	??_LCD_Read+1,LCD_Read@color+1
 16925                           
 16926                           ;libraries/lcd_lowlevel.c: 94:  LATC2 = 0;
 16927  003A50  948B               	bcf	3979,2,c	;volatile
 16928                           
 16929                           ;libraries/lcd_lowlevel.c: 95:   __nop();
 16930  003A52  F000               	nop	
 16931                           
 16932                           ;libraries/lcd_lowlevel.c: 96:  temp16 = PORTA;
 16933  003A54  CF80 F01A          	movff	3968,LCD_Read@temp16	;volatile
 16934  003A58  6A1B               	clrf	(LCD_Read@temp16+1)^0,c
 16935                           
 16936                           ;libraries/lcd_lowlevel.c: 97:  LATC2 = 1;
 16937  003A5A  848B               	bsf	3979,2,c	;volatile
 16938                           
 16939                           ;libraries/lcd_lowlevel.c: 98:   temp16 = temp16 >> 2;
 16940  003A5C  C01A  F016         	movff	LCD_Read@temp16,??_LCD_Read
 16941  003A60  C01B  F017         	movff	LCD_Read@temp16+1,??_LCD_Read+1
 16942  003A64  90D8               	bcf	status,0,c
 16943  003A66  3217               	rrcf	(??_LCD_Read+1)^0,f,c
 16944  003A68  3216               	rrcf	??_LCD_Read^0,f,c
 16945  003A6A  90D8               	bcf	status,0,c
 16946  003A6C  3217               	rrcf	(??_LCD_Read+1)^0,f,c
 16947  003A6E  3216               	rrcf	??_LCD_Read^0,f,c
 16948  003A70  C016  F01A         	movff	??_LCD_Read,LCD_Read@temp16
 16949  003A74  C017  F01B         	movff	??_LCD_Read+1,LCD_Read@temp16+1
 16950                           
 16951                           ;libraries/lcd_lowlevel.c: 99:   color |= temp16 << 5;
 16952  003A78  C01A  F016         	movff	LCD_Read@temp16,??_LCD_Read
 16953  003A7C  C01B  F017         	movff	LCD_Read@temp16+1,??_LCD_Read+1
 16954  003A80  0E05               	movlw	5
 16955  003A82                     u3395:
 16956  003A82  90D8               	bcf	status,0,c
 16957  003A84  3616               	rlcf	??_LCD_Read^0,f,c
 16958  003A86  3617               	rlcf	(??_LCD_Read+1)^0,f,c
 16959  003A88  2EE8               	decfsz	wreg,f,c
 16960  003A8A  D7FB               	goto	u3395
 16961  003A8C  5016               	movf	??_LCD_Read^0,w,c
 16962  003A8E  1218               	iorwf	LCD_Read@color^0,f,c
 16963  003A90  5017               	movf	(??_LCD_Read+1)^0,w,c
 16964  003A92  1219               	iorwf	(LCD_Read@color+1)^0,f,c
 16965                           
 16966                           ;libraries/lcd_lowlevel.c: 100:  LATC2 = 0;
 16967  003A94  948B               	bcf	3979,2,c	;volatile
 16968                           
 16969                           ;libraries/lcd_lowlevel.c: 101:   __nop();
 16970  003A96  F000               	nop	
 16971                           
 16972                           ;libraries/lcd_lowlevel.c: 102:  temp16 |= PORTA;
 16973  003A98  5080               	movf	128,w,c	;volatile
 16974  003A9A  121A               	iorwf	LCD_Read@temp16^0,f,c
 16975                           
 16976                           ;libraries/lcd_lowlevel.c: 103:  LATC2 = 1;
 16977  003A9C  848B               	bsf	3979,2,c	;volatile
 16978                           
 16979                           ;libraries/lcd_lowlevel.c: 104:   temp16 = temp16 >> 3;
 16980  003A9E  C01A  F016         	movff	LCD_Read@temp16,??_LCD_Read
 16981  003AA2  C01B  F017         	movff	LCD_Read@temp16+1,??_LCD_Read+1
 16982  003AA6  90D8               	bcf	status,0,c
 16983  003AA8  3217               	rrcf	(??_LCD_Read+1)^0,f,c
 16984  003AAA  3216               	rrcf	??_LCD_Read^0,f,c
 16985  003AAC  90D8               	bcf	status,0,c
 16986  003AAE  3217               	rrcf	(??_LCD_Read+1)^0,f,c
 16987  003AB0  3216               	rrcf	??_LCD_Read^0,f,c
 16988  003AB2  90D8               	bcf	status,0,c
 16989  003AB4  3217               	rrcf	(??_LCD_Read+1)^0,f,c
 16990  003AB6  3216               	rrcf	??_LCD_Read^0,f,c
 16991  003AB8  C016  F01A         	movff	??_LCD_Read,LCD_Read@temp16
 16992  003ABC  C017  F01B         	movff	??_LCD_Read+1,LCD_Read@temp16+1
 16993                           
 16994                           ;libraries/lcd_lowlevel.c: 105:   color |= temp16;
 16995  003AC0  501A               	movf	LCD_Read@temp16^0,w,c
 16996  003AC2  1218               	iorwf	LCD_Read@color^0,f,c
 16997  003AC4  501B               	movf	(LCD_Read@temp16+1)^0,w,c
 16998  003AC6  1219               	iorwf	(LCD_Read@color+1)^0,f,c
 16999                           
 17000                           ;libraries/lcd_lowlevel.c: 106:  TRISA = 0x00;
 17001  003AC8  0E00               	movlw	0
 17002  003ACA  6E92               	movwf	146,c	;volatile
 17003                           
 17004                           ;libraries/lcd_lowlevel.c: 107:  return color;
 17005  003ACC  C018  F012         	movff	LCD_Read@color,?_LCD_Read
 17006  003AD0  C019  F013         	movff	LCD_Read@color+1,?_LCD_Read+1
 17007  003AD4  0012               	return		;funcret
 17008  003AD6                     __end_of_LCD_Read:
 17009                           	callstack 0
 17010                           
 17011 ;; *************** function _LCD_Bitmap *****************
 17012 ;; Defined at:
 17013 ;;		line 823 in file "libraries/lcd_highlevel.c"
 17014 ;; Parameters:    Size  Location     Type
 17015 ;;  bmpPtr          2   38[COMRAM] PTR const unsigned char 
 17016 ;;		 -> STR_9(9), STR_8(2), STR_7(9), STR_6(11), 
 17017 ;;		 -> STR_5(9), STR_4(9), 
 17018 ;;  posX            2   40[COMRAM] unsigned short 
 17019 ;;  posY            2   42[COMRAM] unsigned short 
 17020 ;; Auto vars:     Size  Location     Type
 17021 ;;  bfOffBits       4    0[BANK0 ] unsigned long 
 17022 ;;  i               2   26[BANK0 ] unsigned short 
 17023 ;;  jumpColor       2   24[BANK0 ] unsigned short 
 17024 ;;  biWidth         2   22[BANK0 ] unsigned short 
 17025 ;;  newY            2   19[BANK0 ] unsigned short 
 17026 ;;  strPtr          2   17[BANK0 ] PTR struct .
 17027 ;;		 -> STR_9(9), STR_8(2), STR_7(9), STR_6(11), 
 17028 ;;		 -> STR_5(9), STR_4(9), 
 17029 ;;  color           2   15[BANK0 ] unsigned short 
 17030 ;;  curXPos         2   13[BANK0 ] unsigned short 
 17031 ;;  biHeight        2   11[BANK0 ] unsigned short 
 17032 ;;  colorTablePt    2    9[BANK0 ] PTR unsigned char 
 17033 ;;		 -> STR_9(9), STR_8(2), STR_7(9), STR_6(11), 
 17034 ;;		 -> STR_5(9), STR_4(9), 
 17035 ;;  curYPos         2    7[BANK0 ] unsigned short 
 17036 ;;  jumpCount       2    5[BANK0 ] unsigned short 
 17037 ;;  pixelCount      1   21[BANK0 ] unsigned char 
 17038 ;;  endOfImage      1    4[BANK0 ] unsigned char 
 17039 ;; Return value:  Size  Location     Type
 17040 ;;                  1    wreg      unsigned char 
 17041 ;; Registers used:
 17042 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17043 ;; Tracked objects:
 17044 ;;		On entry : 3F/0
 17045 ;;		On exit  : 3F/0
 17046 ;;		Unchanged: 0/0
 17047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17048 ;;      Params:         6       0       0       0       0       0       0
 17049 ;;      Locals:         0      28       0       0       0       0       0
 17050 ;;      Temps:          4       0       0       0       0       0       0
 17051 ;;      Totals:        10      28       0       0       0       0       0
 17052 ;;Total ram usage:       38 bytes
 17053 ;; Hardware stack levels used: 1
 17054 ;; Hardware stack levels required when called: 5
 17055 ;; This function calls:
 17056 ;;		_RGB2LCD
 17057 ;;		___lwdiv
 17058 ;;		___lwmod
 17059 ;;		___wmul
 17060 ;; This function is called by:
 17061 ;;		_LCD_ButtonDraw
 17062 ;; This function uses a non-reentrant model
 17063 ;;
 17064                           
 17065                           	psect	text74
 17066  00091A                     __ptext74:
 17067                           	callstack 0
 17068  00091A                     _LCD_Bitmap:
 17069                           	callstack 19
 17070                           
 17071                           ; BSR set to: 0
 17072                           ;libraries/lcd_highlevel.c: 823: uint8_t LCD_Bitmap(const uint8_t * bmpPtr, uint16_t pos
      +                          X, uint16_t posY);libraries/lcd_highlevel.c: 824: {;libraries/lcd_highlevel.c: 825:   ui
      +                          nt32_t bfOffBits;;libraries/lcd_highlevel.c: 826:   uint16_t biWidth, biHeight;;librarie
      +                          s/lcd_highlevel.c: 827:   uint8_t * colorTablePtr;;libraries/lcd_highlevel.c: 828:   uin
      +                          t8_t endOfImage;;libraries/lcd_highlevel.c: 829:   uint16_t i,curXPos,curYPos;;libraries
      +                          /lcd_highlevel.c: 830:   uint8_t pixelCount;;libraries/lcd_highlevel.c: 831:   uint16_t 
      +                          color;
 17073                           
 17074                           ;incstack = 0
 17075  00091A  C027  F0BB         	movff	LCD_Bitmap@bmpPtr,LCD_Bitmap@strPtr
 17076  00091E  C028  F0BC         	movff	LCD_Bitmap@bmpPtr+1,LCD_Bitmap@strPtr+1
 17077                           
 17078                           ; BSR set to: 0
 17079                           ;libraries/lcd_highlevel.c: 839:   bfOffBits = strPtr->bfOffBits;
 17080  000922  0E0A               	movlw	10
 17081  000924  25BB               	addwf	LCD_Bitmap@strPtr& (0+255),w,b
 17082  000926  6E2D               	movwf	??_LCD_Bitmap^0,c
 17083  000928  0E00               	movlw	0
 17084  00092A  21BC               	addwfc	(LCD_Bitmap@strPtr+1)& (0+255),w,b
 17085  00092C  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17086  00092E  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 17087  000932  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 17088  000936                     	if	0	;tblptru may be non-zero
 17089  000936                     	endif
 17090  000936                     	if	0	;tblptru may be non-zero
 17091  000936                     	endif
 17092  000936  0009               	tblrd		*+
 17093  000938  CFF5 F0AA          	movff	tablat,LCD_Bitmap@bfOffBits
 17094  00093C  0009               	tblrd		*+
 17095  00093E  CFF5 F0AB          	movff	tablat,LCD_Bitmap@bfOffBits+1
 17096  000942  0009               	tblrd		*+
 17097  000944  CFF5 F0AC          	movff	tablat,LCD_Bitmap@bfOffBits+2
 17098  000948  000A               	tblrd		*-
 17099  00094A  CFF5 F0AD          	movff	tablat,LCD_Bitmap@bfOffBits+3
 17100                           
 17101                           ; BSR set to: 0
 17102                           ;libraries/lcd_highlevel.c: 840:   biWidth = strPtr->biWidth;
 17103  00094E  0E12               	movlw	18
 17104  000950  25BB               	addwf	LCD_Bitmap@strPtr& (0+255),w,b
 17105  000952  6E2D               	movwf	??_LCD_Bitmap^0,c
 17106  000954  0E00               	movlw	0
 17107  000956  21BC               	addwfc	(LCD_Bitmap@strPtr+1)& (0+255),w,b
 17108  000958  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17109  00095A  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 17110  00095E  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 17111  000962                     	if	0	;tblptru may be non-zero
 17112  000962                     	endif
 17113  000962                     	if	0	;tblptru may be non-zero
 17114  000962                     	endif
 17115  000962  0009               	tblrd		*+
 17116  000964  CFF5 F0C0          	movff	tablat,LCD_Bitmap@biWidth
 17117  000968  000A               	tblrd		*-
 17118  00096A  CFF5 F0C1          	movff	tablat,LCD_Bitmap@biWidth+1
 17119                           
 17120                           ; BSR set to: 0
 17121                           ;libraries/lcd_highlevel.c: 841:   biHeight = strPtr->biHeight;
 17122  00096E  0E16               	movlw	22
 17123  000970  25BB               	addwf	LCD_Bitmap@strPtr& (0+255),w,b
 17124  000972  6E2D               	movwf	??_LCD_Bitmap^0,c
 17125  000974  0E00               	movlw	0
 17126  000976  21BC               	addwfc	(LCD_Bitmap@strPtr+1)& (0+255),w,b
 17127  000978  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17128  00097A  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 17129  00097E  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 17130  000982                     	if	0	;tblptru may be non-zero
 17131  000982                     	endif
 17132  000982                     	if	0	;tblptru may be non-zero
 17133  000982                     	endif
 17134  000982  0009               	tblrd		*+
 17135  000984  CFF5 F0B5          	movff	tablat,LCD_Bitmap@biHeight
 17136  000988  000A               	tblrd		*-
 17137  00098A  CFF5 F0B6          	movff	tablat,LCD_Bitmap@biHeight+1
 17138                           
 17139                           ; BSR set to: 0
 17140                           ;libraries/lcd_highlevel.c: 842:   if((strPtr->biBitCount != 8) ||
 17141  00098E  0E1C               	movlw	28
 17142  000990  25BB               	addwf	LCD_Bitmap@strPtr& (0+255),w,b
 17143  000992  6E2D               	movwf	??_LCD_Bitmap^0,c
 17144  000994  0E00               	movlw	0
 17145  000996  21BC               	addwfc	(LCD_Bitmap@strPtr+1)& (0+255),w,b
 17146  000998  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17147  00099A  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 17148  00099E  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 17149  0009A2                     	if	0	;tblptru may be non-zero
 17150  0009A2                     	endif
 17151  0009A2                     	if	0	;tblptru may be non-zero
 17152  0009A2                     	endif
 17153  0009A2  0009               	tblrd		*+
 17154  0009A4  0E08               	movlw	8
 17155  0009A6  18F5               	xorwf	tablat,w,c
 17156  0009A8  0009               	tblrd		*+
 17157  0009AA  10F5               	iorwf	tablat,w,c
 17158  0009AC  A4D8               	btfss	status,2,c
 17159  0009AE  0012               	return	
 17160                           
 17161                           ; BSR set to: 0
 17162  0009B0  0E1E               	movlw	30
 17163  0009B2  25BB               	addwf	LCD_Bitmap@strPtr& (0+255),w,b
 17164  0009B4  6E2D               	movwf	??_LCD_Bitmap^0,c
 17165  0009B6  0E00               	movlw	0
 17166  0009B8  21BC               	addwfc	(LCD_Bitmap@strPtr+1)& (0+255),w,b
 17167  0009BA  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17168  0009BC  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 17169  0009C0  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 17170  0009C4                     	if	0	;tblptru may be non-zero
 17171  0009C4                     	endif
 17172  0009C4                     	if	0	;tblptru may be non-zero
 17173  0009C4                     	endif
 17174  0009C4  0009               	tblrd		*+
 17175  0009C6  04F5               	decf	tablat,w,c
 17176  0009C8  0009               	tblrd		*+
 17177  0009CA  10F5               	iorwf	tablat,w,c
 17178  0009CC  0009               	tblrd		*+
 17179  0009CE  10F5               	iorwf	tablat,w,c
 17180  0009D0  0009               	tblrd		*+
 17181  0009D2  10F5               	iorwf	tablat,w,c
 17182  0009D4  A4D8               	btfss	status,2,c
 17183  0009D6  0012               	return	
 17184                           
 17185                           ; BSR set to: 0
 17186                           ;libraries/lcd_highlevel.c: 847:   if(((posX + biWidth) > (240)) ||
 17187  0009D8  51C0               	movf	LCD_Bitmap@biWidth& (0+255),w,b
 17188  0009DA  2429               	addwf	LCD_Bitmap@posX^0,w,c
 17189  0009DC  6E2D               	movwf	??_LCD_Bitmap^0,c
 17190  0009DE  51C1               	movf	(LCD_Bitmap@biWidth+1)& (0+255),w,b
 17191  0009E0  202A               	addwfc	(LCD_Bitmap@posX+1)^0,w,c
 17192  0009E2  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17193  0009E4  502E               	movf	(??_LCD_Bitmap+1)^0,w,c
 17194  0009E6  E103               	bnz	u3841
 17195  0009E8  0EF1               	movlw	241
 17196  0009EA  5C2D               	subwf	??_LCD_Bitmap^0,w,c
 17197  0009EC  B0D8               	btfsc	status,0,c
 17198  0009EE                     u3841:
 17199  0009EE  0012               	return	
 17200                           
 17201                           ; BSR set to: 0
 17202  0009F0  51B5               	movf	LCD_Bitmap@biHeight& (0+255),w,b
 17203  0009F2  242B               	addwf	LCD_Bitmap@posY^0,w,c
 17204  0009F4  6E2D               	movwf	??_LCD_Bitmap^0,c
 17205  0009F6  51B6               	movf	(LCD_Bitmap@biHeight+1)& (0+255),w,b
 17206  0009F8  202C               	addwfc	(LCD_Bitmap@posY+1)^0,w,c
 17207  0009FA  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17208  0009FC  0E41               	movlw	65
 17209  0009FE  5C2D               	subwf	??_LCD_Bitmap^0,w,c
 17210  000A00  0E01               	movlw	1
 17211  000A02  582E               	subwfb	(??_LCD_Bitmap+1)^0,w,c
 17212  000A04  B0D8               	btfsc	status,0,c
 17213  000A06  0012               	return	
 17214                           
 17215                           ; BSR set to: 0
 17216                           ;libraries/lcd_highlevel.c: 853:   PORTA = 0x36; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
 17217  000A08  0E36               	movlw	54
 17218  000A0A  6E80               	movwf	128,c	;volatile
 17219                           
 17220                           ; BSR set to: 0
 17221  000A0C  988B               	bcf	3979,4,c	;volatile
 17222                           
 17223                           ; BSR set to: 0
 17224  000A0E  968B               	bcf	3979,3,c	;volatile
 17225                           
 17226                           ; BSR set to: 0
 17227  000A10  868B               	bsf	3979,3,c	;volatile
 17228                           
 17229                           ; BSR set to: 0
 17230  000A12  888B               	bsf	3979,4,c	;volatile
 17231                           
 17232                           ;libraries/lcd_highlevel.c: 855:   PORTA = 0b10000000; LATC3 = 0; LATC3 = 1;;
 17233  000A14  0E80               	movlw	128
 17234  000A16  6E80               	movwf	128,c	;volatile
 17235                           
 17236                           ; BSR set to: 0
 17237  000A18  968B               	bcf	3979,3,c	;volatile
 17238                           
 17239                           ; BSR set to: 0
 17240  000A1A  868B               	bsf	3979,3,c	;volatile
 17241                           
 17242                           ; BSR set to: 0
 17243                           ;libraries/lcd_highlevel.c: 857:   colorTablePtr = (uint8_t *)bmpPtr + 54;
 17244  000A1C  0E36               	movlw	54
 17245  000A1E  2427               	addwf	LCD_Bitmap@bmpPtr^0,w,c
 17246  000A20  6FB3               	movwf	LCD_Bitmap@colorTablePtr& (0+255),b
 17247  000A22  0E00               	movlw	0
 17248  000A24  2028               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,w,c
 17249  000A26  6FB4               	movwf	(LCD_Bitmap@colorTablePtr+1)& (0+255),b
 17250                           
 17251                           ; BSR set to: 0
 17252                           ;libraries/lcd_highlevel.c: 858:   bmpPtr += bfOffBits;
 17253  000A28  51AA               	movf	LCD_Bitmap@bfOffBits& (0+255),w,b
 17254  000A2A  2627               	addwf	LCD_Bitmap@bmpPtr^0,f,c
 17255  000A2C  51AB               	movf	(LCD_Bitmap@bfOffBits+1)& (0+255),w,b
 17256  000A2E  2228               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,f,c
 17257                           
 17258                           ;libraries/lcd_highlevel.c: 859:   endOfImage = 0;
 17259  000A30  0E00               	movlw	0
 17260  000A32  6FAE               	movwf	LCD_Bitmap@endOfImage& (0+255),b
 17261                           
 17262                           ; BSR set to: 0
 17263                           ;libraries/lcd_highlevel.c: 860:   jumpColor = RGB2LCD(colorTablePtr);
 17264  000A34  C0B3  F012         	movff	LCD_Bitmap@colorTablePtr,RGB2LCD@colorTableEntry
 17265  000A38  C0B4  F013         	movff	LCD_Bitmap@colorTablePtr+1,RGB2LCD@colorTableEntry+1
 17266  000A3C  ECE9  F023         	call	_RGB2LCD	;wreg free
 17267  000A40  C012  F0C2         	movff	?_RGB2LCD,LCD_Bitmap@jumpColor
 17268  000A44  C013  F0C3         	movff	?_RGB2LCD+1,LCD_Bitmap@jumpColor+1
 17269                           
 17270                           ; BSR set to: 0
 17271                           ;libraries/lcd_highlevel.c: 862:   PORTA = 0x2A; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
 17272  000A48  0E2A               	movlw	42
 17273  000A4A  6E80               	movwf	128,c	;volatile
 17274                           
 17275                           ; BSR set to: 0
 17276  000A4C  988B               	bcf	3979,4,c	;volatile
 17277                           
 17278                           ; BSR set to: 0
 17279  000A4E  968B               	bcf	3979,3,c	;volatile
 17280                           
 17281                           ; BSR set to: 0
 17282  000A50  868B               	bsf	3979,3,c	;volatile
 17283                           
 17284                           ; BSR set to: 0
 17285  000A52  888B               	bsf	3979,4,c	;volatile
 17286                           
 17287                           ; BSR set to: 0
 17288                           ;libraries/lcd_highlevel.c: 863:   PORTA = posX>>8; LATC3 = 0; LATC3 = 1;;
 17289  000A54  C02A  FF80         	movff	LCD_Bitmap@posX+1,3968	;volatile
 17290                           
 17291                           ; BSR set to: 0
 17292  000A58  968B               	bcf	3979,3,c	;volatile
 17293                           
 17294                           ; BSR set to: 0
 17295  000A5A  868B               	bsf	3979,3,c	;volatile
 17296                           
 17297                           ; BSR set to: 0
 17298                           ;libraries/lcd_highlevel.c: 864:   PORTA = posX; LATC3 = 0; LATC3 = 1;;
 17299  000A5C  C029  FF80         	movff	LCD_Bitmap@posX,3968	;volatile
 17300                           
 17301                           ; BSR set to: 0
 17302  000A60  968B               	bcf	3979,3,c	;volatile
 17303                           
 17304                           ; BSR set to: 0
 17305  000A62  868B               	bsf	3979,3,c	;volatile
 17306                           
 17307                           ; BSR set to: 0
 17308                           ;libraries/lcd_highlevel.c: 865:   posX = posX + biWidth-1;
 17309  000A64  51C0               	movf	LCD_Bitmap@biWidth& (0+255),w,b
 17310  000A66  2429               	addwf	LCD_Bitmap@posX^0,w,c
 17311  000A68  6E2D               	movwf	??_LCD_Bitmap^0,c
 17312  000A6A  51C1               	movf	(LCD_Bitmap@biWidth+1)& (0+255),w,b
 17313  000A6C  202A               	addwfc	(LCD_Bitmap@posX+1)^0,w,c
 17314  000A6E  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17315  000A70  0EFF               	movlw	255
 17316  000A72  242D               	addwf	??_LCD_Bitmap^0,w,c
 17317  000A74  6E29               	movwf	LCD_Bitmap@posX^0,c
 17318  000A76  0EFF               	movlw	255
 17319  000A78  202E               	addwfc	(??_LCD_Bitmap+1)^0,w,c
 17320  000A7A  6E2A               	movwf	(LCD_Bitmap@posX+1)^0,c
 17321                           
 17322                           ; BSR set to: 0
 17323                           ;libraries/lcd_highlevel.c: 866:   PORTA = posX>>8; LATC3 = 0; LATC3 = 1;;
 17324  000A7C  C02A  FF80         	movff	LCD_Bitmap@posX+1,3968	;volatile
 17325                           
 17326                           ; BSR set to: 0
 17327  000A80  968B               	bcf	3979,3,c	;volatile
 17328                           
 17329                           ; BSR set to: 0
 17330  000A82  868B               	bsf	3979,3,c	;volatile
 17331                           
 17332                           ; BSR set to: 0
 17333                           ;libraries/lcd_highlevel.c: 867:   PORTA = posX; LATC3 = 0; LATC3 = 1;;
 17334  000A84  C029  FF80         	movff	LCD_Bitmap@posX,3968	;volatile
 17335                           
 17336                           ; BSR set to: 0
 17337  000A88  968B               	bcf	3979,3,c	;volatile
 17338                           
 17339                           ; BSR set to: 0
 17340  000A8A  868B               	bsf	3979,3,c	;volatile
 17341                           
 17342                           ; BSR set to: 0
 17343                           ;libraries/lcd_highlevel.c: 869:   PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
 17344  000A8C  0E2B               	movlw	43
 17345  000A8E  6E80               	movwf	128,c	;volatile
 17346                           
 17347                           ; BSR set to: 0
 17348  000A90  988B               	bcf	3979,4,c	;volatile
 17349                           
 17350                           ; BSR set to: 0
 17351  000A92  968B               	bcf	3979,3,c	;volatile
 17352                           
 17353                           ; BSR set to: 0
 17354  000A94  868B               	bsf	3979,3,c	;volatile
 17355                           
 17356                           ; BSR set to: 0
 17357  000A96  888B               	bsf	3979,4,c	;volatile
 17358                           
 17359                           ; BSR set to: 0
 17360                           ;libraries/lcd_highlevel.c: 870:   newY = 320 - posY - biHeight;
 17361  000A98  C02B  F02D         	movff	LCD_Bitmap@posY,??_LCD_Bitmap
 17362  000A9C  C02C  F02E         	movff	LCD_Bitmap@posY+1,??_LCD_Bitmap+1
 17363  000AA0  1E2D               	comf	??_LCD_Bitmap^0,f,c
 17364  000AA2  1E2E               	comf	(??_LCD_Bitmap+1)^0,f,c
 17365  000AA4  4A2D               	infsnz	??_LCD_Bitmap^0,f,c
 17366  000AA6  2A2E               	incf	(??_LCD_Bitmap+1)^0,f,c
 17367  000AA8  51B5               	movf	LCD_Bitmap@biHeight& (0+255),w,b
 17368  000AAA  5E2D               	subwf	??_LCD_Bitmap^0,f,c
 17369  000AAC  51B6               	movf	(LCD_Bitmap@biHeight+1)& (0+255),w,b
 17370  000AAE  5A2E               	subwfb	(??_LCD_Bitmap+1)^0,f,c
 17371  000AB0  0E40               	movlw	64
 17372  000AB2  242D               	addwf	??_LCD_Bitmap^0,w,c
 17373  000AB4  6FBD               	movwf	LCD_Bitmap@newY& (0+255),b
 17374  000AB6  0E01               	movlw	1
 17375  000AB8  202E               	addwfc	(??_LCD_Bitmap+1)^0,w,c
 17376  000ABA  6FBE               	movwf	(LCD_Bitmap@newY+1)& (0+255),b
 17377                           
 17378                           ; BSR set to: 0
 17379                           ;libraries/lcd_highlevel.c: 871:   PORTA = newY>>8; LATC3 = 0; LATC3 = 1;;
 17380  000ABC  C0BE  FF80         	movff	LCD_Bitmap@newY+1,3968	;volatile
 17381                           
 17382                           ; BSR set to: 0
 17383  000AC0  968B               	bcf	3979,3,c	;volatile
 17384                           
 17385                           ; BSR set to: 0
 17386  000AC2  868B               	bsf	3979,3,c	;volatile
 17387                           
 17388                           ; BSR set to: 0
 17389                           ;libraries/lcd_highlevel.c: 872:   PORTA = newY; LATC3 = 0; LATC3 = 1;;
 17390  000AC4  C0BD  FF80         	movff	LCD_Bitmap@newY,3968	;volatile
 17391                           
 17392                           ; BSR set to: 0
 17393  000AC8  968B               	bcf	3979,3,c	;volatile
 17394                           
 17395                           ; BSR set to: 0
 17396  000ACA  868B               	bsf	3979,3,c	;volatile
 17397                           
 17398                           ; BSR set to: 0
 17399                           ;libraries/lcd_highlevel.c: 873:   newY = newY + biHeight-1;
 17400  000ACC  51B5               	movf	LCD_Bitmap@biHeight& (0+255),w,b
 17401  000ACE  25BD               	addwf	LCD_Bitmap@newY& (0+255),w,b
 17402  000AD0  6E2D               	movwf	??_LCD_Bitmap^0,c
 17403  000AD2  51B6               	movf	(LCD_Bitmap@biHeight+1)& (0+255),w,b
 17404  000AD4  21BE               	addwfc	(LCD_Bitmap@newY+1)& (0+255),w,b
 17405  000AD6  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17406  000AD8  0EFF               	movlw	255
 17407  000ADA  242D               	addwf	??_LCD_Bitmap^0,w,c
 17408  000ADC  6FBD               	movwf	LCD_Bitmap@newY& (0+255),b
 17409  000ADE  0EFF               	movlw	255
 17410  000AE0  202E               	addwfc	(??_LCD_Bitmap+1)^0,w,c
 17411  000AE2  6FBE               	movwf	(LCD_Bitmap@newY+1)& (0+255),b
 17412                           
 17413                           ; BSR set to: 0
 17414                           ;libraries/lcd_highlevel.c: 874:   PORTA = newY>>8; LATC3 = 0; LATC3 = 1;;
 17415  000AE4  C0BE  FF80         	movff	LCD_Bitmap@newY+1,3968	;volatile
 17416                           
 17417                           ; BSR set to: 0
 17418  000AE8  968B               	bcf	3979,3,c	;volatile
 17419                           
 17420                           ; BSR set to: 0
 17421  000AEA  868B               	bsf	3979,3,c	;volatile
 17422                           
 17423                           ; BSR set to: 0
 17424                           ;libraries/lcd_highlevel.c: 875:   PORTA = newY; LATC3 = 0; LATC3 = 1;;
 17425  000AEC  C0BD  FF80         	movff	LCD_Bitmap@newY,3968	;volatile
 17426                           
 17427                           ; BSR set to: 0
 17428  000AF0  968B               	bcf	3979,3,c	;volatile
 17429                           
 17430                           ; BSR set to: 0
 17431  000AF2  868B               	bsf	3979,3,c	;volatile
 17432                           
 17433                           ; BSR set to: 0
 17434                           ;libraries/lcd_highlevel.c: 877:   PORTA = 0x2C; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
 17435  000AF4  0E2C               	movlw	44
 17436  000AF6  6E80               	movwf	128,c	;volatile
 17437                           
 17438                           ; BSR set to: 0
 17439  000AF8  988B               	bcf	3979,4,c	;volatile
 17440                           
 17441                           ; BSR set to: 0
 17442  000AFA  968B               	bcf	3979,3,c	;volatile
 17443                           
 17444                           ; BSR set to: 0
 17445  000AFC  868B               	bsf	3979,3,c	;volatile
 17446                           
 17447                           ; BSR set to: 0
 17448  000AFE  888B               	bsf	3979,4,c	;volatile
 17449                           
 17450                           ; BSR set to: 0
 17451                           ;libraries/lcd_highlevel.c: 878:   curXPos = 0;
 17452  000B00  0E00               	movlw	0
 17453  000B02  6FB8               	movwf	(LCD_Bitmap@curXPos+1)& (0+255),b
 17454  000B04  0E00               	movlw	0
 17455  000B06  6FB7               	movwf	LCD_Bitmap@curXPos& (0+255),b
 17456                           
 17457                           ; BSR set to: 0
 17458                           ;libraries/lcd_highlevel.c: 879:   curYPos = 0;
 17459  000B08  0E00               	movlw	0
 17460  000B0A  6FB2               	movwf	(LCD_Bitmap@curYPos+1)& (0+255),b
 17461  000B0C  0E00               	movlw	0
 17462  000B0E  6FB1               	movwf	LCD_Bitmap@curYPos& (0+255),b
 17463  000B10                     l6284:
 17464                           
 17465                           ; BSR set to: 0
 17466                           ;libraries/lcd_highlevel.c: 881:   {;libraries/lcd_highlevel.c: 882:     if(bmpPtr[0] ==
      +                           0)
 17467  000B10  C027  FFF6         	movff	LCD_Bitmap@bmpPtr,tblptrl
 17468  000B14  C028  FFF7         	movff	LCD_Bitmap@bmpPtr+1,tblptrh
 17469  000B18                     	if	0	;tblptru may be non-zero
 17470  000B18                     	endif
 17471  000B18                     	if	0	;tblptru may be non-zero
 17472  000B18                     	endif
 17473  000B18  0008               	tblrd		*
 17474  000B1A  50F5               	movf	tablat,w,c
 17475  000B1C  0900               	iorlw	0
 17476  000B1E  B4D8               	btfsc	status,2,c
 17477  000B20  D128               	goto	l6370
 17478  000B22  D144               	goto	l6372
 17479  000B24                     l6288:
 17480                           
 17481                           ; BSR set to: 0
 17482                           ;libraries/lcd_highlevel.c: 887:           bmpPtr += 2;
 17483  000B24  0E02               	movlw	2
 17484  000B26  2627               	addwf	LCD_Bitmap@bmpPtr^0,f,c
 17485  000B28  0E00               	movlw	0
 17486  000B2A  2228               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,f,c
 17487                           
 17488                           ; BSR set to: 0
 17489                           ;libraries/lcd_highlevel.c: 888:           for(i=0;i<biWidth - curXPos;i++)
 17490  000B2C  0E00               	movlw	0
 17491  000B2E  6FC5               	movwf	(LCD_Bitmap@i+1)& (0+255),b
 17492  000B30  0E00               	movlw	0
 17493  000B32  6FC4               	movwf	LCD_Bitmap@i& (0+255),b
 17494  000B34  D00A               	goto	l6294
 17495  000B36                     l340:
 17496                           
 17497                           ; BSR set to: 0
 17498                           ;libraries/lcd_highlevel.c: 889:           {;libraries/lcd_highlevel.c: 890:            
      +                           PORTA = jumpColor >> 8; LATC3 = 0; LATC3 = 1;;
 17499  000B36  C0C3  FF80         	movff	LCD_Bitmap@jumpColor+1,3968	;volatile
 17500  000B3A  968B               	bcf	3979,3,c	;volatile
 17501  000B3C  868B               	bsf	3979,3,c	;volatile
 17502                           
 17503                           ;libraries/lcd_highlevel.c: 891:             PORTA = jumpColor; LATC3 = 0; LATC3 = 1;;
 17504  000B3E  C0C2  FF80         	movff	LCD_Bitmap@jumpColor,3968	;volatile
 17505  000B42  968B               	bcf	3979,3,c	;volatile
 17506  000B44  868B               	bsf	3979,3,c	;volatile
 17507                           
 17508                           ; BSR set to: 0
 17509                           ;libraries/lcd_highlevel.c: 892:           }
 17510  000B46  4BC4               	infsnz	LCD_Bitmap@i& (0+255),f,b
 17511  000B48  2BC5               	incf	(LCD_Bitmap@i+1)& (0+255),f,b
 17512  000B4A                     l6294:
 17513                           
 17514                           ; BSR set to: 0
 17515  000B4A  51B7               	movf	LCD_Bitmap@curXPos& (0+255),w,b
 17516  000B4C  5DC0               	subwf	LCD_Bitmap@biWidth& (0+255),w,b
 17517  000B4E  6E2D               	movwf	??_LCD_Bitmap^0,c
 17518  000B50  51B8               	movf	(LCD_Bitmap@curXPos+1)& (0+255),w,b
 17519  000B52  59C1               	subwfb	(LCD_Bitmap@biWidth+1)& (0+255),w,b
 17520  000B54  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17521  000B56  502D               	movf	??_LCD_Bitmap^0,w,c
 17522  000B58  5DC4               	subwf	LCD_Bitmap@i& (0+255),w,b
 17523  000B5A  502E               	movf	(??_LCD_Bitmap+1)^0,w,c
 17524  000B5C  59C5               	subwfb	(LCD_Bitmap@i+1)& (0+255),w,b
 17525  000B5E  A0D8               	btfss	status,0,c
 17526  000B60  D7EA               	goto	l340
 17527                           
 17528                           ; BSR set to: 0
 17529                           ;libraries/lcd_highlevel.c: 893:           curXPos = 0;
 17530  000B62  0E00               	movlw	0
 17531  000B64  6FB8               	movwf	(LCD_Bitmap@curXPos+1)& (0+255),b
 17532  000B66  0E00               	movlw	0
 17533  000B68  6FB7               	movwf	LCD_Bitmap@curXPos& (0+255),b
 17534                           
 17535                           ; BSR set to: 0
 17536                           ;libraries/lcd_highlevel.c: 894:           curYPos++;
 17537  000B6A  4BB1               	infsnz	LCD_Bitmap@curYPos& (0+255),f,b
 17538  000B6C  2BB2               	incf	(LCD_Bitmap@curYPos+1)& (0+255),f,b
 17539                           
 17540                           ;libraries/lcd_highlevel.c: 895:         break;
 17541  000B6E  D160               	goto	l6396
 17542  000B70                     l6300:
 17543                           
 17544                           ; BSR set to: 0
 17545                           ;libraries/lcd_highlevel.c: 897:           for(i=0;i<biWidth - curXPos;i++)
 17546  000B70  0E00               	movlw	0
 17547  000B72  6FC5               	movwf	(LCD_Bitmap@i+1)& (0+255),b
 17548  000B74  0E00               	movlw	0
 17549  000B76  6FC4               	movwf	LCD_Bitmap@i& (0+255),b
 17550  000B78  D00A               	goto	l6304
 17551  000B7A                     l345:
 17552                           
 17553                           ; BSR set to: 0
 17554                           ;libraries/lcd_highlevel.c: 898:           {;libraries/lcd_highlevel.c: 899:            
      +                           PORTA = jumpColor >> 8; LATC3 = 0; LATC3 = 1;;
 17555  000B7A  C0C3  FF80         	movff	LCD_Bitmap@jumpColor+1,3968	;volatile
 17556  000B7E  968B               	bcf	3979,3,c	;volatile
 17557  000B80  868B               	bsf	3979,3,c	;volatile
 17558                           
 17559                           ;libraries/lcd_highlevel.c: 900:             PORTA = jumpColor; LATC3 = 0; LATC3 = 1;;
 17560  000B82  C0C2  FF80         	movff	LCD_Bitmap@jumpColor,3968	;volatile
 17561  000B86  968B               	bcf	3979,3,c	;volatile
 17562  000B88  868B               	bsf	3979,3,c	;volatile
 17563                           
 17564                           ; BSR set to: 0
 17565                           ;libraries/lcd_highlevel.c: 901:           }
 17566  000B8A  4BC4               	infsnz	LCD_Bitmap@i& (0+255),f,b
 17567  000B8C  2BC5               	incf	(LCD_Bitmap@i+1)& (0+255),f,b
 17568  000B8E                     l6304:
 17569                           
 17570                           ; BSR set to: 0
 17571  000B8E  51B7               	movf	LCD_Bitmap@curXPos& (0+255),w,b
 17572  000B90  5DC0               	subwf	LCD_Bitmap@biWidth& (0+255),w,b
 17573  000B92  6E2D               	movwf	??_LCD_Bitmap^0,c
 17574  000B94  51B8               	movf	(LCD_Bitmap@curXPos+1)& (0+255),w,b
 17575  000B96  59C1               	subwfb	(LCD_Bitmap@biWidth+1)& (0+255),w,b
 17576  000B98  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17577  000B9A  502D               	movf	??_LCD_Bitmap^0,w,c
 17578  000B9C  5DC4               	subwf	LCD_Bitmap@i& (0+255),w,b
 17579  000B9E  502E               	movf	(??_LCD_Bitmap+1)^0,w,c
 17580  000BA0  59C5               	subwfb	(LCD_Bitmap@i+1)& (0+255),w,b
 17581  000BA2  A0D8               	btfss	status,0,c
 17582  000BA4  D7EA               	goto	l345
 17583                           
 17584                           ; BSR set to: 0
 17585                           ;libraries/lcd_highlevel.c: 902:           for(i=0;i<(biHeight - curYPos -1)*biWidth;i++
      +                          )
 17586  000BA6  0E00               	movlw	0
 17587  000BA8  6FC5               	movwf	(LCD_Bitmap@i+1)& (0+255),b
 17588  000BAA  0E00               	movlw	0
 17589  000BAC  6FC4               	movwf	LCD_Bitmap@i& (0+255),b
 17590  000BAE  D00A               	goto	l6310
 17591  000BB0                     l348:
 17592                           
 17593                           ; BSR set to: 0
 17594                           ;libraries/lcd_highlevel.c: 903:           {;libraries/lcd_highlevel.c: 904:            
      +                           PORTA = jumpColor >> 8; LATC3 = 0; LATC3 = 1;;
 17595  000BB0  C0C3  FF80         	movff	LCD_Bitmap@jumpColor+1,3968	;volatile
 17596  000BB4  968B               	bcf	3979,3,c	;volatile
 17597  000BB6  868B               	bsf	3979,3,c	;volatile
 17598                           
 17599                           ;libraries/lcd_highlevel.c: 905:             PORTA = jumpColor; LATC3 = 0; LATC3 = 1;;
 17600  000BB8  C0C2  FF80         	movff	LCD_Bitmap@jumpColor,3968	;volatile
 17601  000BBC  968B               	bcf	3979,3,c	;volatile
 17602  000BBE  868B               	bsf	3979,3,c	;volatile
 17603                           
 17604                           ; BSR set to: 0
 17605                           ;libraries/lcd_highlevel.c: 906:           }
 17606  000BC0  4BC4               	infsnz	LCD_Bitmap@i& (0+255),f,b
 17607  000BC2  2BC5               	incf	(LCD_Bitmap@i+1)& (0+255),f,b
 17608  000BC4                     l6310:
 17609                           
 17610                           ; BSR set to: 0
 17611  000BC4  51B1               	movf	LCD_Bitmap@curYPos& (0+255),w,b
 17612  000BC6  5DB5               	subwf	LCD_Bitmap@biHeight& (0+255),w,b
 17613  000BC8  6E2D               	movwf	??_LCD_Bitmap^0,c
 17614  000BCA  51B2               	movf	(LCD_Bitmap@curYPos+1)& (0+255),w,b
 17615  000BCC  59B6               	subwfb	(LCD_Bitmap@biHeight+1)& (0+255),w,b
 17616  000BCE  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17617  000BD0  0EFF               	movlw	255
 17618  000BD2  242D               	addwf	??_LCD_Bitmap^0,w,c
 17619  000BD4  6E1A               	movwf	___wmul@multiplier^0,c
 17620  000BD6  0EFF               	movlw	255
 17621  000BD8  202E               	addwfc	(??_LCD_Bitmap+1)^0,w,c
 17622  000BDA  6E1B               	movwf	(___wmul@multiplier+1)^0,c
 17623  000BDC  C0C0  F01C         	movff	LCD_Bitmap@biWidth,___wmul@multiplicand
 17624  000BE0  C0C1  F01D         	movff	LCD_Bitmap@biWidth+1,___wmul@multiplicand+1
 17625  000BE4  EC7B  F02C         	call	___wmul	;wreg free
 17626  000BE8  501A               	movf	?___wmul^0,w,c
 17627  000BEA  0100               	movlb	0	; () banked
 17628  000BEC  5DC4               	subwf	LCD_Bitmap@i& (0+255),w,b
 17629  000BEE  501B               	movf	(?___wmul+1)^0,w,c
 17630  000BF0  59C5               	subwfb	(LCD_Bitmap@i+1)& (0+255),w,b
 17631  000BF2  A0D8               	btfss	status,0,c
 17632  000BF4  D7DD               	goto	l348
 17633                           
 17634                           ; BSR set to: 0
 17635                           ;libraries/lcd_highlevel.c: 907:           endOfImage = 1;
 17636  000BF6  0E01               	movlw	1
 17637  000BF8  6FAE               	movwf	LCD_Bitmap@endOfImage& (0+255),b
 17638                           
 17639                           ;libraries/lcd_highlevel.c: 908:         break;
 17640  000BFA  D11A               	goto	l6396
 17641  000BFC                     l6314:
 17642                           
 17643                           ; BSR set to: 0
 17644                           ;libraries/lcd_highlevel.c: 910:           jumpCount = bmpPtr[2] + (bmpPtr[3]*biWidth);
 17645  000BFC  0E03               	movlw	3
 17646  000BFE  2427               	addwf	LCD_Bitmap@bmpPtr^0,w,c
 17647  000C00  6E2D               	movwf	??_LCD_Bitmap^0,c
 17648  000C02  0E00               	movlw	0
 17649  000C04  2028               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,w,c
 17650  000C06  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17651  000C08  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 17652  000C0C  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 17653  000C10                     	if	0	;tblptru may be non-zero
 17654  000C10                     	endif
 17655  000C10                     	if	0	;tblptru may be non-zero
 17656  000C10                     	endif
 17657  000C10  0008               	tblrd		*
 17658  000C12  50F5               	movf	tablat,w,c
 17659  000C14  6E1A               	movwf	___wmul@multiplier^0,c
 17660  000C16  6A1B               	clrf	(___wmul@multiplier+1)^0,c
 17661  000C18  C0C0  F01C         	movff	LCD_Bitmap@biWidth,___wmul@multiplicand
 17662  000C1C  C0C1  F01D         	movff	LCD_Bitmap@biWidth+1,___wmul@multiplicand+1
 17663  000C20  EC7B  F02C         	call	___wmul	;wreg free
 17664  000C24  0E02               	movlw	2
 17665  000C26  2427               	addwf	LCD_Bitmap@bmpPtr^0,w,c
 17666  000C28  6E2F               	movwf	(??_LCD_Bitmap+2)^0,c
 17667  000C2A  0E00               	movlw	0
 17668  000C2C  2028               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,w,c
 17669  000C2E  6E30               	movwf	(??_LCD_Bitmap+3)^0,c
 17670  000C30  C02F  FFF6         	movff	??_LCD_Bitmap+2,tblptrl
 17671  000C34  C030  FFF7         	movff	??_LCD_Bitmap+3,tblptrh
 17672  000C38                     	if	0	;tblptru may be non-zero
 17673  000C38                     	endif
 17674  000C38                     	if	0	;tblptru may be non-zero
 17675  000C38                     	endif
 17676  000C38  0008               	tblrd		*
 17677  000C3A  50F5               	movf	tablat,w,c
 17678  000C3C  241A               	addwf	?___wmul^0,w,c
 17679  000C3E  0100               	movlb	0	; () banked
 17680  000C40  6FAF               	movwf	LCD_Bitmap@jumpCount& (0+255),b
 17681  000C42  0E00               	movlw	0
 17682  000C44  201B               	addwfc	(?___wmul+1)^0,w,c
 17683  000C46  6FB0               	movwf	(LCD_Bitmap@jumpCount+1)& (0+255),b
 17684                           
 17685                           ; BSR set to: 0
 17686                           ;libraries/lcd_highlevel.c: 911:           for(i=0;i<jumpCount;i++)
 17687  000C48  0E00               	movlw	0
 17688  000C4A  6FC5               	movwf	(LCD_Bitmap@i+1)& (0+255),b
 17689  000C4C  0E00               	movlw	0
 17690  000C4E  6FC4               	movwf	LCD_Bitmap@i& (0+255),b
 17691  000C50  D00C               	goto	l6332
 17692  000C52                     l6318:
 17693                           
 17694                           ; BSR set to: 0
 17695                           ;libraries/lcd_highlevel.c: 912:           {;libraries/lcd_highlevel.c: 913:            
      +                           curXPos++;
 17696  000C52  4BB7               	infsnz	LCD_Bitmap@curXPos& (0+255),f,b
 17697  000C54  2BB8               	incf	(LCD_Bitmap@curXPos+1)& (0+255),f,b
 17698                           
 17699                           ; BSR set to: 0
 17700                           ;libraries/lcd_highlevel.c: 914:             PORTA = jumpColor >> 8; LATC3 = 0; LATC3 = 
      +                          1;;
 17701  000C56  C0C3  FF80         	movff	LCD_Bitmap@jumpColor+1,3968	;volatile
 17702                           
 17703                           ; BSR set to: 0
 17704  000C5A  968B               	bcf	3979,3,c	;volatile
 17705                           
 17706                           ; BSR set to: 0
 17707  000C5C  868B               	bsf	3979,3,c	;volatile
 17708                           
 17709                           ; BSR set to: 0
 17710                           ;libraries/lcd_highlevel.c: 915:             PORTA = jumpColor; LATC3 = 0; LATC3 = 1;;
 17711  000C5E  C0C2  FF80         	movff	LCD_Bitmap@jumpColor,3968	;volatile
 17712                           
 17713                           ; BSR set to: 0
 17714  000C62  968B               	bcf	3979,3,c	;volatile
 17715                           
 17716                           ; BSR set to: 0
 17717  000C64  868B               	bsf	3979,3,c	;volatile
 17718                           
 17719                           ;libraries/lcd_highlevel.c: 916:           }
 17720  000C66  4BC4               	infsnz	LCD_Bitmap@i& (0+255),f,b
 17721  000C68  2BC5               	incf	(LCD_Bitmap@i+1)& (0+255),f,b
 17722  000C6A                     l6332:
 17723                           
 17724                           ; BSR set to: 0
 17725  000C6A  51AF               	movf	LCD_Bitmap@jumpCount& (0+255),w,b
 17726  000C6C  5DC4               	subwf	LCD_Bitmap@i& (0+255),w,b
 17727  000C6E  51B0               	movf	(LCD_Bitmap@jumpCount+1)& (0+255),w,b
 17728  000C70  59C5               	subwfb	(LCD_Bitmap@i+1)& (0+255),w,b
 17729  000C72  A0D8               	btfss	status,0,c
 17730  000C74  D7EE               	goto	l6318
 17731                           
 17732                           ; BSR set to: 0
 17733                           ;libraries/lcd_highlevel.c: 917:           curYPos = curYPos + (jumpCount / biWidth);
 17734  000C76  C0AF  F020         	movff	LCD_Bitmap@jumpCount,___lwdiv@dividend
 17735  000C7A  C0B0  F021         	movff	LCD_Bitmap@jumpCount+1,___lwdiv@dividend+1
 17736  000C7E  C0C0  F022         	movff	LCD_Bitmap@biWidth,___lwdiv@divisor
 17737  000C82  C0C1  F023         	movff	LCD_Bitmap@biWidth+1,___lwdiv@divisor+1
 17738  000C86  EC1C  F02A         	call	___lwdiv	;wreg free
 17739  000C8A  0100               	movlb	0	; () banked
 17740  000C8C  51B1               	movf	LCD_Bitmap@curYPos& (0+255),w,b
 17741  000C8E  2420               	addwf	?___lwdiv^0,w,c
 17742  000C90  6FB1               	movwf	LCD_Bitmap@curYPos& (0+255),b
 17743  000C92  51B2               	movf	(LCD_Bitmap@curYPos+1)& (0+255),w,b
 17744  000C94  2021               	addwfc	(?___lwdiv+1)^0,w,c
 17745  000C96  6FB2               	movwf	(LCD_Bitmap@curYPos+1)& (0+255),b
 17746                           
 17747                           ;libraries/lcd_highlevel.c: 918:           curXPos = curXPos % biWidth;
 17748  000C98  C0B7  F012         	movff	LCD_Bitmap@curXPos,___lwmod@dividend
 17749  000C9C  C0B8  F013         	movff	LCD_Bitmap@curXPos+1,___lwmod@dividend+1
 17750  000CA0  C0C0  F014         	movff	LCD_Bitmap@biWidth,___lwmod@divisor
 17751  000CA4  C0C1  F015         	movff	LCD_Bitmap@biWidth+1,___lwmod@divisor+1
 17752  000CA8  EC1F  F02B         	call	___lwmod	;wreg free
 17753  000CAC  C012  F0B7         	movff	?___lwmod,LCD_Bitmap@curXPos
 17754  000CB0  C013  F0B8         	movff	?___lwmod+1,LCD_Bitmap@curXPos+1
 17755                           
 17756                           ; BSR set to: 0
 17757                           ;libraries/lcd_highlevel.c: 919:           bmpPtr += 4;
 17758  000CB4  0E04               	movlw	4
 17759  000CB6  D0B9               	goto	L12
 17760  000CB8                     l6338:
 17761                           
 17762                           ; BSR set to: 0
 17763                           ;libraries/lcd_highlevel.c: 922:           pixelCount = bmpPtr[1];
 17764  000CB8  0E01               	movlw	1
 17765  000CBA  2427               	addwf	LCD_Bitmap@bmpPtr^0,w,c
 17766  000CBC  6E2D               	movwf	??_LCD_Bitmap^0,c
 17767  000CBE  0E00               	movlw	0
 17768  000CC0  2028               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,w,c
 17769  000CC2  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17770  000CC4  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 17771  000CC8  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 17772  000CCC                     	if	0	;tblptru may be non-zero
 17773  000CCC                     	endif
 17774  000CCC                     	if	0	;tblptru may be non-zero
 17775  000CCC                     	endif
 17776  000CCC  0008               	tblrd		*
 17777  000CCE  CFF5 F0BF          	movff	tablat,LCD_Bitmap@pixelCount
 17778                           
 17779                           ; BSR set to: 0
 17780                           ;libraries/lcd_highlevel.c: 923:           for(i=0;i < pixelCount;i++)
 17781  000CD2  0E00               	movlw	0
 17782  000CD4  6FC5               	movwf	(LCD_Bitmap@i+1)& (0+255),b
 17783  000CD6  0E00               	movlw	0
 17784  000CD8  6FC4               	movwf	LCD_Bitmap@i& (0+255),b
 17785  000CDA  D02D               	goto	l6360
 17786  000CDC                     l6342:
 17787                           
 17788                           ; BSR set to: 0
 17789                           ;libraries/lcd_highlevel.c: 924:           {;libraries/lcd_highlevel.c: 925:            
      +                           color = RGB2LCD(colorTablePtr+(bmpPtr[2+i]*4));
 17790  000CDC  51C4               	movf	LCD_Bitmap@i& (0+255),w,b
 17791  000CDE  2427               	addwf	LCD_Bitmap@bmpPtr^0,w,c
 17792  000CE0  6E2D               	movwf	??_LCD_Bitmap^0,c
 17793  000CE2  51C5               	movf	(LCD_Bitmap@i+1)& (0+255),w,b
 17794  000CE4  2028               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,w,c
 17795  000CE6  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17796  000CE8  0E02               	movlw	2
 17797  000CEA  262D               	addwf	??_LCD_Bitmap^0,f,c
 17798  000CEC  0E00               	movlw	0
 17799  000CEE  222E               	addwfc	(??_LCD_Bitmap+1)^0,f,c
 17800  000CF0  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 17801  000CF4  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 17802  000CF8                     	if	0	;tblptru may be non-zero
 17803  000CF8                     	endif
 17804  000CF8                     	if	0	;tblptru may be non-zero
 17805  000CF8                     	endif
 17806  000CF8  0008               	tblrd		*
 17807  000CFA  50F5               	movf	tablat,w,c
 17808  000CFC  0D04               	mullw	4
 17809  000CFE  CFF3 F02F          	movff	prodl,??_LCD_Bitmap+2
 17810  000D02  CFF4 F030          	movff	prodh,??_LCD_Bitmap+3
 17811  000D06  502F               	movf	(??_LCD_Bitmap+2)^0,w,c
 17812  000D08  25B3               	addwf	LCD_Bitmap@colorTablePtr& (0+255),w,b
 17813  000D0A  6E12               	movwf	RGB2LCD@colorTableEntry^0,c
 17814  000D0C  5030               	movf	(??_LCD_Bitmap+3)^0,w,c
 17815  000D0E  21B4               	addwfc	(LCD_Bitmap@colorTablePtr+1)& (0+255),w,b
 17816  000D10  6E13               	movwf	(RGB2LCD@colorTableEntry+1)^0,c
 17817  000D12  ECE9  F023         	call	_RGB2LCD	;wreg free
 17818  000D16  C012  F0B9         	movff	?_RGB2LCD,LCD_Bitmap@color
 17819  000D1A  C013  F0BA         	movff	?_RGB2LCD+1,LCD_Bitmap@color+1
 17820                           
 17821                           ; BSR set to: 0
 17822                           ;libraries/lcd_highlevel.c: 926:             curXPos++;
 17823  000D1E  4BB7               	infsnz	LCD_Bitmap@curXPos& (0+255),f,b
 17824  000D20  2BB8               	incf	(LCD_Bitmap@curXPos+1)& (0+255),f,b
 17825                           
 17826                           ; BSR set to: 0
 17827                           ;libraries/lcd_highlevel.c: 927:             PORTA = color >> 8; LATC3 = 0; LATC3 = 1;;
 17828  000D22  C0BA  FF80         	movff	LCD_Bitmap@color+1,3968	;volatile
 17829                           
 17830                           ; BSR set to: 0
 17831  000D26  968B               	bcf	3979,3,c	;volatile
 17832                           
 17833                           ; BSR set to: 0
 17834  000D28  868B               	bsf	3979,3,c	;volatile
 17835                           
 17836                           ; BSR set to: 0
 17837                           ;libraries/lcd_highlevel.c: 928:             PORTA = color; LATC3 = 0; LATC3 = 1;;
 17838  000D2A  C0B9  FF80         	movff	LCD_Bitmap@color,3968	;volatile
 17839                           
 17840                           ; BSR set to: 0
 17841  000D2E  968B               	bcf	3979,3,c	;volatile
 17842                           
 17843                           ; BSR set to: 0
 17844  000D30  868B               	bsf	3979,3,c	;volatile
 17845                           
 17846                           ; BSR set to: 0
 17847                           ;libraries/lcd_highlevel.c: 929:           }
 17848  000D32  4BC4               	infsnz	LCD_Bitmap@i& (0+255),f,b
 17849  000D34  2BC5               	incf	(LCD_Bitmap@i+1)& (0+255),f,b
 17850  000D36                     l6360:
 17851                           
 17852                           ; BSR set to: 0
 17853  000D36  51BF               	movf	LCD_Bitmap@pixelCount& (0+255),w,b
 17854  000D38  6E2D               	movwf	??_LCD_Bitmap^0,c
 17855  000D3A  6A2E               	clrf	(??_LCD_Bitmap+1)^0,c
 17856  000D3C  502D               	movf	??_LCD_Bitmap^0,w,c
 17857  000D3E  5DC4               	subwf	LCD_Bitmap@i& (0+255),w,b
 17858  000D40  502E               	movf	(??_LCD_Bitmap+1)^0,w,c
 17859  000D42  59C5               	subwfb	(LCD_Bitmap@i+1)& (0+255),w,b
 17860  000D44  A0D8               	btfss	status,0,c
 17861  000D46  D7CA               	goto	l6342
 17862                           
 17863                           ; BSR set to: 0
 17864                           ;libraries/lcd_highlevel.c: 930:           if(pixelCount < 255)
 17865  000D48  29BF               	incf	LCD_Bitmap@pixelCount& (0+255),w,b
 17866  000D4A  B4D8               	btfsc	status,2,c
 17867  000D4C  D00E               	goto	l6366
 17868                           
 17869                           ; BSR set to: 0
 17870                           ;libraries/lcd_highlevel.c: 931:           {;libraries/lcd_highlevel.c: 932:            
      +                           pixelCount = (pixelCount+1) & 0xFE;
 17871  000D4E  29BF               	incf	LCD_Bitmap@pixelCount& (0+255),w,b
 17872  000D50  0BFE               	andlw	254
 17873  000D52  6FBF               	movwf	LCD_Bitmap@pixelCount& (0+255),b
 17874                           
 17875                           ;libraries/lcd_highlevel.c: 933:             bmpPtr+=pixelCount+2;
 17876  000D54  51BF               	movf	LCD_Bitmap@pixelCount& (0+255),w,b
 17877  000D56  6E2D               	movwf	??_LCD_Bitmap^0,c
 17878  000D58  6A2E               	clrf	(??_LCD_Bitmap+1)^0,c
 17879  000D5A  0E02               	movlw	2
 17880  000D5C  262D               	addwf	??_LCD_Bitmap^0,f,c
 17881  000D5E  0E00               	movlw	0
 17882  000D60  222E               	addwfc	(??_LCD_Bitmap+1)^0,f,c
 17883  000D62  502D               	movf	??_LCD_Bitmap^0,w,c
 17884  000D64  2627               	addwf	LCD_Bitmap@bmpPtr^0,f,c
 17885  000D66  502E               	movf	(??_LCD_Bitmap+1)^0,w,c
 17886  000D68  D062               	goto	L13
 17887  000D6A                     l6366:
 17888                           
 17889                           ; BSR set to: 0
 17890                           ;libraries/lcd_highlevel.c: 936:           {;libraries/lcd_highlevel.c: 937:            
      +                             bmpPtr += 258;
 17891  000D6A  0E02               	movlw	2
 17892  000D6C  2627               	addwf	LCD_Bitmap@bmpPtr^0,f,c
 17893  000D6E  0E01               	movlw	1
 17894  000D70  D05E               	goto	L13
 17895  000D72                     l6370:
 17896                           
 17897                           ; BSR set to: 0
 17898  000D72  0E01               	movlw	1
 17899  000D74  2427               	addwf	LCD_Bitmap@bmpPtr^0,w,c
 17900  000D76  6E2D               	movwf	??_LCD_Bitmap^0,c
 17901  000D78  0E00               	movlw	0
 17902  000D7A  2028               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,w,c
 17903  000D7C  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17904  000D7E  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 17905  000D82  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 17906  000D86                     	if	0	;tblptru may be non-zero
 17907  000D86                     	endif
 17908  000D86                     	if	0	;tblptru may be non-zero
 17909  000D86                     	endif
 17910  000D86  0008               	tblrd		*
 17911  000D88  50F5               	movf	tablat,w,c
 17912  000D8A  6E2F               	movwf	(??_LCD_Bitmap+2)^0,c
 17913  000D8C  6A30               	clrf	(??_LCD_Bitmap+3)^0,c
 17914                           
 17915                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17916                           ; Switch size 1, requested type "simple"
 17917                           ; Number of cases is 1, Range of values is 0 to 0
 17918                           ; switch strategies available:
 17919                           ; Name         Instructions Cycles
 17920                           ; simple_byte            4     3 (average)
 17921                           ;	Chosen strategy is simple_byte
 17922  000D8E  5030               	movf	(??_LCD_Bitmap+3)^0,w,c
 17923  000D90  0A00               	xorlw	0	; case 0
 17924  000D92  A4D8               	btfss	status,2,c
 17925  000D94  D791               	goto	l6338
 17926                           
 17927                           ; BSR set to: 0
 17928                           ; Switch size 1, requested type "simple"
 17929                           ; Number of cases is 3, Range of values is 0 to 2
 17930                           ; switch strategies available:
 17931                           ; Name         Instructions Cycles
 17932                           ; simple_byte           10     6 (average)
 17933                           ;	Chosen strategy is simple_byte
 17934  000D96  502F               	movf	(??_LCD_Bitmap+2)^0,w,c
 17935  000D98  0A00               	xorlw	0	; case 0
 17936  000D9A  B4D8               	btfsc	status,2,c
 17937  000D9C  D6C3               	goto	l6288
 17938  000D9E  0A01               	xorlw	1	; case 1
 17939  000DA0  B4D8               	btfsc	status,2,c
 17940  000DA2  D6E6               	goto	l6300
 17941  000DA4  0A03               	xorlw	3	; case 2
 17942  000DA6  B4D8               	btfsc	status,2,c
 17943  000DA8  D729               	goto	l6314
 17944  000DAA  D786               	goto	l6338
 17945  000DAC                     l6372:
 17946                           
 17947                           ; BSR set to: 0
 17948                           ;libraries/lcd_highlevel.c: 943:     {;libraries/lcd_highlevel.c: 944:       pixelCount 
      +                          = bmpPtr[0];
 17949  000DAC  C027  FFF6         	movff	LCD_Bitmap@bmpPtr,tblptrl
 17950  000DB0  C028  FFF7         	movff	LCD_Bitmap@bmpPtr+1,tblptrh
 17951  000DB4                     	if	0	;tblptru may be non-zero
 17952  000DB4                     	endif
 17953  000DB4                     	if	0	;tblptru may be non-zero
 17954  000DB4                     	endif
 17955  000DB4  0008               	tblrd		*
 17956  000DB6  CFF5 F0BF          	movff	tablat,LCD_Bitmap@pixelCount
 17957                           
 17958                           ; BSR set to: 0
 17959                           ;libraries/lcd_highlevel.c: 945:       color = RGB2LCD(colorTablePtr+(bmpPtr[1]*4));
 17960  000DBA  0E01               	movlw	1
 17961  000DBC  2427               	addwf	LCD_Bitmap@bmpPtr^0,w,c
 17962  000DBE  6E2D               	movwf	??_LCD_Bitmap^0,c
 17963  000DC0  0E00               	movlw	0
 17964  000DC2  2028               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,w,c
 17965  000DC4  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17966  000DC6  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 17967  000DCA  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 17968  000DCE                     	if	0	;tblptru may be non-zero
 17969  000DCE                     	endif
 17970  000DCE                     	if	0	;tblptru may be non-zero
 17971  000DCE                     	endif
 17972  000DCE  0008               	tblrd		*
 17973  000DD0  50F5               	movf	tablat,w,c
 17974  000DD2  0D04               	mullw	4
 17975  000DD4  CFF3 F02F          	movff	prodl,??_LCD_Bitmap+2
 17976  000DD8  CFF4 F030          	movff	prodh,??_LCD_Bitmap+3
 17977  000DDC  502F               	movf	(??_LCD_Bitmap+2)^0,w,c
 17978  000DDE  25B3               	addwf	LCD_Bitmap@colorTablePtr& (0+255),w,b
 17979  000DE0  6E12               	movwf	RGB2LCD@colorTableEntry^0,c
 17980  000DE2  5030               	movf	(??_LCD_Bitmap+3)^0,w,c
 17981  000DE4  21B4               	addwfc	(LCD_Bitmap@colorTablePtr+1)& (0+255),w,b
 17982  000DE6  6E13               	movwf	(RGB2LCD@colorTableEntry+1)^0,c
 17983  000DE8  ECE9  F023         	call	_RGB2LCD	;wreg free
 17984  000DEC  C012  F0B9         	movff	?_RGB2LCD,LCD_Bitmap@color
 17985  000DF0  C013  F0BA         	movff	?_RGB2LCD+1,LCD_Bitmap@color+1
 17986                           
 17987                           ; BSR set to: 0
 17988                           ;libraries/lcd_highlevel.c: 946:       for(i=0;i < pixelCount;i++)
 17989  000DF4  0E00               	movlw	0
 17990  000DF6  6FC5               	movwf	(LCD_Bitmap@i+1)& (0+255),b
 17991  000DF8  0E00               	movlw	0
 17992  000DFA  6FC4               	movwf	LCD_Bitmap@i& (0+255),b
 17993  000DFC  D00C               	goto	l6392
 17994  000DFE                     l6378:
 17995                           
 17996                           ; BSR set to: 0
 17997                           ;libraries/lcd_highlevel.c: 947:       {;libraries/lcd_highlevel.c: 948:         curXPos
      +                          ++;
 17998  000DFE  4BB7               	infsnz	LCD_Bitmap@curXPos& (0+255),f,b
 17999  000E00  2BB8               	incf	(LCD_Bitmap@curXPos+1)& (0+255),f,b
 18000                           
 18001                           ; BSR set to: 0
 18002                           ;libraries/lcd_highlevel.c: 949:         PORTA = color >> 8; LATC3 = 0; LATC3 = 1;;
 18003  000E02  C0BA  FF80         	movff	LCD_Bitmap@color+1,3968	;volatile
 18004                           
 18005                           ; BSR set to: 0
 18006  000E06  968B               	bcf	3979,3,c	;volatile
 18007                           
 18008                           ; BSR set to: 0
 18009  000E08  868B               	bsf	3979,3,c	;volatile
 18010                           
 18011                           ; BSR set to: 0
 18012                           ;libraries/lcd_highlevel.c: 950:         PORTA = color; LATC3 = 0; LATC3 = 1;;
 18013  000E0A  C0B9  FF80         	movff	LCD_Bitmap@color,3968	;volatile
 18014                           
 18015                           ; BSR set to: 0
 18016  000E0E  968B               	bcf	3979,3,c	;volatile
 18017                           
 18018                           ; BSR set to: 0
 18019  000E10  868B               	bsf	3979,3,c	;volatile
 18020                           
 18021                           ;libraries/lcd_highlevel.c: 951:       }
 18022  000E12  4BC4               	infsnz	LCD_Bitmap@i& (0+255),f,b
 18023  000E14  2BC5               	incf	(LCD_Bitmap@i+1)& (0+255),f,b
 18024  000E16                     l6392:
 18025                           
 18026                           ; BSR set to: 0
 18027  000E16  51BF               	movf	LCD_Bitmap@pixelCount& (0+255),w,b
 18028  000E18  6E2D               	movwf	??_LCD_Bitmap^0,c
 18029  000E1A  6A2E               	clrf	(??_LCD_Bitmap+1)^0,c
 18030  000E1C  502D               	movf	??_LCD_Bitmap^0,w,c
 18031  000E1E  5DC4               	subwf	LCD_Bitmap@i& (0+255),w,b
 18032  000E20  502E               	movf	(??_LCD_Bitmap+1)^0,w,c
 18033  000E22  59C5               	subwfb	(LCD_Bitmap@i+1)& (0+255),w,b
 18034  000E24  A0D8               	btfss	status,0,c
 18035  000E26  D7EB               	goto	l6378
 18036                           
 18037                           ; BSR set to: 0
 18038                           ;libraries/lcd_highlevel.c: 952:       bmpPtr+=2;
 18039  000E28  0E02               	movlw	2
 18040  000E2A                     L12:
 18041  000E2A  2627               	addwf	LCD_Bitmap@bmpPtr^0,f,c
 18042  000E2C  0E00               	movlw	0
 18043  000E2E                     L13:
 18044  000E2E  2228               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,f,c
 18045  000E30                     l6396:
 18046                           
 18047                           ; BSR set to: 0
 18048                           ;libraries/lcd_highlevel.c: 954:   }while(endOfImage == 0);
 18049  000E30  51AE               	movf	LCD_Bitmap@endOfImage& (0+255),w,b
 18050  000E32  B4D8               	btfsc	status,2,c
 18051  000E34  D66D               	goto	l6284
 18052                           
 18053                           ; BSR set to: 0
 18054                           ;libraries/lcd_highlevel.c: 955:   PORTA = 0x36; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
 18055  000E36  0E36               	movlw	54
 18056  000E38  6E80               	movwf	128,c	;volatile
 18057                           
 18058                           ; BSR set to: 0
 18059  000E3A  988B               	bcf	3979,4,c	;volatile
 18060                           
 18061                           ; BSR set to: 0
 18062  000E3C  968B               	bcf	3979,3,c	;volatile
 18063                           
 18064                           ; BSR set to: 0
 18065  000E3E  868B               	bsf	3979,3,c	;volatile
 18066                           
 18067                           ; BSR set to: 0
 18068  000E40  888B               	bsf	3979,4,c	;volatile
 18069                           
 18070                           ;libraries/lcd_highlevel.c: 957:   PORTA = 0b00000000; LATC3 = 0; LATC3 = 1;;
 18071  000E42  0E00               	movlw	0
 18072  000E44  6E80               	movwf	128,c	;volatile
 18073                           
 18074                           ; BSR set to: 0
 18075  000E46  968B               	bcf	3979,3,c	;volatile
 18076                           
 18077                           ; BSR set to: 0
 18078  000E48  868B               	bsf	3979,3,c	;volatile
 18079                           
 18080                           ; BSR set to: 0
 18081  000E4A  0012               	return		;funcret
 18082  000E4C                     __end_of_LCD_Bitmap:
 18083                           	callstack 0
 18084                           
 18085 ;; *************** function ___wmul *****************
 18086 ;; Defined at:
 18087 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul16.c"
 18088 ;; Parameters:    Size  Location     Type
 18089 ;;  multiplier      2   25[COMRAM] unsigned int 
 18090 ;;  multiplicand    2   27[COMRAM] unsigned int 
 18091 ;; Auto vars:     Size  Location     Type
 18092 ;;  product         2   29[COMRAM] unsigned int 
 18093 ;; Return value:  Size  Location     Type
 18094 ;;                  2   25[COMRAM] unsigned int 
 18095 ;; Registers used:
 18096 ;;		wreg, status,2, status,0, prodl, prodh
 18097 ;; Tracked objects:
 18098 ;;		On entry : 0/0
 18099 ;;		On exit  : 0/0
 18100 ;;		Unchanged: 0/0
 18101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18102 ;;      Params:         4       0       0       0       0       0       0
 18103 ;;      Locals:         2       0       0       0       0       0       0
 18104 ;;      Temps:          0       0       0       0       0       0       0
 18105 ;;      Totals:         6       0       0       0       0       0       0
 18106 ;;Total ram usage:        6 bytes
 18107 ;; Hardware stack levels used: 1
 18108 ;; Hardware stack levels required when called: 4
 18109 ;; This function calls:
 18110 ;;		Nothing
 18111 ;; This function is called by:
 18112 ;;		_LCD_SliderUpdate
 18113 ;;		_LCD_DrawText
 18114 ;;		_LCD_Bitmap
 18115 ;;		_touchScreenController
 18116 ;;		_gameControllerSM
 18117 ;;		_gameControllerController
 18118 ;;		_XF_init
 18119 ;; This function uses a non-reentrant model
 18120 ;;
 18121                           
 18122                           	psect	text75
 18123  0058F6                     __ptext75:
 18124                           	callstack 0
 18125  0058F6                     ___wmul:
 18126                           	callstack 22
 18127                           
 18128                           ; BSR set to: 0
 18129                           ;incstack = 0
 18130  0058F6  501A               	movf	___wmul@multiplier^0,w,c
 18131  0058F8  021C               	mulwf	___wmul@multiplicand^0,c
 18132  0058FA  CFF3 F01E          	movff	prodl,___wmul@product
 18133  0058FE  CFF4 F01F          	movff	prodh,___wmul@product+1
 18134  005902  501A               	movf	___wmul@multiplier^0,w,c
 18135  005904  021D               	mulwf	(___wmul@multiplicand+1)^0,c
 18136  005906  50F3               	movf	243,w,c
 18137  005908  261F               	addwf	(___wmul@product+1)^0,f,c
 18138  00590A  501B               	movf	(___wmul@multiplier+1)^0,w,c
 18139  00590C  021C               	mulwf	___wmul@multiplicand^0,c
 18140  00590E  50F3               	movf	243,w,c
 18141  005910  261F               	addwf	(___wmul@product+1)^0,f,c
 18142  005912  C01E  F01A         	movff	___wmul@product,?___wmul
 18143  005916  C01F  F01B         	movff	___wmul@product+1,?___wmul+1
 18144  00591A  0012               	return		;funcret
 18145  00591C                     __end_of___wmul:
 18146                           	callstack 0
 18147                           
 18148 ;; *************** function ___lwmod *****************
 18149 ;; Defined at:
 18150 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lwmod.c"
 18151 ;; Parameters:    Size  Location     Type
 18152 ;;  dividend        2   17[COMRAM] unsigned int 
 18153 ;;  divisor         2   19[COMRAM] unsigned int 
 18154 ;; Auto vars:     Size  Location     Type
 18155 ;;  counter         1   21[COMRAM] unsigned char 
 18156 ;; Return value:  Size  Location     Type
 18157 ;;                  2   17[COMRAM] unsigned int 
 18158 ;; Registers used:
 18159 ;;		wreg, status,2, status,0
 18160 ;; Tracked objects:
 18161 ;;		On entry : 3F/0
 18162 ;;		On exit  : 3F/0
 18163 ;;		Unchanged: 3F/0
 18164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18165 ;;      Params:         4       0       0       0       0       0       0
 18166 ;;      Locals:         1       0       0       0       0       0       0
 18167 ;;      Temps:          0       0       0       0       0       0       0
 18168 ;;      Totals:         5       0       0       0       0       0       0
 18169 ;;Total ram usage:        5 bytes
 18170 ;; Hardware stack levels used: 1
 18171 ;; Hardware stack levels required when called: 4
 18172 ;; This function calls:
 18173 ;;		Nothing
 18174 ;; This function is called by:
 18175 ;;		_LCD_Bitmap
 18176 ;; This function uses a non-reentrant model
 18177 ;;
 18178                           
 18179                           	psect	text76
 18180  00563E                     __ptext76:
 18181                           	callstack 0
 18182  00563E                     ___lwmod:
 18183                           	callstack 19
 18184                           
 18185                           ; BSR set to: 0
 18186                           
 18187                           ;incstack = 0
 18188  00563E  5014               	movf	___lwmod@divisor^0,w,c
 18189  005640  1015               	iorwf	(___lwmod@divisor+1)^0,w,c
 18190  005642  B4D8               	btfsc	status,2,c
 18191  005644  D018               	goto	l1375
 18192                           
 18193                           ; BSR set to: 0
 18194  005646  0E01               	movlw	1
 18195  005648  6E16               	movwf	___lwmod@counter^0,c
 18196  00564A  D004               	goto	l5900
 18197  00564C                     l5898:
 18198                           
 18199                           ; BSR set to: 0
 18200  00564C  90D8               	bcf	status,0,c
 18201  00564E  3614               	rlcf	___lwmod@divisor^0,f,c
 18202  005650  3615               	rlcf	(___lwmod@divisor+1)^0,f,c
 18203  005652  2A16               	incf	___lwmod@counter^0,f,c
 18204  005654                     l5900:
 18205                           
 18206                           ; BSR set to: 0
 18207  005654  AE15               	btfss	(___lwmod@divisor+1)^0,7,c
 18208  005656  D7FA               	goto	l5898
 18209  005658                     u3600:
 18210                           
 18211                           ; BSR set to: 0
 18212  005658  5014               	movf	___lwmod@divisor^0,w,c
 18213  00565A  5C12               	subwf	___lwmod@dividend^0,w,c
 18214  00565C  5015               	movf	(___lwmod@divisor+1)^0,w,c
 18215  00565E  5813               	subwfb	(___lwmod@dividend+1)^0,w,c
 18216  005660  A0D8               	btfss	status,0,c
 18217  005662  D004               	goto	l5906
 18218                           
 18219                           ; BSR set to: 0
 18220  005664  5014               	movf	___lwmod@divisor^0,w,c
 18221  005666  5E12               	subwf	___lwmod@dividend^0,f,c
 18222  005668  5015               	movf	(___lwmod@divisor+1)^0,w,c
 18223  00566A  5A13               	subwfb	(___lwmod@dividend+1)^0,f,c
 18224  00566C                     l5906:
 18225                           
 18226                           ; BSR set to: 0
 18227  00566C  90D8               	bcf	status,0,c
 18228  00566E  3215               	rrcf	(___lwmod@divisor+1)^0,f,c
 18229  005670  3214               	rrcf	___lwmod@divisor^0,f,c
 18230                           
 18231                           ; BSR set to: 0
 18232  005672  2E16               	decfsz	___lwmod@counter^0,f,c
 18233  005674  D7F1               	goto	u3600
 18234  005676                     l1375:
 18235                           
 18236                           ; BSR set to: 0
 18237  005676  C012  F012         	movff	___lwmod@dividend,?___lwmod
 18238  00567A  C013  F013         	movff	___lwmod@dividend+1,?___lwmod+1
 18239                           
 18240                           ; BSR set to: 0
 18241  00567E  0012               	return		;funcret
 18242  005680                     __end_of___lwmod:
 18243                           	callstack 0
 18244                           
 18245 ;; *************** function ___lwdiv *****************
 18246 ;; Defined at:
 18247 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lwdiv.c"
 18248 ;; Parameters:    Size  Location     Type
 18249 ;;  dividend        2   31[COMRAM] unsigned int 
 18250 ;;  divisor         2   33[COMRAM] unsigned int 
 18251 ;; Auto vars:     Size  Location     Type
 18252 ;;  quotient        2   35[COMRAM] unsigned int 
 18253 ;;  counter         1   37[COMRAM] unsigned char 
 18254 ;; Return value:  Size  Location     Type
 18255 ;;                  2   31[COMRAM] unsigned int 
 18256 ;; Registers used:
 18257 ;;		wreg, status,2, status,0
 18258 ;; Tracked objects:
 18259 ;;		On entry : 0/0
 18260 ;;		On exit  : 0/0
 18261 ;;		Unchanged: 0/0
 18262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18263 ;;      Params:         4       0       0       0       0       0       0
 18264 ;;      Locals:         3       0       0       0       0       0       0
 18265 ;;      Temps:          0       0       0       0       0       0       0
 18266 ;;      Totals:         7       0       0       0       0       0       0
 18267 ;;Total ram usage:        7 bytes
 18268 ;; Hardware stack levels used: 1
 18269 ;; Hardware stack levels required when called: 4
 18270 ;; This function calls:
 18271 ;;		Nothing
 18272 ;; This function is called by:
 18273 ;;		_LCD_SliderUpdate
 18274 ;;		_LCD_Bitmap
 18275 ;; This function uses a non-reentrant model
 18276 ;;
 18277                           
 18278                           	psect	text77
 18279  005438                     __ptext77:
 18280                           	callstack 0
 18281  005438                     ___lwdiv:
 18282                           	callstack 21
 18283                           
 18284                           ; BSR set to: 0
 18285                           ;incstack = 0
 18286  005438  0E00               	movlw	0
 18287  00543A  6E25               	movwf	(___lwdiv@quotient+1)^0,c
 18288  00543C  0E00               	movlw	0
 18289  00543E  6E24               	movwf	___lwdiv@quotient^0,c
 18290  005440  5022               	movf	___lwdiv@divisor^0,w,c
 18291  005442  1023               	iorwf	(___lwdiv@divisor+1)^0,w,c
 18292  005444  B4D8               	btfsc	status,2,c
 18293  005446  D01C               	goto	l1365
 18294  005448  0E01               	movlw	1
 18295  00544A  6E26               	movwf	___lwdiv@counter^0,c
 18296  00544C  D004               	goto	l5880
 18297  00544E                     l5878:
 18298  00544E  90D8               	bcf	status,0,c
 18299  005450  3622               	rlcf	___lwdiv@divisor^0,f,c
 18300  005452  3623               	rlcf	(___lwdiv@divisor+1)^0,f,c
 18301  005454  2A26               	incf	___lwdiv@counter^0,f,c
 18302  005456                     l5880:
 18303  005456  AE23               	btfss	(___lwdiv@divisor+1)^0,7,c
 18304  005458  D7FA               	goto	l5878
 18305  00545A                     u3570:
 18306  00545A  90D8               	bcf	status,0,c
 18307  00545C  3624               	rlcf	___lwdiv@quotient^0,f,c
 18308  00545E  3625               	rlcf	(___lwdiv@quotient+1)^0,f,c
 18309  005460  5022               	movf	___lwdiv@divisor^0,w,c
 18310  005462  5C20               	subwf	___lwdiv@dividend^0,w,c
 18311  005464  5023               	movf	(___lwdiv@divisor+1)^0,w,c
 18312  005466  5821               	subwfb	(___lwdiv@dividend+1)^0,w,c
 18313  005468  A0D8               	btfss	status,0,c
 18314  00546A  D005               	goto	l5890
 18315  00546C  5022               	movf	___lwdiv@divisor^0,w,c
 18316  00546E  5E20               	subwf	___lwdiv@dividend^0,f,c
 18317  005470  5023               	movf	(___lwdiv@divisor+1)^0,w,c
 18318  005472  5A21               	subwfb	(___lwdiv@dividend+1)^0,f,c
 18319  005474  8024               	bsf	___lwdiv@quotient^0,0,c
 18320  005476                     l5890:
 18321  005476  90D8               	bcf	status,0,c
 18322  005478  3223               	rrcf	(___lwdiv@divisor+1)^0,f,c
 18323  00547A  3222               	rrcf	___lwdiv@divisor^0,f,c
 18324  00547C  2E26               	decfsz	___lwdiv@counter^0,f,c
 18325  00547E  D7ED               	goto	u3570
 18326  005480                     l1365:
 18327  005480  C024  F020         	movff	___lwdiv@quotient,?___lwdiv
 18328  005484  C025  F021         	movff	___lwdiv@quotient+1,?___lwdiv+1
 18329  005488  0012               	return		;funcret
 18330  00548A                     __end_of___lwdiv:
 18331                           	callstack 0
 18332                           
 18333 ;; *************** function _RGB2LCD *****************
 18334 ;; Defined at:
 18335 ;;		line 799 in file "libraries/lcd_highlevel.c"
 18336 ;; Parameters:    Size  Location     Type
 18337 ;;  colorTableEn    2   17[COMRAM] PTR unsigned char 
 18338 ;;		 -> STR_9(9), STR_8(2), STR_7(9), STR_6(11), 
 18339 ;;		 -> STR_5(9), STR_4(9), 
 18340 ;; Auto vars:     Size  Location     Type
 18341 ;;  color           2   29[COMRAM] unsigned short 
 18342 ;;  blue            2   27[COMRAM] unsigned short 
 18343 ;;  green           2   25[COMRAM] unsigned short 
 18344 ;;  red             2   23[COMRAM] unsigned short 
 18345 ;; Return value:  Size  Location     Type
 18346 ;;                  2   17[COMRAM] unsigned short 
 18347 ;; Registers used:
 18348 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 18349 ;; Tracked objects:
 18350 ;;		On entry : 3F/0
 18351 ;;		On exit  : 3F/0
 18352 ;;		Unchanged: 3F/0
 18353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18354 ;;      Params:         2       0       0       0       0       0       0
 18355 ;;      Locals:         8       0       0       0       0       0       0
 18356 ;;      Temps:          4       0       0       0       0       0       0
 18357 ;;      Totals:        14       0       0       0       0       0       0
 18358 ;;Total ram usage:       14 bytes
 18359 ;; Hardware stack levels used: 1
 18360 ;; Hardware stack levels required when called: 4
 18361 ;; This function calls:
 18362 ;;		Nothing
 18363 ;; This function is called by:
 18364 ;;		_LCD_Bitmap
 18365 ;; This function uses a non-reentrant model
 18366 ;;
 18367                           
 18368                           	psect	text78
 18369  0047D2                     __ptext78:
 18370                           	callstack 0
 18371  0047D2                     _RGB2LCD:
 18372                           	callstack 19
 18373                           
 18374                           ; BSR set to: 0
 18375                           ;libraries/lcd_highlevel.c: 799: uint16_t RGB2LCD(uint8_t * colorTableEntry);libraries/l
      +                          cd_highlevel.c: 800: {;libraries/lcd_highlevel.c: 801:     uint16_t red,green,blue;;libr
      +                          aries/lcd_highlevel.c: 802:     uint16_t color;;libraries/lcd_highlevel.c: 804:     red 
      +                          = colorTableEntry[2] >> 3;
 18376                           
 18377                           ;incstack = 0
 18378  0047D2  0E02               	movlw	2
 18379  0047D4  2412               	addwf	RGB2LCD@colorTableEntry^0,w,c
 18380  0047D6  6E14               	movwf	??_RGB2LCD^0,c
 18381  0047D8  0E00               	movlw	0
 18382  0047DA  2013               	addwfc	(RGB2LCD@colorTableEntry+1)^0,w,c
 18383  0047DC  6E15               	movwf	(??_RGB2LCD+1)^0,c
 18384  0047DE  C014  FFF6         	movff	??_RGB2LCD,tblptrl
 18385  0047E2  C015  FFF7         	movff	??_RGB2LCD+1,tblptrh
 18386  0047E6                     	if	0	;tblptru may be non-zero
 18387  0047E6                     	endif
 18388  0047E6                     	if	0	;tblptru may be non-zero
 18389  0047E6                     	endif
 18390  0047E6  0008               	tblrd		*
 18391  0047E8  CFF5 F016          	movff	tablat,??_RGB2LCD+2
 18392  0047EC  90D8               	bcf	status,0,c
 18393  0047EE  3216               	rrcf	(??_RGB2LCD+2)^0,f,c
 18394  0047F0  90D8               	bcf	status,0,c
 18395  0047F2  3216               	rrcf	(??_RGB2LCD+2)^0,f,c
 18396  0047F4  90D8               	bcf	status,0,c
 18397  0047F6  3216               	rrcf	(??_RGB2LCD+2)^0,f,c
 18398  0047F8  5016               	movf	(??_RGB2LCD+2)^0,w,c
 18399  0047FA  6E18               	movwf	RGB2LCD@red^0,c
 18400  0047FC  6A19               	clrf	(RGB2LCD@red+1)^0,c
 18401                           
 18402                           ;libraries/lcd_highlevel.c: 805:     green = colorTableEntry[1] >> 2;
 18403  0047FE  0E01               	movlw	1
 18404  004800  2412               	addwf	RGB2LCD@colorTableEntry^0,w,c
 18405  004802  6E14               	movwf	??_RGB2LCD^0,c
 18406  004804  0E00               	movlw	0
 18407  004806  2013               	addwfc	(RGB2LCD@colorTableEntry+1)^0,w,c
 18408  004808  6E15               	movwf	(??_RGB2LCD+1)^0,c
 18409  00480A  C014  FFF6         	movff	??_RGB2LCD,tblptrl
 18410  00480E  C015  FFF7         	movff	??_RGB2LCD+1,tblptrh
 18411  004812                     	if	0	;tblptru may be non-zero
 18412  004812                     	endif
 18413  004812                     	if	0	;tblptru may be non-zero
 18414  004812                     	endif
 18415  004812  0008               	tblrd		*
 18416  004814  CFF5 F016          	movff	tablat,??_RGB2LCD+2
 18417  004818  90D8               	bcf	status,0,c
 18418  00481A  3216               	rrcf	(??_RGB2LCD+2)^0,f,c
 18419  00481C  90D8               	bcf	status,0,c
 18420  00481E  3216               	rrcf	(??_RGB2LCD+2)^0,f,c
 18421  004820  5016               	movf	(??_RGB2LCD+2)^0,w,c
 18422  004822  6E1A               	movwf	RGB2LCD@green^0,c
 18423  004824  6A1B               	clrf	(RGB2LCD@green+1)^0,c
 18424                           
 18425                           ;libraries/lcd_highlevel.c: 806:     blue = colorTableEntry[0] >> 3;
 18426  004826  C012  FFF6         	movff	RGB2LCD@colorTableEntry,tblptrl
 18427  00482A  C013  FFF7         	movff	RGB2LCD@colorTableEntry+1,tblptrh
 18428  00482E                     	if	0	;tblptru may be non-zero
 18429  00482E                     	endif
 18430  00482E                     	if	0	;tblptru may be non-zero
 18431  00482E                     	endif
 18432  00482E  0008               	tblrd		*
 18433  004830  CFF5 F014          	movff	tablat,??_RGB2LCD
 18434  004834  90D8               	bcf	status,0,c
 18435  004836  3214               	rrcf	??_RGB2LCD^0,f,c
 18436  004838  90D8               	bcf	status,0,c
 18437  00483A  3214               	rrcf	??_RGB2LCD^0,f,c
 18438  00483C  90D8               	bcf	status,0,c
 18439  00483E  3214               	rrcf	??_RGB2LCD^0,f,c
 18440  004840  5014               	movf	??_RGB2LCD^0,w,c
 18441  004842  6E1C               	movwf	RGB2LCD@blue^0,c
 18442  004844  6A1D               	clrf	(RGB2LCD@blue+1)^0,c
 18443                           
 18444                           ; BSR set to: 0
 18445                           ;libraries/lcd_highlevel.c: 807:     color = (red << 11) | (green << 5) | (blue << 0);
 18446  004846  C01A  F014         	movff	RGB2LCD@green,??_RGB2LCD
 18447  00484A  C01B  F015         	movff	RGB2LCD@green+1,??_RGB2LCD+1
 18448  00484E  0E05               	movlw	5
 18449  004850                     u3405:
 18450  004850  90D8               	bcf	status,0,c
 18451  004852  3614               	rlcf	??_RGB2LCD^0,f,c
 18452  004854  3615               	rlcf	(??_RGB2LCD+1)^0,f,c
 18453  004856  2EE8               	decfsz	wreg,f,c
 18454  004858  D7FB               	goto	u3405
 18455  00485A  C018  F016         	movff	RGB2LCD@red,??_RGB2LCD+2
 18456  00485E  C019  F017         	movff	RGB2LCD@red+1,??_RGB2LCD+3
 18457  004862  0E0B               	movlw	11
 18458  004864                     u3415:
 18459  004864  90D8               	bcf	status,0,c
 18460  004866  3616               	rlcf	(??_RGB2LCD+2)^0,f,c
 18461  004868  3617               	rlcf	(??_RGB2LCD+3)^0,f,c
 18462  00486A  2EE8               	decfsz	wreg,f,c
 18463  00486C  D7FB               	goto	u3415
 18464  00486E  5014               	movf	??_RGB2LCD^0,w,c
 18465  004870  1216               	iorwf	(??_RGB2LCD+2)^0,f,c
 18466  004872  5015               	movf	(??_RGB2LCD+1)^0,w,c
 18467  004874  1217               	iorwf	(??_RGB2LCD+3)^0,f,c
 18468  004876  501C               	movf	RGB2LCD@blue^0,w,c
 18469  004878  1016               	iorwf	(??_RGB2LCD+2)^0,w,c
 18470  00487A  6E1E               	movwf	RGB2LCD@color^0,c
 18471  00487C  501D               	movf	(RGB2LCD@blue+1)^0,w,c
 18472  00487E  1017               	iorwf	(??_RGB2LCD+3)^0,w,c
 18473  004880  6E1F               	movwf	(RGB2LCD@color+1)^0,c
 18474                           
 18475                           ; BSR set to: 0
 18476                           ;libraries/lcd_highlevel.c: 808:     return color;
 18477  004882  C01E  F012         	movff	RGB2LCD@color,?_RGB2LCD
 18478  004886  C01F  F013         	movff	RGB2LCD@color+1,?_RGB2LCD+1
 18479                           
 18480                           ; BSR set to: 0
 18481  00488A  0012               	return		;funcret
 18482  00488C                     __end_of_RGB2LCD:
 18483                           	callstack 0
 18484                           
 18485 ;; *************** function _Ball_draw *****************
 18486 ;; Defined at:
 18487 ;;		line 27 in file "class/ball.c"
 18488 ;; Parameters:    Size  Location     Type
 18489 ;;  b               2   36[COMRAM] PTR struct Ball
 18490 ;;		 -> g1(240), 
 18491 ;; Auto vars:     Size  Location     Type
 18492 ;;		None
 18493 ;; Return value:  Size  Location     Type
 18494 ;;                  1    wreg      void 
 18495 ;; Registers used:
 18496 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 18497 ;; Tracked objects:
 18498 ;;		On entry : 3F/0
 18499 ;;		On exit  : 0/0
 18500 ;;		Unchanged: 0/0
 18501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18502 ;;      Params:         2       0       0       0       0       0       0
 18503 ;;      Locals:         0       0       0       0       0       0       0
 18504 ;;      Temps:          8       0       0       0       0       0       0
 18505 ;;      Totals:        10       0       0       0       0       0       0
 18506 ;;Total ram usage:       10 bytes
 18507 ;; Hardware stack levels used: 1
 18508 ;; Hardware stack levels required when called: 5
 18509 ;; This function calls:
 18510 ;;		_LCD_DrawRect
 18511 ;; This function is called by:
 18512 ;;		_Menu_inGameDraw
 18513 ;;		_displayController
 18514 ;; This function uses a non-reentrant model
 18515 ;;
 18516                           
 18517                           	psect	text79
 18518  00346A                     __ptext79:
 18519                           	callstack 0
 18520  00346A                     _Ball_draw:
 18521                           	callstack 21
 18522                           
 18523                           ; BSR set to: 0
 18524                           ;class/ball.c: 27: void Ball_draw(struct Ball* b);class/ball.c: 28: {;class/ball.c: 29: 
      +                              LCD_DrawRect(b->oldx-8,b->oldy-8,b->oldx+8,b->oldy+8,1,0b0000000000000000);
 18525                           
 18526                           ; BSR set to: 0
 18527                           ;incstack = 0
 18528  00346A  EE20 F004          	lfsr	2,4
 18529  00346E  5025               	movf	Ball_draw@b^0,w,c
 18530  003470  26D9               	addwf	fsr2l,f,c
 18531  003472  5026               	movf	(Ball_draw@b+1)^0,w,c
 18532  003474  22DA               	addwfc	fsr2h,f,c
 18533  003476  CFDE F027          	movff	postinc2,??_Ball_draw
 18534  00347A  CFDD F028          	movff	postdec2,??_Ball_draw+1
 18535  00347E  0EF8               	movlw	248
 18536  003480  2427               	addwf	??_Ball_draw^0,w,c
 18537  003482  6E12               	movwf	LCD_DrawRect@posX1^0,c
 18538  003484  0EFF               	movlw	255
 18539  003486  2028               	addwfc	(??_Ball_draw+1)^0,w,c
 18540  003488  6E13               	movwf	(LCD_DrawRect@posX1+1)^0,c
 18541  00348A  EE20 F006          	lfsr	2,6
 18542  00348E  5025               	movf	Ball_draw@b^0,w,c
 18543  003490  26D9               	addwf	fsr2l,f,c
 18544  003492  5026               	movf	(Ball_draw@b+1)^0,w,c
 18545  003494  22DA               	addwfc	fsr2h,f,c
 18546  003496  CFDE F029          	movff	postinc2,??_Ball_draw+2
 18547  00349A  CFDD F02A          	movff	postdec2,??_Ball_draw+3
 18548  00349E  0EF8               	movlw	248
 18549  0034A0  2429               	addwf	(??_Ball_draw+2)^0,w,c
 18550  0034A2  6E14               	movwf	LCD_DrawRect@posY1^0,c
 18551  0034A4  0EFF               	movlw	255
 18552  0034A6  202A               	addwfc	(??_Ball_draw+3)^0,w,c
 18553  0034A8  6E15               	movwf	(LCD_DrawRect@posY1+1)^0,c
 18554  0034AA  EE20 F004          	lfsr	2,4
 18555  0034AE  5025               	movf	Ball_draw@b^0,w,c
 18556  0034B0  26D9               	addwf	fsr2l,f,c
 18557  0034B2  5026               	movf	(Ball_draw@b+1)^0,w,c
 18558  0034B4  22DA               	addwfc	fsr2h,f,c
 18559  0034B6  CFDE F02B          	movff	postinc2,??_Ball_draw+4
 18560  0034BA  CFDD F02C          	movff	postdec2,??_Ball_draw+5
 18561  0034BE  0E08               	movlw	8
 18562  0034C0  242B               	addwf	(??_Ball_draw+4)^0,w,c
 18563  0034C2  6E16               	movwf	LCD_DrawRect@posX2^0,c
 18564  0034C4  0E00               	movlw	0
 18565  0034C6  202C               	addwfc	(??_Ball_draw+5)^0,w,c
 18566  0034C8  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 18567  0034CA  EE20 F006          	lfsr	2,6
 18568  0034CE  5025               	movf	Ball_draw@b^0,w,c
 18569  0034D0  26D9               	addwf	fsr2l,f,c
 18570  0034D2  5026               	movf	(Ball_draw@b+1)^0,w,c
 18571  0034D4  22DA               	addwfc	fsr2h,f,c
 18572  0034D6  CFDE F02D          	movff	postinc2,??_Ball_draw+6
 18573  0034DA  CFDD F02E          	movff	postdec2,??_Ball_draw+7
 18574  0034DE  0E08               	movlw	8
 18575  0034E0  242D               	addwf	(??_Ball_draw+6)^0,w,c
 18576  0034E2  6E18               	movwf	LCD_DrawRect@posY2^0,c
 18577  0034E4  0E00               	movlw	0
 18578  0034E6  202E               	addwfc	(??_Ball_draw+7)^0,w,c
 18579  0034E8  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 18580  0034EA  0E01               	movlw	1
 18581  0034EC  6E1A               	movwf	LCD_DrawRect@fill^0,c
 18582  0034EE  0E00               	movlw	0
 18583  0034F0  6E1C               	movwf	(LCD_DrawRect@color+1)^0,c
 18584  0034F2  0E00               	movlw	0
 18585  0034F4  6E1B               	movwf	LCD_DrawRect@color^0,c
 18586  0034F6  EC34  F013         	call	_LCD_DrawRect	;wreg free
 18587                           
 18588                           ;class/ball.c: 30:     b->oldx=b->x;
 18589  0034FA  C025  FFD9         	movff	Ball_draw@b,fsr2l
 18590  0034FE  C026  FFDA         	movff	Ball_draw@b+1,fsr2h
 18591  003502  EE10 F004          	lfsr	1,4
 18592  003506  5025               	movf	Ball_draw@b^0,w,c
 18593  003508  26E1               	addwf	fsr1l,f,c
 18594  00350A  5026               	movf	(Ball_draw@b+1)^0,w,c
 18595  00350C  22E2               	addwfc	fsr1h,f,c
 18596  00350E  CFDE FFE6          	movff	postinc2,postinc1
 18597  003512  CFDD FFE5          	movff	postdec2,postdec1
 18598                           
 18599                           ;class/ball.c: 31:     b->oldy=b->y;
 18600  003516  EE20 F002          	lfsr	2,2
 18601  00351A  5025               	movf	Ball_draw@b^0,w,c
 18602  00351C  26D9               	addwf	fsr2l,f,c
 18603  00351E  5026               	movf	(Ball_draw@b+1)^0,w,c
 18604  003520  22DA               	addwfc	fsr2h,f,c
 18605  003522  EE10 F006          	lfsr	1,6
 18606  003526  5025               	movf	Ball_draw@b^0,w,c
 18607  003528  26E1               	addwf	fsr1l,f,c
 18608  00352A  5026               	movf	(Ball_draw@b+1)^0,w,c
 18609  00352C  22E2               	addwfc	fsr1h,f,c
 18610  00352E  CFDE FFE6          	movff	postinc2,postinc1
 18611  003532  CFDD FFE5          	movff	postdec2,postdec1
 18612                           
 18613                           ;class/ball.c: 32:     LCD_DrawRect(b->x-8,b->y-8,b->x+8,b->y+8,1,0b1111100000000000);
 18614  003536  C025  FFD9         	movff	Ball_draw@b,fsr2l
 18615  00353A  C026  FFDA         	movff	Ball_draw@b+1,fsr2h
 18616  00353E  CFDE F027          	movff	postinc2,??_Ball_draw
 18617  003542  CFDD F028          	movff	postdec2,??_Ball_draw+1
 18618  003546  0EF8               	movlw	248
 18619  003548  2427               	addwf	??_Ball_draw^0,w,c
 18620  00354A  6E12               	movwf	LCD_DrawRect@posX1^0,c
 18621  00354C  0EFF               	movlw	255
 18622  00354E  2028               	addwfc	(??_Ball_draw+1)^0,w,c
 18623  003550  6E13               	movwf	(LCD_DrawRect@posX1+1)^0,c
 18624  003552  EE20 F002          	lfsr	2,2
 18625  003556  5025               	movf	Ball_draw@b^0,w,c
 18626  003558  26D9               	addwf	fsr2l,f,c
 18627  00355A  5026               	movf	(Ball_draw@b+1)^0,w,c
 18628  00355C  22DA               	addwfc	fsr2h,f,c
 18629  00355E  CFDE F029          	movff	postinc2,??_Ball_draw+2
 18630  003562  CFDD F02A          	movff	postdec2,??_Ball_draw+3
 18631  003566  0EF8               	movlw	248
 18632  003568  2429               	addwf	(??_Ball_draw+2)^0,w,c
 18633  00356A  6E14               	movwf	LCD_DrawRect@posY1^0,c
 18634  00356C  0EFF               	movlw	255
 18635  00356E  202A               	addwfc	(??_Ball_draw+3)^0,w,c
 18636  003570  6E15               	movwf	(LCD_DrawRect@posY1+1)^0,c
 18637  003572  C025  FFD9         	movff	Ball_draw@b,fsr2l
 18638  003576  C026  FFDA         	movff	Ball_draw@b+1,fsr2h
 18639  00357A  CFDE F02B          	movff	postinc2,??_Ball_draw+4
 18640  00357E  CFDD F02C          	movff	postdec2,??_Ball_draw+5
 18641  003582  0E08               	movlw	8
 18642  003584  242B               	addwf	(??_Ball_draw+4)^0,w,c
 18643  003586  6E16               	movwf	LCD_DrawRect@posX2^0,c
 18644  003588  0E00               	movlw	0
 18645  00358A  202C               	addwfc	(??_Ball_draw+5)^0,w,c
 18646  00358C  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 18647  00358E  EE20 F002          	lfsr	2,2
 18648  003592  5025               	movf	Ball_draw@b^0,w,c
 18649  003594  26D9               	addwf	fsr2l,f,c
 18650  003596  5026               	movf	(Ball_draw@b+1)^0,w,c
 18651  003598  22DA               	addwfc	fsr2h,f,c
 18652  00359A  CFDE F02D          	movff	postinc2,??_Ball_draw+6
 18653  00359E  CFDD F02E          	movff	postdec2,??_Ball_draw+7
 18654  0035A2  0E08               	movlw	8
 18655  0035A4  242D               	addwf	(??_Ball_draw+6)^0,w,c
 18656  0035A6  6E18               	movwf	LCD_DrawRect@posY2^0,c
 18657  0035A8  0E00               	movlw	0
 18658  0035AA  202E               	addwfc	(??_Ball_draw+7)^0,w,c
 18659  0035AC  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 18660  0035AE  0E01               	movlw	1
 18661  0035B0  6E1A               	movwf	LCD_DrawRect@fill^0,c
 18662  0035B2  0EF8               	movlw	248
 18663  0035B4  6E1C               	movwf	(LCD_DrawRect@color+1)^0,c
 18664  0035B6  0E00               	movlw	0
 18665  0035B8  6E1B               	movwf	LCD_DrawRect@color^0,c
 18666  0035BA  EC34  F013         	call	_LCD_DrawRect	;wreg free
 18667  0035BE  0012               	return		;funcret
 18668  0035C0                     __end_of_Ball_draw:
 18669                           	callstack 0
 18670                           
 18671 ;; *************** function _LCD_DrawRect *****************
 18672 ;; Defined at:
 18673 ;;		line 584 in file "libraries/lcd_highlevel.c"
 18674 ;; Parameters:    Size  Location     Type
 18675 ;;  posX1           2   17[COMRAM] unsigned short 
 18676 ;;  posY1           2   19[COMRAM] unsigned short 
 18677 ;;  posX2           2   21[COMRAM] unsigned short 
 18678 ;;  posY2           2   23[COMRAM] unsigned short 
 18679 ;;  fill            1   25[COMRAM] unsigned char 
 18680 ;;  color           2   26[COMRAM] unsigned short 
 18681 ;; Auto vars:     Size  Location     Type
 18682 ;;  i               2   34[COMRAM] unsigned short 
 18683 ;;  temp            2   30[COMRAM] unsigned short 
 18684 ;;  j               2   28[COMRAM] unsigned short 
 18685 ;;  colorL          1   33[COMRAM] unsigned char 
 18686 ;;  colorH          1   32[COMRAM] unsigned char 
 18687 ;; Return value:  Size  Location     Type
 18688 ;;                  1    wreg      void 
 18689 ;; Registers used:
 18690 ;;		wreg, status,2, status,0
 18691 ;; Tracked objects:
 18692 ;;		On entry : 0/0
 18693 ;;		On exit  : 0/0
 18694 ;;		Unchanged: 0/0
 18695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18696 ;;      Params:        11       0       0       0       0       0       0
 18697 ;;      Locals:         8       0       0       0       0       0       0
 18698 ;;      Temps:          0       0       0       0       0       0       0
 18699 ;;      Totals:        19       0       0       0       0       0       0
 18700 ;;Total ram usage:       19 bytes
 18701 ;; Hardware stack levels used: 1
 18702 ;; Hardware stack levels required when called: 4
 18703 ;; This function calls:
 18704 ;;		Nothing
 18705 ;; This function is called by:
 18706 ;;		_Ball_draw
 18707 ;;		_Paddle_draw
 18708 ;;		_Menu_inGameDraw
 18709 ;;		_LCD_SliderUpdate
 18710 ;;		_LCD_SliderDraw
 18711 ;;		_LCD_ButtonUpdate
 18712 ;;		_LCD_ButtonDraw
 18713 ;;		_displayController
 18714 ;; This function uses a non-reentrant model
 18715 ;;
 18716                           
 18717                           	psect	text80
 18718  002668                     __ptext80:
 18719                           	callstack 0
 18720  002668                     _LCD_DrawRect:
 18721                           	callstack 21
 18722                           
 18723                           ;libraries/lcd_highlevel.c: 584: void LCD_DrawRect(uint16_t posX1,uint16_t posY1, uint16
      +                          _t posX2,;libraries/lcd_highlevel.c: 585:   uint16_t posY2,uint8_t fill,uint16_t color);
      +                          libraries/lcd_highlevel.c: 586: {;libraries/lcd_highlevel.c: 587:   uint16_t i;;librarie
      +                          s/lcd_highlevel.c: 588:   uint16_t j;;libraries/lcd_highlevel.c: 589:   uint16_t temp;;l
      +                          ibraries/lcd_highlevel.c: 590:   uint8_t colorH,colorL;;libraries/lcd_highlevel.c: 592: 
      +                            colorH = color>>8;
 18724                           
 18725                           ;incstack = 0
 18726  002668  C01C  F021         	movff	LCD_DrawRect@color+1,LCD_DrawRect@colorH
 18727                           
 18728                           ;libraries/lcd_highlevel.c: 593:   colorL = color;
 18729  00266C  C01B  F022         	movff	LCD_DrawRect@color,LCD_DrawRect@colorL
 18730                           
 18731                           ;libraries/lcd_highlevel.c: 597:   if(posX1 > posX2)
 18732  002670  5012               	movf	LCD_DrawRect@posX1^0,w,c
 18733  002672  5C16               	subwf	LCD_DrawRect@posX2^0,w,c
 18734  002674  5013               	movf	(LCD_DrawRect@posX1+1)^0,w,c
 18735  002676  5817               	subwfb	(LCD_DrawRect@posX2+1)^0,w,c
 18736  002678  B0D8               	btfsc	status,0,c
 18737  00267A  D00C               	goto	l5330
 18738                           
 18739                           ;libraries/lcd_highlevel.c: 598:   {;libraries/lcd_highlevel.c: 599:     temp = posX1;
 18740  00267C  C012  F01F         	movff	LCD_DrawRect@posX1,LCD_DrawRect@temp
 18741  002680  C013  F020         	movff	LCD_DrawRect@posX1+1,LCD_DrawRect@temp+1
 18742                           
 18743                           ;libraries/lcd_highlevel.c: 600:     posX1 = posX2;
 18744  002684  C016  F012         	movff	LCD_DrawRect@posX2,LCD_DrawRect@posX1
 18745  002688  C017  F013         	movff	LCD_DrawRect@posX2+1,LCD_DrawRect@posX1+1
 18746                           
 18747                           ;libraries/lcd_highlevel.c: 601:     posX2 = temp;
 18748  00268C  C01F  F016         	movff	LCD_DrawRect@temp,LCD_DrawRect@posX2
 18749  002690  C020  F017         	movff	LCD_DrawRect@temp+1,LCD_DrawRect@posX2+1
 18750  002694                     l5330:
 18751                           
 18752                           ;libraries/lcd_highlevel.c: 603:   if(posY1 > posY2)
 18753  002694  5014               	movf	LCD_DrawRect@posY1^0,w,c
 18754  002696  5C18               	subwf	LCD_DrawRect@posY2^0,w,c
 18755  002698  5015               	movf	(LCD_DrawRect@posY1+1)^0,w,c
 18756  00269A  5819               	subwfb	(LCD_DrawRect@posY2+1)^0,w,c
 18757  00269C  B0D8               	btfsc	status,0,c
 18758  00269E  D00C               	goto	l5334
 18759                           
 18760                           ;libraries/lcd_highlevel.c: 604:   {;libraries/lcd_highlevel.c: 605:     temp = posY1;
 18761  0026A0  C014  F01F         	movff	LCD_DrawRect@posY1,LCD_DrawRect@temp
 18762  0026A4  C015  F020         	movff	LCD_DrawRect@posY1+1,LCD_DrawRect@temp+1
 18763                           
 18764                           ;libraries/lcd_highlevel.c: 606:     posY1 = posY2;
 18765  0026A8  C018  F014         	movff	LCD_DrawRect@posY2,LCD_DrawRect@posY1
 18766  0026AC  C019  F015         	movff	LCD_DrawRect@posY2+1,LCD_DrawRect@posY1+1
 18767                           
 18768                           ;libraries/lcd_highlevel.c: 607:     posY2 = temp;
 18769  0026B0  C01F  F018         	movff	LCD_DrawRect@temp,LCD_DrawRect@posY2
 18770  0026B4  C020  F019         	movff	LCD_DrawRect@temp+1,LCD_DrawRect@posY2+1
 18771  0026B8                     l5334:
 18772                           
 18773                           ;libraries/lcd_highlevel.c: 610:   if(fill==1)
 18774  0026B8  041A               	decf	LCD_DrawRect@fill^0,w,c
 18775  0026BA  A4D8               	btfss	status,2,c
 18776  0026BC  D055               	goto	l5416
 18777                           
 18778                           ;libraries/lcd_highlevel.c: 611:   {;libraries/lcd_highlevel.c: 613:     PORTA = 0x2A; L
      +                          ATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 = 1;;
 18779  0026BE  0E2A               	movlw	42
 18780  0026C0  6E80               	movwf	128,c	;volatile
 18781  0026C2  988B               	bcf	3979,4,c	;volatile
 18782  0026C4  968B               	bcf	3979,3,c	;volatile
 18783  0026C6  868B               	bsf	3979,3,c	;volatile
 18784  0026C8  888B               	bsf	3979,4,c	;volatile
 18785                           
 18786                           ;libraries/lcd_highlevel.c: 614:     PORTA = posX1>>8; LATC3 = 0; LATC3 = 1;;
 18787  0026CA  C013  FF80         	movff	LCD_DrawRect@posX1+1,3968	;volatile
 18788  0026CE  968B               	bcf	3979,3,c	;volatile
 18789  0026D0  868B               	bsf	3979,3,c	;volatile
 18790                           
 18791                           ;libraries/lcd_highlevel.c: 615:     PORTA = posX1; LATC3 = 0; LATC3 = 1;;
 18792  0026D2  C012  FF80         	movff	LCD_DrawRect@posX1,3968	;volatile
 18793  0026D6  968B               	bcf	3979,3,c	;volatile
 18794  0026D8  868B               	bsf	3979,3,c	;volatile
 18795                           
 18796                           ;libraries/lcd_highlevel.c: 616:     PORTA = posX2>>8; LATC3 = 0; LATC3 = 1;;
 18797  0026DA  C017  FF80         	movff	LCD_DrawRect@posX2+1,3968	;volatile
 18798  0026DE  968B               	bcf	3979,3,c	;volatile
 18799  0026E0  868B               	bsf	3979,3,c	;volatile
 18800                           
 18801                           ;libraries/lcd_highlevel.c: 617:     PORTA = posX2; LATC3 = 0; LATC3 = 1;;
 18802  0026E2  C016  FF80         	movff	LCD_DrawRect@posX2,3968	;volatile
 18803  0026E6  968B               	bcf	3979,3,c	;volatile
 18804  0026E8  868B               	bsf	3979,3,c	;volatile
 18805                           
 18806                           ;libraries/lcd_highlevel.c: 619:     PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 18807  0026EA  0E2B               	movlw	43
 18808  0026EC  6E80               	movwf	128,c	;volatile
 18809  0026EE  988B               	bcf	3979,4,c	;volatile
 18810  0026F0  968B               	bcf	3979,3,c	;volatile
 18811  0026F2  868B               	bsf	3979,3,c	;volatile
 18812  0026F4  888B               	bsf	3979,4,c	;volatile
 18813                           
 18814                           ;libraries/lcd_highlevel.c: 620:     PORTA = posY1>>8; LATC3 = 0; LATC3 = 1;;
 18815  0026F6  C015  FF80         	movff	LCD_DrawRect@posY1+1,3968	;volatile
 18816  0026FA  968B               	bcf	3979,3,c	;volatile
 18817  0026FC  868B               	bsf	3979,3,c	;volatile
 18818                           
 18819                           ;libraries/lcd_highlevel.c: 621:     PORTA = posY1; LATC3 = 0; LATC3 = 1;;
 18820  0026FE  C014  FF80         	movff	LCD_DrawRect@posY1,3968	;volatile
 18821  002702  968B               	bcf	3979,3,c	;volatile
 18822  002704  868B               	bsf	3979,3,c	;volatile
 18823                           
 18824                           ;libraries/lcd_highlevel.c: 622:     PORTA = (320 -1) >> 8; LATC3 = 0; LATC3 = 1;;
 18825  002706  0E01               	movlw	1
 18826  002708  6E80               	movwf	128,c	;volatile
 18827  00270A  968B               	bcf	3979,3,c	;volatile
 18828  00270C  868B               	bsf	3979,3,c	;volatile
 18829                           
 18830                           ;libraries/lcd_highlevel.c: 623:     PORTA = (320 -1); LATC3 = 0; LATC3 = 1;;
 18831  00270E  0E3F               	movlw	63
 18832  002710  6E80               	movwf	128,c	;volatile
 18833  002712  968B               	bcf	3979,3,c	;volatile
 18834  002714  868B               	bsf	3979,3,c	;volatile
 18835                           
 18836                           ;libraries/lcd_highlevel.c: 625:     PORTA = 0x2C; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 18837  002716  0E2C               	movlw	44
 18838  002718  6E80               	movwf	128,c	;volatile
 18839  00271A  988B               	bcf	3979,4,c	;volatile
 18840  00271C  968B               	bcf	3979,3,c	;volatile
 18841  00271E  868B               	bsf	3979,3,c	;volatile
 18842  002720  888B               	bsf	3979,4,c	;volatile
 18843                           
 18844                           ;libraries/lcd_highlevel.c: 626:     for(i=posX1;i<=posX2;i++)
 18845  002722  C012  F023         	movff	LCD_DrawRect@posX1,LCD_DrawRect@i
 18846  002726  C013  F024         	movff	LCD_DrawRect@posX1+1,LCD_DrawRect@i+1
 18847  00272A  D017               	goto	l5414
 18848  00272C                     l283:
 18849                           
 18850                           ;libraries/lcd_highlevel.c: 627:     {;libraries/lcd_highlevel.c: 628:       for(j=posY1
      +                          ;j<=posY2;j++)
 18851  00272C  C014  F01D         	movff	LCD_DrawRect@posY1,LCD_DrawRect@j
 18852  002730  C015  F01E         	movff	LCD_DrawRect@posY1+1,LCD_DrawRect@j+1
 18853  002734  D00A               	goto	l5410
 18854  002736                     l285:
 18855                           
 18856                           ;libraries/lcd_highlevel.c: 629:       {;libraries/lcd_highlevel.c: 630:         PORTA =
      +                           colorH; LATC3 = 0; LATC3 = 1;;
 18857  002736  C021  FF80         	movff	LCD_DrawRect@colorH,3968	;volatile
 18858  00273A  968B               	bcf	3979,3,c	;volatile
 18859  00273C  868B               	bsf	3979,3,c	;volatile
 18860                           
 18861                           ;libraries/lcd_highlevel.c: 631:         PORTA = colorL; LATC3 = 0; LATC3 = 1;;
 18862  00273E  C022  FF80         	movff	LCD_DrawRect@colorL,3968	;volatile
 18863  002742  968B               	bcf	3979,3,c	;volatile
 18864  002744  868B               	bsf	3979,3,c	;volatile
 18865                           
 18866                           ;libraries/lcd_highlevel.c: 632:       }
 18867  002746  4A1D               	infsnz	LCD_DrawRect@j^0,f,c
 18868  002748  2A1E               	incf	(LCD_DrawRect@j+1)^0,f,c
 18869  00274A                     l5410:
 18870  00274A  501D               	movf	LCD_DrawRect@j^0,w,c
 18871  00274C  5C18               	subwf	LCD_DrawRect@posY2^0,w,c
 18872  00274E  501E               	movf	(LCD_DrawRect@j+1)^0,w,c
 18873  002750  5819               	subwfb	(LCD_DrawRect@posY2+1)^0,w,c
 18874  002752  B0D8               	btfsc	status,0,c
 18875  002754  D7F0               	goto	l285
 18876                           
 18877                           ;libraries/lcd_highlevel.c: 633:     }
 18878  002756  4A23               	infsnz	LCD_DrawRect@i^0,f,c
 18879  002758  2A24               	incf	(LCD_DrawRect@i+1)^0,f,c
 18880  00275A                     l5414:
 18881  00275A  5023               	movf	LCD_DrawRect@i^0,w,c
 18882  00275C  5C16               	subwf	LCD_DrawRect@posX2^0,w,c
 18883  00275E  5024               	movf	(LCD_DrawRect@i+1)^0,w,c
 18884  002760  5817               	subwfb	(LCD_DrawRect@posX2+1)^0,w,c
 18885  002762  A0D8               	btfss	status,0,c
 18886  002764  0012               	return	
 18887  002766  D7E2               	goto	l283
 18888  002768                     l5416:
 18889                           
 18890                           ;libraries/lcd_highlevel.c: 637:   {;libraries/lcd_highlevel.c: 639:     PORTA = 0x2A; L
      +                          ATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 = 1;;
 18891  002768  0E2A               	movlw	42
 18892  00276A  6E80               	movwf	128,c	;volatile
 18893  00276C  988B               	bcf	3979,4,c	;volatile
 18894  00276E  968B               	bcf	3979,3,c	;volatile
 18895  002770  868B               	bsf	3979,3,c	;volatile
 18896  002772  888B               	bsf	3979,4,c	;volatile
 18897                           
 18898                           ;libraries/lcd_highlevel.c: 640:     PORTA = posX1>>8; LATC3 = 0; LATC3 = 1;;
 18899  002774  C013  FF80         	movff	LCD_DrawRect@posX1+1,3968	;volatile
 18900  002778  968B               	bcf	3979,3,c	;volatile
 18901  00277A  868B               	bsf	3979,3,c	;volatile
 18902                           
 18903                           ;libraries/lcd_highlevel.c: 641:     PORTA = posX1; LATC3 = 0; LATC3 = 1;;
 18904  00277C  C012  FF80         	movff	LCD_DrawRect@posX1,3968	;volatile
 18905  002780  968B               	bcf	3979,3,c	;volatile
 18906  002782  868B               	bsf	3979,3,c	;volatile
 18907                           
 18908                           ;libraries/lcd_highlevel.c: 642:     PORTA = posX2>>8; LATC3 = 0; LATC3 = 1;;
 18909  002784  C017  FF80         	movff	LCD_DrawRect@posX2+1,3968	;volatile
 18910  002788  968B               	bcf	3979,3,c	;volatile
 18911  00278A  868B               	bsf	3979,3,c	;volatile
 18912                           
 18913                           ;libraries/lcd_highlevel.c: 643:     PORTA = posX2; LATC3 = 0; LATC3 = 1;;
 18914  00278C  C016  FF80         	movff	LCD_DrawRect@posX2,3968	;volatile
 18915  002790  968B               	bcf	3979,3,c	;volatile
 18916  002792  868B               	bsf	3979,3,c	;volatile
 18917                           
 18918                           ;libraries/lcd_highlevel.c: 645:     PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 18919  002794  0E2B               	movlw	43
 18920  002796  6E80               	movwf	128,c	;volatile
 18921  002798  988B               	bcf	3979,4,c	;volatile
 18922  00279A  968B               	bcf	3979,3,c	;volatile
 18923  00279C  868B               	bsf	3979,3,c	;volatile
 18924  00279E  888B               	bsf	3979,4,c	;volatile
 18925                           
 18926                           ;libraries/lcd_highlevel.c: 646:     PORTA = posY1>>8; LATC3 = 0; LATC3 = 1;;
 18927  0027A0  C015  FF80         	movff	LCD_DrawRect@posY1+1,3968	;volatile
 18928  0027A4  968B               	bcf	3979,3,c	;volatile
 18929  0027A6  868B               	bsf	3979,3,c	;volatile
 18930                           
 18931                           ;libraries/lcd_highlevel.c: 647:     PORTA = posY1; LATC3 = 0; LATC3 = 1;;
 18932  0027A8  C014  FF80         	movff	LCD_DrawRect@posY1,3968	;volatile
 18933  0027AC  968B               	bcf	3979,3,c	;volatile
 18934  0027AE  868B               	bsf	3979,3,c	;volatile
 18935                           
 18936                           ;libraries/lcd_highlevel.c: 648:     PORTA = (320 -1) >> 8; LATC3 = 0; LATC3 = 1;;
 18937  0027B0  0E01               	movlw	1
 18938  0027B2  6E80               	movwf	128,c	;volatile
 18939  0027B4  968B               	bcf	3979,3,c	;volatile
 18940  0027B6  868B               	bsf	3979,3,c	;volatile
 18941                           
 18942                           ;libraries/lcd_highlevel.c: 649:     PORTA = (320 -1); LATC3 = 0; LATC3 = 1;;
 18943  0027B8  0E3F               	movlw	63
 18944  0027BA  6E80               	movwf	128,c	;volatile
 18945  0027BC  968B               	bcf	3979,3,c	;volatile
 18946  0027BE  868B               	bsf	3979,3,c	;volatile
 18947                           
 18948                           ;libraries/lcd_highlevel.c: 651:     PORTA = 0x2C; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 18949  0027C0  0E2C               	movlw	44
 18950  0027C2  6E80               	movwf	128,c	;volatile
 18951  0027C4  988B               	bcf	3979,4,c	;volatile
 18952  0027C6  968B               	bcf	3979,3,c	;volatile
 18953  0027C8  868B               	bsf	3979,3,c	;volatile
 18954  0027CA  888B               	bsf	3979,4,c	;volatile
 18955                           
 18956                           ;libraries/lcd_highlevel.c: 653:     for(i=posX1;i<=posX2;i++)
 18957  0027CC  C012  F023         	movff	LCD_DrawRect@posX1,LCD_DrawRect@i
 18958  0027D0  C013  F024         	movff	LCD_DrawRect@posX1+1,LCD_DrawRect@i+1
 18959  0027D4  D00A               	goto	l5490
 18960  0027D6                     l290:
 18961                           
 18962                           ;libraries/lcd_highlevel.c: 654:     {;libraries/lcd_highlevel.c: 655:       PORTA = col
      +                          orH; LATC3 = 0; LATC3 = 1;;
 18963  0027D6  C021  FF80         	movff	LCD_DrawRect@colorH,3968	;volatile
 18964  0027DA  968B               	bcf	3979,3,c	;volatile
 18965  0027DC  868B               	bsf	3979,3,c	;volatile
 18966                           
 18967                           ;libraries/lcd_highlevel.c: 656:       PORTA = colorL; LATC3 = 0; LATC3 = 1;;
 18968  0027DE  C022  FF80         	movff	LCD_DrawRect@colorL,3968	;volatile
 18969  0027E2  968B               	bcf	3979,3,c	;volatile
 18970  0027E4  868B               	bsf	3979,3,c	;volatile
 18971                           
 18972                           ;libraries/lcd_highlevel.c: 657:     }
 18973  0027E6  4A23               	infsnz	LCD_DrawRect@i^0,f,c
 18974  0027E8  2A24               	incf	(LCD_DrawRect@i+1)^0,f,c
 18975  0027EA                     l5490:
 18976  0027EA  5023               	movf	LCD_DrawRect@i^0,w,c
 18977  0027EC  5C16               	subwf	LCD_DrawRect@posX2^0,w,c
 18978  0027EE  5024               	movf	(LCD_DrawRect@i+1)^0,w,c
 18979  0027F0  5817               	subwfb	(LCD_DrawRect@posX2+1)^0,w,c
 18980  0027F2  B0D8               	btfsc	status,0,c
 18981  0027F4  D7F0               	goto	l290
 18982                           
 18983                           ;libraries/lcd_highlevel.c: 659:     PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 18984  0027F6  0E2B               	movlw	43
 18985  0027F8  6E80               	movwf	128,c	;volatile
 18986  0027FA  988B               	bcf	3979,4,c	;volatile
 18987  0027FC  968B               	bcf	3979,3,c	;volatile
 18988  0027FE  868B               	bsf	3979,3,c	;volatile
 18989  002800  888B               	bsf	3979,4,c	;volatile
 18990                           
 18991                           ;libraries/lcd_highlevel.c: 660:     PORTA = posY2>>8; LATC3 = 0; LATC3 = 1;;
 18992  002802  C019  FF80         	movff	LCD_DrawRect@posY2+1,3968	;volatile
 18993  002806  968B               	bcf	3979,3,c	;volatile
 18994  002808  868B               	bsf	3979,3,c	;volatile
 18995                           
 18996                           ;libraries/lcd_highlevel.c: 661:     PORTA = posY2; LATC3 = 0; LATC3 = 1;;
 18997  00280A  C018  FF80         	movff	LCD_DrawRect@posY2,3968	;volatile
 18998  00280E  968B               	bcf	3979,3,c	;volatile
 18999  002810  868B               	bsf	3979,3,c	;volatile
 19000                           
 19001                           ;libraries/lcd_highlevel.c: 662:     PORTA = 0x2C; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 19002  002812  0E2C               	movlw	44
 19003  002814  6E80               	movwf	128,c	;volatile
 19004  002816  988B               	bcf	3979,4,c	;volatile
 19005  002818  968B               	bcf	3979,3,c	;volatile
 19006  00281A  868B               	bsf	3979,3,c	;volatile
 19007  00281C  888B               	bsf	3979,4,c	;volatile
 19008                           
 19009                           ;libraries/lcd_highlevel.c: 663:     for(i=posX1;i<=posX2;i++)
 19010  00281E  C012  F023         	movff	LCD_DrawRect@posX1,LCD_DrawRect@i
 19011  002822  C013  F024         	movff	LCD_DrawRect@posX1+1,LCD_DrawRect@i+1
 19012  002826  D00A               	goto	l5526
 19013  002828                     l293:
 19014                           
 19015                           ;libraries/lcd_highlevel.c: 664:     {;libraries/lcd_highlevel.c: 665:       PORTA = col
      +                          orH; LATC3 = 0; LATC3 = 1;;
 19016  002828  C021  FF80         	movff	LCD_DrawRect@colorH,3968	;volatile
 19017  00282C  968B               	bcf	3979,3,c	;volatile
 19018  00282E  868B               	bsf	3979,3,c	;volatile
 19019                           
 19020                           ;libraries/lcd_highlevel.c: 666:       PORTA = colorL; LATC3 = 0; LATC3 = 1;;
 19021  002830  C022  FF80         	movff	LCD_DrawRect@colorL,3968	;volatile
 19022  002834  968B               	bcf	3979,3,c	;volatile
 19023  002836  868B               	bsf	3979,3,c	;volatile
 19024                           
 19025                           ;libraries/lcd_highlevel.c: 667:     }
 19026  002838  4A23               	infsnz	LCD_DrawRect@i^0,f,c
 19027  00283A  2A24               	incf	(LCD_DrawRect@i+1)^0,f,c
 19028  00283C                     l5526:
 19029  00283C  5023               	movf	LCD_DrawRect@i^0,w,c
 19030  00283E  5C16               	subwf	LCD_DrawRect@posX2^0,w,c
 19031  002840  5024               	movf	(LCD_DrawRect@i+1)^0,w,c
 19032  002842  5817               	subwfb	(LCD_DrawRect@posX2+1)^0,w,c
 19033  002844  B0D8               	btfsc	status,0,c
 19034  002846  D7F0               	goto	l293
 19035                           
 19036                           ;libraries/lcd_highlevel.c: 669:     PORTA = 0x2A; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 19037  002848  0E2A               	movlw	42
 19038  00284A  6E80               	movwf	128,c	;volatile
 19039  00284C  988B               	bcf	3979,4,c	;volatile
 19040  00284E  968B               	bcf	3979,3,c	;volatile
 19041  002850  868B               	bsf	3979,3,c	;volatile
 19042  002852  888B               	bsf	3979,4,c	;volatile
 19043                           
 19044                           ;libraries/lcd_highlevel.c: 670:     PORTA = posX1>>8; LATC3 = 0; LATC3 = 1;;
 19045  002854  C013  FF80         	movff	LCD_DrawRect@posX1+1,3968	;volatile
 19046  002858  968B               	bcf	3979,3,c	;volatile
 19047  00285A  868B               	bsf	3979,3,c	;volatile
 19048                           
 19049                           ;libraries/lcd_highlevel.c: 671:     PORTA = posX1; LATC3 = 0; LATC3 = 1;;
 19050  00285C  C012  FF80         	movff	LCD_DrawRect@posX1,3968	;volatile
 19051  002860  968B               	bcf	3979,3,c	;volatile
 19052  002862  868B               	bsf	3979,3,c	;volatile
 19053                           
 19054                           ;libraries/lcd_highlevel.c: 672:     PORTA = posX1>>8; LATC3 = 0; LATC3 = 1;;
 19055  002864  C013  FF80         	movff	LCD_DrawRect@posX1+1,3968	;volatile
 19056  002868  968B               	bcf	3979,3,c	;volatile
 19057  00286A  868B               	bsf	3979,3,c	;volatile
 19058                           
 19059                           ;libraries/lcd_highlevel.c: 673:     PORTA = posX1; LATC3 = 0; LATC3 = 1;;
 19060  00286C  C012  FF80         	movff	LCD_DrawRect@posX1,3968	;volatile
 19061  002870  968B               	bcf	3979,3,c	;volatile
 19062  002872  868B               	bsf	3979,3,c	;volatile
 19063                           
 19064                           ;libraries/lcd_highlevel.c: 675:     PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 19065  002874  0E2B               	movlw	43
 19066  002876  6E80               	movwf	128,c	;volatile
 19067  002878  988B               	bcf	3979,4,c	;volatile
 19068  00287A  968B               	bcf	3979,3,c	;volatile
 19069  00287C  868B               	bsf	3979,3,c	;volatile
 19070  00287E  888B               	bsf	3979,4,c	;volatile
 19071                           
 19072                           ;libraries/lcd_highlevel.c: 676:     PORTA = posY1>>8; LATC3 = 0; LATC3 = 1;;
 19073  002880  C015  FF80         	movff	LCD_DrawRect@posY1+1,3968	;volatile
 19074  002884  968B               	bcf	3979,3,c	;volatile
 19075  002886  868B               	bsf	3979,3,c	;volatile
 19076                           
 19077                           ;libraries/lcd_highlevel.c: 677:     PORTA = posY1; LATC3 = 0; LATC3 = 1;;
 19078  002888  C014  FF80         	movff	LCD_DrawRect@posY1,3968	;volatile
 19079  00288C  968B               	bcf	3979,3,c	;volatile
 19080  00288E  868B               	bsf	3979,3,c	;volatile
 19081                           
 19082                           ;libraries/lcd_highlevel.c: 678:     PORTA = (320 -1) >> 8; LATC3 = 0; LATC3 = 1;;
 19083  002890  0E01               	movlw	1
 19084  002892  6E80               	movwf	128,c	;volatile
 19085  002894  968B               	bcf	3979,3,c	;volatile
 19086  002896  868B               	bsf	3979,3,c	;volatile
 19087                           
 19088                           ;libraries/lcd_highlevel.c: 679:     PORTA = (320 -1); LATC3 = 0; LATC3 = 1;;
 19089  002898  0E3F               	movlw	63
 19090  00289A  6E80               	movwf	128,c	;volatile
 19091  00289C  968B               	bcf	3979,3,c	;volatile
 19092  00289E  868B               	bsf	3979,3,c	;volatile
 19093                           
 19094                           ;libraries/lcd_highlevel.c: 680:     PORTA = 0x2C; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 19095  0028A0  0E2C               	movlw	44
 19096  0028A2  6E80               	movwf	128,c	;volatile
 19097  0028A4  988B               	bcf	3979,4,c	;volatile
 19098  0028A6  968B               	bcf	3979,3,c	;volatile
 19099  0028A8  868B               	bsf	3979,3,c	;volatile
 19100  0028AA  888B               	bsf	3979,4,c	;volatile
 19101                           
 19102                           ;libraries/lcd_highlevel.c: 681:     for(i=posY1;i<=posY2;i++)
 19103  0028AC  C014  F023         	movff	LCD_DrawRect@posY1,LCD_DrawRect@i
 19104  0028B0  C015  F024         	movff	LCD_DrawRect@posY1+1,LCD_DrawRect@i+1
 19105  0028B4  D00A               	goto	l5602
 19106  0028B6                     l296:
 19107                           
 19108                           ;libraries/lcd_highlevel.c: 682:     {;libraries/lcd_highlevel.c: 683:       PORTA = col
      +                          orH; LATC3 = 0; LATC3 = 1;;
 19109  0028B6  C021  FF80         	movff	LCD_DrawRect@colorH,3968	;volatile
 19110  0028BA  968B               	bcf	3979,3,c	;volatile
 19111  0028BC  868B               	bsf	3979,3,c	;volatile
 19112                           
 19113                           ;libraries/lcd_highlevel.c: 684:       PORTA = colorL; LATC3 = 0; LATC3 = 1;;
 19114  0028BE  C022  FF80         	movff	LCD_DrawRect@colorL,3968	;volatile
 19115  0028C2  968B               	bcf	3979,3,c	;volatile
 19116  0028C4  868B               	bsf	3979,3,c	;volatile
 19117                           
 19118                           ;libraries/lcd_highlevel.c: 685:     }
 19119  0028C6  4A23               	infsnz	LCD_DrawRect@i^0,f,c
 19120  0028C8  2A24               	incf	(LCD_DrawRect@i+1)^0,f,c
 19121  0028CA                     l5602:
 19122  0028CA  5023               	movf	LCD_DrawRect@i^0,w,c
 19123  0028CC  5C18               	subwf	LCD_DrawRect@posY2^0,w,c
 19124  0028CE  5024               	movf	(LCD_DrawRect@i+1)^0,w,c
 19125  0028D0  5819               	subwfb	(LCD_DrawRect@posY2+1)^0,w,c
 19126  0028D2  B0D8               	btfsc	status,0,c
 19127  0028D4  D7F0               	goto	l296
 19128                           
 19129                           ;libraries/lcd_highlevel.c: 687:     PORTA = 0x2A; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 19130  0028D6  0E2A               	movlw	42
 19131  0028D8  6E80               	movwf	128,c	;volatile
 19132  0028DA  988B               	bcf	3979,4,c	;volatile
 19133  0028DC  968B               	bcf	3979,3,c	;volatile
 19134  0028DE  868B               	bsf	3979,3,c	;volatile
 19135  0028E0  888B               	bsf	3979,4,c	;volatile
 19136                           
 19137                           ;libraries/lcd_highlevel.c: 688:     PORTA = posX2>>8; LATC3 = 0; LATC3 = 1;;
 19138  0028E2  C017  FF80         	movff	LCD_DrawRect@posX2+1,3968	;volatile
 19139  0028E6  968B               	bcf	3979,3,c	;volatile
 19140  0028E8  868B               	bsf	3979,3,c	;volatile
 19141                           
 19142                           ;libraries/lcd_highlevel.c: 689:     PORTA = posX2; LATC3 = 0; LATC3 = 1;;
 19143  0028EA  C016  FF80         	movff	LCD_DrawRect@posX2,3968	;volatile
 19144  0028EE  968B               	bcf	3979,3,c	;volatile
 19145  0028F0  868B               	bsf	3979,3,c	;volatile
 19146                           
 19147                           ;libraries/lcd_highlevel.c: 690:     PORTA = posX2>>8; LATC3 = 0; LATC3 = 1;;
 19148  0028F2  C017  FF80         	movff	LCD_DrawRect@posX2+1,3968	;volatile
 19149  0028F6  968B               	bcf	3979,3,c	;volatile
 19150  0028F8  868B               	bsf	3979,3,c	;volatile
 19151                           
 19152                           ;libraries/lcd_highlevel.c: 691:     PORTA = posX2; LATC3 = 0; LATC3 = 1;;
 19153  0028FA  C016  FF80         	movff	LCD_DrawRect@posX2,3968	;volatile
 19154  0028FE  968B               	bcf	3979,3,c	;volatile
 19155  002900  868B               	bsf	3979,3,c	;volatile
 19156                           
 19157                           ;libraries/lcd_highlevel.c: 692:     PORTA = 0x2C; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 19158  002902  0E2C               	movlw	44
 19159  002904  6E80               	movwf	128,c	;volatile
 19160  002906  988B               	bcf	3979,4,c	;volatile
 19161  002908  968B               	bcf	3979,3,c	;volatile
 19162  00290A  868B               	bsf	3979,3,c	;volatile
 19163  00290C  888B               	bsf	3979,4,c	;volatile
 19164                           
 19165                           ;libraries/lcd_highlevel.c: 693:     for(i=posY1;i<=posY2;i++)
 19166  00290E  C014  F023         	movff	LCD_DrawRect@posY1,LCD_DrawRect@i
 19167  002912  C015  F024         	movff	LCD_DrawRect@posY1+1,LCD_DrawRect@i+1
 19168  002916  D00A               	goto	l5650
 19169  002918                     l299:
 19170                           
 19171                           ;libraries/lcd_highlevel.c: 694:     {;libraries/lcd_highlevel.c: 695:       PORTA = col
      +                          orH; LATC3 = 0; LATC3 = 1;;
 19172  002918  C021  FF80         	movff	LCD_DrawRect@colorH,3968	;volatile
 19173  00291C  968B               	bcf	3979,3,c	;volatile
 19174  00291E  868B               	bsf	3979,3,c	;volatile
 19175                           
 19176                           ;libraries/lcd_highlevel.c: 696:       PORTA = colorL; LATC3 = 0; LATC3 = 1;;
 19177  002920  C022  FF80         	movff	LCD_DrawRect@colorL,3968	;volatile
 19178  002924  968B               	bcf	3979,3,c	;volatile
 19179  002926  868B               	bsf	3979,3,c	;volatile
 19180                           
 19181                           ;libraries/lcd_highlevel.c: 697:     }
 19182  002928  4A23               	infsnz	LCD_DrawRect@i^0,f,c
 19183  00292A  2A24               	incf	(LCD_DrawRect@i+1)^0,f,c
 19184  00292C                     l5650:
 19185  00292C  5023               	movf	LCD_DrawRect@i^0,w,c
 19186  00292E  5C18               	subwf	LCD_DrawRect@posY2^0,w,c
 19187  002930  5024               	movf	(LCD_DrawRect@i+1)^0,w,c
 19188  002932  5819               	subwfb	(LCD_DrawRect@posY2+1)^0,w,c
 19189  002934  A0D8               	btfss	status,0,c
 19190  002936  0012               	return	
 19191  002938  D7EF               	goto	l299
 19192  00293A                     __end_of_LCD_DrawRect:
 19193                           	callstack 0
 19194                           
 19195 ;; *************** function _XF_popEvent *****************
 19196 ;; Defined at:
 19197 ;;		line 72 in file "xf/xf.c"
 19198 ;; Parameters:    Size  Location     Type
 19199 ;;  inISR           1    wreg     _Bool 
 19200 ;; Auto vars:     Size  Location     Type
 19201 ;;  inISR           1   24[COMRAM] _Bool 
 19202 ;;  ev              1   23[COMRAM] unsigned char 
 19203 ;; Return value:  Size  Location     Type
 19204 ;;                  1    wreg      unsigned char 
 19205 ;; Registers used:
 19206 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19207 ;; Tracked objects:
 19208 ;;		On entry : 0/0
 19209 ;;		On exit  : 0/0
 19210 ;;		Unchanged: 0/0
 19211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19212 ;;      Params:         0       0       0       0       0       0       0
 19213 ;;      Locals:         2       0       0       0       0       0       0
 19214 ;;      Temps:          0       0       0       0       0       0       0
 19215 ;;      Totals:         2       0       0       0       0       0       0
 19216 ;;Total ram usage:        2 bytes
 19217 ;; Hardware stack levels used: 1
 19218 ;; Hardware stack levels required when called: 5
 19219 ;; This function calls:
 19220 ;;		_ENTERCRITICAL
 19221 ;;		_LEAVECRITICAL
 19222 ;;		___awmod
 19223 ;; This function is called by:
 19224 ;;		_Factory_exec
 19225 ;; This function uses a non-reentrant model
 19226 ;;
 19227                           
 19228                           	psect	text81
 19229  0054DC                     __ptext81:
 19230                           	callstack 0
 19231  0054DC                     _XF_popEvent:
 19232                           	callstack 24
 19233                           
 19234                           ;incstack = 0
 19235                           ;XF_popEvent@inISR stored from wreg
 19236  0054DC  6E19               	movwf	XF_popEvent@inISR^0,c
 19237                           
 19238                           ;xf/xf.c: 76:     ENTERCRITICAL(inISR);
 19239  0054DE  5019               	movf	XF_popEvent@inISR^0,w,c
 19240  0054E0  ECFA  F02C         	call	_ENTERCRITICAL
 19241                           
 19242                           ;xf/xf.c: 77:     if(theXF.in == theXF.out)
 19243  0054E4  0100               	movlb	0	; () banked
 19244  0054E6  5185               	movf	(_theXF+37)& (0+255),w,b
 19245  0054E8  1984               	xorwf	(_theXF+36)& (0+255),w,b
 19246  0054EA  A4D8               	btfss	status,2,c
 19247  0054EC  D005               	goto	l7620
 19248                           
 19249                           ; BSR set to: 0
 19250                           ;xf/xf.c: 78:     {;xf/xf.c: 79:       LEAVECRITICAL(inISR);
 19251  0054EE  5019               	movf	XF_popEvent@inISR^0,w,c
 19252  0054F0  ECF4  F02C         	call	_LEAVECRITICAL
 19253                           
 19254                           ;xf/xf.c: 80:       return ev;
 19255  0054F4  0E00               	movlw	0
 19256  0054F6  0012               	return	
 19257  0054F8                     l7620:
 19258                           
 19259                           ; BSR set to: 0
 19260                           ;xf/xf.c: 82:     ev = theXF.eventQueue[theXF.out];
 19261  0054F8  5185               	movf	(_theXF+37)& (0+255),w,b
 19262  0054FA  0F78               	addlw	low (_theXF+24)
 19263  0054FC  6ED9               	movwf	fsr2l,c
 19264  0054FE  6ADA               	clrf	fsr2h,c
 19265  005500  50DF               	movf	indf2,w,c
 19266  005502  6E18               	movwf	XF_popEvent@ev^0,c
 19267                           
 19268                           ; BSR set to: 0
 19269                           ;xf/xf.c: 83:     theXF.out = (theXF.out + 1)%(uint8_t)sizeof(theXF.eventQueue);
 19270  005504  0E01               	movlw	1
 19271  005506  2585               	addwf	(_theXF+37)& (0+255),w,b
 19272  005508  6E12               	movwf	___awmod@dividend^0,c
 19273  00550A  6A13               	clrf	(___awmod@dividend+1)^0,c
 19274  00550C  0E00               	movlw	0
 19275  00550E  2213               	addwfc	(___awmod@dividend+1)^0,f,c
 19276  005510  0E00               	movlw	0
 19277  005512  6E15               	movwf	(___awmod@divisor+1)^0,c
 19278  005514  0E0C               	movlw	12
 19279  005516  6E14               	movwf	___awmod@divisor^0,c
 19280  005518  ECFA  F028         	call	___awmod	;wreg free
 19281  00551C  5012               	movf	?___awmod^0,w,c
 19282  00551E  6F85               	movwf	(_theXF+37)& (0+255),b
 19283                           
 19284                           ; BSR set to: 0
 19285                           ;xf/xf.c: 84:     LEAVECRITICAL(inISR);
 19286  005520  5019               	movf	XF_popEvent@inISR^0,w,c
 19287  005522  ECF4  F02C         	call	_LEAVECRITICAL
 19288                           
 19289                           ;xf/xf.c: 85:     return ev;
 19290  005526  5018               	movf	XF_popEvent@ev^0,w,c
 19291  005528  0012               	return		;funcret
 19292  00552A                     __end_of_XF_popEvent:
 19293                           	callstack 0
 19294                           
 19295 ;; *************** function ___awmod *****************
 19296 ;; Defined at:
 19297 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awmod.c"
 19298 ;; Parameters:    Size  Location     Type
 19299 ;;  dividend        2   17[COMRAM] int 
 19300 ;;  divisor         2   19[COMRAM] int 
 19301 ;; Auto vars:     Size  Location     Type
 19302 ;;  sign            1   22[COMRAM] unsigned char 
 19303 ;;  counter         1   21[COMRAM] unsigned char 
 19304 ;; Return value:  Size  Location     Type
 19305 ;;                  2   17[COMRAM] int 
 19306 ;; Registers used:
 19307 ;;		wreg, status,2, status,0
 19308 ;; Tracked objects:
 19309 ;;		On entry : 3F/0
 19310 ;;		On exit  : 3F/0
 19311 ;;		Unchanged: 3F/0
 19312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19313 ;;      Params:         4       0       0       0       0       0       0
 19314 ;;      Locals:         2       0       0       0       0       0       0
 19315 ;;      Temps:          0       0       0       0       0       0       0
 19316 ;;      Totals:         6       0       0       0       0       0       0
 19317 ;;Total ram usage:        6 bytes
 19318 ;; Hardware stack levels used: 1
 19319 ;; Hardware stack levels required when called: 4
 19320 ;; This function calls:
 19321 ;;		Nothing
 19322 ;; This function is called by:
 19323 ;;		_XF_pushEvent
 19324 ;;		_XF_popEvent
 19325 ;; This function uses a non-reentrant model
 19326 ;;
 19327                           
 19328                           	psect	text82
 19329  0051F4                     __ptext82:
 19330                           	callstack 0
 19331  0051F4                     ___awmod:
 19332                           	callstack 20
 19333                           
 19334                           ; BSR set to: 0
 19335                           
 19336                           ;incstack = 0
 19337  0051F4  0E00               	movlw	0
 19338  0051F6  6E17               	movwf	___awmod@sign^0,c
 19339                           
 19340                           ; BSR set to: 0
 19341  0051F8  AE13               	btfss	(___awmod@dividend+1)^0,7,c
 19342  0051FA  D006               	goto	l5844
 19343                           
 19344                           ; BSR set to: 0
 19345  0051FC  6C12               	negf	___awmod@dividend^0,c
 19346  0051FE  1E13               	comf	(___awmod@dividend+1)^0,f,c
 19347  005200  B0D8               	btfsc	status,0,c
 19348  005202  2A13               	incf	(___awmod@dividend+1)^0,f,c
 19349                           
 19350                           ; BSR set to: 0
 19351  005204  0E01               	movlw	1
 19352  005206  6E17               	movwf	___awmod@sign^0,c
 19353  005208                     l5844:
 19354                           
 19355                           ; BSR set to: 0
 19356  005208  AE15               	btfss	(___awmod@divisor+1)^0,7,c
 19357  00520A  D004               	goto	l5848
 19358                           
 19359                           ; BSR set to: 0
 19360  00520C  6C14               	negf	___awmod@divisor^0,c
 19361  00520E  1E15               	comf	(___awmod@divisor+1)^0,f,c
 19362  005210  B0D8               	btfsc	status,0,c
 19363  005212  2A15               	incf	(___awmod@divisor+1)^0,f,c
 19364  005214                     l5848:
 19365                           
 19366                           ; BSR set to: 0
 19367  005214  5014               	movf	___awmod@divisor^0,w,c
 19368  005216  1015               	iorwf	(___awmod@divisor+1)^0,w,c
 19369  005218  B4D8               	btfsc	status,2,c
 19370  00521A  D018               	goto	l5864
 19371                           
 19372                           ; BSR set to: 0
 19373  00521C  0E01               	movlw	1
 19374  00521E  6E16               	movwf	___awmod@counter^0,c
 19375  005220  D004               	goto	l5854
 19376  005222                     l5852:
 19377                           
 19378                           ; BSR set to: 0
 19379  005222  90D8               	bcf	status,0,c
 19380  005224  3614               	rlcf	___awmod@divisor^0,f,c
 19381  005226  3615               	rlcf	(___awmod@divisor+1)^0,f,c
 19382  005228  2A16               	incf	___awmod@counter^0,f,c
 19383  00522A                     l5854:
 19384                           
 19385                           ; BSR set to: 0
 19386  00522A  AE15               	btfss	(___awmod@divisor+1)^0,7,c
 19387  00522C  D7FA               	goto	l5852
 19388  00522E                     u3530:
 19389                           
 19390                           ; BSR set to: 0
 19391  00522E  5014               	movf	___awmod@divisor^0,w,c
 19392  005230  5C12               	subwf	___awmod@dividend^0,w,c
 19393  005232  5015               	movf	(___awmod@divisor+1)^0,w,c
 19394  005234  5813               	subwfb	(___awmod@dividend+1)^0,w,c
 19395  005236  A0D8               	btfss	status,0,c
 19396  005238  D004               	goto	l5860
 19397                           
 19398                           ; BSR set to: 0
 19399  00523A  5014               	movf	___awmod@divisor^0,w,c
 19400  00523C  5E12               	subwf	___awmod@dividend^0,f,c
 19401  00523E  5015               	movf	(___awmod@divisor+1)^0,w,c
 19402  005240  5A13               	subwfb	(___awmod@dividend+1)^0,f,c
 19403  005242                     l5860:
 19404                           
 19405                           ; BSR set to: 0
 19406  005242  90D8               	bcf	status,0,c
 19407  005244  3215               	rrcf	(___awmod@divisor+1)^0,f,c
 19408  005246  3214               	rrcf	___awmod@divisor^0,f,c
 19409                           
 19410                           ; BSR set to: 0
 19411  005248  2E16               	decfsz	___awmod@counter^0,f,c
 19412  00524A  D7F1               	goto	u3530
 19413  00524C                     l5864:
 19414                           
 19415                           ; BSR set to: 0
 19416  00524C  5017               	movf	___awmod@sign^0,w,c
 19417  00524E  B4D8               	btfsc	status,2,c
 19418  005250  D004               	goto	l5868
 19419                           
 19420                           ; BSR set to: 0
 19421  005252  6C12               	negf	___awmod@dividend^0,c
 19422  005254  1E13               	comf	(___awmod@dividend+1)^0,f,c
 19423  005256  B0D8               	btfsc	status,0,c
 19424  005258  2A13               	incf	(___awmod@dividend+1)^0,f,c
 19425  00525A                     l5868:
 19426                           
 19427                           ; BSR set to: 0
 19428  00525A  C012  F012         	movff	___awmod@dividend,?___awmod
 19429  00525E  C013  F013         	movff	___awmod@dividend+1,?___awmod+1
 19430                           
 19431                           ; BSR set to: 0
 19432  005262  0012               	return		;funcret
 19433  005264                     __end_of___awmod:
 19434                           	callstack 0
 19435                           
 19436 ;; *************** function _LEAVECRITICAL *****************
 19437 ;; Defined at:
 19438 ;;		line 186 in file "xf/xf.c"
 19439 ;; Parameters:    Size  Location     Type
 19440 ;;  inISR           1    wreg     _Bool 
 19441 ;; Auto vars:     Size  Location     Type
 19442 ;;  inISR           1   17[COMRAM] _Bool 
 19443 ;; Return value:  Size  Location     Type
 19444 ;;                  1    wreg      void 
 19445 ;; Registers used:
 19446 ;;		wreg, status,2
 19447 ;; Tracked objects:
 19448 ;;		On entry : 0/0
 19449 ;;		On exit  : 0/0
 19450 ;;		Unchanged: 0/0
 19451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19452 ;;      Params:         0       0       0       0       0       0       0
 19453 ;;      Locals:         1       0       0       0       0       0       0
 19454 ;;      Temps:          0       0       0       0       0       0       0
 19455 ;;      Totals:         1       0       0       0       0       0       0
 19456 ;;Total ram usage:        1 bytes
 19457 ;; Hardware stack levels used: 1
 19458 ;; Hardware stack levels required when called: 4
 19459 ;; This function calls:
 19460 ;;		Nothing
 19461 ;; This function is called by:
 19462 ;;		_XF_pushEvent
 19463 ;;		_XF_popEvent
 19464 ;;		_XF_scheduleTimer
 19465 ;;		_XF_unscheduleTimer
 19466 ;; This function uses a non-reentrant model
 19467 ;;
 19468                           
 19469                           	psect	text83
 19470  0059E8                     __ptext83:
 19471                           	callstack 0
 19472  0059E8                     _LEAVECRITICAL:
 19473                           	callstack 22
 19474                           
 19475                           ; BSR set to: 0
 19476                           ;incstack = 0
 19477                           ;LEAVECRITICAL@inISR stored from wreg
 19478  0059E8  6E12               	movwf	LEAVECRITICAL@inISR^0,c
 19479                           
 19480                           ;xf/xf.c: 186: static void LEAVECRITICAL(_Bool inISR);xf/xf.c: 187: {;xf/xf.c: 188:     
      +                          if (inISR == 0)
 19481  0059EA  5012               	movf	LEAVECRITICAL@inISR^0,w,c
 19482  0059EC  A4D8               	btfss	status,2,c
 19483  0059EE  0012               	return	
 19484                           
 19485                           ;xf/xf.c: 189:     {;xf/xf.c: 190:       GIE = 1;
 19486  0059F0  8EF2               	bsf	4082,7,c	;volatile
 19487  0059F2  0012               	return		;funcret
 19488  0059F4                     __end_of_LEAVECRITICAL:
 19489                           	callstack 0
 19490                           
 19491 ;; *************** function _ENTERCRITICAL *****************
 19492 ;; Defined at:
 19493 ;;		line 172 in file "xf/xf.c"
 19494 ;; Parameters:    Size  Location     Type
 19495 ;;  inISR           1    wreg     _Bool 
 19496 ;; Auto vars:     Size  Location     Type
 19497 ;;  inISR           1   17[COMRAM] _Bool 
 19498 ;; Return value:  Size  Location     Type
 19499 ;;                  1    wreg      void 
 19500 ;; Registers used:
 19501 ;;		wreg, status,2
 19502 ;; Tracked objects:
 19503 ;;		On entry : 0/0
 19504 ;;		On exit  : 0/0
 19505 ;;		Unchanged: 0/0
 19506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19507 ;;      Params:         0       0       0       0       0       0       0
 19508 ;;      Locals:         1       0       0       0       0       0       0
 19509 ;;      Temps:          0       0       0       0       0       0       0
 19510 ;;      Totals:         1       0       0       0       0       0       0
 19511 ;;Total ram usage:        1 bytes
 19512 ;; Hardware stack levels used: 1
 19513 ;; Hardware stack levels required when called: 4
 19514 ;; This function calls:
 19515 ;;		Nothing
 19516 ;; This function is called by:
 19517 ;;		_XF_pushEvent
 19518 ;;		_XF_popEvent
 19519 ;;		_XF_scheduleTimer
 19520 ;;		_XF_unscheduleTimer
 19521 ;; This function uses a non-reentrant model
 19522 ;;
 19523                           
 19524                           	psect	text84
 19525  0059F4                     __ptext84:
 19526                           	callstack 0
 19527  0059F4                     _ENTERCRITICAL:
 19528                           	callstack 22
 19529                           
 19530                           ;incstack = 0
 19531                           ;ENTERCRITICAL@inISR stored from wreg
 19532  0059F4  6E12               	movwf	ENTERCRITICAL@inISR^0,c
 19533                           
 19534                           ;xf/xf.c: 172: static void ENTERCRITICAL(_Bool inISR);xf/xf.c: 173: {;xf/xf.c: 174:     
      +                          if (inISR == 0)
 19535  0059F6  5012               	movf	ENTERCRITICAL@inISR^0,w,c
 19536  0059F8  A4D8               	btfss	status,2,c
 19537  0059FA  0012               	return	
 19538                           
 19539                           ;xf/xf.c: 175:     {;xf/xf.c: 176:       GIE = 0;
 19540  0059FC  9EF2               	bcf	4082,7,c	;volatile
 19541  0059FE  0012               	return		;funcret
 19542  005A00                     __end_of_ENTERCRITICAL:
 19543                           	callstack 0
 19544                           
 19545 ;; *************** function _isr *****************
 19546 ;; Defined at:
 19547 ;;		line 23 in file "main.c"
 19548 ;; Parameters:    Size  Location     Type
 19549 ;;		None
 19550 ;; Auto vars:     Size  Location     Type
 19551 ;;		None
 19552 ;; Return value:  Size  Location     Type
 19553 ;;                  1    wreg      void 
 19554 ;; Registers used:
 19555 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19556 ;; Tracked objects:
 19557 ;;		On entry : 0/0
 19558 ;;		On exit  : 0/0
 19559 ;;		Unchanged: 0/0
 19560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19561 ;;      Params:         0       0       0       0       0       0       0
 19562 ;;      Locals:         0       0       0       0       0       0       0
 19563 ;;      Temps:          4       0       0       0       0       0       0
 19564 ;;      Totals:         4       0       0       0       0       0       0
 19565 ;;Total ram usage:        4 bytes
 19566 ;; Hardware stack levels used: 1
 19567 ;; Hardware stack levels required when called: 3
 19568 ;; This function calls:
 19569 ;;		_XF_decrementAndQueueTimers
 19570 ;;		i2_XF_pushEvent
 19571 ;; This function is called by:
 19572 ;;		Interrupt level 2
 19573 ;; This function uses a non-reentrant model
 19574 ;;
 19575                           
 19576                           	psect	intcode
 19577  000008                     __pintcode:
 19578                           	callstack 0
 19579  000008                     _isr:
 19580                           	callstack 14
 19581                           
 19582                           ;incstack = 0
 19583  000008  824E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19584  00000A  CFD9 F00E          	movff	fsr2l,??_isr
 19585  00000E  CFDA F00F          	movff	fsr2h,??_isr+1
 19586  000012  CFF3 F010          	movff	prodl,??_isr+2
 19587  000016  CFF4 F011          	movff	prodh,??_isr+3
 19588                           
 19589                           ;main.c: 25:     if((INT1IF==1)&&(INT1IE==1))
 19590  00001A  B0F0               	btfsc	4080,0,c	;volatile
 19591  00001C  A6F0               	btfss	4080,3,c	;volatile
 19592  00001E  D013               	goto	i2l7910
 19593                           
 19594                           ;main.c: 26:     {;main.c: 27:         if(INTEDG1==0)
 19595  000020  BAF1               	btfsc	4081,5,c	;volatile
 19596  000022  D008               	goto	i2l769
 19597                           
 19598                           ;main.c: 28:         {;main.c: 29:             INTEDG1=1;
 19599  000024  8AF1               	bsf	4081,5,c	;volatile
 19600                           
 19601                           ;main.c: 30:             INT1IF=0;
 19602  000026  90F0               	bcf	4080,0,c	;volatile
 19603                           
 19604                           ;main.c: 31:             XF_pushEvent(evPress,1);
 19605  000028  0E01               	movlw	1
 19606  00002A  6E07               	movwf	i2XF_pushEvent@inISR^0,c
 19607  00002C  0E01               	movlw	1
 19608  00002E  EC45  F02A         	call	i2_XF_pushEvent
 19609                           
 19610                           ;main.c: 33:         }
 19611  000032  D009               	goto	i2l7910
 19612  000034                     i2l769:
 19613  000034  AAF1               	btfss	4081,5,c	;volatile
 19614  000036  D007               	goto	i2l7910
 19615                           
 19616                           ;main.c: 35:         {;main.c: 36:             INTEDG1=0;
 19617  000038  9AF1               	bcf	4081,5,c	;volatile
 19618                           
 19619                           ;main.c: 37:             INT1IF=0;
 19620  00003A  90F0               	bcf	4080,0,c	;volatile
 19621                           
 19622                           ;main.c: 38:             XF_pushEvent(evRelease,1);
 19623  00003C  0E01               	movlw	1
 19624  00003E  6E07               	movwf	i2XF_pushEvent@inISR^0,c
 19625  000040  0E02               	movlw	2
 19626  000042  EC45  F02A         	call	i2_XF_pushEvent
 19627  000046                     i2l7910:
 19628                           
 19629                           ;main.c: 41:     if((TMR0IF==1)&&(TMR0IE==1))
 19630  000046  B4F2               	btfsc	4082,2,c	;volatile
 19631  000048  AAF2               	btfss	4082,5,c	;volatile
 19632  00004A  D006               	goto	i2l773
 19633                           
 19634                           ;main.c: 42:     {;main.c: 43:         XF_decrementAndQueueTimers();
 19635  00004C  ECE3  F026         	call	_XF_decrementAndQueueTimers	;wreg free
 19636                           
 19637                           ;main.c: 44:         TMR0H=0xFF;
 19638  000050  68D7               	setf	215,c	;volatile
 19639                           
 19640                           ;main.c: 45:         TMR0L=0x82;
 19641  000052  0E82               	movlw	130
 19642  000054  6ED6               	movwf	214,c	;volatile
 19643                           
 19644                           ;main.c: 46:         TMR0IF=0;
 19645  000056  94F2               	bcf	4082,2,c	;volatile
 19646  000058                     i2l773:
 19647  000058  C011  FFF4         	movff	??_isr+3,prodh
 19648  00005C  C010  FFF3         	movff	??_isr+2,prodl
 19649  000060  C00F  FFDA         	movff	??_isr+1,fsr2h
 19650  000064  C00E  FFD9         	movff	??_isr,fsr2l
 19651  000068  924E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19652  00006A  0011               	retfie		f
 19653  00006C                     __end_of_isr:
 19654                           	callstack 0
 19655                           
 19656 ;; *************** function _XF_decrementAndQueueTimers *****************
 19657 ;; Defined at:
 19658 ;;		line 139 in file "xf/xf.c"
 19659 ;; Parameters:    Size  Location     Type
 19660 ;;		None
 19661 ;; Auto vars:     Size  Location     Type
 19662 ;;  i               2   11[COMRAM] int 
 19663 ;; Return value:  Size  Location     Type
 19664 ;;                  1    wreg      void 
 19665 ;; Registers used:
 19666 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19667 ;; Tracked objects:
 19668 ;;		On entry : 0/0
 19669 ;;		On exit  : 0/0
 19670 ;;		Unchanged: 0/0
 19671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19672 ;;      Params:         0       0       0       0       0       0       0
 19673 ;;      Locals:         2       0       0       0       0       0       0
 19674 ;;      Temps:          2       0       0       0       0       0       0
 19675 ;;      Totals:         4       0       0       0       0       0       0
 19676 ;;Total ram usage:        4 bytes
 19677 ;; Hardware stack levels used: 1
 19678 ;; Hardware stack levels required when called: 2
 19679 ;; This function calls:
 19680 ;;		i2_XF_pushEvent
 19681 ;;		i2_XF_unscheduleTimer
 19682 ;; This function is called by:
 19683 ;;		_isr
 19684 ;; This function uses a non-reentrant model
 19685 ;;
 19686                           
 19687                           	psect	text86
 19688  004DC6                     __ptext86:
 19689                           	callstack 0
 19690  004DC6                     _XF_decrementAndQueueTimers:
 19691                           	callstack 14
 19692                           
 19693                           ;xf/xf.c: 141:     int i;;xf/xf.c: 142:     for (i=0; i<8; i++)
 19694                           
 19695                           ;incstack = 0
 19696  004DC6  0E00               	movlw	0
 19697  004DC8  6E0D               	movwf	(XF_decrementAndQueueTimers@i+1)^0,c
 19698  004DCA  0E00               	movlw	0
 19699  004DCC  6E0C               	movwf	XF_decrementAndQueueTimers@i^0,c
 19700  004DCE                     i2l7882:
 19701                           
 19702                           ;xf/xf.c: 143:     {;xf/xf.c: 144:         if (theXF.timerList[i].ev != NULLEVENT)
 19703  004DCE  500C               	movf	XF_decrementAndQueueTimers@i^0,w,c
 19704  004DD0  0D03               	mullw	3
 19705  004DD2  50F3               	movf	243,w,c
 19706  004DD4  0F62               	addlw	low (_theXF+2)
 19707  004DD6  6ED9               	movwf	fsr2l,c
 19708  004DD8  6ADA               	clrf	fsr2h,c
 19709  004DDA  50DF               	movf	indf2,w,c
 19710  004DDC  B4D8               	btfsc	status,2,c
 19711  004DDE  D031               	goto	i2l7892
 19712                           
 19713                           ;xf/xf.c: 145:         {;xf/xf.c: 147:             theXF.timerList[i].tm-=1;
 19714  004DE0  500C               	movf	XF_decrementAndQueueTimers@i^0,w,c
 19715  004DE2  0D03               	mullw	3
 19716  004DE4  50F3               	movf	243,w,c
 19717  004DE6  0F60               	addlw	low _theXF
 19718  004DE8  6ED9               	movwf	fsr2l,c
 19719  004DEA  6ADA               	clrf	fsr2h,c
 19720  004DEC  06DE               	decf	postinc2,f,c
 19721  004DEE  0E00               	movlw	0
 19722  004DF0  5ADD               	subwfb	postdec2,f,c
 19723                           
 19724                           ;xf/xf.c: 148:             if (theXF.timerList[i].tm ==0)
 19725  004DF2  500C               	movf	XF_decrementAndQueueTimers@i^0,w,c
 19726  004DF4  0D03               	mullw	3
 19727  004DF6  50F3               	movf	243,w,c
 19728  004DF8  0F60               	addlw	low _theXF
 19729  004DFA  6ED9               	movwf	fsr2l,c
 19730  004DFC  6ADA               	clrf	fsr2h,c
 19731  004DFE  50DE               	movf	postinc2,w,c
 19732  004E00  10DE               	iorwf	postinc2,w,c
 19733  004E02  A4D8               	btfss	status,2,c
 19734  004E04  D01E               	goto	i2l7892
 19735                           
 19736                           ;xf/xf.c: 149:             {;xf/xf.c: 150:                 if(XF_pushEvent(theXF.timerLi
      +                          st[i].ev, 1) == 1)
 19737  004E06  0E01               	movlw	1
 19738  004E08  6E07               	movwf	i2XF_pushEvent@inISR^0,c
 19739  004E0A  500C               	movf	XF_decrementAndQueueTimers@i^0,w,c
 19740  004E0C  0D03               	mullw	3
 19741  004E0E  50F3               	movf	243,w,c
 19742  004E10  0F62               	addlw	low (_theXF+2)
 19743  004E12  6ED9               	movwf	fsr2l,c
 19744  004E14  6ADA               	clrf	fsr2h,c
 19745  004E16  50DF               	movf	indf2,w,c
 19746  004E18  EC45  F02A         	call	i2_XF_pushEvent
 19747  004E1C  06E8               	decf	wreg,f,c
 19748  004E1E  A4D8               	btfss	status,2,c
 19749  004E20  D006               	goto	i2l7890
 19750                           
 19751                           ;xf/xf.c: 151:                 {;xf/xf.c: 152:                   XF_unscheduleTimer(i, 1
      +                          );
 19752  004E22  0E01               	movlw	1
 19753  004E24  6E02               	movwf	i2XF_unscheduleTimer@inISR^0,c
 19754  004E26  500C               	movf	XF_decrementAndQueueTimers@i^0,w,c
 19755  004E28  EC94  F02B         	call	i2_XF_unscheduleTimer
 19756                           
 19757                           ;xf/xf.c: 153:                 }
 19758  004E2C  D00A               	goto	i2l7892
 19759  004E2E                     i2l7890:
 19760                           
 19761                           ;xf/xf.c: 155:                 {;xf/xf.c: 156:                   theXF.timerList[i].tm=1
      +                          ;
 19762  004E2E  500C               	movf	XF_decrementAndQueueTimers@i^0,w,c
 19763  004E30  0D03               	mullw	3
 19764  004E32  50F3               	movf	243,w,c
 19765  004E34  0F60               	addlw	low _theXF
 19766  004E36  6ED9               	movwf	fsr2l,c
 19767  004E38  6ADA               	clrf	fsr2h,c
 19768  004E3A  0E01               	movlw	1
 19769  004E3C  6EDE               	movwf	postinc2,c
 19770  004E3E  0E00               	movlw	0
 19771  004E40  6EDD               	movwf	postdec2,c
 19772  004E42                     i2l7892:
 19773                           
 19774                           ;xf/xf.c: 160:     }
 19775  004E42  4A0C               	infsnz	XF_decrementAndQueueTimers@i^0,f,c
 19776  004E44  2A0D               	incf	(XF_decrementAndQueueTimers@i+1)^0,f,c
 19777  004E46  BE0D               	btfsc	(XF_decrementAndQueueTimers@i+1)^0,7,c
 19778  004E48  D7C2               	goto	i2l7882
 19779  004E4A  500D               	movf	(XF_decrementAndQueueTimers@i+1)^0,w,c
 19780  004E4C  E105               	bnz	i2u567_40
 19781  004E4E  0E08               	movlw	8
 19782  004E50  5C0C               	subwf	XF_decrementAndQueueTimers@i^0,w,c
 19783  004E52  B0D8               	btfsc	status,0,c
 19784  004E54  0012               	return	
 19785  004E56  D7BB               	goto	i2l7882
 19786  004E58                     i2u567_40:
 19787  004E58  0012               	return		;funcret
 19788  004E5A                     __end_of_XF_decrementAndQueueTimers:
 19789                           	callstack 0
 19790                           
 19791 ;; *************** function i2_XF_unscheduleTimer *****************
 19792 ;; Defined at:
 19793 ;;		line 125 in file "xf/xf.c"
 19794 ;; Parameters:    Size  Location     Type
 19795 ;;  id              1    wreg     unsigned char 
 19796 ;;  inISR           1    1[COMRAM] _Bool 
 19797 ;; Auto vars:     Size  Location     Type
 19798 ;;  id              1    2[COMRAM] unsigned char 
 19799 ;; Return value:  Size  Location     Type
 19800 ;;                  1    wreg      void 
 19801 ;; Registers used:
 19802 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19803 ;; Tracked objects:
 19804 ;;		On entry : 0/0
 19805 ;;		On exit  : 0/0
 19806 ;;		Unchanged: 0/0
 19807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19808 ;;      Params:         1       0       0       0       0       0       0
 19809 ;;      Locals:         1       0       0       0       0       0       0
 19810 ;;      Temps:          0       0       0       0       0       0       0
 19811 ;;      Totals:         2       0       0       0       0       0       0
 19812 ;;Total ram usage:        2 bytes
 19813 ;; Hardware stack levels used: 1
 19814 ;; Hardware stack levels required when called: 1
 19815 ;; This function calls:
 19816 ;;		i2_ENTERCRITICAL
 19817 ;;		i2_LEAVECRITICAL
 19818 ;; This function is called by:
 19819 ;;		_XF_decrementAndQueueTimers
 19820 ;; This function uses a non-reentrant model
 19821 ;;
 19822                           
 19823                           	psect	text87
 19824  005728                     __ptext87:
 19825                           	callstack 0
 19826  005728                     i2_XF_unscheduleTimer:
 19827                           	callstack 14
 19828                           
 19829                           ;incstack = 0
 19830                           ;i2XF_unscheduleTimer@id stored from wreg
 19831  005728  6E03               	movwf	i2XF_unscheduleTimer@id^0,c
 19832                           
 19833                           ;xf/xf.c: 125: void XF_unscheduleTimer(TimerID id, _Bool inISR);xf/xf.c: 126: {;xf/xf.c:
      +                           127:     ENTERCRITICAL(inISR);
 19834  00572A  5002               	movf	i2XF_unscheduleTimer@inISR^0,w,c
 19835  00572C  EC06  F02D         	call	i2_ENTERCRITICAL
 19836                           
 19837                           ;xf/xf.c: 128:     theXF.timerList[id].tm = 0;
 19838  005730  5003               	movf	i2XF_unscheduleTimer@id^0,w,c
 19839  005732  0D03               	mullw	3
 19840  005734  50F3               	movf	243,w,c
 19841  005736  0F60               	addlw	low _theXF
 19842  005738  6ED9               	movwf	fsr2l,c
 19843  00573A  6ADA               	clrf	fsr2h,c
 19844  00573C  0E00               	movlw	0
 19845  00573E  6EDE               	movwf	postinc2,c
 19846  005740  0E00               	movlw	0
 19847  005742  6EDD               	movwf	postdec2,c
 19848                           
 19849                           ;xf/xf.c: 129:     theXF.timerList[id].ev = NULLEVENT;
 19850  005744  5003               	movf	i2XF_unscheduleTimer@id^0,w,c
 19851  005746  0D03               	mullw	3
 19852  005748  50F3               	movf	243,w,c
 19853  00574A  0F62               	addlw	low (_theXF+2)
 19854  00574C  6ED9               	movwf	fsr2l,c
 19855  00574E  6ADA               	clrf	fsr2h,c
 19856  005750  0E00               	movlw	0
 19857  005752  6EDF               	movwf	indf2,c
 19858                           
 19859                           ;xf/xf.c: 130:     LEAVECRITICAL(inISR);
 19860  005754  5002               	movf	i2XF_unscheduleTimer@inISR^0,w,c
 19861  005756  EC00  F02D         	call	i2_LEAVECRITICAL
 19862  00575A  0012               	return		;funcret
 19863  00575C                     __end_ofi2_XF_unscheduleTimer:
 19864                           	callstack 0
 19865                           
 19866 ;; *************** function i2_XF_pushEvent *****************
 19867 ;; Defined at:
 19868 ;;		line 49 in file "xf/xf.c"
 19869 ;; Parameters:    Size  Location     Type
 19870 ;;  ev              1    wreg     unsigned char 
 19871 ;;  inISR           1    6[COMRAM] _Bool 
 19872 ;; Auto vars:     Size  Location     Type
 19873 ;;  ev              1    7[COMRAM] unsigned char 
 19874 ;;  temp            1    8[COMRAM] unsigned char 
 19875 ;; Return value:  Size  Location     Type
 19876 ;;                  1    wreg      _Bool 
 19877 ;; Registers used:
 19878 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19879 ;; Tracked objects:
 19880 ;;		On entry : 0/0
 19881 ;;		On exit  : 0/0
 19882 ;;		Unchanged: 0/0
 19883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19884 ;;      Params:         1       0       0       0       0       0       0
 19885 ;;      Locals:         2       0       0       0       0       0       0
 19886 ;;      Temps:          0       0       0       0       0       0       0
 19887 ;;      Totals:         3       0       0       0       0       0       0
 19888 ;;Total ram usage:        3 bytes
 19889 ;; Hardware stack levels used: 1
 19890 ;; Hardware stack levels required when called: 1
 19891 ;; This function calls:
 19892 ;;		i2_ENTERCRITICAL
 19893 ;;		i2_LEAVECRITICAL
 19894 ;;		i2___awmod
 19895 ;; This function is called by:
 19896 ;;		_XF_decrementAndQueueTimers
 19897 ;;		_isr
 19898 ;; This function uses a non-reentrant model
 19899 ;;
 19900                           
 19901                           	psect	text88
 19902  00548A                     __ptext88:
 19903                           	callstack 0
 19904  00548A                     i2_XF_pushEvent:
 19905                           	callstack 15
 19906                           
 19907                           ;incstack = 0
 19908                           ;i2XF_pushEvent@ev stored from wreg
 19909  00548A  6E08               	movwf	i2XF_pushEvent@ev^0,c
 19910                           
 19911                           ;xf/xf.c: 49: _Bool XF_pushEvent(Event ev, _Bool inISR);xf/xf.c: 50: {;xf/xf.c: 51:   ui
      +                          nt8_t temp;;xf/xf.c: 52:     ENTERCRITICAL(inISR);
 19912  00548C  5007               	movf	i2XF_pushEvent@inISR^0,w,c
 19913  00548E  EC06  F02D         	call	i2_ENTERCRITICAL
 19914                           
 19915                           ;xf/xf.c: 54:     temp = (theXF.in+1) % (uint8_t)sizeof(theXF.eventQueue);
 19916  005492  0E01               	movlw	1
 19917  005494  0100               	movlb	0	; () banked
 19918  005496  2584               	addwf	(_theXF+36)& (0+255),w,b
 19919  005498  6E01               	movwf	i2___awmod@dividend^0,c
 19920  00549A  6A02               	clrf	(i2___awmod@dividend+1)^0,c
 19921  00549C  0E00               	movlw	0
 19922  00549E  2202               	addwfc	(i2___awmod@dividend+1)^0,f,c
 19923  0054A0  0E00               	movlw	0
 19924  0054A2  6E04               	movwf	(i2___awmod@divisor+1)^0,c
 19925  0054A4  0E0C               	movlw	12
 19926  0054A6  6E03               	movwf	i2___awmod@divisor^0,c
 19927  0054A8  EC32  F029         	call	i2___awmod	;wreg free
 19928  0054AC  5001               	movf	?i2___awmod^0,w,c
 19929  0054AE  6E09               	movwf	i2XF_pushEvent@temp^0,c
 19930                           
 19931                           ; BSR set to: 0
 19932                           ;xf/xf.c: 55:     if(temp == theXF.out)
 19933  0054B0  5009               	movf	i2XF_pushEvent@temp^0,w,c
 19934  0054B2  1985               	xorwf	(_theXF+37)& (0+255),w,b
 19935  0054B4  A4D8               	btfss	status,2,c
 19936  0054B6  D005               	goto	i2l7792
 19937                           
 19938                           ; BSR set to: 0
 19939                           ;xf/xf.c: 56:     {;xf/xf.c: 57:       LEAVECRITICAL(inISR);
 19940  0054B8  5007               	movf	i2XF_pushEvent@inISR^0,w,c
 19941  0054BA  EC00  F02D         	call	i2_LEAVECRITICAL
 19942                           
 19943                           ;xf/xf.c: 58:       return 0;
 19944  0054BE  0E00               	movlw	0
 19945  0054C0  0012               	return	
 19946  0054C2                     i2l7792:
 19947                           
 19948                           ; BSR set to: 0
 19949                           ;xf/xf.c: 60:     theXF.eventQueue[theXF.in] = ev;
 19950  0054C2  5184               	movf	(_theXF+36)& (0+255),w,b
 19951  0054C4  0F78               	addlw	low (_theXF+24)
 19952  0054C6  6ED9               	movwf	fsr2l,c
 19953  0054C8  6ADA               	clrf	fsr2h,c
 19954  0054CA  C008  FFDF         	movff	i2XF_pushEvent@ev,indf2
 19955                           
 19956                           ; BSR set to: 0
 19957                           ;xf/xf.c: 61:     theXF.in = temp;
 19958  0054CE  C009  F084         	movff	i2XF_pushEvent@temp,_theXF+36
 19959                           
 19960                           ; BSR set to: 0
 19961                           ;xf/xf.c: 62:     LEAVECRITICAL(inISR);
 19962  0054D2  5007               	movf	i2XF_pushEvent@inISR^0,w,c
 19963  0054D4  EC00  F02D         	call	i2_LEAVECRITICAL
 19964                           
 19965                           ;xf/xf.c: 63:     return 1;
 19966  0054D8  0E01               	movlw	1
 19967  0054DA  0012               	return		;funcret
 19968  0054DC                     __end_ofi2_XF_pushEvent:
 19969                           	callstack 0
 19970                           
 19971 ;; *************** function i2___awmod *****************
 19972 ;; Defined at:
 19973 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awmod.c"
 19974 ;; Parameters:    Size  Location     Type
 19975 ;;  dividend        2    0[COMRAM] int 
 19976 ;;  divisor         2    2[COMRAM] int 
 19977 ;; Auto vars:     Size  Location     Type
 19978 ;;  sign            1    5[COMRAM] unsigned char 
 19979 ;;  counter         1    4[COMRAM] unsigned char 
 19980 ;; Return value:  Size  Location     Type
 19981 ;;                  2    0[COMRAM] int 
 19982 ;; Registers used:
 19983 ;;		wreg, status,2, status,0
 19984 ;; Tracked objects:
 19985 ;;		On entry : 3F/0
 19986 ;;		On exit  : 3F/0
 19987 ;;		Unchanged: 3F/0
 19988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19989 ;;      Params:         4       0       0       0       0       0       0
 19990 ;;      Locals:         2       0       0       0       0       0       0
 19991 ;;      Temps:          0       0       0       0       0       0       0
 19992 ;;      Totals:         6       0       0       0       0       0       0
 19993 ;;Total ram usage:        6 bytes
 19994 ;; Hardware stack levels used: 1
 19995 ;; This function calls:
 19996 ;;		Nothing
 19997 ;; This function is called by:
 19998 ;;		i2_XF_pushEvent
 19999 ;; This function uses a non-reentrant model
 20000 ;;
 20001                           
 20002                           	psect	text89
 20003  005264                     __ptext89:
 20004                           	callstack 0
 20005  005264                     i2___awmod:
 20006                           	callstack 15
 20007                           
 20008                           ; BSR set to: 0
 20009                           
 20010                           ;incstack = 0
 20011  005264  0E00               	movlw	0
 20012  005266  6E06               	movwf	i2___awmod@sign^0,c
 20013                           
 20014                           ; BSR set to: 0
 20015  005268  AE02               	btfss	(i2___awmod@dividend+1)^0,7,c
 20016  00526A  D006               	goto	i2l7544
 20017                           
 20018                           ; BSR set to: 0
 20019  00526C  6C01               	negf	i2___awmod@dividend^0,c
 20020  00526E  1E02               	comf	(i2___awmod@dividend+1)^0,f,c
 20021  005270  B0D8               	btfsc	status,0,c
 20022  005272  2A02               	incf	(i2___awmod@dividend+1)^0,f,c
 20023                           
 20024                           ; BSR set to: 0
 20025  005274  0E01               	movlw	1
 20026  005276  6E06               	movwf	i2___awmod@sign^0,c
 20027  005278                     i2l7544:
 20028                           
 20029                           ; BSR set to: 0
 20030  005278  AE04               	btfss	(i2___awmod@divisor+1)^0,7,c
 20031  00527A  D004               	goto	i2l7548
 20032                           
 20033                           ; BSR set to: 0
 20034  00527C  6C03               	negf	i2___awmod@divisor^0,c
 20035  00527E  1E04               	comf	(i2___awmod@divisor+1)^0,f,c
 20036  005280  B0D8               	btfsc	status,0,c
 20037  005282  2A04               	incf	(i2___awmod@divisor+1)^0,f,c
 20038  005284                     i2l7548:
 20039                           
 20040                           ; BSR set to: 0
 20041  005284  5003               	movf	i2___awmod@divisor^0,w,c
 20042  005286  1004               	iorwf	(i2___awmod@divisor+1)^0,w,c
 20043  005288  B4D8               	btfsc	status,2,c
 20044  00528A  D018               	goto	i2l7564
 20045                           
 20046                           ; BSR set to: 0
 20047  00528C  0E01               	movlw	1
 20048  00528E  6E05               	movwf	i2___awmod@counter^0,c
 20049  005290  D004               	goto	i2l7554
 20050  005292                     i2l7552:
 20051                           
 20052                           ; BSR set to: 0
 20053  005292  90D8               	bcf	status,0,c
 20054  005294  3603               	rlcf	i2___awmod@divisor^0,f,c
 20055  005296  3604               	rlcf	(i2___awmod@divisor+1)^0,f,c
 20056  005298  2A05               	incf	i2___awmod@counter^0,f,c
 20057  00529A                     i2l7554:
 20058                           
 20059                           ; BSR set to: 0
 20060  00529A  AE04               	btfss	(i2___awmod@divisor+1)^0,7,c
 20061  00529C  D7FA               	goto	i2l7552
 20062  00529E                     i2u540_40:
 20063                           
 20064                           ; BSR set to: 0
 20065  00529E  5003               	movf	i2___awmod@divisor^0,w,c
 20066  0052A0  5C01               	subwf	i2___awmod@dividend^0,w,c
 20067  0052A2  5004               	movf	(i2___awmod@divisor+1)^0,w,c
 20068  0052A4  5802               	subwfb	(i2___awmod@dividend+1)^0,w,c
 20069  0052A6  A0D8               	btfss	status,0,c
 20070  0052A8  D004               	goto	i2l7560
 20071                           
 20072                           ; BSR set to: 0
 20073  0052AA  5003               	movf	i2___awmod@divisor^0,w,c
 20074  0052AC  5E01               	subwf	i2___awmod@dividend^0,f,c
 20075  0052AE  5004               	movf	(i2___awmod@divisor+1)^0,w,c
 20076  0052B0  5A02               	subwfb	(i2___awmod@dividend+1)^0,f,c
 20077  0052B2                     i2l7560:
 20078                           
 20079                           ; BSR set to: 0
 20080  0052B2  90D8               	bcf	status,0,c
 20081  0052B4  3204               	rrcf	(i2___awmod@divisor+1)^0,f,c
 20082  0052B6  3203               	rrcf	i2___awmod@divisor^0,f,c
 20083                           
 20084                           ; BSR set to: 0
 20085  0052B8  2E05               	decfsz	i2___awmod@counter^0,f,c
 20086  0052BA  D7F1               	goto	i2u540_40
 20087  0052BC                     i2l7564:
 20088                           
 20089                           ; BSR set to: 0
 20090  0052BC  5006               	movf	i2___awmod@sign^0,w,c
 20091  0052BE  B4D8               	btfsc	status,2,c
 20092  0052C0  D004               	goto	i2l7568
 20093                           
 20094                           ; BSR set to: 0
 20095  0052C2  6C01               	negf	i2___awmod@dividend^0,c
 20096  0052C4  1E02               	comf	(i2___awmod@dividend+1)^0,f,c
 20097  0052C6  B0D8               	btfsc	status,0,c
 20098  0052C8  2A02               	incf	(i2___awmod@dividend+1)^0,f,c
 20099  0052CA                     i2l7568:
 20100                           
 20101                           ; BSR set to: 0
 20102  0052CA  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 20103  0052CE  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 20104                           
 20105                           ; BSR set to: 0
 20106  0052D2  0012               	return		;funcret
 20107  0052D4                     __end_ofi2___awmod:
 20108                           	callstack 0
 20109                           
 20110 ;; *************** function i2_LEAVECRITICAL *****************
 20111 ;; Defined at:
 20112 ;;		line 186 in file "xf/xf.c"
 20113 ;; Parameters:    Size  Location     Type
 20114 ;;  inISR           1    wreg     _Bool 
 20115 ;; Auto vars:     Size  Location     Type
 20116 ;;  inISR           1    0[COMRAM] _Bool 
 20117 ;; Return value:  Size  Location     Type
 20118 ;;                  1    wreg      void 
 20119 ;; Registers used:
 20120 ;;		wreg, status,2
 20121 ;; Tracked objects:
 20122 ;;		On entry : 0/0
 20123 ;;		On exit  : 0/0
 20124 ;;		Unchanged: 0/0
 20125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20126 ;;      Params:         0       0       0       0       0       0       0
 20127 ;;      Locals:         1       0       0       0       0       0       0
 20128 ;;      Temps:          0       0       0       0       0       0       0
 20129 ;;      Totals:         1       0       0       0       0       0       0
 20130 ;;Total ram usage:        1 bytes
 20131 ;; Hardware stack levels used: 1
 20132 ;; This function calls:
 20133 ;;		Nothing
 20134 ;; This function is called by:
 20135 ;;		i2_XF_pushEvent
 20136 ;;		i2_XF_unscheduleTimer
 20137 ;; This function uses a non-reentrant model
 20138 ;;
 20139                           
 20140                           	psect	text90
 20141  005A00                     __ptext90:
 20142                           	callstack 0
 20143  005A00                     i2_LEAVECRITICAL:
 20144                           	callstack 15
 20145                           
 20146                           ; BSR set to: 0
 20147                           ;incstack = 0
 20148                           ;i2LEAVECRITICAL@inISR stored from wreg
 20149  005A00  6E01               	movwf	i2LEAVECRITICAL@inISR^0,c
 20150                           
 20151                           ;xf/xf.c: 186: static void LEAVECRITICAL(_Bool inISR);xf/xf.c: 187: {;xf/xf.c: 188:     
      +                          if (inISR == 0)
 20152  005A02  5001               	movf	i2LEAVECRITICAL@inISR^0,w,c
 20153  005A04  A4D8               	btfss	status,2,c
 20154  005A06  0012               	return	
 20155                           
 20156                           ;xf/xf.c: 189:     {;xf/xf.c: 190:       GIE = 1;
 20157  005A08  8EF2               	bsf	4082,7,c	;volatile
 20158  005A0A  0012               	return		;funcret
 20159  005A0C                     __end_ofi2_LEAVECRITICAL:
 20160                           	callstack 0
 20161                           
 20162 ;; *************** function i2_ENTERCRITICAL *****************
 20163 ;; Defined at:
 20164 ;;		line 172 in file "xf/xf.c"
 20165 ;; Parameters:    Size  Location     Type
 20166 ;;  inISR           1    wreg     _Bool 
 20167 ;; Auto vars:     Size  Location     Type
 20168 ;;  inISR           1    0[COMRAM] _Bool 
 20169 ;; Return value:  Size  Location     Type
 20170 ;;                  1    wreg      void 
 20171 ;; Registers used:
 20172 ;;		wreg, status,2
 20173 ;; Tracked objects:
 20174 ;;		On entry : 0/0
 20175 ;;		On exit  : 0/0
 20176 ;;		Unchanged: 0/0
 20177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20178 ;;      Params:         0       0       0       0       0       0       0
 20179 ;;      Locals:         1       0       0       0       0       0       0
 20180 ;;      Temps:          0       0       0       0       0       0       0
 20181 ;;      Totals:         1       0       0       0       0       0       0
 20182 ;;Total ram usage:        1 bytes
 20183 ;; Hardware stack levels used: 1
 20184 ;; This function calls:
 20185 ;;		Nothing
 20186 ;; This function is called by:
 20187 ;;		i2_XF_pushEvent
 20188 ;;		i2_XF_unscheduleTimer
 20189 ;; This function uses a non-reentrant model
 20190 ;;
 20191                           
 20192                           	psect	text91
 20193  005A0C                     __ptext91:
 20194                           	callstack 0
 20195  005A0C                     i2_ENTERCRITICAL:
 20196                           	callstack 15
 20197                           
 20198                           ;incstack = 0
 20199                           ;i2ENTERCRITICAL@inISR stored from wreg
 20200  005A0C  6E01               	movwf	i2ENTERCRITICAL@inISR^0,c
 20201                           
 20202                           ;xf/xf.c: 172: static void ENTERCRITICAL(_Bool inISR);xf/xf.c: 173: {;xf/xf.c: 174:     
      +                          if (inISR == 0)
 20203  005A0E  5001               	movf	i2ENTERCRITICAL@inISR^0,w,c
 20204  005A10  A4D8               	btfss	status,2,c
 20205  005A12  0012               	return	
 20206                           
 20207                           ;xf/xf.c: 175:     {;xf/xf.c: 176:       GIE = 0;
 20208  005A14  9EF2               	bcf	4082,7,c	;volatile
 20209  005A16  0012               	return		;funcret
 20210  005A18                     __end_ofi2_ENTERCRITICAL:
 20211                           	callstack 0
 20212                           
 20213                           	psect	rparam
 20214  0000                     
 20215                           	psect	temp
 20216  00004E                     btemp:
 20217                           	callstack 0
 20218  00004E                     	ds	1
 20219  0000                     int$flags	set	btemp
 20220  0000                     wtemp8	set	btemp+1
 20221  0000                     ttemp5	set	btemp+1
 20222  0000                     ttemp6	set	btemp+4
 20223  0000                     ttemp7	set	btemp+8
 20224                           
 20225                           	psect	idloc
 20226                           
 20227                           ;Config register IDLOC0 @ 0x200000
 20228                           ;	unspecified, using default values
 20229  200000                     	org	2097152
 20230  200000  FF                 	db	255
 20231                           
 20232                           ;Config register IDLOC1 @ 0x200001
 20233                           ;	unspecified, using default values
 20234  200001                     	org	2097153
 20235  200001  FF                 	db	255
 20236                           
 20237                           ;Config register IDLOC2 @ 0x200002
 20238                           ;	unspecified, using default values
 20239  200002                     	org	2097154
 20240  200002  FF                 	db	255
 20241                           
 20242                           ;Config register IDLOC3 @ 0x200003
 20243                           ;	unspecified, using default values
 20244  200003                     	org	2097155
 20245  200003  FF                 	db	255
 20246                           
 20247                           ;Config register IDLOC4 @ 0x200004
 20248                           ;	unspecified, using default values
 20249  200004                     	org	2097156
 20250  200004  FF                 	db	255
 20251                           
 20252                           ;Config register IDLOC5 @ 0x200005
 20253                           ;	unspecified, using default values
 20254  200005                     	org	2097157
 20255  200005  FF                 	db	255
 20256                           
 20257                           ;Config register IDLOC6 @ 0x200006
 20258                           ;	unspecified, using default values
 20259  200006                     	org	2097158
 20260  200006  FF                 	db	255
 20261                           
 20262                           ;Config register IDLOC7 @ 0x200007
 20263                           ;	unspecified, using default values
 20264  200007                     	org	2097159
 20265  200007  FF                 	db	255
 20266                           
 20267                           	psect	config
 20268                           
 20269                           ; Padding undefined space
 20270  300000                     	org	3145728
 20271  300000  FF                 	db	255
 20272                           
 20273                           ;Config register CONFIG1H @ 0x300001
 20274                           ;	Oscillator Selection bits
 20275                           ;	FOSC = INTIO67, Internal oscillator block
 20276                           ;	4X PLL Enable
 20277                           ;	PLLCFG = ON, Oscillator multiplied by 4
 20278                           ;	Primary clock enable bit
 20279                           ;	PRICLKEN = ON, Primary clock is always enabled
 20280                           ;	Fail-Safe Clock Monitor Enable bit
 20281                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
 20282                           ;	Internal/External Oscillator Switchover bit
 20283                           ;	IESO = OFF, Oscillator Switchover mode disabled
 20284  300001                     	org	3145729
 20285  300001  38                 	db	56
 20286                           
 20287                           ;Config register CONFIG2L @ 0x300002
 20288                           ;	Power-up Timer Enable bit
 20289                           ;	PWRTEN = OFF, Power up timer disabled
 20290                           ;	Brown-out Reset Enable bits
 20291                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
 20292                           ;	Brown Out Reset Voltage bits
 20293                           ;	BORV = 190, VBOR set to 1.90 V nominal
 20294  300002                     	org	3145730
 20295  300002  1F                 	db	31
 20296                           
 20297                           ;Config register CONFIG2H @ 0x300003
 20298                           ;	Watchdog Timer Enable bits
 20299                           ;	WDTEN = SWON, WDT is controlled by SWDTEN bit of the WDTCON register
 20300                           ;	Watchdog Timer Postscale Select bits
 20301                           ;	WDTPS = 32768, 1:32768
 20302  300003                     	org	3145731
 20303  300003  3E                 	db	62
 20304                           
 20305                           ; Padding undefined space
 20306  300004                     	org	3145732
 20307  300004  FF                 	db	255
 20308                           
 20309                           ;Config register CONFIG3H @ 0x300005
 20310                           ;	CCP2 MUX bit
 20311                           ;	CCP2MX = PORTC1, CCP2 input/output is multiplexed with RC1
 20312                           ;	PORTB A/D Enable bit
 20313                           ;	PBADEN = OFF, PORTB<5:0> pins are configured as digital I/O on Reset
 20314                           ;	P3A/CCP3 Mux bit
 20315                           ;	CCP3MX = PORTB5, P3A/CCP3 input/output is multiplexed with RB5
 20316                           ;	HFINTOSC Fast Start-up
 20317                           ;	HFOFST = ON, HFINTOSC output and ready status are not delayed by the oscillator stable
      +                           status
 20318                           ;	Timer3 Clock input mux bit
 20319                           ;	T3CMX = PORTC0, T3CKI is on RC0
 20320                           ;	ECCP2 B output mux bit
 20321                           ;	P2BMX = PORTB5, P2B is on RB5
 20322                           ;	MCLR Pin Enable bit
 20323                           ;	MCLRE = EXTMCLR, MCLR pin enabled, RE3 input pin disabled
 20324  300005                     	org	3145733
 20325  300005  BD                 	db	189
 20326                           
 20327                           ;Config register CONFIG4L @ 0x300006
 20328                           ;	Stack Full/Underflow Reset Enable bit
 20329                           ;	STVREN = ON, Stack full/underflow will cause Reset
 20330                           ;	Single-Supply ICSP Enable bit
 20331                           ;	LVP = ON, Single-Supply ICSP enabled if MCLRE is also 1
 20332                           ;	Extended Instruction Set Enable bit
 20333                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
 20334                           ;	Background Debug
 20335                           ;	DEBUG = 0x1, unprogrammed default
 20336  300006                     	org	3145734
 20337  300006  85                 	db	133
 20338                           
 20339                           ; Padding undefined space
 20340  300007                     	org	3145735
 20341  300007  FF                 	db	255
 20342                           
 20343                           ;Config register CONFIG5L @ 0x300008
 20344                           ;	Code Protection Block 0
 20345                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
 20346                           ;	Code Protection Block 1
 20347                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
 20348                           ;	Code Protection Block 2
 20349                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
 20350                           ;	Code Protection Block 3
 20351                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
 20352  300008                     	org	3145736
 20353  300008  0F                 	db	15
 20354                           
 20355                           ;Config register CONFIG5H @ 0x300009
 20356                           ;	Boot Block Code Protection bit
 20357                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
 20358                           ;	Data EEPROM Code Protection bit
 20359                           ;	CPD = OFF, Data EEPROM not code-protected
 20360  300009                     	org	3145737
 20361  300009  C0                 	db	192
 20362                           
 20363                           ;Config register CONFIG6L @ 0x30000A
 20364                           ;	Write Protection Block 0
 20365                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
 20366                           ;	Write Protection Block 1
 20367                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
 20368                           ;	Write Protection Block 2
 20369                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
 20370                           ;	Write Protection Block 3
 20371                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
 20372  30000A                     	org	3145738
 20373  30000A  0F                 	db	15
 20374                           
 20375                           ;Config register CONFIG6H @ 0x30000B
 20376                           ;	Configuration Register Write Protection bit
 20377                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
 20378                           ;	Boot Block Write Protection bit
 20379                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
 20380                           ;	Data EEPROM Write Protection bit
 20381                           ;	WRTD = OFF, Data EEPROM not write-protected
 20382  30000B                     	org	3145739
 20383  30000B  E0                 	db	224
 20384                           
 20385                           ;Config register CONFIG7L @ 0x30000C
 20386                           ;	Table Read Protection Block 0
 20387                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
 20388                           ;	Table Read Protection Block 1
 20389                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
 20390                           ;	Table Read Protection Block 2
 20391                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
 20392                           ;	Table Read Protection Block 3
 20393                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
 20394  30000C                     	org	3145740
 20395  30000C  0F                 	db	15
 20396                           
 20397                           ;Config register CONFIG7H @ 0x30000D
 20398                           ;	Boot Block Table Read Protection bit
 20399                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
 20400  30000D                     	org	3145741
 20401  30000D  40                 	db	64
 20402                           tosu	equ	0xFFF
 20403                           tosh	equ	0xFFE
 20404                           tosl	equ	0xFFD
 20405                           stkptr	equ	0xFFC
 20406                           pclatu	equ	0xFFB
 20407                           pclath	equ	0xFFA
 20408                           pcl	equ	0xFF9
 20409                           tblptru	equ	0xFF8
 20410                           tblptrh	equ	0xFF7
 20411                           tblptrl	equ	0xFF6
 20412                           tablat	equ	0xFF5
 20413                           prodh	equ	0xFF4
 20414                           prodl	equ	0xFF3
 20415                           indf0	equ	0xFEF
 20416                           postinc0	equ	0xFEE
 20417                           postdec0	equ	0xFED
 20418                           preinc0	equ	0xFEC
 20419                           plusw0	equ	0xFEB
 20420                           fsr0h	equ	0xFEA
 20421                           fsr0l	equ	0xFE9
 20422                           wreg	equ	0xFE8
 20423                           indf1	equ	0xFE7
 20424                           postinc1	equ	0xFE6
 20425                           postdec1	equ	0xFE5
 20426                           preinc1	equ	0xFE4
 20427                           plusw1	equ	0xFE3
 20428                           fsr1h	equ	0xFE2
 20429                           fsr1l	equ	0xFE1
 20430                           bsr	equ	0xFE0
 20431                           indf2	equ	0xFDF
 20432                           postinc2	equ	0xFDE
 20433                           postdec2	equ	0xFDD
 20434                           preinc2	equ	0xFDC
 20435                           plusw2	equ	0xFDB
 20436                           fsr2h	equ	0xFDA
 20437                           fsr2l	equ	0xFD9
 20438                           status	equ	0xFD8

Data Sizes:
    Strings     124
    Constant    1867
    Data        0
    BSS         322
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     69      77
    BANK0           160     71     145
    BANK1           256      0     240
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    g1.font.bitmap	PTR const unsigned char  size(2) Largest target is 0
		 -> arialNarrow_12ptBitmaps(CODE[1575]), 

    g1.font.descriptor	PTR const struct . size(2) Largest target is 0
		 -> arialNarrow_12ptDescriptors(CODE[285]), 

    g1.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), 

    g1.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), 

    g1.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), 

    g1.font	PTR struct . size(2) Largest target is 0
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    g1.text	PTR const unsigned char  size(2) Largest target is 0
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    g1.fpPress	PTR FTN()void  size(2) Largest target is 0
		 -> Absolute function(), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 252
		 -> g1.str(BANK1[2]), dbuf(BANK0[32]), STR_15(CODE[13]), STR_14(CODE[13]), 
		 -> STR_13(CODE[6]), STR_12(CODE[11]), STR_11(CODE[11]), STR_10(CODE[8]), 
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), g1(BANK1[240]), STR_1(CODE[10]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 252
		 -> g1.str(BANK1[2]), dbuf(BANK0[32]), STR_15(CODE[13]), STR_14(CODE[13]), 
		 -> STR_13(CODE[6]), STR_12(CODE[11]), STR_11(CODE[11]), STR_10(CODE[8]), 
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), g1(BANK1[240]), STR_1(CODE[10]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_3(CODE[3]), STR_2(CODE[3]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 3
		 -> STR_3(CODE[3]), STR_2(CODE[3]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_3(CODE[3]), STR_2(CODE[3]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S5431_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    levelController@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    levelController@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    levelController@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    levelController@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    levelController@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    levelController@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    levelController@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    levelController@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    levelController@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    levelController@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    levelController@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    levelController@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    levelController@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    backlightController@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    backlightController@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    backlightController@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    backlightController@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    backlightController@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    backlightController@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    backlightController@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    backlightController@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    backlightController@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    backlightController@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    backlightController@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    backlightController@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    backlightController@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    checkCollision@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    checkCollision@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    checkCollision@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    checkCollision@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    checkCollision@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    checkCollision@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    checkCollision@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    checkCollision@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    checkCollision@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    checkCollision@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    checkCollision@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    checkCollision@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    checkCollision@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    mooveBall@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    mooveBall@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    mooveBall@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    mooveBall@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    mooveBall@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    mooveBall@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    mooveBall@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    mooveBall@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    mooveBall@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    mooveBall@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    mooveBall@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    mooveBall@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    mooveBall@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    moovePaddle2@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle2@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle2@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle2@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle2@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle2@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle2@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle2@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle2@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle2@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle2@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle2@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle2@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    moovePaddle1@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle1@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle1@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle1@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle1@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle1@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle1@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle1@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle1@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle1@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle1@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle1@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle1@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    gameControllerController@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerController@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerController@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerController@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerController@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerController@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerController@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerController@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerController@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerController@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerController@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerController@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerController@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    gameControllerSM@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerSM@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerSM@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerSM@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerSM@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerSM@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerSM@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerSM@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerSM@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerSM@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerSM@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerSM@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerSM@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    gameControllerInit@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    displayController@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    displayController@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    displayController@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    displayController@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    displayController@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    displayController@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    displayController@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    displayController@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    displayController@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    displayController@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    displayController@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    displayController@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    displayController@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    displaySM@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    displayInit@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    touchScreenController@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    touchScreenSM@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    sleepInit@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    LCD_Bitmap@colorTablePtr	PTR unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    LCD_Bitmap@bmpPtr	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    LCD_Bitmap@strPtr	PTR struct . size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    RGB2LCD@colorTableEntry	PTR unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    LCD_DrawText@font.bitmap	PTR const unsigned char  size(2) Largest target is 1575
		 -> arialNarrow_12ptBitmaps(CODE[1575]), 

    LCD_DrawText@font.descriptor	PTR const struct . size(2) Largest target is 285
		 -> arialNarrow_12ptDescriptors(CODE[285]), 

    LCD_DrawText@font	PTR const struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    LCD_DrawText@msg	PTR const unsigned char  size(2) Largest target is 252
		 -> g1.str(BANK1[2]), STR_15(CODE[13]), STR_14(CODE[13]), STR_13(CODE[6]), 
		 -> STR_12(CODE[11]), STR_11(CODE[11]), STR_10(CODE[8]), STR_9(CODE[9]), 
		 -> STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), STR_5(CODE[9]), 
		 -> STR_4(CODE[9]), g1(BANK1[240]), STR_1(CODE[10]), 

    LCD_InSlider@slider.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_InSlider@slider	PTR struct . size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    LCD_InButton@button.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_InButton@button.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_InButton@button.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_InButton@button.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    LCD_InButton@button.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    LCD_InButton@button	PTR struct . size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    LCD_ButtonDraw@button.font.bitmap	PTR const unsigned char  size(2) Largest target is 1575
		 -> arialNarrow_12ptBitmaps(CODE[1575]), 

    LCD_ButtonDraw@button.font.descriptor	PTR const struct . size(2) Largest target is 285
		 -> arialNarrow_12ptDescriptors(CODE[285]), 

    LCD_ButtonDraw@bmpPtr	PTR struct . size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    LCD_ButtonDraw@button.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonDraw@button.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonDraw@button.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonDraw@button.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    LCD_ButtonDraw@button.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    LCD_ButtonDraw@button	PTR struct . size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    LCD_ButtonUpdate@button.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonUpdate@button.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonUpdate@button.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonUpdate@button.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    LCD_ButtonUpdate@button.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    LCD_ButtonUpdate@button	PTR struct . size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    LCD_ButtonCreate@fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonCreate@fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonCreate@fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonCreate@button.font.bitmap	PTR const unsigned char  size(2) Largest target is 1575
		 -> arialNarrow_12ptBitmaps(CODE[1575]), 

    LCD_ButtonCreate@button.font.descriptor	PTR const struct . size(2) Largest target is 285
		 -> arialNarrow_12ptDescriptors(CODE[285]), 

    LCD_ButtonCreate@font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    LCD_ButtonCreate@textOrBmp	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    LCD_ButtonCreate@button.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonCreate@button.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonCreate@button.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonCreate@button.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    LCD_ButtonCreate@button.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    LCD_ButtonCreate@button	PTR struct . size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    LCD_SliderDraw@slider.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_SliderDraw@slider	PTR struct . size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    LCD_SliderUpdate@slider.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_SliderUpdate@slider	PTR struct . size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    LCD_SliderCreate@fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_SliderCreate@slider.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_SliderCreate@slider	PTR struct . size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Menu_endGame@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_endGame@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_endGame@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_endGame@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_endGame@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_endGame@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_endGame@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_endGame@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_endGame@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_endGame@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_endGame@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_endGame@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_endGame@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Menu_inGameDraw@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_inGameDraw@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_inGameDraw@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_inGameDraw@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_inGameDraw@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_inGameDraw@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_inGameDraw@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_inGameDraw@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_inGameDraw@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_inGameDraw@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_inGameDraw@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_inGameDraw@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_inGameDraw@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Menu_parametersDraw@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_parametersDraw@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_parametersDraw@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_parametersDraw@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_parametersDraw@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_parametersDraw@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_parametersDraw@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_parametersDraw@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_parametersDraw@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_parametersDraw@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_parametersDraw@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_parametersDraw@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_parametersDraw@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Menu_welcomeDraw@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_welcomeDraw@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_welcomeDraw@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_welcomeDraw@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_welcomeDraw@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_welcomeDraw@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_welcomeDraw@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_welcomeDraw@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_welcomeDraw@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_welcomeDraw@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_welcomeDraw@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_welcomeDraw@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_welcomeDraw@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    GameParameters_setY@s.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setY@s.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setY@s.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setY@s.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setY@s.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setY@s.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setY@s.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setY@s.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setY@s.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setY@s.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setY@s.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setY@s.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setY@s	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    GameParameters_setX@s.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setX@s.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setX@s.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setX@s.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setX@s.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setX@s.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setX@s.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setX@s.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setX@s.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setX@s.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setX@s.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setX@s.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setX@s	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    GameParameters_resetPos@s.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_resetPos@s.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_resetPos@s.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_resetPos@s.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_resetPos@s.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_resetPos@s.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_resetPos@s.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_resetPos@s.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_resetPos@s.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_resetPos@s.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_resetPos@s.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_resetPos@s.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_resetPos@s	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    GameParameters_setLevel@s.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setLevel@s.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setLevel@s.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setLevel@s.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setLevel@s.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setLevel@s.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setLevel@s.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setLevel@s.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setLevel@s.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setLevel@s.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setLevel@s.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setLevel@s.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setLevel@s	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    GameParameters_setBackLight@s.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setBackLight@s.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setBackLight@s.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setBackLight@s.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setBackLight@s.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setBackLight@s.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setBackLight@s.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setBackLight@s.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setBackLight@s.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setBackLight@s.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setBackLight@s.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setBackLight@s.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setBackLight@s	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    GameParameters_init@s.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_init@s.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_init@s.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_init@s.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_init@s.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_init@s.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_init@s.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_init@s.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_init@s.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_init@s.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_init@s.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_init@s.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_init@s	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Score_draw@s	PTR struct Score size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Score_init@s	PTR struct Score size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    g1.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    S135$fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    g1.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    g1.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    g1.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    g1.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    g1.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    g1.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    g1.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    g1.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    g1.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    S108$fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    S108$fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    S108$fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    S108$font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    g1.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    S108$text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    g1.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    S99$bitmap	PTR const unsigned char  size(2) Largest target is 1575
		 -> arialNarrow_12ptBitmaps(CODE[1575]), 

    arialNarrow_12ptFontInfo.bitmap	PTR const unsigned char  size(2) Largest target is 1575
		 -> arialNarrow_12ptBitmaps(CODE[1575]), 

    S99$descriptor	PTR const struct . size(2) Largest target is 285
		 -> arialNarrow_12ptDescriptors(CODE[285]), 

    arialNarrow_12ptFontInfo.descriptor	PTR const struct . size(2) Largest target is 285
		 -> arialNarrow_12ptDescriptors(CODE[285]), 

    Paddle_draw@p	PTR struct Paddle size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Paddle_addX@p	PTR struct Paddle size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Paddle_init@p	PTR struct Paddle size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Ball_draw@b	PTR struct Ball size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Ball_Update@b	PTR struct Ball size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Ball_init@b	PTR struct Ball size(2) Largest target is 252
		 -> g1(BANK1[240]), 


Critical Paths under _main in COMRAM

    _touchScreenInit->_XF_scheduleTimer
    _gameControllerInit->_gameControllerController
    _LCD_Init->_LCD_Lowlevel_Init
    _Factory_exec->_touchScreenSM
    _touchScreenSM->_touchScreenController
    _touchScreenController->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _XF_unscheduleTimer->_ENTERCRITICAL
    _XF_unscheduleTimer->_LEAVECRITICAL
    _sleepSM->_sleepController
    _gameControllerSM->_gameControllerController
    _gameControllerController->_LCD_SliderUpdate
    _moovePaddle2->_Paddle_addX
    _moovePaddle1->_Paddle_addX
    _mooveBall->_checkCollision
    _checkCollision->_XF_pushEvent
    _XF_pushEvent->___awmod
    _levelController->_GameParameters_setLevel
    _backlightController->_GameParameters_setBackLight
    _XF_scheduleTimer->___wmul
    _GameParameters_init->_LCD_ButtonCreate
    _displayController->_Menu_endGame
    _displayController->_Menu_welcomeDraw
    _Menu_welcomeDraw->_LCD_ButtonDraw
    _Menu_parametersDraw->_LCD_SliderDraw
    _LCD_SliderDraw->_LCD_SliderUpdate
    _LCD_SliderUpdate->___lwdiv
    _Menu_endGame->_LCD_ButtonDraw
    _Menu_inGameDraw->_LCD_ButtonDraw
    _Score_draw->_LCD_DrawText
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->___aodiv
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _Paddle_draw->_LCD_DrawRect
    _LCD_ButtonDraw->_LCD_DrawText
    _LCD_DrawText->___wmul
    _LCD_ButtonUpdate->_LCD_DrawRect
    _LCD_Bitmap->___lwdiv
    ___wmul->___awdiv
    ___lwdiv->___wmul
    _Ball_draw->_LCD_DrawRect
    _XF_popEvent->___awmod

Critical Paths under _isr in COMRAM

    _isr->_XF_decrementAndQueueTimers
    _XF_decrementAndQueueTimers->i2_XF_pushEvent
    i2_XF_unscheduleTimer->i2_ENTERCRITICAL
    i2_XF_unscheduleTimer->i2_LEAVECRITICAL
    i2_XF_pushEvent->i2___awmod

Critical Paths under _main in BANK0

    _main->_Factory_exec
    _main->_Factory_init
    _Factory_init->_sleepInit
    _sleepInit->_displayInit
    _displayInit->_displayController
    _Factory_exec->_displaySM
    _touchScreenSM->_touchScreenController
    _displaySM->_displayController
    _displayController->_Menu_endGame
    _displayController->_Menu_parametersDraw
    _Menu_welcomeDraw->_LCD_ButtonDraw
    _Menu_parametersDraw->_LCD_ButtonDraw
    _Menu_endGame->_LCD_ButtonDraw
    _Menu_inGameDraw->_LCD_ButtonDraw
    _Score_draw->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _LCD_ButtonDraw->_LCD_Bitmap

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  689721
                       _Factory_exec
                       _Factory_init
 ---------------------------------------------------------------------------------
 (1) _Factory_init                                         2     2      0  307082
                                             69 BANK0      2     2      0
                _GameParameters_init
                       _LCD_DrawText
                           _LCD_Fill
                           _LCD_Init
                            _XF_init
                          _sleepInit
 ---------------------------------------------------------------------------------
 (2) _sleepInit                                            2     0      2  284557
                                             67 BANK0      2     0      2
                        _displayInit
                 _gameControllerInit
                    _sleepController
                    _touchScreenInit
 ---------------------------------------------------------------------------------
 (3) _touchScreenInit                                      0     0      0    1618
                   _XF_scheduleTimer
                        _configTouch
 ---------------------------------------------------------------------------------
 (3) _gameControllerInit                                   2     0      2   54078
                                             59 COMRAM     2     0      2
           _gameControllerController
 ---------------------------------------------------------------------------------
 (3) _displayInit                                          2     0      2  228709
                                             65 BANK0      2     0      2
                  _displayController
 ---------------------------------------------------------------------------------
 (2) _XF_init                                              2     2      0     158
                                             17 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             2     2      0      90
                                             22 COMRAM     2     2      0
                  _LCD_Lowlevel_Init
 ---------------------------------------------------------------------------------
 (3) _LCD_Lowlevel_Init                                    5     5      0      60
                                             17 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (1) _Factory_exec                                         1     1      0  382639
                                             70 BANK0      1     1      0
                        _XF_popEvent
                          _displaySM
                   _gameControllerSM
                            _sleepSM
                      _touchScreenSM
 ---------------------------------------------------------------------------------
 (2) _touchScreenSM                                        5     3      2    5213
                                             68 COMRAM     1     1      0
                                             12 BANK0      4     2      2
              _touchScreenController
 ---------------------------------------------------------------------------------
 (3) _touchScreenController                               14    12      2    4937
                                             66 COMRAM     2     0      2
                                              0 BANK0     12    12      0
                _GameParameters_setX
                _GameParameters_setY
                   _XF_scheduleTimer
                 _XF_unscheduleTimer
                            ___fldiv
                            ___fltol
                           ___xxtofl
                      _configMeasure
                        _configTouch
 ---------------------------------------------------------------------------------
 (4) _configMeasure                                        1     1      0      44
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) ___xxtofl                                            14    10      4     398
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             10     6      4     305
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fldiv                                             25    17      8    1399
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) _XF_unscheduleTimer                                   2     1      1     258
                                             18 COMRAM     2     1      1
                      _ENTERCRITICAL
                      _LEAVECRITICAL
 ---------------------------------------------------------------------------------
 (4) _GameParameters_setY                                  4     0      4     196
                                             17 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (4) _GameParameters_setX                                  4     0      4     196
                                             17 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _sleepSM                                              3     3      0      22
                                             19 COMRAM     3     3      0
                    _sleepController
 ---------------------------------------------------------------------------------
 (3) _sleepController                                      2     2      0       0
                                             17 COMRAM     2     2      0
                     _configPinSleep
 ---------------------------------------------------------------------------------
 (4) _configPinSleep                                       0     0      0       0
                        _configTouch
 ---------------------------------------------------------------------------------
 (4) _configTouch                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _gameControllerSM                                     5     3      2   58781
                                             59 COMRAM     5     3      2
                   _XF_scheduleTimer
                             ___wmul
           _gameControllerController
 ---------------------------------------------------------------------------------
 (4) _gameControllerController                             5     2      3   53980
                                             54 COMRAM     5     2      3
                _GameParameters_init
            _GameParameters_resetPos
                       _LCD_InButton
                       _LCD_InSlider
                   _LCD_SliderUpdate
                       _XF_pushEvent
                   _XF_scheduleTimer
                             ___wmul
                _backlightController
                    _levelController
                          _mooveBall
                       _moovePaddle1
                       _moovePaddle2
 ---------------------------------------------------------------------------------
 (5) _moovePaddle2                                         8     6      2    3603
                                             27 COMRAM     8     6      2
                        _Paddle_addX
                       _XF_pushEvent
 ---------------------------------------------------------------------------------
 (5) _moovePaddle1                                         4     2      2    4505
                                             27 COMRAM     4     2      2
            _GameParameters_resetPos
                        _Paddle_addX
                       _XF_pushEvent
 ---------------------------------------------------------------------------------
 (6) _Paddle_addX                                         10     4      6    1176
                                             17 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (6) _GameParameters_resetPos                              2     0      2     880
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _mooveBall                                            2     0      2    6602
                                             36 COMRAM     2     0      2
                        _Ball_Update
                       _XF_pushEvent
                     _checkCollision
 ---------------------------------------------------------------------------------
 (6) _checkCollision                                      30    28      2    4055
                                             26 COMRAM    10     8      2
                       _XF_pushEvent
 ---------------------------------------------------------------------------------
 (6) _XF_pushEvent                                         3     2      1    2219
                                             23 COMRAM     3     2      1
                      _ENTERCRITICAL
                      _LEAVECRITICAL
                            ___awmod
 ---------------------------------------------------------------------------------
 (6) _Ball_Update                                          6     4      2     208
                                             17 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _levelController                                      4     2      2     774
                                             21 COMRAM     4     2      2
            _GameParameters_setLevel
 ---------------------------------------------------------------------------------
 (6) _GameParameters_setLevel                              4     0      4     500
                                             17 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (5) _backlightController                                  4     2      2    2824
                                             23 COMRAM     4     2      2
        _GameParameters_setBackLight
 ---------------------------------------------------------------------------------
 (6) _GameParameters_setBackLight                          6     2      4    1912
                                             17 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _XF_scheduleTimer                                     5     1      4    1618
                                             31 COMRAM     5     1      4
                      _ENTERCRITICAL
                      _LEAVECRITICAL
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _LCD_InSlider                                        10     4      6     676
                                             17 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (5) _LCD_InButton                                        10     4      6    2044
                                             17 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (5) _GameParameters_init                                  2     0      2    9968
                                             42 COMRAM     2     0      2
                          _Ball_init
                   _LCD_ButtonCreate
                   _LCD_SliderCreate
                        _Paddle_init
                         _Score_init
 ---------------------------------------------------------------------------------
 (6) _Score_init                                           2     0      2     120
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (6) _Paddle_init                                          4     0      4     502
                                             17 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (6) _LCD_SliderCreate                                    22     0     22    2156
                                             17 COMRAM    22     0     22
 ---------------------------------------------------------------------------------
 (6) _LCD_ButtonCreate                                    25     0     25    6478
                                             17 COMRAM    25     0     25
 ---------------------------------------------------------------------------------
 (6) _Ball_init                                            2     0      2     186
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _displaySM                                            5     3      2  317709
                                             65 BANK0      5     3      2
                    _Menu_inGameDraw
                  _displayController
 ---------------------------------------------------------------------------------
 (4) _displayController                                    5     2      3  228588
                                             60 BANK0      5     2      3
                          _Ball_draw
                       _LCD_DrawRect
                       _Menu_endGame
                _Menu_parametersDraw
                   _Menu_welcomeDraw
                        _Paddle_draw
                         _Score_draw
 ---------------------------------------------------------------------------------
 (5) _Menu_welcomeDraw                                     2     0      2   51892
                                             67 COMRAM     2     0      2
                     _LCD_ButtonDraw
                       _LCD_DrawText
                           _LCD_Fill
 ---------------------------------------------------------------------------------
 (5) _Menu_parametersDraw                                  2     0      2   74882
                                             58 BANK0      2     0      2
                     _LCD_ButtonDraw
                       _LCD_DrawText
                           _LCD_Fill
                     _LCD_SliderDraw
 ---------------------------------------------------------------------------------
 (6) _LCD_SliderDraw                                      14    12      2   22897
                                             54 COMRAM    14    12      2
                       _LCD_DrawRect
                   _LCD_SliderUpdate
 ---------------------------------------------------------------------------------
 (5) _LCD_SliderUpdate                                    16    14      2   13608
                                             38 COMRAM    16    14      2
                       _LCD_DrawRect
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _Menu_endGame                                         4     2      2   51861
                                             67 COMRAM     2     0      2
                                             58 BANK0      2     2      0
                     _LCD_ButtonDraw
                       _LCD_DrawText
                           _LCD_Fill
 ---------------------------------------------------------------------------------
 (3) _Menu_inGameDraw                                      2     0      2   88349
                                             58 BANK0      2     0      2
                          _Ball_draw
                     _LCD_ButtonDraw
                       _LCD_DrawRect
                           _LCD_Fill
                        _Paddle_draw
                         _Score_draw
 ---------------------------------------------------------------------------------
 (5) _Score_draw                                           2     0      2   20889
                                             43 BANK0      2     0      2
                       _LCD_DrawText
                            _sprintf
 ---------------------------------------------------------------------------------
 (6) _sprintf                                             15     9      6    8777
                                             30 BANK0     13     7      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (7) _vfprintf                                             6     2      4    8111
                                             63 COMRAM     2     2      0
                                             26 BANK0      4     0      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (8) _vfpfcnvrt                                           37    34      3    7638
                                             60 COMRAM     3     0      3
                                             18 BANK0      8     8      0
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (9) _dtoa                                                35    26      9    5863
                                             43 COMRAM    17     8      9
                                              0 BANK0     18    18      0
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (10) _pad                                                 9     5      4    3597
                                             30 COMRAM     9     5      4
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (11) _fputs                                               5     3      2    1537
                                             25 COMRAM     5     3      2
                              _fputc
 ---------------------------------------------------------------------------------
 (9) _fputc                                                8     5      3    1037
                                             17 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (10) _putch                                               1     1      0       0
 ---------------------------------------------------------------------------------
 (10) _abs                                                 4     2      2     183
                                             35 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (10) ___aomod                                            18     2     16     613
                                             17 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (10) ___aodiv                                            26    10     16     625
                                             17 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (5) _Paddle_draw                                          6     4      2    9349
                                             36 COMRAM     6     4      2
                       _LCD_DrawRect
 ---------------------------------------------------------------------------------
 (6) _LCD_Fill                                             8     6      2     563
                                             17 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (6) _LCD_ButtonDraw                                      32    30      2   39369
                                             65 COMRAM     2     0      2
                                             28 BANK0     30    30      0
                         _LCD_Bitmap
                   _LCD_ButtonUpdate
                       _LCD_DrawRect
                       _LCD_DrawText
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _LCD_DrawText                                        34    21     13   11746
                                             31 COMRAM    34    21     13
                            ___awdiv
                             ___wmul
                             _strlen
 ---------------------------------------------------------------------------------
 (11) _strlen                                              4     2      2     400
                                             17 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     452
                                             17 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (7) _LCD_ButtonUpdate                                    18    16      2    9996
                                             36 COMRAM    18    16      2
                       _LCD_DrawRect
                           _LCD_Read
 ---------------------------------------------------------------------------------
 (8) _LCD_Read                                            10     6      4     405
                                             17 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (7) _LCD_Bitmap                                          38    32      6    6156
                                             38 COMRAM    10     4      6
                                              0 BANK0     28    28      0
                            _RGB2LCD
                            ___lwdiv
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    2799
                                             25 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) ___lwmod                                              5     1      4     311
                                             17 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     706
                                             31 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (8) _RGB2LCD                                             14    12      2     386
                                             17 COMRAM    14    12      2
 ---------------------------------------------------------------------------------
 (5) _Ball_draw                                           10     8      2    9175
                                             36 COMRAM    10     8      2
                       _LCD_DrawRect
 ---------------------------------------------------------------------------------
 (6) _LCD_DrawRect                                        19     8     11    8759
                                             17 COMRAM    19     8     11
 ---------------------------------------------------------------------------------
 (2) _XF_popEvent                                          2     2      0     756
                                             23 COMRAM     2     2      0
                      _ENTERCRITICAL
                      _LEAVECRITICAL
                            ___awmod
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4     600
                                             17 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _LEAVECRITICAL                                        1     1      0      22
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _ENTERCRITICAL                                        1     1      0      22
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (14) _isr                                                 4     4      0    1542
                                             13 COMRAM     4     4      0
         _XF_decrementAndQueueTimers
                     i2_XF_pushEvent
 ---------------------------------------------------------------------------------
 (15) _XF_decrementAndQueueTimers                          4     4      0     939
                                              9 COMRAM     4     4      0
                     i2_XF_pushEvent
               i2_XF_unscheduleTimer
 ---------------------------------------------------------------------------------
 (16) i2_XF_unscheduleTimer                                2     1      1     158
                                              1 COMRAM     2     1      1
                    i2_ENTERCRITICAL
                    i2_LEAVECRITICAL
 ---------------------------------------------------------------------------------
 (15) i2_XF_pushEvent                                      3     2      1     603
                                              6 COMRAM     3     2      1
                    i2_ENTERCRITICAL
                    i2_LEAVECRITICAL
                          i2___awmod
 ---------------------------------------------------------------------------------
 (16) i2___awmod                                           6     2      4     348
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (16) i2_LEAVECRITICAL                                     1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (16) i2_ENTERCRITICAL                                     1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Factory_exec
     _XF_popEvent
       _ENTERCRITICAL
       _LEAVECRITICAL
       ___awmod
     _displaySM
       _Menu_inGameDraw
         _Ball_draw
           _LCD_DrawRect
         _LCD_ButtonDraw
           _LCD_Bitmap
             _RGB2LCD
             ___lwdiv
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___lwmod
             ___wmul
           _LCD_ButtonUpdate
             _LCD_DrawRect
             _LCD_Read
           _LCD_DrawRect
           _LCD_DrawText
             ___awdiv
             ___wmul
             _strlen
           _strlen
         _LCD_DrawRect
         _LCD_Fill
         _Paddle_draw
           _LCD_DrawRect
         _Score_draw
           _LCD_DrawText
           _sprintf
             _vfprintf
               _vfpfcnvrt
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _putch
                     _fputs
                       _fputc
                     _strlen
                 _fputc
       _displayController
         _Ball_draw
         _LCD_DrawRect
         _Menu_endGame
           _LCD_ButtonDraw
           _LCD_DrawText
           _LCD_Fill
         _Menu_parametersDraw
           _LCD_ButtonDraw
           _LCD_DrawText
           _LCD_Fill
           _LCD_SliderDraw
             _LCD_DrawRect
             _LCD_SliderUpdate
               _LCD_DrawRect
               ___lwdiv
               ___wmul
         _Menu_welcomeDraw
           _LCD_ButtonDraw
           _LCD_DrawText
           _LCD_Fill
         _Paddle_draw
         _Score_draw
     _gameControllerSM
       _XF_scheduleTimer
         _ENTERCRITICAL
         _LEAVECRITICAL
         ___wmul (ARG)
       ___wmul
       _gameControllerController
         _GameParameters_init
           _Ball_init
           _LCD_ButtonCreate
           _LCD_SliderCreate
           _Paddle_init
           _Score_init
         _GameParameters_resetPos
         _LCD_InButton
         _LCD_InSlider
         _LCD_SliderUpdate
         _XF_pushEvent
           _ENTERCRITICAL
           _LEAVECRITICAL
           ___awmod
         _XF_scheduleTimer
         ___wmul
         _backlightController
           _GameParameters_setBackLight
         _levelController
           _GameParameters_setLevel
         _mooveBall
           _Ball_Update
           _XF_pushEvent
           _checkCollision
             _XF_pushEvent
         _moovePaddle1
           _GameParameters_resetPos
           _Paddle_addX
           _XF_pushEvent
         _moovePaddle2
           _Paddle_addX
           _XF_pushEvent
     _sleepSM
       _sleepController
         _configPinSleep
           _configTouch
     _touchScreenSM
       _touchScreenController
         _GameParameters_setX
         _GameParameters_setY
         _XF_scheduleTimer
         _XF_unscheduleTimer
           _ENTERCRITICAL
           _LEAVECRITICAL
         ___fldiv
           ___xxtofl (ARG)
         ___fltol
           ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _configMeasure
         _configTouch
   _Factory_init
     _GameParameters_init
     _LCD_DrawText
     _LCD_Fill
     _LCD_Init
       _LCD_Lowlevel_Init
     _XF_init
     _sleepInit
       _displayInit
         _displayController
       _gameControllerInit
         _gameControllerController
       _sleepController
       _touchScreenInit
         _XF_scheduleTimer
         _configTouch

 _isr (ROOT)
   _XF_decrementAndQueueTimers
     i2_XF_pushEvent
       i2_ENTERCRITICAL
       i2_LEAVECRITICAL
       i2___awmod
     i2_XF_unscheduleTimer
       i2_ENTERCRITICAL
       i2_LEAVECRITICAL
   i2_XF_pushEvent

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      F0       6       93.8%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     47      91       4       90.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     45      4D       1       81.9%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1CE       9        0.0%
DATA                 0      0     1CE      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Thu Sep 09 08:43:01 2021

                      _LCD_ButtonDraw 0E4C                           ?_LCD_Bitmap 0027  
                        ___fldiv@aexp 0038                          ___fldiv@bexp 0037  
                    _LCD_ButtonCreate 3F5C                          ___fldiv@sign 0030  
                        ?_displayInit 00EB                  __end_of_Factory_exec 5572  
                __end_of_Factory_init 4718                                    _g1 0100  
                        ___awdiv@sign 0017               __end_of_sleepController 5880  
                   ??i2_ENTERCRITICAL 0001              __end_of_Menu_welcomeDraw 4FFA  
                 ___wmul@multiplicand 001C                  backlightController@g 0018  
                    _LCD_ButtonUpdate 308E                         ?_LCD_InButton 0012  
                       ?_LCD_InSlider 0012                         ?_LCD_DrawRect 0012  
                       ?_LCD_DrawText 0020                                   l226 49B8  
                                 l315 2246                                   l340 0B36  
                                 l318 2264                                   l345 0B7A  
                                 l290 27D6                                   l283 272C  
                                 l348 0BB0                                   l532 32A0  
                                 l293 2828                                   l285 2736  
                                 l542 33AE                                   l296 28B6  
                                 l538 3300                                   l299 2918  
                                 l812 010C                                   l813 01B4  
                                 l818 04E0                                   l667 1358  
                                 l668 13AC                                   l829 0828  
                                 l669 1400                                   l858 264A  
                                 l778 5A1C                                   l799 4A8A  
                                 _GIE 007F97                                   _PR2 000FBB  
                                 _abs 57F2                                   _pad 5100  
                                 _isr 0008                  configMeasure@channel 0012  
                     ??_ENTERCRITICAL 0012                          ___awmod@sign 0017  
                                 wreg 000FE8                __size_of_touchScreenSM 005E  
                     __end_of_RGB2LCD 488C                          ___fltol@exp1 0042  
                    _touchScreenState 004D                           _Ball_Update 507E  
                       ??_Paddle_addX 0018                                  ?_abs 0024  
                                l4010 4F48                                  l1365 5480  
                                l1470 2DB4                                  l1375 5676  
                                l1536 3914                                  l1529 3896  
                                l1458 2D4A                                  l1628 581A  
                                l1469 2DB8                                  l1590 2ED2  
                                l1592 2EDA                                  l4160 294E  
                                l1579 5126                                  l5410 274A  
                                l5330 2694                                  l6130 19CA  
                                l7002 24DA                                  l6300 0B70  
                                l6108 17E6                                  l7020 25B8  
                                l5414 275A                                  l5334 26B8  
                                l6310 0BC4                                  l7014 256E  
                                l7102 569E                                  ?_pad 001F  
                                l5416 2768                                  l6304 0B8E  
                                l6152 3142                                  l7008 2524  
                                l7040 451C                                  l5602 28CA  
                                l6314 0BFC                                  l7026 2602  
                                l6332 0C6A                                  l7220 2C08  
                                l5526 283C                                  l6342 0CDC  
                                l6318 0C52                                  l7046 4566  
                                l6430 53CC                                  l6360 0D36  
                                l5800 500E                                  l8200 5840  
                                l7048 457A                                  l7056 4A44  
                                l7160 14BC                                  l7144 1304  
                                l7240 2C48                                  l7216 2C04  
                                l7400 38CA                                  l5650 292C  
                                l5490 27EA                                  l6338 0CB8  
                                l6370 0D72                                  l8210 373C  
                                l7066 4396                                  l7154 1456  
                                l7322 2E20                                  l7410 393A  
                                l7402 38D6                                  l5900 5654  
                                l6372 0DAC                                  l6284 0B10  
                                l5812 5034                                  l8300 5168  
                                l7180 15E2                                  l7172 1578  
                                l7332 2E56                                  l7236 2C44  
                                l7412 3946                                  l7404 38FC  
                                l6366 0D6A                                  l6294 0B4A  
                                l5814 503C                                  l5806 501E  
                                l8222 378A                                  l6470 4CF6  
                                l7334 2E58                                  l7326 2E4A  
                                l7318 2DFC                                  l7262 2CAA  
                                l7254 2C92                                  l6392 0E16  
                                l6288 0B24                                  l5832 5074  
                                l5824 505C                                  l6552 49B0  
                                l8224 379E                                  l8216 3764  
                                l8400 36CE                                  l6720 0382  
                                l7192 1694                                  l7176 15CC  
                                l7168 1522                                  l7280 2D22  
                                l7272 2CFA                                  l7248 2C7C  
                                l7520 344A                                  l5906 566C  
                                l6378 0DFE                                  l8242 3836  
                                l8234 37FA                                  l8314 2EB6  
                                l6482 4602                                  l7186 163C  
                                l7506 33DA                                  l5860 5242  
                                l5852 5222                                  l5844 5208  
                                l7620 54F8                                  l6396 0E30  
                                l5828 5066                                  l8332 2F02  
                                l6900 4AAE                                  l6724 0420  
                                l6716 0302                                  l6732 04FC  
                                l7460 5856                                  l7292 2D60  
                                l7364 4780                                  l7348 4736  
                                l7428 3986                                  ?_isr 0001  
                                l5854 522A                                  l8422 1FB2  
                                l8238 3810                                  l8270 3CCE  
                                l8262 3C72                                  l8254 3C34  
                                l8342 2FF6                                  l8406 36E4  
                                l6638 56E2                                  l6750 0768  
                                l6742 064A                                  l6486 4634  
                                l7198 16EA                                  l7286 2D48  
                                l7382 47C0                                  l7374 4798  
                                l3998 4F0E                                  l5864 524C  
                                l5848 5214                                  l5880 5456  
                                l8432 1FF8                                  l8416 1F14  
                                l8264 3C86                                  l8176 4E6E  
                                l8328 2EF4                                  l6728 049C  
                                l7464 5860                                  l7632 5792  
                                l7640 57A4                                  l7376 47A4  
                                l7368 4790                                  l7392 38A6  
                                l5890 5476                                  l8186 5606  
                                l8522 2184                                  l8274 3CE4  
                                l8258 3C58                                  l8290 511E  
                                l8362 305A                                  l6754 07E4  
                                l6746 06CA                                  l7298 2D7E  
                                l7482 32C4                                  l5868 525A  
                                l8188 560A                                  l8428 1FDA  
                                l8620 12F4                                  l8604 10F0  
                                l8196 582E                                  l8292 5130  
                                l6764 08B6                                  l7740 4252  
                                l7476 32BC                                  l5878 544E  
                                l8526 21C0                                  l8550 227E  
                                l8614 1214                                  l8278 3D0A  
                                l8286 5110                                  l8366 306E  
                                l8390 3690                                  l6758 0844  
                                l7734 4236                                  l7398 38C4  
                                l7486 32E2                                  l7590 51B0  
                                l8536 2258                                  l8608 115C  
                                l8296 5144                                  l6872 4B56  
                                l6952 5428                                  l7752 4298  
                                l7496 332C                                  l5898 564C  
                                l8562 5584                                  l7578 5188  
                                l8396 36C4                                  l8564 559E  
                                l8804 4C60                                  l6948 53F0  
                                l6972 2368                                  l7772 42EE  
                                l8732 533A                                  l6990 2446  
                                l6966 231E                                  l7758 42B6  
                                l8750 5374                                  l8592 0F7C  
                                l8680 417A                                  l8672 4146  
                                l8760 4BEA                                  l6984 23FC  
                                l7768 42DC                                  l8744 536A  
                                l8736 5344                                  l8674 4154  
                                l8770 4C1A                                  l6978 23B2  
                                l8738 5352                         ??_Paddle_draw 0027  
                                l8668 4904                                  l8684 4194  
                                l8676 4162                                  l6996 2490  
                                l8694 41F8                                  l8782 4C46  
                                l8774 4C28                                  l8688 41AE  
                                l8776 4C3A                                  l8698 4206  
                                l8796 4C5C                                  l8788 4C52  
                 __end_of_XF_popEvent 552A                                  STR_1 7FBD  
                                STR_2 7FF9                                  STR_3 7FF9  
                                STR_4 7FD9                                  STR_5 7FE2  
                                STR_6 7FB2                                  STR_7 7FD0  
                                STR_8 7FFC                                  STR_9 7FC7  
                       ??_Paddle_init 0016                                  _LATA 000F89  
                                u2400 4F38                                  u4010 49D8  
                                u2410 4F74                                  u4101 0200  
                                u3405 4850                                  u4310 4AAA  
                                u5110 4724                                  u3415 4864  
                                u3600 5658                                  u6000 2E8A  
                                u4080 00B4                                  u5040 2DAE  
                                u5120 4754                                  u3530 522E  
                                u4410 2382                                  u4090 015C  
                                u4171 0548                                  u6100 3038  
                                u5125 474A                                  u3470 5040  
                                u6030 2EC8                                  u4270 4B52  
                                u4510 24F4                                  u4430 23CC  
                                u6120 3044                                  u4360 5430  
                                u5080 2E0A                                  u5160 47AA  
                                u5240 3950                                  u3385 3A3E  
                                u3570 545A                                  u3810 319C  
                                u6050 2EEE                                  u4530 253E  
                                u4450 2416                                  u4370 22EE  
                                u4610 44EC                                  u5090 2E2E  
                                u3395 3A82                                  u6220 2032  
                                u6060 3004                                  u6310 0F04  
                                u4550 2588                                  u4470 2460  
                                u4390 2338                                  u4630 4536  
                                u5430 51A8                                  u6080 3026  
                                u6160 3628                                  u5440 51E8  
                                u3841 09EE                                  u6081 3024  
                                u6234 2228                                  u6090 3034  
                                u4570 25D2                                  u4490 24AA  
                                u5290 32F8                                  u6235 2222  
                                u6227 2028                                  u6180 1F5A  
                                u4590 261C                                  u4670 4A5E  
                                u6280 22CC                                  u6440 4BFA  
                                u6187 1F50                                  u6460 4C42  
                                u6517 4670                                  u5910 3C8A  
                                u5750 4E66                                  u3990 45F0  
                                u5590 42B0                                  u6287 22C2  
                                u5831 376A                                  u6527 2954  
                                u6537 4F14                                  u5850 37A2  
                                u5770 4EA8                                  u6547 4F4E  
                                u5780 562A                                  u5787 5620  
                                u5980 5800                                  _RBPU 007F8F  
                                u5990 2E88                                  _WPUB 000F61  
                         displaySM@ev 00EF                           LCD_Bitmap@i 00C4  
                                abs@a 0024                                  _dbuf 008A  
                     ?_checkCollision 001B             __size_of_LCD_SliderCreate 00EE  
                                _main 5A18                                  _dtoa 2E60  
                    _XF_scheduleTimer 53E6                                  _prec 0048  
                                _nout 0086                                  pad@i 0024  
                                pad@p 0021                                  fsr1h 000FE2  
                                fsr2h 000FDA                                  indf1 000FE7  
                                indf2 000FDF                                  fsr1l 000FE1  
                                pad@w 0026                                  fsr2l 000FD9  
                                btemp 004E                      Menu_inGameDraw@g 00E4  
                      touchScreenSM@g 00B6                                  prodh 000FF4  
                                prodl 000FF3      __end_of_arialNarrow_12ptFontInfo 7F82  
                                start 006C                           RGB2LCD@blue 001C  
              __end_of_LCD_ButtonDraw 1302             __size_of_LCD_SliderUpdate 0402  
                     ___fldiv@new_exp 0031                        _LCD_SliderDraw 3E4E  
                  LCD_InSlider@slider 0012                       __end_of_XF_init 51F4  
                        ___param_bank 000000                      _gameStateMachine 004C  
              LCD_ButtonCreate@height 0018                    XF_scheduleTimer@ev 0022  
                  XF_scheduleTimer@tm 0020                LCD_ButtonCreate@button 0028  
                               ??_abs 0026                                 ??_pad 0023  
                               ??_isr 000E                      __end_of_LCD_Fill 49EA  
                      ??_LCD_InButton 0018                      __end_of_LCD_Init 2BD8  
                    __end_of_LCD_Read 3AD6                        ??_LCD_InSlider 0018  
                      ??_LCD_DrawRect 001D           LCD_SliderCreate@cursorWidth 0020  
                      ??_LCD_DrawText 002D                         ___fltol@sign1 0041  
                     __end_of___aodiv 3858                                 ?_main 0001  
                               ?_dtoa 002C                       __end_of___aomod 3D2C  
                     LCD_ButtonDraw@i 00E1                       __end_of___fldiv 2E60  
                     __end_of___awdiv 507E                                 STR_10 7FEB  
                               STR_11 7F9C                                 STR_12 7FA7  
                               STR_13 7FF3                                 STR_14 7F8F  
                               STR_15 7F82                       __end_of___awmod 5264  
                               _ANSB1 0079C9                                 _ANSB2 0079CA  
                     __end_of___fltol 47D2                                 _T0CON 000FD5  
                     ___awdiv@divisor 0014                                 _LATB1 007C51  
                               _LATC0 007C58                                 _LATB2 007C52  
                               _LATB3 007C53                                 _LATC2 007C5A  
                               _LATB4 007C54                                 _LATC3 007C5B  
                               _LATC4 007C5C                                 _LATC5 007C5D  
                     __end_of___lwdiv 548A                       __end_of___lwmod 5680  
                               i2l773 0058                                 i2l769 0034  
                     ___awdiv@counter 0016                                 _PLLEN 007CDE  
                        vfpfcnvrt@fmt 003E                                 _TMR0H 000FD7  
                               _TMR0L 000FD6                                 _PORTA 000F80  
                     ??_configMeasure 0012                                 _TRISA 000F92  
                               _TRISC 000F94          __end_ofi2_XF_unscheduleTimer 575C  
                 LCD_Bitmap@bfOffBits 00AA                          LCD_Fill@page 0018  
                               _flags 004A                          displayInit@g 00EB  
                               _fputc 4E5A                                 _theXF 0060  
                               _fputs 5824                LCD_ButtonDraw@tempChar 00D2  
                 __size_of_LCD_Bitmap 0532                                 pad@fp 001F  
                               _width 0046                                 _putch 5A22  
                               dtoa@d 002D                                 dtoa@i 00BA  
                               dtoa@n 00B2                                 dtoa@p 00AC  
                               dtoa@s 00B0                                 dtoa@w 00AE  
                __end_of_XF_pushEvent 53E6                       __end_of_sleepSM 57C0  
                        Paddle_addX@p 0012                                 tablat 000FF5  
          ??_gameControllerController 003A                       touchScreenSM@ev 0045  
                               plusw2 000FDB           ?_XF_decrementAndQueueTimers 0001  
                               ttemp5 004F                                 ttemp6 0052  
                               ttemp7 0056                                 status 000FD8  
                               wtemp8 004F                          Paddle_draw@p 0025  
                     __end_of_sprintf 55FC                          RGB2LCD@color 001E  
                        RGB2LCD@green 001A                __end_of_LCD_SliderDraw 3F5C  
                       ?_Menu_endGame 0044                          Paddle_init@p 0012  
            __size_of_touchScreenInit 001E               LCD_ButtonCreate@bgColor 001C  
                  __size_ofi2___awmod 0070                   __end_of_Paddle_addX 465E  
                     ?_LCD_ButtonDraw 0042                     ?_gameControllerSM 003C  
                 __end_of_Paddle_draw 3C08                         _touchScreenSM 5336  
                 __end_of_Paddle_init 4D30                    __size_of_Ball_draw 0156  
                        LCD_Read@posX 0012                          LCD_Read@posY 0014  
                  __size_of_Ball_init 0062                       __initialization 575C  
                     _levelController 44D2                    ??_gameControllerSM 003E  
                        __end_of_main 5A22                          __end_of_dtoa 308E  
             LCD_ButtonCreate@fpPress 0022                touchScreenController@g 0043  
              touchScreenController@i 00B2                      ?_sleepController 0001  
                    i2XF_pushEvent@ev 0008                i2XF_unscheduleTimer@id 0003  
                              ??_main 0046                                ??_dtoa 0035  
        GameParameters_setLevel@value 0014                         __activetblptr 000002  
                           ??_RGB2LCD 0014                           _XF_popEvent 54DC  
                              _ADCON0 000FC2                                _ADCON2 000FC0  
                    LCD_ButtonDraw@x1 00D5                      LCD_ButtonDraw@x2 00D7  
                    LCD_ButtonDraw@y1 00D9                      LCD_ButtonDraw@y2 00DB  
                              ?_fputc 0012                                ?_fputs 001A  
                              _ADRESH 000FC4                                _ADRESL 000FC3  
                              _CCPR2L 000F67                      ___awdiv@dividend 0012  
             _GameParameters_setLevel 59D2                                ?_putch 0001  
                              _INT1IE 007F83                                _INT1IF 007F80  
                  LCD_DrawRect@colorH 0021                    LCD_DrawRect@colorL 0022  
             _GameParameters_resetPos 5880                                i2l7560 52B2  
                              i2l7552 5292                                i2l7544 5278  
                              i2l7554 529A                                i2l7564 52BC  
                              i2l7548 5284                                i2l7910 0046  
                              i2l7568 52CA                                i2l7792 54C2  
                              i2l7890 4E2E                                i2l7882 4DCE  
                              i2l7892 4E42                                _OSCCON 000FD3  
                           ??_XF_init 0012                                _TMR0IE 007F95  
                              _TMR0IF 007F92                                _TMR2IF 007CF1  
                      ??_Menu_endGame 00E4                                _TRISB1 007C99  
                              _TRISC0 007CA0                                _TRISB2 007C9A  
                              _TRISC1 007CA1                                _TRISB3 007C9B  
                              _TRISC2 007CA2                                _TRISB4 007C9C  
                              _TRISC3 007CA3                                _TRISC4 007CA4  
                              _TRISC5 007CA5                      __end_of___xxtofl 3998  
                     ?_LCD_SliderDraw 0037                   i2XF_pushEvent@inISR 0007  
                LCD_DrawText@bg_color 002B                            _Score_draw 4406  
                          _Score_init 58D0                        ?_touchScreenSM 00B6  
                    ??_configPinSleep 0012                       i2_LEAVECRITICAL 5A00  
               __size_of_Factory_exec 0048                 __size_of_Factory_init 00BA  
                        vfprintf@cfmt 0040                   LCD_Bitmap@jumpColor 00C2  
                 LCD_Bitmap@jumpCount 00AF                   _Menu_parametersDraw 3D2C  
                __size_of_configTouch 0022            __end_of_gameControllerInit 5990  
                           ??___aodiv 0022                             ??___aomod 0022  
                              ___wmul 58F6                             ??___fldiv 0028  
                           ??___awdiv 0016                             ??___awmod 0016  
                       LCD_Fill@color 0012                             ??___fltol 003D  
              LCD_ButtonUpdate@button 0025                             ??___lwdiv 0024  
                           ??___lwmod 0016            gameControllerController@ev 0039  
                LCD_DrawText@fontByte 0037          __size_of_GameParameters_init 03EE  
                              clear_0 5762                                clear_1 576E  
                              clear_2 577A          __size_of_GameParameters_setX 0016  
        __size_of_GameParameters_setY 0016                      ___awdiv@quotient 0018  
           LCD_ButtonCreate@textOrBmp 001E                 _touchScreenController 329E  
                     ___awmod@divisor 0014                                isa$std 000001  
                     ___awmod@counter 0016                  __size_of_displayInit 0016  
                              pad@buf 0020                                dtoa@fp 002C  
                              _strlen 55FC                         LCD_DrawRect@i 0023  
                       LCD_DrawRect@j 001D                                fputc@c 0012  
                              fputs@c 001C                                fputs@i 001D  
                              fputs@s 001A          ?_GameParameters_setBackLight 0012  
                       LCD_DrawText@i 003E                     __end_ofi2___awmod 52D4  
                       LCD_DrawText@x 0040                         LCD_DrawText@y 003D  
                LCD_DrawText@tempChar 003F                          __mediumconst 7836  
                              tblptrh 000FF7                             ??_sleepSM 0014  
                              tblptrl 000FF6                                tblptru 000FF8  
                   __end_of_Ball_draw 35C0                     __end_of_Ball_init 5336  
                ?_Menu_parametersDraw 00E4                                putch@c 0001  
                    __end_of_vfprintf 55BA                        i2___awmod@sign 0006  
                           ??_sprintf 0042              __end_of_LCD_ButtonCreate 4056  
                         _Paddle_addX 459C                          _Factory_exec 552A  
                        _Factory_init 465E                           _Paddle_draw 3AD6  
                         _Paddle_init 4C8C                      XF_pushEvent@temp 001A  
                        ___xxtofl@arg 001C                 LCD_SliderCreate@width 0016  
                        ___xxtofl@exp 001B                          ___xxtofl@val 0012  
                __end_of_LCD_InButton 4BE6                 LCD_SliderCreate@steps 0022  
            __end_of_LCD_ButtonUpdate 329E                            __accesstop 0060  
             __end_of__initialization 5780                             ?_LCD_Fill 0012  
                    _LCD_SliderCreate 4056                             ?_LCD_Init 0001  
                           ?_LCD_Read 0012                  __end_of_LCD_InSlider 4B3E  
             __end_of_levelController 459C                  __end_of_LCD_DrawRect 293A  
                __end_of_LCD_DrawText 22D4           __size_of_XF_unscheduleTimer 0034  
                     i2_ENTERCRITICAL 5A0C                         ___rparam_used 000001  
                          ___fltol@f1 0039                         LCD_Read@color 0018  
                    _LCD_SliderUpdate 171A                    LEAVECRITICAL@inISR 0012  
                           LCD_Init@i 0018                        __pcstackCOMRAM 0001  
                        ??_LCD_Bitmap 002D                  i2_XF_unscheduleTimer 5728  
                   ??_touchScreenInit 0025           __end_of_backlightController 2668  
                       __end_of_fputc 4EEA                         __end_of_fputs 5854  
                 gameControllerInit@g 003C            LCD_ButtonCreate@fpReleased 0024  
                       __end_of_putch 5A24                     LCD_Bitmap@biWidth 00C0  
                   ?_Menu_welcomeDraw 0044                  LCD_Bitmap@endOfImage 00AE  
            __end_of_XF_scheduleTimer 5438                    ??_Menu_welcomeDraw 0046  
                   LCD_Bitmap@curXPos 00B7   __size_of_XF_decrementAndQueueTimers 0094  
                   LCD_Bitmap@curYPos 00B1                 __size_of_XF_pushEvent 0052  
           ??_GameParameters_setLevel 0016                 ??_Menu_parametersDraw 0045  
       ??_GameParameters_setBackLight 0016                          Ball_Update@b 0012  
           ??_GameParameters_resetPos 0014               _arialNarrow_12ptBitmaps 7837  
                    ??_checkCollision 001D                    __size_of_displaySM 00A6  
               __end_of_LEAVECRITICAL 59F4                    LCD_DrawText@offset 0033  
                             ??_fputc 0015                               ??_fputs 001C  
                        ?_Ball_Update 0012                               ??_putch 0012  
    __end_of_gameControllerController 171A             gameControllerController@g 0037  
             __end_ofi2_LEAVECRITICAL 5A0C                        XF_pushEvent@ev 0019  
                          __pbssBANK0 0060                            __pbssBANK1 0100  
                  __end_of_LCD_Bitmap 0E4C                            ??_LCD_Fill 0014  
                          ??_LCD_Init 0017                            ??_LCD_Read 0016  
                     ??_touchScreenSM 00B8              LCD_ButtonCreate@txtColor 001A  
                         ?_Score_draw 00D5                           ?_Score_init 0012  
                  ENTERCRITICAL@inISR 0012              __size_of_Menu_inGameDraw 0096  
                         Score_draw@s 00D5                           Score_init@s 0012  
               ?i2_XF_unscheduleTimer 0002                               ?___wmul 001A  
              ?_touchScreenController 0043                          _XF_pushEvent 5394  
                  __size_of_mooveBall 0032                    __size_of_sleepInit 0026  
                             ?_strlen 0012                  __end_of_Menu_endGame 493C  
             __size_ofi2_XF_pushEvent 0052                               _RGB2LCD 47D2  
                             _INTEDG1 007F8D                  GameParameters_init@s 002B  
                           ?___xxtofl 0012                  GameParameters_setX@s 0012  
                GameParameters_setY@s 0012                    __size_of_vfpfcnvrt 0150  
               __end_of_ENTERCRITICAL 5A00                         ?_moovePaddle1 001C  
                       ?_moovePaddle2 001C               __end_ofi2_ENTERCRITICAL 5A18  
                    ??_LCD_ButtonDraw 00C6                  Menu_parametersDraw@g 00E4  
 __end_of_arialNarrow_12ptDescriptors 7F7B           _arialNarrow_12ptDescriptors 7E5E  
                             _XF_init 5180                   LCD_ButtonDraw@xText 00DD  
                    ?_levelController 0016                   LCD_ButtonDraw@yText 00DF  
                 LCD_ButtonDraw@width 00D3                               __Hparam 0000  
                             __Lparam 0000                               ___aodiv 3710  
                   __end_of_displaySM 4C8C                               ___aomod 3C08  
                             ___fldiv 2BD8                               ___awdiv 4FFA  
                             ___awmod 51F4                               ___fltol 4718  
                     __size_of___wmul 0026               LCD_ButtonUpdate@colorIn 002D  
                             ___lwdiv 5438                               ___lwmod 563E  
                           ?_vfprintf 00C4                        LCD_Bitmap@newY 00BD  
                      LCD_Bitmap@posX 0029                        LCD_Bitmap@posY 002B  
                      LCD_Fill@colorH 0014                        LCD_Fill@colorL 0015  
                             __pcinit 575C                        LCD_Fill@column 0016  
                             __ramtop 0600                               __ptext0 5A18  
                             __ptext1 465E                               __ptext2 58AA  
                             __ptext3 593E                               __ptext4 597A  
                             __ptext5 5990                               __ptext6 5180  
                             __ptext7 293A                               __ptext8 4EEA  
                             __ptext9 552A                       __size_of_strlen 0042  
           __size_of_gameControllerSM 00EC                             _T2CONbits 000FBA  
                        __size_of_abs 0032                          __size_of_pad 0080  
                        __size_of_isr 0064                          ?_XF_popEvent 0001  
                          ??___xxtofl 0016                  LCD_Bitmap@pixelCount 00BF  
                 __size_of_Score_draw 00CC                      ___awmod@dividend 0012  
                 __size_of_Score_init 0026                 LCD_DrawText@fontPixel 0038  
                             _sleepSM 578E                 __end_of_configMeasure 56BC  
               __size_of_LCD_InButton 00A8               XF_unscheduleTimer@inISR 0013  
                      ??_moovePaddle1 001E                        ??_moovePaddle2 001E  
               __size_of_LCD_InSlider 00A8                     Menu_welcomeDraw@g 0044  
               __size_of_LCD_DrawRect 02D2                               _sprintf 55BA  
               __size_of_LCD_DrawText 03CA                      ??_LCD_SliderDraw 0039  
                end_of_initialization 5780                      ?i2_LEAVECRITICAL 0001  
                 _GameParameters_init 1B1C                   _GameParameters_setX 59BC  
                 _GameParameters_setY 59A6                     __end_of_mooveBall 57F2  
                             fputc@fp 0014                         __Lmediumconst 7836  
                             fputs@fp 001B                        Paddle_addX@add 0016  
                   __end_of_sleepInit 58D0                   displayController@ev 00E8  
              ??i2_XF_unscheduleTimer 0003                     __end_of_vfpfcnvrt 3710  
                          _sleepState 0089                               postdec1 000FE5  
                             postdec2 000FDD                     _LCD_Lowlevel_Init 4EEA  
                             postinc0 000FEE                               postinc1 000FE6  
                             postinc2 000FDE                            ??_vfprintf 0040  
   __size_of_gameControllerController 0418                  ?_GameParameters_init 002B  
           ?_gameControllerController 0037                     ??_Menu_inGameDraw 0044  
                ?_GameParameters_setX 0012                    ?_LCD_Lowlevel_Init 0001  
                ?_GameParameters_setY 0012                               strlen@a 0014  
                             strlen@s 0012                          _LCD_InButton 4B3E  
                           _PORTBbits 000F81              __end_of_LCD_SliderCreate 4144  
              LCD_SliderCreate@height 0018                          _LCD_InSlider 4A96  
                        _displayState 0088                          _LCD_DrawRect 2668  
                        _LCD_DrawText 1F0A                     XF_pushEvent@inISR 0018  
            __end_of_LCD_SliderUpdate 1B1C                      XF_popEvent@inISR 0019  
              LCD_SliderCreate@slider 0026                   ??_LCD_Lowlevel_Init 0012  
                       ___xxtofl@sign 001A                    _gameControllerInit 597A  
            __size_of_sleepController 002C                        Factory_exec@ev 00F0  
                         ___fldiv@grs 0033                           ___fldiv@rem 002C  
                           i2___awmod 5264                      ?i2_ENTERCRITICAL 0001  
                   ?_LCD_ButtonCreate 0012                          ?_Paddle_addX 0012  
                        ?_Paddle_draw 0025                             _Ball_draw 346A  
                        ?_Paddle_init 0012                             _Ball_init 52D4  
                 ?_gameControllerInit 003C                  __size_of_Ball_Update 0082  
                  ??_LCD_ButtonCreate 002B                     ?_LCD_ButtonUpdate 0025  
                     _touchScreenInit 593E                     _displayController 4144  
                         _CCP2CONbits 000F66                            displaySM@g 00EB  
                      LCD_Read@temp16 001A       __end_of_arialNarrow_12ptBitmaps 7E5E  
              RGB2LCD@colorTableEntry 0012                         ??_configTouch 0012  
                  ??_LCD_ButtonUpdate 0027                     __size_of_LCD_Fill 00AE  
                   __size_of_LCD_Init 029E                     __size_of_LCD_Read 013E  
                  ?_displayController 00E6                            RGB2LCD@red 0018  
           __end_of_LCD_Lowlevel_Init 4F76                    LCD_Lowlevel_Init@i 0013  
               LCD_ButtonCreate@fpOut 0026                     XF_scheduleTimer@i 0024  
               LCD_ButtonCreate@index 002A                 LCD_ButtonCreate@width 0016  
                       ??_displayInit 0046                 __size_of_Menu_endGame 00B0  
               ??_GameParameters_init 002D                 ??_GameParameters_setX 0016  
               ??_GameParameters_setY 0016                   ??_displayController 00E9  
                         vfpfcnvrt@ap 003F                           vfpfcnvrt@fp 003D  
                         vfpfcnvrt@ll 00BC                        __end_of___wmul 591C  
                ??_gameControllerInit 003E                    LCD_Bitmap@biHeight 00B5  
                XF_unscheduleTimer@id 0014                        i2_XF_pushEvent 548A  
                   ?_XF_scheduleTimer 0020                        __end_of_strlen 563E  
                       XF_popEvent@ev 0018                   start_initialization 575C  
                  ??_XF_scheduleTimer 0024                           __end_of_abs 5824  
                  LCD_InButton@button 0012                           __end_of_pad 5180  
                         __end_of_isr 006C                 XF_scheduleTimer@inISR 0023  
                          ?i2___awmod 0001                            ?_Ball_draw 0025  
                          ?_Ball_init 0012             __end_of_displayController 4232  
           __size_of_Menu_welcomeDraw 0084            __end_of_XF_unscheduleTimer 5728  
                        ??_Score_draw 0042                     LCD_DrawRect@color 001B  
                        _Menu_endGame 488C                          ??_Score_init 0014  
                   LCD_DrawRect@posX1 0012                     LCD_DrawRect@posX2 0016  
                   LCD_DrawRect@posY1 0014                     LCD_DrawRect@posY2 0018  
                  i2XF_pushEvent@temp 0009               ??_touchScreenController 00AA  
                         vfprintf@fmt 00C5                              ??___wmul 001E  
                __end_of_moovePaddle1 4A96                  __end_of_moovePaddle2 4406  
                 LCD_DrawText@yOffset 0035                   __end_of_configTouch 593E  
              __end_ofi2_XF_pushEvent 54DC                   LCD_DrawText@posXEnd 003B  
                 LCD_DrawText@posYEnd 0039              _arialNarrow_12ptFontInfo 7F7B  
         __end_of_Menu_parametersDraw 3E4E               __size_of_configPinSleep 001E  
                            ??_strlen 0014                  LCD_SliderCreate@posX 0012  
                LCD_SliderCreate@posY 0014                      _gameControllerSM 4232  
                 __end_of_displayInit 59A6                             ___fldiv@a 0024  
                           ___fldiv@b 0020                              ?_RGB2LCD 0012  
        __size_of_backlightController 0394                           __pbssCOMRAM 0046  
              LCD_SliderUpdate@slider 0027                         Menu_endGame@g 0044  
         XF_decrementAndQueueTimers@i 000C                         __pcstackBANK0 00AA  
                  __end_of_Score_draw 44D2                  LCD_SliderDraw@slider 0037  
                  __end_of_Score_init 58F6                      ___aodiv@dividend 0012  
                  gameControllerSM@ev 0040               __end_of_touchScreenInit 595C  
                __size_of_XF_popEvent 004E                     __size_of___xxtofl 0140  
                       moovePaddle1@g 001C                         moovePaddle2@g 001C  
                    LCD_InButton@posX 0014                      LCD_InButton@posY 0016  
                    LCD_Bitmap@bmpPtr 0027                     LCD_DrawText@align 0024  
                            ?_XF_init 0001                     LCD_DrawText@color 0029  
                   ??_sleepController 0012                      LCD_Bitmap@strPtr 00BB  
        ??_XF_decrementAndQueueTimers 000A                     LCD_DrawText@width 0041  
               __end_of_touchScreenSM 5394               LCD_Bitmap@colorTablePtr 00B3  
                i2LEAVECRITICAL@inISR 0001                      LCD_SliderDraw@x1 003D  
                    LCD_SliderDraw@x2 003F                      LCD_SliderDraw@y1 0041  
                    LCD_SliderDraw@y2 0043            __size_of_LCD_Lowlevel_Init 008C  
                    ___lwdiv@dividend 0020                             _dtoa$5500 00AA  
                           __pintcode 0008                         __pmediumconst 7836  
                            ?___aodiv 0012                              ?___aomod 0012  
                            ?___fldiv 0020                              ?___awdiv 0012  
                    ___aodiv@quotient 0024                              ?___awmod 0012  
                            ?___fltol 0039                              ?___lwdiv 0020  
                            ?___lwmod 0012                __size_of_LEAVECRITICAL 000C  
                     ?i2_XF_pushEvent 0007                             _displaySM 4BE6  
                   __size_of_vfprintf 0048              ?_GameParameters_setLevel 0012  
 __end_of_GameParameters_setBackLight 56F4           _GameParameters_setBackLight 56BC  
            ?_GameParameters_resetPos 0012                            mooveBall@g 0025  
                            ?_sleepSM 0001                      levelController@g 0016  
                    ___lwdiv@quotient 0024           touchScreenController@valueX 00B4  
         touchScreenController@valueY 00B0                           ??i2___awmod 0005  
                            ?_sprintf 00C8                        __size_of_fputc 0090  
                      __size_of_fputs 0030                        __size_of_putch 0002  
                         ??_Ball_draw 0027                           ??_Ball_init 0014  
          __size_of_displayController 00EE                            sleepInit@g 00ED  
                            _LCD_Fill 493C                              _LCD_Init 293A  
                            _LCD_Read 3998                        ___wmul@product 001E  
                __size_of_Paddle_addX 00C2                  __size_of_Paddle_draw 0132  
                __size_of_Paddle_init 00A4                       _Menu_inGameDraw 4D30  
                i2ENTERCRITICAL@inISR 0001                    LCD_SliderUpdate@x1 0035  
                  LCD_SliderUpdate@x2 002F                    LCD_SliderUpdate@y1 0031  
                  LCD_SliderUpdate@y2 0033                    displayController@g 00E6  
             __size_of_checkCollision 08AA                             _mooveBall 57C0  
                         _configTouch 591C                              i2u540_40 529E  
                            XF_init@i 0012                             _sleepInit 58AA  
                            i2u567_40 4E58                __size_of_ENTERCRITICAL 000C  
            __size_of_levelController 00CA                           _displayInit 5990  
                           _vfpfcnvrt 35C0                            ?_displaySM 00EB  
                   ___wmul@multiplier 001A                     ?_LCD_SliderCreate 0012  
    GameParameters_setBackLight@value 0014                    LCD_ButtonUpdate@x1 0033  
                  LCD_ButtonUpdate@x2 002F                    LCD_ButtonUpdate@y1 0031  
                  LCD_ButtonUpdate@y2 0035                    ??_LCD_SliderCreate 0028  
                    __size_of_RGB2LCD 00BA                     ?_LCD_SliderUpdate 0027  
                    LCD_InSlider@posX 0014                      LCD_InSlider@posY 0016  
                LCD_ButtonCreate@font 0020                  LCD_ButtonCreate@posX 0012  
                LCD_ButtonCreate@posY 0014                  LCD_ButtonDraw@bmpPtr 00E2  
                    ?_touchScreenInit 0001                    ??_LCD_SliderUpdate 0029  
                LCD_ButtonDraw@button 0042                         _LEAVECRITICAL 59E8  
                       ?_Factory_exec 0001                         ?_Factory_init 0001  
                  i2___awmod@dividend 0001                      _Menu_welcomeDraw 4F76  
                     checkCollision@g 001B                      __size_of_XF_init 0074  
               __size_of_moovePaddle1 00AC                 __size_of_moovePaddle2 00E8  
                    LCD_DrawRect@fill 001A                            ?_mooveBall 0025  
                            __Hrparam 0000                      LCD_DrawRect@temp 001F  
                          ?_sleepInit 00ED              __size_ofi2_LEAVECRITICAL 000C  
                          vfprintf@ap 00C7                              __Lrparam 0000  
                          vfprintf@fp 00C4             i2XF_unscheduleTimer@inISR 0002  
             __size_of_LCD_ButtonDraw 04B6         __size_ofi2_XF_unscheduleTimer 0034  
              __size_of_configMeasure 003C       __end_of_GameParameters_setLevel 59E8  
           __size_of_LCD_ButtonCreate 00FA                      __size_of___aodiv 0148  
     __end_of_GameParameters_resetPos 58AA                      __size_of___aomod 0124  
                    __size_of___fldiv 0288                      __size_of___awdiv 0084  
                    __size_of___awmod 0070                      __size_of___fltol 00BA  
                          ?_vfpfcnvrt 003D                      __size_of___lwdiv 0052  
                    __size_of___lwmod 0042                        _configPinSleep 595C  
           __size_of_LCD_ButtonUpdate 0210                     gameControllerSM@g 003C  
                     ___aodiv@divisor 001A                      Paddle_addX@value 0014  
            LCD_ButtonUpdate@colorOut 002B                       ___aodiv@counter 0022  
            GameParameters_setX@value 0014                       LCD_Bitmap@color 00B9  
            GameParameters_setY@value 0014                      LCD_DrawText@font 0022  
                          sprintf@fmt 00CA                      LCD_DrawText@posX 0025  
                    LCD_DrawText@posY 0027              GameParameters_setLevel@s 0012  
                            ___xxtofl 3858                            Ball_draw@b 0025  
                     ___lwdiv@divisor 0022                            Ball_init@b 0012  
                     ___lwdiv@counter 0026                              __ptext10 5336  
                            __ptext11 329E                              __ptext20 5854  
                            __ptext12 5680                              __ptext21 595C  
                            __ptext13 3858                              __ptext30 0070  
                            __ptext22 591C                              __ptext14 4718  
                            __ptext31 5394                              __ptext23 4232  
                            __ptext15 2BD8                              __ptext40 1B1C  
                            __ptext32 507E                              __ptext24 1302  
                            __ptext16 56F4                              __ptext41 58D0  
                            __ptext33 44D2                              __ptext25 431E  
                            __ptext17 59A6                              __ptext50 3E4E  
                            __ptext42 4C8C                              __ptext34 59D2  
                            __ptext26 49EA                              __ptext18 59BC  
                            __ptext51 171A                              __ptext43 4056  
                            __ptext35 22D4                              __ptext27 459C  
                            __ptext19 578E                              __ptext60 5824  
                            __ptext52 488C                              __ptext44 3F5C  
                            __ptext36 56BC                              __ptext28 5880  
                            __ptext61 4E5A                              __ptext53 4D30  
                            __ptext45 52D4                              __ptext37 53E6  
                            __ptext29 57C0                              __ptext70 55FC  
                            __ptext62 5A22                              __ptext54 4406  
                            __ptext46 4BE6                              __ptext38 4A96  
                            __ptext71 4FFA                              __ptext63 57F2  
                            __ptext55 55BA                              __ptext47 4144  
                            __ptext39 4B3E                              __ptext80 2668  
                            __ptext72 308E                              __ptext64 3C08  
                            __ptext56 5572                              __ptext48 4F76  
                            __ptext81 54DC                              __ptext73 3998  
                            __ptext65 3710                              __ptext57 35C0  
                            __ptext49 3D2C                              __ptext90 5A00  
                            __ptext82 51F4                              __ptext74 091A  
                            __ptext66 3AD6                              __ptext58 2E60  
                            __ptext91 5A0C                              __ptext83 59E8  
                            __ptext75 58F6                              __ptext67 493C  
                            __ptext59 5100                              __ptext84 59F4  
                            __ptext76 563E                              __ptext68 0E4C  
                            __ptext77 5438                              __ptext69 1F0A  
                            __ptext86 4DC6                              __ptext78 47D2  
                            __ptext87 5728                              __ptext79 346A  
                            __ptext88 548A                              __ptext89 5264  
                    __size_of_sleepSM 0032                        ?_LEAVECRITICAL 0001  
                       _ENTERCRITICAL 59F4                         ??_Ball_Update 0014  
                      ??_Factory_exec 0046                        ??_Factory_init 00EF  
             __end_of_Menu_inGameDraw 4DC6                          _moovePaddle1 49EA  
                        _moovePaddle2 431E              GameParameters_resetPos@s 0012  
                    __size_of_sprintf 0042    __end_of_XF_decrementAndQueueTimers 4E5A  
          _XF_decrementAndQueueTimers 4DC6                         __size_of_main 000A  
                           sleepSM@ev 0016                         __size_of_dtoa 022E  
           __size_of_XF_scheduleTimer 0052              __end_of_gameControllerSM 431E  
                 _backlightController 22D4           __end_of_GameParameters_init 1F0A  
         __end_of_GameParameters_setX 59D2           __end_of_GameParameters_setY 59BC  
            __size_ofi2_ENTERCRITICAL 000C               __size_of_LCD_SliderDraw 010E  
        GameParameters_setBackLight@s 0012              _gameControllerController 1302  
                            isa$xinst 000000                            _LCD_Bitmap 091A  
      __size_of_touchScreenController 01CC                    _XF_unscheduleTimer 56F4  
       __end_of_touchScreenController 346A                              int$flags 004E  
              __end_of_configPinSleep 597A                              _vfprintf 5572  
                       ?_XF_pushEvent 0018           __size_of_gameControllerInit 0016  
                         ??_displaySM 00ED                      ___aomod@dividend 0012  
                 ?_XF_unscheduleTimer 0013                     i2___awmod@divisor 0003  
                   ??_levelController 0018                     i2___awmod@counter 0005  
                ?_backlightController 0018                       _sleepController 5854  
                      ?_ENTERCRITICAL 0001                         _configMeasure 5680  
                            intlevel2 0000                             sprintf@ap 00CE  
                     LCD_DrawText@msg 0020                      ___lwmod@dividend 0012  
                ??_XF_unscheduleTimer 0014                   __end_of_Ball_Update 5100  
                      _checkCollision 0070                           ??_mooveBall 0027  
                         ??_sleepInit 0046                      ??i2_XF_pushEvent 0008  
                      ??_XF_pushEvent 0019                       ?_configPinSleep 0001  
                     ___aomod@divisor 001A                           ??_vfpfcnvrt 0040  
                     ___aomod@counter 0022                     ??i2_LEAVECRITICAL 0001  
                            sprintf@f 00CF                              sprintf@s 00C8  
               ??_backlightController 001A                         ??_XF_popEvent 0018  
                     ___lwmod@divisor 0014               LCD_SliderCreate@bgColor 001C  
                     ___lwmod@counter 0016                       ??_LEAVECRITICAL 0012  
                      ?_configMeasure 0001           LCD_SliderCreate@borderColor 001E  
        __size_of_Menu_parametersDraw 0122              LCD_SliderCreate@sldColor 001A  
             LCD_SliderCreate@fpPress 0024                      ?_Menu_inGameDraw 00E4  
                        ___aodiv@sign 0023      __size_of_GameParameters_setLevel 0016  
                     Paddle_init@team 0014                __end_of_checkCollision 091A  
    __size_of_GameParameters_resetPos 002A  __size_of_GameParameters_setBackLight 0038  
                        ___aomod@sign 0023                          ?_configTouch 0001  
