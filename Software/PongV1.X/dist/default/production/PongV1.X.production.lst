

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Thu Sep 09 11:16:40 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og9 
     1                           	processor	18LF25K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=3
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=3
    74                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=3
    75                           	psect	text63,global,reloc=2,class=CODE,delta=1,group=3
    76                           	psect	text64,global,reloc=2,class=CODE,delta=1,group=3
    77                           	psect	text65,global,reloc=2,class=CODE,delta=1,group=2
    78                           	psect	text66,global,reloc=2,class=CODE,delta=1,group=2
    79                           	psect	text67,global,reloc=2,class=CODE,delta=1
    80                           	psect	text68,global,reloc=2,class=CODE,delta=1
    81                           	psect	text69,global,reloc=2,class=CODE,delta=1
    82                           	psect	text70,global,reloc=2,class=CODE,delta=1
    83                           	psect	text71,global,reloc=2,class=CODE,delta=1,group=3
    84                           	psect	text72,global,reloc=2,class=CODE,delta=1,group=2
    85                           	psect	text73,global,reloc=2,class=CODE,delta=1
    86                           	psect	text74,global,reloc=2,class=CODE,delta=1
    87                           	psect	text75,global,reloc=2,class=CODE,delta=1
    88                           	psect	text76,global,reloc=2,class=CODE,delta=1,group=2
    89                           	psect	text77,global,reloc=2,class=CODE,delta=1,group=2
    90                           	psect	text78,global,reloc=2,class=CODE,delta=1,group=2
    91                           	psect	text79,global,reloc=2,class=CODE,delta=1
    92                           	psect	text80,global,reloc=2,class=CODE,delta=1
    93                           	psect	text81,global,reloc=2,class=CODE,delta=1
    94                           	psect	text82,global,reloc=2,class=CODE,delta=1
    95                           	psect	text83,global,reloc=2,class=CODE,delta=1,group=2
    96                           	psect	text84,global,reloc=2,class=CODE,delta=1
    97                           	psect	text85,global,reloc=2,class=CODE,delta=1
    98                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    99                           	psect	text87,global,reloc=2,class=CODE,delta=1
   100                           	psect	text88,global,reloc=2,class=CODE,delta=1
   101                           	psect	text89,global,reloc=2,class=CODE,delta=1
   102                           	psect	text90,global,reloc=2,class=CODE,delta=1
   103                           	psect	text91,global,reloc=2,class=CODE,delta=1
   104                           	psect	text92,global,reloc=2,class=CODE,delta=1
   105                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   106                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   107                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   108                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
   109                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
   110  0000                     
   111                           ; Version 2.32
   112                           ; Generated 02/02/2021 GMT
   113                           ; 
   114                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
   115                           ; All rights reserved.
   116                           ; 
   117                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   118                           ; 
   119                           ; Redistribution and use in source and binary forms, with or without modification, are
   120                           ; permitted provided that the following conditions are met:
   121                           ; 
   122                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   123                           ;        conditions and the following disclaimer.
   124                           ; 
   125                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   126                           ;        of conditions and the following disclaimer in the documentation and/or other
   127                           ;        materials provided with the distribution. Publication is not required when
   128                           ;        this file is used in an embedded application.
   129                           ; 
   130                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   131                           ;        software without specific prior written permission.
   132                           ; 
   133                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   134                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   135                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   136                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   137                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   138                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   139                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   140                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   141                           ; 
   142                           ; 
   143                           ; Code-generator required, PIC18LF25K22 Definitions
   144                           ; 
   145                           ; SFR Addresses
   146  0000                     
   147                           	psect	mediumconst
   148  007836                     __pmediumconst:
   149                           	callstack 0
   150  007836  00                 	db	0
   151  007837                     _arialNarrow_12ptBitmaps:
   152                           	callstack 0
   153  007837  00                 	db	0
   154  007838  00                 	db	0
   155  007839  00                 	db	0
   156  00783A  00                 	db	0
   157  00783B  00                 	db	0
   158  00783C  00                 	db	0
   159  00783D  00                 	db	0
   160  00783E  00                 	db	0
   161  00783F  00                 	db	0
   162  007840  00                 	db	0
   163  007841  00                 	db	0
   164  007842  00                 	db	0
   165  007843  00                 	db	0
   166  007844  00                 	db	0
   167  007845  00                 	db	0
   168  007846  00                 	db	0
   169  007847  C0                 	db	192
   170  007848  C0                 	db	192
   171  007849  C0                 	db	192
   172  00784A  C0                 	db	192
   173  00784B  C0                 	db	192
   174  00784C  C0                 	db	192
   175  00784D  C0                 	db	192
   176  00784E  C0                 	db	192
   177  00784F  00                 	db	0
   178  007850  C0                 	db	192
   179  007851  C0                 	db	192
   180  007852  00                 	db	0
   181  007853  00                 	db	0
   182  007854  00                 	db	0
   183  007855  00                 	db	0
   184  007856  D8                 	db	216
   185  007857  D8                 	db	216
   186  007858  D8                 	db	216
   187  007859  D8                 	db	216
   188  00785A  00                 	db	0
   189  00785B  00                 	db	0
   190  00785C  00                 	db	0
   191  00785D  00                 	db	0
   192  00785E  00                 	db	0
   193  00785F  00                 	db	0
   194  007860  00                 	db	0
   195  007861  00                 	db	0
   196  007862  00                 	db	0
   197  007863  00                 	db	0
   198  007864  00                 	db	0
   199  007865  12                 	db	18
   200  007866  12                 	db	18
   201  007867  24                 	db	36
   202  007868  FE                 	db	254
   203  007869  FE                 	db	254
   204  00786A  48                 	db	72
   205  00786B  FE                 	db	254
   206  00786C  FE                 	db	254
   207  00786D  48                 	db	72
   208  00786E  90                 	db	144
   209  00786F  90                 	db	144
   210  007870  00                 	db	0
   211  007871  00                 	db	0
   212  007872  00                 	db	0
   213  007873  10                 	db	16
   214  007874  7C                 	db	124
   215  007875  FC                 	db	252
   216  007876  D6                 	db	214
   217  007877  D0                 	db	208
   218  007878  F0                 	db	240
   219  007879  7C                 	db	124
   220  00787A  1E                 	db	30
   221  00787B  16                 	db	22
   222  00787C  D6                 	db	214
   223  00787D  7E                 	db	126
   224  00787E  7C                 	db	124
   225  00787F  10                 	db	16
   226  007880  00                 	db	0
   227  007881  00                 	db	0
   228  007882  00                 	db	0
   229  007883  00                 	db	0
   230  007884  61                 	db	97
   231  007885  00                 	db	0
   232  007886  91                 	db	145
   233  007887  00                 	db	0
   234  007888  92                 	db	146
   235  007889  00                 	db	0
   236  00788A  92                 	db	146
   237  00788B  00                 	db	0
   238  00788C  94                 	db	148
   239  00788D  00                 	db	0
   240  00788E  65                 	db	101
   241  00788F  80                 	db	128
   242  007890  06                 	db	6
   243  007891  40                 	db	64
   244  007892  0A                 	db	10
   245  007893  40                 	db	64
   246  007894  0A                 	db	10
   247  007895  40                 	db	64
   248  007896  12                 	db	18
   249  007897  40                 	db	64
   250  007898  11                 	db	17
   251  007899  80                 	db	128
   252  00789A  00                 	db	0
   253  00789B  00                 	db	0
   254  00789C  00                 	db	0
   255  00789D  00                 	db	0
   256  00789E  00                 	db	0
   257  00789F  00                 	db	0
   258  0078A0  00                 	db	0
   259  0078A1  38                 	db	56
   260  0078A2  7C                 	db	124
   261  0078A3  6C                 	db	108
   262  0078A4  7C                 	db	124
   263  0078A5  30                 	db	48
   264  0078A6  78                 	db	120
   265  0078A7  DA                 	db	218
   266  0078A8  CE                 	db	206
   267  0078A9  CE                 	db	206
   268  0078AA  FF                 	db	255
   269  0078AB  7A                 	db	122
   270  0078AC  00                 	db	0
   271  0078AD  00                 	db	0
   272  0078AE  00                 	db	0
   273  0078AF  00                 	db	0
   274  0078B0  C0                 	db	192
   275  0078B1  C0                 	db	192
   276  0078B2  C0                 	db	192
   277  0078B3  C0                 	db	192
   278  0078B4  00                 	db	0
   279  0078B5  00                 	db	0
   280  0078B6  00                 	db	0
   281  0078B7  00                 	db	0
   282  0078B8  00                 	db	0
   283  0078B9  00                 	db	0
   284  0078BA  00                 	db	0
   285  0078BB  00                 	db	0
   286  0078BC  00                 	db	0
   287  0078BD  00                 	db	0
   288  0078BE  00                 	db	0
   289  0078BF  10                 	db	16
   290  0078C0  20                 	db	32
   291  0078C1  60                 	db	96
   292  0078C2  60                 	db	96
   293  0078C3  C0                 	db	192
   294  0078C4  C0                 	db	192
   295  0078C5  C0                 	db	192
   296  0078C6  C0                 	db	192
   297  0078C7  C0                 	db	192
   298  0078C8  C0                 	db	192
   299  0078C9  60                 	db	96
   300  0078CA  60                 	db	96
   301  0078CB  20                 	db	32
   302  0078CC  10                 	db	16
   303  0078CD  00                 	db	0
   304  0078CE  80                 	db	128
   305  0078CF  40                 	db	64
   306  0078D0  60                 	db	96
   307  0078D1  20                 	db	32
   308  0078D2  30                 	db	48
   309  0078D3  30                 	db	48
   310  0078D4  30                 	db	48
   311  0078D5  30                 	db	48
   312  0078D6  30                 	db	48
   313  0078D7  30                 	db	48
   314  0078D8  60                 	db	96
   315  0078D9  60                 	db	96
   316  0078DA  40                 	db	64
   317  0078DB  80                 	db	128
   318  0078DC  00                 	db	0
   319  0078DD  20                 	db	32
   320  0078DE  A8                 	db	168
   321  0078DF  F8                 	db	248
   322  0078E0  20                 	db	32
   323  0078E1  50                 	db	80
   324  0078E2  50                 	db	80
   325  0078E3  00                 	db	0
   326  0078E4  00                 	db	0
   327  0078E5  00                 	db	0
   328  0078E6  00                 	db	0
   329  0078E7  00                 	db	0
   330  0078E8  00                 	db	0
   331  0078E9  00                 	db	0
   332  0078EA  00                 	db	0
   333  0078EB  00                 	db	0
   334  0078EC  00                 	db	0
   335  0078ED  00                 	db	0
   336  0078EE  00                 	db	0
   337  0078EF  30                 	db	48
   338  0078F0  30                 	db	48
   339  0078F1  30                 	db	48
   340  0078F2  FC                 	db	252
   341  0078F3  FC                 	db	252
   342  0078F4  30                 	db	48
   343  0078F5  30                 	db	48
   344  0078F6  30                 	db	48
   345  0078F7  00                 	db	0
   346  0078F8  00                 	db	0
   347  0078F9  00                 	db	0
   348  0078FA  00                 	db	0
   349  0078FB  00                 	db	0
   350  0078FC  00                 	db	0
   351  0078FD  00                 	db	0
   352  0078FE  00                 	db	0
   353  0078FF  00                 	db	0
   354  007900  00                 	db	0
   355  007901  00                 	db	0
   356  007902  00                 	db	0
   357  007903  00                 	db	0
   358  007904  C0                 	db	192
   359  007905  C0                 	db	192
   360  007906  40                 	db	64
   361  007907  40                 	db	64
   362  007908  80                 	db	128
   363  007909  00                 	db	0
   364  00790A  00                 	db	0
   365  00790B  00                 	db	0
   366  00790C  00                 	db	0
   367  00790D  00                 	db	0
   368  00790E  00                 	db	0
   369  00790F  00                 	db	0
   370  007910  F0                 	db	240
   371  007911  F0                 	db	240
   372  007912  00                 	db	0
   373  007913  00                 	db	0
   374  007914  00                 	db	0
   375  007915  00                 	db	0
   376  007916  00                 	db	0
   377  007917  00                 	db	0
   378  007918  00                 	db	0
   379  007919  00                 	db	0
   380  00791A  00                 	db	0
   381  00791B  00                 	db	0
   382  00791C  00                 	db	0
   383  00791D  00                 	db	0
   384  00791E  00                 	db	0
   385  00791F  00                 	db	0
   386  007920  00                 	db	0
   387  007921  00                 	db	0
   388  007922  C0                 	db	192
   389  007923  C0                 	db	192
   390  007924  00                 	db	0
   391  007925  00                 	db	0
   392  007926  00                 	db	0
   393  007927  00                 	db	0
   394  007928  30                 	db	48
   395  007929  30                 	db	48
   396  00792A  30                 	db	48
   397  00792B  60                 	db	96
   398  00792C  60                 	db	96
   399  00792D  60                 	db	96
   400  00792E  60                 	db	96
   401  00792F  60                 	db	96
   402  007930  C0                 	db	192
   403  007931  C0                 	db	192
   404  007932  C0                 	db	192
   405  007933  00                 	db	0
   406  007934  00                 	db	0
   407  007935  00                 	db	0
   408  007936  00                 	db	0
   409  007937  78                 	db	120
   410  007938  78                 	db	120
   411  007939  CC                 	db	204
   412  00793A  CC                 	db	204
   413  00793B  CC                 	db	204
   414  00793C  CC                 	db	204
   415  00793D  CC                 	db	204
   416  00793E  CC                 	db	204
   417  00793F  CC                 	db	204
   418  007940  78                 	db	120
   419  007941  78                 	db	120
   420  007942  00                 	db	0
   421  007943  00                 	db	0
   422  007944  00                 	db	0
   423  007945  00                 	db	0
   424  007946  30                 	db	48
   425  007947  30                 	db	48
   426  007948  70                 	db	112
   427  007949  F0                 	db	240
   428  00794A  B0                 	db	176
   429  00794B  30                 	db	48
   430  00794C  30                 	db	48
   431  00794D  30                 	db	48
   432  00794E  30                 	db	48
   433  00794F  30                 	db	48
   434  007950  30                 	db	48
   435  007951  00                 	db	0
   436  007952  00                 	db	0
   437  007953  00                 	db	0
   438  007954  00                 	db	0
   439  007955  38                 	db	56
   440  007956  7C                 	db	124
   441  007957  CC                 	db	204
   442  007958  CC                 	db	204
   443  007959  0C                 	db	12
   444  00795A  18                 	db	24
   445  00795B  38                 	db	56
   446  00795C  70                 	db	112
   447  00795D  60                 	db	96
   448  00795E  FC                 	db	252
   449  00795F  FC                 	db	252
   450  007960  00                 	db	0
   451  007961  00                 	db	0
   452  007962  00                 	db	0
   453  007963  00                 	db	0
   454  007964  78                 	db	120
   455  007965  FC                 	db	252
   456  007966  CC                 	db	204
   457  007967  0C                 	db	12
   458  007968  38                 	db	56
   459  007969  38                 	db	56
   460  00796A  0C                 	db	12
   461  00796B  0C                 	db	12
   462  00796C  CC                 	db	204
   463  00796D  F8                 	db	248
   464  00796E  78                 	db	120
   465  00796F  00                 	db	0
   466  007970  00                 	db	0
   467  007971  00                 	db	0
   468  007972  00                 	db	0
   469  007973  0C                 	db	12
   470  007974  1C                 	db	28
   471  007975  1C                 	db	28
   472  007976  3C                 	db	60
   473  007977  2C                 	db	44
   474  007978  6C                 	db	108
   475  007979  CC                 	db	204
   476  00797A  FE                 	db	254
   477  00797B  FE                 	db	254
   478  00797C  0C                 	db	12
   479  00797D  0C                 	db	12
   480  00797E  00                 	db	0
   481  00797F  00                 	db	0
   482  007980  00                 	db	0
   483  007981  00                 	db	0
   484  007982  7C                 	db	124
   485  007983  7C                 	db	124
   486  007984  60                 	db	96
   487  007985  D8                 	db	216
   488  007986  FC                 	db	252
   489  007987  CC                 	db	204
   490  007988  0C                 	db	12
   491  007989  CC                 	db	204
   492  00798A  CC                 	db	204
   493  00798B  78                 	db	120
   494  00798C  78                 	db	120
   495  00798D  00                 	db	0
   496  00798E  00                 	db	0
   497  00798F  00                 	db	0
   498  007990  00                 	db	0
   499  007991  70                 	db	112
   500  007992  78                 	db	120
   501  007993  D8                 	db	216
   502  007994  C0                 	db	192
   503  007995  F0                 	db	240
   504  007996  F8                 	db	248
   505  007997  D8                 	db	216
   506  007998  D8                 	db	216
   507  007999  D8                 	db	216
   508  00799A  78                 	db	120
   509  00799B  70                 	db	112
   510  00799C  00                 	db	0
   511  00799D  00                 	db	0
   512  00799E  00                 	db	0
   513  00799F  00                 	db	0
   514  0079A0  F8                 	db	248
   515  0079A1  F8                 	db	248
   516  0079A2  18                 	db	24
   517  0079A3  10                 	db	16
   518  0079A4  30                 	db	48
   519  0079A5  30                 	db	48
   520  0079A6  20                 	db	32
   521  0079A7  60                 	db	96
   522  0079A8  60                 	db	96
   523  0079A9  60                 	db	96
   524  0079AA  60                 	db	96
   525  0079AB  00                 	db	0
   526  0079AC  00                 	db	0
   527  0079AD  00                 	db	0
   528  0079AE  00                 	db	0
   529  0079AF  78                 	db	120
   530  0079B0  FC                 	db	252
   531  0079B1  CC                 	db	204
   532  0079B2  CC                 	db	204
   533  0079B3  78                 	db	120
   534  0079B4  78                 	db	120
   535  0079B5  CC                 	db	204
   536  0079B6  CC                 	db	204
   537  0079B7  CC                 	db	204
   538  0079B8  FC                 	db	252
   539  0079B9  78                 	db	120
   540  0079BA  00                 	db	0
   541  0079BB  00                 	db	0
   542  0079BC  00                 	db	0
   543  0079BD  00                 	db	0
   544  0079BE  70                 	db	112
   545  0079BF  F8                 	db	248
   546  0079C0  CC                 	db	204
   547  0079C1  CC                 	db	204
   548  0079C2  CC                 	db	204
   549  0079C3  FC                 	db	252
   550  0079C4  7C                 	db	124
   551  0079C5  0C                 	db	12
   552  0079C6  CC                 	db	204
   553  0079C7  F8                 	db	248
   554  0079C8  70                 	db	112
   555  0079C9  00                 	db	0
   556  0079CA  00                 	db	0
   557  0079CB  00                 	db	0
   558  0079CC  00                 	db	0
   559  0079CD  00                 	db	0
   560  0079CE  00                 	db	0
   561  0079CF  00                 	db	0
   562  0079D0  C0                 	db	192
   563  0079D1  C0                 	db	192
   564  0079D2  00                 	db	0
   565  0079D3  00                 	db	0
   566  0079D4  00                 	db	0
   567  0079D5  00                 	db	0
   568  0079D6  C0                 	db	192
   569  0079D7  C0                 	db	192
   570  0079D8  00                 	db	0
   571  0079D9  00                 	db	0
   572  0079DA  00                 	db	0
   573  0079DB  00                 	db	0
   574  0079DC  00                 	db	0
   575  0079DD  00                 	db	0
   576  0079DE  00                 	db	0
   577  0079DF  C0                 	db	192
   578  0079E0  C0                 	db	192
   579  0079E1  00                 	db	0
   580  0079E2  00                 	db	0
   581  0079E3  00                 	db	0
   582  0079E4  00                 	db	0
   583  0079E5  C0                 	db	192
   584  0079E6  C0                 	db	192
   585  0079E7  40                 	db	64
   586  0079E8  40                 	db	64
   587  0079E9  80                 	db	128
   588  0079EA  00                 	db	0
   589  0079EB  00                 	db	0
   590  0079EC  04                 	db	4
   591  0079ED  1C                 	db	28
   592  0079EE  38                 	db	56
   593  0079EF  F0                 	db	240
   594  0079F0  C0                 	db	192
   595  0079F1  F0                 	db	240
   596  0079F2  38                 	db	56
   597  0079F3  1C                 	db	28
   598  0079F4  04                 	db	4
   599  0079F5  00                 	db	0
   600  0079F6  00                 	db	0
   601  0079F7  00                 	db	0
   602  0079F8  00                 	db	0
   603  0079F9  00                 	db	0
   604  0079FA  00                 	db	0
   605  0079FB  00                 	db	0
   606  0079FC  00                 	db	0
   607  0079FD  FC                 	db	252
   608  0079FE  FC                 	db	252
   609  0079FF  00                 	db	0
   610  007A00  FC                 	db	252
   611  007A01  FC                 	db	252
   612  007A02  00                 	db	0
   613  007A03  00                 	db	0
   614  007A04  00                 	db	0
   615  007A05  00                 	db	0
   616  007A06  00                 	db	0
   617  007A07  00                 	db	0
   618  007A08  00                 	db	0
   619  007A09  00                 	db	0
   620  007A0A  80                 	db	128
   621  007A0B  E0                 	db	224
   622  007A0C  70                 	db	112
   623  007A0D  3C                 	db	60
   624  007A0E  0C                 	db	12
   625  007A0F  1C                 	db	28
   626  007A10  70                 	db	112
   627  007A11  E0                 	db	224
   628  007A12  80                 	db	128
   629  007A13  00                 	db	0
   630  007A14  00                 	db	0
   631  007A15  00                 	db	0
   632  007A16  00                 	db	0
   633  007A17  00                 	db	0
   634  007A18  78                 	db	120
   635  007A19  FC                 	db	252
   636  007A1A  CC                 	db	204
   637  007A1B  CC                 	db	204
   638  007A1C  1C                 	db	28
   639  007A1D  18                 	db	24
   640  007A1E  30                 	db	48
   641  007A1F  30                 	db	48
   642  007A20  00                 	db	0
   643  007A21  30                 	db	48
   644  007A22  30                 	db	48
   645  007A23  00                 	db	0
   646  007A24  00                 	db	0
   647  007A25  00                 	db	0
   648  007A26  00                 	db	0
   649  007A27  00                 	db	0
   650  007A28  0F                 	db	15
   651  007A29  C0                 	db	192
   652  007A2A  1F                 	db	31
   653  007A2B  E0                 	db	224
   654  007A2C  30                 	db	48
   655  007A2D  30                 	db	48
   656  007A2E  66                 	db	102
   657  007A2F  D8                 	db	216
   658  007A30  EF                 	db	239
   659  007A31  D8                 	db	216
   660  007A32  DD                 	db	221
   661  007A33  D8                 	db	216
   662  007A34  D8                 	db	216
   663  007A35  98                 	db	152
   664  007A36  D9                 	db	217
   665  007A37  98                 	db	152
   666  007A38  D9                 	db	217
   667  007A39  B0                 	db	176
   668  007A3A  DF                 	db	223
   669  007A3B  F0                 	db	240
   670  007A3C  6E                 	db	110
   671  007A3D  C8                 	db	200
   672  007A3E  70                 	db	112
   673  007A3F  10                 	db	16
   674  007A40  3F                 	db	63
   675  007A41  E0                 	db	224
   676  007A42  0F                 	db	15
   677  007A43  C0                 	db	192
   678  007A44  00                 	db	0
   679  007A45  00                 	db	0
   680  007A46  1C                 	db	28
   681  007A47  00                 	db	0
   682  007A48  1C                 	db	28
   683  007A49  00                 	db	0
   684  007A4A  1C                 	db	28
   685  007A4B  00                 	db	0
   686  007A4C  36                 	db	54
   687  007A4D  00                 	db	0
   688  007A4E  36                 	db	54
   689  007A4F  00                 	db	0
   690  007A50  36                 	db	54
   691  007A51  00                 	db	0
   692  007A52  63                 	db	99
   693  007A53  00                 	db	0
   694  007A54  7F                 	db	127
   695  007A55  00                 	db	0
   696  007A56  7F                 	db	127
   697  007A57  00                 	db	0
   698  007A58  C1                 	db	193
   699  007A59  80                 	db	128
   700  007A5A  C1                 	db	193
   701  007A5B  80                 	db	128
   702  007A5C  00                 	db	0
   703  007A5D  00                 	db	0
   704  007A5E  00                 	db	0
   705  007A5F  00                 	db	0
   706  007A60  00                 	db	0
   707  007A61  00                 	db	0
   708  007A62  00                 	db	0
   709  007A63  FC                 	db	252
   710  007A64  FE                 	db	254
   711  007A65  C6                 	db	198
   712  007A66  C6                 	db	198
   713  007A67  FC                 	db	252
   714  007A68  FC                 	db	252
   715  007A69  C6                 	db	198
   716  007A6A  C6                 	db	198
   717  007A6B  C6                 	db	198
   718  007A6C  FE                 	db	254
   719  007A6D  FC                 	db	252
   720  007A6E  00                 	db	0
   721  007A6F  00                 	db	0
   722  007A70  00                 	db	0
   723  007A71  00                 	db	0
   724  007A72  3C                 	db	60
   725  007A73  7E                 	db	126
   726  007A74  67                 	db	103
   727  007A75  C2                 	db	194
   728  007A76  C0                 	db	192
   729  007A77  C0                 	db	192
   730  007A78  C0                 	db	192
   731  007A79  C2                 	db	194
   732  007A7A  67                 	db	103
   733  007A7B  7E                 	db	126
   734  007A7C  3C                 	db	60
   735  007A7D  00                 	db	0
   736  007A7E  00                 	db	0
   737  007A7F  00                 	db	0
   738  007A80  00                 	db	0
   739  007A81  F8                 	db	248
   740  007A82  FC                 	db	252
   741  007A83  CE                 	db	206
   742  007A84  C6                 	db	198
   743  007A85  C6                 	db	198
   744  007A86  C6                 	db	198
   745  007A87  C6                 	db	198
   746  007A88  C6                 	db	198
   747  007A89  CE                 	db	206
   748  007A8A  FC                 	db	252
   749  007A8B  F8                 	db	248
   750  007A8C  00                 	db	0
   751  007A8D  00                 	db	0
   752  007A8E  00                 	db	0
   753  007A8F  00                 	db	0
   754  007A90  FE                 	db	254
   755  007A91  FE                 	db	254
   756  007A92  C0                 	db	192
   757  007A93  C0                 	db	192
   758  007A94  FE                 	db	254
   759  007A95  FE                 	db	254
   760  007A96  C0                 	db	192
   761  007A97  C0                 	db	192
   762  007A98  C0                 	db	192
   763  007A99  FE                 	db	254
   764  007A9A  FE                 	db	254
   765  007A9B  00                 	db	0
   766  007A9C  00                 	db	0
   767  007A9D  00                 	db	0
   768  007A9E  00                 	db	0
   769  007A9F  FC                 	db	252
   770  007AA0  FC                 	db	252
   771  007AA1  C0                 	db	192
   772  007AA2  C0                 	db	192
   773  007AA3  F8                 	db	248
   774  007AA4  F8                 	db	248
   775  007AA5  C0                 	db	192
   776  007AA6  C0                 	db	192
   777  007AA7  C0                 	db	192
   778  007AA8  C0                 	db	192
   779  007AA9  C0                 	db	192
   780  007AAA  00                 	db	0
   781  007AAB  00                 	db	0
   782  007AAC  00                 	db	0
   783  007AAD  00                 	db	0
   784  007AAE  3C                 	db	60
   785  007AAF  7E                 	db	126
   786  007AB0  67                 	db	103
   787  007AB1  C3                 	db	195
   788  007AB2  C0                 	db	192
   789  007AB3  CF                 	db	207
   790  007AB4  CF                 	db	207
   791  007AB5  C3                 	db	195
   792  007AB6  63                 	db	99
   793  007AB7  7F                 	db	127
   794  007AB8  3C                 	db	60
   795  007AB9  00                 	db	0
   796  007ABA  00                 	db	0
   797  007ABB  00                 	db	0
   798  007ABC  00                 	db	0
   799  007ABD  C6                 	db	198
   800  007ABE  C6                 	db	198
   801  007ABF  C6                 	db	198
   802  007AC0  C6                 	db	198
   803  007AC1  FE                 	db	254
   804  007AC2  FE                 	db	254
   805  007AC3  C6                 	db	198
   806  007AC4  C6                 	db	198
   807  007AC5  C6                 	db	198
   808  007AC6  C6                 	db	198
   809  007AC7  C6                 	db	198
   810  007AC8  00                 	db	0
   811  007AC9  00                 	db	0
   812  007ACA  00                 	db	0
   813  007ACB  00                 	db	0
   814  007ACC  C0                 	db	192
   815  007ACD  C0                 	db	192
   816  007ACE  C0                 	db	192
   817  007ACF  C0                 	db	192
   818  007AD0  C0                 	db	192
   819  007AD1  C0                 	db	192
   820  007AD2  C0                 	db	192
   821  007AD3  C0                 	db	192
   822  007AD4  C0                 	db	192
   823  007AD5  C0                 	db	192
   824  007AD6  C0                 	db	192
   825  007AD7  00                 	db	0
   826  007AD8  00                 	db	0
   827  007AD9  00                 	db	0
   828  007ADA  00                 	db	0
   829  007ADB  0C                 	db	12
   830  007ADC  0C                 	db	12
   831  007ADD  0C                 	db	12
   832  007ADE  0C                 	db	12
   833  007ADF  0C                 	db	12
   834  007AE0  0C                 	db	12
   835  007AE1  0C                 	db	12
   836  007AE2  CC                 	db	204
   837  007AE3  CC                 	db	204
   838  007AE4  FC                 	db	252
   839  007AE5  78                 	db	120
   840  007AE6  00                 	db	0
   841  007AE7  00                 	db	0
   842  007AE8  00                 	db	0
   843  007AE9  00                 	db	0
   844  007AEA  C3                 	db	195
   845  007AEB  C6                 	db	198
   846  007AEC  CC                 	db	204
   847  007AED  CC                 	db	204
   848  007AEE  D8                 	db	216
   849  007AEF  FC                 	db	252
   850  007AF0  EC                 	db	236
   851  007AF1  C6                 	db	198
   852  007AF2  C6                 	db	198
   853  007AF3  C3                 	db	195
   854  007AF4  C3                 	db	195
   855  007AF5  00                 	db	0
   856  007AF6  00                 	db	0
   857  007AF7  00                 	db	0
   858  007AF8  00                 	db	0
   859  007AF9  C0                 	db	192
   860  007AFA  C0                 	db	192
   861  007AFB  C0                 	db	192
   862  007AFC  C0                 	db	192
   863  007AFD  C0                 	db	192
   864  007AFE  C0                 	db	192
   865  007AFF  C0                 	db	192
   866  007B00  C0                 	db	192
   867  007B01  C0                 	db	192
   868  007B02  FE                 	db	254
   869  007B03  FE                 	db	254
   870  007B04  00                 	db	0
   871  007B05  00                 	db	0
   872  007B06  00                 	db	0
   873  007B07  00                 	db	0
   874  007B08  00                 	db	0
   875  007B09  E3                 	db	227
   876  007B0A  80                 	db	128
   877  007B0B  E3                 	db	227
   878  007B0C  80                 	db	128
   879  007B0D  E3                 	db	227
   880  007B0E  80                 	db	128
   881  007B0F  F7                 	db	247
   882  007B10  80                 	db	128
   883  007B11  D5                 	db	213
   884  007B12  80                 	db	128
   885  007B13  D5                 	db	213
   886  007B14  80                 	db	128
   887  007B15  D5                 	db	213
   888  007B16  80                 	db	128
   889  007B17  D5                 	db	213
   890  007B18  80                 	db	128
   891  007B19  DD                 	db	221
   892  007B1A  80                 	db	128
   893  007B1B  D9                 	db	217
   894  007B1C  80                 	db	128
   895  007B1D  C9                 	db	201
   896  007B1E  80                 	db	128
   897  007B1F  00                 	db	0
   898  007B20  00                 	db	0
   899  007B21  00                 	db	0
   900  007B22  00                 	db	0
   901  007B23  00                 	db	0
   902  007B24  00                 	db	0
   903  007B25  00                 	db	0
   904  007B26  C6                 	db	198
   905  007B27  E6                 	db	230
   906  007B28  E6                 	db	230
   907  007B29  E6                 	db	230
   908  007B2A  F6                 	db	246
   909  007B2B  D6                 	db	214
   910  007B2C  DE                 	db	222
   911  007B2D  DE                 	db	222
   912  007B2E  CE                 	db	206
   913  007B2F  CE                 	db	206
   914  007B30  C6                 	db	198
   915  007B31  00                 	db	0
   916  007B32  00                 	db	0
   917  007B33  00                 	db	0
   918  007B34  00                 	db	0
   919  007B35  3C                 	db	60
   920  007B36  7E                 	db	126
   921  007B37  67                 	db	103
   922  007B38  C3                 	db	195
   923  007B39  C3                 	db	195
   924  007B3A  C3                 	db	195
   925  007B3B  C3                 	db	195
   926  007B3C  C3                 	db	195
   927  007B3D  66                 	db	102
   928  007B3E  7E                 	db	126
   929  007B3F  3C                 	db	60
   930  007B40  00                 	db	0
   931  007B41  00                 	db	0
   932  007B42  00                 	db	0
   933  007B43  00                 	db	0
   934  007B44  FC                 	db	252
   935  007B45  FE                 	db	254
   936  007B46  C6                 	db	198
   937  007B47  C6                 	db	198
   938  007B48  C6                 	db	198
   939  007B49  FE                 	db	254
   940  007B4A  FC                 	db	252
   941  007B4B  C0                 	db	192
   942  007B4C  C0                 	db	192
   943  007B4D  C0                 	db	192
   944  007B4E  C0                 	db	192
   945  007B4F  00                 	db	0
   946  007B50  00                 	db	0
   947  007B51  00                 	db	0
   948  007B52  00                 	db	0
   949  007B53  00                 	db	0
   950  007B54  3C                 	db	60
   951  007B55  00                 	db	0
   952  007B56  7E                 	db	126
   953  007B57  00                 	db	0
   954  007B58  E7                 	db	231
   955  007B59  00                 	db	0
   956  007B5A  C3                 	db	195
   957  007B5B  00                 	db	0
   958  007B5C  C3                 	db	195
   959  007B5D  00                 	db	0
   960  007B5E  C3                 	db	195
   961  007B5F  00                 	db	0
   962  007B60  C3                 	db	195
   963  007B61  00                 	db	0
   964  007B62  CB                 	db	203
   965  007B63  00                 	db	0
   966  007B64  66                 	db	102
   967  007B65  00                 	db	0
   968  007B66  7F                 	db	127
   969  007B67  00                 	db	0
   970  007B68  3D                 	db	61
   971  007B69  80                 	db	128
   972  007B6A  00                 	db	0
   973  007B6B  80                 	db	128
   974  007B6C  00                 	db	0
   975  007B6D  00                 	db	0
   976  007B6E  00                 	db	0
   977  007B6F  00                 	db	0
   978  007B70  00                 	db	0
   979  007B71  FC                 	db	252
   980  007B72  FE                 	db	254
   981  007B73  C6                 	db	198
   982  007B74  C6                 	db	198
   983  007B75  FE                 	db	254
   984  007B76  FC                 	db	252
   985  007B77  CC                 	db	204
   986  007B78  C6                 	db	198
   987  007B79  C6                 	db	198
   988  007B7A  C6                 	db	198
   989  007B7B  C3                 	db	195
   990  007B7C  00                 	db	0
   991  007B7D  00                 	db	0
   992  007B7E  00                 	db	0
   993  007B7F  00                 	db	0
   994  007B80  7C                 	db	124
   995  007B81  FE                 	db	254
   996  007B82  C6                 	db	198
   997  007B83  C6                 	db	198
   998  007B84  F0                 	db	240
   999  007B85  7C                 	db	124
  1000  007B86  0E                 	db	14
  1001  007B87  C6                 	db	198
  1002  007B88  C6                 	db	198
  1003  007B89  FE                 	db	254
  1004  007B8A  7C                 	db	124
  1005  007B8B  00                 	db	0
  1006  007B8C  00                 	db	0
  1007  007B8D  00                 	db	0
  1008  007B8E  00                 	db	0
  1009  007B8F  FF                 	db	255
  1010  007B90  FF                 	db	255
  1011  007B91  18                 	db	24
  1012  007B92  18                 	db	24
  1013  007B93  18                 	db	24
  1014  007B94  18                 	db	24
  1015  007B95  18                 	db	24
  1016  007B96  18                 	db	24
  1017  007B97  18                 	db	24
  1018  007B98  18                 	db	24
  1019  007B99  18                 	db	24
  1020  007B9A  00                 	db	0
  1021  007B9B  00                 	db	0
  1022  007B9C  00                 	db	0
  1023  007B9D  00                 	db	0
  1024  007B9E  C6                 	db	198
  1025  007B9F  C6                 	db	198
  1026  007BA0  C6                 	db	198
  1027  007BA1  C6                 	db	198
  1028  007BA2  C6                 	db	198
  1029  007BA3  C6                 	db	198
  1030  007BA4  C6                 	db	198
  1031  007BA5  C6                 	db	198
  1032  007BA6  C6                 	db	198
  1033  007BA7  7E                 	db	126
  1034  007BA8  38                 	db	56
  1035  007BA9  00                 	db	0
  1036  007BAA  00                 	db	0
  1037  007BAB  00                 	db	0
  1038  007BAC  00                 	db	0
  1039  007BAD  00                 	db	0
  1040  007BAE  C1                 	db	193
  1041  007BAF  80                 	db	128
  1042  007BB0  C1                 	db	193
  1043  007BB1  80                 	db	128
  1044  007BB2  63                 	db	99
  1045  007BB3  00                 	db	0
  1046  007BB4  63                 	db	99
  1047  007BB5  00                 	db	0
  1048  007BB6  63                 	db	99
  1049  007BB7  00                 	db	0
  1050  007BB8  36                 	db	54
  1051  007BB9  00                 	db	0
  1052  007BBA  36                 	db	54
  1053  007BBB  00                 	db	0
  1054  007BBC  36                 	db	54
  1055  007BBD  00                 	db	0
  1056  007BBE  1C                 	db	28
  1057  007BBF  00                 	db	0
  1058  007BC0  1C                 	db	28
  1059  007BC1  00                 	db	0
  1060  007BC2  1C                 	db	28
  1061  007BC3  00                 	db	0
  1062  007BC4  00                 	db	0
  1063  007BC5  00                 	db	0
  1064  007BC6  00                 	db	0
  1065  007BC7  00                 	db	0
  1066  007BC8  00                 	db	0
  1067  007BC9  00                 	db	0
  1068  007BCA  00                 	db	0
  1069  007BCB  00                 	db	0
  1070  007BCC  C4                 	db	196
  1071  007BCD  60                 	db	96
  1072  007BCE  C4                 	db	196
  1073  007BCF  60                 	db	96
  1074  007BD0  CA                 	db	202
  1075  007BD1  60                 	db	96
  1076  007BD2  6A                 	db	106
  1077  007BD3  C0                 	db	192
  1078  007BD4  6A                 	db	106
  1079  007BD5  C0                 	db	192
  1080  007BD6  6A                 	db	106
  1081  007BD7  C0                 	db	192
  1082  007BD8  6A                 	db	106
  1083  007BD9  C0                 	db	192
  1084  007BDA  6A                 	db	106
  1085  007BDB  C0                 	db	192
  1086  007BDC  31                 	db	49
  1087  007BDD  80                 	db	128
  1088  007BDE  31                 	db	49
  1089  007BDF  80                 	db	128
  1090  007BE0  31                 	db	49
  1091  007BE1  80                 	db	128
  1092  007BE2  00                 	db	0
  1093  007BE3  00                 	db	0
  1094  007BE4  00                 	db	0
  1095  007BE5  00                 	db	0
  1096  007BE6  00                 	db	0
  1097  007BE7  00                 	db	0
  1098  007BE8  00                 	db	0
  1099  007BE9  00                 	db	0
  1100  007BEA  C1                 	db	193
  1101  007BEB  80                 	db	128
  1102  007BEC  63                 	db	99
  1103  007BED  00                 	db	0
  1104  007BEE  36                 	db	54
  1105  007BEF  00                 	db	0
  1106  007BF0  36                 	db	54
  1107  007BF1  00                 	db	0
  1108  007BF2  1C                 	db	28
  1109  007BF3  00                 	db	0
  1110  007BF4  1C                 	db	28
  1111  007BF5  00                 	db	0
  1112  007BF6  1C                 	db	28
  1113  007BF7  00                 	db	0
  1114  007BF8  36                 	db	54
  1115  007BF9  00                 	db	0
  1116  007BFA  36                 	db	54
  1117  007BFB  00                 	db	0
  1118  007BFC  63                 	db	99
  1119  007BFD  00                 	db	0
  1120  007BFE  C1                 	db	193
  1121  007BFF  80                 	db	128
  1122  007C00  00                 	db	0
  1123  007C01  00                 	db	0
  1124  007C02  00                 	db	0
  1125  007C03  00                 	db	0
  1126  007C04  00                 	db	0
  1127  007C05  00                 	db	0
  1128  007C06  00                 	db	0
  1129  007C07  C3                 	db	195
  1130  007C08  66                 	db	102
  1131  007C09  66                 	db	102
  1132  007C0A  3C                 	db	60
  1133  007C0B  3C                 	db	60
  1134  007C0C  18                 	db	24
  1135  007C0D  18                 	db	24
  1136  007C0E  18                 	db	24
  1137  007C0F  18                 	db	24
  1138  007C10  18                 	db	24
  1139  007C11  18                 	db	24
  1140  007C12  00                 	db	0
  1141  007C13  00                 	db	0
  1142  007C14  00                 	db	0
  1143  007C15  00                 	db	0
  1144  007C16  FE                 	db	254
  1145  007C17  FE                 	db	254
  1146  007C18  06                 	db	6
  1147  007C19  0C                 	db	12
  1148  007C1A  18                 	db	24
  1149  007C1B  30                 	db	48
  1150  007C1C  30                 	db	48
  1151  007C1D  60                 	db	96
  1152  007C1E  C0                 	db	192
  1153  007C1F  FE                 	db	254
  1154  007C20  FE                 	db	254
  1155  007C21  00                 	db	0
  1156  007C22  00                 	db	0
  1157  007C23  00                 	db	0
  1158  007C24  00                 	db	0
  1159  007C25  E0                 	db	224
  1160  007C26  E0                 	db	224
  1161  007C27  C0                 	db	192
  1162  007C28  C0                 	db	192
  1163  007C29  C0                 	db	192
  1164  007C2A  C0                 	db	192
  1165  007C2B  C0                 	db	192
  1166  007C2C  C0                 	db	192
  1167  007C2D  C0                 	db	192
  1168  007C2E  C0                 	db	192
  1169  007C2F  C0                 	db	192
  1170  007C30  C0                 	db	192
  1171  007C31  E0                 	db	224
  1172  007C32  E0                 	db	224
  1173  007C33  00                 	db	0
  1174  007C34  C0                 	db	192
  1175  007C35  C0                 	db	192
  1176  007C36  C0                 	db	192
  1177  007C37  60                 	db	96
  1178  007C38  60                 	db	96
  1179  007C39  60                 	db	96
  1180  007C3A  60                 	db	96
  1181  007C3B  60                 	db	96
  1182  007C3C  30                 	db	48
  1183  007C3D  30                 	db	48
  1184  007C3E  30                 	db	48
  1185  007C3F  00                 	db	0
  1186  007C40  00                 	db	0
  1187  007C41  00                 	db	0
  1188  007C42  00                 	db	0
  1189  007C43  E0                 	db	224
  1190  007C44  E0                 	db	224
  1191  007C45  60                 	db	96
  1192  007C46  60                 	db	96
  1193  007C47  60                 	db	96
  1194  007C48  60                 	db	96
  1195  007C49  60                 	db	96
  1196  007C4A  60                 	db	96
  1197  007C4B  60                 	db	96
  1198  007C4C  60                 	db	96
  1199  007C4D  60                 	db	96
  1200  007C4E  60                 	db	96
  1201  007C4F  E0                 	db	224
  1202  007C50  E0                 	db	224
  1203  007C51  00                 	db	0
  1204  007C52  38                 	db	56
  1205  007C53  38                 	db	56
  1206  007C54  6C                 	db	108
  1207  007C55  6C                 	db	108
  1208  007C56  6C                 	db	108
  1209  007C57  C6                 	db	198
  1210  007C58  00                 	db	0
  1211  007C59  00                 	db	0
  1212  007C5A  00                 	db	0
  1213  007C5B  00                 	db	0
  1214  007C5C  00                 	db	0
  1215  007C5D  00                 	db	0
  1216  007C5E  00                 	db	0
  1217  007C5F  00                 	db	0
  1218  007C60  00                 	db	0
  1219  007C61  00                 	db	0
  1220  007C62  00                 	db	0
  1221  007C63  00                 	db	0
  1222  007C64  00                 	db	0
  1223  007C65  00                 	db	0
  1224  007C66  00                 	db	0
  1225  007C67  00                 	db	0
  1226  007C68  00                 	db	0
  1227  007C69  00                 	db	0
  1228  007C6A  00                 	db	0
  1229  007C6B  00                 	db	0
  1230  007C6C  00                 	db	0
  1231  007C6D  FE                 	db	254
  1232  007C6E  00                 	db	0
  1233  007C6F  00                 	db	0
  1234  007C70  C0                 	db	192
  1235  007C71  60                 	db	96
  1236  007C72  00                 	db	0
  1237  007C73  00                 	db	0
  1238  007C74  00                 	db	0
  1239  007C75  00                 	db	0
  1240  007C76  00                 	db	0
  1241  007C77  00                 	db	0
  1242  007C78  00                 	db	0
  1243  007C79  00                 	db	0
  1244  007C7A  00                 	db	0
  1245  007C7B  00                 	db	0
  1246  007C7C  00                 	db	0
  1247  007C7D  00                 	db	0
  1248  007C7E  00                 	db	0
  1249  007C7F  00                 	db	0
  1250  007C80  00                 	db	0
  1251  007C81  00                 	db	0
  1252  007C82  78                 	db	120
  1253  007C83  FC                 	db	252
  1254  007C84  CC                 	db	204
  1255  007C85  3C                 	db	60
  1256  007C86  FC                 	db	252
  1257  007C87  CC                 	db	204
  1258  007C88  FC                 	db	252
  1259  007C89  6C                 	db	108
  1260  007C8A  00                 	db	0
  1261  007C8B  00                 	db	0
  1262  007C8C  00                 	db	0
  1263  007C8D  00                 	db	0
  1264  007C8E  C0                 	db	192
  1265  007C8F  C0                 	db	192
  1266  007C90  C0                 	db	192
  1267  007C91  F8                 	db	248
  1268  007C92  FC                 	db	252
  1269  007C93  CC                 	db	204
  1270  007C94  CC                 	db	204
  1271  007C95  CC                 	db	204
  1272  007C96  CC                 	db	204
  1273  007C97  F8                 	db	248
  1274  007C98  F8                 	db	248
  1275  007C99  00                 	db	0
  1276  007C9A  00                 	db	0
  1277  007C9B  00                 	db	0
  1278  007C9C  00                 	db	0
  1279  007C9D  00                 	db	0
  1280  007C9E  00                 	db	0
  1281  007C9F  00                 	db	0
  1282  007CA0  70                 	db	112
  1283  007CA1  78                 	db	120
  1284  007CA2  D8                 	db	216
  1285  007CA3  C0                 	db	192
  1286  007CA4  C0                 	db	192
  1287  007CA5  D8                 	db	216
  1288  007CA6  78                 	db	120
  1289  007CA7  70                 	db	112
  1290  007CA8  00                 	db	0
  1291  007CA9  00                 	db	0
  1292  007CAA  00                 	db	0
  1293  007CAB  00                 	db	0
  1294  007CAC  0C                 	db	12
  1295  007CAD  0C                 	db	12
  1296  007CAE  0C                 	db	12
  1297  007CAF  7C                 	db	124
  1298  007CB0  FC                 	db	252
  1299  007CB1  CC                 	db	204
  1300  007CB2  CC                 	db	204
  1301  007CB3  CC                 	db	204
  1302  007CB4  CC                 	db	204
  1303  007CB5  FC                 	db	252
  1304  007CB6  7C                 	db	124
  1305  007CB7  00                 	db	0
  1306  007CB8  00                 	db	0
  1307  007CB9  00                 	db	0
  1308  007CBA  00                 	db	0
  1309  007CBB  00                 	db	0
  1310  007CBC  00                 	db	0
  1311  007CBD  00                 	db	0
  1312  007CBE  70                 	db	112
  1313  007CBF  F8                 	db	248
  1314  007CC0  D8                 	db	216
  1315  007CC1  F8                 	db	248
  1316  007CC2  C0                 	db	192
  1317  007CC3  D8                 	db	216
  1318  007CC4  F8                 	db	248
  1319  007CC5  70                 	db	112
  1320  007CC6  00                 	db	0
  1321  007CC7  00                 	db	0
  1322  007CC8  00                 	db	0
  1323  007CC9  00                 	db	0
  1324  007CCA  30                 	db	48
  1325  007CCB  70                 	db	112
  1326  007CCC  60                 	db	96
  1327  007CCD  F0                 	db	240
  1328  007CCE  F0                 	db	240
  1329  007CCF  60                 	db	96
  1330  007CD0  60                 	db	96
  1331  007CD1  60                 	db	96
  1332  007CD2  60                 	db	96
  1333  007CD3  60                 	db	96
  1334  007CD4  60                 	db	96
  1335  007CD5  00                 	db	0
  1336  007CD6  00                 	db	0
  1337  007CD7  00                 	db	0
  1338  007CD8  00                 	db	0
  1339  007CD9  00                 	db	0
  1340  007CDA  00                 	db	0
  1341  007CDB  00                 	db	0
  1342  007CDC  6C                 	db	108
  1343  007CDD  FC                 	db	252
  1344  007CDE  CC                 	db	204
  1345  007CDF  CC                 	db	204
  1346  007CE0  CC                 	db	204
  1347  007CE1  CC                 	db	204
  1348  007CE2  FC                 	db	252
  1349  007CE3  6C                 	db	108
  1350  007CE4  0C                 	db	12
  1351  007CE5  CC                 	db	204
  1352  007CE6  78                 	db	120
  1353  007CE7  00                 	db	0
  1354  007CE8  C0                 	db	192
  1355  007CE9  C0                 	db	192
  1356  007CEA  C0                 	db	192
  1357  007CEB  D8                 	db	216
  1358  007CEC  FC                 	db	252
  1359  007CED  CC                 	db	204
  1360  007CEE  CC                 	db	204
  1361  007CEF  CC                 	db	204
  1362  007CF0  CC                 	db	204
  1363  007CF1  CC                 	db	204
  1364  007CF2  CC                 	db	204
  1365  007CF3  00                 	db	0
  1366  007CF4  00                 	db	0
  1367  007CF5  00                 	db	0
  1368  007CF6  00                 	db	0
  1369  007CF7  C0                 	db	192
  1370  007CF8  C0                 	db	192
  1371  007CF9  00                 	db	0
  1372  007CFA  C0                 	db	192
  1373  007CFB  C0                 	db	192
  1374  007CFC  C0                 	db	192
  1375  007CFD  C0                 	db	192
  1376  007CFE  C0                 	db	192
  1377  007CFF  C0                 	db	192
  1378  007D00  C0                 	db	192
  1379  007D01  C0                 	db	192
  1380  007D02  00                 	db	0
  1381  007D03  00                 	db	0
  1382  007D04  00                 	db	0
  1383  007D05  00                 	db	0
  1384  007D06  30                 	db	48
  1385  007D07  30                 	db	48
  1386  007D08  00                 	db	0
  1387  007D09  30                 	db	48
  1388  007D0A  30                 	db	48
  1389  007D0B  30                 	db	48
  1390  007D0C  30                 	db	48
  1391  007D0D  30                 	db	48
  1392  007D0E  30                 	db	48
  1393  007D0F  30                 	db	48
  1394  007D10  30                 	db	48
  1395  007D11  30                 	db	48
  1396  007D12  F0                 	db	240
  1397  007D13  E0                 	db	224
  1398  007D14  00                 	db	0
  1399  007D15  C0                 	db	192
  1400  007D16  C0                 	db	192
  1401  007D17  C0                 	db	192
  1402  007D18  CC                 	db	204
  1403  007D19  D8                 	db	216
  1404  007D1A  F0                 	db	240
  1405  007D1B  F8                 	db	248
  1406  007D1C  D8                 	db	216
  1407  007D1D  D8                 	db	216
  1408  007D1E  CC                 	db	204
  1409  007D1F  CC                 	db	204
  1410  007D20  00                 	db	0
  1411  007D21  00                 	db	0
  1412  007D22  00                 	db	0
  1413  007D23  00                 	db	0
  1414  007D24  C0                 	db	192
  1415  007D25  C0                 	db	192
  1416  007D26  C0                 	db	192
  1417  007D27  C0                 	db	192
  1418  007D28  C0                 	db	192
  1419  007D29  C0                 	db	192
  1420  007D2A  C0                 	db	192
  1421  007D2B  C0                 	db	192
  1422  007D2C  C0                 	db	192
  1423  007D2D  C0                 	db	192
  1424  007D2E  C0                 	db	192
  1425  007D2F  00                 	db	0
  1426  007D30  00                 	db	0
  1427  007D31  00                 	db	0
  1428  007D32  00                 	db	0
  1429  007D33  00                 	db	0
  1430  007D34  00                 	db	0
  1431  007D35  00                 	db	0
  1432  007D36  00                 	db	0
  1433  007D37  00                 	db	0
  1434  007D38  00                 	db	0
  1435  007D39  00                 	db	0
  1436  007D3A  D9                 	db	217
  1437  007D3B  80                 	db	128
  1438  007D3C  FF                 	db	255
  1439  007D3D  C0                 	db	192
  1440  007D3E  CC                 	db	204
  1441  007D3F  C0                 	db	192
  1442  007D40  CC                 	db	204
  1443  007D41  C0                 	db	192
  1444  007D42  CC                 	db	204
  1445  007D43  C0                 	db	192
  1446  007D44  CC                 	db	204
  1447  007D45  C0                 	db	192
  1448  007D46  CC                 	db	204
  1449  007D47  C0                 	db	192
  1450  007D48  CC                 	db	204
  1451  007D49  C0                 	db	192
  1452  007D4A  00                 	db	0
  1453  007D4B  00                 	db	0
  1454  007D4C  00                 	db	0
  1455  007D4D  00                 	db	0
  1456  007D4E  00                 	db	0
  1457  007D4F  00                 	db	0
  1458  007D50  00                 	db	0
  1459  007D51  00                 	db	0
  1460  007D52  00                 	db	0
  1461  007D53  00                 	db	0
  1462  007D54  D8                 	db	216
  1463  007D55  FC                 	db	252
  1464  007D56  CC                 	db	204
  1465  007D57  CC                 	db	204
  1466  007D58  CC                 	db	204
  1467  007D59  CC                 	db	204
  1468  007D5A  CC                 	db	204
  1469  007D5B  CC                 	db	204
  1470  007D5C  00                 	db	0
  1471  007D5D  00                 	db	0
  1472  007D5E  00                 	db	0
  1473  007D5F  00                 	db	0
  1474  007D60  00                 	db	0
  1475  007D61  00                 	db	0
  1476  007D62  00                 	db	0
  1477  007D63  78                 	db	120
  1478  007D64  78                 	db	120
  1479  007D65  CC                 	db	204
  1480  007D66  CC                 	db	204
  1481  007D67  CC                 	db	204
  1482  007D68  CC                 	db	204
  1483  007D69  78                 	db	120
  1484  007D6A  78                 	db	120
  1485  007D6B  00                 	db	0
  1486  007D6C  00                 	db	0
  1487  007D6D  00                 	db	0
  1488  007D6E  00                 	db	0
  1489  007D6F  00                 	db	0
  1490  007D70  00                 	db	0
  1491  007D71  00                 	db	0
  1492  007D72  D8                 	db	216
  1493  007D73  FC                 	db	252
  1494  007D74  CC                 	db	204
  1495  007D75  CC                 	db	204
  1496  007D76  CC                 	db	204
  1497  007D77  CC                 	db	204
  1498  007D78  F8                 	db	248
  1499  007D79  D8                 	db	216
  1500  007D7A  C0                 	db	192
  1501  007D7B  C0                 	db	192
  1502  007D7C  C0                 	db	192
  1503  007D7D  00                 	db	0
  1504  007D7E  00                 	db	0
  1505  007D7F  00                 	db	0
  1506  007D80  00                 	db	0
  1507  007D81  6C                 	db	108
  1508  007D82  FC                 	db	252
  1509  007D83  CC                 	db	204
  1510  007D84  CC                 	db	204
  1511  007D85  CC                 	db	204
  1512  007D86  CC                 	db	204
  1513  007D87  FC                 	db	252
  1514  007D88  6C                 	db	108
  1515  007D89  0C                 	db	12
  1516  007D8A  0C                 	db	12
  1517  007D8B  0C                 	db	12
  1518  007D8C  00                 	db	0
  1519  007D8D  00                 	db	0
  1520  007D8E  00                 	db	0
  1521  007D8F  00                 	db	0
  1522  007D90  D0                 	db	208
  1523  007D91  F0                 	db	240
  1524  007D92  C0                 	db	192
  1525  007D93  C0                 	db	192
  1526  007D94  C0                 	db	192
  1527  007D95  C0                 	db	192
  1528  007D96  C0                 	db	192
  1529  007D97  C0                 	db	192
  1530  007D98  00                 	db	0
  1531  007D99  00                 	db	0
  1532  007D9A  00                 	db	0
  1533  007D9B  00                 	db	0
  1534  007D9C  00                 	db	0
  1535  007D9D  00                 	db	0
  1536  007D9E  00                 	db	0
  1537  007D9F  70                 	db	112
  1538  007DA0  F8                 	db	248
  1539  007DA1  C8                 	db	200
  1540  007DA2  E0                 	db	224
  1541  007DA3  38                 	db	56
  1542  007DA4  98                 	db	152
  1543  007DA5  F8                 	db	248
  1544  007DA6  70                 	db	112
  1545  007DA7  00                 	db	0
  1546  007DA8  00                 	db	0
  1547  007DA9  00                 	db	0
  1548  007DAA  00                 	db	0
  1549  007DAB  20                 	db	32
  1550  007DAC  60                 	db	96
  1551  007DAD  60                 	db	96
  1552  007DAE  F0                 	db	240
  1553  007DAF  F0                 	db	240
  1554  007DB0  60                 	db	96
  1555  007DB1  60                 	db	96
  1556  007DB2  60                 	db	96
  1557  007DB3  60                 	db	96
  1558  007DB4  70                 	db	112
  1559  007DB5  70                 	db	112
  1560  007DB6  00                 	db	0
  1561  007DB7  00                 	db	0
  1562  007DB8  00                 	db	0
  1563  007DB9  00                 	db	0
  1564  007DBA  00                 	db	0
  1565  007DBB  00                 	db	0
  1566  007DBC  00                 	db	0
  1567  007DBD  CC                 	db	204
  1568  007DBE  CC                 	db	204
  1569  007DBF  CC                 	db	204
  1570  007DC0  CC                 	db	204
  1571  007DC1  CC                 	db	204
  1572  007DC2  CC                 	db	204
  1573  007DC3  FC                 	db	252
  1574  007DC4  6C                 	db	108
  1575  007DC5  00                 	db	0
  1576  007DC6  00                 	db	0
  1577  007DC7  00                 	db	0
  1578  007DC8  00                 	db	0
  1579  007DC9  00                 	db	0
  1580  007DCA  00                 	db	0
  1581  007DCB  00                 	db	0
  1582  007DCC  C6                 	db	198
  1583  007DCD  C6                 	db	198
  1584  007DCE  6C                 	db	108
  1585  007DCF  6C                 	db	108
  1586  007DD0  6C                 	db	108
  1587  007DD1  38                 	db	56
  1588  007DD2  38                 	db	56
  1589  007DD3  38                 	db	56
  1590  007DD4  00                 	db	0
  1591  007DD5  00                 	db	0
  1592  007DD6  00                 	db	0
  1593  007DD7  00                 	db	0
  1594  007DD8  00                 	db	0
  1595  007DD9  00                 	db	0
  1596  007DDA  00                 	db	0
  1597  007DDB  00                 	db	0
  1598  007DDC  00                 	db	0
  1599  007DDD  00                 	db	0
  1600  007DDE  00                 	db	0
  1601  007DDF  DD                 	db	221
  1602  007DE0  80                 	db	128
  1603  007DE1  DD                 	db	221
  1604  007DE2  80                 	db	128
  1605  007DE3  DD                 	db	221
  1606  007DE4  80                 	db	128
  1607  007DE5  D5                 	db	213
  1608  007DE6  80                 	db	128
  1609  007DE7  55                 	db	85
  1610  007DE8  00                 	db	0
  1611  007DE9  77                 	db	119
  1612  007DEA  00                 	db	0
  1613  007DEB  77                 	db	119
  1614  007DEC  00                 	db	0
  1615  007DED  77                 	db	119
  1616  007DEE  00                 	db	0
  1617  007DEF  00                 	db	0
  1618  007DF0  00                 	db	0
  1619  007DF1  00                 	db	0
  1620  007DF2  00                 	db	0
  1621  007DF3  00                 	db	0
  1622  007DF4  00                 	db	0
  1623  007DF5  00                 	db	0
  1624  007DF6  00                 	db	0
  1625  007DF7  00                 	db	0
  1626  007DF8  00                 	db	0
  1627  007DF9  CC                 	db	204
  1628  007DFA  78                 	db	120
  1629  007DFB  78                 	db	120
  1630  007DFC  30                 	db	48
  1631  007DFD  30                 	db	48
  1632  007DFE  78                 	db	120
  1633  007DFF  78                 	db	120
  1634  007E00  CC                 	db	204
  1635  007E01  00                 	db	0
  1636  007E02  00                 	db	0
  1637  007E03  00                 	db	0
  1638  007E04  00                 	db	0
  1639  007E05  00                 	db	0
  1640  007E06  00                 	db	0
  1641  007E07  00                 	db	0
  1642  007E08  C6                 	db	198
  1643  007E09  C6                 	db	198
  1644  007E0A  6C                 	db	108
  1645  007E0B  6C                 	db	108
  1646  007E0C  6C                 	db	108
  1647  007E0D  38                 	db	56
  1648  007E0E  38                 	db	56
  1649  007E0F  38                 	db	56
  1650  007E10  30                 	db	48
  1651  007E11  F0                 	db	240
  1652  007E12  E0                 	db	224
  1653  007E13  00                 	db	0
  1654  007E14  00                 	db	0
  1655  007E15  00                 	db	0
  1656  007E16  00                 	db	0
  1657  007E17  FC                 	db	252
  1658  007E18  FC                 	db	252
  1659  007E19  18                 	db	24
  1660  007E1A  30                 	db	48
  1661  007E1B  30                 	db	48
  1662  007E1C  60                 	db	96
  1663  007E1D  FC                 	db	252
  1664  007E1E  FC                 	db	252
  1665  007E1F  00                 	db	0
  1666  007E20  00                 	db	0
  1667  007E21  00                 	db	0
  1668  007E22  00                 	db	0
  1669  007E23  30                 	db	48
  1670  007E24  70                 	db	112
  1671  007E25  60                 	db	96
  1672  007E26  60                 	db	96
  1673  007E27  60                 	db	96
  1674  007E28  60                 	db	96
  1675  007E29  C0                 	db	192
  1676  007E2A  C0                 	db	192
  1677  007E2B  60                 	db	96
  1678  007E2C  60                 	db	96
  1679  007E2D  60                 	db	96
  1680  007E2E  60                 	db	96
  1681  007E2F  70                 	db	112
  1682  007E30  30                 	db	48
  1683  007E31  00                 	db	0
  1684  007E32  C0                 	db	192
  1685  007E33  C0                 	db	192
  1686  007E34  C0                 	db	192
  1687  007E35  C0                 	db	192
  1688  007E36  C0                 	db	192
  1689  007E37  C0                 	db	192
  1690  007E38  C0                 	db	192
  1691  007E39  C0                 	db	192
  1692  007E3A  C0                 	db	192
  1693  007E3B  C0                 	db	192
  1694  007E3C  C0                 	db	192
  1695  007E3D  C0                 	db	192
  1696  007E3E  C0                 	db	192
  1697  007E3F  C0                 	db	192
  1698  007E40  00                 	db	0
  1699  007E41  C0                 	db	192
  1700  007E42  E0                 	db	224
  1701  007E43  60                 	db	96
  1702  007E44  60                 	db	96
  1703  007E45  60                 	db	96
  1704  007E46  60                 	db	96
  1705  007E47  30                 	db	48
  1706  007E48  30                 	db	48
  1707  007E49  60                 	db	96
  1708  007E4A  60                 	db	96
  1709  007E4B  60                 	db	96
  1710  007E4C  60                 	db	96
  1711  007E4D  E0                 	db	224
  1712  007E4E  C0                 	db	192
  1713  007E4F  00                 	db	0
  1714  007E50  00                 	db	0
  1715  007E51  00                 	db	0
  1716  007E52  00                 	db	0
  1717  007E53  00                 	db	0
  1718  007E54  E4                 	db	228
  1719  007E55  FC                 	db	252
  1720  007E56  9C                 	db	156
  1721  007E57  00                 	db	0
  1722  007E58  00                 	db	0
  1723  007E59  00                 	db	0
  1724  007E5A  00                 	db	0
  1725  007E5B  00                 	db	0
  1726  007E5C  00                 	db	0
  1727  007E5D  00                 	db	0
  1728  007E5E                     __end_of_arialNarrow_12ptBitmaps:
  1729                           	callstack 0
  1730  007E5E                     _arialNarrow_12ptDescriptors:
  1731                           	callstack 0
  1732  007E5E  08                 	db	8
  1733  007E5F  0000               	dw	0
  1734  007E61  02                 	db	2
  1735  007E62  000F               	dw	15
  1736  007E64  05                 	db	5
  1737  007E65  001E               	dw	30
  1738  007E67  07                 	db	7
  1739  007E68  002D               	dw	45
  1740  007E6A  07                 	db	7
  1741  007E6B  003C               	dw	60
  1742  007E6D  0A                 	db	10
  1743  007E6E  004B               	dw	75
  1744  007E70  08                 	db	8
  1745  007E71  0069               	dw	105
  1746  007E73  02                 	db	2
  1747  007E74  0078               	dw	120
  1748  007E76  04                 	db	4
  1749  007E77  0087               	dw	135
  1750  007E79  04                 	db	4
  1751  007E7A  0096               	dw	150
  1752  007E7C  05                 	db	5
  1753  007E7D  00A5               	dw	165
  1754  007E7F  06                 	db	6
  1755  007E80  00B4               	dw	180
  1756  007E82  02                 	db	2
  1757  007E83  00C3               	dw	195
  1758  007E85  04                 	db	4
  1759  007E86  00D2               	dw	210
  1760  007E88  02                 	db	2
  1761  007E89  00E1               	dw	225
  1762  007E8B  04                 	db	4
  1763  007E8C  00F0               	dw	240
  1764  007E8E  06                 	db	6
  1765  007E8F  00FF               	dw	255
  1766  007E91  04                 	db	4
  1767  007E92  010E               	dw	270
  1768  007E94  06                 	db	6
  1769  007E95  011D               	dw	285
  1770  007E97  06                 	db	6
  1771  007E98  012C               	dw	300
  1772  007E9A  07                 	db	7
  1773  007E9B  013B               	dw	315
  1774  007E9D  06                 	db	6
  1775  007E9E  014A               	dw	330
  1776  007EA0  05                 	db	5
  1777  007EA1  0159               	dw	345
  1778  007EA3  05                 	db	5
  1779  007EA4  0168               	dw	360
  1780  007EA6  06                 	db	6
  1781  007EA7  0177               	dw	375
  1782  007EA9  06                 	db	6
  1783  007EAA  0186               	dw	390
  1784  007EAC  02                 	db	2
  1785  007EAD  0195               	dw	405
  1786  007EAF  02                 	db	2
  1787  007EB0  01A4               	dw	420
  1788  007EB2  06                 	db	6
  1789  007EB3  01B3               	dw	435
  1790  007EB5  06                 	db	6
  1791  007EB6  01C2               	dw	450
  1792  007EB8  06                 	db	6
  1793  007EB9  01D1               	dw	465
  1794  007EBB  06                 	db	6
  1795  007EBC  01E0               	dw	480
  1796  007EBE  0D                 	db	13
  1797  007EBF  01EF               	dw	495
  1798  007EC1  09                 	db	9
  1799  007EC2  020D               	dw	525
  1800  007EC4  07                 	db	7
  1801  007EC5  022B               	dw	555
  1802  007EC7  08                 	db	8
  1803  007EC8  023A               	dw	570
  1804  007ECA  07                 	db	7
  1805  007ECB  0249               	dw	585
  1806  007ECD  07                 	db	7
  1807  007ECE  0258               	dw	600
  1808  007ED0  06                 	db	6
  1809  007ED1  0267               	dw	615
  1810  007ED3  08                 	db	8
  1811  007ED4  0276               	dw	630
  1812  007ED6  07                 	db	7
  1813  007ED7  0285               	dw	645
  1814  007ED9  02                 	db	2
  1815  007EDA  0294               	dw	660
  1816  007EDC  06                 	db	6
  1817  007EDD  02A3               	dw	675
  1818  007EDF  08                 	db	8
  1819  007EE0  02B2               	dw	690
  1820  007EE2  07                 	db	7
  1821  007EE3  02C1               	dw	705
  1822  007EE5  09                 	db	9
  1823  007EE6  02D0               	dw	720
  1824  007EE8  07                 	db	7
  1825  007EE9  02EE               	dw	750
  1826  007EEB  08                 	db	8
  1827  007EEC  02FD               	dw	765
  1828  007EEE  07                 	db	7
  1829  007EEF  030C               	dw	780
  1830  007EF1  09                 	db	9
  1831  007EF2  031B               	dw	795
  1832  007EF4  08                 	db	8
  1833  007EF5  0339               	dw	825
  1834  007EF7  07                 	db	7
  1835  007EF8  0348               	dw	840
  1836  007EFA  08                 	db	8
  1837  007EFB  0357               	dw	855
  1838  007EFD  07                 	db	7
  1839  007EFE  0366               	dw	870
  1840  007F00  09                 	db	9
  1841  007F01  0375               	dw	885
  1842  007F03  0B                 	db	11
  1843  007F04  0393               	dw	915
  1844  007F06  09                 	db	9
  1845  007F07  03B1               	dw	945
  1846  007F09  08                 	db	8
  1847  007F0A  03CF               	dw	975
  1848  007F0C  07                 	db	7
  1849  007F0D  03DE               	dw	990
  1850  007F0F  03                 	db	3
  1851  007F10  03ED               	dw	1005
  1852  007F12  04                 	db	4
  1853  007F13  03FC               	dw	1020
  1854  007F15  03                 	db	3
  1855  007F16  040B               	dw	1035
  1856  007F18  07                 	db	7
  1857  007F19  041A               	dw	1050
  1858  007F1B  07                 	db	7
  1859  007F1C  0429               	dw	1065
  1860  007F1E  03                 	db	3
  1861  007F1F  0438               	dw	1080
  1862  007F21  06                 	db	6
  1863  007F22  0447               	dw	1095
  1864  007F24  06                 	db	6
  1865  007F25  0456               	dw	1110
  1866  007F27  05                 	db	5
  1867  007F28  0465               	dw	1125
  1868  007F2A  06                 	db	6
  1869  007F2B  0474               	dw	1140
  1870  007F2D  05                 	db	5
  1871  007F2E  0483               	dw	1155
  1872  007F30  04                 	db	4
  1873  007F31  0492               	dw	1170
  1874  007F33  06                 	db	6
  1875  007F34  04A1               	dw	1185
  1876  007F36  06                 	db	6
  1877  007F37  04B0               	dw	1200
  1878  007F39  02                 	db	2
  1879  007F3A  04BF               	dw	1215
  1880  007F3C  04                 	db	4
  1881  007F3D  04CE               	dw	1230
  1882  007F3F  06                 	db	6
  1883  007F40  04DD               	dw	1245
  1884  007F42  02                 	db	2
  1885  007F43  04EC               	dw	1260
  1886  007F45  0A                 	db	10
  1887  007F46  04FB               	dw	1275
  1888  007F48  06                 	db	6
  1889  007F49  0519               	dw	1305
  1890  007F4B  06                 	db	6
  1891  007F4C  0528               	dw	1320
  1892  007F4E  06                 	db	6
  1893  007F4F  0537               	dw	1335
  1894  007F51  06                 	db	6
  1895  007F52  0546               	dw	1350
  1896  007F54  04                 	db	4
  1897  007F55  0555               	dw	1365
  1898  007F57  05                 	db	5
  1899  007F58  0564               	dw	1380
  1900  007F5A  04                 	db	4
  1901  007F5B  0573               	dw	1395
  1902  007F5D  06                 	db	6
  1903  007F5E  0582               	dw	1410
  1904  007F60  07                 	db	7
  1905  007F61  0591               	dw	1425
  1906  007F63  09                 	db	9
  1907  007F64  05A0               	dw	1440
  1908  007F66  06                 	db	6
  1909  007F67  05BE               	dw	1470
  1910  007F69  07                 	db	7
  1911  007F6A  05CD               	dw	1485
  1912  007F6C  06                 	db	6
  1913  007F6D  05DC               	dw	1500
  1914  007F6F  04                 	db	4
  1915  007F70  05EB               	dw	1515
  1916  007F72  02                 	db	2
  1917  007F73  05FA               	dw	1530
  1918  007F75  04                 	db	4
  1919  007F76  0609               	dw	1545
  1920  007F78  06                 	db	6
  1921  007F79  0618               	dw	1560
  1922  007F7B                     __end_of_arialNarrow_12ptDescriptors:
  1923                           	callstack 0
  1924  007F7B                     _arialNarrow_12ptFontInfo:
  1925                           	callstack 0
  1926  007F7B  0F                 	db	15
  1927  007F7C  20                 	db	32
  1928  007F7D  7E                 	db	126
  1929  007F7E  5E                 	db	low _arialNarrow_12ptDescriptors
  1930  007F7F  7E                 	db	high _arialNarrow_12ptDescriptors
  1931  007F80  37                 	db	low _arialNarrow_12ptBitmaps
  1932  007F81  78                 	db	high _arialNarrow_12ptBitmaps
  1933  007F82                     __end_of_arialNarrow_12ptFontInfo:
  1934                           	callstack 0
  1935  0000                     _ANSB2	set	31178
  1936  0000                     _ANSB1	set	31177
  1937  0000                     _WPUB	set	3937
  1938  0000                     _PORTBbits	set	3969
  1939  0000                     _ADRESL	set	4035
  1940  0000                     _ADRESH	set	4036
  1941  0000                     _ADCON0	set	4034
  1942  0000                     _LATA	set	3977
  1943  0000                     _TRISC	set	3988
  1944  0000                     _TRISA	set	3986
  1945  0000                     _PORTA	set	3968
  1946  0000                     _ADCON2	set	4032
  1947  0000                     _T2CONbits	set	4026
  1948  0000                     _CCPR2L	set	3943
  1949  0000                     _CCP2CONbits	set	3942
  1950  0000                     _PR2	set	4027
  1951  0000                     _TMR0L	set	4054
  1952  0000                     _TMR0H	set	4055
  1953  0000                     _T0CON	set	4053
  1954  0000                     _OSCCON	set	4051
  1955  0000                     _TMR0IF	set	32658
  1956  0000                     _LATB4	set	31828
  1957  0000                     _LATB1	set	31825
  1958  0000                     _INT1IF	set	32640
  1959  0000                     _TRISB4	set	31900
  1960  0000                     _LATB3	set	31827
  1961  0000                     _TRISB3	set	31899
  1962  0000                     _RBPU	set	32655
  1963  0000                     _TRISB1	set	31897
  1964  0000                     _LATB2	set	31826
  1965  0000                     _TRISB2	set	31898
  1966  0000                     _LATC2	set	31834
  1967  0000                     _LATC5	set	31837
  1968  0000                     _TRISC4	set	31908
  1969  0000                     _TRISC3	set	31907
  1970  0000                     _TRISC2	set	31906
  1971  0000                     _TRISC5	set	31909
  1972  0000                     _LATC3	set	31835
  1973  0000                     _LATC4	set	31836
  1974  0000                     _TMR2IF	set	31985
  1975  0000                     _TRISC1	set	31905
  1976  0000                     _TMR0IE	set	32661
  1977  0000                     _LATC0	set	31832
  1978  0000                     _TRISC0	set	31904
  1979  0000                     _INTEDG1	set	32653
  1980  0000                     _INT1IE	set	32643
  1981  0000                     _GIE	set	32663
  1982  0000                     _PLLEN	set	31966
  1983  007F82                     STR_15:
  1984  007F82  50                 	db	80	;'P'
  1985  007F83  4C                 	db	76	;'L'
  1986  007F84  41                 	db	65	;'A'
  1987  007F85  59                 	db	89	;'Y'
  1988  007F86  45                 	db	69	;'E'
  1989  007F87  52                 	db	82	;'R'
  1990  007F88  20                 	db	32
  1991  007F89  31                 	db	49	;'1'
  1992  007F8A  20                 	db	32
  1993  007F8B  57                 	db	87	;'W'
  1994  007F8C  49                 	db	73	;'I'
  1995  007F8D  4E                 	db	78	;'N'
  1996  007F8E  00                 	db	0
  1997  007F8F                     STR_14:
  1998  007F8F  50                 	db	80	;'P'
  1999  007F90  4C                 	db	76	;'L'
  2000  007F91  41                 	db	65	;'A'
  2001  007F92  59                 	db	89	;'Y'
  2002  007F93  45                 	db	69	;'E'
  2003  007F94  52                 	db	82	;'R'
  2004  007F95  20                 	db	32
  2005  007F96  32                 	db	50	;'2'
  2006  007F97  20                 	db	32
  2007  007F98  57                 	db	87	;'W'
  2008  007F99  49                 	db	73	;'I'
  2009  007F9A  4E                 	db	78	;'N'
  2010  007F9B  00                 	db	0
  2011  007F9C                     STR_11:
  2012  007F9C  50                 	db	80	;'P'
  2013  007F9D  41                 	db	65	;'A'
  2014  007F9E  52                 	db	82	;'R'
  2015  007F9F  41                 	db	65	;'A'
  2016  007FA0  4D                 	db	77	;'M'
  2017  007FA1  45                 	db	69	;'E'
  2018  007FA2  54                 	db	84	;'T'
  2019  007FA3  45                 	db	69	;'E'
  2020  007FA4  52                 	db	82	;'R'
  2021  007FA5  53                 	db	83	;'S'
  2022  007FA6  00                 	db	0
  2023  007FA7                     STR_12:
  2024  007FA7  4C                 	db	76	;'L'
  2025  007FA8  55                 	db	85	;'U'
  2026  007FA9  4D                 	db	77	;'M'
  2027  007FAA  49                 	db	73	;'I'
  2028  007FAB  4E                 	db	78	;'N'
  2029  007FAC  4F                 	db	79	;'O'
  2030  007FAD  53                 	db	83	;'S'
  2031  007FAE  49                 	db	73	;'I'
  2032  007FAF  54                 	db	84	;'T'
  2033  007FB0  59                 	db	89	;'Y'
  2034  007FB1  00                 	db	0
  2035  007FB2                     STR_6:
  2036  007FB2  50                 	db	80	;'P'
  2037  007FB3  61                 	db	97	;'a'
  2038  007FB4  72                 	db	114	;'r'
  2039  007FB5  61                 	db	97	;'a'
  2040  007FB6  6D                 	db	109	;'m'
  2041  007FB7  65                 	db	101	;'e'
  2042  007FB8  74                 	db	116	;'t'
  2043  007FB9  72                 	db	114	;'r'
  2044  007FBA  65                 	db	101	;'e'
  2045  007FBB  73                 	db	115	;'s'
  2046  007FBC  00                 	db	0
  2047  007FBD                     STR_1:
  2048  007FBD  4D                 	db	77	;'M'
  2049  007FBE  65                 	db	101	;'e'
  2050  007FBF  6E                 	db	110	;'n'
  2051  007FC0  75                 	db	117	;'u'
  2052  007FC1  53                 	db	83	;'S'
  2053  007FC2  74                 	db	116	;'t'
  2054  007FC3  61                 	db	97	;'a'
  2055  007FC4  72                 	db	114	;'r'
  2056  007FC5  74                 	db	116	;'t'
  2057  007FC6  00                 	db	0
  2058  007FC7                     STR_9:
  2059  007FC7  4E                 	db	78	;'N'
  2060  007FC8  65                 	db	101	;'e'
  2061  007FC9  77                 	db	119	;'w'
  2062  007FCA  20                 	db	32
  2063  007FCB  47                 	db	71	;'G'
  2064  007FCC  61                 	db	97	;'a'
  2065  007FCD  6D                 	db	109	;'m'
  2066  007FCE  65                 	db	101	;'e'
  2067  007FCF  00                 	db	0
  2068  007FD0                     STR_7:
  2069  007FD0  54                 	db	84	;'T'
  2070  007FD1  75                 	db	117	;'u'
  2071  007FD2  72                 	db	114	;'r'
  2072  007FD3  6E                 	db	110	;'n'
  2073  007FD4  20                 	db	32
  2074  007FD5  4F                 	db	79	;'O'
  2075  007FD6  66                 	db	102	;'f'
  2076  007FD7  66                 	db	102	;'f'
  2077  007FD8  00                 	db	0
  2078  007FD9                     STR_4:
  2079  007FD9  31                 	db	49	;'1'
  2080  007FDA  20                 	db	32
  2081  007FDB  50                 	db	80	;'P'
  2082  007FDC  6C                 	db	108	;'l'
  2083  007FDD  61                 	db	97	;'a'
  2084  007FDE  79                 	db	121	;'y'
  2085  007FDF  65                 	db	101	;'e'
  2086  007FE0  72                 	db	114	;'r'
  2087  007FE1  00                 	db	0
  2088  007FE2                     STR_5:
  2089  007FE2  32                 	db	50	;'2'
  2090  007FE3  20                 	db	32
  2091  007FE4  50                 	db	80	;'P'
  2092  007FE5  6C                 	db	108	;'l'
  2093  007FE6  61                 	db	97	;'a'
  2094  007FE7  79                 	db	121	;'y'
  2095  007FE8  65                 	db	101	;'e'
  2096  007FE9  72                 	db	114	;'r'
  2097  007FEA  00                 	db	0
  2098  007FEB                     STR_10:
  2099  007FEB  57                 	db	87	;'W'
  2100  007FEC  45                 	db	69	;'E'
  2101  007FED  4C                 	db	76	;'L'
  2102  007FEE  43                 	db	67	;'C'
  2103  007FEF  4F                 	db	79	;'O'
  2104  007FF0  4D                 	db	77	;'M'
  2105  007FF1  45                 	db	69	;'E'
  2106  007FF2  00                 	db	0
  2107  007FF3                     STR_13:
  2108  007FF3  4C                 	db	76	;'L'
  2109  007FF4  45                 	db	69	;'E'
  2110  007FF5  56                 	db	86	;'V'
  2111  007FF6  45                 	db	69	;'E'
  2112  007FF7  4C                 	db	76	;'L'
  2113  007FF8  00                 	db	0
  2114  007FF9                     STR_2:
  2115  007FF9  25                 	db	37
  2116  007FFA  64                 	db	100	;'d'
  2117  007FFB  00                 	db	0
  2118  007FFC                     STR_8:
  2119  007FFC  58                 	db	88	;'X'
  2120  007FFD  00                 	db	0
  2121  007FFE  00                 	db	0	; dummy byte at the end
  2122  0000                     
  2123                           ; #config settings
  2124                           
  2125                           	psect	cinit
  2126  0057B2                     __pcinit:
  2127                           	callstack 0
  2128  0057B2                     start_initialization:
  2129                           	callstack 0
  2130  0057B2                     __initialization:
  2131                           	callstack 0
  2132                           
  2133                           ; Clear objects allocated to BANK1 (240 bytes)
  2134  0057B2  EE01  F000         	lfsr	0,__pbssBANK1
  2135  0057B6  0EF0               	movlw	240
  2136  0057B8                     clear_0:
  2137  0057B8  6AEE               	clrf	postinc0,c
  2138  0057BA  06E8               	decf	wreg,f,c
  2139  0057BC  E1FD               	bnz	clear_0
  2140                           
  2141                           ; Clear objects allocated to BANK0 (74 bytes)
  2142  0057BE  EE00  F060         	lfsr	0,__pbssBANK0
  2143  0057C2  0E4A               	movlw	74
  2144  0057C4                     clear_1:
  2145  0057C4  6AEE               	clrf	postinc0,c
  2146  0057C6  06E8               	decf	wreg,f,c
  2147  0057C8  E1FD               	bnz	clear_1
  2148                           
  2149                           ; Clear objects allocated to COMRAM (8 bytes)
  2150  0057CA  EE00  F046         	lfsr	0,__pbssCOMRAM
  2151  0057CE  0E08               	movlw	8
  2152  0057D0                     clear_2:
  2153  0057D0  6AEE               	clrf	postinc0,c
  2154  0057D2  06E8               	decf	wreg,f,c
  2155  0057D4  E1FD               	bnz	clear_2
  2156  0057D6                     end_of_initialization:
  2157                           	callstack 0
  2158  0057D6                     __end_of__initialization:
  2159                           	callstack 0
  2160  0057D6  904E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2161  0057D8  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2162  0057DA  0E00               	movlw	low (__Lmediumconst shr (0+16))
  2163  0057DC  6EF8               	movwf	tblptru,c
  2164  0057DE  0100               	movlb	0
  2165  0057E0  EF37  F02D         	goto	_main	;jump to C main() function
  2166                           
  2167                           	psect	bssCOMRAM
  2168  000046                     __pbssCOMRAM:
  2169                           	callstack 0
  2170  000046                     _width:
  2171                           	callstack 0
  2172  000046                     	ds	2
  2173  000048                     _prec:
  2174                           	callstack 0
  2175  000048                     	ds	2
  2176  00004A                     _flags:
  2177                           	callstack 0
  2178  00004A                     	ds	2
  2179  00004C                     _gameStateMachine:
  2180                           	callstack 0
  2181  00004C                     	ds	1
  2182  00004D                     _touchScreenState:
  2183                           	callstack 0
  2184  00004D                     	ds	1
  2185                           
  2186                           	psect	bssBANK0
  2187  000060                     __pbssBANK0:
  2188                           	callstack 0
  2189  000060                     _theXF:
  2190                           	callstack 0
  2191  000060                     	ds	38
  2192  000086                     _nout:
  2193                           	callstack 0
  2194  000086                     	ds	2
  2195  000088                     _displayState:
  2196                           	callstack 0
  2197  000088                     	ds	1
  2198  000089                     _sleepState:
  2199                           	callstack 0
  2200  000089                     	ds	1
  2201  00008A                     _dbuf:
  2202                           	callstack 0
  2203  00008A                     	ds	32
  2204                           
  2205                           	psect	bssBANK1
  2206  000100                     __pbssBANK1:
  2207                           	callstack 0
  2208  000100                     _g1:
  2209                           	callstack 0
  2210  000100                     	ds	240
  2211                           
  2212                           	psect	cstackBANK0
  2213  0000AA                     __pcstackBANK0:
  2214                           	callstack 0
  2215  0000AA                     ??_touchScreenController:
  2216  0000AA                     _dtoa$5516:
  2217                           	callstack 0
  2218  0000AA                     LCD_Bitmap@bfOffBits:
  2219                           	callstack 0
  2220                           
  2221                           ; 4 bytes @ 0x0
  2222  0000AA                     	ds	2
  2223  0000AC                     dtoa@p:
  2224                           	callstack 0
  2225                           
  2226                           ; 2 bytes @ 0x2
  2227  0000AC                     	ds	2
  2228  0000AE                     LCD_Bitmap@endOfImage:
  2229                           	callstack 0
  2230  0000AE                     dtoa@w:
  2231                           	callstack 0
  2232                           
  2233                           ; 2 bytes @ 0x4
  2234  0000AE                     	ds	1
  2235  0000AF                     LCD_Bitmap@jumpCount:
  2236                           	callstack 0
  2237                           
  2238                           ; 2 bytes @ 0x5
  2239  0000AF                     	ds	1
  2240  0000B0                     touchScreenController@valueY:
  2241                           	callstack 0
  2242  0000B0                     dtoa@s:
  2243                           	callstack 0
  2244                           
  2245                           ; 2 bytes @ 0x6
  2246  0000B0                     	ds	1
  2247  0000B1                     LCD_Bitmap@curYPos:
  2248                           	callstack 0
  2249                           
  2250                           ; 2 bytes @ 0x7
  2251  0000B1                     	ds	1
  2252  0000B2                     touchScreenController@i:
  2253                           	callstack 0
  2254  0000B2                     dtoa@n:
  2255                           	callstack 0
  2256                           
  2257                           ; 8 bytes @ 0x8
  2258  0000B2                     	ds	1
  2259  0000B3                     LCD_Bitmap@colorTablePtr:
  2260                           	callstack 0
  2261                           
  2262                           ; 2 bytes @ 0x9
  2263  0000B3                     	ds	1
  2264  0000B4                     touchScreenController@valueX:
  2265                           	callstack 0
  2266                           
  2267                           ; 2 bytes @ 0xA
  2268  0000B4                     	ds	1
  2269  0000B5                     LCD_Bitmap@biHeight:
  2270                           	callstack 0
  2271                           
  2272                           ; 2 bytes @ 0xB
  2273  0000B5                     	ds	1
  2274  0000B6                     touchScreenSM@g:
  2275                           	callstack 0
  2276                           
  2277                           ; 2 bytes @ 0xC
  2278  0000B6                     	ds	1
  2279  0000B7                     LCD_Bitmap@curXPos:
  2280                           	callstack 0
  2281                           
  2282                           ; 2 bytes @ 0xD
  2283  0000B7                     	ds	1
  2284  0000B8                     ??_touchScreenSM:
  2285                           
  2286                           ; 1 bytes @ 0xE
  2287  0000B8                     	ds	1
  2288  0000B9                     LCD_Bitmap@color:
  2289                           	callstack 0
  2290                           
  2291                           ; 2 bytes @ 0xF
  2292  0000B9                     	ds	1
  2293  0000BA                     dtoa@i:
  2294                           	callstack 0
  2295                           
  2296                           ; 2 bytes @ 0x10
  2297  0000BA                     	ds	1
  2298  0000BB                     LCD_Bitmap@strPtr:
  2299                           	callstack 0
  2300                           
  2301                           ; 2 bytes @ 0x11
  2302  0000BB                     	ds	1
  2303  0000BC                     vfpfcnvrt@ll:
  2304                           	callstack 0
  2305                           
  2306                           ; 8 bytes @ 0x12
  2307  0000BC                     	ds	1
  2308  0000BD                     LCD_Bitmap@newY:
  2309                           	callstack 0
  2310                           
  2311                           ; 2 bytes @ 0x13
  2312  0000BD                     	ds	2
  2313  0000BF                     LCD_Bitmap@pixelCount:
  2314                           	callstack 0
  2315                           
  2316                           ; 1 bytes @ 0x15
  2317  0000BF                     	ds	1
  2318  0000C0                     LCD_Bitmap@biWidth:
  2319                           	callstack 0
  2320                           
  2321                           ; 2 bytes @ 0x16
  2322  0000C0                     	ds	2
  2323  0000C2                     LCD_Bitmap@jumpColor:
  2324                           	callstack 0
  2325                           
  2326                           ; 2 bytes @ 0x18
  2327  0000C2                     	ds	2
  2328  0000C4                     ?_vfprintf:
  2329                           	callstack 0
  2330  0000C4                     vfprintf@fp:
  2331                           	callstack 0
  2332  0000C4                     LCD_Bitmap@i:
  2333                           	callstack 0
  2334                           
  2335                           ; 2 bytes @ 0x1A
  2336  0000C4                     	ds	1
  2337  0000C5                     vfprintf@fmt:
  2338                           	callstack 0
  2339                           
  2340                           ; 2 bytes @ 0x1B
  2341  0000C5                     	ds	1
  2342  0000C6                     ??_LCD_ButtonDraw:
  2343                           
  2344                           ; 1 bytes @ 0x1C
  2345  0000C6                     	ds	1
  2346  0000C7                     vfprintf@ap:
  2347                           	callstack 0
  2348                           
  2349                           ; 1 bytes @ 0x1D
  2350  0000C7                     	ds	1
  2351  0000C8                     ?_sprintf:
  2352                           	callstack 0
  2353  0000C8                     sprintf@s:
  2354                           	callstack 0
  2355                           
  2356                           ; 2 bytes @ 0x1E
  2357  0000C8                     	ds	2
  2358  0000CA                     sprintf@fmt:
  2359                           	callstack 0
  2360                           
  2361                           ; 2 bytes @ 0x20
  2362  0000CA                     	ds	4
  2363  0000CE                     sprintf@ap:
  2364                           	callstack 0
  2365                           
  2366                           ; 1 bytes @ 0x24
  2367  0000CE                     	ds	1
  2368  0000CF                     sprintf@f:
  2369                           	callstack 0
  2370                           
  2371                           ; 6 bytes @ 0x25
  2372  0000CF                     	ds	3
  2373  0000D2                     LCD_ButtonDraw@tempChar:
  2374                           	callstack 0
  2375                           
  2376                           ; 1 bytes @ 0x28
  2377  0000D2                     	ds	1
  2378  0000D3                     LCD_ButtonDraw@width:
  2379                           	callstack 0
  2380                           
  2381                           ; 2 bytes @ 0x29
  2382  0000D3                     	ds	2
  2383  0000D5                     Score_draw@s:
  2384                           	callstack 0
  2385  0000D5                     LCD_ButtonDraw@x1:
  2386                           	callstack 0
  2387                           
  2388                           ; 2 bytes @ 0x2B
  2389  0000D5                     	ds	2
  2390  0000D7                     LCD_ButtonDraw@x2:
  2391                           	callstack 0
  2392                           
  2393                           ; 2 bytes @ 0x2D
  2394  0000D7                     	ds	2
  2395  0000D9                     LCD_ButtonDraw@y1:
  2396                           	callstack 0
  2397                           
  2398                           ; 2 bytes @ 0x2F
  2399  0000D9                     	ds	2
  2400  0000DB                     LCD_ButtonDraw@y2:
  2401                           	callstack 0
  2402                           
  2403                           ; 2 bytes @ 0x31
  2404  0000DB                     	ds	2
  2405  0000DD                     LCD_ButtonDraw@xText:
  2406                           	callstack 0
  2407                           
  2408                           ; 2 bytes @ 0x33
  2409  0000DD                     	ds	2
  2410  0000DF                     LCD_ButtonDraw@yText:
  2411                           	callstack 0
  2412                           
  2413                           ; 2 bytes @ 0x35
  2414  0000DF                     	ds	2
  2415  0000E1                     LCD_ButtonDraw@i:
  2416                           	callstack 0
  2417                           
  2418                           ; 1 bytes @ 0x37
  2419  0000E1                     	ds	1
  2420  0000E2                     LCD_ButtonDraw@bmpPtr:
  2421                           	callstack 0
  2422                           
  2423                           ; 2 bytes @ 0x38
  2424  0000E2                     	ds	2
  2425  0000E4                     Menu_parametersDraw@g:
  2426                           	callstack 0
  2427  0000E4                     Menu_inGameDraw@g:
  2428                           	callstack 0
  2429                           
  2430                           ; 2 bytes @ 0x3A
  2431  0000E4                     	ds	2
  2432  0000E6                     displayController@g:
  2433                           	callstack 0
  2434                           
  2435                           ; 2 bytes @ 0x3C
  2436  0000E6                     	ds	2
  2437  0000E8                     displayController@ev:
  2438                           	callstack 0
  2439                           
  2440                           ; 1 bytes @ 0x3E
  2441  0000E8                     	ds	1
  2442  0000E9                     ??_displayController:
  2443                           
  2444                           ; 1 bytes @ 0x3F
  2445  0000E9                     	ds	2
  2446  0000EB                     displayInit@g:
  2447                           	callstack 0
  2448  0000EB                     displaySM@g:
  2449                           	callstack 0
  2450                           
  2451                           ; 2 bytes @ 0x41
  2452  0000EB                     	ds	2
  2453  0000ED                     ??_displaySM:
  2454  0000ED                     sleepInit@g:
  2455                           	callstack 0
  2456                           
  2457                           ; 2 bytes @ 0x43
  2458  0000ED                     	ds	2
  2459  0000EF                     ??_Factory_init:
  2460  0000EF                     displaySM@ev:
  2461                           	callstack 0
  2462                           
  2463                           ; 1 bytes @ 0x45
  2464  0000EF                     	ds	1
  2465  0000F0                     Factory_exec@ev:
  2466                           	callstack 0
  2467                           
  2468                           ; 1 bytes @ 0x46
  2469  0000F0                     	ds	1
  2470                           
  2471                           	psect	cstackCOMRAM
  2472  000001                     __pcstackCOMRAM:
  2473                           	callstack 0
  2474  000001                     ?i2___awmod:
  2475                           	callstack 0
  2476  000001                     i2ENTERCRITICAL@inISR:
  2477                           	callstack 0
  2478  000001                     i2LEAVECRITICAL@inISR:
  2479                           	callstack 0
  2480  000001                     i2___awmod@dividend:
  2481                           	callstack 0
  2482                           
  2483                           ; 2 bytes @ 0x0
  2484  000001                     	ds	1
  2485  000002                     i2XF_unscheduleTimer@inISR:
  2486                           	callstack 0
  2487                           
  2488                           ; 1 bytes @ 0x1
  2489  000002                     	ds	1
  2490  000003                     i2XF_unscheduleTimer@id:
  2491                           	callstack 0
  2492  000003                     i2___awmod@divisor:
  2493                           	callstack 0
  2494                           
  2495                           ; 2 bytes @ 0x2
  2496  000003                     	ds	2
  2497  000005                     i2___awmod@counter:
  2498                           	callstack 0
  2499                           
  2500                           ; 1 bytes @ 0x4
  2501  000005                     	ds	1
  2502  000006                     i2___awmod@sign:
  2503                           	callstack 0
  2504                           
  2505                           ; 1 bytes @ 0x5
  2506  000006                     	ds	1
  2507  000007                     i2XF_pushEvent@inISR:
  2508                           	callstack 0
  2509                           
  2510                           ; 1 bytes @ 0x6
  2511  000007                     	ds	1
  2512  000008                     i2XF_pushEvent@ev:
  2513                           	callstack 0
  2514                           
  2515                           ; 1 bytes @ 0x7
  2516  000008                     	ds	1
  2517  000009                     i2XF_pushEvent@temp:
  2518                           	callstack 0
  2519                           
  2520                           ; 1 bytes @ 0x8
  2521  000009                     	ds	1
  2522  00000A                     
  2523                           ; 1 bytes @ 0x9
  2524  00000A                     	ds	2
  2525  00000C                     XF_decrementAndQueueTimers@i:
  2526                           	callstack 0
  2527                           
  2528                           ; 2 bytes @ 0xB
  2529  00000C                     	ds	2
  2530  00000E                     ??_isr:
  2531                           
  2532                           ; 1 bytes @ 0xD
  2533  00000E                     	ds	4
  2534  000012                     ??_LCD_Lowlevel_Init:
  2535  000012                     ??_sleepController:
  2536  000012                     ?_LCD_Read:
  2537                           	callstack 0
  2538  000012                     ?_strlen:
  2539                           	callstack 0
  2540  000012                     ?_RGB2LCD:
  2541                           	callstack 0
  2542  000012                     ?___awdiv:
  2543                           	callstack 0
  2544  000012                     ?___awmod:
  2545                           	callstack 0
  2546  000012                     ?___lwmod:
  2547                           	callstack 0
  2548  000012                     ?___xxtofl:
  2549                           	callstack 0
  2550  000012                     ?___aodiv:
  2551                           	callstack 0
  2552  000012                     ?___aomod:
  2553                           	callstack 0
  2554  000012                     configMeasure@channel:
  2555                           	callstack 0
  2556  000012                     ENTERCRITICAL@inISR:
  2557                           	callstack 0
  2558  000012                     LEAVECRITICAL@inISR:
  2559                           	callstack 0
  2560  000012                     Ball_init@b:
  2561                           	callstack 0
  2562  000012                     Ball_Update@b:
  2563                           	callstack 0
  2564  000012                     Paddle_init@p:
  2565                           	callstack 0
  2566  000012                     Paddle_addX@p:
  2567                           	callstack 0
  2568  000012                     Score_init@s:
  2569                           	callstack 0
  2570  000012                     GameParameters_setBackLight@s:
  2571                           	callstack 0
  2572  000012                     GameParameters_setLevel@s:
  2573                           	callstack 0
  2574  000012                     GameParameters_resetPos@s:
  2575                           	callstack 0
  2576  000012                     GameParameters_setX@s:
  2577                           	callstack 0
  2578  000012                     GameParameters_setY@s:
  2579                           	callstack 0
  2580  000012                     LCD_Fill@color:
  2581                           	callstack 0
  2582  000012                     LCD_SliderCreate@posX:
  2583                           	callstack 0
  2584  000012                     LCD_ButtonCreate@posX:
  2585                           	callstack 0
  2586  000012                     LCD_InButton@button:
  2587                           	callstack 0
  2588  000012                     LCD_InSlider@slider:
  2589                           	callstack 0
  2590  000012                     LCD_DrawRect@posX1:
  2591                           	callstack 0
  2592  000012                     RGB2LCD@colorTableEntry:
  2593                           	callstack 0
  2594  000012                     LCD_Read@posX:
  2595                           	callstack 0
  2596  000012                     XF_init@i:
  2597                           	callstack 0
  2598  000012                     ___awdiv@dividend:
  2599                           	callstack 0
  2600  000012                     ___awmod@dividend:
  2601                           	callstack 0
  2602  000012                     ___lwmod@dividend:
  2603                           	callstack 0
  2604  000012                     fputc@c:
  2605                           	callstack 0
  2606  000012                     strlen@s:
  2607                           	callstack 0
  2608  000012                     ___xxtofl@val:
  2609                           	callstack 0
  2610  000012                     ___aodiv@dividend:
  2611                           	callstack 0
  2612  000012                     ___aomod@dividend:
  2613                           	callstack 0
  2614                           
  2615                           ; 8 bytes @ 0x11
  2616  000012                     	ds	1
  2617  000013                     XF_unscheduleTimer@inISR:
  2618                           	callstack 0
  2619  000013                     LCD_Lowlevel_Init@i:
  2620                           	callstack 0
  2621                           
  2622                           ; 4 bytes @ 0x12
  2623  000013                     	ds	1
  2624  000014                     ??_sleepSM:
  2625  000014                     ??_Ball_Update:
  2626  000014                     ??_RGB2LCD:
  2627  000014                     LCD_Fill@colorH:
  2628                           	callstack 0
  2629  000014                     XF_unscheduleTimer@id:
  2630                           	callstack 0
  2631  000014                     fputc@fp:
  2632                           	callstack 0
  2633  000014                     Paddle_init@team:
  2634                           	callstack 0
  2635  000014                     Paddle_addX@value:
  2636                           	callstack 0
  2637  000014                     GameParameters_setBackLight@value:
  2638                           	callstack 0
  2639  000014                     GameParameters_setLevel@value:
  2640                           	callstack 0
  2641  000014                     GameParameters_setX@value:
  2642                           	callstack 0
  2643  000014                     GameParameters_setY@value:
  2644                           	callstack 0
  2645  000014                     LCD_SliderCreate@posY:
  2646                           	callstack 0
  2647  000014                     LCD_ButtonCreate@posY:
  2648                           	callstack 0
  2649  000014                     LCD_InButton@posX:
  2650                           	callstack 0
  2651  000014                     LCD_InSlider@posX:
  2652                           	callstack 0
  2653  000014                     LCD_DrawRect@posY1:
  2654                           	callstack 0
  2655  000014                     LCD_Read@posY:
  2656                           	callstack 0
  2657  000014                     ___awdiv@divisor:
  2658                           	callstack 0
  2659  000014                     ___awmod@divisor:
  2660                           	callstack 0
  2661  000014                     ___lwmod@divisor:
  2662                           	callstack 0
  2663  000014                     strlen@a:
  2664                           	callstack 0
  2665                           
  2666                           ; 2 bytes @ 0x13
  2667  000014                     	ds	1
  2668  000015                     ??_fputc:
  2669  000015                     LCD_Fill@colorL:
  2670                           	callstack 0
  2671                           
  2672                           ; 1 bytes @ 0x14
  2673  000015                     	ds	1
  2674  000016                     ??_LCD_Read:
  2675  000016                     ??___xxtofl:
  2676  000016                     sleepSM@ev:
  2677                           	callstack 0
  2678  000016                     ___awdiv@counter:
  2679                           	callstack 0
  2680  000016                     ___awmod@counter:
  2681                           	callstack 0
  2682  000016                     ___lwmod@counter:
  2683                           	callstack 0
  2684  000016                     Paddle_addX@add:
  2685                           	callstack 0
  2686  000016                     LCD_Fill@column:
  2687                           	callstack 0
  2688  000016                     LCD_SliderCreate@width:
  2689                           	callstack 0
  2690  000016                     LCD_ButtonCreate@width:
  2691                           	callstack 0
  2692  000016                     LCD_InButton@posY:
  2693                           	callstack 0
  2694  000016                     LCD_InSlider@posY:
  2695                           	callstack 0
  2696  000016                     LCD_DrawRect@posX2:
  2697                           	callstack 0
  2698  000016                     desactivateTimerSleep@i:
  2699                           	callstack 0
  2700  000016                     levelController@g:
  2701                           	callstack 0
  2702                           
  2703                           ; 2 bytes @ 0x15
  2704  000016                     	ds	1
  2705  000017                     ??_LCD_Init:
  2706  000017                     ___awdiv@sign:
  2707                           	callstack 0
  2708  000017                     ___awmod@sign:
  2709                           	callstack 0
  2710                           
  2711                           ; 1 bytes @ 0x16
  2712  000017                     	ds	1
  2713  000018                     ??_Paddle_addX:
  2714  000018                     ??_LCD_InButton:
  2715  000018                     ??_LCD_InSlider:
  2716  000018                     LCD_Init@i:
  2717                           	callstack 0
  2718  000018                     XF_pushEvent@inISR:
  2719                           	callstack 0
  2720  000018                     XF_popEvent@ev:
  2721                           	callstack 0
  2722  000018                     LCD_Fill@page:
  2723                           	callstack 0
  2724  000018                     LCD_SliderCreate@height:
  2725                           	callstack 0
  2726  000018                     LCD_ButtonCreate@height:
  2727                           	callstack 0
  2728  000018                     LCD_DrawRect@posY2:
  2729                           	callstack 0
  2730  000018                     RGB2LCD@red:
  2731                           	callstack 0
  2732  000018                     LCD_Read@color:
  2733                           	callstack 0
  2734  000018                     backlightController@g:
  2735                           	callstack 0
  2736  000018                     ___awdiv@quotient:
  2737                           	callstack 0
  2738                           
  2739                           ; 2 bytes @ 0x17
  2740  000018                     	ds	1
  2741  000019                     XF_pushEvent@ev:
  2742                           	callstack 0
  2743  000019                     XF_popEvent@inISR:
  2744                           	callstack 0
  2745                           
  2746                           ; 1 bytes @ 0x18
  2747  000019                     	ds	1
  2748  00001A                     ?___wmul:
  2749                           	callstack 0
  2750  00001A                     LCD_DrawRect@fill:
  2751                           	callstack 0
  2752  00001A                     XF_pushEvent@temp:
  2753                           	callstack 0
  2754  00001A                     ___xxtofl@sign:
  2755                           	callstack 0
  2756  00001A                     fputs@s:
  2757                           	callstack 0
  2758  00001A                     LCD_SliderCreate@sldColor:
  2759                           	callstack 0
  2760  00001A                     LCD_ButtonCreate@txtColor:
  2761                           	callstack 0
  2762  00001A                     RGB2LCD@green:
  2763                           	callstack 0
  2764  00001A                     LCD_Read@temp16:
  2765                           	callstack 0
  2766  00001A                     ___wmul@multiplier:
  2767                           	callstack 0
  2768  00001A                     ___aodiv@divisor:
  2769                           	callstack 0
  2770  00001A                     ___aomod@divisor:
  2771                           	callstack 0
  2772                           
  2773                           ; 8 bytes @ 0x19
  2774  00001A                     	ds	1
  2775  00001B                     ___xxtofl@exp:
  2776                           	callstack 0
  2777  00001B                     fputs@fp:
  2778                           	callstack 0
  2779  00001B                     LCD_DrawRect@color:
  2780                           	callstack 0
  2781  00001B                     checkCollision@g:
  2782                           	callstack 0
  2783                           
  2784                           ; 2 bytes @ 0x1A
  2785  00001B                     	ds	1
  2786  00001C                     fputs@c:
  2787                           	callstack 0
  2788  00001C                     LCD_SliderCreate@bgColor:
  2789                           	callstack 0
  2790  00001C                     LCD_ButtonCreate@bgColor:
  2791                           	callstack 0
  2792  00001C                     RGB2LCD@blue:
  2793                           	callstack 0
  2794  00001C                     moovePaddle1@g:
  2795                           	callstack 0
  2796  00001C                     moovePaddle2@g:
  2797                           	callstack 0
  2798  00001C                     ___wmul@multiplicand:
  2799                           	callstack 0
  2800  00001C                     ___xxtofl@arg:
  2801                           	callstack 0
  2802                           
  2803                           ; 4 bytes @ 0x1B
  2804  00001C                     	ds	1
  2805  00001D                     ??_checkCollision:
  2806  00001D                     LCD_DrawRect@j:
  2807                           	callstack 0
  2808  00001D                     fputs@i:
  2809                           	callstack 0
  2810                           
  2811                           ; 2 bytes @ 0x1C
  2812  00001D                     	ds	1
  2813  00001E                     ??_moovePaddle2:
  2814  00001E                     LCD_SliderCreate@borderColor:
  2815                           	callstack 0
  2816  00001E                     LCD_ButtonCreate@textOrBmp:
  2817                           	callstack 0
  2818  00001E                     RGB2LCD@color:
  2819                           	callstack 0
  2820  00001E                     ___wmul@product:
  2821                           	callstack 0
  2822                           
  2823                           ; 2 bytes @ 0x1D
  2824  00001E                     	ds	1
  2825  00001F                     ?_pad:
  2826                           	callstack 0
  2827  00001F                     pad@fp:
  2828                           	callstack 0
  2829  00001F                     LCD_DrawRect@temp:
  2830                           	callstack 0
  2831                           
  2832                           ; 2 bytes @ 0x1E
  2833  00001F                     	ds	1
  2834  000020                     ?___lwdiv:
  2835                           	callstack 0
  2836  000020                     ?___fldiv:
  2837                           	callstack 0
  2838  000020                     pad@buf:
  2839                           	callstack 0
  2840  000020                     LCD_SliderCreate@cursorWidth:
  2841                           	callstack 0
  2842  000020                     LCD_ButtonCreate@font:
  2843                           	callstack 0
  2844  000020                     LCD_DrawText@msg:
  2845                           	callstack 0
  2846  000020                     XF_scheduleTimer@tm:
  2847                           	callstack 0
  2848  000020                     ___lwdiv@dividend:
  2849                           	callstack 0
  2850  000020                     ___fldiv@b:
  2851                           	callstack 0
  2852                           
  2853                           ; 4 bytes @ 0x1F
  2854  000020                     	ds	1
  2855  000021                     LCD_DrawRect@colorH:
  2856                           	callstack 0
  2857  000021                     pad@p:
  2858                           	callstack 0
  2859                           
  2860                           ; 2 bytes @ 0x20
  2861  000021                     	ds	1
  2862  000022                     LCD_DrawRect@colorL:
  2863                           	callstack 0
  2864  000022                     XF_scheduleTimer@ev:
  2865                           	callstack 0
  2866  000022                     ___aodiv@counter:
  2867                           	callstack 0
  2868  000022                     ___aomod@counter:
  2869                           	callstack 0
  2870  000022                     LCD_SliderCreate@steps:
  2871                           	callstack 0
  2872  000022                     LCD_ButtonCreate@fpPress:
  2873                           	callstack 0
  2874  000022                     LCD_DrawText@font:
  2875                           	callstack 0
  2876  000022                     ___lwdiv@divisor:
  2877                           	callstack 0
  2878                           
  2879                           ; 2 bytes @ 0x21
  2880  000022                     	ds	1
  2881  000023                     ??_pad:
  2882  000023                     XF_scheduleTimer@inISR:
  2883                           	callstack 0
  2884  000023                     ___aodiv@sign:
  2885                           	callstack 0
  2886  000023                     ___aomod@sign:
  2887                           	callstack 0
  2888  000023                     LCD_DrawRect@i:
  2889                           	callstack 0
  2890                           
  2891                           ; 2 bytes @ 0x22
  2892  000023                     	ds	1
  2893  000024                     ?_abs:
  2894                           	callstack 0
  2895  000024                     LCD_DrawText@align:
  2896                           	callstack 0
  2897  000024                     XF_scheduleTimer@i:
  2898                           	callstack 0
  2899  000024                     LCD_SliderCreate@fpPress:
  2900                           	callstack 0
  2901  000024                     LCD_ButtonCreate@fpReleased:
  2902                           	callstack 0
  2903  000024                     ___lwdiv@quotient:
  2904                           	callstack 0
  2905  000024                     pad@i:
  2906                           	callstack 0
  2907  000024                     abs@a:
  2908                           	callstack 0
  2909  000024                     ___fldiv@a:
  2910                           	callstack 0
  2911  000024                     ___aodiv@quotient:
  2912                           	callstack 0
  2913                           
  2914                           ; 8 bytes @ 0x23
  2915  000024                     	ds	1
  2916  000025                     Ball_draw@b:
  2917                           	callstack 0
  2918  000025                     Paddle_draw@p:
  2919                           	callstack 0
  2920  000025                     LCD_ButtonUpdate@button:
  2921                           	callstack 0
  2922  000025                     LCD_DrawText@posX:
  2923                           	callstack 0
  2924  000025                     mooveBall@g:
  2925                           	callstack 0
  2926                           
  2927                           ; 2 bytes @ 0x24
  2928  000025                     	ds	1
  2929  000026                     ??_abs:
  2930  000026                     ___lwdiv@counter:
  2931                           	callstack 0
  2932  000026                     LCD_SliderCreate@slider:
  2933                           	callstack 0
  2934  000026                     LCD_ButtonCreate@fpOut:
  2935                           	callstack 0
  2936  000026                     pad@w:
  2937                           	callstack 0
  2938                           
  2939                           ; 2 bytes @ 0x25
  2940  000026                     	ds	1
  2941  000027                     ??_Ball_draw:
  2942  000027                     ??_Paddle_draw:
  2943  000027                     ??_LCD_ButtonUpdate:
  2944  000027                     LCD_SliderUpdate@slider:
  2945                           	callstack 0
  2946  000027                     LCD_DrawText@posY:
  2947                           	callstack 0
  2948  000027                     LCD_Bitmap@bmpPtr:
  2949                           	callstack 0
  2950                           
  2951                           ; 2 bytes @ 0x26
  2952  000027                     	ds	1
  2953  000028                     ??___fldiv:
  2954  000028                     LCD_ButtonCreate@button:
  2955                           	callstack 0
  2956                           
  2957                           ; 2 bytes @ 0x27
  2958  000028                     	ds	1
  2959  000029                     ??_LCD_SliderUpdate:
  2960  000029                     LCD_DrawText@color:
  2961                           	callstack 0
  2962  000029                     LCD_Bitmap@posX:
  2963                           	callstack 0
  2964                           
  2965                           ; 2 bytes @ 0x28
  2966  000029                     	ds	1
  2967  00002A                     LCD_ButtonCreate@index:
  2968                           	callstack 0
  2969                           
  2970                           ; 1 bytes @ 0x29
  2971  00002A                     	ds	1
  2972  00002B                     GameParameters_init@s:
  2973                           	callstack 0
  2974  00002B                     LCD_ButtonUpdate@colorOut:
  2975                           	callstack 0
  2976  00002B                     LCD_DrawText@bg_color:
  2977                           	callstack 0
  2978  00002B                     LCD_Bitmap@posY:
  2979                           	callstack 0
  2980                           
  2981                           ; 2 bytes @ 0x2A
  2982  00002B                     	ds	1
  2983  00002C                     ?_dtoa:
  2984                           	callstack 0
  2985  00002C                     dtoa@fp:
  2986                           	callstack 0
  2987  00002C                     ___fldiv@rem:
  2988                           	callstack 0
  2989                           
  2990                           ; 4 bytes @ 0x2B
  2991  00002C                     	ds	1
  2992  00002D                     ??_LCD_DrawText:
  2993  00002D                     ??_LCD_Bitmap:
  2994  00002D                     LCD_ButtonUpdate@colorIn:
  2995                           	callstack 0
  2996  00002D                     dtoa@d:
  2997                           	callstack 0
  2998                           
  2999                           ; 8 bytes @ 0x2C
  3000  00002D                     	ds	2
  3001  00002F                     LCD_SliderUpdate@x2:
  3002                           	callstack 0
  3003  00002F                     LCD_ButtonUpdate@x2:
  3004                           	callstack 0
  3005                           
  3006                           ; 2 bytes @ 0x2E
  3007  00002F                     	ds	1
  3008  000030                     ___fldiv@sign:
  3009                           	callstack 0
  3010                           
  3011                           ; 1 bytes @ 0x2F
  3012  000030                     	ds	1
  3013  000031                     LCD_SliderUpdate@y1:
  3014                           	callstack 0
  3015  000031                     LCD_ButtonUpdate@y1:
  3016                           	callstack 0
  3017  000031                     ___fldiv@new_exp:
  3018                           	callstack 0
  3019                           
  3020                           ; 2 bytes @ 0x30
  3021  000031                     	ds	2
  3022  000033                     LCD_SliderUpdate@y2:
  3023                           	callstack 0
  3024  000033                     LCD_ButtonUpdate@x1:
  3025                           	callstack 0
  3026  000033                     LCD_DrawText@offset:
  3027                           	callstack 0
  3028  000033                     ___fldiv@grs:
  3029                           	callstack 0
  3030                           
  3031                           ; 4 bytes @ 0x32
  3032  000033                     	ds	2
  3033  000035                     ??_dtoa:
  3034  000035                     LCD_SliderUpdate@x1:
  3035                           	callstack 0
  3036  000035                     LCD_ButtonUpdate@y2:
  3037                           	callstack 0
  3038  000035                     LCD_DrawText@yOffset:
  3039                           	callstack 0
  3040                           
  3041                           ; 2 bytes @ 0x34
  3042  000035                     	ds	2
  3043  000037                     LCD_DrawText@fontByte:
  3044                           	callstack 0
  3045  000037                     ___fldiv@bexp:
  3046                           	callstack 0
  3047  000037                     LCD_SliderDraw@slider:
  3048                           	callstack 0
  3049  000037                     gameControllerController@g:
  3050                           	callstack 0
  3051                           
  3052                           ; 2 bytes @ 0x36
  3053  000037                     	ds	1
  3054  000038                     LCD_DrawText@fontPixel:
  3055                           	callstack 0
  3056  000038                     ___fldiv@aexp:
  3057                           	callstack 0
  3058                           
  3059                           ; 1 bytes @ 0x37
  3060  000038                     	ds	1
  3061  000039                     ??_LCD_SliderDraw:
  3062  000039                     ?___fltol:
  3063                           	callstack 0
  3064  000039                     gameControllerController@ev:
  3065                           	callstack 0
  3066  000039                     LCD_DrawText@posYEnd:
  3067                           	callstack 0
  3068  000039                     ___fltol@f1:
  3069                           	callstack 0
  3070                           
  3071                           ; 4 bytes @ 0x38
  3072  000039                     	ds	1
  3073  00003A                     ??_gameControllerController:
  3074                           
  3075                           ; 1 bytes @ 0x39
  3076  00003A                     	ds	1
  3077  00003B                     LCD_DrawText@posXEnd:
  3078                           	callstack 0
  3079                           
  3080                           ; 2 bytes @ 0x3A
  3081  00003B                     	ds	1
  3082  00003C                     gameControllerInit@g:
  3083                           	callstack 0
  3084  00003C                     gameControllerSM@g:
  3085                           	callstack 0
  3086                           
  3087                           ; 2 bytes @ 0x3B
  3088  00003C                     	ds	1
  3089  00003D                     ??___fltol:
  3090  00003D                     ?_vfpfcnvrt:
  3091                           	callstack 0
  3092  00003D                     LCD_DrawText@y:
  3093                           	callstack 0
  3094  00003D                     vfpfcnvrt@fp:
  3095                           	callstack 0
  3096  00003D                     LCD_SliderDraw@x1:
  3097                           	callstack 0
  3098                           
  3099                           ; 2 bytes @ 0x3C
  3100  00003D                     	ds	1
  3101  00003E                     ??_gameControllerSM:
  3102  00003E                     LCD_DrawText@i:
  3103                           	callstack 0
  3104  00003E                     vfpfcnvrt@fmt:
  3105                           	callstack 0
  3106                           
  3107                           ; 1 bytes @ 0x3D
  3108  00003E                     	ds	1
  3109  00003F                     LCD_DrawText@tempChar:
  3110                           	callstack 0
  3111  00003F                     vfpfcnvrt@ap:
  3112                           	callstack 0
  3113  00003F                     LCD_SliderDraw@x2:
  3114                           	callstack 0
  3115                           
  3116                           ; 2 bytes @ 0x3E
  3117  00003F                     	ds	1
  3118  000040                     LCD_DrawText@x:
  3119                           	callstack 0
  3120  000040                     gameControllerSM@ev:
  3121                           	callstack 0
  3122  000040                     vfprintf@cfmt:
  3123                           	callstack 0
  3124                           
  3125                           ; 2 bytes @ 0x3F
  3126  000040                     	ds	1
  3127  000041                     LCD_DrawText@width:
  3128                           	callstack 0
  3129  000041                     ___fltol@sign1:
  3130                           	callstack 0
  3131  000041                     LCD_SliderDraw@y1:
  3132                           	callstack 0
  3133                           
  3134                           ; 2 bytes @ 0x40
  3135  000041                     	ds	1
  3136  000042                     ___fltol@exp1:
  3137                           	callstack 0
  3138  000042                     LCD_ButtonDraw@button:
  3139                           	callstack 0
  3140                           
  3141                           ; 2 bytes @ 0x41
  3142  000042                     	ds	1
  3143  000043                     LCD_SliderDraw@y2:
  3144                           	callstack 0
  3145  000043                     touchScreenController@g:
  3146                           	callstack 0
  3147                           
  3148                           ; 2 bytes @ 0x42
  3149  000043                     	ds	1
  3150  000044                     Menu_welcomeDraw@g:
  3151                           	callstack 0
  3152  000044                     Menu_endGame@g:
  3153                           	callstack 0
  3154                           
  3155                           ; 2 bytes @ 0x43
  3156  000044                     	ds	1
  3157  000045                     touchScreenSM@ev:
  3158                           	callstack 0
  3159                           
  3160                           ; 1 bytes @ 0x44
  3161  000045                     	ds	1
  3162  000046                     
  3163                           ; 1 bytes @ 0x45
  3164 ;;
  3165 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3166 ;;
  3167 ;; *************** function _main *****************
  3168 ;; Defined at:
  3169 ;;		line 53 in file "main.c"
  3170 ;; Parameters:    Size  Location     Type
  3171 ;;		None
  3172 ;; Auto vars:     Size  Location     Type
  3173 ;;		None
  3174 ;; Return value:  Size  Location     Type
  3175 ;;                  1    wreg      void 
  3176 ;; Registers used:
  3177 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3178 ;; Tracked objects:
  3179 ;;		On entry : 0/0
  3180 ;;		On exit  : 0/0
  3181 ;;		Unchanged: 0/0
  3182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3183 ;;      Params:         0       0       0       0       0       0       0
  3184 ;;      Locals:         0       0       0       0       0       0       0
  3185 ;;      Temps:          0       0       0       0       0       0       0
  3186 ;;      Totals:         0       0       0       0       0       0       0
  3187 ;;Total ram usage:        0 bytes
  3188 ;; Hardware stack levels required when called: 17
  3189 ;; This function calls:
  3190 ;;		_Factory_exec
  3191 ;;		_Factory_init
  3192 ;; This function is called by:
  3193 ;;		Startup code after reset
  3194 ;; This function uses a non-reentrant model
  3195 ;;
  3196                           
  3197                           	psect	text0
  3198  005A6E                     __ptext0:
  3199                           	callstack 0
  3200  005A6E                     _main:
  3201                           	callstack 14
  3202                           
  3203                           ;main.c: 55:     Factory_init();
  3204                           
  3205                           ;incstack = 0
  3206  005A6E  EC3B  F023         	call	_Factory_init	;wreg free
  3207  005A72                     l780:
  3208                           
  3209                           ;main.c: 57:     {;main.c: 58:         Factory_exec();
  3210  005A72  ECA1  F02A         	call	_Factory_exec	;wreg free
  3211  005A76  D7FD               	goto	l780
  3212  005A78                     __end_of_main:
  3213                           	callstack 0
  3214                           
  3215 ;; *************** function _Factory_init *****************
  3216 ;; Defined at:
  3217 ;;		line 14 in file "class/factory.c"
  3218 ;; Parameters:    Size  Location     Type
  3219 ;;		None
  3220 ;; Auto vars:     Size  Location     Type
  3221 ;;		None
  3222 ;; Return value:  Size  Location     Type
  3223 ;;                  1    wreg      void 
  3224 ;; Registers used:
  3225 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3226 ;; Tracked objects:
  3227 ;;		On entry : 0/0
  3228 ;;		On exit  : 0/0
  3229 ;;		Unchanged: 0/0
  3230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3231 ;;      Params:         0       0       0       0       0       0       0
  3232 ;;      Locals:         0       0       0       0       0       0       0
  3233 ;;      Temps:          0       2       0       0       0       0       0
  3234 ;;      Totals:         0       2       0       0       0       0       0
  3235 ;;Total ram usage:        2 bytes
  3236 ;; Hardware stack levels used: 1
  3237 ;; Hardware stack levels required when called: 16
  3238 ;; This function calls:
  3239 ;;		_GameParameters_init
  3240 ;;		_LCD_DrawText
  3241 ;;		_LCD_Fill
  3242 ;;		_LCD_Init
  3243 ;;		_XF_init
  3244 ;;		_sleepInit
  3245 ;; This function is called by:
  3246 ;;		_main
  3247 ;; This function uses a non-reentrant model
  3248 ;;
  3249                           
  3250                           	psect	text1
  3251  004676                     __ptext1:
  3252                           	callstack 0
  3253  004676                     _Factory_init:
  3254                           	callstack 14
  3255                           
  3256                           ;class/factory.c: 17:     PLLEN = 1;
  3257                           
  3258                           ;incstack = 0
  3259  004676  8C9B               	bsf	3995,6,c	;volatile
  3260                           
  3261                           ;class/factory.c: 18:     OSCCON = 0b01110000;
  3262  004678  0E70               	movlw	112
  3263  00467A  6ED3               	movwf	211,c	;volatile
  3264                           
  3265                           ;class/factory.c: 19:     _delay((unsigned long)((100)*(64000000L/4000.0)));
  3266  00467C  0E09               	movlw	9
  3267  00467E  0100               	movlb	0	; () banked
  3268  004680  6FF0               	movwf	(??_Factory_init+1)& (0+255),b
  3269  004682  0E1E               	movlw	30
  3270  004684  6FEF               	movwf	??_Factory_init& (0+255),b
  3271  004686  0EE4               	movlw	228
  3272  004688                     u6557:
  3273  004688  2EE8               	decfsz	wreg,f,c
  3274  00468A  D7FE               	bra	u6557
  3275  00468C  2FEF               	decfsz	??_Factory_init& (0+255),f,b
  3276  00468E  D7FC               	bra	u6557
  3277  004690  2FF0               	decfsz	(??_Factory_init+1)& (0+255),f,b
  3278  004692  D7FA               	bra	u6557
  3279  004694  F000               	nop	
  3280                           
  3281                           ;class/factory.c: 22:     LCD_Init();
  3282  004696  EC9F  F014         	call	_LCD_Init	;wreg free
  3283                           
  3284                           ;class/factory.c: 23:     LCD_Fill(0b0000000000011111);
  3285  00469A  0E00               	movlw	0
  3286  00469C  6E13               	movwf	(LCD_Fill@color+1)^0,c
  3287  00469E  0E1F               	movlw	31
  3288  0046A0  6E12               	movwf	LCD_Fill@color^0,c
  3289  0046A2  ECAA  F024         	call	_LCD_Fill	;wreg free
  3290                           
  3291                           ;class/factory.c: 24:     LCD_DrawText("MenuStart",&arialNarrow_12ptFontInfo,A_CENTER,50
      +                          ,50,0b0000000000000000,0b1111111111111111);
  3292  0046A6  0EBD               	movlw	low STR_1
  3293  0046A8  6E20               	movwf	LCD_DrawText@msg^0,c
  3294  0046AA  0E7F               	movlw	high STR_1
  3295  0046AC  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
  3296  0046AE  0E7B               	movlw	low _arialNarrow_12ptFontInfo
  3297  0046B0  6E22               	movwf	LCD_DrawText@font^0,c
  3298  0046B2  0E7F               	movlw	high _arialNarrow_12ptFontInfo
  3299  0046B4  6E23               	movwf	(LCD_DrawText@font+1)^0,c
  3300  0046B6  0E02               	movlw	2
  3301  0046B8  6E24               	movwf	LCD_DrawText@align^0,c
  3302  0046BA  0E00               	movlw	0
  3303  0046BC  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
  3304  0046BE  0E32               	movlw	50
  3305  0046C0  6E25               	movwf	LCD_DrawText@posX^0,c
  3306  0046C2  0E00               	movlw	0
  3307  0046C4  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
  3308  0046C6  0E32               	movlw	50
  3309  0046C8  6E27               	movwf	LCD_DrawText@posY^0,c
  3310  0046CA  0E00               	movlw	0
  3311  0046CC  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
  3312  0046CE  0E00               	movlw	0
  3313  0046D0  6E29               	movwf	LCD_DrawText@color^0,c
  3314  0046D2  0EFF               	movlw	255
  3315  0046D4  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
  3316  0046D6  682B               	setf	LCD_DrawText@bg_color^0,c
  3317  0046D8  EC87  F00F         	call	_LCD_DrawText	;wreg free
  3318                           
  3319                           ;class/factory.c: 27:     GIE=1;
  3320  0046DC  8EF2               	bsf	4082,7,c	;volatile
  3321                           
  3322                           ;class/factory.c: 28:     INT1IE=0;
  3323  0046DE  96F0               	bcf	4080,3,c	;volatile
  3324                           
  3325                           ;class/factory.c: 29:     INTEDG1=0;
  3326  0046E0  9AF1               	bcf	4081,5,c	;volatile
  3327                           
  3328                           ;class/factory.c: 30:     TRISC0=0;
  3329  0046E2  9094               	bcf	3988,0,c	;volatile
  3330                           
  3331                           ;class/factory.c: 31:     LATC0=1;
  3332  0046E4  808B               	bsf	3979,0,c	;volatile
  3333                           
  3334                           ;class/factory.c: 34:     T0CON=0b10000110;
  3335  0046E6  0E86               	movlw	134
  3336  0046E8  6ED5               	movwf	213,c	;volatile
  3337                           
  3338                           ;class/factory.c: 35:     TMR0H=0xFF;
  3339  0046EA  68D7               	setf	215,c	;volatile
  3340                           
  3341                           ;class/factory.c: 36:     TMR0L=0x82;
  3342  0046EC  0E82               	movlw	130
  3343  0046EE  6ED6               	movwf	214,c	;volatile
  3344                           
  3345                           ;class/factory.c: 37:     TMR0IE=1;
  3346  0046F0  8AF2               	bsf	4082,5,c	;volatile
  3347                           
  3348                           ;class/factory.c: 40:     TRISC1=0;
  3349  0046F2  9294               	bcf	3988,1,c	;volatile
  3350                           
  3351                           ;class/factory.c: 41:     PR2=255;
  3352  0046F4  68BB               	setf	187,c	;volatile
  3353                           
  3354                           ;class/factory.c: 42:     CCP2CONbits.CCP2M = 0xC;
  3355  0046F6  5066               	movf	102,w,c	;volatile
  3356  0046F8  0BF0               	andlw	-16
  3357  0046FA  090C               	iorlw	12
  3358  0046FC  6E66               	movwf	102,c	;volatile
  3359                           
  3360                           ;class/factory.c: 43:     CCPR2L = 255;
  3361  0046FE  6867               	setf	103,c	;volatile
  3362                           
  3363                           ;class/factory.c: 44:     CCP2CONbits.DC2B = 0;
  3364  004700  0ECF               	movlw	-49
  3365  004702  1666               	andwf	102,f,c	;volatile
  3366                           
  3367                           ;class/factory.c: 45:     TMR2IF=0;
  3368  004704  929E               	bcf	3998,1,c	;volatile
  3369                           
  3370                           ;class/factory.c: 46:     T2CONbits.T2CKPS0 = 1;
  3371  004706  80BA               	bsf	186,0,c	;volatile
  3372                           
  3373                           ;class/factory.c: 47:     T2CONbits.T2CKPS1 = 0;
  3374  004708  92BA               	bcf	186,1,c	;volatile
  3375                           
  3376                           ;class/factory.c: 48:     T2CONbits.TMR2ON = 1;
  3377  00470A  84BA               	bsf	186,2,c	;volatile
  3378                           
  3379                           ;class/factory.c: 51:     ADCON2=0b10100110;
  3380  00470C  0EA6               	movlw	166
  3381  00470E  6EC0               	movwf	192,c	;volatile
  3382                           
  3383                           ;class/factory.c: 54:     XF_init();
  3384  004710  ECCC  F028         	call	_XF_init	;wreg free
  3385                           
  3386                           ; BSR set to: 0
  3387                           ;class/factory.c: 55:     GameParameters_init(&g1);
  3388  004714  0E00               	movlw	low _g1
  3389  004716  6E2B               	movwf	GameParameters_init@s^0,c
  3390  004718  0E01               	movlw	high _g1
  3391  00471A  6E2C               	movwf	(GameParameters_init@s+1)^0,c
  3392  00471C  EC90  F00D         	call	_GameParameters_init	;wreg free
  3393                           
  3394                           ;class/factory.c: 56:     sleepInit(&g1);
  3395  004720  0E00               	movlw	low _g1
  3396  004722  0100               	movlb	0	; () banked
  3397  004724  6FED               	movwf	sleepInit@g& (0+255),b
  3398  004726  0E01               	movlw	high _g1
  3399  004728  6FEE               	movwf	(sleepInit@g+1)& (0+255),b
  3400  00472A  EC80  F02C         	call	_sleepInit	;wreg free
  3401  00472E  0012               	return		;funcret
  3402  004730                     __end_of_Factory_init:
  3403                           	callstack 0
  3404                           
  3405 ;; *************** function _sleepInit *****************
  3406 ;; Defined at:
  3407 ;;		line 11 in file "stateMachine/sleepSM.c"
  3408 ;; Parameters:    Size  Location     Type
  3409 ;;  g               2   67[BANK0 ] PTR struct GameParameter
  3410 ;;		 -> g1(240), 
  3411 ;; Auto vars:     Size  Location     Type
  3412 ;;		None
  3413 ;; Return value:  Size  Location     Type
  3414 ;;                  1    wreg      void 
  3415 ;; Registers used:
  3416 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3417 ;; Tracked objects:
  3418 ;;		On entry : 3F/0
  3419 ;;		On exit  : 0/0
  3420 ;;		Unchanged: 0/0
  3421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3422 ;;      Params:         0       2       0       0       0       0       0
  3423 ;;      Locals:         0       0       0       0       0       0       0
  3424 ;;      Temps:          0       0       0       0       0       0       0
  3425 ;;      Totals:         0       2       0       0       0       0       0
  3426 ;;Total ram usage:        2 bytes
  3427 ;; Hardware stack levels used: 1
  3428 ;; Hardware stack levels required when called: 15
  3429 ;; This function calls:
  3430 ;;		_displayInit
  3431 ;;		_gameControllerInit
  3432 ;;		_sleepController
  3433 ;;		_touchScreenInit
  3434 ;; This function is called by:
  3435 ;;		_Factory_init
  3436 ;; This function uses a non-reentrant model
  3437 ;;
  3438                           
  3439                           	psect	text2
  3440  005900                     __ptext2:
  3441                           	callstack 0
  3442  005900                     _sleepInit:
  3443                           	callstack 14
  3444                           
  3445                           ; BSR set to: 0
  3446                           ;stateMachine/sleepSM.c: 11: void sleepInit(GameParameters* g);stateMachine/sleepSM.c: 1
      +                          2: {;stateMachine/sleepSM.c: 13:     sleepState=WAKEUP;
  3447                           
  3448                           ;incstack = 0
  3449  005900  0E00               	movlw	0
  3450  005902  6F89               	movwf	_sleepState& (0+255),b
  3451                           
  3452                           ; BSR set to: 0
  3453                           ;stateMachine/sleepSM.c: 15:     displayInit(g);
  3454  005904  C0ED  F0EB         	movff	sleepInit@g,displayInit@g
  3455  005908  C0EE  F0EC         	movff	sleepInit@g+1,displayInit@g+1
  3456  00590C  ECF3  F02C         	call	_displayInit	;wreg free
  3457                           
  3458                           ;stateMachine/sleepSM.c: 16:     gameControllerInit(g);
  3459  005910  C0ED  F03C         	movff	sleepInit@g,gameControllerInit@g
  3460  005914  C0EE  F03D         	movff	sleepInit@g+1,gameControllerInit@g+1
  3461  005918  ECE8  F02C         	call	_gameControllerInit	;wreg free
  3462                           
  3463                           ;stateMachine/sleepSM.c: 17:     touchScreenInit();
  3464  00591C  ECCA  F02C         	call	_touchScreenInit	;wreg free
  3465                           
  3466                           ;stateMachine/sleepSM.c: 18:     sleepController();
  3467  005920  EC55  F02C         	call	_sleepController	;wreg free
  3468  005924  0012               	return		;funcret
  3469  005926                     __end_of_sleepInit:
  3470                           	callstack 0
  3471                           
  3472 ;; *************** function _touchScreenInit *****************
  3473 ;; Defined at:
  3474 ;;		line 18 in file "stateMachine/touchScreenSM.c"
  3475 ;; Parameters:    Size  Location     Type
  3476 ;;		None
  3477 ;; Auto vars:     Size  Location     Type
  3478 ;;		None
  3479 ;; Return value:  Size  Location     Type
  3480 ;;                  1    wreg      void 
  3481 ;; Registers used:
  3482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3483 ;; Tracked objects:
  3484 ;;		On entry : 0/0
  3485 ;;		On exit  : 0/0
  3486 ;;		Unchanged: 0/0
  3487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3488 ;;      Params:         0       0       0       0       0       0       0
  3489 ;;      Locals:         0       0       0       0       0       0       0
  3490 ;;      Temps:          0       0       0       0       0       0       0
  3491 ;;      Totals:         0       0       0       0       0       0       0
  3492 ;;Total ram usage:        0 bytes
  3493 ;; Hardware stack levels used: 1
  3494 ;; Hardware stack levels required when called: 6
  3495 ;; This function calls:
  3496 ;;		_XF_scheduleTimer
  3497 ;;		_configTouch
  3498 ;; This function is called by:
  3499 ;;		_sleepInit
  3500 ;; This function uses a non-reentrant model
  3501 ;;
  3502                           
  3503                           	psect	text3
  3504  005994                     __ptext3:
  3505                           	callstack 0
  3506  005994                     _touchScreenInit:
  3507                           	callstack 22
  3508                           
  3509                           ;stateMachine/touchScreenSM.c: 20:     touchScreenState=WAITING;
  3510                           
  3511                           ;incstack = 0
  3512  005994  0E00               	movlw	0
  3513  005996  6E4D               	movwf	_touchScreenState^0,c
  3514                           
  3515                           ;stateMachine/touchScreenSM.c: 21:     configTouch();
  3516  005998  ECB9  F02C         	call	_configTouch	;wreg free
  3517                           
  3518                           ;stateMachine/touchScreenSM.c: 22:     XF_scheduleTimer(30000,evSleep,0);
  3519  00599C  0E75               	movlw	117
  3520  00599E  6E21               	movwf	(XF_scheduleTimer@tm+1)^0,c
  3521  0059A0  0E30               	movlw	48
  3522  0059A2  6E20               	movwf	XF_scheduleTimer@tm^0,c
  3523  0059A4  0E03               	movlw	3
  3524  0059A6  6E22               	movwf	XF_scheduleTimer@ev^0,c
  3525  0059A8  0E00               	movlw	0
  3526  0059AA  6E23               	movwf	XF_scheduleTimer@inISR^0,c
  3527  0059AC  ECFF  F029         	call	_XF_scheduleTimer	;wreg free
  3528  0059B0  0012               	return		;funcret
  3529  0059B2                     __end_of_touchScreenInit:
  3530                           	callstack 0
  3531                           
  3532 ;; *************** function _gameControllerInit *****************
  3533 ;; Defined at:
  3534 ;;		line 11 in file "stateMachine/gameController.c"
  3535 ;; Parameters:    Size  Location     Type
  3536 ;;  g               2   59[COMRAM] PTR struct GameParameter
  3537 ;;		 -> g1(240), 
  3538 ;; Auto vars:     Size  Location     Type
  3539 ;;		None
  3540 ;; Return value:  Size  Location     Type
  3541 ;;                  1    wreg      void 
  3542 ;; Registers used:
  3543 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3544 ;; Tracked objects:
  3545 ;;		On entry : 0/0
  3546 ;;		On exit  : 0/0
  3547 ;;		Unchanged: 0/0
  3548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3549 ;;      Params:         2       0       0       0       0       0       0
  3550 ;;      Locals:         0       0       0       0       0       0       0
  3551 ;;      Temps:          0       0       0       0       0       0       0
  3552 ;;      Totals:         2       0       0       0       0       0       0
  3553 ;;Total ram usage:        2 bytes
  3554 ;; Hardware stack levels used: 1
  3555 ;; Hardware stack levels required when called: 9
  3556 ;; This function calls:
  3557 ;;		_gameControllerController
  3558 ;; This function is called by:
  3559 ;;		_sleepInit
  3560 ;; This function uses a non-reentrant model
  3561 ;;
  3562                           
  3563                           	psect	text4
  3564  0059D0                     __ptext4:
  3565                           	callstack 0
  3566  0059D0                     _gameControllerInit:
  3567                           	callstack 19
  3568                           
  3569                           ;stateMachine/gameController.c: 11: void gameControllerInit(GameParameters* g);stateMach
      +                          ine/gameController.c: 12: {;stateMachine/gameController.c: 13:     gameStateMachine=NOGA
      +                          ME;
  3570                           
  3571                           ;incstack = 0
  3572  0059D0  0E00               	movlw	0
  3573  0059D2  6E4C               	movwf	_gameStateMachine^0,c
  3574                           
  3575                           ;stateMachine/gameController.c: 14:     gameControllerController(g,NULLEVENT);
  3576  0059D4  C03C  F037         	movff	gameControllerInit@g,gameControllerController@g
  3577  0059D8  C03D  F038         	movff	gameControllerInit@g+1,gameControllerController@g+1
  3578  0059DC  0E00               	movlw	0
  3579  0059DE  6E39               	movwf	gameControllerController@ev^0,c
  3580  0059E0  EC81  F009         	call	_gameControllerController	;wreg free
  3581  0059E4  0012               	return		;funcret
  3582  0059E6                     __end_of_gameControllerInit:
  3583                           	callstack 0
  3584                           
  3585 ;; *************** function _displayInit *****************
  3586 ;; Defined at:
  3587 ;;		line 15 in file "stateMachine/display.c"
  3588 ;; Parameters:    Size  Location     Type
  3589 ;;  g               2   65[BANK0 ] PTR struct GameParameter
  3590 ;;		 -> g1(240), 
  3591 ;; Auto vars:     Size  Location     Type
  3592 ;;		None
  3593 ;; Return value:  Size  Location     Type
  3594 ;;                  1    wreg      void 
  3595 ;; Registers used:
  3596 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3597 ;; Tracked objects:
  3598 ;;		On entry : 3F/0
  3599 ;;		On exit  : 0/0
  3600 ;;		Unchanged: 0/0
  3601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3602 ;;      Params:         0       2       0       0       0       0       0
  3603 ;;      Locals:         0       0       0       0       0       0       0
  3604 ;;      Temps:          0       0       0       0       0       0       0
  3605 ;;      Totals:         0       2       0       0       0       0       0
  3606 ;;Total ram usage:        2 bytes
  3607 ;; Hardware stack levels used: 1
  3608 ;; Hardware stack levels required when called: 14
  3609 ;; This function calls:
  3610 ;;		_displayController
  3611 ;; This function is called by:
  3612 ;;		_sleepInit
  3613 ;; This function uses a non-reentrant model
  3614 ;;
  3615                           
  3616                           	psect	text5
  3617  0059E6                     __ptext5:
  3618                           	callstack 0
  3619  0059E6                     _displayInit:
  3620                           	callstack 14
  3621                           
  3622                           ; BSR set to: 0
  3623                           ;stateMachine/display.c: 15: void displayInit(GameParameters* g);stateMachine/display.c:
      +                           16: {;stateMachine/display.c: 18:     displayState=WELCOME;
  3624                           
  3625                           ;incstack = 0
  3626  0059E6  0E00               	movlw	0
  3627  0059E8  6F88               	movwf	_displayState& (0+255),b
  3628                           
  3629                           ; BSR set to: 0
  3630                           ;stateMachine/display.c: 19:     displayController(g,NULLEVENT);
  3631  0059EA  C0EB  F0E6         	movff	displayInit@g,displayController@g
  3632  0059EE  C0EC  F0E7         	movff	displayInit@g+1,displayController@g+1
  3633  0059F2  0E00               	movlw	0
  3634  0059F4  6FE8               	movwf	displayController@ev& (0+255),b
  3635  0059F6  EC24  F021         	call	_displayController	;wreg free
  3636  0059FA  0012               	return		;funcret
  3637  0059FC                     __end_of_displayInit:
  3638                           	callstack 0
  3639                           
  3640 ;; *************** function _XF_init *****************
  3641 ;; Defined at:
  3642 ;;		line 25 in file "xf/xf.c"
  3643 ;; Parameters:    Size  Location     Type
  3644 ;;		None
  3645 ;; Auto vars:     Size  Location     Type
  3646 ;;  i               2   17[COMRAM] int 
  3647 ;; Return value:  Size  Location     Type
  3648 ;;                  1    wreg      void 
  3649 ;; Registers used:
  3650 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3651 ;; Tracked objects:
  3652 ;;		On entry : 0/0
  3653 ;;		On exit  : 3F/0
  3654 ;;		Unchanged: 0/0
  3655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3656 ;;      Params:         0       0       0       0       0       0       0
  3657 ;;      Locals:         2       0       0       0       0       0       0
  3658 ;;      Temps:          0       0       0       0       0       0       0
  3659 ;;      Totals:         2       0       0       0       0       0       0
  3660 ;;Total ram usage:        2 bytes
  3661 ;; Hardware stack levels used: 1
  3662 ;; Hardware stack levels required when called: 4
  3663 ;; This function calls:
  3664 ;;		Nothing
  3665 ;; This function is called by:
  3666 ;;		_Factory_init
  3667 ;; This function uses a non-reentrant model
  3668 ;;
  3669                           
  3670                           	psect	text6
  3671  005198                     __ptext6:
  3672                           	callstack 0
  3673  005198                     _XF_init:
  3674                           	callstack 25
  3675                           
  3676                           ;xf/xf.c: 27:     int i;;xf/xf.c: 28:     for (i=0; i<12; i++)
  3677                           
  3678                           ;incstack = 0
  3679  005198  0E00               	movlw	0
  3680  00519A  6E13               	movwf	(XF_init@i+1)^0,c
  3681  00519C  0E00               	movlw	0
  3682  00519E  6E12               	movwf	XF_init@i^0,c
  3683  0051A0                     l7624:
  3684                           
  3685                           ;xf/xf.c: 29:     {;xf/xf.c: 30:         theXF.eventQueue[i] = NULLEVENT;
  3686  0051A0  5012               	movf	XF_init@i^0,w,c
  3687  0051A2  0F78               	addlw	low (_theXF+24)
  3688  0051A4  6ED9               	movwf	fsr2l,c
  3689  0051A6  6ADA               	clrf	fsr2h,c
  3690  0051A8  0E00               	movlw	0
  3691  0051AA  6EDF               	movwf	indf2,c
  3692                           
  3693                           ;xf/xf.c: 31:     }
  3694  0051AC  4A12               	infsnz	XF_init@i^0,f,c
  3695  0051AE  2A13               	incf	(XF_init@i+1)^0,f,c
  3696  0051B0  BE13               	btfsc	(XF_init@i+1)^0,7,c
  3697  0051B2  D7F6               	goto	l7624
  3698  0051B4  5013               	movf	(XF_init@i+1)^0,w,c
  3699  0051B6  E104               	bnz	u5470
  3700  0051B8  0E0C               	movlw	12
  3701  0051BA  5C12               	subwf	XF_init@i^0,w,c
  3702  0051BC  A0D8               	btfss	status,0,c
  3703  0051BE  D7F0               	goto	l7624
  3704  0051C0                     u5470:
  3705                           
  3706                           ;xf/xf.c: 33:     for (i=0; i<8; i++)
  3707  0051C0  0E00               	movlw	0
  3708  0051C2  6E13               	movwf	(XF_init@i+1)^0,c
  3709  0051C4  0E00               	movlw	0
  3710  0051C6  6E12               	movwf	XF_init@i^0,c
  3711  0051C8                     l7636:
  3712                           
  3713                           ;xf/xf.c: 34:     {;xf/xf.c: 35:         theXF.timerList[i].tm = 0;
  3714  0051C8  5012               	movf	XF_init@i^0,w,c
  3715  0051CA  0D03               	mullw	3
  3716  0051CC  50F3               	movf	243,w,c
  3717  0051CE  0F60               	addlw	low _theXF
  3718  0051D0  6ED9               	movwf	fsr2l,c
  3719  0051D2  6ADA               	clrf	fsr2h,c
  3720  0051D4  0E00               	movlw	0
  3721  0051D6  6EDE               	movwf	postinc2,c
  3722  0051D8  0E00               	movlw	0
  3723  0051DA  6EDD               	movwf	postdec2,c
  3724                           
  3725                           ;xf/xf.c: 36:         theXF.timerList[i].ev = NULLEVENT;
  3726  0051DC  5012               	movf	XF_init@i^0,w,c
  3727  0051DE  0D03               	mullw	3
  3728  0051E0  50F3               	movf	243,w,c
  3729  0051E2  0F62               	addlw	low (_theXF+2)
  3730  0051E4  6ED9               	movwf	fsr2l,c
  3731  0051E6  6ADA               	clrf	fsr2h,c
  3732  0051E8  0E00               	movlw	0
  3733  0051EA  6EDF               	movwf	indf2,c
  3734                           
  3735                           ;xf/xf.c: 37:     }
  3736  0051EC  4A12               	infsnz	XF_init@i^0,f,c
  3737  0051EE  2A13               	incf	(XF_init@i+1)^0,f,c
  3738  0051F0  BE13               	btfsc	(XF_init@i+1)^0,7,c
  3739  0051F2  D7EA               	goto	l7636
  3740  0051F4  5013               	movf	(XF_init@i+1)^0,w,c
  3741  0051F6  E104               	bnz	u5480
  3742  0051F8  0E08               	movlw	8
  3743  0051FA  5C12               	subwf	XF_init@i^0,w,c
  3744  0051FC  A0D8               	btfss	status,0,c
  3745  0051FE  D7E4               	goto	l7636
  3746  005200                     u5480:
  3747                           
  3748                           ;xf/xf.c: 38:     theXF.in = 0;
  3749  005200  0E00               	movlw	0
  3750  005202  0100               	movlb	0	; () banked
  3751  005204  6F84               	movwf	(_theXF+36)& (0+255),b
  3752                           
  3753                           ;xf/xf.c: 39:     theXF.out = 0;
  3754  005206  0E00               	movlw	0
  3755  005208  6F85               	movwf	(_theXF+37)& (0+255),b
  3756                           
  3757                           ; BSR set to: 0
  3758  00520A  0012               	return		;funcret
  3759  00520C                     __end_of_XF_init:
  3760                           	callstack 0
  3761                           
  3762 ;; *************** function _LCD_Init *****************
  3763 ;; Defined at:
  3764 ;;		line 20 in file "libraries/lcd_highlevel.c"
  3765 ;; Parameters:    Size  Location     Type
  3766 ;;		None
  3767 ;; Auto vars:     Size  Location     Type
  3768 ;;  i               1   23[COMRAM] unsigned char 
  3769 ;; Return value:  Size  Location     Type
  3770 ;;                  1    wreg      void 
  3771 ;; Registers used:
  3772 ;;		wreg, status,2, status,0, cstack
  3773 ;; Tracked objects:
  3774 ;;		On entry : 0/0
  3775 ;;		On exit  : 0/0
  3776 ;;		Unchanged: 0/0
  3777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3778 ;;      Params:         0       0       0       0       0       0       0
  3779 ;;      Locals:         1       0       0       0       0       0       0
  3780 ;;      Temps:          1       0       0       0       0       0       0
  3781 ;;      Totals:         2       0       0       0       0       0       0
  3782 ;;Total ram usage:        2 bytes
  3783 ;; Hardware stack levels used: 1
  3784 ;; Hardware stack levels required when called: 5
  3785 ;; This function calls:
  3786 ;;		_LCD_Lowlevel_Init
  3787 ;; This function is called by:
  3788 ;;		_Factory_init
  3789 ;; This function uses a non-reentrant model
  3790 ;;
  3791                           
  3792                           	psect	text7
  3793  00293E                     __ptext7:
  3794                           	callstack 0
  3795  00293E                     _LCD_Init:
  3796                           	callstack 24
  3797                           
  3798                           ;libraries/lcd_highlevel.c: 22:   uint8_t i;;libraries/lcd_highlevel.c: 86:   LCD_Lowlev
      +                          el_Init();
  3799                           
  3800                           ; BSR set to: 0
  3801                           ;incstack = 0
  3802  00293E  EC81  F027         	call	_LCD_Lowlevel_Init	;wreg free
  3803                           
  3804                           ;libraries/lcd_highlevel.c: 87:   PORTA = 0x11; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 =
      +                           1;;
  3805  002942  0E11               	movlw	17
  3806  002944  6E80               	movwf	128,c	;volatile
  3807  002946  988B               	bcf	3979,4,c	;volatile
  3808  002948  968B               	bcf	3979,3,c	;volatile
  3809  00294A  868B               	bsf	3979,3,c	;volatile
  3810  00294C  888B               	bsf	3979,4,c	;volatile
  3811                           
  3812                           ;libraries/lcd_highlevel.c: 88:   for(i=0;i<10;i++)
  3813  00294E  0E00               	movlw	0
  3814  002950  6E18               	movwf	LCD_Init@i^0,c
  3815  002952                     l4188:
  3816                           
  3817                           ;libraries/lcd_highlevel.c: 89:   {;libraries/lcd_highlevel.c: 90:     _delay((unsigned 
      +                          long)((10)*(64000000L/4000.0)));
  3818  002952  0ED0               	movlw	208
  3819  002954  6E17               	movwf	??_LCD_Init^0,c
  3820  002956  0ECA               	movlw	202
  3821  002958                     u6567:
  3822  002958  2EE8               	decfsz	wreg,f,c
  3823  00295A  D7FE               	bra	u6567
  3824  00295C  2E17               	decfsz	??_LCD_Init^0,f,c
  3825  00295E  D7FC               	bra	u6567
  3826                           
  3827                           ;libraries/lcd_highlevel.c: 91:   }
  3828  002960  2A18               	incf	LCD_Init@i^0,f,c
  3829  002962  0E09               	movlw	9
  3830  002964  6418               	cpfsgt	LCD_Init@i^0,c
  3831  002966  D7F5               	goto	l4188
  3832                           
  3833                           ;libraries/lcd_highlevel.c: 92:   PORTA = 0x36; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 =
      +                           1;;
  3834  002968  0E36               	movlw	54
  3835  00296A  6E80               	movwf	128,c	;volatile
  3836  00296C  988B               	bcf	3979,4,c	;volatile
  3837  00296E  968B               	bcf	3979,3,c	;volatile
  3838  002970  868B               	bsf	3979,3,c	;volatile
  3839  002972  888B               	bsf	3979,4,c	;volatile
  3840                           
  3841                           ;libraries/lcd_highlevel.c: 93:   PORTA = 0b00000000; LATC3 = 0; LATC3 = 1;;
  3842  002974  0E00               	movlw	0
  3843  002976  6E80               	movwf	128,c	;volatile
  3844  002978  968B               	bcf	3979,3,c	;volatile
  3845  00297A  868B               	bsf	3979,3,c	;volatile
  3846                           
  3847                           ;libraries/lcd_highlevel.c: 94:   PORTA = 0x3A; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 =
      +                           1;;
  3848  00297C  0E3A               	movlw	58
  3849  00297E  6E80               	movwf	128,c	;volatile
  3850  002980  988B               	bcf	3979,4,c	;volatile
  3851  002982  968B               	bcf	3979,3,c	;volatile
  3852  002984  868B               	bsf	3979,3,c	;volatile
  3853  002986  888B               	bsf	3979,4,c	;volatile
  3854                           
  3855                           ;libraries/lcd_highlevel.c: 95:   PORTA = 0x55; LATC3 = 0; LATC3 = 1;;
  3856  002988  0E55               	movlw	85
  3857  00298A  6E80               	movwf	128,c	;volatile
  3858  00298C  968B               	bcf	3979,3,c	;volatile
  3859  00298E  868B               	bsf	3979,3,c	;volatile
  3860                           
  3861                           ;libraries/lcd_highlevel.c: 96:   PORTA = 0xB2; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 =
      +                           1;;
  3862  002990  0EB2               	movlw	178
  3863  002992  6E80               	movwf	128,c	;volatile
  3864  002994  988B               	bcf	3979,4,c	;volatile
  3865  002996  968B               	bcf	3979,3,c	;volatile
  3866  002998  868B               	bsf	3979,3,c	;volatile
  3867  00299A  888B               	bsf	3979,4,c	;volatile
  3868                           
  3869                           ;libraries/lcd_highlevel.c: 97:   PORTA = 0x0C; LATC3 = 0; LATC3 = 1;;
  3870  00299C  0E0C               	movlw	12
  3871  00299E  6E80               	movwf	128,c	;volatile
  3872  0029A0  968B               	bcf	3979,3,c	;volatile
  3873  0029A2  868B               	bsf	3979,3,c	;volatile
  3874                           
  3875                           ;libraries/lcd_highlevel.c: 98:   PORTA = 0x0C; LATC3 = 0; LATC3 = 1;;
  3876  0029A4  0E0C               	movlw	12
  3877  0029A6  6E80               	movwf	128,c	;volatile
  3878  0029A8  968B               	bcf	3979,3,c	;volatile
  3879  0029AA  868B               	bsf	3979,3,c	;volatile
  3880                           
  3881                           ;libraries/lcd_highlevel.c: 99:   PORTA = 0x33; LATC3 = 0; LATC3 = 1;;
  3882  0029AC  0E33               	movlw	51
  3883  0029AE  6E80               	movwf	128,c	;volatile
  3884  0029B0  968B               	bcf	3979,3,c	;volatile
  3885  0029B2  868B               	bsf	3979,3,c	;volatile
  3886                           
  3887                           ;libraries/lcd_highlevel.c: 100:   PORTA = 0x33; LATC3 = 0; LATC3 = 1;;
  3888  0029B4  0E33               	movlw	51
  3889  0029B6  6E80               	movwf	128,c	;volatile
  3890  0029B8  968B               	bcf	3979,3,c	;volatile
  3891  0029BA  868B               	bsf	3979,3,c	;volatile
  3892                           
  3893                           ;libraries/lcd_highlevel.c: 101:   PORTA = 0xB7; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  3894  0029BC  0EB7               	movlw	183
  3895  0029BE  6E80               	movwf	128,c	;volatile
  3896  0029C0  988B               	bcf	3979,4,c	;volatile
  3897  0029C2  968B               	bcf	3979,3,c	;volatile
  3898  0029C4  868B               	bsf	3979,3,c	;volatile
  3899  0029C6  888B               	bsf	3979,4,c	;volatile
  3900                           
  3901                           ;libraries/lcd_highlevel.c: 102:   PORTA = 0x35; LATC3 = 0; LATC3 = 1;;
  3902  0029C8  0E35               	movlw	53
  3903  0029CA  6E80               	movwf	128,c	;volatile
  3904  0029CC  968B               	bcf	3979,3,c	;volatile
  3905  0029CE  868B               	bsf	3979,3,c	;volatile
  3906                           
  3907                           ;libraries/lcd_highlevel.c: 103:   PORTA = 0xBB; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  3908  0029D0  0EBB               	movlw	187
  3909  0029D2  6E80               	movwf	128,c	;volatile
  3910  0029D4  988B               	bcf	3979,4,c	;volatile
  3911  0029D6  968B               	bcf	3979,3,c	;volatile
  3912  0029D8  868B               	bsf	3979,3,c	;volatile
  3913  0029DA  888B               	bsf	3979,4,c	;volatile
  3914                           
  3915                           ;libraries/lcd_highlevel.c: 104:   PORTA = 0x2B; LATC3 = 0; LATC3 = 1;;
  3916  0029DC  0E2B               	movlw	43
  3917  0029DE  6E80               	movwf	128,c	;volatile
  3918  0029E0  968B               	bcf	3979,3,c	;volatile
  3919  0029E2  868B               	bsf	3979,3,c	;volatile
  3920                           
  3921                           ;libraries/lcd_highlevel.c: 105:   PORTA = 0xC0; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  3922  0029E4  0EC0               	movlw	192
  3923  0029E6  6E80               	movwf	128,c	;volatile
  3924  0029E8  988B               	bcf	3979,4,c	;volatile
  3925  0029EA  968B               	bcf	3979,3,c	;volatile
  3926  0029EC  868B               	bsf	3979,3,c	;volatile
  3927  0029EE  888B               	bsf	3979,4,c	;volatile
  3928                           
  3929                           ;libraries/lcd_highlevel.c: 106:   PORTA = 0x2C; LATC3 = 0; LATC3 = 1;;
  3930  0029F0  0E2C               	movlw	44
  3931  0029F2  6E80               	movwf	128,c	;volatile
  3932  0029F4  968B               	bcf	3979,3,c	;volatile
  3933  0029F6  868B               	bsf	3979,3,c	;volatile
  3934                           
  3935                           ;libraries/lcd_highlevel.c: 107:   PORTA = 0xC2; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  3936  0029F8  0EC2               	movlw	194
  3937  0029FA  6E80               	movwf	128,c	;volatile
  3938  0029FC  988B               	bcf	3979,4,c	;volatile
  3939  0029FE  968B               	bcf	3979,3,c	;volatile
  3940  002A00  868B               	bsf	3979,3,c	;volatile
  3941  002A02  888B               	bsf	3979,4,c	;volatile
  3942                           
  3943                           ;libraries/lcd_highlevel.c: 108:   PORTA = 0x01; LATC3 = 0; LATC3 = 1;;
  3944  002A04  0E01               	movlw	1
  3945  002A06  6E80               	movwf	128,c	;volatile
  3946  002A08  968B               	bcf	3979,3,c	;volatile
  3947  002A0A  868B               	bsf	3979,3,c	;volatile
  3948                           
  3949                           ;libraries/lcd_highlevel.c: 109:   PORTA = 0xFF; LATC3 = 0; LATC3 = 1;;
  3950  002A0C  6880               	setf	128,c	;volatile
  3951  002A0E  968B               	bcf	3979,3,c	;volatile
  3952  002A10  868B               	bsf	3979,3,c	;volatile
  3953                           
  3954                           ;libraries/lcd_highlevel.c: 110:   PORTA = 0XC3; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  3955  002A12  0EC3               	movlw	195
  3956  002A14  6E80               	movwf	128,c	;volatile
  3957  002A16  988B               	bcf	3979,4,c	;volatile
  3958  002A18  968B               	bcf	3979,3,c	;volatile
  3959  002A1A  868B               	bsf	3979,3,c	;volatile
  3960  002A1C  888B               	bsf	3979,4,c	;volatile
  3961                           
  3962                           ;libraries/lcd_highlevel.c: 111:   PORTA = 0x11; LATC3 = 0; LATC3 = 1;;
  3963  002A1E  0E11               	movlw	17
  3964  002A20  6E80               	movwf	128,c	;volatile
  3965  002A22  968B               	bcf	3979,3,c	;volatile
  3966  002A24  868B               	bsf	3979,3,c	;volatile
  3967                           
  3968                           ;libraries/lcd_highlevel.c: 112:   PORTA = 0xC4; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  3969  002A26  0EC4               	movlw	196
  3970  002A28  6E80               	movwf	128,c	;volatile
  3971  002A2A  988B               	bcf	3979,4,c	;volatile
  3972  002A2C  968B               	bcf	3979,3,c	;volatile
  3973  002A2E  868B               	bsf	3979,3,c	;volatile
  3974  002A30  888B               	bsf	3979,4,c	;volatile
  3975                           
  3976                           ;libraries/lcd_highlevel.c: 113:   PORTA = 0x20; LATC3 = 0; LATC3 = 1;;
  3977  002A32  0E20               	movlw	32
  3978  002A34  6E80               	movwf	128,c	;volatile
  3979  002A36  968B               	bcf	3979,3,c	;volatile
  3980  002A38  868B               	bsf	3979,3,c	;volatile
  3981                           
  3982                           ;libraries/lcd_highlevel.c: 114:   PORTA = 0xC6; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  3983  002A3A  0EC6               	movlw	198
  3984  002A3C  6E80               	movwf	128,c	;volatile
  3985  002A3E  988B               	bcf	3979,4,c	;volatile
  3986  002A40  968B               	bcf	3979,3,c	;volatile
  3987  002A42  868B               	bsf	3979,3,c	;volatile
  3988  002A44  888B               	bsf	3979,4,c	;volatile
  3989                           
  3990                           ;libraries/lcd_highlevel.c: 115:   PORTA = 0x09; LATC3 = 0; LATC3 = 1;;
  3991  002A46  0E09               	movlw	9
  3992  002A48  6E80               	movwf	128,c	;volatile
  3993  002A4A  968B               	bcf	3979,3,c	;volatile
  3994  002A4C  868B               	bsf	3979,3,c	;volatile
  3995                           
  3996                           ;libraries/lcd_highlevel.c: 116:   PORTA = 0xD0; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  3997  002A4E  0ED0               	movlw	208
  3998  002A50  6E80               	movwf	128,c	;volatile
  3999  002A52  988B               	bcf	3979,4,c	;volatile
  4000  002A54  968B               	bcf	3979,3,c	;volatile
  4001  002A56  868B               	bsf	3979,3,c	;volatile
  4002  002A58  888B               	bsf	3979,4,c	;volatile
  4003                           
  4004                           ;libraries/lcd_highlevel.c: 117:   PORTA = 0xA4; LATC3 = 0; LATC3 = 1;;
  4005  002A5A  0EA4               	movlw	164
  4006  002A5C  6E80               	movwf	128,c	;volatile
  4007  002A5E  968B               	bcf	3979,3,c	;volatile
  4008  002A60  868B               	bsf	3979,3,c	;volatile
  4009                           
  4010                           ;libraries/lcd_highlevel.c: 118:   PORTA = 0xA1; LATC3 = 0; LATC3 = 1;;
  4011  002A62  0EA1               	movlw	161
  4012  002A64  6E80               	movwf	128,c	;volatile
  4013  002A66  968B               	bcf	3979,3,c	;volatile
  4014  002A68  868B               	bsf	3979,3,c	;volatile
  4015                           
  4016                           ;libraries/lcd_highlevel.c: 119:   PORTA = 0xE0; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  4017  002A6A  0EE0               	movlw	224
  4018  002A6C  6E80               	movwf	128,c	;volatile
  4019  002A6E  988B               	bcf	3979,4,c	;volatile
  4020  002A70  968B               	bcf	3979,3,c	;volatile
  4021  002A72  868B               	bsf	3979,3,c	;volatile
  4022  002A74  888B               	bsf	3979,4,c	;volatile
  4023                           
  4024                           ;libraries/lcd_highlevel.c: 120:   PORTA = 0xD0; LATC3 = 0; LATC3 = 1;;
  4025  002A76  0ED0               	movlw	208
  4026  002A78  6E80               	movwf	128,c	;volatile
  4027  002A7A  968B               	bcf	3979,3,c	;volatile
  4028  002A7C  868B               	bsf	3979,3,c	;volatile
  4029                           
  4030                           ;libraries/lcd_highlevel.c: 121:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
  4031  002A7E  0E00               	movlw	0
  4032  002A80  6E80               	movwf	128,c	;volatile
  4033  002A82  968B               	bcf	3979,3,c	;volatile
  4034  002A84  868B               	bsf	3979,3,c	;volatile
  4035                           
  4036                           ;libraries/lcd_highlevel.c: 122:   PORTA = 0x05; LATC3 = 0; LATC3 = 1;;
  4037  002A86  0E05               	movlw	5
  4038  002A88  6E80               	movwf	128,c	;volatile
  4039  002A8A  968B               	bcf	3979,3,c	;volatile
  4040  002A8C  868B               	bsf	3979,3,c	;volatile
  4041                           
  4042                           ;libraries/lcd_highlevel.c: 123:   PORTA = 0x0E; LATC3 = 0; LATC3 = 1;;
  4043  002A8E  0E0E               	movlw	14
  4044  002A90  6E80               	movwf	128,c	;volatile
  4045  002A92  968B               	bcf	3979,3,c	;volatile
  4046  002A94  868B               	bsf	3979,3,c	;volatile
  4047                           
  4048                           ;libraries/lcd_highlevel.c: 124:   PORTA = 0x15; LATC3 = 0; LATC3 = 1;;
  4049  002A96  0E15               	movlw	21
  4050  002A98  6E80               	movwf	128,c	;volatile
  4051  002A9A  968B               	bcf	3979,3,c	;volatile
  4052  002A9C  868B               	bsf	3979,3,c	;volatile
  4053                           
  4054                           ;libraries/lcd_highlevel.c: 125:   PORTA = 0x0D; LATC3 = 0; LATC3 = 1;;
  4055  002A9E  0E0D               	movlw	13
  4056  002AA0  6E80               	movwf	128,c	;volatile
  4057  002AA2  968B               	bcf	3979,3,c	;volatile
  4058  002AA4  868B               	bsf	3979,3,c	;volatile
  4059                           
  4060                           ;libraries/lcd_highlevel.c: 126:   PORTA = 0x37; LATC3 = 0; LATC3 = 1;;
  4061  002AA6  0E37               	movlw	55
  4062  002AA8  6E80               	movwf	128,c	;volatile
  4063  002AAA  968B               	bcf	3979,3,c	;volatile
  4064  002AAC  868B               	bsf	3979,3,c	;volatile
  4065                           
  4066                           ;libraries/lcd_highlevel.c: 127:   PORTA = 0x43; LATC3 = 0; LATC3 = 1;;
  4067  002AAE  0E43               	movlw	67
  4068  002AB0  6E80               	movwf	128,c	;volatile
  4069  002AB2  968B               	bcf	3979,3,c	;volatile
  4070  002AB4  868B               	bsf	3979,3,c	;volatile
  4071                           
  4072                           ;libraries/lcd_highlevel.c: 128:   PORTA = 0x47; LATC3 = 0; LATC3 = 1;;
  4073  002AB6  0E47               	movlw	71
  4074  002AB8  6E80               	movwf	128,c	;volatile
  4075  002ABA  968B               	bcf	3979,3,c	;volatile
  4076  002ABC  868B               	bsf	3979,3,c	;volatile
  4077                           
  4078                           ;libraries/lcd_highlevel.c: 129:   PORTA = 0x09; LATC3 = 0; LATC3 = 1;;
  4079  002ABE  0E09               	movlw	9
  4080  002AC0  6E80               	movwf	128,c	;volatile
  4081  002AC2  968B               	bcf	3979,3,c	;volatile
  4082  002AC4  868B               	bsf	3979,3,c	;volatile
  4083                           
  4084                           ;libraries/lcd_highlevel.c: 130:   PORTA = 0x15; LATC3 = 0; LATC3 = 1;;
  4085  002AC6  0E15               	movlw	21
  4086  002AC8  6E80               	movwf	128,c	;volatile
  4087  002ACA  968B               	bcf	3979,3,c	;volatile
  4088  002ACC  868B               	bsf	3979,3,c	;volatile
  4089                           
  4090                           ;libraries/lcd_highlevel.c: 131:   PORTA = 0x12; LATC3 = 0; LATC3 = 1;;
  4091  002ACE  0E12               	movlw	18
  4092  002AD0  6E80               	movwf	128,c	;volatile
  4093  002AD2  968B               	bcf	3979,3,c	;volatile
  4094  002AD4  868B               	bsf	3979,3,c	;volatile
  4095                           
  4096                           ;libraries/lcd_highlevel.c: 132:   PORTA = 0x16; LATC3 = 0; LATC3 = 1;;
  4097  002AD6  0E16               	movlw	22
  4098  002AD8  6E80               	movwf	128,c	;volatile
  4099  002ADA  968B               	bcf	3979,3,c	;volatile
  4100  002ADC  868B               	bsf	3979,3,c	;volatile
  4101                           
  4102                           ;libraries/lcd_highlevel.c: 133:   PORTA = 0x19; LATC3 = 0; LATC3 = 1;;
  4103  002ADE  0E19               	movlw	25
  4104  002AE0  6E80               	movwf	128,c	;volatile
  4105  002AE2  968B               	bcf	3979,3,c	;volatile
  4106  002AE4  868B               	bsf	3979,3,c	;volatile
  4107                           
  4108                           ;libraries/lcd_highlevel.c: 134:   PORTA = 0xE1; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  4109  002AE6  0EE1               	movlw	225
  4110  002AE8  6E80               	movwf	128,c	;volatile
  4111  002AEA  988B               	bcf	3979,4,c	;volatile
  4112  002AEC  968B               	bcf	3979,3,c	;volatile
  4113  002AEE  868B               	bsf	3979,3,c	;volatile
  4114  002AF0  888B               	bsf	3979,4,c	;volatile
  4115                           
  4116                           ;libraries/lcd_highlevel.c: 135:   PORTA = 0xD0; LATC3 = 0; LATC3 = 1;;
  4117  002AF2  0ED0               	movlw	208
  4118  002AF4  6E80               	movwf	128,c	;volatile
  4119  002AF6  968B               	bcf	3979,3,c	;volatile
  4120  002AF8  868B               	bsf	3979,3,c	;volatile
  4121                           
  4122                           ;libraries/lcd_highlevel.c: 136:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
  4123  002AFA  0E00               	movlw	0
  4124  002AFC  6E80               	movwf	128,c	;volatile
  4125  002AFE  968B               	bcf	3979,3,c	;volatile
  4126  002B00  868B               	bsf	3979,3,c	;volatile
  4127                           
  4128                           ;libraries/lcd_highlevel.c: 137:   PORTA = 0x05; LATC3 = 0; LATC3 = 1;;
  4129  002B02  0E05               	movlw	5
  4130  002B04  6E80               	movwf	128,c	;volatile
  4131  002B06  968B               	bcf	3979,3,c	;volatile
  4132  002B08  868B               	bsf	3979,3,c	;volatile
  4133                           
  4134                           ;libraries/lcd_highlevel.c: 138:   PORTA = 0x0D; LATC3 = 0; LATC3 = 1;;
  4135  002B0A  0E0D               	movlw	13
  4136  002B0C  6E80               	movwf	128,c	;volatile
  4137  002B0E  968B               	bcf	3979,3,c	;volatile
  4138  002B10  868B               	bsf	3979,3,c	;volatile
  4139                           
  4140                           ;libraries/lcd_highlevel.c: 139:   PORTA = 0x0C; LATC3 = 0; LATC3 = 1;;
  4141  002B12  0E0C               	movlw	12
  4142  002B14  6E80               	movwf	128,c	;volatile
  4143  002B16  968B               	bcf	3979,3,c	;volatile
  4144  002B18  868B               	bsf	3979,3,c	;volatile
  4145                           
  4146                           ;libraries/lcd_highlevel.c: 140:   PORTA = 0x06; LATC3 = 0; LATC3 = 1;;
  4147  002B1A  0E06               	movlw	6
  4148  002B1C  6E80               	movwf	128,c	;volatile
  4149  002B1E  968B               	bcf	3979,3,c	;volatile
  4150  002B20  868B               	bsf	3979,3,c	;volatile
  4151                           
  4152                           ;libraries/lcd_highlevel.c: 141:   PORTA = 0x2D; LATC3 = 0; LATC3 = 1;;
  4153  002B22  0E2D               	movlw	45
  4154  002B24  6E80               	movwf	128,c	;volatile
  4155  002B26  968B               	bcf	3979,3,c	;volatile
  4156  002B28  868B               	bsf	3979,3,c	;volatile
  4157                           
  4158                           ;libraries/lcd_highlevel.c: 142:   PORTA = 0x44; LATC3 = 0; LATC3 = 1;;
  4159  002B2A  0E44               	movlw	68
  4160  002B2C  6E80               	movwf	128,c	;volatile
  4161  002B2E  968B               	bcf	3979,3,c	;volatile
  4162  002B30  868B               	bsf	3979,3,c	;volatile
  4163                           
  4164                           ;libraries/lcd_highlevel.c: 143:   PORTA = 0x40; LATC3 = 0; LATC3 = 1;;
  4165  002B32  0E40               	movlw	64
  4166  002B34  6E80               	movwf	128,c	;volatile
  4167  002B36  968B               	bcf	3979,3,c	;volatile
  4168  002B38  868B               	bsf	3979,3,c	;volatile
  4169                           
  4170                           ;libraries/lcd_highlevel.c: 144:   PORTA = 0x0E; LATC3 = 0; LATC3 = 1;;
  4171  002B3A  0E0E               	movlw	14
  4172  002B3C  6E80               	movwf	128,c	;volatile
  4173  002B3E  968B               	bcf	3979,3,c	;volatile
  4174  002B40  868B               	bsf	3979,3,c	;volatile
  4175                           
  4176                           ;libraries/lcd_highlevel.c: 145:   PORTA = 0x1C; LATC3 = 0; LATC3 = 1;;
  4177  002B42  0E1C               	movlw	28
  4178  002B44  6E80               	movwf	128,c	;volatile
  4179  002B46  968B               	bcf	3979,3,c	;volatile
  4180  002B48  868B               	bsf	3979,3,c	;volatile
  4181                           
  4182                           ;libraries/lcd_highlevel.c: 146:   PORTA = 0x18; LATC3 = 0; LATC3 = 1;;
  4183  002B4A  0E18               	movlw	24
  4184  002B4C  6E80               	movwf	128,c	;volatile
  4185  002B4E  968B               	bcf	3979,3,c	;volatile
  4186  002B50  868B               	bsf	3979,3,c	;volatile
  4187                           
  4188                           ;libraries/lcd_highlevel.c: 147:   PORTA = 0x16; LATC3 = 0; LATC3 = 1;;
  4189  002B52  0E16               	movlw	22
  4190  002B54  6E80               	movwf	128,c	;volatile
  4191  002B56  968B               	bcf	3979,3,c	;volatile
  4192  002B58  868B               	bsf	3979,3,c	;volatile
  4193                           
  4194                           ;libraries/lcd_highlevel.c: 148:   PORTA = 0x19; LATC3 = 0; LATC3 = 1;;
  4195  002B5A  0E19               	movlw	25
  4196  002B5C  6E80               	movwf	128,c	;volatile
  4197  002B5E  968B               	bcf	3979,3,c	;volatile
  4198  002B60  868B               	bsf	3979,3,c	;volatile
  4199                           
  4200                           ;libraries/lcd_highlevel.c: 149:   PORTA = 0x2A; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  4201  002B62  0E2A               	movlw	42
  4202  002B64  6E80               	movwf	128,c	;volatile
  4203  002B66  988B               	bcf	3979,4,c	;volatile
  4204  002B68  968B               	bcf	3979,3,c	;volatile
  4205  002B6A  868B               	bsf	3979,3,c	;volatile
  4206  002B6C  888B               	bsf	3979,4,c	;volatile
  4207                           
  4208                           ;libraries/lcd_highlevel.c: 150:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
  4209  002B6E  0E00               	movlw	0
  4210  002B70  6E80               	movwf	128,c	;volatile
  4211  002B72  968B               	bcf	3979,3,c	;volatile
  4212  002B74  868B               	bsf	3979,3,c	;volatile
  4213                           
  4214                           ;libraries/lcd_highlevel.c: 151:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
  4215  002B76  0E00               	movlw	0
  4216  002B78  6E80               	movwf	128,c	;volatile
  4217  002B7A  968B               	bcf	3979,3,c	;volatile
  4218  002B7C  868B               	bsf	3979,3,c	;volatile
  4219                           
  4220                           ;libraries/lcd_highlevel.c: 152:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
  4221  002B7E  0E00               	movlw	0
  4222  002B80  6E80               	movwf	128,c	;volatile
  4223  002B82  968B               	bcf	3979,3,c	;volatile
  4224  002B84  868B               	bsf	3979,3,c	;volatile
  4225                           
  4226                           ;libraries/lcd_highlevel.c: 153:   PORTA = 0xEF; LATC3 = 0; LATC3 = 1;;
  4227  002B86  0EEF               	movlw	239
  4228  002B88  6E80               	movwf	128,c	;volatile
  4229  002B8A  968B               	bcf	3979,3,c	;volatile
  4230  002B8C  868B               	bsf	3979,3,c	;volatile
  4231                           
  4232                           ;libraries/lcd_highlevel.c: 154:   PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  4233  002B8E  0E2B               	movlw	43
  4234  002B90  6E80               	movwf	128,c	;volatile
  4235  002B92  988B               	bcf	3979,4,c	;volatile
  4236  002B94  968B               	bcf	3979,3,c	;volatile
  4237  002B96  868B               	bsf	3979,3,c	;volatile
  4238  002B98  888B               	bsf	3979,4,c	;volatile
  4239                           
  4240                           ;libraries/lcd_highlevel.c: 155:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
  4241  002B9A  0E00               	movlw	0
  4242  002B9C  6E80               	movwf	128,c	;volatile
  4243  002B9E  968B               	bcf	3979,3,c	;volatile
  4244  002BA0  868B               	bsf	3979,3,c	;volatile
  4245                           
  4246                           ;libraries/lcd_highlevel.c: 156:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
  4247  002BA2  0E00               	movlw	0
  4248  002BA4  6E80               	movwf	128,c	;volatile
  4249  002BA6  968B               	bcf	3979,3,c	;volatile
  4250  002BA8  868B               	bsf	3979,3,c	;volatile
  4251                           
  4252                           ;libraries/lcd_highlevel.c: 157:   PORTA = 0x01; LATC3 = 0; LATC3 = 1;;
  4253  002BAA  0E01               	movlw	1
  4254  002BAC  6E80               	movwf	128,c	;volatile
  4255  002BAE  968B               	bcf	3979,3,c	;volatile
  4256  002BB0  868B               	bsf	3979,3,c	;volatile
  4257                           
  4258                           ;libraries/lcd_highlevel.c: 158:   PORTA = 0x3F; LATC3 = 0; LATC3 = 1;;
  4259  002BB2  0E3F               	movlw	63
  4260  002BB4  6E80               	movwf	128,c	;volatile
  4261  002BB6  968B               	bcf	3979,3,c	;volatile
  4262  002BB8  868B               	bsf	3979,3,c	;volatile
  4263                           
  4264                           ;libraries/lcd_highlevel.c: 159:   PORTA = 0x26; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  4265  002BBA  0E26               	movlw	38
  4266  002BBC  6E80               	movwf	128,c	;volatile
  4267  002BBE  988B               	bcf	3979,4,c	;volatile
  4268  002BC0  968B               	bcf	3979,3,c	;volatile
  4269  002BC2  868B               	bsf	3979,3,c	;volatile
  4270  002BC4  888B               	bsf	3979,4,c	;volatile
  4271                           
  4272                           ;libraries/lcd_highlevel.c: 160:   PORTA = 0x01; LATC3 = 0; LATC3 = 1;;
  4273  002BC6  0E01               	movlw	1
  4274  002BC8  6E80               	movwf	128,c	;volatile
  4275  002BCA  968B               	bcf	3979,3,c	;volatile
  4276  002BCC  868B               	bsf	3979,3,c	;volatile
  4277                           
  4278                           ;libraries/lcd_highlevel.c: 161:   PORTA = 0x29; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
  4279  002BCE  0E29               	movlw	41
  4280  002BD0  6E80               	movwf	128,c	;volatile
  4281  002BD2  988B               	bcf	3979,4,c	;volatile
  4282  002BD4  968B               	bcf	3979,3,c	;volatile
  4283  002BD6  868B               	bsf	3979,3,c	;volatile
  4284  002BD8  888B               	bsf	3979,4,c	;volatile
  4285  002BDA  0012               	return		;funcret
  4286  002BDC                     __end_of_LCD_Init:
  4287                           	callstack 0
  4288                           
  4289 ;; *************** function _LCD_Lowlevel_Init *****************
  4290 ;; Defined at:
  4291 ;;		line 17 in file "libraries/lcd_lowlevel.c"
  4292 ;; Parameters:    Size  Location     Type
  4293 ;;		None
  4294 ;; Auto vars:     Size  Location     Type
  4295 ;;  i               4   18[COMRAM] unsigned long 
  4296 ;; Return value:  Size  Location     Type
  4297 ;;                  1    wreg      void 
  4298 ;; Registers used:
  4299 ;;		wreg, status,2, status,0
  4300 ;; Tracked objects:
  4301 ;;		On entry : 0/0
  4302 ;;		On exit  : 0/0
  4303 ;;		Unchanged: 0/0
  4304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4305 ;;      Params:         0       0       0       0       0       0       0
  4306 ;;      Locals:         4       0       0       0       0       0       0
  4307 ;;      Temps:          1       0       0       0       0       0       0
  4308 ;;      Totals:         5       0       0       0       0       0       0
  4309 ;;Total ram usage:        5 bytes
  4310 ;; Hardware stack levels used: 1
  4311 ;; Hardware stack levels required when called: 4
  4312 ;; This function calls:
  4313 ;;		Nothing
  4314 ;; This function is called by:
  4315 ;;		_LCD_Init
  4316 ;; This function uses a non-reentrant model
  4317 ;;
  4318                           
  4319                           	psect	text8
  4320  004F02                     __ptext8:
  4321                           	callstack 0
  4322  004F02                     _LCD_Lowlevel_Init:
  4323                           	callstack 24
  4324                           
  4325                           ;libraries/lcd_lowlevel.c: 19:   uint32_t i;;libraries/lcd_lowlevel.c: 20:   TRISC5 = 0;
  4326                           
  4327                           ;incstack = 0
  4328  004F02  9A94               	bcf	3988,5,c	;volatile
  4329                           
  4330                           ;libraries/lcd_lowlevel.c: 21:   TRISC2 = 0;
  4331  004F04  9494               	bcf	3988,2,c	;volatile
  4332                           
  4333                           ;libraries/lcd_lowlevel.c: 22:   TRISC3 = 0;
  4334  004F06  9694               	bcf	3988,3,c	;volatile
  4335                           
  4336                           ;libraries/lcd_lowlevel.c: 23:   TRISC4 = 0;
  4337  004F08  9894               	bcf	3988,4,c	;volatile
  4338                           
  4339                           ;libraries/lcd_lowlevel.c: 25:   TRISA = 0x00;
  4340  004F0A  0E00               	movlw	0
  4341  004F0C  6E92               	movwf	146,c	;volatile
  4342                           
  4343                           ;libraries/lcd_lowlevel.c: 28:  LATC5 = 0;
  4344  004F0E  9A8B               	bcf	3979,5,c	;volatile
  4345                           
  4346                           ;libraries/lcd_lowlevel.c: 29:  LATC2 = 1;
  4347  004F10  848B               	bsf	3979,2,c	;volatile
  4348                           
  4349                           ;libraries/lcd_lowlevel.c: 30:  LATC3 = 1;
  4350  004F12  868B               	bsf	3979,3,c	;volatile
  4351                           
  4352                           ;libraries/lcd_lowlevel.c: 31:  LATC4 = 1;
  4353  004F14  888B               	bsf	3979,4,c	;volatile
  4354                           
  4355                           ;libraries/lcd_lowlevel.c: 33:   for(i=0;i<12;i++)
  4356  004F16  0E00               	movlw	0
  4357  004F18  6E13               	movwf	LCD_Lowlevel_Init@i^0,c
  4358  004F1A  0E00               	movlw	0
  4359  004F1C  6E14               	movwf	(LCD_Lowlevel_Init@i+1)^0,c
  4360  004F1E  0E00               	movlw	0
  4361  004F20  6E15               	movwf	(LCD_Lowlevel_Init@i+2)^0,c
  4362  004F22  0E00               	movlw	0
  4363  004F24  6E16               	movwf	(LCD_Lowlevel_Init@i+3)^0,c
  4364  004F26                     l4026:
  4365                           
  4366                           ;libraries/lcd_lowlevel.c: 34:   {;libraries/lcd_lowlevel.c: 35:     _delay((unsigned lo
      +                          ng)((10)*(64000000L/4000.0)));
  4367  004F26  0ED0               	movlw	208
  4368  004F28  6E12               	movwf	??_LCD_Lowlevel_Init^0,c
  4369  004F2A  0ECA               	movlw	202
  4370  004F2C                     u6577:
  4371  004F2C  2EE8               	decfsz	wreg,f,c
  4372  004F2E  D7FE               	bra	u6577
  4373  004F30  2E12               	decfsz	??_LCD_Lowlevel_Init^0,f,c
  4374  004F32  D7FC               	bra	u6577
  4375                           
  4376                           ;libraries/lcd_lowlevel.c: 36:   }
  4377  004F34  0E01               	movlw	1
  4378  004F36  2613               	addwf	LCD_Lowlevel_Init@i^0,f,c
  4379  004F38  0E00               	movlw	0
  4380  004F3A  2214               	addwfc	(LCD_Lowlevel_Init@i+1)^0,f,c
  4381  004F3C  2215               	addwfc	(LCD_Lowlevel_Init@i+2)^0,f,c
  4382  004F3E  2216               	addwfc	(LCD_Lowlevel_Init@i+3)^0,f,c
  4383  004F40  5016               	movf	(LCD_Lowlevel_Init@i+3)^0,w,c
  4384  004F42  1015               	iorwf	(LCD_Lowlevel_Init@i+2)^0,w,c
  4385  004F44  1014               	iorwf	(LCD_Lowlevel_Init@i+1)^0,w,c
  4386  004F46  E104               	bnz	u2420
  4387  004F48  0E0C               	movlw	12
  4388  004F4A  5C13               	subwf	LCD_Lowlevel_Init@i^0,w,c
  4389  004F4C  A0D8               	btfss	status,0,c
  4390  004F4E  D7EB               	goto	l4026
  4391  004F50                     u2420:
  4392                           
  4393                           ;libraries/lcd_lowlevel.c: 38:   for(i=0;i<12;i++)
  4394  004F50  0E00               	movlw	0
  4395  004F52  6E13               	movwf	LCD_Lowlevel_Init@i^0,c
  4396  004F54  0E00               	movlw	0
  4397  004F56  6E14               	movwf	(LCD_Lowlevel_Init@i+1)^0,c
  4398  004F58  0E00               	movlw	0
  4399  004F5A  6E15               	movwf	(LCD_Lowlevel_Init@i+2)^0,c
  4400  004F5C  0E00               	movlw	0
  4401  004F5E  6E16               	movwf	(LCD_Lowlevel_Init@i+3)^0,c
  4402  004F60                     l4038:
  4403                           
  4404                           ;libraries/lcd_lowlevel.c: 39:   {;libraries/lcd_lowlevel.c: 40:     _delay((unsigned lo
      +                          ng)((10)*(64000000L/4000.0)));
  4405  004F60  0ED0               	movlw	208
  4406  004F62  6E12               	movwf	??_LCD_Lowlevel_Init^0,c
  4407  004F64  0ECA               	movlw	202
  4408  004F66                     u6587:
  4409  004F66  2EE8               	decfsz	wreg,f,c
  4410  004F68  D7FE               	bra	u6587
  4411  004F6A  2E12               	decfsz	??_LCD_Lowlevel_Init^0,f,c
  4412  004F6C  D7FC               	bra	u6587
  4413                           
  4414                           ;libraries/lcd_lowlevel.c: 41:   }
  4415  004F6E  0E01               	movlw	1
  4416  004F70  2613               	addwf	LCD_Lowlevel_Init@i^0,f,c
  4417  004F72  0E00               	movlw	0
  4418  004F74  2214               	addwfc	(LCD_Lowlevel_Init@i+1)^0,f,c
  4419  004F76  2215               	addwfc	(LCD_Lowlevel_Init@i+2)^0,f,c
  4420  004F78  2216               	addwfc	(LCD_Lowlevel_Init@i+3)^0,f,c
  4421  004F7A  5016               	movf	(LCD_Lowlevel_Init@i+3)^0,w,c
  4422  004F7C  1015               	iorwf	(LCD_Lowlevel_Init@i+2)^0,w,c
  4423  004F7E  1014               	iorwf	(LCD_Lowlevel_Init@i+1)^0,w,c
  4424  004F80  E105               	bnz	u2430
  4425  004F82  0E0C               	movlw	12
  4426  004F84  5C13               	subwf	LCD_Lowlevel_Init@i^0,w,c
  4427  004F86  B0D8               	btfsc	status,0,c
  4428  004F88  0012               	return	
  4429  004F8A  D7EA               	goto	l4038
  4430  004F8C                     u2430:
  4431  004F8C  0012               	return		;funcret
  4432  004F8E                     __end_of_LCD_Lowlevel_Init:
  4433                           	callstack 0
  4434                           
  4435 ;; *************** function _Factory_exec *****************
  4436 ;; Defined at:
  4437 ;;		line 63 in file "class/factory.c"
  4438 ;; Parameters:    Size  Location     Type
  4439 ;;		None
  4440 ;; Auto vars:     Size  Location     Type
  4441 ;;  ev              1   70[BANK0 ] unsigned char 
  4442 ;; Return value:  Size  Location     Type
  4443 ;;                  1    wreg      void 
  4444 ;; Registers used:
  4445 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4446 ;; Tracked objects:
  4447 ;;		On entry : 0/0
  4448 ;;		On exit  : 0/0
  4449 ;;		Unchanged: 0/0
  4450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4451 ;;      Params:         0       0       0       0       0       0       0
  4452 ;;      Locals:         0       1       0       0       0       0       0
  4453 ;;      Temps:          0       0       0       0       0       0       0
  4454 ;;      Totals:         0       1       0       0       0       0       0
  4455 ;;Total ram usage:        1 bytes
  4456 ;; Hardware stack levels used: 1
  4457 ;; Hardware stack levels required when called: 15
  4458 ;; This function calls:
  4459 ;;		_XF_popEvent
  4460 ;;		_displaySM
  4461 ;;		_gameControllerSM
  4462 ;;		_sleepSM
  4463 ;;		_touchScreenSM
  4464 ;; This function is called by:
  4465 ;;		_main
  4466 ;; This function uses a non-reentrant model
  4467 ;;
  4468                           
  4469                           	psect	text9
  4470  005542                     __ptext9:
  4471                           	callstack 0
  4472  005542                     _Factory_exec:
  4473                           	callstack 15
  4474                           
  4475                           ;class/factory.c: 66:     Event ev;;class/factory.c: 67:     ev = XF_popEvent(0);
  4476                           
  4477                           ;incstack = 0
  4478  005542  0E00               	movlw	0
  4479  005544  EC7A  F02A         	call	_XF_popEvent
  4480  005548  0100               	movlb	0	; () banked
  4481  00554A  6FF0               	movwf	Factory_exec@ev& (0+255),b
  4482                           
  4483                           ; BSR set to: 0
  4484                           ;class/factory.c: 68:     if (ev != NULLEVENT)
  4485  00554C  51F0               	movf	Factory_exec@ev& (0+255),w,b
  4486  00554E  B4D8               	btfsc	status,2,c
  4487  005550  0012               	return	
  4488                           
  4489                           ; BSR set to: 0
  4490                           ;class/factory.c: 69:     {;class/factory.c: 70:         sleepSM(ev);
  4491  005552  51F0               	movf	Factory_exec@ev& (0+255),w,b
  4492  005554  ECF2  F02B         	call	_sleepSM
  4493                           
  4494                           ;class/factory.c: 71:         touchScreenSM(ev,&g1);
  4495  005558  0E00               	movlw	low _g1
  4496  00555A  0100               	movlb	0	; () banked
  4497  00555C  6FB6               	movwf	touchScreenSM@g& (0+255),b
  4498  00555E  0E01               	movlw	high _g1
  4499  005560  6FB7               	movwf	(touchScreenSM@g+1)& (0+255),b
  4500  005562  51F0               	movf	Factory_exec@ev& (0+255),w,b
  4501  005564  ECA7  F029         	call	_touchScreenSM
  4502                           
  4503                           ;class/factory.c: 72:         displaySM(ev,&g1);
  4504  005568  0E00               	movlw	low _g1
  4505  00556A  0100               	movlb	0	; () banked
  4506  00556C  6FEB               	movwf	displaySM@g& (0+255),b
  4507  00556E  0E01               	movlw	high _g1
  4508  005570  6FEC               	movwf	(displaySM@g+1)& (0+255),b
  4509  005572  51F0               	movf	Factory_exec@ev& (0+255),w,b
  4510  005574  ECFF  F025         	call	_displaySM
  4511                           
  4512                           ;class/factory.c: 73:         gameControllerSM(ev,&g1);
  4513  005578  0E00               	movlw	low _g1
  4514  00557A  6E3C               	movwf	gameControllerSM@g^0,c
  4515  00557C  0E01               	movlw	high _g1
  4516  00557E  6E3D               	movwf	(gameControllerSM@g+1)^0,c
  4517  005580  0100               	movlb	0	; () banked
  4518  005582  51F0               	movf	Factory_exec@ev& (0+255),w,b
  4519  005584  ECB0  F01F         	call	_gameControllerSM
  4520  005588  0012               	return		;funcret
  4521  00558A                     __end_of_Factory_exec:
  4522                           	callstack 0
  4523                           
  4524 ;; *************** function _touchScreenSM *****************
  4525 ;; Defined at:
  4526 ;;		line 31 in file "stateMachine/touchScreenSM.c"
  4527 ;; Parameters:    Size  Location     Type
  4528 ;;  ev              1    wreg     unsigned char 
  4529 ;;  g               2   12[BANK0 ] PTR struct GameParameter
  4530 ;;		 -> g1(240), 
  4531 ;; Auto vars:     Size  Location     Type
  4532 ;;  ev              1   68[COMRAM] unsigned char 
  4533 ;; Return value:  Size  Location     Type
  4534 ;;                  1    wreg      void 
  4535 ;; Registers used:
  4536 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4537 ;; Tracked objects:
  4538 ;;		On entry : 3F/0
  4539 ;;		On exit  : 0/0
  4540 ;;		Unchanged: 0/0
  4541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4542 ;;      Params:         0       2       0       0       0       0       0
  4543 ;;      Locals:         1       0       0       0       0       0       0
  4544 ;;      Temps:          0       2       0       0       0       0       0
  4545 ;;      Totals:         1       4       0       0       0       0       0
  4546 ;;Total ram usage:        5 bytes
  4547 ;; Hardware stack levels used: 1
  4548 ;; Hardware stack levels required when called: 7
  4549 ;; This function calls:
  4550 ;;		_touchScreenController
  4551 ;; This function is called by:
  4552 ;;		_Factory_exec
  4553 ;; This function uses a non-reentrant model
  4554 ;;
  4555                           
  4556                           	psect	text10
  4557  00534E                     __ptext10:
  4558                           	callstack 0
  4559  00534E                     _touchScreenSM:
  4560                           	callstack 22
  4561                           
  4562                           ;incstack = 0
  4563                           ;touchScreenSM@ev stored from wreg
  4564  00534E  6E45               	movwf	touchScreenSM@ev^0,c
  4565                           
  4566                           ;stateMachine/touchScreenSM.c: 31: void touchScreenSM(Event ev, GameParameters* g);state
      +                          Machine/touchScreenSM.c: 32: {;stateMachine/touchScreenSM.c: 33:     switch(touchScreenS
      +                          tate)
  4567  005350  D01D               	goto	l8798
  4568  005352                     l8780:
  4569                           
  4570                           ; BSR set to: 0
  4571                           ;stateMachine/touchScreenSM.c: 36:             if(ev==evPress)
  4572  005352  0445               	decf	touchScreenSM@ev^0,w,c
  4573  005354  A4D8               	btfss	status,2,c
  4574  005356  0012               	return	
  4575                           
  4576                           ; BSR set to: 0
  4577                           ;stateMachine/touchScreenSM.c: 37:             {;stateMachine/touchScreenSM.c: 38:      
      +                                     touchScreenState=CALCULATEPOSITION;
  4578  005358  0E01               	movlw	1
  4579  00535A  6E4D               	movwf	_touchScreenState^0,c
  4580  00535C                     l8784:
  4581                           
  4582                           ;stateMachine/touchScreenSM.c: 39:                 touchScreenController(g);
  4583  00535C  C0B6  F043         	movff	touchScreenSM@g,touchScreenController@g
  4584  005360  C0B7  F044         	movff	touchScreenSM@g+1,touchScreenController@g+1
  4585  005364  EC51  F019         	call	_touchScreenController	;wreg free
  4586  005368  0012               	return	
  4587  00536A                     l8786:
  4588                           
  4589                           ; BSR set to: 0
  4590                           ;stateMachine/touchScreenSM.c: 44:             if(ev==evRelease)
  4591  00536A  0E02               	movlw	2
  4592  00536C  1845               	xorwf	touchScreenSM@ev^0,w,c
  4593  00536E  A4D8               	btfss	status,2,c
  4594  005370  D008               	goto	l8792
  4595                           
  4596                           ; BSR set to: 0
  4597                           ;stateMachine/touchScreenSM.c: 45:             {;stateMachine/touchScreenSM.c: 46:      
      +                                     touchScreenState=WAITING;
  4598  005372  0E00               	movlw	0
  4599  005374  6E4D               	movwf	_touchScreenState^0,c
  4600                           
  4601                           ; BSR set to: 0
  4602                           ;stateMachine/touchScreenSM.c: 47:                 touchScreenController(g);
  4603  005376  C0B6  F043         	movff	touchScreenSM@g,touchScreenController@g
  4604  00537A  C0B7  F044         	movff	touchScreenSM@g+1,touchScreenController@g+1
  4605  00537E  EC51  F019         	call	_touchScreenController	;wreg free
  4606  005382                     l8792:
  4607                           
  4608                           ;stateMachine/touchScreenSM.c: 49:             if(ev==evTimerPos)
  4609  005382  0E04               	movlw	4
  4610  005384  1845               	xorwf	touchScreenSM@ev^0,w,c
  4611  005386  A4D8               	btfss	status,2,c
  4612  005388  0012               	return	
  4613  00538A  D7E8               	goto	l8784
  4614  00538C                     l8798:
  4615  00538C  504D               	movf	_touchScreenState^0,w,c
  4616  00538E  0100               	movlb	0	; () banked
  4617  005390  6FB8               	movwf	??_touchScreenSM& (0+255),b
  4618  005392  6BB9               	clrf	(??_touchScreenSM+1)& (0+255),b
  4619                           
  4620                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4621                           ; Switch size 1, requested type "simple"
  4622                           ; Number of cases is 1, Range of values is 0 to 0
  4623                           ; switch strategies available:
  4624                           ; Name         Instructions Cycles
  4625                           ; simple_byte            4     3 (average)
  4626                           ;	Chosen strategy is simple_byte
  4627  005394  51B9               	movf	(??_touchScreenSM+1)& (0+255),w,b
  4628  005396  0A00               	xorlw	0	; case 0
  4629  005398  A4D8               	btfss	status,2,c
  4630  00539A  0012               	return	
  4631                           
  4632                           ; BSR set to: 0
  4633                           ; Switch size 1, requested type "simple"
  4634                           ; Number of cases is 2, Range of values is 0 to 1
  4635                           ; switch strategies available:
  4636                           ; Name         Instructions Cycles
  4637                           ; simple_byte            7     4 (average)
  4638                           ;	Chosen strategy is simple_byte
  4639  00539C  51B8               	movf	??_touchScreenSM& (0+255),w,b
  4640  00539E  0A00               	xorlw	0	; case 0
  4641  0053A0  B4D8               	btfsc	status,2,c
  4642  0053A2  D7D7               	goto	l8780
  4643  0053A4  0A01               	xorlw	1	; case 1
  4644  0053A6  A4D8               	btfss	status,2,c
  4645  0053A8  0012               	return	
  4646  0053AA  D7DF               	goto	l8786
  4647  0053AC                     __end_of_touchScreenSM:
  4648                           	callstack 0
  4649                           
  4650 ;; *************** function _touchScreenController *****************
  4651 ;; Defined at:
  4652 ;;		line 67 in file "stateMachine/touchScreenSM.c"
  4653 ;; Parameters:    Size  Location     Type
  4654 ;;  g               2   66[COMRAM] PTR struct GameParameter
  4655 ;;		 -> g1(240), 
  4656 ;; Auto vars:     Size  Location     Type
  4657 ;;  i               2    8[BANK0 ] int 
  4658 ;;  valueX          2   10[BANK0 ] unsigned short 
  4659 ;;  valueY          2    6[BANK0 ] unsigned short 
  4660 ;; Return value:  Size  Location     Type
  4661 ;;                  1    wreg      void 
  4662 ;; Registers used:
  4663 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4664 ;; Tracked objects:
  4665 ;;		On entry : 0/0
  4666 ;;		On exit  : 0/0
  4667 ;;		Unchanged: 0/0
  4668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4669 ;;      Params:         2       0       0       0       0       0       0
  4670 ;;      Locals:         0       6       0       0       0       0       0
  4671 ;;      Temps:          0       6       0       0       0       0       0
  4672 ;;      Totals:         2      12       0       0       0       0       0
  4673 ;;Total ram usage:       14 bytes
  4674 ;; Hardware stack levels used: 1
  4675 ;; Hardware stack levels required when called: 6
  4676 ;; This function calls:
  4677 ;;		_GameParameters_setX
  4678 ;;		_GameParameters_setY
  4679 ;;		_XF_scheduleTimer
  4680 ;;		_XF_unscheduleTimer
  4681 ;;		___fldiv
  4682 ;;		___fltol
  4683 ;;		___xxtofl
  4684 ;;		_configMeasure
  4685 ;;		_configTouch
  4686 ;; This function is called by:
  4687 ;;		_touchScreenSM
  4688 ;; This function uses a non-reentrant model
  4689 ;;
  4690                           
  4691                           	psect	text11
  4692  0032A2                     __ptext11:
  4693                           	callstack 0
  4694  0032A2                     _touchScreenController:
  4695                           	callstack 22
  4696                           
  4697                           ;stateMachine/touchScreenSM.c: 67: void touchScreenController(GameParameters* g);stateMa
      +                          chine/touchScreenSM.c: 68: {;stateMachine/touchScreenSM.c: 69:     switch(touchScreenSta
      +                          te)
  4698                           
  4699                           ;incstack = 0
  4700  0032A2  D0D5               	goto	l7566
  4701  0032A4                     l532:
  4702                           
  4703                           ; BSR set to: 0
  4704                           ;stateMachine/touchScreenSM.c: 73:             INTEDG1=0;
  4705  0032A4  9AF1               	bcf	4081,5,c	;volatile
  4706                           
  4707                           ; BSR set to: 0
  4708                           ;stateMachine/touchScreenSM.c: 74:             XF_scheduleTimer(30000,evSleep,0);
  4709  0032A6  0E75               	movlw	117
  4710  0032A8  6E21               	movwf	(XF_scheduleTimer@tm+1)^0,c
  4711  0032AA  0E30               	movlw	48
  4712  0032AC  6E20               	movwf	XF_scheduleTimer@tm^0,c
  4713  0032AE  0E03               	movlw	3
  4714  0032B0  6E22               	movwf	XF_scheduleTimer@ev^0,c
  4715  0032B2  0E00               	movlw	0
  4716  0032B4  6E23               	movwf	XF_scheduleTimer@inISR^0,c
  4717  0032B6  ECFF  F029         	call	_XF_scheduleTimer	;wreg free
  4718                           
  4719                           ;stateMachine/touchScreenSM.c: 75:             configTouch();
  4720  0032BA  ECB9  F02C         	call	_configTouch	;wreg free
  4721                           
  4722                           ;stateMachine/touchScreenSM.c: 77:             break;
  4723  0032BE  0012               	return	
  4724  0032C0                     l7522:
  4725                           
  4726                           ; BSR set to: 0
  4727                           ;stateMachine/touchScreenSM.c: 80:             for (int i=0; i<8; i++)
  4728  0032C0  0E00               	movlw	0
  4729  0032C2  6FB3               	movwf	(touchScreenController@i+1)& (0+255),b
  4730  0032C4  0E00               	movlw	0
  4731  0032C6  6FB2               	movwf	touchScreenController@i& (0+255),b
  4732  0032C8                     l7528:
  4733                           
  4734                           ; BSR set to: 0
  4735                           ;stateMachine/touchScreenSM.c: 81:             {;stateMachine/touchScreenSM.c: 82:      
      +                                     if (theXF.timerList[i].ev == evSleep)
  4736  0032C8  51B2               	movf	touchScreenController@i& (0+255),w,b
  4737  0032CA  0D03               	mullw	3
  4738  0032CC  50F3               	movf	243,w,c
  4739  0032CE  0F62               	addlw	low (_theXF+2)
  4740  0032D0  6ED9               	movwf	fsr2l,c
  4741  0032D2  6ADA               	clrf	fsr2h,c
  4742  0032D4  0E03               	movlw	3
  4743  0032D6  18DE               	xorwf	postinc2,w,c
  4744  0032D8  A4D8               	btfss	status,2,c
  4745  0032DA  D005               	goto	l7532
  4746                           
  4747                           ; BSR set to: 0
  4748                           ;stateMachine/touchScreenSM.c: 83:                 {;stateMachine/touchScreenSM.c: 84:  
      +                                             XF_unscheduleTimer(i, 0);
  4749  0032DC  0E00               	movlw	0
  4750  0032DE  6E13               	movwf	XF_unscheduleTimer@inISR^0,c
  4751  0032E0  51B2               	movf	touchScreenController@i& (0+255),w,b
  4752  0032E2  ECA5  F02B         	call	_XF_unscheduleTimer
  4753  0032E6                     l7532:
  4754                           
  4755                           ;stateMachine/touchScreenSM.c: 86:             }
  4756  0032E6  0100               	movlb	0	; () banked
  4757  0032E8  4BB2               	infsnz	touchScreenController@i& (0+255),f,b
  4758  0032EA  2BB3               	incf	(touchScreenController@i+1)& (0+255),f,b
  4759                           
  4760                           ; BSR set to: 0
  4761  0032EC  BFB3               	btfsc	(touchScreenController@i+1)& (0+255),7,b
  4762  0032EE  D7EC               	goto	l7528
  4763  0032F0  51B3               	movf	(touchScreenController@i+1)& (0+255),w,b
  4764  0032F2  E104               	bnz	u5330
  4765  0032F4  0E08               	movlw	8
  4766  0032F6  5DB2               	subwf	touchScreenController@i& (0+255),w,b
  4767  0032F8  A0D8               	btfss	status,0,c
  4768  0032FA  D7E6               	goto	l7528
  4769  0032FC                     u5330:
  4770                           
  4771                           ; BSR set to: 0
  4772                           ;stateMachine/touchScreenSM.c: 90:             INT1IE=0;
  4773  0032FC  96F0               	bcf	4080,3,c	;volatile
  4774                           
  4775                           ; BSR set to: 0
  4776                           ;stateMachine/touchScreenSM.c: 91:             configMeasure(0);
  4777  0032FE  0E00               	movlw	0
  4778  003300  EC6B  F02B         	call	_configMeasure
  4779  003304                     l538:
  4780  003304  B2C2               	btfsc	194,1,c	;volatile
  4781  003306  D7FE               	goto	l538
  4782                           
  4783                           ;stateMachine/touchScreenSM.c: 93:             uint16_t valueX;;stateMachine/touchScreen
      +                          SM.c: 94:             valueX=(ADRESH<<8)+ADRESL;
  4784  003308  50C4               	movf	196,w,c	;volatile
  4785  00330A  0100               	movlb	0	; () banked
  4786  00330C  6FAB               	movwf	(??_touchScreenController+1)& (0+255),b
  4787  00330E  6BAA               	clrf	??_touchScreenController& (0+255),b
  4788  003310  50C3               	movf	195,w,c	;volatile
  4789  003312  25AA               	addwf	??_touchScreenController& (0+255),w,b
  4790  003314  6FB4               	movwf	touchScreenController@valueX& (0+255),b
  4791  003316  0E00               	movlw	0
  4792  003318  21AB               	addwfc	(??_touchScreenController+1)& (0+255),w,b
  4793  00331A  6FB5               	movwf	(touchScreenController@valueX+1)& (0+255),b
  4794                           
  4795                           ;stateMachine/touchScreenSM.c: 95:             if(valueX<=120)
  4796  00331C  51B5               	movf	(touchScreenController@valueX+1)& (0+255),w,b
  4797  00331E  E108               	bnz	l7542
  4798  003320  0E79               	movlw	121
  4799  003322  5DB4               	subwf	touchScreenController@valueX& (0+255),w,b
  4800  003324  B0D8               	btfsc	status,0,c
  4801  003326  D004               	goto	l7542
  4802                           
  4803                           ; BSR set to: 0
  4804                           ;stateMachine/touchScreenSM.c: 96:             {;stateMachine/touchScreenSM.c: 97:      
      +                                     valueX=120;
  4805  003328  0E00               	movlw	0
  4806  00332A  6FB5               	movwf	(touchScreenController@valueX+1)& (0+255),b
  4807  00332C  0E78               	movlw	120
  4808  00332E  6FB4               	movwf	touchScreenController@valueX& (0+255),b
  4809  003330                     l7542:
  4810                           
  4811                           ; BSR set to: 0
  4812                           ;stateMachine/touchScreenSM.c: 99:             valueX=(valueX-120)/2.35;
  4813  003330  0E66               	movlw	102
  4814  003332  6E24               	movwf	___fldiv@a^0,c
  4815  003334  0E66               	movlw	102
  4816  003336  6E25               	movwf	(___fldiv@a+1)^0,c
  4817  003338  0E16               	movlw	22
  4818  00333A  6E26               	movwf	(___fldiv@a+2)^0,c
  4819  00333C  0E40               	movlw	64
  4820  00333E  6E27               	movwf	(___fldiv@a+3)^0,c
  4821  003340  0E88               	movlw	136
  4822  003342  6FAA               	movwf	??_touchScreenController& (0+255),b
  4823  003344  0EFF               	movlw	255
  4824  003346  6FAB               	movwf	(??_touchScreenController+1)& (0+255),b
  4825  003348  C0B4  F0AC         	movff	touchScreenController@valueX,??_touchScreenController+2
  4826  00334C  C0B5  F0AD         	movff	touchScreenController@valueX+1,??_touchScreenController+3
  4827  003350  51AA               	movf	??_touchScreenController& (0+255),w,b
  4828  003352  27AC               	addwf	(??_touchScreenController+2)& (0+255),f,b
  4829  003354  51AB               	movf	(??_touchScreenController+1)& (0+255),w,b
  4830  003356  23AD               	addwfc	(??_touchScreenController+3)& (0+255),f,b
  4831  003358  C0AC  F012         	movff	??_touchScreenController+2,___xxtofl@val
  4832  00335C  C0AD  F013         	movff	??_touchScreenController+3,___xxtofl@val+1
  4833  003360  6A14               	clrf	(___xxtofl@val+2)^0,c
  4834  003362  6A15               	clrf	(___xxtofl@val+3)^0,c
  4835  003364  0E00               	movlw	0
  4836  003366  EC2E  F01C         	call	___xxtofl
  4837  00336A  C012  F020         	movff	?___xxtofl,___fldiv@b
  4838  00336E  C013  F021         	movff	?___xxtofl+1,___fldiv@b+1
  4839  003372  C014  F022         	movff	?___xxtofl+2,___fldiv@b+2
  4840  003376  C015  F023         	movff	?___xxtofl+3,___fldiv@b+3
  4841  00337A  ECEE  F015         	call	___fldiv	;wreg free
  4842  00337E  C020  F039         	movff	?___fldiv,___fltol@f1
  4843  003382  C021  F03A         	movff	?___fldiv+1,___fltol@f1+1
  4844  003386  C022  F03B         	movff	?___fldiv+2,___fltol@f1+2
  4845  00338A  C023  F03C         	movff	?___fldiv+3,___fltol@f1+3
  4846  00338E  EC98  F023         	call	___fltol	;wreg free
  4847  003392  C039  F0B4         	movff	?___fltol,touchScreenController@valueX
  4848  003396  C03A  F0B5         	movff	?___fltol+1,touchScreenController@valueX+1
  4849                           
  4850                           ;stateMachine/touchScreenSM.c: 100:             valueX=240 -valueX;
  4851  00339A  0100               	movlb	0	; () banked
  4852  00339C  51B4               	movf	touchScreenController@valueX& (0+255),w,b
  4853  00339E  08F0               	sublw	240
  4854  0033A0  6FB4               	movwf	touchScreenController@valueX& (0+255),b
  4855  0033A2  51B5               	movf	(touchScreenController@valueX+1)& (0+255),w,b
  4856  0033A4  A0D8               	btfss	status,0,c
  4857  0033A6  2AE8               	incf	wreg,f,c
  4858  0033A8  0800               	sublw	0
  4859  0033AA  6FB5               	movwf	(touchScreenController@valueX+1)& (0+255),b
  4860                           
  4861                           ; BSR set to: 0
  4862                           ;stateMachine/touchScreenSM.c: 102:             configMeasure(1);
  4863  0033AC  0E01               	movlw	1
  4864  0033AE  EC6B  F02B         	call	_configMeasure
  4865  0033B2                     l542:
  4866  0033B2  B2C2               	btfsc	194,1,c	;volatile
  4867  0033B4  D7FE               	goto	l542
  4868                           
  4869                           ;stateMachine/touchScreenSM.c: 104:             uint16_t valueY;;stateMachine/touchScree
      +                          nSM.c: 105:             valueY=(ADRESH<<8)+ADRESL;
  4870  0033B6  50C4               	movf	196,w,c	;volatile
  4871  0033B8  0100               	movlb	0	; () banked
  4872  0033BA  6FAB               	movwf	(??_touchScreenController+1)& (0+255),b
  4873  0033BC  6BAA               	clrf	??_touchScreenController& (0+255),b
  4874  0033BE  50C3               	movf	195,w,c	;volatile
  4875  0033C0  25AA               	addwf	??_touchScreenController& (0+255),w,b
  4876  0033C2  6FB0               	movwf	touchScreenController@valueY& (0+255),b
  4877  0033C4  0E00               	movlw	0
  4878  0033C6  21AB               	addwfc	(??_touchScreenController+1)& (0+255),w,b
  4879  0033C8  6FB1               	movwf	(touchScreenController@valueY+1)& (0+255),b
  4880                           
  4881                           ;stateMachine/touchScreenSM.c: 106:             if(valueY<=105)
  4882  0033CA  51B1               	movf	(touchScreenController@valueY+1)& (0+255),w,b
  4883  0033CC  E108               	bnz	l7552
  4884  0033CE  0E6A               	movlw	106
  4885  0033D0  5DB0               	subwf	touchScreenController@valueY& (0+255),w,b
  4886  0033D2  B0D8               	btfsc	status,0,c
  4887  0033D4  D004               	goto	l7552
  4888                           
  4889                           ; BSR set to: 0
  4890                           ;stateMachine/touchScreenSM.c: 107:             {;stateMachine/touchScreenSM.c: 108:    
      +                                       valueY=105;
  4891  0033D6  0E00               	movlw	0
  4892  0033D8  6FB1               	movwf	(touchScreenController@valueY+1)& (0+255),b
  4893  0033DA  0E69               	movlw	105
  4894  0033DC  6FB0               	movwf	touchScreenController@valueY& (0+255),b
  4895  0033DE                     l7552:
  4896                           
  4897                           ; BSR set to: 0
  4898                           ;stateMachine/touchScreenSM.c: 110:             valueY=(valueY-105)/2;
  4899  0033DE  0E97               	movlw	151
  4900  0033E0  6FAA               	movwf	??_touchScreenController& (0+255),b
  4901  0033E2  0EFF               	movlw	255
  4902  0033E4  6FAB               	movwf	(??_touchScreenController+1)& (0+255),b
  4903  0033E6  C0B0  F0AC         	movff	touchScreenController@valueY,??_touchScreenController+2
  4904  0033EA  C0B1  F0AD         	movff	touchScreenController@valueY+1,??_touchScreenController+3
  4905  0033EE  51AA               	movf	??_touchScreenController& (0+255),w,b
  4906  0033F0  27AC               	addwf	(??_touchScreenController+2)& (0+255),f,b
  4907  0033F2  51AB               	movf	(??_touchScreenController+1)& (0+255),w,b
  4908  0033F4  23AD               	addwfc	(??_touchScreenController+3)& (0+255),f,b
  4909  0033F6  90D8               	bcf	status,0,c
  4910  0033F8  31AD               	rrcf	(??_touchScreenController+3)& (0+255),w,b
  4911  0033FA  6FAE               	movwf	(??_touchScreenController+4)& (0+255),b
  4912  0033FC  31AC               	rrcf	(??_touchScreenController+2)& (0+255),w,b
  4913  0033FE  6FB0               	movwf	touchScreenController@valueY& (0+255),b
  4914  003400  C0AE  F0B1         	movff	??_touchScreenController+4,touchScreenController@valueY+1
  4915                           
  4916                           ; BSR set to: 0
  4917                           ;stateMachine/touchScreenSM.c: 111:             XF_scheduleTimer(4,evTimerPos,0);
  4918  003404  0E00               	movlw	0
  4919  003406  6E21               	movwf	(XF_scheduleTimer@tm+1)^0,c
  4920  003408  0E04               	movlw	4
  4921  00340A  6E20               	movwf	XF_scheduleTimer@tm^0,c
  4922  00340C  0E04               	movlw	4
  4923  00340E  6E22               	movwf	XF_scheduleTimer@ev^0,c
  4924  003410  0E00               	movlw	0
  4925  003412  6E23               	movwf	XF_scheduleTimer@inISR^0,c
  4926  003414  ECFF  F029         	call	_XF_scheduleTimer	;wreg free
  4927                           
  4928                           ;stateMachine/touchScreenSM.c: 113:             ADCON0=0b00101000;
  4929  003418  0E28               	movlw	40
  4930  00341A  6EC2               	movwf	194,c	;volatile
  4931                           
  4932                           ;stateMachine/touchScreenSM.c: 114:             configTouch();
  4933  00341C  ECB9  F02C         	call	_configTouch	;wreg free
  4934                           
  4935                           ;stateMachine/touchScreenSM.c: 116:             if(PORTBbits.RB1 == 0)
  4936  003420  B281               	btfsc	129,1,c	;volatile
  4937  003422  0012               	return	
  4938                           
  4939                           ;stateMachine/touchScreenSM.c: 117:             {;stateMachine/touchScreenSM.c: 118:    
      +                                       GameParameters_setX(g,valueX);
  4940  003424  C043  F012         	movff	touchScreenController@g,GameParameters_setX@s
  4941  003428  C044  F013         	movff	touchScreenController@g+1,GameParameters_setX@s+1
  4942  00342C  C0B4  F014         	movff	touchScreenController@valueX,GameParameters_setX@value
  4943  003430  C0B5  F015         	movff	touchScreenController@valueX+1,GameParameters_setX@value+1
  4944  003434  EC09  F02D         	call	_GameParameters_setX	;wreg free
  4945                           
  4946                           ;stateMachine/touchScreenSM.c: 119:                 GameParameters_setY(g,valueY);
  4947  003438  C043  F012         	movff	touchScreenController@g,GameParameters_setY@s
  4948  00343C  C044  F013         	movff	touchScreenController@g+1,GameParameters_setY@s+1
  4949  003440  C0B0  F014         	movff	touchScreenController@valueY,GameParameters_setY@value
  4950  003444  C0B1  F015         	movff	touchScreenController@valueY+1,GameParameters_setY@value+1
  4951  003448  ECFE  F02C         	call	_GameParameters_setY	;wreg free
  4952  00344C  0012               	return	
  4953  00344E                     l7566:
  4954  00344E  504D               	movf	_touchScreenState^0,w,c
  4955  003450  0100               	movlb	0	; () banked
  4956  003452  6FAA               	movwf	??_touchScreenController& (0+255),b
  4957  003454  6BAB               	clrf	(??_touchScreenController+1)& (0+255),b
  4958                           
  4959                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4960                           ; Switch size 1, requested type "simple"
  4961                           ; Number of cases is 1, Range of values is 0 to 0
  4962                           ; switch strategies available:
  4963                           ; Name         Instructions Cycles
  4964                           ; simple_byte            4     3 (average)
  4965                           ;	Chosen strategy is simple_byte
  4966  003456  51AB               	movf	(??_touchScreenController+1)& (0+255),w,b
  4967  003458  0A00               	xorlw	0	; case 0
  4968  00345A  A4D8               	btfss	status,2,c
  4969  00345C  0012               	return	
  4970                           
  4971                           ; BSR set to: 0
  4972                           ; Switch size 1, requested type "simple"
  4973                           ; Number of cases is 2, Range of values is 0 to 1
  4974                           ; switch strategies available:
  4975                           ; Name         Instructions Cycles
  4976                           ; simple_byte            7     4 (average)
  4977                           ;	Chosen strategy is simple_byte
  4978  00345E  51AA               	movf	??_touchScreenController& (0+255),w,b
  4979  003460  0A00               	xorlw	0	; case 0
  4980  003462  B4D8               	btfsc	status,2,c
  4981  003464  D71F               	goto	l532
  4982  003466  0A01               	xorlw	1	; case 1
  4983  003468  A4D8               	btfss	status,2,c
  4984  00346A  0012               	return	
  4985  00346C  D729               	goto	l7522
  4986  00346E                     __end_of_touchScreenController:
  4987                           	callstack 0
  4988                           
  4989 ;; *************** function _configMeasure *****************
  4990 ;; Defined at:
  4991 ;;		line 153 in file "stateMachine/touchScreenSM.c"
  4992 ;; Parameters:    Size  Location     Type
  4993 ;;  channel         1    wreg     _Bool 
  4994 ;; Auto vars:     Size  Location     Type
  4995 ;;  channel         1   17[COMRAM] _Bool 
  4996 ;; Return value:  Size  Location     Type
  4997 ;;                  1    wreg      void 
  4998 ;; Registers used:
  4999 ;;		wreg, status,2, status,0
  5000 ;; Tracked objects:
  5001 ;;		On entry : 3F/0
  5002 ;;		On exit  : 0/0
  5003 ;;		Unchanged: 0/0
  5004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5005 ;;      Params:         0       0       0       0       0       0       0
  5006 ;;      Locals:         1       0       0       0       0       0       0
  5007 ;;      Temps:          0       0       0       0       0       0       0
  5008 ;;      Totals:         1       0       0       0       0       0       0
  5009 ;;Total ram usage:        1 bytes
  5010 ;; Hardware stack levels used: 1
  5011 ;; Hardware stack levels required when called: 4
  5012 ;; This function calls:
  5013 ;;		Nothing
  5014 ;; This function is called by:
  5015 ;;		_touchScreenController
  5016 ;; This function uses a non-reentrant model
  5017 ;;
  5018                           
  5019                           	psect	text12
  5020  0056D6                     __ptext12:
  5021                           	callstack 0
  5022  0056D6                     _configMeasure:
  5023                           	callstack 23
  5024                           
  5025                           ;incstack = 0
  5026                           ;configMeasure@channel stored from wreg
  5027  0056D6  6E12               	movwf	configMeasure@channel^0,c
  5028                           
  5029                           ;stateMachine/touchScreenSM.c: 153: void configMeasure(_Bool channel);stateMachine/touch
      +                          ScreenSM.c: 154: {;stateMachine/touchScreenSM.c: 155:     if(channel==0)
  5030  0056D8  5012               	movf	configMeasure@channel^0,w,c
  5031  0056DA  A4D8               	btfss	status,2,c
  5032  0056DC  D00B               	goto	l7146
  5033                           
  5034                           ;stateMachine/touchScreenSM.c: 156:     {;stateMachine/touchScreenSM.c: 157:         ANS
      +                          B1=0;
  5035  0056DE  010F               	movlb	15	; () banked
  5036  0056E0  9339               	bcf	57,1,b	;volatile
  5037                           
  5038                           ;stateMachine/touchScreenSM.c: 158:         TRISB1=0;
  5039  0056E2  9293               	bcf	3987,1,c	;volatile
  5040                           
  5041                           ;stateMachine/touchScreenSM.c: 159:         LATB1=0;
  5042  0056E4  928A               	bcf	3978,1,c	;volatile
  5043                           
  5044                           ;stateMachine/touchScreenSM.c: 160:         TRISB3=0;
  5045  0056E6  9693               	bcf	3987,3,c	;volatile
  5046                           
  5047                           ;stateMachine/touchScreenSM.c: 161:         LATB3=1;
  5048  0056E8  868A               	bsf	3978,3,c	;volatile
  5049                           
  5050                           ;stateMachine/touchScreenSM.c: 162:         TRISB4=1;
  5051  0056EA  8893               	bsf	3987,4,c	;volatile
  5052                           
  5053                           ;stateMachine/touchScreenSM.c: 163:         TRISB2=1;
  5054  0056EC  8493               	bsf	3987,2,c	;volatile
  5055                           
  5056                           ;stateMachine/touchScreenSM.c: 164:         ANSB2=1;
  5057  0056EE  8539               	bsf	57,2,b	;volatile
  5058                           
  5059                           ; BSR set to: 15
  5060                           ;stateMachine/touchScreenSM.c: 165:         ADCON0=0b00100011;
  5061  0056F0  0E23               	movlw	35
  5062  0056F2  6EC2               	movwf	194,c	;volatile
  5063  0056F4                     l7146:
  5064                           
  5065                           ;stateMachine/touchScreenSM.c: 167:     if(channel==1)
  5066  0056F4  0412               	decf	configMeasure@channel^0,w,c
  5067  0056F6  A4D8               	btfss	status,2,c
  5068  0056F8  0012               	return	
  5069                           
  5070                           ;stateMachine/touchScreenSM.c: 168:     {;stateMachine/touchScreenSM.c: 169:         ANS
      +                          B2=0;
  5071  0056FA  010F               	movlb	15	; () banked
  5072  0056FC  9539               	bcf	57,2,b	;volatile
  5073                           
  5074                           ;stateMachine/touchScreenSM.c: 170:         TRISB2=0;
  5075  0056FE  9493               	bcf	3987,2,c	;volatile
  5076                           
  5077                           ;stateMachine/touchScreenSM.c: 171:         LATB2=0;
  5078  005700  948A               	bcf	3978,2,c	;volatile
  5079                           
  5080                           ;stateMachine/touchScreenSM.c: 172:         TRISB4=0;
  5081  005702  9893               	bcf	3987,4,c	;volatile
  5082                           
  5083                           ;stateMachine/touchScreenSM.c: 173:         LATB4=1;
  5084  005704  888A               	bsf	3978,4,c	;volatile
  5085                           
  5086                           ;stateMachine/touchScreenSM.c: 174:         TRISB3=1;
  5087  005706  8693               	bsf	3987,3,c	;volatile
  5088                           
  5089                           ;stateMachine/touchScreenSM.c: 175:         TRISB1=1;
  5090  005708  8293               	bsf	3987,1,c	;volatile
  5091                           
  5092                           ;stateMachine/touchScreenSM.c: 176:         ANSB1=1;
  5093  00570A  8339               	bsf	57,1,b	;volatile
  5094                           
  5095                           ; BSR set to: 15
  5096                           ;stateMachine/touchScreenSM.c: 177:         ADCON0=0b00101011;
  5097  00570C  0E2B               	movlw	43
  5098  00570E  6EC2               	movwf	194,c	;volatile
  5099  005710  0012               	return		;funcret
  5100  005712                     __end_of_configMeasure:
  5101                           	callstack 0
  5102                           
  5103 ;; *************** function ___xxtofl *****************
  5104 ;; Defined at:
  5105 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\xxtofl.c"
  5106 ;; Parameters:    Size  Location     Type
  5107 ;;  sign            1    wreg     unsigned char 
  5108 ;;  val             4   17[COMRAM] long 
  5109 ;; Auto vars:     Size  Location     Type
  5110 ;;  sign            1   25[COMRAM] unsigned char 
  5111 ;;  arg             4   27[COMRAM] unsigned long 
  5112 ;;  exp             1   26[COMRAM] unsigned char 
  5113 ;; Return value:  Size  Location     Type
  5114 ;;                  4   17[COMRAM] unsigned char 
  5115 ;; Registers used:
  5116 ;;		wreg, status,2, status,0
  5117 ;; Tracked objects:
  5118 ;;		On entry : 3F/0
  5119 ;;		On exit  : 0/0
  5120 ;;		Unchanged: 0/0
  5121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5122 ;;      Params:         4       0       0       0       0       0       0
  5123 ;;      Locals:         6       0       0       0       0       0       0
  5124 ;;      Temps:          4       0       0       0       0       0       0
  5125 ;;      Totals:        14       0       0       0       0       0       0
  5126 ;;Total ram usage:       14 bytes
  5127 ;; Hardware stack levels used: 1
  5128 ;; Hardware stack levels required when called: 4
  5129 ;; This function calls:
  5130 ;;		Nothing
  5131 ;; This function is called by:
  5132 ;;		_touchScreenController
  5133 ;; This function uses a non-reentrant model
  5134 ;;
  5135                           
  5136                           	psect	text13
  5137  00385C                     __ptext13:
  5138                           	callstack 0
  5139  00385C                     ___xxtofl:
  5140                           	callstack 23
  5141                           
  5142                           ;incstack = 0
  5143                           ;___xxtofl@sign stored from wreg
  5144  00385C  6E1A               	movwf	___xxtofl@sign^0,c
  5145  00385E  501A               	movf	___xxtofl@sign^0,w,c
  5146  003860  A4D8               	btfss	status,2,c
  5147  003862  AE15               	btfss	(___xxtofl@val+3)^0,7,c
  5148  003864  D01A               	goto	l1541
  5149  003866  C012  F016         	movff	___xxtofl@val,??___xxtofl
  5150  00386A  C013  F017         	movff	___xxtofl@val+1,??___xxtofl+1
  5151  00386E  C014  F018         	movff	___xxtofl@val+2,??___xxtofl+2
  5152  003872  C015  F019         	movff	___xxtofl@val+3,??___xxtofl+3
  5153  003876  1E16               	comf	??___xxtofl^0,f,c
  5154  003878  1E17               	comf	(??___xxtofl+1)^0,f,c
  5155  00387A  1E18               	comf	(??___xxtofl+2)^0,f,c
  5156  00387C  1E19               	comf	(??___xxtofl+3)^0,f,c
  5157  00387E  2A16               	incf	??___xxtofl^0,f,c
  5158  003880  0E00               	movlw	0
  5159  003882  2217               	addwfc	(??___xxtofl+1)^0,f,c
  5160  003884  2218               	addwfc	(??___xxtofl+2)^0,f,c
  5161  003886  2219               	addwfc	(??___xxtofl+3)^0,f,c
  5162  003888  C016  F01C         	movff	??___xxtofl,___xxtofl@arg
  5163  00388C  C017  F01D         	movff	??___xxtofl+1,___xxtofl@arg+1
  5164  003890  C018  F01E         	movff	??___xxtofl+2,___xxtofl@arg+2
  5165  003894  C019  F01F         	movff	??___xxtofl+3,___xxtofl@arg+3
  5166  003898  D008               	goto	l7438
  5167  00389A                     l1541:
  5168  00389A  C012  F01C         	movff	___xxtofl@val,___xxtofl@arg
  5169  00389E  C013  F01D         	movff	___xxtofl@val+1,___xxtofl@arg+1
  5170  0038A2  C014  F01E         	movff	___xxtofl@val+2,___xxtofl@arg+2
  5171  0038A6  C015  F01F         	movff	___xxtofl@val+3,___xxtofl@arg+3
  5172  0038AA                     l7438:
  5173  0038AA  5012               	movf	___xxtofl@val^0,w,c
  5174  0038AC  1013               	iorwf	(___xxtofl@val+1)^0,w,c
  5175  0038AE  1014               	iorwf	(___xxtofl@val+2)^0,w,c
  5176  0038B0  1015               	iorwf	(___xxtofl@val+3)^0,w,c
  5177  0038B2  A4D8               	btfss	status,2,c
  5178  0038B4  D009               	goto	l7444
  5179  0038B6  0E00               	movlw	0
  5180  0038B8  6E12               	movwf	?___xxtofl^0,c
  5181  0038BA  0E00               	movlw	0
  5182  0038BC  6E13               	movwf	(?___xxtofl+1)^0,c
  5183  0038BE  0E00               	movlw	0
  5184  0038C0  6E14               	movwf	(?___xxtofl+2)^0,c
  5185  0038C2  0E00               	movlw	0
  5186  0038C4  6E15               	movwf	(?___xxtofl+3)^0,c
  5187  0038C6  0012               	return	
  5188  0038C8                     l7444:
  5189  0038C8  0E96               	movlw	150
  5190  0038CA  6E1B               	movwf	___xxtofl@exp^0,c
  5191  0038CC  D006               	goto	l7448
  5192  0038CE                     l7446:
  5193  0038CE  2A1B               	incf	___xxtofl@exp^0,f,c
  5194  0038D0  90D8               	bcf	status,0,c
  5195  0038D2  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  5196  0038D4  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  5197  0038D6  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  5198  0038D8  321C               	rrcf	___xxtofl@arg^0,f,c
  5199  0038DA                     l7448:
  5200  0038DA  0E00               	movlw	0
  5201  0038DC  141C               	andwf	___xxtofl@arg^0,w,c
  5202  0038DE  6E16               	movwf	??___xxtofl^0,c
  5203  0038E0  0E00               	movlw	0
  5204  0038E2  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  5205  0038E4  6E17               	movwf	(??___xxtofl+1)^0,c
  5206  0038E6  0E00               	movlw	0
  5207  0038E8  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  5208  0038EA  6E18               	movwf	(??___xxtofl+2)^0,c
  5209  0038EC  0EFE               	movlw	254
  5210  0038EE  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  5211  0038F0  6E19               	movwf	(??___xxtofl+3)^0,c
  5212  0038F2  5016               	movf	??___xxtofl^0,w,c
  5213  0038F4  1017               	iorwf	(??___xxtofl+1)^0,w,c
  5214  0038F6  1018               	iorwf	(??___xxtofl+2)^0,w,c
  5215  0038F8  1019               	iorwf	(??___xxtofl+3)^0,w,c
  5216  0038FA  B4D8               	btfsc	status,2,c
  5217  0038FC  D00D               	goto	l1548
  5218  0038FE  D7E7               	goto	l7446
  5219  003900                     l7450:
  5220  003900  2A1B               	incf	___xxtofl@exp^0,f,c
  5221  003902  0E01               	movlw	1
  5222  003904  261C               	addwf	___xxtofl@arg^0,f,c
  5223  003906  0E00               	movlw	0
  5224  003908  221D               	addwfc	(___xxtofl@arg+1)^0,f,c
  5225  00390A  221E               	addwfc	(___xxtofl@arg+2)^0,f,c
  5226  00390C  221F               	addwfc	(___xxtofl@arg+3)^0,f,c
  5227  00390E  90D8               	bcf	status,0,c
  5228  003910  321F               	rrcf	(___xxtofl@arg+3)^0,f,c
  5229  003912  321E               	rrcf	(___xxtofl@arg+2)^0,f,c
  5230  003914  321D               	rrcf	(___xxtofl@arg+1)^0,f,c
  5231  003916  321C               	rrcf	___xxtofl@arg^0,f,c
  5232  003918                     l1548:
  5233  003918  0E00               	movlw	0
  5234  00391A  141C               	andwf	___xxtofl@arg^0,w,c
  5235  00391C  6E16               	movwf	??___xxtofl^0,c
  5236  00391E  0E00               	movlw	0
  5237  003920  141D               	andwf	(___xxtofl@arg+1)^0,w,c
  5238  003922  6E17               	movwf	(??___xxtofl+1)^0,c
  5239  003924  0E00               	movlw	0
  5240  003926  141E               	andwf	(___xxtofl@arg+2)^0,w,c
  5241  003928  6E18               	movwf	(??___xxtofl+2)^0,c
  5242  00392A  0EFF               	movlw	255
  5243  00392C  141F               	andwf	(___xxtofl@arg+3)^0,w,c
  5244  00392E  6E19               	movwf	(??___xxtofl+3)^0,c
  5245  003930  5016               	movf	??___xxtofl^0,w,c
  5246  003932  1017               	iorwf	(??___xxtofl+1)^0,w,c
  5247  003934  1018               	iorwf	(??___xxtofl+2)^0,w,c
  5248  003936  1019               	iorwf	(??___xxtofl+3)^0,w,c
  5249  003938  B4D8               	btfsc	status,2,c
  5250  00393A  D007               	goto	l7458
  5251  00393C  D7E1               	goto	l7450
  5252  00393E                     l7456:
  5253  00393E  061B               	decf	___xxtofl@exp^0,f,c
  5254  003940  90D8               	bcf	status,0,c
  5255  003942  361C               	rlcf	___xxtofl@arg^0,f,c
  5256  003944  361D               	rlcf	(___xxtofl@arg+1)^0,f,c
  5257  003946  361E               	rlcf	(___xxtofl@arg+2)^0,f,c
  5258  003948  361F               	rlcf	(___xxtofl@arg+3)^0,f,c
  5259  00394A                     l7458:
  5260  00394A  BE1E               	btfsc	(___xxtofl@arg+2)^0,7,c
  5261  00394C  D003               	goto	u5280
  5262  00394E  0E02               	movlw	2
  5263  003950  601B               	cpfslt	___xxtofl@exp^0,c
  5264  003952  D7F5               	goto	l7456
  5265  003954                     u5280:
  5266  003954  A01B               	btfss	___xxtofl@exp^0,0,c
  5267  003956  9E1E               	bcf	(___xxtofl@arg+2)^0,7,c
  5268  003958  90D8               	bcf	status,0,c
  5269  00395A  321B               	rrcf	___xxtofl@exp^0,f,c
  5270  00395C  C01B  F016         	movff	___xxtofl@exp,??___xxtofl
  5271  003960  6A17               	clrf	(??___xxtofl+1)^0,c
  5272  003962  6A18               	clrf	(??___xxtofl+2)^0,c
  5273  003964  6A19               	clrf	(??___xxtofl+3)^0,c
  5274  003966  C016  F019         	movff	??___xxtofl,??___xxtofl+3
  5275  00396A  6A18               	clrf	(??___xxtofl+2)^0,c
  5276  00396C  6A17               	clrf	(??___xxtofl+1)^0,c
  5277  00396E  6A16               	clrf	??___xxtofl^0,c
  5278  003970  5016               	movf	??___xxtofl^0,w,c
  5279  003972  121C               	iorwf	___xxtofl@arg^0,f,c
  5280  003974  5017               	movf	(??___xxtofl+1)^0,w,c
  5281  003976  121D               	iorwf	(___xxtofl@arg+1)^0,f,c
  5282  003978  5018               	movf	(??___xxtofl+2)^0,w,c
  5283  00397A  121E               	iorwf	(___xxtofl@arg+2)^0,f,c
  5284  00397C  5019               	movf	(??___xxtofl+3)^0,w,c
  5285  00397E  121F               	iorwf	(___xxtofl@arg+3)^0,f,c
  5286  003980  501A               	movf	___xxtofl@sign^0,w,c
  5287  003982  A4D8               	btfss	status,2,c
  5288  003984  AE15               	btfss	(___xxtofl@val+3)^0,7,c
  5289  003986  D001               	goto	l7474
  5290  003988  8E1F               	bsf	(___xxtofl@arg+3)^0,7,c
  5291  00398A                     l7474:
  5292  00398A  C01C  F012         	movff	___xxtofl@arg,?___xxtofl
  5293  00398E  C01D  F013         	movff	___xxtofl@arg+1,?___xxtofl+1
  5294  003992  C01E  F014         	movff	___xxtofl@arg+2,?___xxtofl+2
  5295  003996  C01F  F015         	movff	___xxtofl@arg+3,?___xxtofl+3
  5296  00399A  0012               	return		;funcret
  5297  00399C                     __end_of___xxtofl:
  5298                           	callstack 0
  5299                           
  5300 ;; *************** function ___fltol *****************
  5301 ;; Defined at:
  5302 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\fltol.c"
  5303 ;; Parameters:    Size  Location     Type
  5304 ;;  f1              4   56[COMRAM] unsigned char 
  5305 ;; Auto vars:     Size  Location     Type
  5306 ;;  exp1            1   65[COMRAM] unsigned char 
  5307 ;;  sign1           1   64[COMRAM] unsigned char 
  5308 ;; Return value:  Size  Location     Type
  5309 ;;                  4   56[COMRAM] long 
  5310 ;; Registers used:
  5311 ;;		wreg, status,2, status,0
  5312 ;; Tracked objects:
  5313 ;;		On entry : 0/0
  5314 ;;		On exit  : 0/0
  5315 ;;		Unchanged: 0/0
  5316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5317 ;;      Params:         4       0       0       0       0       0       0
  5318 ;;      Locals:         2       0       0       0       0       0       0
  5319 ;;      Temps:          4       0       0       0       0       0       0
  5320 ;;      Totals:        10       0       0       0       0       0       0
  5321 ;;Total ram usage:       10 bytes
  5322 ;; Hardware stack levels used: 1
  5323 ;; Hardware stack levels required when called: 4
  5324 ;; This function calls:
  5325 ;;		Nothing
  5326 ;; This function is called by:
  5327 ;;		_touchScreenController
  5328 ;; This function uses a non-reentrant model
  5329 ;;
  5330                           
  5331                           	psect	text14
  5332  004730                     __ptext14:
  5333                           	callstack 0
  5334  004730                     ___fltol:
  5335                           	callstack 23
  5336                           
  5337                           ;incstack = 0
  5338  004730  343B               	rlcf	(___fltol@f1+2)^0,w,c
  5339  004732  343C               	rlcf	(___fltol@f1+3)^0,w,c
  5340  004734  6E42               	movwf	___fltol@exp1^0,c
  5341  004736  5042               	movf	___fltol@exp1^0,w,c
  5342  004738  A4D8               	btfss	status,2,c
  5343  00473A  D009               	goto	l7394
  5344  00473C                     u5150:
  5345  00473C  0E00               	movlw	0
  5346  00473E  6E39               	movwf	?___fltol^0,c
  5347  004740  0E00               	movlw	0
  5348  004742  6E3A               	movwf	(?___fltol+1)^0,c
  5349  004744  0E00               	movlw	0
  5350  004746  6E3B               	movwf	(?___fltol+2)^0,c
  5351  004748  0E00               	movlw	0
  5352  00474A  6E3C               	movwf	(?___fltol+3)^0,c
  5353  00474C  0012               	return	
  5354  00474E                     l7394:
  5355  00474E  C039  F03D         	movff	___fltol@f1,??___fltol
  5356  004752  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  5357  004756  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  5358  00475A  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  5359  00475E  0E20               	movlw	32
  5360  004760  D005               	goto	u5160
  5361  004762                     u5165:
  5362  004762  90D8               	bcf	status,0,c
  5363  004764  3240               	rrcf	(??___fltol+3)^0,f,c
  5364  004766  323F               	rrcf	(??___fltol+2)^0,f,c
  5365  004768  323E               	rrcf	(??___fltol+1)^0,f,c
  5366  00476A  323D               	rrcf	??___fltol^0,f,c
  5367  00476C                     u5160:
  5368  00476C  2EE8               	decfsz	wreg,f,c
  5369  00476E  D7F9               	goto	u5165
  5370  004770  503D               	movf	??___fltol^0,w,c
  5371  004772  6E41               	movwf	___fltol@sign1^0,c
  5372  004774  8E3B               	bsf	(___fltol@f1+2)^0,7,c
  5373  004776  0EFF               	movlw	255
  5374  004778  1639               	andwf	___fltol@f1^0,f,c
  5375  00477A  0EFF               	movlw	255
  5376  00477C  163A               	andwf	(___fltol@f1+1)^0,f,c
  5377  00477E  0EFF               	movlw	255
  5378  004780  163B               	andwf	(___fltol@f1+2)^0,f,c
  5379  004782  0E00               	movlw	0
  5380  004784  163C               	andwf	(___fltol@f1+3)^0,f,c
  5381  004786  0E96               	movlw	150
  5382  004788  5E42               	subwf	___fltol@exp1^0,f,c
  5383  00478A  AE42               	btfss	___fltol@exp1^0,7,c
  5384  00478C  D00D               	goto	l7414
  5385  00478E  5042               	movf	___fltol@exp1^0,w,c
  5386  004790  0A80               	xorlw	128
  5387  004792  0F97               	addlw	151
  5388  004794  A0D8               	btfss	status,0,c
  5389  004796  D7D2               	goto	u5150
  5390  004798                     l7410:
  5391  004798  90D8               	bcf	status,0,c
  5392  00479A  323C               	rrcf	(___fltol@f1+3)^0,f,c
  5393  00479C  323B               	rrcf	(___fltol@f1+2)^0,f,c
  5394  00479E  323A               	rrcf	(___fltol@f1+1)^0,f,c
  5395  0047A0  3239               	rrcf	___fltol@f1^0,f,c
  5396  0047A2  3E42               	incfsz	___fltol@exp1^0,f,c
  5397  0047A4  D7F9               	goto	l7410
  5398  0047A6  D00D               	goto	u5200
  5399  0047A8                     l7414:
  5400  0047A8  0E1F               	movlw	31
  5401  0047AA  6442               	cpfsgt	___fltol@exp1^0,c
  5402  0047AC  D007               	goto	l7422
  5403  0047AE  D7C6               	goto	u5150
  5404  0047B0                     l7420:
  5405  0047B0  90D8               	bcf	status,0,c
  5406  0047B2  3639               	rlcf	___fltol@f1^0,f,c
  5407  0047B4  363A               	rlcf	(___fltol@f1+1)^0,f,c
  5408  0047B6  363B               	rlcf	(___fltol@f1+2)^0,f,c
  5409  0047B8  363C               	rlcf	(___fltol@f1+3)^0,f,c
  5410  0047BA  0642               	decf	___fltol@exp1^0,f,c
  5411  0047BC                     l7422:
  5412  0047BC  5042               	movf	___fltol@exp1^0,w,c
  5413  0047BE  A4D8               	btfss	status,2,c
  5414  0047C0  D7F7               	goto	l7420
  5415  0047C2                     u5200:
  5416  0047C2  5041               	movf	___fltol@sign1^0,w,c
  5417  0047C4  B4D8               	btfsc	status,2,c
  5418  0047C6  D008               	goto	l7428
  5419  0047C8  1E3C               	comf	(___fltol@f1+3)^0,f,c
  5420  0047CA  1E3B               	comf	(___fltol@f1+2)^0,f,c
  5421  0047CC  1E3A               	comf	(___fltol@f1+1)^0,f,c
  5422  0047CE  6C39               	negf	___fltol@f1^0,c
  5423  0047D0  0E00               	movlw	0
  5424  0047D2  223A               	addwfc	(___fltol@f1+1)^0,f,c
  5425  0047D4  223B               	addwfc	(___fltol@f1+2)^0,f,c
  5426  0047D6  223C               	addwfc	(___fltol@f1+3)^0,f,c
  5427  0047D8                     l7428:
  5428  0047D8  C039  F039         	movff	___fltol@f1,?___fltol
  5429  0047DC  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  5430  0047E0  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  5431  0047E4  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  5432  0047E8  0012               	return		;funcret
  5433  0047EA                     __end_of___fltol:
  5434                           	callstack 0
  5435                           
  5436 ;; *************** function ___fldiv *****************
  5437 ;; Defined at:
  5438 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\sprcdiv.c"
  5439 ;; Parameters:    Size  Location     Type
  5440 ;;  b               4   31[COMRAM] long 
  5441 ;;  a               4   35[COMRAM] long 
  5442 ;; Auto vars:     Size  Location     Type
  5443 ;;  grs             4   50[COMRAM] unsigned long 
  5444 ;;  rem             4   43[COMRAM] unsigned long 
  5445 ;;  new_exp         2   48[COMRAM] short 
  5446 ;;  aexp            1   55[COMRAM] unsigned char 
  5447 ;;  bexp            1   54[COMRAM] unsigned char 
  5448 ;;  sign            1   47[COMRAM] unsigned char 
  5449 ;; Return value:  Size  Location     Type
  5450 ;;                  4   31[COMRAM] unsigned char 
  5451 ;; Registers used:
  5452 ;;		wreg, status,2, status,0
  5453 ;; Tracked objects:
  5454 ;;		On entry : 0/0
  5455 ;;		On exit  : 0/0
  5456 ;;		Unchanged: 0/0
  5457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5458 ;;      Params:         8       0       0       0       0       0       0
  5459 ;;      Locals:        13       0       0       0       0       0       0
  5460 ;;      Temps:          4       0       0       0       0       0       0
  5461 ;;      Totals:        25       0       0       0       0       0       0
  5462 ;;Total ram usage:       25 bytes
  5463 ;; Hardware stack levels used: 1
  5464 ;; Hardware stack levels required when called: 4
  5465 ;; This function calls:
  5466 ;;		Nothing
  5467 ;; This function is called by:
  5468 ;;		_touchScreenController
  5469 ;; This function uses a non-reentrant model
  5470 ;;
  5471                           
  5472                           	psect	text15
  5473  002BDC                     __ptext15:
  5474                           	callstack 0
  5475  002BDC                     ___fldiv:
  5476                           	callstack 23
  5477                           
  5478                           ;incstack = 0
  5479  002BDC  5023               	movf	(___fldiv@b+3)^0,w,c
  5480  002BDE  0B80               	andlw	128
  5481  002BE0  6E30               	movwf	___fldiv@sign^0,c
  5482  002BE2  5023               	movf	(___fldiv@b+3)^0,w,c
  5483  002BE4  2423               	addwf	(___fldiv@b+3)^0,w,c
  5484  002BE6  6E37               	movwf	___fldiv@bexp^0,c
  5485  002BE8  BE22               	btfsc	(___fldiv@b+2)^0,7,c
  5486  002BEA  8037               	bsf	___fldiv@bexp^0,0,c
  5487  002BEC  5037               	movf	___fldiv@bexp^0,w,c
  5488  002BEE  B4D8               	btfsc	status,2,c
  5489  002BF0  D00D               	goto	l7266
  5490  002BF2  2837               	incf	___fldiv@bexp^0,w,c
  5491  002BF4  A4D8               	btfss	status,2,c
  5492  002BF6  D008               	goto	l7262
  5493  002BF8  0E00               	movlw	0
  5494  002BFA  6E20               	movwf	___fldiv@b^0,c
  5495  002BFC  0E00               	movlw	0
  5496  002BFE  6E21               	movwf	(___fldiv@b+1)^0,c
  5497  002C00  0E00               	movlw	0
  5498  002C02  6E22               	movwf	(___fldiv@b+2)^0,c
  5499  002C04  0E00               	movlw	0
  5500  002C06  6E23               	movwf	(___fldiv@b+3)^0,c
  5501  002C08                     l7262:
  5502  002C08  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5503  002C0A  D006               	goto	L1
  5504  002C0C                     l7266:
  5505  002C0C  0E00               	movlw	0
  5506  002C0E  6E20               	movwf	___fldiv@b^0,c
  5507  002C10  0E00               	movlw	0
  5508  002C12  6E21               	movwf	(___fldiv@b+1)^0,c
  5509  002C14  0E00               	movlw	0
  5510  002C16  6E22               	movwf	(___fldiv@b+2)^0,c
  5511  002C18                     L1:
  5512  002C18  0E00               	movlw	0
  5513  002C1A  6E23               	movwf	(___fldiv@b+3)^0,c
  5514  002C1C  5027               	movf	(___fldiv@a+3)^0,w,c
  5515  002C1E  0B80               	andlw	128
  5516  002C20  1A30               	xorwf	___fldiv@sign^0,f,c
  5517  002C22  5027               	movf	(___fldiv@a+3)^0,w,c
  5518  002C24  2427               	addwf	(___fldiv@a+3)^0,w,c
  5519  002C26  6E38               	movwf	___fldiv@aexp^0,c
  5520  002C28  BE26               	btfsc	(___fldiv@a+2)^0,7,c
  5521  002C2A  8038               	bsf	___fldiv@aexp^0,0,c
  5522  002C2C  5038               	movf	___fldiv@aexp^0,w,c
  5523  002C2E  B4D8               	btfsc	status,2,c
  5524  002C30  D00D               	goto	l7286
  5525  002C32  2838               	incf	___fldiv@aexp^0,w,c
  5526  002C34  A4D8               	btfss	status,2,c
  5527  002C36  D008               	goto	l7282
  5528  002C38  0E00               	movlw	0
  5529  002C3A  6E24               	movwf	___fldiv@a^0,c
  5530  002C3C  0E00               	movlw	0
  5531  002C3E  6E25               	movwf	(___fldiv@a+1)^0,c
  5532  002C40  0E00               	movlw	0
  5533  002C42  6E26               	movwf	(___fldiv@a+2)^0,c
  5534  002C44  0E00               	movlw	0
  5535  002C46  6E27               	movwf	(___fldiv@a+3)^0,c
  5536  002C48                     l7282:
  5537  002C48  8E26               	bsf	(___fldiv@a+2)^0,7,c
  5538  002C4A  D006               	goto	L2
  5539  002C4C                     l7286:
  5540  002C4C  0E00               	movlw	0
  5541  002C4E  6E24               	movwf	___fldiv@a^0,c
  5542  002C50  0E00               	movlw	0
  5543  002C52  6E25               	movwf	(___fldiv@a+1)^0,c
  5544  002C54  0E00               	movlw	0
  5545  002C56  6E26               	movwf	(___fldiv@a+2)^0,c
  5546  002C58                     L2:
  5547  002C58  0E00               	movlw	0
  5548  002C5A  6E27               	movwf	(___fldiv@a+3)^0,c
  5549  002C5C  5024               	movf	___fldiv@a^0,w,c
  5550  002C5E  1025               	iorwf	(___fldiv@a+1)^0,w,c
  5551  002C60  1026               	iorwf	(___fldiv@a+2)^0,w,c
  5552  002C62  1027               	iorwf	(___fldiv@a+3)^0,w,c
  5553  002C64  A4D8               	btfss	status,2,c
  5554  002C66  D017               	goto	l7300
  5555  002C68  0E00               	movlw	0
  5556  002C6A  6E20               	movwf	___fldiv@b^0,c
  5557  002C6C  0E00               	movlw	0
  5558  002C6E  6E21               	movwf	(___fldiv@b+1)^0,c
  5559  002C70  0E00               	movlw	0
  5560  002C72  6E22               	movwf	(___fldiv@b+2)^0,c
  5561  002C74  0E00               	movlw	0
  5562  002C76  6E23               	movwf	(___fldiv@b+3)^0,c
  5563  002C78  0E80               	movlw	128
  5564  002C7A  1222               	iorwf	(___fldiv@b+2)^0,f,c
  5565  002C7C  0E7F               	movlw	127
  5566  002C7E  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5567  002C80                     l7294:
  5568  002C80  5030               	movf	___fldiv@sign^0,w,c
  5569  002C82  1223               	iorwf	(___fldiv@b+3)^0,f,c
  5570  002C84  C020  F020         	movff	___fldiv@b,?___fldiv
  5571  002C88  C021  F021         	movff	___fldiv@b+1,?___fldiv+1
  5572  002C8C  C022  F022         	movff	___fldiv@b+2,?___fldiv+2
  5573  002C90  C023  F023         	movff	___fldiv@b+3,?___fldiv+3
  5574  002C94  0012               	return	
  5575  002C96                     l7300:
  5576  002C96  5037               	movf	___fldiv@bexp^0,w,c
  5577  002C98  A4D8               	btfss	status,2,c
  5578  002C9A  D009               	goto	l7308
  5579  002C9C  0E00               	movlw	0
  5580  002C9E  6E20               	movwf	?___fldiv^0,c
  5581  002CA0  0E00               	movlw	0
  5582  002CA2  6E21               	movwf	(?___fldiv+1)^0,c
  5583  002CA4  0E00               	movlw	0
  5584  002CA6  6E22               	movwf	(?___fldiv+2)^0,c
  5585  002CA8  0E00               	movlw	0
  5586  002CAA  6E23               	movwf	(?___fldiv+3)^0,c
  5587  002CAC  0012               	return	
  5588  002CAE                     l7308:
  5589  002CAE  5038               	movf	___fldiv@aexp^0,w,c
  5590  002CB0  C037  F028         	movff	___fldiv@bexp,??___fldiv
  5591  002CB4  6A29               	clrf	(??___fldiv+1)^0,c
  5592  002CB6  5E28               	subwf	??___fldiv^0,f,c
  5593  002CB8  0E00               	movlw	0
  5594  002CBA  5A29               	subwfb	(??___fldiv+1)^0,f,c
  5595  002CBC  0E7F               	movlw	127
  5596  002CBE  2428               	addwf	??___fldiv^0,w,c
  5597  002CC0  6E31               	movwf	___fldiv@new_exp^0,c
  5598  002CC2  0E00               	movlw	0
  5599  002CC4  2029               	addwfc	(??___fldiv+1)^0,w,c
  5600  002CC6  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5601  002CC8  C020  F02C         	movff	___fldiv@b,___fldiv@rem
  5602  002CCC  C021  F02D         	movff	___fldiv@b+1,___fldiv@rem+1
  5603  002CD0  C022  F02E         	movff	___fldiv@b+2,___fldiv@rem+2
  5604  002CD4  C023  F02F         	movff	___fldiv@b+3,___fldiv@rem+3
  5605  002CD8  0E00               	movlw	0
  5606  002CDA  6E20               	movwf	___fldiv@b^0,c
  5607  002CDC  0E00               	movlw	0
  5608  002CDE  6E21               	movwf	(___fldiv@b+1)^0,c
  5609  002CE0  0E00               	movlw	0
  5610  002CE2  6E22               	movwf	(___fldiv@b+2)^0,c
  5611  002CE4  0E00               	movlw	0
  5612  002CE6  6E23               	movwf	(___fldiv@b+3)^0,c
  5613  002CE8  0E00               	movlw	0
  5614  002CEA  6E33               	movwf	___fldiv@grs^0,c
  5615  002CEC  0E00               	movlw	0
  5616  002CEE  6E34               	movwf	(___fldiv@grs+1)^0,c
  5617  002CF0  0E00               	movlw	0
  5618  002CF2  6E35               	movwf	(___fldiv@grs+2)^0,c
  5619  002CF4  0E00               	movlw	0
  5620  002CF6  6E36               	movwf	(___fldiv@grs+3)^0,c
  5621  002CF8  0E00               	movlw	0
  5622  002CFA  6E38               	movwf	___fldiv@aexp^0,c
  5623  002CFC  D028               	goto	l1470
  5624  002CFE                     l7318:
  5625  002CFE  5038               	movf	___fldiv@aexp^0,w,c
  5626  002D00  B4D8               	btfsc	status,2,c
  5627  002D02  D011               	goto	l7326
  5628  002D04  90D8               	bcf	status,0,c
  5629  002D06  362C               	rlcf	___fldiv@rem^0,f,c
  5630  002D08  362D               	rlcf	(___fldiv@rem+1)^0,f,c
  5631  002D0A  362E               	rlcf	(___fldiv@rem+2)^0,f,c
  5632  002D0C  362F               	rlcf	(___fldiv@rem+3)^0,f,c
  5633  002D0E  90D8               	bcf	status,0,c
  5634  002D10  3620               	rlcf	___fldiv@b^0,f,c
  5635  002D12  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5636  002D14  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5637  002D16  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5638  002D18  BE36               	btfsc	(___fldiv@grs+3)^0,7,c
  5639  002D1A  8020               	bsf	___fldiv@b^0,0,c
  5640  002D1C  90D8               	bcf	status,0,c
  5641  002D1E  3633               	rlcf	___fldiv@grs^0,f,c
  5642  002D20  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5643  002D22  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5644  002D24  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5645  002D26                     l7326:
  5646  002D26  5024               	movf	___fldiv@a^0,w,c
  5647  002D28  5C2C               	subwf	___fldiv@rem^0,w,c
  5648  002D2A  5025               	movf	(___fldiv@a+1)^0,w,c
  5649  002D2C  582D               	subwfb	(___fldiv@rem+1)^0,w,c
  5650  002D2E  5026               	movf	(___fldiv@a+2)^0,w,c
  5651  002D30  582E               	subwfb	(___fldiv@rem+2)^0,w,c
  5652  002D32  5027               	movf	(___fldiv@a+3)^0,w,c
  5653  002D34  582F               	subwfb	(___fldiv@rem+3)^0,w,c
  5654  002D36  A0D8               	btfss	status,0,c
  5655  002D38  D009               	goto	l7332
  5656  002D3A  8C36               	bsf	(___fldiv@grs+3)^0,6,c
  5657  002D3C  5024               	movf	___fldiv@a^0,w,c
  5658  002D3E  5E2C               	subwf	___fldiv@rem^0,f,c
  5659  002D40  5025               	movf	(___fldiv@a+1)^0,w,c
  5660  002D42  5A2D               	subwfb	(___fldiv@rem+1)^0,f,c
  5661  002D44  5026               	movf	(___fldiv@a+2)^0,w,c
  5662  002D46  5A2E               	subwfb	(___fldiv@rem+2)^0,f,c
  5663  002D48  5027               	movf	(___fldiv@a+3)^0,w,c
  5664  002D4A  5A2F               	subwfb	(___fldiv@rem+3)^0,f,c
  5665  002D4C                     l7332:
  5666  002D4C  2A38               	incf	___fldiv@aexp^0,f,c
  5667  002D4E                     l1470:
  5668  002D4E  0E19               	movlw	25
  5669  002D50  6438               	cpfsgt	___fldiv@aexp^0,c
  5670  002D52  D7D5               	goto	l7318
  5671  002D54  502C               	movf	___fldiv@rem^0,w,c
  5672  002D56  102D               	iorwf	(___fldiv@rem+1)^0,w,c
  5673  002D58  102E               	iorwf	(___fldiv@rem+2)^0,w,c
  5674  002D5A  102F               	iorwf	(___fldiv@rem+3)^0,w,c
  5675  002D5C  B4D8               	btfsc	status,2,c
  5676  002D5E  D011               	goto	l7344
  5677  002D60  8033               	bsf	___fldiv@grs^0,0,c
  5678  002D62  D00F               	goto	l7344
  5679  002D64                     l7338:
  5680  002D64  90D8               	bcf	status,0,c
  5681  002D66  3620               	rlcf	___fldiv@b^0,f,c
  5682  002D68  3621               	rlcf	(___fldiv@b+1)^0,f,c
  5683  002D6A  3622               	rlcf	(___fldiv@b+2)^0,f,c
  5684  002D6C  3623               	rlcf	(___fldiv@b+3)^0,f,c
  5685  002D6E  BE36               	btfsc	(___fldiv@grs+3)^0,7,c
  5686  002D70  8020               	bsf	___fldiv@b^0,0,c
  5687  002D72  90D8               	bcf	status,0,c
  5688  002D74  3633               	rlcf	___fldiv@grs^0,f,c
  5689  002D76  3634               	rlcf	(___fldiv@grs+1)^0,f,c
  5690  002D78  3635               	rlcf	(___fldiv@grs+2)^0,f,c
  5691  002D7A  3636               	rlcf	(___fldiv@grs+3)^0,f,c
  5692  002D7C  0631               	decf	___fldiv@new_exp^0,f,c
  5693  002D7E  A0D8               	btfss	status,0,c
  5694  002D80  0632               	decf	(___fldiv@new_exp+1)^0,f,c
  5695  002D82                     l7344:
  5696  002D82  AE22               	btfss	(___fldiv@b+2)^0,7,c
  5697  002D84  D7EF               	goto	l7338
  5698  002D86  0E00               	movlw	0
  5699  002D88  6E38               	movwf	___fldiv@aexp^0,c
  5700  002D8A  AE36               	btfss	(___fldiv@grs+3)^0,7,c
  5701  002D8C  D017               	goto	l1481
  5702  002D8E  0EFF               	movlw	255
  5703  002D90  1433               	andwf	___fldiv@grs^0,w,c
  5704  002D92  6E28               	movwf	??___fldiv^0,c
  5705  002D94  0EFF               	movlw	255
  5706  002D96  1434               	andwf	(___fldiv@grs+1)^0,w,c
  5707  002D98  6E29               	movwf	(??___fldiv+1)^0,c
  5708  002D9A  0EFF               	movlw	255
  5709  002D9C  1435               	andwf	(___fldiv@grs+2)^0,w,c
  5710  002D9E  6E2A               	movwf	(??___fldiv+2)^0,c
  5711  002DA0  0E7F               	movlw	127
  5712  002DA2  1436               	andwf	(___fldiv@grs+3)^0,w,c
  5713  002DA4  6E2B               	movwf	(??___fldiv+3)^0,c
  5714  002DA6  5028               	movf	??___fldiv^0,w,c
  5715  002DA8  1029               	iorwf	(??___fldiv+1)^0,w,c
  5716  002DAA  102A               	iorwf	(??___fldiv+2)^0,w,c
  5717  002DAC  102B               	iorwf	(??___fldiv+3)^0,w,c
  5718  002DAE  B4D8               	btfsc	status,2,c
  5719  002DB0  D003               	goto	l1482
  5720  002DB2                     u5080:
  5721  002DB2  0E01               	movlw	1
  5722  002DB4  6E38               	movwf	___fldiv@aexp^0,c
  5723  002DB6  D002               	goto	l1481
  5724  002DB8                     l1482:
  5725  002DB8  B020               	btfsc	___fldiv@b^0,0,c
  5726  002DBA  D7FB               	goto	u5080
  5727  002DBC                     l1481:
  5728  002DBC  5038               	movf	___fldiv@aexp^0,w,c
  5729  002DBE  B4D8               	btfsc	status,2,c
  5730  002DC0  D01F               	goto	l7364
  5731  002DC2  0E01               	movlw	1
  5732  002DC4  2620               	addwf	___fldiv@b^0,f,c
  5733  002DC6  0E00               	movlw	0
  5734  002DC8  2221               	addwfc	(___fldiv@b+1)^0,f,c
  5735  002DCA  2222               	addwfc	(___fldiv@b+2)^0,f,c
  5736  002DCC  2223               	addwfc	(___fldiv@b+3)^0,f,c
  5737  002DCE  A023               	btfss	(___fldiv@b+3)^0,0,c
  5738  002DD0  D017               	goto	l7364
  5739  002DD2  C020  F028         	movff	___fldiv@b,??___fldiv
  5740  002DD6  C021  F029         	movff	___fldiv@b+1,??___fldiv+1
  5741  002DDA  C022  F02A         	movff	___fldiv@b+2,??___fldiv+2
  5742  002DDE  C023  F02B         	movff	___fldiv@b+3,??___fldiv+3
  5743  002DE2  342B               	rlcf	(??___fldiv+3)^0,w,c
  5744  002DE4  322B               	rrcf	(??___fldiv+3)^0,f,c
  5745  002DE6  322A               	rrcf	(??___fldiv+2)^0,f,c
  5746  002DE8  3229               	rrcf	(??___fldiv+1)^0,f,c
  5747  002DEA  3228               	rrcf	??___fldiv^0,f,c
  5748  002DEC  C028  F020         	movff	??___fldiv,___fldiv@b
  5749  002DF0  C029  F021         	movff	??___fldiv+1,___fldiv@b+1
  5750  002DF4  C02A  F022         	movff	??___fldiv+2,___fldiv@b+2
  5751  002DF8  C02B  F023         	movff	??___fldiv+3,___fldiv@b+3
  5752  002DFC  4A31               	infsnz	___fldiv@new_exp^0,f,c
  5753  002DFE  2A32               	incf	(___fldiv@new_exp+1)^0,f,c
  5754  002E00                     l7364:
  5755  002E00  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5756  002E02  D010               	goto	l7368
  5757  002E04  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5758  002E06  E103               	bnz	u5120
  5759  002E08  2831               	incf	___fldiv@new_exp^0,w,c
  5760  002E0A  A0D8               	btfss	status,0,c
  5761  002E0C  D00B               	goto	l7368
  5762  002E0E                     u5120:
  5763  002E0E  0E00               	movlw	0
  5764  002E10  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5765  002E12  6831               	setf	___fldiv@new_exp^0,c
  5766  002E14  0E00               	movlw	0
  5767  002E16  6E20               	movwf	___fldiv@b^0,c
  5768  002E18  0E00               	movlw	0
  5769  002E1A  6E21               	movwf	(___fldiv@b+1)^0,c
  5770  002E1C  0E00               	movlw	0
  5771  002E1E  6E22               	movwf	(___fldiv@b+2)^0,c
  5772  002E20  0E00               	movlw	0
  5773  002E22  6E23               	movwf	(___fldiv@b+3)^0,c
  5774  002E24                     l7368:
  5775  002E24  BE32               	btfsc	(___fldiv@new_exp+1)^0,7,c
  5776  002E26  D005               	goto	u5130
  5777  002E28  5032               	movf	(___fldiv@new_exp+1)^0,w,c
  5778  002E2A  E111               	bnz	l7372
  5779  002E2C  0431               	decf	___fldiv@new_exp^0,w,c
  5780  002E2E  B0D8               	btfsc	status,0,c
  5781  002E30  D00E               	goto	l7372
  5782  002E32                     u5130:
  5783  002E32  0E00               	movlw	0
  5784  002E34  6E32               	movwf	(___fldiv@new_exp+1)^0,c
  5785  002E36  0E00               	movlw	0
  5786  002E38  6E31               	movwf	___fldiv@new_exp^0,c
  5787  002E3A  0E00               	movlw	0
  5788  002E3C  6E20               	movwf	___fldiv@b^0,c
  5789  002E3E  0E00               	movlw	0
  5790  002E40  6E21               	movwf	(___fldiv@b+1)^0,c
  5791  002E42  0E00               	movlw	0
  5792  002E44  6E22               	movwf	(___fldiv@b+2)^0,c
  5793  002E46  0E00               	movlw	0
  5794  002E48  6E23               	movwf	(___fldiv@b+3)^0,c
  5795  002E4A  0E00               	movlw	0
  5796  002E4C  6E30               	movwf	___fldiv@sign^0,c
  5797  002E4E                     l7372:
  5798  002E4E  C031  F037         	movff	___fldiv@new_exp,___fldiv@bexp
  5799  002E52  A037               	btfss	___fldiv@bexp^0,0,c
  5800  002E54  D002               	goto	l7378
  5801  002E56  8E22               	bsf	(___fldiv@b+2)^0,7,c
  5802  002E58  D001               	goto	l7380
  5803  002E5A                     l7378:
  5804  002E5A  9E22               	bcf	(___fldiv@b+2)^0,7,c
  5805  002E5C                     l7380:
  5806  002E5C  90D8               	bcf	status,0,c
  5807  002E5E  3037               	rrcf	___fldiv@bexp^0,w,c
  5808  002E60  6E23               	movwf	(___fldiv@b+3)^0,c
  5809  002E62  D70E               	goto	l7294
  5810  002E64                     __end_of___fldiv:
  5811                           	callstack 0
  5812                           
  5813 ;; *************** function _GameParameters_setY *****************
  5814 ;; Defined at:
  5815 ;;		line 79 in file "class/gameParameters.c"
  5816 ;; Parameters:    Size  Location     Type
  5817 ;;  s               2   17[COMRAM] PTR struct GameParameter
  5818 ;;		 -> g1(240), 
  5819 ;;  value           2   19[COMRAM] unsigned short 
  5820 ;; Auto vars:     Size  Location     Type
  5821 ;;		None
  5822 ;; Return value:  Size  Location     Type
  5823 ;;                  1    wreg      void 
  5824 ;; Registers used:
  5825 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5826 ;; Tracked objects:
  5827 ;;		On entry : 0/0
  5828 ;;		On exit  : 0/0
  5829 ;;		Unchanged: 0/0
  5830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5831 ;;      Params:         4       0       0       0       0       0       0
  5832 ;;      Locals:         0       0       0       0       0       0       0
  5833 ;;      Temps:          0       0       0       0       0       0       0
  5834 ;;      Totals:         4       0       0       0       0       0       0
  5835 ;;Total ram usage:        4 bytes
  5836 ;; Hardware stack levels used: 1
  5837 ;; Hardware stack levels required when called: 4
  5838 ;; This function calls:
  5839 ;;		Nothing
  5840 ;; This function is called by:
  5841 ;;		_touchScreenController
  5842 ;; This function uses a non-reentrant model
  5843 ;;
  5844                           
  5845                           	psect	text16
  5846  0059FC                     __ptext16:
  5847                           	callstack 0
  5848  0059FC                     _GameParameters_setY:
  5849                           	callstack 23
  5850                           
  5851                           ;class/gameParameters.c: 79: void GameParameters_setY(struct GameParameters* s, uint16_t
      +                           value);class/gameParameters.c: 80: {;class/gameParameters.c: 81:     s->y=value;
  5852                           
  5853                           ;incstack = 0
  5854  0059FC  EE20 F004          	lfsr	2,4
  5855  005A00  5012               	movf	GameParameters_setY@s^0,w,c
  5856  005A02  26D9               	addwf	fsr2l,f,c
  5857  005A04  5013               	movf	(GameParameters_setY@s+1)^0,w,c
  5858  005A06  22DA               	addwfc	fsr2h,f,c
  5859  005A08  C014  FFDE         	movff	GameParameters_setY@value,postinc2
  5860  005A0C  C015  FFDD         	movff	GameParameters_setY@value+1,postdec2
  5861  005A10  0012               	return		;funcret
  5862  005A12                     __end_of_GameParameters_setY:
  5863                           	callstack 0
  5864                           
  5865 ;; *************** function _GameParameters_setX *****************
  5866 ;; Defined at:
  5867 ;;		line 71 in file "class/gameParameters.c"
  5868 ;; Parameters:    Size  Location     Type
  5869 ;;  s               2   17[COMRAM] PTR struct GameParameter
  5870 ;;		 -> g1(240), 
  5871 ;;  value           2   19[COMRAM] unsigned short 
  5872 ;; Auto vars:     Size  Location     Type
  5873 ;;		None
  5874 ;; Return value:  Size  Location     Type
  5875 ;;                  1    wreg      void 
  5876 ;; Registers used:
  5877 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5878 ;; Tracked objects:
  5879 ;;		On entry : 0/0
  5880 ;;		On exit  : 0/0
  5881 ;;		Unchanged: 0/0
  5882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5883 ;;      Params:         4       0       0       0       0       0       0
  5884 ;;      Locals:         0       0       0       0       0       0       0
  5885 ;;      Temps:          0       0       0       0       0       0       0
  5886 ;;      Totals:         4       0       0       0       0       0       0
  5887 ;;Total ram usage:        4 bytes
  5888 ;; Hardware stack levels used: 1
  5889 ;; Hardware stack levels required when called: 4
  5890 ;; This function calls:
  5891 ;;		Nothing
  5892 ;; This function is called by:
  5893 ;;		_touchScreenController
  5894 ;; This function uses a non-reentrant model
  5895 ;;
  5896                           
  5897                           	psect	text17
  5898  005A12                     __ptext17:
  5899                           	callstack 0
  5900  005A12                     _GameParameters_setX:
  5901                           	callstack 23
  5902                           
  5903                           ;class/gameParameters.c: 71: void GameParameters_setX(struct GameParameters* s, uint16_t
      +                           value);class/gameParameters.c: 72: {;class/gameParameters.c: 73:     s->x=value;
  5904                           
  5905                           ;incstack = 0
  5906  005A12  EE20 F002          	lfsr	2,2
  5907  005A16  5012               	movf	GameParameters_setX@s^0,w,c
  5908  005A18  26D9               	addwf	fsr2l,f,c
  5909  005A1A  5013               	movf	(GameParameters_setX@s+1)^0,w,c
  5910  005A1C  22DA               	addwfc	fsr2h,f,c
  5911  005A1E  C014  FFDE         	movff	GameParameters_setX@value,postinc2
  5912  005A22  C015  FFDD         	movff	GameParameters_setX@value+1,postdec2
  5913  005A26  0012               	return		;funcret
  5914  005A28                     __end_of_GameParameters_setX:
  5915                           	callstack 0
  5916                           
  5917 ;; *************** function _sleepSM *****************
  5918 ;; Defined at:
  5919 ;;		line 27 in file "stateMachine/sleepSM.c"
  5920 ;; Parameters:    Size  Location     Type
  5921 ;;  ev              1    wreg     unsigned char 
  5922 ;; Auto vars:     Size  Location     Type
  5923 ;;  ev              1   21[COMRAM] unsigned char 
  5924 ;; Return value:  Size  Location     Type
  5925 ;;                  1    wreg      void 
  5926 ;; Registers used:
  5927 ;;		wreg, status,2, status,0, cstack
  5928 ;; Tracked objects:
  5929 ;;		On entry : 3F/0
  5930 ;;		On exit  : 0/0
  5931 ;;		Unchanged: 0/0
  5932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5933 ;;      Params:         0       0       0       0       0       0       0
  5934 ;;      Locals:         1       0       0       0       0       0       0
  5935 ;;      Temps:          2       0       0       0       0       0       0
  5936 ;;      Totals:         3       0       0       0       0       0       0
  5937 ;;Total ram usage:        3 bytes
  5938 ;; Hardware stack levels used: 1
  5939 ;; Hardware stack levels required when called: 7
  5940 ;; This function calls:
  5941 ;;		_sleepController
  5942 ;; This function is called by:
  5943 ;;		_Factory_exec
  5944 ;; This function uses a non-reentrant model
  5945 ;;
  5946                           
  5947                           	psect	text18
  5948  0057E4                     __ptext18:
  5949                           	callstack 0
  5950  0057E4                     _sleepSM:
  5951                           	callstack 22
  5952                           
  5953                           ;incstack = 0
  5954                           ;sleepSM@ev stored from wreg
  5955  0057E4  6E16               	movwf	sleepSM@ev^0,c
  5956                           
  5957                           ;stateMachine/sleepSM.c: 27: void sleepSM(Event ev);stateMachine/sleepSM.c: 28: {;stateM
      +                          achine/sleepSM.c: 29:     switch(sleepState)
  5958  0057E6  D009               	goto	l7686
  5959  0057E8                     l7678:
  5960                           
  5961                           ; BSR set to: 0
  5962                           ;stateMachine/sleepSM.c: 32:             if(ev==evSleep)
  5963  0057E8  0E03               	movlw	3
  5964  0057EA  1816               	xorwf	sleepSM@ev^0,w,c
  5965  0057EC  A4D8               	btfss	status,2,c
  5966  0057EE  0012               	return	
  5967                           
  5968                           ; BSR set to: 0
  5969                           ;stateMachine/sleepSM.c: 33:             {;stateMachine/sleepSM.c: 34:                sl
      +                          eepState=SLEEP;
  5970  0057F0  0E01               	movlw	1
  5971  0057F2  6F89               	movwf	_sleepState& (0+255),b
  5972                           
  5973                           ; BSR set to: 0
  5974                           ;stateMachine/sleepSM.c: 35:                sleepController();
  5975  0057F4  EC55  F02C         	call	_sleepController	;wreg free
  5976  0057F8  0012               	return	
  5977  0057FA                     l7686:
  5978  0057FA  0100               	movlb	0	; () banked
  5979  0057FC  5189               	movf	_sleepState& (0+255),w,b
  5980  0057FE  6E14               	movwf	??_sleepSM^0,c
  5981  005800  6A15               	clrf	(??_sleepSM+1)^0,c
  5982                           
  5983                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5984                           ; Switch size 1, requested type "simple"
  5985                           ; Number of cases is 1, Range of values is 0 to 0
  5986                           ; switch strategies available:
  5987                           ; Name         Instructions Cycles
  5988                           ; simple_byte            4     3 (average)
  5989                           ;	Chosen strategy is simple_byte
  5990  005802  5015               	movf	(??_sleepSM+1)^0,w,c
  5991  005804  0A00               	xorlw	0	; case 0
  5992  005806  A4D8               	btfss	status,2,c
  5993  005808  0012               	return	
  5994                           
  5995                           ; BSR set to: 0
  5996                           ; Switch size 1, requested type "simple"
  5997                           ; Number of cases is 2, Range of values is 0 to 1
  5998                           ; switch strategies available:
  5999                           ; Name         Instructions Cycles
  6000                           ; simple_byte            7     4 (average)
  6001                           ;	Chosen strategy is simple_byte
  6002  00580A  5014               	movf	??_sleepSM^0,w,c
  6003  00580C  0A00               	xorlw	0	; case 0
  6004  00580E  B4D8               	btfsc	status,2,c
  6005  005810  D7EB               	goto	l7678
  6006  005812  0A01               	xorlw	1	; case 1
  6007  005814  0012               	return	
  6008  005816                     __end_of_sleepSM:
  6009                           	callstack 0
  6010                           
  6011 ;; *************** function _sleepController *****************
  6012 ;; Defined at:
  6013 ;;		line 54 in file "stateMachine/sleepSM.c"
  6014 ;; Parameters:    Size  Location     Type
  6015 ;;		None
  6016 ;; Auto vars:     Size  Location     Type
  6017 ;;		None
  6018 ;; Return value:  Size  Location     Type
  6019 ;;                  1    wreg      void 
  6020 ;; Registers used:
  6021 ;;		wreg, status,2, status,0, cstack
  6022 ;; Tracked objects:
  6023 ;;		On entry : 0/0
  6024 ;;		On exit  : 0/0
  6025 ;;		Unchanged: 0/0
  6026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6027 ;;      Params:         0       0       0       0       0       0       0
  6028 ;;      Locals:         0       0       0       0       0       0       0
  6029 ;;      Temps:          2       0       0       0       0       0       0
  6030 ;;      Totals:         2       0       0       0       0       0       0
  6031 ;;Total ram usage:        2 bytes
  6032 ;; Hardware stack levels used: 1
  6033 ;; Hardware stack levels required when called: 6
  6034 ;; This function calls:
  6035 ;;		_configPinSleep
  6036 ;; This function is called by:
  6037 ;;		_sleepInit
  6038 ;;		_sleepSM
  6039 ;; This function uses a non-reentrant model
  6040 ;;
  6041                           
  6042                           	psect	text19
  6043  0058AA                     __ptext19:
  6044                           	callstack 0
  6045  0058AA                     _sleepController:
  6046                           	callstack 22
  6047                           
  6048                           ;stateMachine/sleepSM.c: 56:     switch(sleepState)
  6049                           
  6050                           ;incstack = 0
  6051  0058AA  D005               	goto	l7510
  6052  0058AC                     l7506:
  6053                           
  6054                           ; BSR set to: 0
  6055                           ;stateMachine/sleepSM.c: 62:             configPinSleep();
  6056  0058AC  ECD9  F02C         	call	_configPinSleep	;wreg free
  6057  0058B0  0003               	sleep		;# 
  6058  0058B2  00FF               	reset		;# 
  6059                           
  6060                           ;stateMachine/sleepSM.c: 65:             break;
  6061  0058B4  0012               	return	
  6062  0058B6                     l7510:
  6063  0058B6  0100               	movlb	0	; () banked
  6064  0058B8  5189               	movf	_sleepState& (0+255),w,b
  6065  0058BA  6E12               	movwf	??_sleepController^0,c
  6066  0058BC  6A13               	clrf	(??_sleepController+1)^0,c
  6067                           
  6068                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6069                           ; Switch size 1, requested type "simple"
  6070                           ; Number of cases is 1, Range of values is 0 to 0
  6071                           ; switch strategies available:
  6072                           ; Name         Instructions Cycles
  6073                           ; simple_byte            4     3 (average)
  6074                           ;	Chosen strategy is simple_byte
  6075  0058BE  5013               	movf	(??_sleepController+1)^0,w,c
  6076  0058C0  0A00               	xorlw	0	; case 0
  6077  0058C2  A4D8               	btfss	status,2,c
  6078  0058C4  0012               	return	
  6079                           
  6080                           ; BSR set to: 0
  6081                           ; Switch size 1, requested type "simple"
  6082                           ; Number of cases is 2, Range of values is 0 to 1
  6083                           ; switch strategies available:
  6084                           ; Name         Instructions Cycles
  6085                           ; simple_byte            7     4 (average)
  6086                           ;	Chosen strategy is simple_byte
  6087  0058C6  5012               	movf	??_sleepController^0,w,c
  6088  0058C8  0A00               	xorlw	0	; case 0
  6089  0058CA  B4D8               	btfsc	status,2,c
  6090  0058CC  0012               	return	
  6091  0058CE  0A01               	xorlw	1	; case 1
  6092  0058D0  A4D8               	btfss	status,2,c
  6093  0058D2  0012               	return	
  6094  0058D4  D7EB               	goto	l7506
  6095  0058D6                     __end_of_sleepController:
  6096                           	callstack 0
  6097                           
  6098 ;; *************** function _configPinSleep *****************
  6099 ;; Defined at:
  6100 ;;		line 75 in file "stateMachine/sleepSM.c"
  6101 ;; Parameters:    Size  Location     Type
  6102 ;;		None
  6103 ;; Auto vars:     Size  Location     Type
  6104 ;;		None
  6105 ;; Return value:  Size  Location     Type
  6106 ;;                  1    wreg      void 
  6107 ;; Registers used:
  6108 ;;		wreg, status,2, cstack
  6109 ;; Tracked objects:
  6110 ;;		On entry : 0/0
  6111 ;;		On exit  : 0/0
  6112 ;;		Unchanged: 0/0
  6113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6114 ;;      Params:         0       0       0       0       0       0       0
  6115 ;;      Locals:         0       0       0       0       0       0       0
  6116 ;;      Temps:          0       0       0       0       0       0       0
  6117 ;;      Totals:         0       0       0       0       0       0       0
  6118 ;;Total ram usage:        0 bytes
  6119 ;; Hardware stack levels used: 1
  6120 ;; Hardware stack levels required when called: 5
  6121 ;; This function calls:
  6122 ;;		_configTouch
  6123 ;; This function is called by:
  6124 ;;		_sleepController
  6125 ;; This function uses a non-reentrant model
  6126 ;;
  6127                           
  6128                           	psect	text20
  6129  0059B2                     __ptext20:
  6130                           	callstack 0
  6131  0059B2                     _configPinSleep:
  6132                           	callstack 22
  6133                           
  6134                           ;stateMachine/sleepSM.c: 77:     TRISC=0b10000010;
  6135                           
  6136                           ;incstack = 0
  6137  0059B2  0E82               	movlw	130
  6138  0059B4  6E94               	movwf	148,c	;volatile
  6139                           
  6140                           ;stateMachine/sleepSM.c: 78:     TRISA=0;
  6141  0059B6  0E00               	movlw	0
  6142  0059B8  6E92               	movwf	146,c	;volatile
  6143                           
  6144                           ;stateMachine/sleepSM.c: 79:     LATA=0xFF;
  6145  0059BA  6889               	setf	137,c	;volatile
  6146                           
  6147                           ;stateMachine/sleepSM.c: 80:     LATC0=0;
  6148  0059BC  908B               	bcf	3979,0,c	;volatile
  6149                           
  6150                           ;stateMachine/sleepSM.c: 81:     CCPR2L=0;
  6151  0059BE  0E00               	movlw	0
  6152  0059C0  6E67               	movwf	103,c	;volatile
  6153                           
  6154                           ;stateMachine/sleepSM.c: 82:     LATC2=1;
  6155  0059C2  848B               	bsf	3979,2,c	;volatile
  6156                           
  6157                           ;stateMachine/sleepSM.c: 83:     LATC3=1;
  6158  0059C4  868B               	bsf	3979,3,c	;volatile
  6159                           
  6160                           ;stateMachine/sleepSM.c: 84:     LATC4=1;
  6161  0059C6  888B               	bsf	3979,4,c	;volatile
  6162                           
  6163                           ;stateMachine/sleepSM.c: 85:     LATC5=1;
  6164  0059C8  8A8B               	bsf	3979,5,c	;volatile
  6165                           
  6166                           ;stateMachine/sleepSM.c: 86:     configTouch();
  6167  0059CA  ECB9  F02C         	call	_configTouch	;wreg free
  6168  0059CE  0012               	return		;funcret
  6169  0059D0                     __end_of_configPinSleep:
  6170                           	callstack 0
  6171                           
  6172 ;; *************** function _configTouch *****************
  6173 ;; Defined at:
  6174 ;;		line 132 in file "stateMachine/touchScreenSM.c"
  6175 ;; Parameters:    Size  Location     Type
  6176 ;;		None
  6177 ;; Auto vars:     Size  Location     Type
  6178 ;;		None
  6179 ;; Return value:  Size  Location     Type
  6180 ;;                  1    wreg      void 
  6181 ;; Registers used:
  6182 ;;		wreg, status,2
  6183 ;; Tracked objects:
  6184 ;;		On entry : 0/0
  6185 ;;		On exit  : 0/0
  6186 ;;		Unchanged: 0/0
  6187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6188 ;;      Params:         0       0       0       0       0       0       0
  6189 ;;      Locals:         0       0       0       0       0       0       0
  6190 ;;      Temps:          0       0       0       0       0       0       0
  6191 ;;      Totals:         0       0       0       0       0       0       0
  6192 ;;Total ram usage:        0 bytes
  6193 ;; Hardware stack levels used: 1
  6194 ;; Hardware stack levels required when called: 4
  6195 ;; This function calls:
  6196 ;;		Nothing
  6197 ;; This function is called by:
  6198 ;;		_configPinSleep
  6199 ;;		_touchScreenInit
  6200 ;;		_touchScreenController
  6201 ;; This function uses a non-reentrant model
  6202 ;;
  6203                           
  6204                           	psect	text21
  6205  005972                     __ptext21:
  6206                           	callstack 0
  6207  005972                     _configTouch:
  6208                           	callstack 23
  6209                           
  6210                           ;stateMachine/touchScreenSM.c: 134:     ANSB1=0;
  6211                           
  6212                           ;incstack = 0
  6213  005972  010F               	movlb	15	; () banked
  6214  005974  9339               	bcf	57,1,b	;volatile
  6215                           
  6216                           ;stateMachine/touchScreenSM.c: 135:     ANSB2=0;
  6217  005976  9539               	bcf	57,2,b	;volatile
  6218                           
  6219                           ;stateMachine/touchScreenSM.c: 136:     TRISB2=0;
  6220  005978  9493               	bcf	3987,2,c	;volatile
  6221                           
  6222                           ;stateMachine/touchScreenSM.c: 137:     LATB2=0;
  6223  00597A  948A               	bcf	3978,2,c	;volatile
  6224                           
  6225                           ;stateMachine/touchScreenSM.c: 138:     TRISB1=1;
  6226  00597C  8293               	bsf	3987,1,c	;volatile
  6227                           
  6228                           ;stateMachine/touchScreenSM.c: 139:     RBPU=0;
  6229  00597E  9EF1               	bcf	4081,7,c	;volatile
  6230                           
  6231                           ; BSR set to: 15
  6232                           ;stateMachine/touchScreenSM.c: 140:     WPUB=0b00000010;
  6233  005980  0E02               	movlw	2
  6234  005982  6E61               	movwf	97,c	;volatile
  6235                           
  6236                           ; BSR set to: 15
  6237                           ;stateMachine/touchScreenSM.c: 141:     TRISB3=0;
  6238  005984  9693               	bcf	3987,3,c	;volatile
  6239                           
  6240                           ; BSR set to: 15
  6241                           ;stateMachine/touchScreenSM.c: 142:     LATB3=1;
  6242  005986  868A               	bsf	3978,3,c	;volatile
  6243                           
  6244                           ; BSR set to: 15
  6245                           ;stateMachine/touchScreenSM.c: 143:     __nop();
  6246  005988  F000               	nop	
  6247                           
  6248                           ;stateMachine/touchScreenSM.c: 144:     TRISB3=1;
  6249  00598A  8693               	bsf	3987,3,c	;volatile
  6250                           
  6251                           ;stateMachine/touchScreenSM.c: 145:     TRISB4=1;
  6252  00598C  8893               	bsf	3987,4,c	;volatile
  6253                           
  6254                           ;stateMachine/touchScreenSM.c: 146:     INT1IF=0;
  6255  00598E  90F0               	bcf	4080,0,c	;volatile
  6256                           
  6257                           ;stateMachine/touchScreenSM.c: 147:     INT1IE=1;
  6258  005990  86F0               	bsf	4080,3,c	;volatile
  6259  005992  0012               	return		;funcret
  6260  005994                     __end_of_configTouch:
  6261                           	callstack 0
  6262                           
  6263 ;; *************** function _gameControllerSM *****************
  6264 ;; Defined at:
  6265 ;;		line 26 in file "stateMachine/gameController.c"
  6266 ;; Parameters:    Size  Location     Type
  6267 ;;  ev              1    wreg     unsigned char 
  6268 ;;  g               2   59[COMRAM] PTR struct GameParameter
  6269 ;;		 -> g1(240), 
  6270 ;; Auto vars:     Size  Location     Type
  6271 ;;  ev              1   63[COMRAM] unsigned char 
  6272 ;; Return value:  Size  Location     Type
  6273 ;;                  1    wreg      void 
  6274 ;; Registers used:
  6275 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6276 ;; Tracked objects:
  6277 ;;		On entry : 3F/0
  6278 ;;		On exit  : 0/0
  6279 ;;		Unchanged: 0/0
  6280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6281 ;;      Params:         2       0       0       0       0       0       0
  6282 ;;      Locals:         1       0       0       0       0       0       0
  6283 ;;      Temps:          2       0       0       0       0       0       0
  6284 ;;      Totals:         5       0       0       0       0       0       0
  6285 ;;Total ram usage:        5 bytes
  6286 ;; Hardware stack levels used: 1
  6287 ;; Hardware stack levels required when called: 9
  6288 ;; This function calls:
  6289 ;;		_XF_scheduleTimer
  6290 ;;		___wmul
  6291 ;;		_gameControllerController
  6292 ;; This function is called by:
  6293 ;;		_Factory_exec
  6294 ;; This function uses a non-reentrant model
  6295 ;;
  6296                           
  6297                           	psect	text22
  6298  003F60                     __ptext22:
  6299                           	callstack 0
  6300  003F60                     _gameControllerSM:
  6301                           	callstack 20
  6302                           
  6303                           ;incstack = 0
  6304                           ;gameControllerSM@ev stored from wreg
  6305  003F60  6E40               	movwf	gameControllerSM@ev^0,c
  6306                           
  6307                           ;stateMachine/gameController.c: 26: void gameControllerSM(Event ev,GameParameters* g);st
      +                          ateMachine/gameController.c: 27: {;stateMachine/gameController.c: 28:    switch(gameStat
      +                          eMachine)
  6308  003F62  D066               	goto	l7820
  6309  003F64                     l7780:
  6310                           
  6311                           ;stateMachine/gameController.c: 31:             gameControllerController(g,NULLEVENT);
  6312  003F64  C03C  F037         	movff	gameControllerSM@g,gameControllerController@g
  6313  003F68  C03D  F038         	movff	gameControllerSM@g+1,gameControllerController@g+1
  6314  003F6C  0E00               	movlw	0
  6315  003F6E  6E39               	movwf	gameControllerController@ev^0,c
  6316  003F70  EC81  F009         	call	_gameControllerController	;wreg free
  6317                           
  6318                           ;stateMachine/gameController.c: 32:             if(ev==evParameters)
  6319  003F74  0E07               	movlw	7
  6320  003F76  1840               	xorwf	gameControllerSM@ev^0,w,c
  6321  003F78  A4D8               	btfss	status,2,c
  6322  003F7A  D002               	goto	l7786
  6323                           
  6324                           ;stateMachine/gameController.c: 33:             {;stateMachine/gameController.c: 34:    
      +                                       gameStateMachine=PARAMETERS;
  6325  003F7C  0E01               	movlw	1
  6326  003F7E  6E4C               	movwf	_gameStateMachine^0,c
  6327  003F80                     l7786:
  6328                           
  6329                           ;stateMachine/gameController.c: 36:             if(ev==evOnePlayer)
  6330  003F80  0E05               	movlw	5
  6331  003F82  1840               	xorwf	gameControllerSM@ev^0,w,c
  6332  003F84  A4D8               	btfss	status,2,c
  6333  003F86  0012               	return	
  6334                           
  6335                           ;stateMachine/gameController.c: 37:             {;stateMachine/gameController.c: 38:    
      +                                       gameStateMachine=LOCAL;
  6336  003F88  0E02               	movlw	2
  6337  003F8A  6E4C               	movwf	_gameStateMachine^0,c
  6338                           
  6339                           ;stateMachine/gameController.c: 39:                 XF_scheduleTimer(40-(g->level*10),ev
      +                          GameUpdate,0);
  6340  003F8C  EE20 F006          	lfsr	2,6
  6341  003F90  503C               	movf	gameControllerSM@g^0,w,c
  6342  003F92  26D9               	addwf	fsr2l,f,c
  6343  003F94  503D               	movf	(gameControllerSM@g+1)^0,w,c
  6344  003F96  22DA               	addwfc	fsr2h,f,c
  6345  003F98  CFDE F01A          	movff	postinc2,___wmul@multiplier
  6346  003F9C  CFDD F01B          	movff	postdec2,___wmul@multiplier+1
  6347  003FA0  0EFF               	movlw	255
  6348  003FA2  6E1D               	movwf	(___wmul@multiplicand+1)^0,c
  6349  003FA4  0EF6               	movlw	246
  6350  003FA6  6E1C               	movwf	___wmul@multiplicand^0,c
  6351  003FA8  ECA6  F02C         	call	___wmul	;wreg free
  6352  003FAC  0E28               	movlw	40
  6353  003FAE  241A               	addwf	?___wmul^0,w,c
  6354  003FB0  6E20               	movwf	XF_scheduleTimer@tm^0,c
  6355  003FB2  0E00               	movlw	0
  6356  003FB4  201B               	addwfc	(?___wmul+1)^0,w,c
  6357  003FB6  6E21               	movwf	(XF_scheduleTimer@tm+1)^0,c
  6358  003FB8  0E0A               	movlw	10
  6359  003FBA  6E22               	movwf	XF_scheduleTimer@ev^0,c
  6360  003FBC  0E00               	movlw	0
  6361  003FBE  6E23               	movwf	XF_scheduleTimer@inISR^0,c
  6362  003FC0  ECFF  F029         	call	_XF_scheduleTimer	;wreg free
  6363  003FC4  0012               	return	
  6364  003FC6                     l7798:
  6365                           
  6366                           ;stateMachine/gameController.c: 49:             gameControllerController(g,NULLEVENT);
  6367  003FC6  C03C  F037         	movff	gameControllerSM@g,gameControllerController@g
  6368  003FCA  C03D  F038         	movff	gameControllerSM@g+1,gameControllerController@g+1
  6369  003FCE  0E00               	movlw	0
  6370  003FD0  6E39               	movwf	gameControllerController@ev^0,c
  6371  003FD2  EC81  F009         	call	_gameControllerController	;wreg free
  6372                           
  6373                           ;stateMachine/gameController.c: 50:             if(ev==evLeave)
  6374  003FD6  0E08               	movlw	8
  6375  003FD8  1840               	xorwf	gameControllerSM@ev^0,w,c
  6376  003FDA  A4D8               	btfss	status,2,c
  6377  003FDC  0012               	return	
  6378  003FDE                     u5630:
  6379                           
  6380                           ;stateMachine/gameController.c: 51:             {;stateMachine/gameController.c: 52:    
      +                                       gameStateMachine=NOGAME;
  6381  003FDE  0E00               	movlw	0
  6382  003FE0  6E4C               	movwf	_gameStateMachine^0,c
  6383  003FE2  0012               	return	
  6384  003FE4                     l7804:
  6385                           
  6386                           ;stateMachine/gameController.c: 57:             gameControllerController(g,ev);
  6387  003FE4  C03C  F037         	movff	gameControllerSM@g,gameControllerController@g
  6388  003FE8  C03D  F038         	movff	gameControllerSM@g+1,gameControllerController@g+1
  6389  003FEC  C040  F039         	movff	gameControllerSM@ev,gameControllerController@ev
  6390  003FF0  EC81  F009         	call	_gameControllerController	;wreg free
  6391                           
  6392                           ;stateMachine/gameController.c: 58:             if(ev==evLeave)
  6393  003FF4  0E08               	movlw	8
  6394  003FF6  1840               	xorwf	gameControllerSM@ev^0,w,c
  6395  003FF8  B4D8               	btfsc	status,2,c
  6396  003FFA  D7F1               	goto	u5630
  6397  003FFC  0E09               	movlw	9
  6398  003FFE  1840               	xorwf	gameControllerSM@ev^0,w,c
  6399  004000  A4D8               	btfss	status,2,c
  6400  004002  0012               	return	
  6401                           
  6402                           ;stateMachine/gameController.c: 63:             {;stateMachine/gameController.c: 64:    
      +                                       gameStateMachine=ENDGAME;
  6403  004004  0E04               	movlw	4
  6404  004006  6E4C               	movwf	_gameStateMachine^0,c
  6405                           
  6406                           ;stateMachine/gameController.c: 65:                 XF_scheduleTimer(30000,evSleep,0);
  6407  004008  0E75               	movlw	117
  6408  00400A  6E21               	movwf	(XF_scheduleTimer@tm+1)^0,c
  6409  00400C  0E30               	movlw	48
  6410  00400E  6E20               	movwf	XF_scheduleTimer@tm^0,c
  6411  004010  0E03               	movlw	3
  6412  004012  6E22               	movwf	XF_scheduleTimer@ev^0,c
  6413  004014  0E00               	movlw	0
  6414  004016  6E23               	movwf	XF_scheduleTimer@inISR^0,c
  6415  004018  ECFF  F029         	call	_XF_scheduleTimer	;wreg free
  6416  00401C  0012               	return	
  6417  00401E                     l7816:
  6418                           
  6419                           ;stateMachine/gameController.c: 74:            gameControllerController(g,ev);
  6420  00401E  C03C  F037         	movff	gameControllerSM@g,gameControllerController@g
  6421  004022  C03D  F038         	movff	gameControllerSM@g+1,gameControllerController@g+1
  6422  004026  C040  F039         	movff	gameControllerSM@ev,gameControllerController@ev
  6423  00402A  EC81  F009         	call	_gameControllerController	;wreg free
  6424                           
  6425                           ;stateMachine/gameController.c: 75:            break;
  6426  00402E  0012               	return	
  6427  004030                     l7820:
  6428  004030  504C               	movf	_gameStateMachine^0,w,c
  6429  004032  6E3E               	movwf	??_gameControllerSM^0,c
  6430  004034  6A3F               	clrf	(??_gameControllerSM+1)^0,c
  6431                           
  6432                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6433                           ; Switch size 1, requested type "simple"
  6434                           ; Number of cases is 1, Range of values is 0 to 0
  6435                           ; switch strategies available:
  6436                           ; Name         Instructions Cycles
  6437                           ; simple_byte            4     3 (average)
  6438                           ;	Chosen strategy is simple_byte
  6439  004036  503F               	movf	(??_gameControllerSM+1)^0,w,c
  6440  004038  0A00               	xorlw	0	; case 0
  6441  00403A  A4D8               	btfss	status,2,c
  6442  00403C  0012               	return	
  6443                           
  6444                           ; Switch size 1, requested type "simple"
  6445                           ; Number of cases is 5, Range of values is 0 to 4
  6446                           ; switch strategies available:
  6447                           ; Name         Instructions Cycles
  6448                           ; simple_byte           16     9 (average)
  6449                           ;	Chosen strategy is simple_byte
  6450  00403E  503E               	movf	??_gameControllerSM^0,w,c
  6451  004040  0A00               	xorlw	0	; case 0
  6452  004042  B4D8               	btfsc	status,2,c
  6453  004044  D78F               	goto	l7780
  6454  004046  0A01               	xorlw	1	; case 1
  6455  004048  B4D8               	btfsc	status,2,c
  6456  00404A  D7BD               	goto	l7798
  6457  00404C  0A03               	xorlw	3	; case 2
  6458  00404E  B4D8               	btfsc	status,2,c
  6459  004050  D7C9               	goto	l7804
  6460  004052  0A01               	xorlw	1	; case 3
  6461  004054  B4D8               	btfsc	status,2,c
  6462  004056  0012               	return	
  6463  004058  0A07               	xorlw	7	; case 4
  6464  00405A  A4D8               	btfss	status,2,c
  6465  00405C  0012               	return	
  6466  00405E  D7DF               	goto	l7816
  6467  004060                     __end_of_gameControllerSM:
  6468                           	callstack 0
  6469                           
  6470 ;; *************** function _gameControllerController *****************
  6471 ;; Defined at:
  6472 ;;		line 90 in file "stateMachine/gameController.c"
  6473 ;; Parameters:    Size  Location     Type
  6474 ;;  g               2   54[COMRAM] PTR struct GameParameter
  6475 ;;		 -> g1(240), 
  6476 ;;  ev              1   56[COMRAM] unsigned char 
  6477 ;; Auto vars:     Size  Location     Type
  6478 ;;		None
  6479 ;; Return value:  Size  Location     Type
  6480 ;;                  1    wreg      void 
  6481 ;; Registers used:
  6482 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6483 ;; Tracked objects:
  6484 ;;		On entry : 0/0
  6485 ;;		On exit  : 0/0
  6486 ;;		Unchanged: 0/0
  6487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6488 ;;      Params:         3       0       0       0       0       0       0
  6489 ;;      Locals:         0       0       0       0       0       0       0
  6490 ;;      Temps:          2       0       0       0       0       0       0
  6491 ;;      Totals:         5       0       0       0       0       0       0
  6492 ;;Total ram usage:        5 bytes
  6493 ;; Hardware stack levels used: 1
  6494 ;; Hardware stack levels required when called: 8
  6495 ;; This function calls:
  6496 ;;		_GameParameters_init
  6497 ;;		_GameParameters_resetPos
  6498 ;;		_LCD_InButton
  6499 ;;		_LCD_InSlider
  6500 ;;		_LCD_SliderUpdate
  6501 ;;		_XF_pushEvent
  6502 ;;		_XF_scheduleTimer
  6503 ;;		___wmul
  6504 ;;		_backlightController
  6505 ;;		_desactivateTimerSleep
  6506 ;;		_levelController
  6507 ;;		_mooveBall
  6508 ;;		_moovePaddle1
  6509 ;;		_moovePaddle2
  6510 ;; This function is called by:
  6511 ;;		_gameControllerInit
  6512 ;;		_gameControllerSM
  6513 ;; This function uses a non-reentrant model
  6514 ;;
  6515                           
  6516                           	psect	text23
  6517  001302                     __ptext23:
  6518                           	callstack 0
  6519  001302                     _gameControllerController:
  6520                           	callstack 19
  6521                           
  6522                           ;stateMachine/gameController.c: 90: void gameControllerController(GameParameters* g,Even
      +                          t ev);stateMachine/gameController.c: 91: {;stateMachine/gameController.c: 92:     switch
      +                          (gameStateMachine)
  6523                           
  6524                           ;incstack = 0
  6525  001302  D1F5               	goto	l7244
  6526  001304                     l7188:
  6527                           
  6528                           ;stateMachine/gameController.c: 96:             if(LCD_InButton(&(g->btnParam),g->x,g->y
      +                          ))
  6529  001304  0E08               	movlw	8
  6530  001306  2437               	addwf	gameControllerController@g^0,w,c
  6531  001308  6E12               	movwf	LCD_InButton@button^0,c
  6532  00130A  0E00               	movlw	0
  6533  00130C  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6534  00130E  6E13               	movwf	(LCD_InButton@button+1)^0,c
  6535  001310  EE20 F002          	lfsr	2,2
  6536  001314  5037               	movf	gameControllerController@g^0,w,c
  6537  001316  26D9               	addwf	fsr2l,f,c
  6538  001318  5038               	movf	(gameControllerController@g+1)^0,w,c
  6539  00131A  22DA               	addwfc	fsr2h,f,c
  6540  00131C  CFDE F014          	movff	postinc2,LCD_InButton@posX
  6541  001320  CFDD F015          	movff	postdec2,LCD_InButton@posX+1
  6542  001324  EE20 F004          	lfsr	2,4
  6543  001328  5037               	movf	gameControllerController@g^0,w,c
  6544  00132A  26D9               	addwf	fsr2l,f,c
  6545  00132C  5038               	movf	(gameControllerController@g+1)^0,w,c
  6546  00132E  22DA               	addwfc	fsr2h,f,c
  6547  001330  CFDE F016          	movff	postinc2,LCD_InButton@posY
  6548  001334  CFDD F017          	movff	postdec2,LCD_InButton@posY+1
  6549  001338  ECAB  F025         	call	_LCD_InButton	;wreg free
  6550  00133C  0900               	iorlw	0
  6551  00133E  B4D8               	btfsc	status,2,c
  6552  001340  D00B               	goto	l669
  6553                           
  6554                           ;stateMachine/gameController.c: 97:             {;stateMachine/gameController.c: 98:    
      +                                       XF_pushEvent(evParameters,0);
  6555  001342  0E00               	movlw	0
  6556  001344  6E18               	movwf	XF_pushEvent@inISR^0,c
  6557  001346  0E07               	movlw	7
  6558  001348  ECD6  F029         	call	_XF_pushEvent
  6559                           
  6560                           ;stateMachine/gameController.c: 99:                 GameParameters_resetPos(g);
  6561  00134C  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  6562  001350  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  6563  001354  EC6B  F02C         	call	_GameParameters_resetPos	;wreg free
  6564  001358                     l669:
  6565                           
  6566                           ;stateMachine/gameController.c: 101:             if(LCD_InButton(&(g->btnOnePlayer),g->x
      +                          ,g->y))
  6567  001358  0E20               	movlw	32
  6568  00135A  2437               	addwf	gameControllerController@g^0,w,c
  6569  00135C  6E12               	movwf	LCD_InButton@button^0,c
  6570  00135E  0E00               	movlw	0
  6571  001360  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6572  001362  6E13               	movwf	(LCD_InButton@button+1)^0,c
  6573  001364  EE20 F002          	lfsr	2,2
  6574  001368  5037               	movf	gameControllerController@g^0,w,c
  6575  00136A  26D9               	addwf	fsr2l,f,c
  6576  00136C  5038               	movf	(gameControllerController@g+1)^0,w,c
  6577  00136E  22DA               	addwfc	fsr2h,f,c
  6578  001370  CFDE F014          	movff	postinc2,LCD_InButton@posX
  6579  001374  CFDD F015          	movff	postdec2,LCD_InButton@posX+1
  6580  001378  EE20 F004          	lfsr	2,4
  6581  00137C  5037               	movf	gameControllerController@g^0,w,c
  6582  00137E  26D9               	addwf	fsr2l,f,c
  6583  001380  5038               	movf	(gameControllerController@g+1)^0,w,c
  6584  001382  22DA               	addwfc	fsr2h,f,c
  6585  001384  CFDE F016          	movff	postinc2,LCD_InButton@posY
  6586  001388  CFDD F017          	movff	postdec2,LCD_InButton@posY+1
  6587  00138C  ECAB  F025         	call	_LCD_InButton	;wreg free
  6588  001390  0900               	iorlw	0
  6589  001392  B4D8               	btfsc	status,2,c
  6590  001394  D00B               	goto	l670
  6591                           
  6592                           ;stateMachine/gameController.c: 102:             {;stateMachine/gameController.c: 103:  
      +                                         XF_pushEvent(evOnePlayer,0);
  6593  001396  0E00               	movlw	0
  6594  001398  6E18               	movwf	XF_pushEvent@inISR^0,c
  6595  00139A  0E05               	movlw	5
  6596  00139C  ECD6  F029         	call	_XF_pushEvent
  6597                           
  6598                           ;stateMachine/gameController.c: 104:                 GameParameters_resetPos(g);
  6599  0013A0  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  6600  0013A4  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  6601  0013A8  EC6B  F02C         	call	_GameParameters_resetPos	;wreg free
  6602  0013AC                     l670:
  6603                           
  6604                           ;stateMachine/gameController.c: 106:             if(LCD_InButton(&(g->btnTwoPlayer),g->x
      +                          ,g->y))
  6605  0013AC  0E38               	movlw	56
  6606  0013AE  2437               	addwf	gameControllerController@g^0,w,c
  6607  0013B0  6E12               	movwf	LCD_InButton@button^0,c
  6608  0013B2  0E00               	movlw	0
  6609  0013B4  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6610  0013B6  6E13               	movwf	(LCD_InButton@button+1)^0,c
  6611  0013B8  EE20 F002          	lfsr	2,2
  6612  0013BC  5037               	movf	gameControllerController@g^0,w,c
  6613  0013BE  26D9               	addwf	fsr2l,f,c
  6614  0013C0  5038               	movf	(gameControllerController@g+1)^0,w,c
  6615  0013C2  22DA               	addwfc	fsr2h,f,c
  6616  0013C4  CFDE F014          	movff	postinc2,LCD_InButton@posX
  6617  0013C8  CFDD F015          	movff	postdec2,LCD_InButton@posX+1
  6618  0013CC  EE20 F004          	lfsr	2,4
  6619  0013D0  5037               	movf	gameControllerController@g^0,w,c
  6620  0013D2  26D9               	addwf	fsr2l,f,c
  6621  0013D4  5038               	movf	(gameControllerController@g+1)^0,w,c
  6622  0013D6  22DA               	addwfc	fsr2h,f,c
  6623  0013D8  CFDE F016          	movff	postinc2,LCD_InButton@posY
  6624  0013DC  CFDD F017          	movff	postdec2,LCD_InButton@posY+1
  6625  0013E0  ECAB  F025         	call	_LCD_InButton	;wreg free
  6626  0013E4  0900               	iorlw	0
  6627  0013E6  B4D8               	btfsc	status,2,c
  6628  0013E8  D00B               	goto	l671
  6629                           
  6630                           ;stateMachine/gameController.c: 107:             {;stateMachine/gameController.c: 108:  
      +                                         XF_pushEvent(evTwoPlayer,0);
  6631  0013EA  0E00               	movlw	0
  6632  0013EC  6E18               	movwf	XF_pushEvent@inISR^0,c
  6633  0013EE  0E06               	movlw	6
  6634  0013F0  ECD6  F029         	call	_XF_pushEvent
  6635                           
  6636                           ;stateMachine/gameController.c: 109:                 GameParameters_resetPos(g);
  6637  0013F4  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  6638  0013F8  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  6639  0013FC  EC6B  F02C         	call	_GameParameters_resetPos	;wreg free
  6640  001400                     l671:
  6641                           
  6642                           ;stateMachine/gameController.c: 111:             if(LCD_InButton(&(g->btnTurnOff),g->x,g
      +                          ->y))
  6643  001400  0E80               	movlw	128
  6644  001402  2437               	addwf	gameControllerController@g^0,w,c
  6645  001404  6E12               	movwf	LCD_InButton@button^0,c
  6646  001406  0E00               	movlw	0
  6647  001408  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6648  00140A  6E13               	movwf	(LCD_InButton@button+1)^0,c
  6649  00140C  EE20 F002          	lfsr	2,2
  6650  001410  5037               	movf	gameControllerController@g^0,w,c
  6651  001412  26D9               	addwf	fsr2l,f,c
  6652  001414  5038               	movf	(gameControllerController@g+1)^0,w,c
  6653  001416  22DA               	addwfc	fsr2h,f,c
  6654  001418  CFDE F014          	movff	postinc2,LCD_InButton@posX
  6655  00141C  CFDD F015          	movff	postdec2,LCD_InButton@posX+1
  6656  001420  EE20 F004          	lfsr	2,4
  6657  001424  5037               	movf	gameControllerController@g^0,w,c
  6658  001426  26D9               	addwf	fsr2l,f,c
  6659  001428  5038               	movf	(gameControllerController@g+1)^0,w,c
  6660  00142A  22DA               	addwfc	fsr2h,f,c
  6661  00142C  CFDE F016          	movff	postinc2,LCD_InButton@posY
  6662  001430  CFDD F017          	movff	postdec2,LCD_InButton@posY+1
  6663  001434  ECAB  F025         	call	_LCD_InButton	;wreg free
  6664  001438  0900               	iorlw	0
  6665  00143A  B4D8               	btfsc	status,2,c
  6666  00143C  0012               	return	
  6667                           
  6668                           ;stateMachine/gameController.c: 112:             {;stateMachine/gameController.c: 113:  
      +                                         XF_pushEvent(evSleep,0);
  6669  00143E  0E00               	movlw	0
  6670  001440  6E18               	movwf	XF_pushEvent@inISR^0,c
  6671  001442  0E03               	movlw	3
  6672  001444  ECD6  F029         	call	_XF_pushEvent
  6673                           
  6674                           ;stateMachine/gameController.c: 114:                 GameParameters_resetPos(g);
  6675  001448  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  6676  00144C  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  6677  001450  EC6B  F02C         	call	_GameParameters_resetPos	;wreg free
  6678  001454  0012               	return	
  6679  001456                     l7198:
  6680                           
  6681                           ;stateMachine/gameController.c: 121:             if(LCD_InSlider(&(g->sldBackLight),g->x
      +                          ,g->y))
  6682  001456  0E98               	movlw	152
  6683  001458  2437               	addwf	gameControllerController@g^0,w,c
  6684  00145A  6E12               	movwf	LCD_InSlider@slider^0,c
  6685  00145C  0E00               	movlw	0
  6686  00145E  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6687  001460  6E13               	movwf	(LCD_InSlider@slider+1)^0,c
  6688  001462  EE20 F002          	lfsr	2,2
  6689  001466  5037               	movf	gameControllerController@g^0,w,c
  6690  001468  26D9               	addwf	fsr2l,f,c
  6691  00146A  5038               	movf	(gameControllerController@g+1)^0,w,c
  6692  00146C  22DA               	addwfc	fsr2h,f,c
  6693  00146E  CFDE F014          	movff	postinc2,LCD_InSlider@posX
  6694  001472  CFDD F015          	movff	postdec2,LCD_InSlider@posX+1
  6695  001476  EE20 F004          	lfsr	2,4
  6696  00147A  5037               	movf	gameControllerController@g^0,w,c
  6697  00147C  26D9               	addwf	fsr2l,f,c
  6698  00147E  5038               	movf	(gameControllerController@g+1)^0,w,c
  6699  001480  22DA               	addwfc	fsr2h,f,c
  6700  001482  CFDE F016          	movff	postinc2,LCD_InSlider@posY
  6701  001486  CFDD F017          	movff	postdec2,LCD_InSlider@posY+1
  6702  00148A  EC57  F025         	call	_LCD_InSlider	;wreg free
  6703  00148E  0900               	iorlw	0
  6704  001490  B4D8               	btfsc	status,2,c
  6705  001492  D014               	goto	l7204
  6706                           
  6707                           ;stateMachine/gameController.c: 122:             {;stateMachine/gameController.c: 123:  
      +                                         backlightController(g);
  6708  001494  C037  F018         	movff	gameControllerController@g,backlightController@g
  6709  001498  C038  F019         	movff	gameControllerController@g+1,backlightController@g+1
  6710  00149C  EC6C  F011         	call	_backlightController	;wreg free
  6711                           
  6712                           ;stateMachine/gameController.c: 124:                 LCD_SliderUpdate(&(g->sldBackLight)
      +                          );
  6713  0014A0  0E98               	movlw	152
  6714  0014A2  2437               	addwf	gameControllerController@g^0,w,c
  6715  0014A4  6E27               	movwf	LCD_SliderUpdate@slider^0,c
  6716  0014A6  0E00               	movlw	0
  6717  0014A8  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6718  0014AA  6E28               	movwf	(LCD_SliderUpdate@slider+1)^0,c
  6719  0014AC  EC8F  F00B         	call	_LCD_SliderUpdate	;wreg free
  6720                           
  6721                           ;stateMachine/gameController.c: 125:                 GameParameters_resetPos(g);
  6722  0014B0  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  6723  0014B4  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  6724  0014B8  EC6B  F02C         	call	_GameParameters_resetPos	;wreg free
  6725  0014BC                     l7204:
  6726                           
  6727                           ;stateMachine/gameController.c: 127:             if(LCD_InSlider(&(g->sldLevel),g->x,g->
      +                          y))
  6728  0014BC  0EB1               	movlw	177
  6729  0014BE  2437               	addwf	gameControllerController@g^0,w,c
  6730  0014C0  6E12               	movwf	LCD_InSlider@slider^0,c
  6731  0014C2  0E00               	movlw	0
  6732  0014C4  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6733  0014C6  6E13               	movwf	(LCD_InSlider@slider+1)^0,c
  6734  0014C8  EE20 F002          	lfsr	2,2
  6735  0014CC  5037               	movf	gameControllerController@g^0,w,c
  6736  0014CE  26D9               	addwf	fsr2l,f,c
  6737  0014D0  5038               	movf	(gameControllerController@g+1)^0,w,c
  6738  0014D2  22DA               	addwfc	fsr2h,f,c
  6739  0014D4  CFDE F014          	movff	postinc2,LCD_InSlider@posX
  6740  0014D8  CFDD F015          	movff	postdec2,LCD_InSlider@posX+1
  6741  0014DC  EE20 F004          	lfsr	2,4
  6742  0014E0  5037               	movf	gameControllerController@g^0,w,c
  6743  0014E2  26D9               	addwf	fsr2l,f,c
  6744  0014E4  5038               	movf	(gameControllerController@g+1)^0,w,c
  6745  0014E6  22DA               	addwfc	fsr2h,f,c
  6746  0014E8  CFDE F016          	movff	postinc2,LCD_InSlider@posY
  6747  0014EC  CFDD F017          	movff	postdec2,LCD_InSlider@posY+1
  6748  0014F0  EC57  F025         	call	_LCD_InSlider	;wreg free
  6749  0014F4  0900               	iorlw	0
  6750  0014F6  B4D8               	btfsc	status,2,c
  6751  0014F8  D014               	goto	l7212
  6752                           
  6753                           ;stateMachine/gameController.c: 128:             {;stateMachine/gameController.c: 129:  
      +                                         levelController(g);
  6754  0014FA  C037  F016         	movff	gameControllerController@g,levelController@g
  6755  0014FE  C038  F017         	movff	gameControllerController@g+1,levelController@g+1
  6756  001502  EC75  F022         	call	_levelController	;wreg free
  6757                           
  6758                           ;stateMachine/gameController.c: 130:                 LCD_SliderUpdate(&(g->sldLevel));
  6759  001506  0EB1               	movlw	177
  6760  001508  2437               	addwf	gameControllerController@g^0,w,c
  6761  00150A  6E27               	movwf	LCD_SliderUpdate@slider^0,c
  6762  00150C  0E00               	movlw	0
  6763  00150E  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6764  001510  6E28               	movwf	(LCD_SliderUpdate@slider+1)^0,c
  6765  001512  EC8F  F00B         	call	_LCD_SliderUpdate	;wreg free
  6766                           
  6767                           ;stateMachine/gameController.c: 131:                 GameParameters_resetPos(g);
  6768  001516  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  6769  00151A  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  6770  00151E  EC6B  F02C         	call	_GameParameters_resetPos	;wreg free
  6771  001522                     l7212:
  6772                           
  6773                           ;stateMachine/gameController.c: 134:             if(LCD_InButton(&(g->btnLeave),g->x,g->
      +                          y))
  6774  001522  0E50               	movlw	80
  6775  001524  2437               	addwf	gameControllerController@g^0,w,c
  6776  001526  6E12               	movwf	LCD_InButton@button^0,c
  6777  001528  0E00               	movlw	0
  6778  00152A  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6779  00152C  6E13               	movwf	(LCD_InButton@button+1)^0,c
  6780  00152E  EE20 F002          	lfsr	2,2
  6781  001532  5037               	movf	gameControllerController@g^0,w,c
  6782  001534  26D9               	addwf	fsr2l,f,c
  6783  001536  5038               	movf	(gameControllerController@g+1)^0,w,c
  6784  001538  22DA               	addwfc	fsr2h,f,c
  6785  00153A  CFDE F014          	movff	postinc2,LCD_InButton@posX
  6786  00153E  CFDD F015          	movff	postdec2,LCD_InButton@posX+1
  6787  001542  EE20 F004          	lfsr	2,4
  6788  001546  5037               	movf	gameControllerController@g^0,w,c
  6789  001548  26D9               	addwf	fsr2l,f,c
  6790  00154A  5038               	movf	(gameControllerController@g+1)^0,w,c
  6791  00154C  22DA               	addwfc	fsr2h,f,c
  6792  00154E  CFDE F016          	movff	postinc2,LCD_InButton@posY
  6793  001552  CFDD F017          	movff	postdec2,LCD_InButton@posY+1
  6794  001556  ECAB  F025         	call	_LCD_InButton	;wreg free
  6795  00155A  0900               	iorlw	0
  6796  00155C  B4D8               	btfsc	status,2,c
  6797  00155E  0012               	return	
  6798                           
  6799                           ;stateMachine/gameController.c: 135:             {;stateMachine/gameController.c: 136:  
      +                                         XF_pushEvent(evLeave,0);
  6800  001560  0E00               	movlw	0
  6801  001562  6E18               	movwf	XF_pushEvent@inISR^0,c
  6802  001564  0E08               	movlw	8
  6803  001566  ECD6  F029         	call	_XF_pushEvent
  6804                           
  6805                           ;stateMachine/gameController.c: 137:                 GameParameters_resetPos(g);
  6806  00156A  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  6807  00156E  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  6808  001572  EC6B  F02C         	call	_GameParameters_resetPos	;wreg free
  6809  001576  0012               	return	
  6810  001578                     l7216:
  6811                           
  6812                           ;stateMachine/gameController.c: 142:             if(LCD_InButton(&(g->btnLeave),g->x,g->
      +                          y))
  6813  001578  0E50               	movlw	80
  6814  00157A  2437               	addwf	gameControllerController@g^0,w,c
  6815  00157C  6E12               	movwf	LCD_InButton@button^0,c
  6816  00157E  0E00               	movlw	0
  6817  001580  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6818  001582  6E13               	movwf	(LCD_InButton@button+1)^0,c
  6819  001584  EE20 F002          	lfsr	2,2
  6820  001588  5037               	movf	gameControllerController@g^0,w,c
  6821  00158A  26D9               	addwf	fsr2l,f,c
  6822  00158C  5038               	movf	(gameControllerController@g+1)^0,w,c
  6823  00158E  22DA               	addwfc	fsr2h,f,c
  6824  001590  CFDE F014          	movff	postinc2,LCD_InButton@posX
  6825  001594  CFDD F015          	movff	postdec2,LCD_InButton@posX+1
  6826  001598  EE20 F004          	lfsr	2,4
  6827  00159C  5037               	movf	gameControllerController@g^0,w,c
  6828  00159E  26D9               	addwf	fsr2l,f,c
  6829  0015A0  5038               	movf	(gameControllerController@g+1)^0,w,c
  6830  0015A2  22DA               	addwfc	fsr2h,f,c
  6831  0015A4  CFDE F016          	movff	postinc2,LCD_InButton@posY
  6832  0015A8  CFDD F017          	movff	postdec2,LCD_InButton@posY+1
  6833  0015AC  ECAB  F025         	call	_LCD_InButton	;wreg free
  6834  0015B0  0900               	iorlw	0
  6835  0015B2  B4D8               	btfsc	status,2,c
  6836  0015B4  D00B               	goto	l7220
  6837                           
  6838                           ;stateMachine/gameController.c: 143:             {;stateMachine/gameController.c: 144:  
      +                                         XF_pushEvent(evLeave,0);
  6839  0015B6  0E00               	movlw	0
  6840  0015B8  6E18               	movwf	XF_pushEvent@inISR^0,c
  6841  0015BA  0E08               	movlw	8
  6842  0015BC  ECD6  F029         	call	_XF_pushEvent
  6843                           
  6844                           ;stateMachine/gameController.c: 145:                 GameParameters_resetPos(g);
  6845  0015C0  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  6846  0015C4  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  6847  0015C8  EC6B  F02C         	call	_GameParameters_resetPos	;wreg free
  6848  0015CC                     l7220:
  6849                           
  6850                           ;stateMachine/gameController.c: 148:             if (ev==evTimerPos)
  6851  0015CC  0E04               	movlw	4
  6852  0015CE  1839               	xorwf	gameControllerController@ev^0,w,c
  6853  0015D0  A4D8               	btfss	status,2,c
  6854  0015D2  D007               	goto	l7224
  6855                           
  6856                           ;stateMachine/gameController.c: 149:             {;stateMachine/gameController.c: 151:  
      +                                         moovePaddle1(g);
  6857  0015D4  C037  F01C         	movff	gameControllerController@g,moovePaddle1@g
  6858  0015D8  C038  F01D         	movff	gameControllerController@g+1,moovePaddle1@g+1
  6859  0015DC  EC01  F025         	call	_moovePaddle1	;wreg free
  6860                           
  6861                           ;stateMachine/gameController.c: 153:             }
  6862  0015E0  0012               	return	
  6863  0015E2                     l7224:
  6864  0015E2  0E0A               	movlw	10
  6865  0015E4  1839               	xorwf	gameControllerController@ev^0,w,c
  6866  0015E6  A4D8               	btfss	status,2,c
  6867  0015E8  0012               	return	
  6868                           
  6869                           ;stateMachine/gameController.c: 155:             {;stateMachine/gameController.c: 156:  
      +                                         desactivateTimerSleep();
  6870  0015EA  EC4C  F02B         	call	_desactivateTimerSleep	;wreg free
  6871                           
  6872                           ;stateMachine/gameController.c: 158:                 mooveBall(g);
  6873  0015EE  C037  F025         	movff	gameControllerController@g,mooveBall@g
  6874  0015F2  C038  F026         	movff	gameControllerController@g+1,mooveBall@g+1
  6875  0015F6  EC0B  F02C         	call	_mooveBall	;wreg free
  6876                           
  6877                           ;stateMachine/gameController.c: 159:                 moovePaddle2(g);
  6878  0015FA  C037  F01C         	movff	gameControllerController@g,moovePaddle2@g
  6879  0015FE  C038  F01D         	movff	gameControllerController@g+1,moovePaddle2@g+1
  6880  001602  EC9B  F021         	call	_moovePaddle2	;wreg free
  6881                           
  6882                           ;stateMachine/gameController.c: 160:                 XF_scheduleTimer(40-(g->level*10),e
      +                          vGameUpdate,0);
  6883  001606  EE20 F006          	lfsr	2,6
  6884  00160A  5037               	movf	gameControllerController@g^0,w,c
  6885  00160C  26D9               	addwf	fsr2l,f,c
  6886  00160E  5038               	movf	(gameControllerController@g+1)^0,w,c
  6887  001610  22DA               	addwfc	fsr2h,f,c
  6888  001612  CFDE F01A          	movff	postinc2,___wmul@multiplier
  6889  001616  CFDD F01B          	movff	postdec2,___wmul@multiplier+1
  6890  00161A  0EFF               	movlw	255
  6891  00161C  6E1D               	movwf	(___wmul@multiplicand+1)^0,c
  6892  00161E  0EF6               	movlw	246
  6893  001620  6E1C               	movwf	___wmul@multiplicand^0,c
  6894  001622  ECA6  F02C         	call	___wmul	;wreg free
  6895  001626  0E28               	movlw	40
  6896  001628  241A               	addwf	?___wmul^0,w,c
  6897  00162A  6E20               	movwf	XF_scheduleTimer@tm^0,c
  6898  00162C  0E00               	movlw	0
  6899  00162E  201B               	addwfc	(?___wmul+1)^0,w,c
  6900  001630  6E21               	movwf	(XF_scheduleTimer@tm+1)^0,c
  6901  001632  0E0A               	movlw	10
  6902  001634  6E22               	movwf	XF_scheduleTimer@ev^0,c
  6903  001636  0E00               	movlw	0
  6904  001638  6E23               	movwf	XF_scheduleTimer@inISR^0,c
  6905  00163A  ECFF  F029         	call	_XF_scheduleTimer	;wreg free
  6906  00163E  0012               	return	
  6907  001640                     l7232:
  6908                           
  6909                           ;stateMachine/gameController.c: 169:             if(LCD_InButton(&(g->btnNewGame),g->x,g
      +                          ->y))
  6910  001640  0E68               	movlw	104
  6911  001642  2437               	addwf	gameControllerController@g^0,w,c
  6912  001644  6E12               	movwf	LCD_InButton@button^0,c
  6913  001646  0E00               	movlw	0
  6914  001648  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6915  00164A  6E13               	movwf	(LCD_InButton@button+1)^0,c
  6916  00164C  EE20 F002          	lfsr	2,2
  6917  001650  5037               	movf	gameControllerController@g^0,w,c
  6918  001652  26D9               	addwf	fsr2l,f,c
  6919  001654  5038               	movf	(gameControllerController@g+1)^0,w,c
  6920  001656  22DA               	addwfc	fsr2h,f,c
  6921  001658  CFDE F014          	movff	postinc2,LCD_InButton@posX
  6922  00165C  CFDD F015          	movff	postdec2,LCD_InButton@posX+1
  6923  001660  EE20 F004          	lfsr	2,4
  6924  001664  5037               	movf	gameControllerController@g^0,w,c
  6925  001666  26D9               	addwf	fsr2l,f,c
  6926  001668  5038               	movf	(gameControllerController@g+1)^0,w,c
  6927  00166A  22DA               	addwfc	fsr2h,f,c
  6928  00166C  CFDE F016          	movff	postinc2,LCD_InButton@posY
  6929  001670  CFDD F017          	movff	postdec2,LCD_InButton@posY+1
  6930  001674  ECAB  F025         	call	_LCD_InButton	;wreg free
  6931  001678  0900               	iorlw	0
  6932  00167A  B4D8               	btfsc	status,2,c
  6933  00167C  D00D               	goto	l7238
  6934                           
  6935                           ;stateMachine/gameController.c: 170:             {;stateMachine/gameController.c: 172:  
      +                                         GameParameters_init(g);
  6936  00167E  C037  F02B         	movff	gameControllerController@g,GameParameters_init@s
  6937  001682  C038  F02C         	movff	gameControllerController@g+1,GameParameters_init@s+1
  6938  001686  EC90  F00D         	call	_GameParameters_init	;wreg free
  6939                           
  6940                           ;stateMachine/gameController.c: 173:                 XF_pushEvent(evNewGame,0);
  6941  00168A  0E00               	movlw	0
  6942  00168C  6E18               	movwf	XF_pushEvent@inISR^0,c
  6943  00168E  0E0F               	movlw	15
  6944  001690  ECD6  F029         	call	_XF_pushEvent
  6945                           
  6946                           ;stateMachine/gameController.c: 174:                 gameStateMachine=NOGAME;
  6947  001694  0E00               	movlw	0
  6948  001696  6E4C               	movwf	_gameStateMachine^0,c
  6949  001698                     l7238:
  6950                           
  6951                           ;stateMachine/gameController.c: 176:             if(LCD_InButton(&(g->btnTurnOff),g->x,g
      +                          ->y))
  6952  001698  0E80               	movlw	128
  6953  00169A  2437               	addwf	gameControllerController@g^0,w,c
  6954  00169C  6E12               	movwf	LCD_InButton@button^0,c
  6955  00169E  0E00               	movlw	0
  6956  0016A0  2038               	addwfc	(gameControllerController@g+1)^0,w,c
  6957  0016A2  6E13               	movwf	(LCD_InButton@button+1)^0,c
  6958  0016A4  EE20 F002          	lfsr	2,2
  6959  0016A8  5037               	movf	gameControllerController@g^0,w,c
  6960  0016AA  26D9               	addwf	fsr2l,f,c
  6961  0016AC  5038               	movf	(gameControllerController@g+1)^0,w,c
  6962  0016AE  22DA               	addwfc	fsr2h,f,c
  6963  0016B0  CFDE F014          	movff	postinc2,LCD_InButton@posX
  6964  0016B4  CFDD F015          	movff	postdec2,LCD_InButton@posX+1
  6965  0016B8  EE20 F004          	lfsr	2,4
  6966  0016BC  5037               	movf	gameControllerController@g^0,w,c
  6967  0016BE  26D9               	addwf	fsr2l,f,c
  6968  0016C0  5038               	movf	(gameControllerController@g+1)^0,w,c
  6969  0016C2  22DA               	addwfc	fsr2h,f,c
  6970  0016C4  CFDE F016          	movff	postinc2,LCD_InButton@posY
  6971  0016C8  CFDD F017          	movff	postdec2,LCD_InButton@posY+1
  6972  0016CC  ECAB  F025         	call	_LCD_InButton	;wreg free
  6973  0016D0  0900               	iorlw	0
  6974  0016D2  B4D8               	btfsc	status,2,c
  6975  0016D4  0012               	return	
  6976                           
  6977                           ;stateMachine/gameController.c: 177:             {;stateMachine/gameController.c: 178:  
      +                                         XF_pushEvent(evSleep,0);
  6978  0016D6  0E00               	movlw	0
  6979  0016D8  6E18               	movwf	XF_pushEvent@inISR^0,c
  6980  0016DA  0E03               	movlw	3
  6981  0016DC  ECD6  F029         	call	_XF_pushEvent
  6982                           
  6983                           ;stateMachine/gameController.c: 179:                 GameParameters_resetPos(g);
  6984  0016E0  C037  F012         	movff	gameControllerController@g,GameParameters_resetPos@s
  6985  0016E4  C038  F013         	movff	gameControllerController@g+1,GameParameters_resetPos@s+1
  6986  0016E8  EC6B  F02C         	call	_GameParameters_resetPos	;wreg free
  6987  0016EC  0012               	return	
  6988  0016EE                     l7244:
  6989  0016EE  504C               	movf	_gameStateMachine^0,w,c
  6990  0016F0  6E3A               	movwf	??_gameControllerController^0,c
  6991  0016F2  6A3B               	clrf	(??_gameControllerController+1)^0,c
  6992                           
  6993                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6994                           ; Switch size 1, requested type "simple"
  6995                           ; Number of cases is 1, Range of values is 0 to 0
  6996                           ; switch strategies available:
  6997                           ; Name         Instructions Cycles
  6998                           ; simple_byte            4     3 (average)
  6999                           ;	Chosen strategy is simple_byte
  7000  0016F4  503B               	movf	(??_gameControllerController+1)^0,w,c
  7001  0016F6  0A00               	xorlw	0	; case 0
  7002  0016F8  A4D8               	btfss	status,2,c
  7003  0016FA  0012               	return	
  7004                           
  7005                           ; Switch size 1, requested type "simple"
  7006                           ; Number of cases is 5, Range of values is 0 to 4
  7007                           ; switch strategies available:
  7008                           ; Name         Instructions Cycles
  7009                           ; simple_byte           16     9 (average)
  7010                           ;	Chosen strategy is simple_byte
  7011  0016FC  503A               	movf	??_gameControllerController^0,w,c
  7012  0016FE  0A00               	xorlw	0	; case 0
  7013  001700  B4D8               	btfsc	status,2,c
  7014  001702  D600               	goto	l7188
  7015  001704  0A01               	xorlw	1	; case 1
  7016  001706  B4D8               	btfsc	status,2,c
  7017  001708  D6A6               	goto	l7198
  7018  00170A  0A03               	xorlw	3	; case 2
  7019  00170C  B4D8               	btfsc	status,2,c
  7020  00170E  D734               	goto	l7216
  7021  001710  0A01               	xorlw	1	; case 3
  7022  001712  B4D8               	btfsc	status,2,c
  7023  001714  0012               	return	
  7024  001716  0A07               	xorlw	7	; case 4
  7025  001718  A4D8               	btfss	status,2,c
  7026  00171A  0012               	return	
  7027  00171C  D791               	goto	l7232
  7028  00171E                     __end_of_gameControllerController:
  7029                           	callstack 0
  7030                           
  7031 ;; *************** function _moovePaddle2 *****************
  7032 ;; Defined at:
  7033 ;;		line 26 in file "gameFunction.c"
  7034 ;; Parameters:    Size  Location     Type
  7035 ;;  g               2   27[COMRAM] PTR struct GameParameter
  7036 ;;		 -> g1(240), 
  7037 ;; Auto vars:     Size  Location     Type
  7038 ;;		None
  7039 ;; Return value:  Size  Location     Type
  7040 ;;                  1    wreg      void 
  7041 ;; Registers used:
  7042 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7043 ;; Tracked objects:
  7044 ;;		On entry : 0/0
  7045 ;;		On exit  : 0/0
  7046 ;;		Unchanged: 0/0
  7047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7048 ;;      Params:         2       0       0       0       0       0       0
  7049 ;;      Locals:         0       0       0       0       0       0       0
  7050 ;;      Temps:          6       0       0       0       0       0       0
  7051 ;;      Totals:         8       0       0       0       0       0       0
  7052 ;;Total ram usage:        8 bytes
  7053 ;; Hardware stack levels used: 1
  7054 ;; Hardware stack levels required when called: 6
  7055 ;; This function calls:
  7056 ;;		_Paddle_addX
  7057 ;;		_XF_pushEvent
  7058 ;; This function is called by:
  7059 ;;		_gameControllerController
  7060 ;; This function uses a non-reentrant model
  7061 ;;
  7062                           
  7063                           	psect	text24
  7064  004336                     __ptext24:
  7065                           	callstack 0
  7066  004336                     _moovePaddle2:
  7067                           	callstack 20
  7068                           
  7069                           ;gameFunction.c: 26: void moovePaddle2(GameParameters* g);gameFunction.c: 27: {;gameFunc
      +                          tion.c: 29:     if(g->p2.x+(50/2)<g->b.x-2)
  7070                           
  7071                           ;incstack = 0
  7072  004336  0EFE               	movlw	254
  7073  004338  6E1E               	movwf	??_moovePaddle2^0,c
  7074  00433A  0EFF               	movlw	255
  7075  00433C  6E1F               	movwf	(??_moovePaddle2+1)^0,c
  7076  00433E  EE20 F0CA          	lfsr	2,202
  7077  004342  501C               	movf	moovePaddle2@g^0,w,c
  7078  004344  26D9               	addwf	fsr2l,f,c
  7079  004346  501D               	movf	(moovePaddle2@g+1)^0,w,c
  7080  004348  22DA               	addwfc	fsr2h,f,c
  7081  00434A  CFDE F020          	movff	postinc2,??_moovePaddle2+2
  7082  00434E  CFDD F021          	movff	postdec2,??_moovePaddle2+3
  7083  004352  501E               	movf	??_moovePaddle2^0,w,c
  7084  004354  2620               	addwf	(??_moovePaddle2+2)^0,f,c
  7085  004356  501F               	movf	(??_moovePaddle2+1)^0,w,c
  7086  004358  2221               	addwfc	(??_moovePaddle2+3)^0,f,c
  7087  00435A  EE20 F0E0          	lfsr	2,224
  7088  00435E  501C               	movf	moovePaddle2@g^0,w,c
  7089  004360  26D9               	addwf	fsr2l,f,c
  7090  004362  501D               	movf	(moovePaddle2@g+1)^0,w,c
  7091  004364  22DA               	addwfc	fsr2h,f,c
  7092  004366  CFDE F022          	movff	postinc2,??_moovePaddle2+4
  7093  00436A  CFDD F023          	movff	postdec2,??_moovePaddle2+5
  7094  00436E  0E19               	movlw	25
  7095  004370  2622               	addwf	(??_moovePaddle2+4)^0,f,c
  7096  004372  0E00               	movlw	0
  7097  004374  2223               	addwfc	(??_moovePaddle2+5)^0,f,c
  7098  004376  5020               	movf	(??_moovePaddle2+2)^0,w,c
  7099  004378  5C22               	subwf	(??_moovePaddle2+4)^0,w,c
  7100  00437A  5021               	movf	(??_moovePaddle2+3)^0,w,c
  7101  00437C  5823               	subwfb	(??_moovePaddle2+5)^0,w,c
  7102  00437E  B0D8               	btfsc	status,0,c
  7103  004380  D016               	goto	l7116
  7104                           
  7105                           ;gameFunction.c: 30:     {;gameFunction.c: 31:         Paddle_addX(&g->p2,2,1);
  7106  004382  0EE0               	movlw	224
  7107  004384  241C               	addwf	moovePaddle2@g^0,w,c
  7108  004386  6E12               	movwf	Paddle_addX@p^0,c
  7109  004388  0E00               	movlw	0
  7110  00438A  201D               	addwfc	(moovePaddle2@g+1)^0,w,c
  7111  00438C  6E13               	movwf	(Paddle_addX@p+1)^0,c
  7112  00438E  0E00               	movlw	0
  7113  004390  6E15               	movwf	(Paddle_addX@value+1)^0,c
  7114  004392  0E02               	movlw	2
  7115  004394  6E14               	movwf	Paddle_addX@value^0,c
  7116  004396  0E00               	movlw	0
  7117  004398  6E17               	movwf	(Paddle_addX@add+1)^0,c
  7118  00439A  0E01               	movlw	1
  7119  00439C  6E16               	movwf	Paddle_addX@add^0,c
  7120  00439E  ECDA  F022         	call	_Paddle_addX	;wreg free
  7121                           
  7122                           ;gameFunction.c: 32:         XF_pushEvent(evRedrawPaddle2,0);
  7123  0043A2  0E00               	movlw	0
  7124  0043A4  6E18               	movwf	XF_pushEvent@inISR^0,c
  7125  0043A6  0E0C               	movlw	12
  7126  0043A8  ECD6  F029         	call	_XF_pushEvent
  7127                           
  7128                           ;gameFunction.c: 33:     }
  7129  0043AC  0012               	return	
  7130  0043AE                     l7116:
  7131  0043AE  EE20 F0E0          	lfsr	2,224
  7132  0043B2  501C               	movf	moovePaddle2@g^0,w,c
  7133  0043B4  26D9               	addwf	fsr2l,f,c
  7134  0043B6  501D               	movf	(moovePaddle2@g+1)^0,w,c
  7135  0043B8  22DA               	addwfc	fsr2h,f,c
  7136  0043BA  CFDE F01E          	movff	postinc2,??_moovePaddle2
  7137  0043BE  CFDD F01F          	movff	postdec2,??_moovePaddle2+1
  7138  0043C2  0E19               	movlw	25
  7139  0043C4  261E               	addwf	??_moovePaddle2^0,f,c
  7140  0043C6  0E00               	movlw	0
  7141  0043C8  221F               	addwfc	(??_moovePaddle2+1)^0,f,c
  7142  0043CA  EE20 F0CA          	lfsr	2,202
  7143  0043CE  501C               	movf	moovePaddle2@g^0,w,c
  7144  0043D0  26D9               	addwf	fsr2l,f,c
  7145  0043D2  501D               	movf	(moovePaddle2@g+1)^0,w,c
  7146  0043D4  22DA               	addwfc	fsr2h,f,c
  7147  0043D6  CFDE F020          	movff	postinc2,??_moovePaddle2+2
  7148  0043DA  CFDD F021          	movff	postdec2,??_moovePaddle2+3
  7149  0043DE  0E02               	movlw	2
  7150  0043E0  2620               	addwf	(??_moovePaddle2+2)^0,f,c
  7151  0043E2  0E00               	movlw	0
  7152  0043E4  2221               	addwfc	(??_moovePaddle2+3)^0,f,c
  7153  0043E6  501E               	movf	??_moovePaddle2^0,w,c
  7154  0043E8  5C20               	subwf	(??_moovePaddle2+2)^0,w,c
  7155  0043EA  501F               	movf	(??_moovePaddle2+1)^0,w,c
  7156  0043EC  5821               	subwfb	(??_moovePaddle2+3)^0,w,c
  7157  0043EE  B0D8               	btfsc	status,0,c
  7158  0043F0  0012               	return	
  7159                           
  7160                           ;gameFunction.c: 35:     {;gameFunction.c: 36:         Paddle_addX(&g->p2,2,0);
  7161  0043F2  0EE0               	movlw	224
  7162  0043F4  241C               	addwf	moovePaddle2@g^0,w,c
  7163  0043F6  6E12               	movwf	Paddle_addX@p^0,c
  7164  0043F8  0E00               	movlw	0
  7165  0043FA  201D               	addwfc	(moovePaddle2@g+1)^0,w,c
  7166  0043FC  6E13               	movwf	(Paddle_addX@p+1)^0,c
  7167  0043FE  0E00               	movlw	0
  7168  004400  6E15               	movwf	(Paddle_addX@value+1)^0,c
  7169  004402  0E02               	movlw	2
  7170  004404  6E14               	movwf	Paddle_addX@value^0,c
  7171  004406  0E00               	movlw	0
  7172  004408  6E17               	movwf	(Paddle_addX@add+1)^0,c
  7173  00440A  0E00               	movlw	0
  7174  00440C  6E16               	movwf	Paddle_addX@add^0,c
  7175  00440E  ECDA  F022         	call	_Paddle_addX	;wreg free
  7176                           
  7177                           ;gameFunction.c: 37:         XF_pushEvent(evRedrawPaddle2,0);
  7178  004412  0E00               	movlw	0
  7179  004414  6E18               	movwf	XF_pushEvent@inISR^0,c
  7180  004416  0E0C               	movlw	12
  7181  004418  ECD6  F029         	call	_XF_pushEvent
  7182  00441C  0012               	return		;funcret
  7183  00441E                     __end_of_moovePaddle2:
  7184                           	callstack 0
  7185                           
  7186 ;; *************** function _moovePaddle1 *****************
  7187 ;; Defined at:
  7188 ;;		line 6 in file "gameFunction.c"
  7189 ;; Parameters:    Size  Location     Type
  7190 ;;  g               2   27[COMRAM] PTR struct GameParameter
  7191 ;;		 -> g1(240), 
  7192 ;; Auto vars:     Size  Location     Type
  7193 ;;		None
  7194 ;; Return value:  Size  Location     Type
  7195 ;;                  1    wreg      void 
  7196 ;; Registers used:
  7197 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7198 ;; Tracked objects:
  7199 ;;		On entry : 0/0
  7200 ;;		On exit  : 0/0
  7201 ;;		Unchanged: 0/0
  7202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7203 ;;      Params:         2       0       0       0       0       0       0
  7204 ;;      Locals:         0       0       0       0       0       0       0
  7205 ;;      Temps:          2       0       0       0       0       0       0
  7206 ;;      Totals:         4       0       0       0       0       0       0
  7207 ;;Total ram usage:        4 bytes
  7208 ;; Hardware stack levels used: 1
  7209 ;; Hardware stack levels required when called: 6
  7210 ;; This function calls:
  7211 ;;		_GameParameters_resetPos
  7212 ;;		_Paddle_addX
  7213 ;;		_XF_pushEvent
  7214 ;; This function is called by:
  7215 ;;		_gameControllerController
  7216 ;; This function uses a non-reentrant model
  7217 ;;
  7218                           
  7219                           	psect	text25
  7220  004A02                     __ptext25:
  7221                           	callstack 0
  7222  004A02                     _moovePaddle1:
  7223                           	callstack 20
  7224                           
  7225                           ;gameFunction.c: 6: void moovePaddle1(GameParameters* g);gameFunction.c: 7: {;gameFuncti
      +                          on.c: 9:     if((g->x>0)&&(g->x<110))
  7226                           
  7227                           ;incstack = 0
  7228  004A02  EE20 F002          	lfsr	2,2
  7229  004A06  501C               	movf	moovePaddle1@g^0,w,c
  7230  004A08  26D9               	addwf	fsr2l,f,c
  7231  004A0A  501D               	movf	(moovePaddle1@g+1)^0,w,c
  7232  004A0C  22DA               	addwfc	fsr2h,f,c
  7233  004A0E  50DE               	movf	postinc2,w,c
  7234  004A10  10DE               	iorwf	postinc2,w,c
  7235  004A12  B4D8               	btfsc	status,2,c
  7236  004A14  D023               	goto	l7092
  7237  004A16  EE20 F002          	lfsr	2,2
  7238  004A1A  501C               	movf	moovePaddle1@g^0,w,c
  7239  004A1C  26D9               	addwf	fsr2l,f,c
  7240  004A1E  501D               	movf	(moovePaddle1@g+1)^0,w,c
  7241  004A20  22DA               	addwfc	fsr2h,f,c
  7242  004A22  0E01               	movlw	1
  7243  004A24  50DB               	movf	plusw2,w,c
  7244  004A26  E11A               	bnz	l7092
  7245  004A28  0E6E               	movlw	110
  7246  004A2A  5CDE               	subwf	postinc2,w,c
  7247  004A2C  B0D8               	btfsc	status,0,c
  7248  004A2E  D016               	goto	l7092
  7249                           
  7250                           ;gameFunction.c: 10:     {;gameFunction.c: 11:         GameParameters_resetPos(g);
  7251  004A30  C01C  F012         	movff	moovePaddle1@g,GameParameters_resetPos@s
  7252  004A34  C01D  F013         	movff	moovePaddle1@g+1,GameParameters_resetPos@s+1
  7253  004A38  EC6B  F02C         	call	_GameParameters_resetPos	;wreg free
  7254                           
  7255                           ;gameFunction.c: 12:         Paddle_addX(&g->p1,1,0);
  7256  004A3C  0ED6               	movlw	214
  7257  004A3E  241C               	addwf	moovePaddle1@g^0,w,c
  7258  004A40  6E12               	movwf	Paddle_addX@p^0,c
  7259  004A42  0E00               	movlw	0
  7260  004A44  201D               	addwfc	(moovePaddle1@g+1)^0,w,c
  7261  004A46  6E13               	movwf	(Paddle_addX@p+1)^0,c
  7262  004A48  0E00               	movlw	0
  7263  004A4A  6E15               	movwf	(Paddle_addX@value+1)^0,c
  7264  004A4C  0E01               	movlw	1
  7265  004A4E  6E14               	movwf	Paddle_addX@value^0,c
  7266  004A50  0E00               	movlw	0
  7267  004A52  6E17               	movwf	(Paddle_addX@add+1)^0,c
  7268  004A54  0E00               	movlw	0
  7269  004A56  6E16               	movwf	Paddle_addX@add^0,c
  7270  004A58  ECDA  F022         	call	_Paddle_addX	;wreg free
  7271  004A5C                     l7092:
  7272                           
  7273                           ;gameFunction.c: 15:     if(g->x>=130)
  7274  004A5C  EE20 F002          	lfsr	2,2
  7275  004A60  501C               	movf	moovePaddle1@g^0,w,c
  7276  004A62  26D9               	addwf	fsr2l,f,c
  7277  004A64  501D               	movf	(moovePaddle1@g+1)^0,w,c
  7278  004A66  22DA               	addwfc	fsr2h,f,c
  7279  004A68  0E01               	movlw	1
  7280  004A6A  50DB               	movf	plusw2,w,c
  7281  004A6C  E104               	bnz	u4690
  7282  004A6E  0E82               	movlw	130
  7283  004A70  5CDE               	subwf	postinc2,w,c
  7284  004A72  A0D8               	btfss	status,0,c
  7285  004A74  D016               	goto	l805
  7286  004A76                     u4690:
  7287                           
  7288                           ;gameFunction.c: 16:     {;gameFunction.c: 17:         GameParameters_resetPos(g);
  7289  004A76  C01C  F012         	movff	moovePaddle1@g,GameParameters_resetPos@s
  7290  004A7A  C01D  F013         	movff	moovePaddle1@g+1,GameParameters_resetPos@s+1
  7291  004A7E  EC6B  F02C         	call	_GameParameters_resetPos	;wreg free
  7292                           
  7293                           ;gameFunction.c: 18:         Paddle_addX(&g->p1,1,1);
  7294  004A82  0ED6               	movlw	214
  7295  004A84  241C               	addwf	moovePaddle1@g^0,w,c
  7296  004A86  6E12               	movwf	Paddle_addX@p^0,c
  7297  004A88  0E00               	movlw	0
  7298  004A8A  201D               	addwfc	(moovePaddle1@g+1)^0,w,c
  7299  004A8C  6E13               	movwf	(Paddle_addX@p+1)^0,c
  7300  004A8E  0E00               	movlw	0
  7301  004A90  6E15               	movwf	(Paddle_addX@value+1)^0,c
  7302  004A92  0E01               	movlw	1
  7303  004A94  6E14               	movwf	Paddle_addX@value^0,c
  7304  004A96  0E00               	movlw	0
  7305  004A98  6E17               	movwf	(Paddle_addX@add+1)^0,c
  7306  004A9A  0E01               	movlw	1
  7307  004A9C  6E16               	movwf	Paddle_addX@add^0,c
  7308  004A9E  ECDA  F022         	call	_Paddle_addX	;wreg free
  7309  004AA2                     l805:
  7310                           
  7311                           ;gameFunction.c: 20:     XF_pushEvent(evRedrawPaddle1,0);
  7312  004AA2  0E00               	movlw	0
  7313  004AA4  6E18               	movwf	XF_pushEvent@inISR^0,c
  7314  004AA6  0E0B               	movlw	11
  7315  004AA8  ECD6  F029         	call	_XF_pushEvent
  7316  004AAC  0012               	return		;funcret
  7317  004AAE                     __end_of_moovePaddle1:
  7318                           	callstack 0
  7319                           
  7320 ;; *************** function _Paddle_addX *****************
  7321 ;; Defined at:
  7322 ;;		line 28 in file "class/paddle.c"
  7323 ;; Parameters:    Size  Location     Type
  7324 ;;  p               2   17[COMRAM] PTR struct Paddle
  7325 ;;		 -> g1(240), 
  7326 ;;  value           2   19[COMRAM] unsigned short 
  7327 ;;  add             2   21[COMRAM] unsigned short 
  7328 ;; Auto vars:     Size  Location     Type
  7329 ;;		None
  7330 ;; Return value:  Size  Location     Type
  7331 ;;                  1    wreg      void 
  7332 ;; Registers used:
  7333 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7334 ;; Tracked objects:
  7335 ;;		On entry : 0/0
  7336 ;;		On exit  : 0/0
  7337 ;;		Unchanged: 0/0
  7338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7339 ;;      Params:         6       0       0       0       0       0       0
  7340 ;;      Locals:         0       0       0       0       0       0       0
  7341 ;;      Temps:          4       0       0       0       0       0       0
  7342 ;;      Totals:        10       0       0       0       0       0       0
  7343 ;;Total ram usage:       10 bytes
  7344 ;; Hardware stack levels used: 1
  7345 ;; Hardware stack levels required when called: 4
  7346 ;; This function calls:
  7347 ;;		Nothing
  7348 ;; This function is called by:
  7349 ;;		_moovePaddle1
  7350 ;;		_moovePaddle2
  7351 ;; This function uses a non-reentrant model
  7352 ;;
  7353                           
  7354                           	psect	text26
  7355  0045B4                     __ptext26:
  7356                           	callstack 0
  7357  0045B4                     _Paddle_addX:
  7358                           	callstack 21
  7359                           
  7360                           ;class/paddle.c: 28: void Paddle_addX(struct Paddle* p,uint16_t value,uint16_t add);clas
      +                          s/paddle.c: 29: {;class/paddle.c: 30:     if(add==1)
  7361                           
  7362                           ;incstack = 0
  7363  0045B4  0416               	decf	Paddle_addX@add^0,w,c
  7364  0045B6  1017               	iorwf	(Paddle_addX@add+1)^0,w,c
  7365  0045B8  A4D8               	btfss	status,2,c
  7366  0045BA  D02F               	goto	l6512
  7367                           
  7368                           ;class/paddle.c: 31:     {;class/paddle.c: 32:         p->x=(p->x)+value;
  7369  0045BC  C012  FFD9         	movff	Paddle_addX@p,fsr2l
  7370  0045C0  C013  FFDA         	movff	Paddle_addX@p+1,fsr2h
  7371  0045C4  CFDE F018          	movff	postinc2,??_Paddle_addX
  7372  0045C8  CFDD F019          	movff	postdec2,??_Paddle_addX+1
  7373  0045CC  5014               	movf	Paddle_addX@value^0,w,c
  7374  0045CE  2618               	addwf	??_Paddle_addX^0,f,c
  7375  0045D0  5015               	movf	(Paddle_addX@value+1)^0,w,c
  7376  0045D2  2219               	addwfc	(??_Paddle_addX+1)^0,f,c
  7377  0045D4  C012  FFD9         	movff	Paddle_addX@p,fsr2l
  7378  0045D8  C013  FFDA         	movff	Paddle_addX@p+1,fsr2h
  7379  0045DC  C018  FFDE         	movff	??_Paddle_addX,postinc2
  7380  0045E0  C019  FFDD         	movff	??_Paddle_addX+1,postdec2
  7381                           
  7382                           ;class/paddle.c: 33:         if((p->x+50)>239)
  7383  0045E4  C012  FFD9         	movff	Paddle_addX@p,fsr2l
  7384  0045E8  C013  FFDA         	movff	Paddle_addX@p+1,fsr2h
  7385  0045EC  CFDE F018          	movff	postinc2,??_Paddle_addX
  7386  0045F0  CFDD F019          	movff	postdec2,??_Paddle_addX+1
  7387  0045F4  0E32               	movlw	50
  7388  0045F6  2618               	addwf	??_Paddle_addX^0,f,c
  7389  0045F8  0E00               	movlw	0
  7390  0045FA  2219               	addwfc	(??_Paddle_addX+1)^0,f,c
  7391  0045FC  5019               	movf	(??_Paddle_addX+1)^0,w,c
  7392  0045FE  E104               	bnz	u4010
  7393  004600  0EF0               	movlw	240
  7394  004602  5C18               	subwf	??_Paddle_addX^0,w,c
  7395  004604  A0D8               	btfss	status,0,c
  7396  004606  0012               	return	
  7397  004608                     u4010:
  7398                           
  7399                           ;class/paddle.c: 34:         {;class/paddle.c: 35:             p->x=239-(50);
  7400  004608  C012  FFD9         	movff	Paddle_addX@p,fsr2l
  7401  00460C  C013  FFDA         	movff	Paddle_addX@p+1,fsr2h
  7402  004610  0EBD               	movlw	189
  7403  004612  6EDE               	movwf	postinc2,c
  7404  004614  0E00               	movlw	0
  7405  004616  6EDD               	movwf	postdec2,c
  7406  004618  0012               	return	
  7407  00461A                     l6512:
  7408                           
  7409                           ;class/paddle.c: 39:     {;class/paddle.c: 40:         if((p->x)<value+1)
  7410  00461A  0E01               	movlw	1
  7411  00461C  2414               	addwf	Paddle_addX@value^0,w,c
  7412  00461E  6E18               	movwf	??_Paddle_addX^0,c
  7413  004620  0E00               	movlw	0
  7414  004622  2015               	addwfc	(Paddle_addX@value+1)^0,w,c
  7415  004624  6E19               	movwf	(??_Paddle_addX+1)^0,c
  7416  004626  C012  FFD9         	movff	Paddle_addX@p,fsr2l
  7417  00462A  C013  FFDA         	movff	Paddle_addX@p+1,fsr2h
  7418  00462E  5018               	movf	??_Paddle_addX^0,w,c
  7419  004630  5CDE               	subwf	postinc2,w,c
  7420  004632  5019               	movf	(??_Paddle_addX+1)^0,w,c
  7421  004634  58DE               	subwfb	postinc2,w,c
  7422  004636  B0D8               	btfsc	status,0,c
  7423  004638  D009               	goto	l6516
  7424                           
  7425                           ;class/paddle.c: 41:         {;class/paddle.c: 42:             p->x=0;
  7426  00463A  C012  FFD9         	movff	Paddle_addX@p,fsr2l
  7427  00463E  C013  FFDA         	movff	Paddle_addX@p+1,fsr2h
  7428  004642  0E00               	movlw	0
  7429  004644  6EDE               	movwf	postinc2,c
  7430  004646  0E00               	movlw	0
  7431  004648  6EDD               	movwf	postdec2,c
  7432                           
  7433                           ;class/paddle.c: 43:         }
  7434  00464A  0012               	return	
  7435  00464C                     l6516:
  7436                           
  7437                           ;class/paddle.c: 45:         {;class/paddle.c: 46:             p->x=(p->x)-value;
  7438  00464C  C012  FFD9         	movff	Paddle_addX@p,fsr2l
  7439  004650  C013  FFDA         	movff	Paddle_addX@p+1,fsr2h
  7440  004654  CFDE F018          	movff	postinc2,??_Paddle_addX
  7441  004658  CFDD F019          	movff	postdec2,??_Paddle_addX+1
  7442  00465C  5014               	movf	Paddle_addX@value^0,w,c
  7443  00465E  5E18               	subwf	??_Paddle_addX^0,f,c
  7444  004660  5015               	movf	(Paddle_addX@value+1)^0,w,c
  7445  004662  5A19               	subwfb	(??_Paddle_addX+1)^0,f,c
  7446  004664  C012  FFD9         	movff	Paddle_addX@p,fsr2l
  7447  004668  C013  FFDA         	movff	Paddle_addX@p+1,fsr2h
  7448  00466C  C018  FFDE         	movff	??_Paddle_addX,postinc2
  7449  004670  C019  FFDD         	movff	??_Paddle_addX+1,postdec2
  7450  004674  0012               	return		;funcret
  7451  004676                     __end_of_Paddle_addX:
  7452                           	callstack 0
  7453                           
  7454 ;; *************** function _GameParameters_resetPos *****************
  7455 ;; Defined at:
  7456 ;;		line 62 in file "class/gameParameters.c"
  7457 ;; Parameters:    Size  Location     Type
  7458 ;;  s               2   17[COMRAM] PTR struct GameParameter
  7459 ;;		 -> g1(240), 
  7460 ;; Auto vars:     Size  Location     Type
  7461 ;;		None
  7462 ;; Return value:  Size  Location     Type
  7463 ;;                  1    wreg      void 
  7464 ;; Registers used:
  7465 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7466 ;; Tracked objects:
  7467 ;;		On entry : 0/0
  7468 ;;		On exit  : 0/0
  7469 ;;		Unchanged: 0/0
  7470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7471 ;;      Params:         2       0       0       0       0       0       0
  7472 ;;      Locals:         0       0       0       0       0       0       0
  7473 ;;      Temps:          0       0       0       0       0       0       0
  7474 ;;      Totals:         2       0       0       0       0       0       0
  7475 ;;Total ram usage:        2 bytes
  7476 ;; Hardware stack levels used: 1
  7477 ;; Hardware stack levels required when called: 4
  7478 ;; This function calls:
  7479 ;;		Nothing
  7480 ;; This function is called by:
  7481 ;;		_gameControllerController
  7482 ;;		_moovePaddle1
  7483 ;; This function uses a non-reentrant model
  7484 ;;
  7485                           
  7486                           	psect	text27
  7487  0058D6                     __ptext27:
  7488                           	callstack 0
  7489  0058D6                     _GameParameters_resetPos:
  7490                           	callstack 21
  7491                           
  7492                           ;class/gameParameters.c: 62: void GameParameters_resetPos(struct GameParameters* s);clas
      +                          s/gameParameters.c: 63: {;class/gameParameters.c: 64:     s->x=0;
  7493                           
  7494                           ;incstack = 0
  7495  0058D6  EE20 F002          	lfsr	2,2
  7496  0058DA  5012               	movf	GameParameters_resetPos@s^0,w,c
  7497  0058DC  26D9               	addwf	fsr2l,f,c
  7498  0058DE  5013               	movf	(GameParameters_resetPos@s+1)^0,w,c
  7499  0058E0  22DA               	addwfc	fsr2h,f,c
  7500  0058E2  0E00               	movlw	0
  7501  0058E4  6EDE               	movwf	postinc2,c
  7502  0058E6  0E00               	movlw	0
  7503  0058E8  6EDD               	movwf	postdec2,c
  7504                           
  7505                           ;class/gameParameters.c: 65:     s->y=0;
  7506  0058EA  EE20 F004          	lfsr	2,4
  7507  0058EE  5012               	movf	GameParameters_resetPos@s^0,w,c
  7508  0058F0  26D9               	addwf	fsr2l,f,c
  7509  0058F2  5013               	movf	(GameParameters_resetPos@s+1)^0,w,c
  7510  0058F4  22DA               	addwfc	fsr2h,f,c
  7511  0058F6  0E00               	movlw	0
  7512  0058F8  6EDE               	movwf	postinc2,c
  7513  0058FA  0E00               	movlw	0
  7514  0058FC  6EDD               	movwf	postdec2,c
  7515  0058FE  0012               	return		;funcret
  7516  005900                     __end_of_GameParameters_resetPos:
  7517                           	callstack 0
  7518                           
  7519 ;; *************** function _mooveBall *****************
  7520 ;; Defined at:
  7521 ;;		line 58 in file "gameFunction.c"
  7522 ;; Parameters:    Size  Location     Type
  7523 ;;  g               2   36[COMRAM] PTR struct GameParameter
  7524 ;;		 -> g1(240), 
  7525 ;; Auto vars:     Size  Location     Type
  7526 ;;		None
  7527 ;; Return value:  Size  Location     Type
  7528 ;;                  1    wreg      void 
  7529 ;; Registers used:
  7530 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7531 ;; Tracked objects:
  7532 ;;		On entry : 0/0
  7533 ;;		On exit  : 0/0
  7534 ;;		Unchanged: 0/0
  7535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7536 ;;      Params:         2       0       0       0       0       0       0
  7537 ;;      Locals:         0       0       0       0       0       0       0
  7538 ;;      Temps:          0       0       0       0       0       0       0
  7539 ;;      Totals:         2       0       0       0       0       0       0
  7540 ;;Total ram usage:        2 bytes
  7541 ;; Hardware stack levels used: 1
  7542 ;; Hardware stack levels required when called: 7
  7543 ;; This function calls:
  7544 ;;		_Ball_Update
  7545 ;;		_XF_pushEvent
  7546 ;;		_checkCollision
  7547 ;; This function is called by:
  7548 ;;		_gameControllerController
  7549 ;; This function uses a non-reentrant model
  7550 ;;
  7551                           
  7552                           	psect	text28
  7553  005816                     __ptext28:
  7554                           	callstack 0
  7555  005816                     _mooveBall:
  7556                           	callstack 19
  7557                           
  7558                           ;gameFunction.c: 58: void mooveBall(GameParameters* g);gameFunction.c: 59: {;gameFunctio
      +                          n.c: 60:     checkCollision(g);
  7559                           
  7560                           ;incstack = 0
  7561  005816  C025  F01B         	movff	mooveBall@g,checkCollision@g
  7562  00581A  C026  F01C         	movff	mooveBall@g+1,checkCollision@g+1
  7563  00581E  EC38  F000         	call	_checkCollision	;wreg free
  7564                           
  7565                           ;gameFunction.c: 61:     Ball_Update(&g->b);
  7566  005822  0ECA               	movlw	202
  7567  005824  2425               	addwf	mooveBall@g^0,w,c
  7568  005826  6E12               	movwf	Ball_Update@b^0,c
  7569  005828  0E00               	movlw	0
  7570  00582A  2026               	addwfc	(mooveBall@g+1)^0,w,c
  7571  00582C  6E13               	movwf	(Ball_Update@b+1)^0,c
  7572  00582E  EC4B  F028         	call	_Ball_Update	;wreg free
  7573                           
  7574                           ;gameFunction.c: 62:     XF_pushEvent(evRedrawBall,0);
  7575  005832  0E00               	movlw	0
  7576  005834  6E18               	movwf	XF_pushEvent@inISR^0,c
  7577  005836  0E0D               	movlw	13
  7578  005838  ECD6  F029         	call	_XF_pushEvent
  7579                           
  7580                           ;gameFunction.c: 63:     XF_pushEvent(evRedrawScore,0);
  7581  00583C  0E00               	movlw	0
  7582  00583E  6E18               	movwf	XF_pushEvent@inISR^0,c
  7583  005840  0E0E               	movlw	14
  7584  005842  ECD6  F029         	call	_XF_pushEvent
  7585  005846  0012               	return		;funcret
  7586  005848                     __end_of_mooveBall:
  7587                           	callstack 0
  7588                           
  7589 ;; *************** function _checkCollision *****************
  7590 ;; Defined at:
  7591 ;;		line 69 in file "gameFunction.c"
  7592 ;; Parameters:    Size  Location     Type
  7593 ;;  g               2   26[COMRAM] PTR struct GameParameter
  7594 ;;		 -> g1(240), 
  7595 ;; Auto vars:     Size  Location     Type
  7596 ;;  s              20    0        unsigned char [20]
  7597 ;; Return value:  Size  Location     Type
  7598 ;;                  1    wreg      void 
  7599 ;; Registers used:
  7600 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7601 ;; Tracked objects:
  7602 ;;		On entry : 0/0
  7603 ;;		On exit  : 0/0
  7604 ;;		Unchanged: 0/0
  7605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7606 ;;      Params:         2       0       0       0       0       0       0
  7607 ;;      Locals:         0       0       0       0       0       0       0
  7608 ;;      Temps:          8       0       0       0       0       0       0
  7609 ;;      Totals:        10       0       0       0       0       0       0
  7610 ;;Total ram usage:       10 bytes
  7611 ;; Hardware stack levels used: 1
  7612 ;; Hardware stack levels required when called: 6
  7613 ;; This function calls:
  7614 ;;		_XF_pushEvent
  7615 ;; This function is called by:
  7616 ;;		_mooveBall
  7617 ;; This function uses a non-reentrant model
  7618 ;;
  7619                           
  7620                           	psect	text29
  7621  000070                     __ptext29:
  7622                           	callstack 0
  7623  000070                     _checkCollision:
  7624                           	callstack 19
  7625                           
  7626                           ;gameFunction.c: 69: void checkCollision(GameParameters* g);gameFunction.c: 70: {;gameFu
      +                          nction.c: 71:     char s[20];;gameFunction.c: 73:     if(g->b.x+g->b.dx+8>=239)
  7627                           
  7628                           ;incstack = 0
  7629  000070  EE20 F0D2          	lfsr	2,210
  7630  000074  501B               	movf	checkCollision@g^0,w,c
  7631  000076  26D9               	addwf	fsr2l,f,c
  7632  000078  501C               	movf	(checkCollision@g+1)^0,w,c
  7633  00007A  22DA               	addwfc	fsr2h,f,c
  7634  00007C  CFDE F01D          	movff	postinc2,??_checkCollision
  7635  000080  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7636  000084  EE20 F0CA          	lfsr	2,202
  7637  000088  501B               	movf	checkCollision@g^0,w,c
  7638  00008A  26D9               	addwf	fsr2l,f,c
  7639  00008C  501C               	movf	(checkCollision@g+1)^0,w,c
  7640  00008E  22DA               	addwfc	fsr2h,f,c
  7641  000090  CFDE F01F          	movff	postinc2,??_checkCollision+2
  7642  000094  CFDD F020          	movff	postdec2,??_checkCollision+3
  7643  000098  501D               	movf	??_checkCollision^0,w,c
  7644  00009A  261F               	addwf	(??_checkCollision+2)^0,f,c
  7645  00009C  501E               	movf	(??_checkCollision+1)^0,w,c
  7646  00009E  2220               	addwfc	(??_checkCollision+3)^0,f,c
  7647  0000A0  0E08               	movlw	8
  7648  0000A2  261F               	addwf	(??_checkCollision+2)^0,f,c
  7649  0000A4  0E00               	movlw	0
  7650  0000A6  2220               	addwfc	(??_checkCollision+3)^0,f,c
  7651  0000A8  5020               	movf	(??_checkCollision+3)^0,w,c
  7652  0000AA  E104               	bnz	u4100
  7653  0000AC  0EEF               	movlw	239
  7654  0000AE  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  7655  0000B0  A0D8               	btfss	status,0,c
  7656  0000B2  D02C               	goto	l824
  7657  0000B4                     u4100:
  7658                           
  7659                           ;gameFunction.c: 74:     {;gameFunction.c: 75:         g->b.dx=-g->b.dx;
  7660  0000B4  EE20 F0D2          	lfsr	2,210
  7661  0000B8  501B               	movf	checkCollision@g^0,w,c
  7662  0000BA  26D9               	addwf	fsr2l,f,c
  7663  0000BC  501C               	movf	(checkCollision@g+1)^0,w,c
  7664  0000BE  22DA               	addwfc	fsr2h,f,c
  7665  0000C0  CFDE F01D          	movff	postinc2,??_checkCollision
  7666  0000C4  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7667  0000C8  1E1D               	comf	??_checkCollision^0,f,c
  7668  0000CA  1E1E               	comf	(??_checkCollision+1)^0,f,c
  7669  0000CC  4A1D               	infsnz	??_checkCollision^0,f,c
  7670  0000CE  2A1E               	incf	(??_checkCollision+1)^0,f,c
  7671  0000D0  EE20 F0D2          	lfsr	2,210
  7672  0000D4  501B               	movf	checkCollision@g^0,w,c
  7673  0000D6  26D9               	addwf	fsr2l,f,c
  7674  0000D8  501C               	movf	(checkCollision@g+1)^0,w,c
  7675  0000DA  22DA               	addwfc	fsr2h,f,c
  7676  0000DC  C01D  FFDE         	movff	??_checkCollision,postinc2
  7677  0000E0  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  7678                           
  7679                           ;gameFunction.c: 76:         g->b.x+=g->b.dx;
  7680  0000E4  EE20 F0D2          	lfsr	2,210
  7681  0000E8  501B               	movf	checkCollision@g^0,w,c
  7682  0000EA  26D9               	addwf	fsr2l,f,c
  7683  0000EC  501C               	movf	(checkCollision@g+1)^0,w,c
  7684  0000EE  22DA               	addwfc	fsr2h,f,c
  7685  0000F0  CFDE F01D          	movff	postinc2,??_checkCollision
  7686  0000F4  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7687  0000F8  EE20 F0CA          	lfsr	2,202
  7688  0000FC  501B               	movf	checkCollision@g^0,w,c
  7689  0000FE  26D9               	addwf	fsr2l,f,c
  7690  000100  501C               	movf	(checkCollision@g+1)^0,w,c
  7691  000102  22DA               	addwfc	fsr2h,f,c
  7692  000104  501D               	movf	??_checkCollision^0,w,c
  7693  000106  26DE               	addwf	postinc2,f,c
  7694  000108  501E               	movf	(??_checkCollision+1)^0,w,c
  7695  00010A  22DD               	addwfc	postdec2,f,c
  7696  00010C                     l824:
  7697                           
  7698                           ;gameFunction.c: 78:     if((int)(g->b.x+g->b.dx-8)<=1)
  7699  00010C  0EF8               	movlw	248
  7700  00010E  6E1D               	movwf	??_checkCollision^0,c
  7701  000110  0EFF               	movlw	255
  7702  000112  6E1E               	movwf	(??_checkCollision+1)^0,c
  7703  000114  EE20 F0D2          	lfsr	2,210
  7704  000118  501B               	movf	checkCollision@g^0,w,c
  7705  00011A  26D9               	addwf	fsr2l,f,c
  7706  00011C  501C               	movf	(checkCollision@g+1)^0,w,c
  7707  00011E  22DA               	addwfc	fsr2h,f,c
  7708  000120  CFDE F01F          	movff	postinc2,??_checkCollision+2
  7709  000124  CFDD F020          	movff	postdec2,??_checkCollision+3
  7710  000128  EE20 F0CA          	lfsr	2,202
  7711  00012C  501B               	movf	checkCollision@g^0,w,c
  7712  00012E  26D9               	addwf	fsr2l,f,c
  7713  000130  501C               	movf	(checkCollision@g+1)^0,w,c
  7714  000132  22DA               	addwfc	fsr2h,f,c
  7715  000134  CFDE F021          	movff	postinc2,??_checkCollision+4
  7716  000138  CFDD F022          	movff	postdec2,??_checkCollision+5
  7717  00013C  501F               	movf	(??_checkCollision+2)^0,w,c
  7718  00013E  2621               	addwf	(??_checkCollision+4)^0,f,c
  7719  000140  5020               	movf	(??_checkCollision+3)^0,w,c
  7720  000142  2222               	addwfc	(??_checkCollision+5)^0,f,c
  7721  000144  501D               	movf	??_checkCollision^0,w,c
  7722  000146  2621               	addwf	(??_checkCollision+4)^0,f,c
  7723  000148  501E               	movf	(??_checkCollision+1)^0,w,c
  7724  00014A  2222               	addwfc	(??_checkCollision+5)^0,f,c
  7725  00014C  BE22               	btfsc	(??_checkCollision+5)^0,7,c
  7726  00014E  D006               	goto	u4110
  7727  000150  5022               	movf	(??_checkCollision+5)^0,w,c
  7728  000152  E130               	bnz	l825
  7729  000154  0E02               	movlw	2
  7730  000156  5C21               	subwf	(??_checkCollision+4)^0,w,c
  7731  000158  B0D8               	btfsc	status,0,c
  7732  00015A  D02C               	goto	l825
  7733  00015C                     u4110:
  7734                           
  7735                           ;gameFunction.c: 79:     {;gameFunction.c: 80:         g->b.dx=-g->b.dx;
  7736  00015C  EE20 F0D2          	lfsr	2,210
  7737  000160  501B               	movf	checkCollision@g^0,w,c
  7738  000162  26D9               	addwf	fsr2l,f,c
  7739  000164  501C               	movf	(checkCollision@g+1)^0,w,c
  7740  000166  22DA               	addwfc	fsr2h,f,c
  7741  000168  CFDE F01D          	movff	postinc2,??_checkCollision
  7742  00016C  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7743  000170  1E1D               	comf	??_checkCollision^0,f,c
  7744  000172  1E1E               	comf	(??_checkCollision+1)^0,f,c
  7745  000174  4A1D               	infsnz	??_checkCollision^0,f,c
  7746  000176  2A1E               	incf	(??_checkCollision+1)^0,f,c
  7747  000178  EE20 F0D2          	lfsr	2,210
  7748  00017C  501B               	movf	checkCollision@g^0,w,c
  7749  00017E  26D9               	addwf	fsr2l,f,c
  7750  000180  501C               	movf	(checkCollision@g+1)^0,w,c
  7751  000182  22DA               	addwfc	fsr2h,f,c
  7752  000184  C01D  FFDE         	movff	??_checkCollision,postinc2
  7753  000188  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  7754                           
  7755                           ;gameFunction.c: 81:         g->b.x+=g->b.dx;
  7756  00018C  EE20 F0D2          	lfsr	2,210
  7757  000190  501B               	movf	checkCollision@g^0,w,c
  7758  000192  26D9               	addwf	fsr2l,f,c
  7759  000194  501C               	movf	(checkCollision@g+1)^0,w,c
  7760  000196  22DA               	addwfc	fsr2h,f,c
  7761  000198  CFDE F01D          	movff	postinc2,??_checkCollision
  7762  00019C  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7763  0001A0  EE20 F0CA          	lfsr	2,202
  7764  0001A4  501B               	movf	checkCollision@g^0,w,c
  7765  0001A6  26D9               	addwf	fsr2l,f,c
  7766  0001A8  501C               	movf	(checkCollision@g+1)^0,w,c
  7767  0001AA  22DA               	addwfc	fsr2h,f,c
  7768  0001AC  501D               	movf	??_checkCollision^0,w,c
  7769  0001AE  26DE               	addwf	postinc2,f,c
  7770  0001B0  501E               	movf	(??_checkCollision+1)^0,w,c
  7771  0001B2  22DD               	addwfc	postdec2,f,c
  7772  0001B4                     l825:
  7773                           
  7774                           ;gameFunction.c: 84:     if(g->b.y+8==g->p1.y-1)
  7775  0001B4  0EFF               	movlw	255
  7776  0001B6  6E1D               	movwf	??_checkCollision^0,c
  7777  0001B8  0EFF               	movlw	255
  7778  0001BA  6E1E               	movwf	(??_checkCollision+1)^0,c
  7779  0001BC  EE20 F0D8          	lfsr	2,216
  7780  0001C0  501B               	movf	checkCollision@g^0,w,c
  7781  0001C2  26D9               	addwf	fsr2l,f,c
  7782  0001C4  501C               	movf	(checkCollision@g+1)^0,w,c
  7783  0001C6  22DA               	addwfc	fsr2h,f,c
  7784  0001C8  CFDE F01F          	movff	postinc2,??_checkCollision+2
  7785  0001CC  CFDD F020          	movff	postdec2,??_checkCollision+3
  7786  0001D0  501D               	movf	??_checkCollision^0,w,c
  7787  0001D2  261F               	addwf	(??_checkCollision+2)^0,f,c
  7788  0001D4  501E               	movf	(??_checkCollision+1)^0,w,c
  7789  0001D6  2220               	addwfc	(??_checkCollision+3)^0,f,c
  7790  0001D8  EE20 F0CC          	lfsr	2,204
  7791  0001DC  501B               	movf	checkCollision@g^0,w,c
  7792  0001DE  26D9               	addwf	fsr2l,f,c
  7793  0001E0  501C               	movf	(checkCollision@g+1)^0,w,c
  7794  0001E2  22DA               	addwfc	fsr2h,f,c
  7795  0001E4  CFDE F021          	movff	postinc2,??_checkCollision+4
  7796  0001E8  CFDD F022          	movff	postdec2,??_checkCollision+5
  7797  0001EC  0E08               	movlw	8
  7798  0001EE  2621               	addwf	(??_checkCollision+4)^0,f,c
  7799  0001F0  0E00               	movlw	0
  7800  0001F2  2222               	addwfc	(??_checkCollision+5)^0,f,c
  7801  0001F4  501F               	movf	(??_checkCollision+2)^0,w,c
  7802  0001F6  1821               	xorwf	(??_checkCollision+4)^0,w,c
  7803  0001F8  E103               	bnz	u4121
  7804  0001FA  5020               	movf	(??_checkCollision+3)^0,w,c
  7805  0001FC  1822               	xorwf	(??_checkCollision+5)^0,w,c
  7806  0001FE  A4D8               	btfss	status,2,c
  7807  000200                     u4121:
  7808  000200  D17D               	goto	l6768
  7809                           
  7810                           ;gameFunction.c: 85:     {;gameFunction.c: 86:         if(g->b.x+8>g->p1.x)
  7811  000202  EE20 F0CA          	lfsr	2,202
  7812  000206  501B               	movf	checkCollision@g^0,w,c
  7813  000208  26D9               	addwf	fsr2l,f,c
  7814  00020A  501C               	movf	(checkCollision@g+1)^0,w,c
  7815  00020C  22DA               	addwfc	fsr2h,f,c
  7816  00020E  CFDE F01D          	movff	postinc2,??_checkCollision
  7817  000212  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7818  000216  0E08               	movlw	8
  7819  000218  261D               	addwf	??_checkCollision^0,f,c
  7820  00021A  0E00               	movlw	0
  7821  00021C  221E               	addwfc	(??_checkCollision+1)^0,f,c
  7822  00021E  EE20 F0D6          	lfsr	2,214
  7823  000222  501B               	movf	checkCollision@g^0,w,c
  7824  000224  26D9               	addwf	fsr2l,f,c
  7825  000226  501C               	movf	(checkCollision@g+1)^0,w,c
  7826  000228  22DA               	addwfc	fsr2h,f,c
  7827  00022A  501D               	movf	??_checkCollision^0,w,c
  7828  00022C  5CDE               	subwf	postinc2,w,c
  7829  00022E  501E               	movf	(??_checkCollision+1)^0,w,c
  7830  000230  58DE               	subwfb	postinc2,w,c
  7831  000232  B0D8               	btfsc	status,0,c
  7832  000234  D163               	goto	l6768
  7833                           
  7834                           ;gameFunction.c: 87:         {;gameFunction.c: 88:             if(g->b.x-8<g->p1.x+50)
  7835  000236  EE20 F0D6          	lfsr	2,214
  7836  00023A  501B               	movf	checkCollision@g^0,w,c
  7837  00023C  26D9               	addwf	fsr2l,f,c
  7838  00023E  501C               	movf	(checkCollision@g+1)^0,w,c
  7839  000240  22DA               	addwfc	fsr2h,f,c
  7840  000242  CFDE F01D          	movff	postinc2,??_checkCollision
  7841  000246  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7842  00024A  0E32               	movlw	50
  7843  00024C  261D               	addwf	??_checkCollision^0,f,c
  7844  00024E  0E00               	movlw	0
  7845  000250  221E               	addwfc	(??_checkCollision+1)^0,f,c
  7846  000252  0EF8               	movlw	248
  7847  000254  6E1F               	movwf	(??_checkCollision+2)^0,c
  7848  000256  0EFF               	movlw	255
  7849  000258  6E20               	movwf	(??_checkCollision+3)^0,c
  7850  00025A  EE20 F0CA          	lfsr	2,202
  7851  00025E  501B               	movf	checkCollision@g^0,w,c
  7852  000260  26D9               	addwf	fsr2l,f,c
  7853  000262  501C               	movf	(checkCollision@g+1)^0,w,c
  7854  000264  22DA               	addwfc	fsr2h,f,c
  7855  000266  CFDE F021          	movff	postinc2,??_checkCollision+4
  7856  00026A  CFDD F022          	movff	postdec2,??_checkCollision+5
  7857  00026E  501F               	movf	(??_checkCollision+2)^0,w,c
  7858  000270  2621               	addwf	(??_checkCollision+4)^0,f,c
  7859  000272  5020               	movf	(??_checkCollision+3)^0,w,c
  7860  000274  2222               	addwfc	(??_checkCollision+5)^0,f,c
  7861  000276  501D               	movf	??_checkCollision^0,w,c
  7862  000278  5C21               	subwf	(??_checkCollision+4)^0,w,c
  7863  00027A  501E               	movf	(??_checkCollision+1)^0,w,c
  7864  00027C  5822               	subwfb	(??_checkCollision+5)^0,w,c
  7865  00027E  B0D8               	btfsc	status,0,c
  7866  000280  D13D               	goto	l6768
  7867                           
  7868                           ;gameFunction.c: 89:             {;gameFunction.c: 91:                 if(g->b.x-g->p1.x
      +                          <10)
  7869  000282  EE20 F0D6          	lfsr	2,214
  7870  000286  501B               	movf	checkCollision@g^0,w,c
  7871  000288  26D9               	addwf	fsr2l,f,c
  7872  00028A  501C               	movf	(checkCollision@g+1)^0,w,c
  7873  00028C  22DA               	addwfc	fsr2h,f,c
  7874  00028E  CFDE F01D          	movff	postinc2,??_checkCollision
  7875  000292  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7876  000296  EE20 F0CA          	lfsr	2,202
  7877  00029A  501B               	movf	checkCollision@g^0,w,c
  7878  00029C  26D9               	addwf	fsr2l,f,c
  7879  00029E  501C               	movf	(checkCollision@g+1)^0,w,c
  7880  0002A0  22DA               	addwfc	fsr2h,f,c
  7881  0002A2  CFDE F01F          	movff	postinc2,??_checkCollision+2
  7882  0002A6  CFDD F020          	movff	postdec2,??_checkCollision+3
  7883  0002AA  501D               	movf	??_checkCollision^0,w,c
  7884  0002AC  5E1F               	subwf	(??_checkCollision+2)^0,f,c
  7885  0002AE  501E               	movf	(??_checkCollision+1)^0,w,c
  7886  0002B0  5A20               	subwfb	(??_checkCollision+3)^0,f,c
  7887  0002B2  5020               	movf	(??_checkCollision+3)^0,w,c
  7888  0002B4  E126               	bnz	l6752
  7889  0002B6  0E0A               	movlw	10
  7890  0002B8  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  7891  0002BA  B0D8               	btfsc	status,0,c
  7892  0002BC  D022               	goto	l6752
  7893                           
  7894                           ;gameFunction.c: 92:                 {;gameFunction.c: 94:                     g->b.dy=-
      +                          g->b.dy;
  7895  0002BE  EE20 F0D4          	lfsr	2,212
  7896  0002C2  501B               	movf	checkCollision@g^0,w,c
  7897  0002C4  26D9               	addwf	fsr2l,f,c
  7898  0002C6  501C               	movf	(checkCollision@g+1)^0,w,c
  7899  0002C8  22DA               	addwfc	fsr2h,f,c
  7900  0002CA  CFDE F01D          	movff	postinc2,??_checkCollision
  7901  0002CE  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7902  0002D2  1E1D               	comf	??_checkCollision^0,f,c
  7903  0002D4  1E1E               	comf	(??_checkCollision+1)^0,f,c
  7904  0002D6  4A1D               	infsnz	??_checkCollision^0,f,c
  7905  0002D8  2A1E               	incf	(??_checkCollision+1)^0,f,c
  7906  0002DA  EE20 F0D4          	lfsr	2,212
  7907  0002DE  501B               	movf	checkCollision@g^0,w,c
  7908  0002E0  26D9               	addwf	fsr2l,f,c
  7909  0002E2  501C               	movf	(checkCollision@g+1)^0,w,c
  7910  0002E4  22DA               	addwfc	fsr2h,f,c
  7911  0002E6  C01D  FFDE         	movff	??_checkCollision,postinc2
  7912  0002EA  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  7913                           
  7914                           ;gameFunction.c: 95:                     g->b.dx-=2;
  7915  0002EE  EE20 F0D2          	lfsr	2,210
  7916  0002F2  501B               	movf	checkCollision@g^0,w,c
  7917  0002F4  26D9               	addwf	fsr2l,f,c
  7918  0002F6  501C               	movf	(checkCollision@g+1)^0,w,c
  7919  0002F8  22DA               	addwfc	fsr2h,f,c
  7920  0002FA  0EFE               	movlw	254
  7921  0002FC  26DE               	addwf	postinc2,f,c
  7922  0002FE  0EFF               	movlw	255
  7923  000300  D0EE               	goto	L3
  7924  000302                     l6752:
  7925  000302  EE20 F0D6          	lfsr	2,214
  7926  000306  501B               	movf	checkCollision@g^0,w,c
  7927  000308  26D9               	addwf	fsr2l,f,c
  7928  00030A  501C               	movf	(checkCollision@g+1)^0,w,c
  7929  00030C  22DA               	addwfc	fsr2h,f,c
  7930  00030E  CFDE F01D          	movff	postinc2,??_checkCollision
  7931  000312  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7932  000316  EE20 F0CA          	lfsr	2,202
  7933  00031A  501B               	movf	checkCollision@g^0,w,c
  7934  00031C  26D9               	addwf	fsr2l,f,c
  7935  00031E  501C               	movf	(checkCollision@g+1)^0,w,c
  7936  000320  22DA               	addwfc	fsr2h,f,c
  7937  000322  CFDE F01F          	movff	postinc2,??_checkCollision+2
  7938  000326  CFDD F020          	movff	postdec2,??_checkCollision+3
  7939  00032A  501D               	movf	??_checkCollision^0,w,c
  7940  00032C  5E1F               	subwf	(??_checkCollision+2)^0,f,c
  7941  00032E  501E               	movf	(??_checkCollision+1)^0,w,c
  7942  000330  5A20               	subwfb	(??_checkCollision+3)^0,f,c
  7943  000332  5020               	movf	(??_checkCollision+3)^0,w,c
  7944  000334  E126               	bnz	l6756
  7945  000336  0E14               	movlw	20
  7946  000338  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  7947  00033A  B0D8               	btfsc	status,0,c
  7948  00033C  D022               	goto	l6756
  7949                           
  7950                           ;gameFunction.c: 98:                 {;gameFunction.c: 100:                     g->b.dy=
      +                          -g->b.dy;
  7951  00033E  EE20 F0D4          	lfsr	2,212
  7952  000342  501B               	movf	checkCollision@g^0,w,c
  7953  000344  26D9               	addwf	fsr2l,f,c
  7954  000346  501C               	movf	(checkCollision@g+1)^0,w,c
  7955  000348  22DA               	addwfc	fsr2h,f,c
  7956  00034A  CFDE F01D          	movff	postinc2,??_checkCollision
  7957  00034E  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7958  000352  1E1D               	comf	??_checkCollision^0,f,c
  7959  000354  1E1E               	comf	(??_checkCollision+1)^0,f,c
  7960  000356  4A1D               	infsnz	??_checkCollision^0,f,c
  7961  000358  2A1E               	incf	(??_checkCollision+1)^0,f,c
  7962  00035A  EE20 F0D4          	lfsr	2,212
  7963  00035E  501B               	movf	checkCollision@g^0,w,c
  7964  000360  26D9               	addwf	fsr2l,f,c
  7965  000362  501C               	movf	(checkCollision@g+1)^0,w,c
  7966  000364  22DA               	addwfc	fsr2h,f,c
  7967  000366  C01D  FFDE         	movff	??_checkCollision,postinc2
  7968  00036A  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  7969                           
  7970                           ;gameFunction.c: 101:                     g->b.dx-=1;
  7971  00036E  EE20 F0D2          	lfsr	2,210
  7972  000372  501B               	movf	checkCollision@g^0,w,c
  7973  000374  26D9               	addwf	fsr2l,f,c
  7974  000376  501C               	movf	(checkCollision@g+1)^0,w,c
  7975  000378  22DA               	addwfc	fsr2h,f,c
  7976  00037A  06DE               	decf	postinc2,f,c
  7977  00037C  0E00               	movlw	0
  7978  00037E  5ADD               	subwfb	postdec2,f,c
  7979                           
  7980                           ;gameFunction.c: 102:                 }
  7981  000380  D0AF               	goto	l830
  7982  000382                     l6756:
  7983  000382  EE20 F0D6          	lfsr	2,214
  7984  000386  501B               	movf	checkCollision@g^0,w,c
  7985  000388  26D9               	addwf	fsr2l,f,c
  7986  00038A  501C               	movf	(checkCollision@g+1)^0,w,c
  7987  00038C  22DA               	addwfc	fsr2h,f,c
  7988  00038E  CFDE F01D          	movff	postinc2,??_checkCollision
  7989  000392  CFDD F01E          	movff	postdec2,??_checkCollision+1
  7990  000396  EE20 F0CA          	lfsr	2,202
  7991  00039A  501B               	movf	checkCollision@g^0,w,c
  7992  00039C  26D9               	addwf	fsr2l,f,c
  7993  00039E  501C               	movf	(checkCollision@g+1)^0,w,c
  7994  0003A0  22DA               	addwfc	fsr2h,f,c
  7995  0003A2  CFDE F01F          	movff	postinc2,??_checkCollision+2
  7996  0003A6  CFDD F020          	movff	postdec2,??_checkCollision+3
  7997  0003AA  501D               	movf	??_checkCollision^0,w,c
  7998  0003AC  5E1F               	subwf	(??_checkCollision+2)^0,f,c
  7999  0003AE  501E               	movf	(??_checkCollision+1)^0,w,c
  8000  0003B0  5A20               	subwfb	(??_checkCollision+3)^0,f,c
  8001  0003B2  5020               	movf	(??_checkCollision+3)^0,w,c
  8002  0003B4  E135               	bnz	l6760
  8003  0003B6  0E1E               	movlw	30
  8004  0003B8  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  8005  0003BA  B0D8               	btfsc	status,0,c
  8006  0003BC  D031               	goto	l6760
  8007                           
  8008                           ;gameFunction.c: 104:                 {;gameFunction.c: 106:                     g->b.dx
      +                          =-g->b.dx;
  8009  0003BE  EE20 F0D2          	lfsr	2,210
  8010  0003C2  501B               	movf	checkCollision@g^0,w,c
  8011  0003C4  26D9               	addwf	fsr2l,f,c
  8012  0003C6  501C               	movf	(checkCollision@g+1)^0,w,c
  8013  0003C8  22DA               	addwfc	fsr2h,f,c
  8014  0003CA  CFDE F01D          	movff	postinc2,??_checkCollision
  8015  0003CE  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8016  0003D2  1E1D               	comf	??_checkCollision^0,f,c
  8017  0003D4  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8018  0003D6  4A1D               	infsnz	??_checkCollision^0,f,c
  8019  0003D8  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8020  0003DA  EE20 F0D2          	lfsr	2,210
  8021  0003DE  501B               	movf	checkCollision@g^0,w,c
  8022  0003E0  26D9               	addwf	fsr2l,f,c
  8023  0003E2  501C               	movf	(checkCollision@g+1)^0,w,c
  8024  0003E4  22DA               	addwfc	fsr2h,f,c
  8025  0003E6  C01D  FFDE         	movff	??_checkCollision,postinc2
  8026  0003EA  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8027                           
  8028                           ;gameFunction.c: 107:                     g->b.dy=-g->b.dy;
  8029  0003EE  EE20 F0D4          	lfsr	2,212
  8030  0003F2  501B               	movf	checkCollision@g^0,w,c
  8031  0003F4  26D9               	addwf	fsr2l,f,c
  8032  0003F6  501C               	movf	(checkCollision@g+1)^0,w,c
  8033  0003F8  22DA               	addwfc	fsr2h,f,c
  8034  0003FA  CFDE F01D          	movff	postinc2,??_checkCollision
  8035  0003FE  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8036  000402  1E1D               	comf	??_checkCollision^0,f,c
  8037  000404  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8038  000406  4A1D               	infsnz	??_checkCollision^0,f,c
  8039  000408  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8040  00040A  EE20 F0D4          	lfsr	2,212
  8041  00040E  501B               	movf	checkCollision@g^0,w,c
  8042  000410  26D9               	addwf	fsr2l,f,c
  8043  000412  501C               	movf	(checkCollision@g+1)^0,w,c
  8044  000414  22DA               	addwfc	fsr2h,f,c
  8045  000416  C01D  FFDE         	movff	??_checkCollision,postinc2
  8046  00041A  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8047                           
  8048                           ;gameFunction.c: 108:                 }
  8049  00041E  D060               	goto	l830
  8050  000420                     l6760:
  8051  000420  EE20 F0D6          	lfsr	2,214
  8052  000424  501B               	movf	checkCollision@g^0,w,c
  8053  000426  26D9               	addwf	fsr2l,f,c
  8054  000428  501C               	movf	(checkCollision@g+1)^0,w,c
  8055  00042A  22DA               	addwfc	fsr2h,f,c
  8056  00042C  CFDE F01D          	movff	postinc2,??_checkCollision
  8057  000430  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8058  000434  EE20 F0CA          	lfsr	2,202
  8059  000438  501B               	movf	checkCollision@g^0,w,c
  8060  00043A  26D9               	addwf	fsr2l,f,c
  8061  00043C  501C               	movf	(checkCollision@g+1)^0,w,c
  8062  00043E  22DA               	addwfc	fsr2h,f,c
  8063  000440  CFDE F01F          	movff	postinc2,??_checkCollision+2
  8064  000444  CFDD F020          	movff	postdec2,??_checkCollision+3
  8065  000448  501D               	movf	??_checkCollision^0,w,c
  8066  00044A  5E1F               	subwf	(??_checkCollision+2)^0,f,c
  8067  00044C  501E               	movf	(??_checkCollision+1)^0,w,c
  8068  00044E  5A20               	subwfb	(??_checkCollision+3)^0,f,c
  8069  000450  5020               	movf	(??_checkCollision+3)^0,w,c
  8070  000452  E124               	bnz	l6764
  8071  000454  0E28               	movlw	40
  8072  000456  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  8073  000458  B0D8               	btfsc	status,0,c
  8074  00045A  D020               	goto	l6764
  8075                           
  8076                           ;gameFunction.c: 110:                 {;gameFunction.c: 112:                     g->b.dy
      +                          =-g->b.dy;
  8077  00045C  EE20 F0D4          	lfsr	2,212
  8078  000460  501B               	movf	checkCollision@g^0,w,c
  8079  000462  26D9               	addwf	fsr2l,f,c
  8080  000464  501C               	movf	(checkCollision@g+1)^0,w,c
  8081  000466  22DA               	addwfc	fsr2h,f,c
  8082  000468  CFDE F01D          	movff	postinc2,??_checkCollision
  8083  00046C  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8084  000470  1E1D               	comf	??_checkCollision^0,f,c
  8085  000472  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8086  000474  4A1D               	infsnz	??_checkCollision^0,f,c
  8087  000476  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8088  000478  EE20 F0D4          	lfsr	2,212
  8089  00047C  501B               	movf	checkCollision@g^0,w,c
  8090  00047E  26D9               	addwf	fsr2l,f,c
  8091  000480  501C               	movf	(checkCollision@g+1)^0,w,c
  8092  000482  22DA               	addwfc	fsr2h,f,c
  8093  000484  C01D  FFDE         	movff	??_checkCollision,postinc2
  8094  000488  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8095                           
  8096                           ;gameFunction.c: 113:                     g->b.dx+=1;
  8097  00048C  EE20 F0D2          	lfsr	2,210
  8098  000490  501B               	movf	checkCollision@g^0,w,c
  8099  000492  26D9               	addwf	fsr2l,f,c
  8100  000494  501C               	movf	(checkCollision@g+1)^0,w,c
  8101  000496  22DA               	addwfc	fsr2h,f,c
  8102  000498  2ADE               	incf	postinc2,f,c
  8103  00049A  D020               	goto	L5
  8104  00049C                     l6764:
  8105                           
  8106                           ;gameFunction.c: 116:                 {;gameFunction.c: 118:                     g->b.dy
      +                          =-g->b.dy;
  8107  00049C  EE20 F0D4          	lfsr	2,212
  8108  0004A0  501B               	movf	checkCollision@g^0,w,c
  8109  0004A2  26D9               	addwf	fsr2l,f,c
  8110  0004A4  501C               	movf	(checkCollision@g+1)^0,w,c
  8111  0004A6  22DA               	addwfc	fsr2h,f,c
  8112  0004A8  CFDE F01D          	movff	postinc2,??_checkCollision
  8113  0004AC  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8114  0004B0  1E1D               	comf	??_checkCollision^0,f,c
  8115  0004B2  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8116  0004B4  4A1D               	infsnz	??_checkCollision^0,f,c
  8117  0004B6  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8118  0004B8  EE20 F0D4          	lfsr	2,212
  8119  0004BC  501B               	movf	checkCollision@g^0,w,c
  8120  0004BE  26D9               	addwf	fsr2l,f,c
  8121  0004C0  501C               	movf	(checkCollision@g+1)^0,w,c
  8122  0004C2  22DA               	addwfc	fsr2h,f,c
  8123  0004C4  C01D  FFDE         	movff	??_checkCollision,postinc2
  8124  0004C8  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8125                           
  8126                           ;gameFunction.c: 119:                     g->b.dx+=2;
  8127  0004CC  EE20 F0D2          	lfsr	2,210
  8128  0004D0  501B               	movf	checkCollision@g^0,w,c
  8129  0004D2  26D9               	addwf	fsr2l,f,c
  8130  0004D4  501C               	movf	(checkCollision@g+1)^0,w,c
  8131  0004D6  22DA               	addwfc	fsr2h,f,c
  8132  0004D8  0E02               	movlw	2
  8133  0004DA  26DE               	addwf	postinc2,f,c
  8134  0004DC                     L5:
  8135  0004DC  0E00               	movlw	0
  8136  0004DE                     L3:
  8137  0004DE  22DD               	addwfc	postdec2,f,c
  8138  0004E0                     l830:
  8139                           
  8140                           ;gameFunction.c: 123:                 g->s1.homeScore++;
  8141  0004E0  EE20 F0EA          	lfsr	2,234
  8142  0004E4  501B               	movf	checkCollision@g^0,w,c
  8143  0004E6  26D9               	addwf	fsr2l,f,c
  8144  0004E8  501C               	movf	(checkCollision@g+1)^0,w,c
  8145  0004EA  22DA               	addwfc	fsr2h,f,c
  8146  0004EC  2ADE               	incf	postinc2,f,c
  8147  0004EE  0E00               	movlw	0
  8148  0004F0  22DD               	addwfc	postdec2,f,c
  8149                           
  8150                           ;gameFunction.c: 124:                 XF_pushEvent(evRedrawScore,0);
  8151  0004F2  0E00               	movlw	0
  8152  0004F4  6E18               	movwf	XF_pushEvent@inISR^0,c
  8153  0004F6  0E0E               	movlw	14
  8154  0004F8  ECD6  F029         	call	_XF_pushEvent
  8155  0004FC                     l6768:
  8156                           
  8157                           ;gameFunction.c: 131:     if(g->b.y-8==g->p2.y+10 +1)
  8158  0004FC  EE20 F0E2          	lfsr	2,226
  8159  000500  501B               	movf	checkCollision@g^0,w,c
  8160  000502  26D9               	addwf	fsr2l,f,c
  8161  000504  501C               	movf	(checkCollision@g+1)^0,w,c
  8162  000506  22DA               	addwfc	fsr2h,f,c
  8163  000508  CFDE F01D          	movff	postinc2,??_checkCollision
  8164  00050C  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8165  000510  0E0B               	movlw	11
  8166  000512  261D               	addwf	??_checkCollision^0,f,c
  8167  000514  0E00               	movlw	0
  8168  000516  221E               	addwfc	(??_checkCollision+1)^0,f,c
  8169  000518  0EF8               	movlw	248
  8170  00051A  6E1F               	movwf	(??_checkCollision+2)^0,c
  8171  00051C  0EFF               	movlw	255
  8172  00051E  6E20               	movwf	(??_checkCollision+3)^0,c
  8173  000520  EE20 F0CC          	lfsr	2,204
  8174  000524  501B               	movf	checkCollision@g^0,w,c
  8175  000526  26D9               	addwf	fsr2l,f,c
  8176  000528  501C               	movf	(checkCollision@g+1)^0,w,c
  8177  00052A  22DA               	addwfc	fsr2h,f,c
  8178  00052C  CFDE F021          	movff	postinc2,??_checkCollision+4
  8179  000530  CFDD F022          	movff	postdec2,??_checkCollision+5
  8180  000534  501F               	movf	(??_checkCollision+2)^0,w,c
  8181  000536  2621               	addwf	(??_checkCollision+4)^0,f,c
  8182  000538  5020               	movf	(??_checkCollision+3)^0,w,c
  8183  00053A  2222               	addwfc	(??_checkCollision+5)^0,f,c
  8184  00053C  501D               	movf	??_checkCollision^0,w,c
  8185  00053E  1821               	xorwf	(??_checkCollision+4)^0,w,c
  8186  000540  E103               	bnz	u4191
  8187  000542  501E               	movf	(??_checkCollision+1)^0,w,c
  8188  000544  1822               	xorwf	(??_checkCollision+5)^0,w,c
  8189  000546  A4D8               	btfss	status,2,c
  8190  000548                     u4191:
  8191  000548  D17D               	goto	l6794
  8192                           
  8193                           ;gameFunction.c: 132:     {;gameFunction.c: 133:         if(g->b.x+8>g->p2.x)
  8194  00054A  EE20 F0CA          	lfsr	2,202
  8195  00054E  501B               	movf	checkCollision@g^0,w,c
  8196  000550  26D9               	addwf	fsr2l,f,c
  8197  000552  501C               	movf	(checkCollision@g+1)^0,w,c
  8198  000554  22DA               	addwfc	fsr2h,f,c
  8199  000556  CFDE F01D          	movff	postinc2,??_checkCollision
  8200  00055A  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8201  00055E  0E08               	movlw	8
  8202  000560  261D               	addwf	??_checkCollision^0,f,c
  8203  000562  0E00               	movlw	0
  8204  000564  221E               	addwfc	(??_checkCollision+1)^0,f,c
  8205  000566  EE20 F0E0          	lfsr	2,224
  8206  00056A  501B               	movf	checkCollision@g^0,w,c
  8207  00056C  26D9               	addwf	fsr2l,f,c
  8208  00056E  501C               	movf	(checkCollision@g+1)^0,w,c
  8209  000570  22DA               	addwfc	fsr2h,f,c
  8210  000572  501D               	movf	??_checkCollision^0,w,c
  8211  000574  5CDE               	subwf	postinc2,w,c
  8212  000576  501E               	movf	(??_checkCollision+1)^0,w,c
  8213  000578  58DE               	subwfb	postinc2,w,c
  8214  00057A  B0D8               	btfsc	status,0,c
  8215  00057C  D163               	goto	l6794
  8216                           
  8217                           ;gameFunction.c: 134:         {;gameFunction.c: 135:             if(g->b.x-8<g->p2.x+50)
  8218  00057E  EE20 F0E0          	lfsr	2,224
  8219  000582  501B               	movf	checkCollision@g^0,w,c
  8220  000584  26D9               	addwf	fsr2l,f,c
  8221  000586  501C               	movf	(checkCollision@g+1)^0,w,c
  8222  000588  22DA               	addwfc	fsr2h,f,c
  8223  00058A  CFDE F01D          	movff	postinc2,??_checkCollision
  8224  00058E  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8225  000592  0E32               	movlw	50
  8226  000594  261D               	addwf	??_checkCollision^0,f,c
  8227  000596  0E00               	movlw	0
  8228  000598  221E               	addwfc	(??_checkCollision+1)^0,f,c
  8229  00059A  0EF8               	movlw	248
  8230  00059C  6E1F               	movwf	(??_checkCollision+2)^0,c
  8231  00059E  0EFF               	movlw	255
  8232  0005A0  6E20               	movwf	(??_checkCollision+3)^0,c
  8233  0005A2  EE20 F0CA          	lfsr	2,202
  8234  0005A6  501B               	movf	checkCollision@g^0,w,c
  8235  0005A8  26D9               	addwf	fsr2l,f,c
  8236  0005AA  501C               	movf	(checkCollision@g+1)^0,w,c
  8237  0005AC  22DA               	addwfc	fsr2h,f,c
  8238  0005AE  CFDE F021          	movff	postinc2,??_checkCollision+4
  8239  0005B2  CFDD F022          	movff	postdec2,??_checkCollision+5
  8240  0005B6  501F               	movf	(??_checkCollision+2)^0,w,c
  8241  0005B8  2621               	addwf	(??_checkCollision+4)^0,f,c
  8242  0005BA  5020               	movf	(??_checkCollision+3)^0,w,c
  8243  0005BC  2222               	addwfc	(??_checkCollision+5)^0,f,c
  8244  0005BE  501D               	movf	??_checkCollision^0,w,c
  8245  0005C0  5C21               	subwf	(??_checkCollision+4)^0,w,c
  8246  0005C2  501E               	movf	(??_checkCollision+1)^0,w,c
  8247  0005C4  5822               	subwfb	(??_checkCollision+5)^0,w,c
  8248  0005C6  B0D8               	btfsc	status,0,c
  8249  0005C8  D13D               	goto	l6794
  8250                           
  8251                           ;gameFunction.c: 136:             {;gameFunction.c: 137:                 if(g->b.x-g->p2
      +                          .x<10)
  8252  0005CA  EE20 F0E0          	lfsr	2,224
  8253  0005CE  501B               	movf	checkCollision@g^0,w,c
  8254  0005D0  26D9               	addwf	fsr2l,f,c
  8255  0005D2  501C               	movf	(checkCollision@g+1)^0,w,c
  8256  0005D4  22DA               	addwfc	fsr2h,f,c
  8257  0005D6  CFDE F01D          	movff	postinc2,??_checkCollision
  8258  0005DA  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8259  0005DE  EE20 F0CA          	lfsr	2,202
  8260  0005E2  501B               	movf	checkCollision@g^0,w,c
  8261  0005E4  26D9               	addwf	fsr2l,f,c
  8262  0005E6  501C               	movf	(checkCollision@g+1)^0,w,c
  8263  0005E8  22DA               	addwfc	fsr2h,f,c
  8264  0005EA  CFDE F01F          	movff	postinc2,??_checkCollision+2
  8265  0005EE  CFDD F020          	movff	postdec2,??_checkCollision+3
  8266  0005F2  501D               	movf	??_checkCollision^0,w,c
  8267  0005F4  5E1F               	subwf	(??_checkCollision+2)^0,f,c
  8268  0005F6  501E               	movf	(??_checkCollision+1)^0,w,c
  8269  0005F8  5A20               	subwfb	(??_checkCollision+3)^0,f,c
  8270  0005FA  5020               	movf	(??_checkCollision+3)^0,w,c
  8271  0005FC  E126               	bnz	l6778
  8272  0005FE  0E0A               	movlw	10
  8273  000600  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  8274  000602  B0D8               	btfsc	status,0,c
  8275  000604  D022               	goto	l6778
  8276                           
  8277                           ;gameFunction.c: 138:                 {;gameFunction.c: 140:                     g->b.dy
      +                          =-g->b.dy;
  8278  000606  EE20 F0D4          	lfsr	2,212
  8279  00060A  501B               	movf	checkCollision@g^0,w,c
  8280  00060C  26D9               	addwf	fsr2l,f,c
  8281  00060E  501C               	movf	(checkCollision@g+1)^0,w,c
  8282  000610  22DA               	addwfc	fsr2h,f,c
  8283  000612  CFDE F01D          	movff	postinc2,??_checkCollision
  8284  000616  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8285  00061A  1E1D               	comf	??_checkCollision^0,f,c
  8286  00061C  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8287  00061E  4A1D               	infsnz	??_checkCollision^0,f,c
  8288  000620  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8289  000622  EE20 F0D4          	lfsr	2,212
  8290  000626  501B               	movf	checkCollision@g^0,w,c
  8291  000628  26D9               	addwf	fsr2l,f,c
  8292  00062A  501C               	movf	(checkCollision@g+1)^0,w,c
  8293  00062C  22DA               	addwfc	fsr2h,f,c
  8294  00062E  C01D  FFDE         	movff	??_checkCollision,postinc2
  8295  000632  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8296                           
  8297                           ;gameFunction.c: 141:                     g->b.dx-=2;
  8298  000636  EE20 F0D2          	lfsr	2,210
  8299  00063A  501B               	movf	checkCollision@g^0,w,c
  8300  00063C  26D9               	addwf	fsr2l,f,c
  8301  00063E  501C               	movf	(checkCollision@g+1)^0,w,c
  8302  000640  22DA               	addwfc	fsr2h,f,c
  8303  000642  0EFE               	movlw	254
  8304  000644  26DE               	addwf	postinc2,f,c
  8305  000646  0EFF               	movlw	255
  8306  000648  D0EE               	goto	L4
  8307  00064A                     l6778:
  8308  00064A  EE20 F0E0          	lfsr	2,224
  8309  00064E  501B               	movf	checkCollision@g^0,w,c
  8310  000650  26D9               	addwf	fsr2l,f,c
  8311  000652  501C               	movf	(checkCollision@g+1)^0,w,c
  8312  000654  22DA               	addwfc	fsr2h,f,c
  8313  000656  CFDE F01D          	movff	postinc2,??_checkCollision
  8314  00065A  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8315  00065E  EE20 F0CA          	lfsr	2,202
  8316  000662  501B               	movf	checkCollision@g^0,w,c
  8317  000664  26D9               	addwf	fsr2l,f,c
  8318  000666  501C               	movf	(checkCollision@g+1)^0,w,c
  8319  000668  22DA               	addwfc	fsr2h,f,c
  8320  00066A  CFDE F01F          	movff	postinc2,??_checkCollision+2
  8321  00066E  CFDD F020          	movff	postdec2,??_checkCollision+3
  8322  000672  501D               	movf	??_checkCollision^0,w,c
  8323  000674  5E1F               	subwf	(??_checkCollision+2)^0,f,c
  8324  000676  501E               	movf	(??_checkCollision+1)^0,w,c
  8325  000678  5A20               	subwfb	(??_checkCollision+3)^0,f,c
  8326  00067A  5020               	movf	(??_checkCollision+3)^0,w,c
  8327  00067C  E126               	bnz	l6782
  8328  00067E  0E14               	movlw	20
  8329  000680  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  8330  000682  B0D8               	btfsc	status,0,c
  8331  000684  D022               	goto	l6782
  8332                           
  8333                           ;gameFunction.c: 144:                 {;gameFunction.c: 146:                     g->b.dy
      +                          =-g->b.dy;
  8334  000686  EE20 F0D4          	lfsr	2,212
  8335  00068A  501B               	movf	checkCollision@g^0,w,c
  8336  00068C  26D9               	addwf	fsr2l,f,c
  8337  00068E  501C               	movf	(checkCollision@g+1)^0,w,c
  8338  000690  22DA               	addwfc	fsr2h,f,c
  8339  000692  CFDE F01D          	movff	postinc2,??_checkCollision
  8340  000696  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8341  00069A  1E1D               	comf	??_checkCollision^0,f,c
  8342  00069C  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8343  00069E  4A1D               	infsnz	??_checkCollision^0,f,c
  8344  0006A0  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8345  0006A2  EE20 F0D4          	lfsr	2,212
  8346  0006A6  501B               	movf	checkCollision@g^0,w,c
  8347  0006A8  26D9               	addwf	fsr2l,f,c
  8348  0006AA  501C               	movf	(checkCollision@g+1)^0,w,c
  8349  0006AC  22DA               	addwfc	fsr2h,f,c
  8350  0006AE  C01D  FFDE         	movff	??_checkCollision,postinc2
  8351  0006B2  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8352                           
  8353                           ;gameFunction.c: 147:                     g->b.dx-=1;
  8354  0006B6  EE20 F0D2          	lfsr	2,210
  8355  0006BA  501B               	movf	checkCollision@g^0,w,c
  8356  0006BC  26D9               	addwf	fsr2l,f,c
  8357  0006BE  501C               	movf	(checkCollision@g+1)^0,w,c
  8358  0006C0  22DA               	addwfc	fsr2h,f,c
  8359  0006C2  06DE               	decf	postinc2,f,c
  8360  0006C4  0E00               	movlw	0
  8361  0006C6  5ADD               	subwfb	postdec2,f,c
  8362                           
  8363                           ;gameFunction.c: 148:                 }
  8364  0006C8  D0AF               	goto	l841
  8365  0006CA                     l6782:
  8366  0006CA  EE20 F0E0          	lfsr	2,224
  8367  0006CE  501B               	movf	checkCollision@g^0,w,c
  8368  0006D0  26D9               	addwf	fsr2l,f,c
  8369  0006D2  501C               	movf	(checkCollision@g+1)^0,w,c
  8370  0006D4  22DA               	addwfc	fsr2h,f,c
  8371  0006D6  CFDE F01D          	movff	postinc2,??_checkCollision
  8372  0006DA  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8373  0006DE  EE20 F0CA          	lfsr	2,202
  8374  0006E2  501B               	movf	checkCollision@g^0,w,c
  8375  0006E4  26D9               	addwf	fsr2l,f,c
  8376  0006E6  501C               	movf	(checkCollision@g+1)^0,w,c
  8377  0006E8  22DA               	addwfc	fsr2h,f,c
  8378  0006EA  CFDE F01F          	movff	postinc2,??_checkCollision+2
  8379  0006EE  CFDD F020          	movff	postdec2,??_checkCollision+3
  8380  0006F2  501D               	movf	??_checkCollision^0,w,c
  8381  0006F4  5E1F               	subwf	(??_checkCollision+2)^0,f,c
  8382  0006F6  501E               	movf	(??_checkCollision+1)^0,w,c
  8383  0006F8  5A20               	subwfb	(??_checkCollision+3)^0,f,c
  8384  0006FA  5020               	movf	(??_checkCollision+3)^0,w,c
  8385  0006FC  E135               	bnz	l6786
  8386  0006FE  0E1E               	movlw	30
  8387  000700  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  8388  000702  B0D8               	btfsc	status,0,c
  8389  000704  D031               	goto	l6786
  8390                           
  8391                           ;gameFunction.c: 150:                 {;gameFunction.c: 152:                     g->b.dx
      +                          =-g->b.dx;
  8392  000706  EE20 F0D2          	lfsr	2,210
  8393  00070A  501B               	movf	checkCollision@g^0,w,c
  8394  00070C  26D9               	addwf	fsr2l,f,c
  8395  00070E  501C               	movf	(checkCollision@g+1)^0,w,c
  8396  000710  22DA               	addwfc	fsr2h,f,c
  8397  000712  CFDE F01D          	movff	postinc2,??_checkCollision
  8398  000716  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8399  00071A  1E1D               	comf	??_checkCollision^0,f,c
  8400  00071C  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8401  00071E  4A1D               	infsnz	??_checkCollision^0,f,c
  8402  000720  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8403  000722  EE20 F0D2          	lfsr	2,210
  8404  000726  501B               	movf	checkCollision@g^0,w,c
  8405  000728  26D9               	addwf	fsr2l,f,c
  8406  00072A  501C               	movf	(checkCollision@g+1)^0,w,c
  8407  00072C  22DA               	addwfc	fsr2h,f,c
  8408  00072E  C01D  FFDE         	movff	??_checkCollision,postinc2
  8409  000732  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8410                           
  8411                           ;gameFunction.c: 153:                     g->b.dy=-g->b.dy;
  8412  000736  EE20 F0D4          	lfsr	2,212
  8413  00073A  501B               	movf	checkCollision@g^0,w,c
  8414  00073C  26D9               	addwf	fsr2l,f,c
  8415  00073E  501C               	movf	(checkCollision@g+1)^0,w,c
  8416  000740  22DA               	addwfc	fsr2h,f,c
  8417  000742  CFDE F01D          	movff	postinc2,??_checkCollision
  8418  000746  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8419  00074A  1E1D               	comf	??_checkCollision^0,f,c
  8420  00074C  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8421  00074E  4A1D               	infsnz	??_checkCollision^0,f,c
  8422  000750  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8423  000752  EE20 F0D4          	lfsr	2,212
  8424  000756  501B               	movf	checkCollision@g^0,w,c
  8425  000758  26D9               	addwf	fsr2l,f,c
  8426  00075A  501C               	movf	(checkCollision@g+1)^0,w,c
  8427  00075C  22DA               	addwfc	fsr2h,f,c
  8428  00075E  C01D  FFDE         	movff	??_checkCollision,postinc2
  8429  000762  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8430                           
  8431                           ;gameFunction.c: 154:                 }
  8432  000766  D060               	goto	l841
  8433  000768                     l6786:
  8434  000768  EE20 F0E0          	lfsr	2,224
  8435  00076C  501B               	movf	checkCollision@g^0,w,c
  8436  00076E  26D9               	addwf	fsr2l,f,c
  8437  000770  501C               	movf	(checkCollision@g+1)^0,w,c
  8438  000772  22DA               	addwfc	fsr2h,f,c
  8439  000774  CFDE F01D          	movff	postinc2,??_checkCollision
  8440  000778  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8441  00077C  EE20 F0CA          	lfsr	2,202
  8442  000780  501B               	movf	checkCollision@g^0,w,c
  8443  000782  26D9               	addwf	fsr2l,f,c
  8444  000784  501C               	movf	(checkCollision@g+1)^0,w,c
  8445  000786  22DA               	addwfc	fsr2h,f,c
  8446  000788  CFDE F01F          	movff	postinc2,??_checkCollision+2
  8447  00078C  CFDD F020          	movff	postdec2,??_checkCollision+3
  8448  000790  501D               	movf	??_checkCollision^0,w,c
  8449  000792  5E1F               	subwf	(??_checkCollision+2)^0,f,c
  8450  000794  501E               	movf	(??_checkCollision+1)^0,w,c
  8451  000796  5A20               	subwfb	(??_checkCollision+3)^0,f,c
  8452  000798  5020               	movf	(??_checkCollision+3)^0,w,c
  8453  00079A  E124               	bnz	l6790
  8454  00079C  0E28               	movlw	40
  8455  00079E  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  8456  0007A0  B0D8               	btfsc	status,0,c
  8457  0007A2  D020               	goto	l6790
  8458                           
  8459                           ;gameFunction.c: 156:                 {;gameFunction.c: 158:                     g->b.dy
      +                          =-g->b.dy;
  8460  0007A4  EE20 F0D4          	lfsr	2,212
  8461  0007A8  501B               	movf	checkCollision@g^0,w,c
  8462  0007AA  26D9               	addwf	fsr2l,f,c
  8463  0007AC  501C               	movf	(checkCollision@g+1)^0,w,c
  8464  0007AE  22DA               	addwfc	fsr2h,f,c
  8465  0007B0  CFDE F01D          	movff	postinc2,??_checkCollision
  8466  0007B4  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8467  0007B8  1E1D               	comf	??_checkCollision^0,f,c
  8468  0007BA  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8469  0007BC  4A1D               	infsnz	??_checkCollision^0,f,c
  8470  0007BE  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8471  0007C0  EE20 F0D4          	lfsr	2,212
  8472  0007C4  501B               	movf	checkCollision@g^0,w,c
  8473  0007C6  26D9               	addwf	fsr2l,f,c
  8474  0007C8  501C               	movf	(checkCollision@g+1)^0,w,c
  8475  0007CA  22DA               	addwfc	fsr2h,f,c
  8476  0007CC  C01D  FFDE         	movff	??_checkCollision,postinc2
  8477  0007D0  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8478                           
  8479                           ;gameFunction.c: 159:                     g->b.dx+=1;
  8480  0007D4  EE20 F0D2          	lfsr	2,210
  8481  0007D8  501B               	movf	checkCollision@g^0,w,c
  8482  0007DA  26D9               	addwf	fsr2l,f,c
  8483  0007DC  501C               	movf	(checkCollision@g+1)^0,w,c
  8484  0007DE  22DA               	addwfc	fsr2h,f,c
  8485  0007E0  2ADE               	incf	postinc2,f,c
  8486  0007E2  D020               	goto	L6
  8487  0007E4                     l6790:
  8488                           
  8489                           ;gameFunction.c: 162:                 {;gameFunction.c: 164:                     g->b.dy
      +                          =-g->b.dy;
  8490  0007E4  EE20 F0D4          	lfsr	2,212
  8491  0007E8  501B               	movf	checkCollision@g^0,w,c
  8492  0007EA  26D9               	addwf	fsr2l,f,c
  8493  0007EC  501C               	movf	(checkCollision@g+1)^0,w,c
  8494  0007EE  22DA               	addwfc	fsr2h,f,c
  8495  0007F0  CFDE F01D          	movff	postinc2,??_checkCollision
  8496  0007F4  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8497  0007F8  1E1D               	comf	??_checkCollision^0,f,c
  8498  0007FA  1E1E               	comf	(??_checkCollision+1)^0,f,c
  8499  0007FC  4A1D               	infsnz	??_checkCollision^0,f,c
  8500  0007FE  2A1E               	incf	(??_checkCollision+1)^0,f,c
  8501  000800  EE20 F0D4          	lfsr	2,212
  8502  000804  501B               	movf	checkCollision@g^0,w,c
  8503  000806  26D9               	addwf	fsr2l,f,c
  8504  000808  501C               	movf	(checkCollision@g+1)^0,w,c
  8505  00080A  22DA               	addwfc	fsr2h,f,c
  8506  00080C  C01D  FFDE         	movff	??_checkCollision,postinc2
  8507  000810  C01E  FFDD         	movff	??_checkCollision+1,postdec2
  8508                           
  8509                           ;gameFunction.c: 165:                     g->b.dx+=2;
  8510  000814  EE20 F0D2          	lfsr	2,210
  8511  000818  501B               	movf	checkCollision@g^0,w,c
  8512  00081A  26D9               	addwf	fsr2l,f,c
  8513  00081C  501C               	movf	(checkCollision@g+1)^0,w,c
  8514  00081E  22DA               	addwfc	fsr2h,f,c
  8515  000820  0E02               	movlw	2
  8516  000822  26DE               	addwf	postinc2,f,c
  8517  000824                     L6:
  8518  000824  0E00               	movlw	0
  8519  000826                     L4:
  8520  000826  22DD               	addwfc	postdec2,f,c
  8521  000828                     l841:
  8522                           
  8523                           ;gameFunction.c: 168:                 g->s1.awayScore++;
  8524  000828  EE20 F0EC          	lfsr	2,236
  8525  00082C  501B               	movf	checkCollision@g^0,w,c
  8526  00082E  26D9               	addwf	fsr2l,f,c
  8527  000830  501C               	movf	(checkCollision@g+1)^0,w,c
  8528  000832  22DA               	addwfc	fsr2h,f,c
  8529  000834  2ADE               	incf	postinc2,f,c
  8530  000836  0E00               	movlw	0
  8531  000838  22DD               	addwfc	postdec2,f,c
  8532                           
  8533                           ;gameFunction.c: 169:                 XF_pushEvent(evRedrawScore,0);
  8534  00083A  0E00               	movlw	0
  8535  00083C  6E18               	movwf	XF_pushEvent@inISR^0,c
  8536  00083E  0E0E               	movlw	14
  8537  000840  ECD6  F029         	call	_XF_pushEvent
  8538  000844                     l6794:
  8539                           
  8540                           ;gameFunction.c: 175:     if(g->b.y-8<g->p2.y-10)
  8541  000844  0EF6               	movlw	246
  8542  000846  6E1D               	movwf	??_checkCollision^0,c
  8543  000848  0EFF               	movlw	255
  8544  00084A  6E1E               	movwf	(??_checkCollision+1)^0,c
  8545  00084C  EE20 F0E2          	lfsr	2,226
  8546  000850  501B               	movf	checkCollision@g^0,w,c
  8547  000852  26D9               	addwf	fsr2l,f,c
  8548  000854  501C               	movf	(checkCollision@g+1)^0,w,c
  8549  000856  22DA               	addwfc	fsr2h,f,c
  8550  000858  CFDE F01F          	movff	postinc2,??_checkCollision+2
  8551  00085C  CFDD F020          	movff	postdec2,??_checkCollision+3
  8552  000860  501D               	movf	??_checkCollision^0,w,c
  8553  000862  261F               	addwf	(??_checkCollision+2)^0,f,c
  8554  000864  501E               	movf	(??_checkCollision+1)^0,w,c
  8555  000866  2220               	addwfc	(??_checkCollision+3)^0,f,c
  8556  000868  0EF8               	movlw	248
  8557  00086A  6E21               	movwf	(??_checkCollision+4)^0,c
  8558  00086C  0EFF               	movlw	255
  8559  00086E  6E22               	movwf	(??_checkCollision+5)^0,c
  8560  000870  EE20 F0CC          	lfsr	2,204
  8561  000874  501B               	movf	checkCollision@g^0,w,c
  8562  000876  26D9               	addwf	fsr2l,f,c
  8563  000878  501C               	movf	(checkCollision@g+1)^0,w,c
  8564  00087A  22DA               	addwfc	fsr2h,f,c
  8565  00087C  CFDE F023          	movff	postinc2,??_checkCollision+6
  8566  000880  CFDD F024          	movff	postdec2,??_checkCollision+7
  8567  000884  5021               	movf	(??_checkCollision+4)^0,w,c
  8568  000886  2623               	addwf	(??_checkCollision+6)^0,f,c
  8569  000888  5022               	movf	(??_checkCollision+5)^0,w,c
  8570  00088A  2224               	addwfc	(??_checkCollision+7)^0,f,c
  8571  00088C  501F               	movf	(??_checkCollision+2)^0,w,c
  8572  00088E  5C23               	subwf	(??_checkCollision+6)^0,w,c
  8573  000890  5020               	movf	(??_checkCollision+3)^0,w,c
  8574  000892  5824               	subwfb	(??_checkCollision+7)^0,w,c
  8575  000894  B0D8               	btfsc	status,0,c
  8576  000896  D00F               	goto	l6800
  8577                           
  8578                           ;gameFunction.c: 176:     {;gameFunction.c: 178:         XF_pushEvent(evEndGame,0);
  8579  000898  0E00               	movlw	0
  8580  00089A  6E18               	movwf	XF_pushEvent@inISR^0,c
  8581  00089C  0E09               	movlw	9
  8582  00089E  ECD6  F029         	call	_XF_pushEvent
  8583                           
  8584                           ;gameFunction.c: 179:         g->s1.awayScore=0;
  8585  0008A2  EE20 F0EC          	lfsr	2,236
  8586  0008A6  501B               	movf	checkCollision@g^0,w,c
  8587  0008A8  26D9               	addwf	fsr2l,f,c
  8588  0008AA  501C               	movf	(checkCollision@g+1)^0,w,c
  8589  0008AC  22DA               	addwfc	fsr2h,f,c
  8590  0008AE  0E00               	movlw	0
  8591  0008B0  6EDE               	movwf	postinc2,c
  8592  0008B2  0E00               	movlw	0
  8593  0008B4  6EDD               	movwf	postdec2,c
  8594  0008B6                     l6800:
  8595                           
  8596                           ;gameFunction.c: 181:     if(g->b.y+8>g->p1.y+10)
  8597  0008B6  EE20 F0CC          	lfsr	2,204
  8598  0008BA  501B               	movf	checkCollision@g^0,w,c
  8599  0008BC  26D9               	addwf	fsr2l,f,c
  8600  0008BE  501C               	movf	(checkCollision@g+1)^0,w,c
  8601  0008C0  22DA               	addwfc	fsr2h,f,c
  8602  0008C2  CFDE F01D          	movff	postinc2,??_checkCollision
  8603  0008C6  CFDD F01E          	movff	postdec2,??_checkCollision+1
  8604  0008CA  0E08               	movlw	8
  8605  0008CC  261D               	addwf	??_checkCollision^0,f,c
  8606  0008CE  0E00               	movlw	0
  8607  0008D0  221E               	addwfc	(??_checkCollision+1)^0,f,c
  8608  0008D2  EE20 F0D8          	lfsr	2,216
  8609  0008D6  501B               	movf	checkCollision@g^0,w,c
  8610  0008D8  26D9               	addwf	fsr2l,f,c
  8611  0008DA  501C               	movf	(checkCollision@g+1)^0,w,c
  8612  0008DC  22DA               	addwfc	fsr2h,f,c
  8613  0008DE  CFDE F01F          	movff	postinc2,??_checkCollision+2
  8614  0008E2  CFDD F020          	movff	postdec2,??_checkCollision+3
  8615  0008E6  0E0A               	movlw	10
  8616  0008E8  261F               	addwf	(??_checkCollision+2)^0,f,c
  8617  0008EA  0E00               	movlw	0
  8618  0008EC  2220               	addwfc	(??_checkCollision+3)^0,f,c
  8619  0008EE  501D               	movf	??_checkCollision^0,w,c
  8620  0008F0  5C1F               	subwf	(??_checkCollision+2)^0,w,c
  8621  0008F2  501E               	movf	(??_checkCollision+1)^0,w,c
  8622  0008F4  5820               	subwfb	(??_checkCollision+3)^0,w,c
  8623  0008F6  B0D8               	btfsc	status,0,c
  8624  0008F8  0012               	return	
  8625                           
  8626                           ;gameFunction.c: 182:     {;gameFunction.c: 184:         XF_pushEvent(evEndGame,0);
  8627  0008FA  0E00               	movlw	0
  8628  0008FC  6E18               	movwf	XF_pushEvent@inISR^0,c
  8629  0008FE  0E09               	movlw	9
  8630  000900  ECD6  F029         	call	_XF_pushEvent
  8631                           
  8632                           ;gameFunction.c: 185:         g->s1.homeScore=0;
  8633  000904  EE20 F0EA          	lfsr	2,234
  8634  000908  501B               	movf	checkCollision@g^0,w,c
  8635  00090A  26D9               	addwf	fsr2l,f,c
  8636  00090C  501C               	movf	(checkCollision@g+1)^0,w,c
  8637  00090E  22DA               	addwfc	fsr2h,f,c
  8638  000910  0E00               	movlw	0
  8639  000912  6EDE               	movwf	postinc2,c
  8640  000914  0E00               	movlw	0
  8641  000916  6EDD               	movwf	postdec2,c
  8642  000918  0012               	return		;funcret
  8643  00091A                     __end_of_checkCollision:
  8644                           	callstack 0
  8645                           
  8646 ;; *************** function _XF_pushEvent *****************
  8647 ;; Defined at:
  8648 ;;		line 49 in file "xf/xf.c"
  8649 ;; Parameters:    Size  Location     Type
  8650 ;;  ev              1    wreg     unsigned char 
  8651 ;;  inISR           1   23[COMRAM] _Bool 
  8652 ;; Auto vars:     Size  Location     Type
  8653 ;;  ev              1   24[COMRAM] unsigned char 
  8654 ;;  temp            1   25[COMRAM] unsigned char 
  8655 ;; Return value:  Size  Location     Type
  8656 ;;                  1    wreg      _Bool 
  8657 ;; Registers used:
  8658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8659 ;; Tracked objects:
  8660 ;;		On entry : 0/0
  8661 ;;		On exit  : 0/0
  8662 ;;		Unchanged: 0/0
  8663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8664 ;;      Params:         1       0       0       0       0       0       0
  8665 ;;      Locals:         2       0       0       0       0       0       0
  8666 ;;      Temps:          0       0       0       0       0       0       0
  8667 ;;      Totals:         3       0       0       0       0       0       0
  8668 ;;Total ram usage:        3 bytes
  8669 ;; Hardware stack levels used: 1
  8670 ;; Hardware stack levels required when called: 5
  8671 ;; This function calls:
  8672 ;;		_ENTERCRITICAL
  8673 ;;		_LEAVECRITICAL
  8674 ;;		___awmod
  8675 ;; This function is called by:
  8676 ;;		_gameControllerController
  8677 ;;		_moovePaddle1
  8678 ;;		_moovePaddle2
  8679 ;;		_mooveBall
  8680 ;;		_checkCollision
  8681 ;; This function uses a non-reentrant model
  8682 ;;
  8683                           
  8684                           	psect	text30
  8685  0053AC                     __ptext30:
  8686                           	callstack 0
  8687  0053AC                     _XF_pushEvent:
  8688                           	callstack 20
  8689                           
  8690                           ;incstack = 0
  8691                           ;XF_pushEvent@ev stored from wreg
  8692  0053AC  6E19               	movwf	XF_pushEvent@ev^0,c
  8693                           
  8694                           ;xf/xf.c: 49: _Bool XF_pushEvent(Event ev, _Bool inISR);xf/xf.c: 50: {;xf/xf.c: 51:   ui
      +                          nt8_t temp;;xf/xf.c: 52:     ENTERCRITICAL(inISR);
  8695  0053AE  5018               	movf	XF_pushEvent@inISR^0,w,c
  8696  0053B0  EC25  F02D         	call	_ENTERCRITICAL
  8697                           
  8698                           ;xf/xf.c: 54:     temp = (theXF.in+1) % (uint8_t)sizeof(theXF.eventQueue);
  8699  0053B4  0E01               	movlw	1
  8700  0053B6  0100               	movlb	0	; () banked
  8701  0053B8  2584               	addwf	(_theXF+36)& (0+255),w,b
  8702  0053BA  6E12               	movwf	___awmod@dividend^0,c
  8703  0053BC  6A13               	clrf	(___awmod@dividend+1)^0,c
  8704  0053BE  0E00               	movlw	0
  8705  0053C0  2213               	addwfc	(___awmod@dividend+1)^0,f,c
  8706  0053C2  0E00               	movlw	0
  8707  0053C4  6E15               	movwf	(___awmod@divisor+1)^0,c
  8708  0053C6  0E0C               	movlw	12
  8709  0053C8  6E14               	movwf	___awmod@divisor^0,c
  8710  0053CA  EC06  F029         	call	___awmod	;wreg free
  8711  0053CE  5012               	movf	?___awmod^0,w,c
  8712  0053D0  6E1A               	movwf	XF_pushEvent@temp^0,c
  8713                           
  8714                           ; BSR set to: 0
  8715                           ;xf/xf.c: 55:     if(temp == theXF.out)
  8716  0053D2  501A               	movf	XF_pushEvent@temp^0,w,c
  8717  0053D4  1985               	xorwf	(_theXF+37)& (0+255),w,b
  8718  0053D6  A4D8               	btfss	status,2,c
  8719  0053D8  D005               	goto	l6460
  8720                           
  8721                           ; BSR set to: 0
  8722                           ;xf/xf.c: 56:     {;xf/xf.c: 57:       LEAVECRITICAL(inISR);
  8723  0053DA  5018               	movf	XF_pushEvent@inISR^0,w,c
  8724  0053DC  EC1F  F02D         	call	_LEAVECRITICAL
  8725                           
  8726                           ;xf/xf.c: 58:       return 0;
  8727  0053E0  0E00               	movlw	0
  8728  0053E2  0012               	return	
  8729  0053E4                     l6460:
  8730                           
  8731                           ; BSR set to: 0
  8732                           ;xf/xf.c: 60:     theXF.eventQueue[theXF.in] = ev;
  8733  0053E4  5184               	movf	(_theXF+36)& (0+255),w,b
  8734  0053E6  0F78               	addlw	low (_theXF+24)
  8735  0053E8  6ED9               	movwf	fsr2l,c
  8736  0053EA  6ADA               	clrf	fsr2h,c
  8737  0053EC  C019  FFDF         	movff	XF_pushEvent@ev,indf2
  8738                           
  8739                           ; BSR set to: 0
  8740                           ;xf/xf.c: 61:     theXF.in = temp;
  8741  0053F0  C01A  F084         	movff	XF_pushEvent@temp,_theXF+36
  8742                           
  8743                           ; BSR set to: 0
  8744                           ;xf/xf.c: 62:     LEAVECRITICAL(inISR);
  8745  0053F4  5018               	movf	XF_pushEvent@inISR^0,w,c
  8746  0053F6  EC1F  F02D         	call	_LEAVECRITICAL
  8747                           
  8748                           ;xf/xf.c: 63:     return 1;
  8749  0053FA  0E01               	movlw	1
  8750  0053FC  0012               	return		;funcret
  8751  0053FE                     __end_of_XF_pushEvent:
  8752                           	callstack 0
  8753                           
  8754 ;; *************** function _Ball_Update *****************
  8755 ;; Defined at:
  8756 ;;		line 18 in file "class/ball.c"
  8757 ;; Parameters:    Size  Location     Type
  8758 ;;  b               2   17[COMRAM] PTR struct Ball
  8759 ;;		 -> g1(240), 
  8760 ;; Auto vars:     Size  Location     Type
  8761 ;;		None
  8762 ;; Return value:  Size  Location     Type
  8763 ;;                  1    wreg      void 
  8764 ;; Registers used:
  8765 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8766 ;; Tracked objects:
  8767 ;;		On entry : 0/0
  8768 ;;		On exit  : 0/0
  8769 ;;		Unchanged: 0/0
  8770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8771 ;;      Params:         2       0       0       0       0       0       0
  8772 ;;      Locals:         0       0       0       0       0       0       0
  8773 ;;      Temps:          4       0       0       0       0       0       0
  8774 ;;      Totals:         6       0       0       0       0       0       0
  8775 ;;Total ram usage:        6 bytes
  8776 ;; Hardware stack levels used: 1
  8777 ;; Hardware stack levels required when called: 4
  8778 ;; This function calls:
  8779 ;;		Nothing
  8780 ;; This function is called by:
  8781 ;;		_mooveBall
  8782 ;; This function uses a non-reentrant model
  8783 ;;
  8784                           
  8785                           	psect	text31
  8786  005096                     __ptext31:
  8787                           	callstack 0
  8788  005096                     _Ball_Update:
  8789                           	callstack 21
  8790                           
  8791                           ;class/ball.c: 18: void Ball_Update(struct Ball* b);class/ball.c: 19: {;class/ball.c: 20
      +                          :     b->x=b->x+b->dx;
  8792                           
  8793                           ;incstack = 0
  8794  005096  EE20 F008          	lfsr	2,8
  8795  00509A  5012               	movf	Ball_Update@b^0,w,c
  8796  00509C  26D9               	addwf	fsr2l,f,c
  8797  00509E  5013               	movf	(Ball_Update@b+1)^0,w,c
  8798  0050A0  22DA               	addwfc	fsr2h,f,c
  8799  0050A2  CFDE F014          	movff	postinc2,??_Ball_Update
  8800  0050A6  CFDD F015          	movff	postdec2,??_Ball_Update+1
  8801  0050AA  C012  FFD9         	movff	Ball_Update@b,fsr2l
  8802  0050AE  C013  FFDA         	movff	Ball_Update@b+1,fsr2h
  8803  0050B2  CFDE F016          	movff	postinc2,??_Ball_Update+2
  8804  0050B6  CFDD F017          	movff	postdec2,??_Ball_Update+3
  8805  0050BA  5014               	movf	??_Ball_Update^0,w,c
  8806  0050BC  2616               	addwf	(??_Ball_Update+2)^0,f,c
  8807  0050BE  5015               	movf	(??_Ball_Update+1)^0,w,c
  8808  0050C0  2217               	addwfc	(??_Ball_Update+3)^0,f,c
  8809  0050C2  C012  FFD9         	movff	Ball_Update@b,fsr2l
  8810  0050C6  C013  FFDA         	movff	Ball_Update@b+1,fsr2h
  8811  0050CA  C016  FFDE         	movff	??_Ball_Update+2,postinc2
  8812  0050CE  C017  FFDD         	movff	??_Ball_Update+3,postdec2
  8813                           
  8814                           ;class/ball.c: 21:     b->y=b->y+b->dy;
  8815  0050D2  EE20 F00A          	lfsr	2,10
  8816  0050D6  5012               	movf	Ball_Update@b^0,w,c
  8817  0050D8  26D9               	addwf	fsr2l,f,c
  8818  0050DA  5013               	movf	(Ball_Update@b+1)^0,w,c
  8819  0050DC  22DA               	addwfc	fsr2h,f,c
  8820  0050DE  CFDE F014          	movff	postinc2,??_Ball_Update
  8821  0050E2  CFDD F015          	movff	postdec2,??_Ball_Update+1
  8822  0050E6  EE20 F002          	lfsr	2,2
  8823  0050EA  5012               	movf	Ball_Update@b^0,w,c
  8824  0050EC  26D9               	addwf	fsr2l,f,c
  8825  0050EE  5013               	movf	(Ball_Update@b+1)^0,w,c
  8826  0050F0  22DA               	addwfc	fsr2h,f,c
  8827  0050F2  CFDE F016          	movff	postinc2,??_Ball_Update+2
  8828  0050F6  CFDD F017          	movff	postdec2,??_Ball_Update+3
  8829  0050FA  5014               	movf	??_Ball_Update^0,w,c
  8830  0050FC  2616               	addwf	(??_Ball_Update+2)^0,f,c
  8831  0050FE  5015               	movf	(??_Ball_Update+1)^0,w,c
  8832  005100  2217               	addwfc	(??_Ball_Update+3)^0,f,c
  8833  005102  EE20 F002          	lfsr	2,2
  8834  005106  5012               	movf	Ball_Update@b^0,w,c
  8835  005108  26D9               	addwf	fsr2l,f,c
  8836  00510A  5013               	movf	(Ball_Update@b+1)^0,w,c
  8837  00510C  22DA               	addwfc	fsr2h,f,c
  8838  00510E  C016  FFDE         	movff	??_Ball_Update+2,postinc2
  8839  005112  C017  FFDD         	movff	??_Ball_Update+3,postdec2
  8840  005116  0012               	return		;funcret
  8841  005118                     __end_of_Ball_Update:
  8842                           	callstack 0
  8843                           
  8844 ;; *************** function _levelController *****************
  8845 ;; Defined at:
  8846 ;;		line 250 in file "gameFunction.c"
  8847 ;; Parameters:    Size  Location     Type
  8848 ;;  g               2   21[COMRAM] PTR struct GameParameter
  8849 ;;		 -> g1(240), 
  8850 ;; Auto vars:     Size  Location     Type
  8851 ;;		None
  8852 ;; Return value:  Size  Location     Type
  8853 ;;                  1    wreg      void 
  8854 ;; Registers used:
  8855 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8856 ;; Tracked objects:
  8857 ;;		On entry : 0/0
  8858 ;;		On exit  : 0/0
  8859 ;;		Unchanged: 0/0
  8860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8861 ;;      Params:         2       0       0       0       0       0       0
  8862 ;;      Locals:         0       0       0       0       0       0       0
  8863 ;;      Temps:          2       0       0       0       0       0       0
  8864 ;;      Totals:         4       0       0       0       0       0       0
  8865 ;;Total ram usage:        4 bytes
  8866 ;; Hardware stack levels used: 1
  8867 ;; Hardware stack levels required when called: 5
  8868 ;; This function calls:
  8869 ;;		_GameParameters_setLevel
  8870 ;; This function is called by:
  8871 ;;		_gameControllerController
  8872 ;; This function uses a non-reentrant model
  8873 ;;
  8874                           
  8875                           	psect	text32
  8876  0044EA                     __ptext32:
  8877                           	callstack 0
  8878  0044EA                     _levelController:
  8879                           	callstack 21
  8880                           
  8881                           ;gameFunction.c: 250: void levelController(GameParameters* g);gameFunction.c: 251: {;gam
      +                          eFunction.c: 253:     if(((g->x)>=105)&&((g->x)<160))
  8882                           
  8883                           ;incstack = 0
  8884  0044EA  EE20 F002          	lfsr	2,2
  8885  0044EE  5016               	movf	levelController@g^0,w,c
  8886  0044F0  26D9               	addwf	fsr2l,f,c
  8887  0044F2  5017               	movf	(levelController@g+1)^0,w,c
  8888  0044F4  22DA               	addwfc	fsr2h,f,c
  8889  0044F6  0E01               	movlw	1
  8890  0044F8  50DB               	movf	plusw2,w,c
  8891  0044FA  E104               	bnz	u4630
  8892  0044FC  0E69               	movlw	105
  8893  0044FE  5CDE               	subwf	postinc2,w,c
  8894  004500  A0D8               	btfss	status,0,c
  8895  004502  D018               	goto	l7076
  8896  004504                     u4630:
  8897  004504  EE20 F002          	lfsr	2,2
  8898  004508  5016               	movf	levelController@g^0,w,c
  8899  00450A  26D9               	addwf	fsr2l,f,c
  8900  00450C  5017               	movf	(levelController@g+1)^0,w,c
  8901  00450E  22DA               	addwfc	fsr2h,f,c
  8902  004510  0E01               	movlw	1
  8903  004512  50DB               	movf	plusw2,w,c
  8904  004514  E10F               	bnz	l7076
  8905  004516  0EA0               	movlw	160
  8906  004518  5CDE               	subwf	postinc2,w,c
  8907  00451A  B0D8               	btfsc	status,0,c
  8908  00451C  D00B               	goto	l7076
  8909                           
  8910                           ;gameFunction.c: 254:     {;gameFunction.c: 255:         GameParameters_setLevel(g,2);
  8911  00451E  C016  F012         	movff	levelController@g,GameParameters_setLevel@s
  8912  004522  C017  F013         	movff	levelController@g+1,GameParameters_setLevel@s+1
  8913  004526  0E00               	movlw	0
  8914  004528  6E15               	movwf	(GameParameters_setLevel@value+1)^0,c
  8915  00452A  0E02               	movlw	2
  8916  00452C  6E14               	movwf	GameParameters_setLevel@value^0,c
  8917  00452E  EC14  F02D         	call	_GameParameters_setLevel	;wreg free
  8918                           
  8919                           ;gameFunction.c: 256:     }
  8920  004532  D02F               	goto	l7084
  8921  004534                     l7076:
  8922  004534  EE20 F002          	lfsr	2,2
  8923  004538  5016               	movf	levelController@g^0,w,c
  8924  00453A  26D9               	addwf	fsr2l,f,c
  8925  00453C  5017               	movf	(levelController@g+1)^0,w,c
  8926  00453E  22DA               	addwfc	fsr2h,f,c
  8927  004540  0E01               	movlw	1
  8928  004542  50DB               	movf	plusw2,w,c
  8929  004544  E104               	bnz	u4650
  8930  004546  0EA0               	movlw	160
  8931  004548  5CDE               	subwf	postinc2,w,c
  8932  00454A  A0D8               	btfss	status,0,c
  8933  00454C  D018               	goto	l7082
  8934  00454E                     u4650:
  8935  00454E  EE20 F002          	lfsr	2,2
  8936  004552  5016               	movf	levelController@g^0,w,c
  8937  004554  26D9               	addwf	fsr2l,f,c
  8938  004556  5017               	movf	(levelController@g+1)^0,w,c
  8939  004558  22DA               	addwfc	fsr2h,f,c
  8940  00455A  0E01               	movlw	1
  8941  00455C  50DB               	movf	plusw2,w,c
  8942  00455E  E10F               	bnz	l7082
  8943  004560  0ED7               	movlw	215
  8944  004562  5CDE               	subwf	postinc2,w,c
  8945  004564  B0D8               	btfsc	status,0,c
  8946  004566  D00B               	goto	l7082
  8947                           
  8948                           ;gameFunction.c: 258:     {;gameFunction.c: 259:         GameParameters_setLevel(g,3);
  8949  004568  C016  F012         	movff	levelController@g,GameParameters_setLevel@s
  8950  00456C  C017  F013         	movff	levelController@g+1,GameParameters_setLevel@s+1
  8951  004570  0E00               	movlw	0
  8952  004572  6E15               	movwf	(GameParameters_setLevel@value+1)^0,c
  8953  004574  0E03               	movlw	3
  8954  004576  6E14               	movwf	GameParameters_setLevel@value^0,c
  8955  004578  EC14  F02D         	call	_GameParameters_setLevel	;wreg free
  8956                           
  8957                           ;gameFunction.c: 260:     }
  8958  00457C  D00A               	goto	l7084
  8959  00457E                     l7082:
  8960                           
  8961                           ;gameFunction.c: 262:     {;gameFunction.c: 263:         GameParameters_setLevel(g,1);
  8962  00457E  C016  F012         	movff	levelController@g,GameParameters_setLevel@s
  8963  004582  C017  F013         	movff	levelController@g+1,GameParameters_setLevel@s+1
  8964  004586  0E00               	movlw	0
  8965  004588  6E15               	movwf	(GameParameters_setLevel@value+1)^0,c
  8966  00458A  0E01               	movlw	1
  8967  00458C  6E14               	movwf	GameParameters_setLevel@value^0,c
  8968  00458E  EC14  F02D         	call	_GameParameters_setLevel	;wreg free
  8969  004592                     l7084:
  8970                           
  8971                           ;gameFunction.c: 265:     g->sldLevel.value=g->level;
  8972  004592  EE20 F006          	lfsr	2,6
  8973  004596  5016               	movf	levelController@g^0,w,c
  8974  004598  26D9               	addwf	fsr2l,f,c
  8975  00459A  5017               	movf	(levelController@g+1)^0,w,c
  8976  00459C  22DA               	addwfc	fsr2h,f,c
  8977  00459E  EE10 F0C2          	lfsr	1,194
  8978  0045A2  5016               	movf	levelController@g^0,w,c
  8979  0045A4  26E1               	addwf	fsr1l,f,c
  8980  0045A6  5017               	movf	(levelController@g+1)^0,w,c
  8981  0045A8  22E2               	addwfc	fsr1h,f,c
  8982  0045AA  CFDE FFE6          	movff	postinc2,postinc1
  8983  0045AE  CFDD FFE5          	movff	postdec2,postdec1
  8984  0045B2  0012               	return		;funcret
  8985  0045B4                     __end_of_levelController:
  8986                           	callstack 0
  8987                           
  8988 ;; *************** function _GameParameters_setLevel *****************
  8989 ;; Defined at:
  8990 ;;		line 54 in file "class/gameParameters.c"
  8991 ;; Parameters:    Size  Location     Type
  8992 ;;  s               2   17[COMRAM] PTR struct GameParameter
  8993 ;;		 -> g1(240), 
  8994 ;;  value           2   19[COMRAM] unsigned short 
  8995 ;; Auto vars:     Size  Location     Type
  8996 ;;		None
  8997 ;; Return value:  Size  Location     Type
  8998 ;;                  1    wreg      void 
  8999 ;; Registers used:
  9000 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9001 ;; Tracked objects:
  9002 ;;		On entry : 0/0
  9003 ;;		On exit  : 0/0
  9004 ;;		Unchanged: 0/0
  9005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9006 ;;      Params:         4       0       0       0       0       0       0
  9007 ;;      Locals:         0       0       0       0       0       0       0
  9008 ;;      Temps:          0       0       0       0       0       0       0
  9009 ;;      Totals:         4       0       0       0       0       0       0
  9010 ;;Total ram usage:        4 bytes
  9011 ;; Hardware stack levels used: 1
  9012 ;; Hardware stack levels required when called: 4
  9013 ;; This function calls:
  9014 ;;		Nothing
  9015 ;; This function is called by:
  9016 ;;		_levelController
  9017 ;; This function uses a non-reentrant model
  9018 ;;
  9019                           
  9020                           	psect	text33
  9021  005A28                     __ptext33:
  9022                           	callstack 0
  9023  005A28                     _GameParameters_setLevel:
  9024                           	callstack 21
  9025                           
  9026                           ;class/gameParameters.c: 54: void GameParameters_setLevel(struct GameParameters* s, uint
      +                          16_t value);class/gameParameters.c: 55: {;class/gameParameters.c: 56:     s->level = val
      +                          ue;
  9027                           
  9028                           ;incstack = 0
  9029  005A28  EE20 F006          	lfsr	2,6
  9030  005A2C  5012               	movf	GameParameters_setLevel@s^0,w,c
  9031  005A2E  26D9               	addwf	fsr2l,f,c
  9032  005A30  5013               	movf	(GameParameters_setLevel@s+1)^0,w,c
  9033  005A32  22DA               	addwfc	fsr2h,f,c
  9034  005A34  C014  FFDE         	movff	GameParameters_setLevel@value,postinc2
  9035  005A38  C015  FFDD         	movff	GameParameters_setLevel@value+1,postdec2
  9036  005A3C  0012               	return		;funcret
  9037  005A3E                     __end_of_GameParameters_setLevel:
  9038                           	callstack 0
  9039                           
  9040 ;; *************** function _desactivateTimerSleep *****************
  9041 ;; Defined at:
  9042 ;;		line 44 in file "gameFunction.c"
  9043 ;; Parameters:    Size  Location     Type
  9044 ;;		None
  9045 ;; Auto vars:     Size  Location     Type
  9046 ;;  i               2   21[COMRAM] int 
  9047 ;; Return value:  Size  Location     Type
  9048 ;;                  1    wreg      void 
  9049 ;; Registers used:
  9050 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9051 ;; Tracked objects:
  9052 ;;		On entry : 0/0
  9053 ;;		On exit  : 0/0
  9054 ;;		Unchanged: 0/0
  9055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9056 ;;      Params:         0       0       0       0       0       0       0
  9057 ;;      Locals:         2       0       0       0       0       0       0
  9058 ;;      Temps:          1       0       0       0       0       0       0
  9059 ;;      Totals:         3       0       0       0       0       0       0
  9060 ;;Total ram usage:        3 bytes
  9061 ;; Hardware stack levels used: 1
  9062 ;; Hardware stack levels required when called: 6
  9063 ;; This function calls:
  9064 ;;		_XF_unscheduleTimer
  9065 ;; This function is called by:
  9066 ;;		_gameControllerController
  9067 ;; This function uses a non-reentrant model
  9068 ;;
  9069                           
  9070                           	psect	text34
  9071  005698                     __ptext34:
  9072                           	callstack 0
  9073  005698                     _desactivateTimerSleep:
  9074                           	callstack 20
  9075                           
  9076                           ;gameFunction.c: 46:     for (int i=0; i<8; i++)
  9077                           
  9078                           ;incstack = 0
  9079  005698  0E00               	movlw	0
  9080  00569A  6E17               	movwf	(desactivateTimerSleep@i+1)^0,c
  9081  00569C  0E00               	movlw	0
  9082  00569E  6E16               	movwf	desactivateTimerSleep@i^0,c
  9083  0056A0                     l7102:
  9084                           
  9085                           ;gameFunction.c: 47:     {;gameFunction.c: 48:         if (theXF.timerList[i].ev == evSl
      +                          eep)
  9086  0056A0  5016               	movf	desactivateTimerSleep@i^0,w,c
  9087  0056A2  0D03               	mullw	3
  9088  0056A4  50F3               	movf	243,w,c
  9089  0056A6  0F62               	addlw	low (_theXF+2)
  9090  0056A8  6ED9               	movwf	fsr2l,c
  9091  0056AA  6ADA               	clrf	fsr2h,c
  9092  0056AC  0E03               	movlw	3
  9093  0056AE  18DE               	xorwf	postinc2,w,c
  9094  0056B0  A4D8               	btfss	status,2,c
  9095  0056B2  D005               	goto	l7106
  9096                           
  9097                           ;gameFunction.c: 49:         {;gameFunction.c: 50:             XF_unscheduleTimer(i, 0);
  9098  0056B4  0E00               	movlw	0
  9099  0056B6  6E13               	movwf	XF_unscheduleTimer@inISR^0,c
  9100  0056B8  5016               	movf	desactivateTimerSleep@i^0,w,c
  9101  0056BA  ECA5  F02B         	call	_XF_unscheduleTimer
  9102  0056BE                     l7106:
  9103                           
  9104                           ;gameFunction.c: 52:     }
  9105  0056BE  4A16               	infsnz	desactivateTimerSleep@i^0,f,c
  9106  0056C0  2A17               	incf	(desactivateTimerSleep@i+1)^0,f,c
  9107  0056C2  BE17               	btfsc	(desactivateTimerSleep@i+1)^0,7,c
  9108  0056C4  D7ED               	goto	l7102
  9109  0056C6  5017               	movf	(desactivateTimerSleep@i+1)^0,w,c
  9110  0056C8  E105               	bnz	u4710
  9111  0056CA  0E08               	movlw	8
  9112  0056CC  5C16               	subwf	desactivateTimerSleep@i^0,w,c
  9113  0056CE  B0D8               	btfsc	status,0,c
  9114  0056D0  0012               	return	
  9115  0056D2  D7E6               	goto	l7102
  9116  0056D4                     u4710:
  9117  0056D4  0012               	return		;funcret
  9118  0056D6                     __end_of_desactivateTimerSleep:
  9119                           	callstack 0
  9120                           
  9121 ;; *************** function _XF_unscheduleTimer *****************
  9122 ;; Defined at:
  9123 ;;		line 125 in file "xf/xf.c"
  9124 ;; Parameters:    Size  Location     Type
  9125 ;;  id              1    wreg     unsigned char 
  9126 ;;  inISR           1   18[COMRAM] _Bool 
  9127 ;; Auto vars:     Size  Location     Type
  9128 ;;  id              1   19[COMRAM] unsigned char 
  9129 ;; Return value:  Size  Location     Type
  9130 ;;                  1    wreg      void 
  9131 ;; Registers used:
  9132 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9133 ;; Tracked objects:
  9134 ;;		On entry : 0/0
  9135 ;;		On exit  : 0/0
  9136 ;;		Unchanged: 0/0
  9137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9138 ;;      Params:         1       0       0       0       0       0       0
  9139 ;;      Locals:         1       0       0       0       0       0       0
  9140 ;;      Temps:          0       0       0       0       0       0       0
  9141 ;;      Totals:         2       0       0       0       0       0       0
  9142 ;;Total ram usage:        2 bytes
  9143 ;; Hardware stack levels used: 1
  9144 ;; Hardware stack levels required when called: 5
  9145 ;; This function calls:
  9146 ;;		_ENTERCRITICAL
  9147 ;;		_LEAVECRITICAL
  9148 ;; This function is called by:
  9149 ;;		_touchScreenController
  9150 ;;		_desactivateTimerSleep
  9151 ;; This function uses a non-reentrant model
  9152 ;;
  9153                           
  9154                           	psect	text35
  9155  00574A                     __ptext35:
  9156                           	callstack 0
  9157  00574A                     _XF_unscheduleTimer:
  9158                           	callstack 20
  9159                           
  9160                           ;incstack = 0
  9161                           ;XF_unscheduleTimer@id stored from wreg
  9162  00574A  6E14               	movwf	XF_unscheduleTimer@id^0,c
  9163                           
  9164                           ;xf/xf.c: 125: void XF_unscheduleTimer(TimerID id, _Bool inISR);xf/xf.c: 126: {;xf/xf.c:
      +                           127:     ENTERCRITICAL(inISR);
  9165  00574C  5013               	movf	XF_unscheduleTimer@inISR^0,w,c
  9166  00574E  EC25  F02D         	call	_ENTERCRITICAL
  9167                           
  9168                           ;xf/xf.c: 128:     theXF.timerList[id].tm = 0;
  9169  005752  5014               	movf	XF_unscheduleTimer@id^0,w,c
  9170  005754  0D03               	mullw	3
  9171  005756  50F3               	movf	243,w,c
  9172  005758  0F60               	addlw	low _theXF
  9173  00575A  6ED9               	movwf	fsr2l,c
  9174  00575C  6ADA               	clrf	fsr2h,c
  9175  00575E  0E00               	movlw	0
  9176  005760  6EDE               	movwf	postinc2,c
  9177  005762  0E00               	movlw	0
  9178  005764  6EDD               	movwf	postdec2,c
  9179                           
  9180                           ;xf/xf.c: 129:     theXF.timerList[id].ev = NULLEVENT;
  9181  005766  5014               	movf	XF_unscheduleTimer@id^0,w,c
  9182  005768  0D03               	mullw	3
  9183  00576A  50F3               	movf	243,w,c
  9184  00576C  0F62               	addlw	low (_theXF+2)
  9185  00576E  6ED9               	movwf	fsr2l,c
  9186  005770  6ADA               	clrf	fsr2h,c
  9187  005772  0E00               	movlw	0
  9188  005774  6EDF               	movwf	indf2,c
  9189                           
  9190                           ;xf/xf.c: 130:     LEAVECRITICAL(inISR);
  9191  005776  5013               	movf	XF_unscheduleTimer@inISR^0,w,c
  9192  005778  EC1F  F02D         	call	_LEAVECRITICAL
  9193  00577C  0012               	return		;funcret
  9194  00577E                     __end_of_XF_unscheduleTimer:
  9195                           	callstack 0
  9196                           
  9197 ;; *************** function _backlightController *****************
  9198 ;; Defined at:
  9199 ;;		line 193 in file "gameFunction.c"
  9200 ;; Parameters:    Size  Location     Type
  9201 ;;  g               2   23[COMRAM] PTR struct GameParameter
  9202 ;;		 -> g1(240), 
  9203 ;; Auto vars:     Size  Location     Type
  9204 ;;		None
  9205 ;; Return value:  Size  Location     Type
  9206 ;;                  1    wreg      void 
  9207 ;; Registers used:
  9208 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9209 ;; Tracked objects:
  9210 ;;		On entry : 0/0
  9211 ;;		On exit  : 0/0
  9212 ;;		Unchanged: 0/0
  9213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9214 ;;      Params:         2       0       0       0       0       0       0
  9215 ;;      Locals:         0       0       0       0       0       0       0
  9216 ;;      Temps:          2       0       0       0       0       0       0
  9217 ;;      Totals:         4       0       0       0       0       0       0
  9218 ;;Total ram usage:        4 bytes
  9219 ;; Hardware stack levels used: 1
  9220 ;; Hardware stack levels required when called: 5
  9221 ;; This function calls:
  9222 ;;		_GameParameters_setBackLight
  9223 ;; This function is called by:
  9224 ;;		_gameControllerController
  9225 ;; This function uses a non-reentrant model
  9226 ;;
  9227                           
  9228                           	psect	text36
  9229  0022D8                     __ptext36:
  9230                           	callstack 0
  9231  0022D8                     _backlightController:
  9232                           	callstack 21
  9233                           
  9234                           ;gameFunction.c: 193: void backlightController(GameParameters* g);gameFunction.c: 194: {
      +                          ;gameFunction.c: 196:     if(((g->x)>=50)&&((g->x)<64))
  9235                           
  9236                           ;incstack = 0
  9237  0022D8  EE20 F002          	lfsr	2,2
  9238  0022DC  5018               	movf	backlightController@g^0,w,c
  9239  0022DE  26D9               	addwf	fsr2l,f,c
  9240  0022E0  5019               	movf	(backlightController@g+1)^0,w,c
  9241  0022E2  22DA               	addwfc	fsr2h,f,c
  9242  0022E4  0E01               	movlw	1
  9243  0022E6  50DB               	movf	plusw2,w,c
  9244  0022E8  E104               	bnz	u4390
  9245  0022EA  0E32               	movlw	50
  9246  0022EC  5CDE               	subwf	postinc2,w,c
  9247  0022EE  A0D8               	btfss	status,0,c
  9248  0022F0  D018               	goto	l7002
  9249  0022F2                     u4390:
  9250  0022F2  EE20 F002          	lfsr	2,2
  9251  0022F6  5018               	movf	backlightController@g^0,w,c
  9252  0022F8  26D9               	addwf	fsr2l,f,c
  9253  0022FA  5019               	movf	(backlightController@g+1)^0,w,c
  9254  0022FC  22DA               	addwfc	fsr2h,f,c
  9255  0022FE  0E01               	movlw	1
  9256  002300  50DB               	movf	plusw2,w,c
  9257  002302  E10F               	bnz	l7002
  9258  002304  0E40               	movlw	64
  9259  002306  5CDE               	subwf	postinc2,w,c
  9260  002308  B0D8               	btfsc	status,0,c
  9261  00230A  D00B               	goto	l7002
  9262                           
  9263                           ;gameFunction.c: 197:     {;gameFunction.c: 198:         GameParameters_setBackLight(g,0
      +                          );
  9264  00230C  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9265  002310  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9266  002314  0E00               	movlw	0
  9267  002316  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9268  002318  0E00               	movlw	0
  9269  00231A  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9270  00231C  EC89  F02B         	call	_GameParameters_setBackLight	;wreg free
  9271                           
  9272                           ;gameFunction.c: 199:     }
  9273  002320  D196               	goto	l870
  9274  002322                     l7002:
  9275  002322  EE20 F002          	lfsr	2,2
  9276  002326  5018               	movf	backlightController@g^0,w,c
  9277  002328  26D9               	addwf	fsr2l,f,c
  9278  00232A  5019               	movf	(backlightController@g+1)^0,w,c
  9279  00232C  22DA               	addwfc	fsr2h,f,c
  9280  00232E  0E01               	movlw	1
  9281  002330  50DB               	movf	plusw2,w,c
  9282  002332  E104               	bnz	u4410
  9283  002334  0E40               	movlw	64
  9284  002336  5CDE               	subwf	postinc2,w,c
  9285  002338  A0D8               	btfss	status,0,c
  9286  00233A  D018               	goto	l7008
  9287  00233C                     u4410:
  9288  00233C  EE20 F002          	lfsr	2,2
  9289  002340  5018               	movf	backlightController@g^0,w,c
  9290  002342  26D9               	addwf	fsr2l,f,c
  9291  002344  5019               	movf	(backlightController@g+1)^0,w,c
  9292  002346  22DA               	addwfc	fsr2h,f,c
  9293  002348  0E01               	movlw	1
  9294  00234A  50DB               	movf	plusw2,w,c
  9295  00234C  E10F               	bnz	l7008
  9296  00234E  0E4E               	movlw	78
  9297  002350  5CDE               	subwf	postinc2,w,c
  9298  002352  B0D8               	btfsc	status,0,c
  9299  002354  D00B               	goto	l7008
  9300                           
  9301                           ;gameFunction.c: 201:     {;gameFunction.c: 202:         GameParameters_setBackLight(g,1
      +                          );
  9302  002356  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9303  00235A  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9304  00235E  0E00               	movlw	0
  9305  002360  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9306  002362  0E01               	movlw	1
  9307  002364  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9308  002366  EC89  F02B         	call	_GameParameters_setBackLight	;wreg free
  9309                           
  9310                           ;gameFunction.c: 203:     }
  9311  00236A  D171               	goto	l870
  9312  00236C                     l7008:
  9313  00236C  EE20 F002          	lfsr	2,2
  9314  002370  5018               	movf	backlightController@g^0,w,c
  9315  002372  26D9               	addwf	fsr2l,f,c
  9316  002374  5019               	movf	(backlightController@g+1)^0,w,c
  9317  002376  22DA               	addwfc	fsr2h,f,c
  9318  002378  0E01               	movlw	1
  9319  00237A  50DB               	movf	plusw2,w,c
  9320  00237C  E104               	bnz	u4430
  9321  00237E  0E4E               	movlw	78
  9322  002380  5CDE               	subwf	postinc2,w,c
  9323  002382  A0D8               	btfss	status,0,c
  9324  002384  D018               	goto	l7014
  9325  002386                     u4430:
  9326  002386  EE20 F002          	lfsr	2,2
  9327  00238A  5018               	movf	backlightController@g^0,w,c
  9328  00238C  26D9               	addwf	fsr2l,f,c
  9329  00238E  5019               	movf	(backlightController@g+1)^0,w,c
  9330  002390  22DA               	addwfc	fsr2h,f,c
  9331  002392  0E01               	movlw	1
  9332  002394  50DB               	movf	plusw2,w,c
  9333  002396  E10F               	bnz	l7014
  9334  002398  0E5C               	movlw	92
  9335  00239A  5CDE               	subwf	postinc2,w,c
  9336  00239C  B0D8               	btfsc	status,0,c
  9337  00239E  D00B               	goto	l7014
  9338                           
  9339                           ;gameFunction.c: 205:     {;gameFunction.c: 206:         GameParameters_setBackLight(g,2
      +                          );
  9340  0023A0  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9341  0023A4  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9342  0023A8  0E00               	movlw	0
  9343  0023AA  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9344  0023AC  0E02               	movlw	2
  9345  0023AE  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9346  0023B0  EC89  F02B         	call	_GameParameters_setBackLight	;wreg free
  9347                           
  9348                           ;gameFunction.c: 207:     }
  9349  0023B4  D14C               	goto	l870
  9350  0023B6                     l7014:
  9351  0023B6  EE20 F002          	lfsr	2,2
  9352  0023BA  5018               	movf	backlightController@g^0,w,c
  9353  0023BC  26D9               	addwf	fsr2l,f,c
  9354  0023BE  5019               	movf	(backlightController@g+1)^0,w,c
  9355  0023C0  22DA               	addwfc	fsr2h,f,c
  9356  0023C2  0E01               	movlw	1
  9357  0023C4  50DB               	movf	plusw2,w,c
  9358  0023C6  E104               	bnz	u4450
  9359  0023C8  0E5C               	movlw	92
  9360  0023CA  5CDE               	subwf	postinc2,w,c
  9361  0023CC  A0D8               	btfss	status,0,c
  9362  0023CE  D018               	goto	l7020
  9363  0023D0                     u4450:
  9364  0023D0  EE20 F002          	lfsr	2,2
  9365  0023D4  5018               	movf	backlightController@g^0,w,c
  9366  0023D6  26D9               	addwf	fsr2l,f,c
  9367  0023D8  5019               	movf	(backlightController@g+1)^0,w,c
  9368  0023DA  22DA               	addwfc	fsr2h,f,c
  9369  0023DC  0E01               	movlw	1
  9370  0023DE  50DB               	movf	plusw2,w,c
  9371  0023E0  E10F               	bnz	l7020
  9372  0023E2  0E6A               	movlw	106
  9373  0023E4  5CDE               	subwf	postinc2,w,c
  9374  0023E6  B0D8               	btfsc	status,0,c
  9375  0023E8  D00B               	goto	l7020
  9376                           
  9377                           ;gameFunction.c: 209:     {;gameFunction.c: 210:         GameParameters_setBackLight(g,3
      +                          );
  9378  0023EA  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9379  0023EE  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9380  0023F2  0E00               	movlw	0
  9381  0023F4  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9382  0023F6  0E03               	movlw	3
  9383  0023F8  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9384  0023FA  EC89  F02B         	call	_GameParameters_setBackLight	;wreg free
  9385                           
  9386                           ;gameFunction.c: 211:     }
  9387  0023FE  D127               	goto	l870
  9388  002400                     l7020:
  9389  002400  EE20 F002          	lfsr	2,2
  9390  002404  5018               	movf	backlightController@g^0,w,c
  9391  002406  26D9               	addwf	fsr2l,f,c
  9392  002408  5019               	movf	(backlightController@g+1)^0,w,c
  9393  00240A  22DA               	addwfc	fsr2h,f,c
  9394  00240C  0E01               	movlw	1
  9395  00240E  50DB               	movf	plusw2,w,c
  9396  002410  E104               	bnz	u4470
  9397  002412  0E6A               	movlw	106
  9398  002414  5CDE               	subwf	postinc2,w,c
  9399  002416  A0D8               	btfss	status,0,c
  9400  002418  D018               	goto	l7026
  9401  00241A                     u4470:
  9402  00241A  EE20 F002          	lfsr	2,2
  9403  00241E  5018               	movf	backlightController@g^0,w,c
  9404  002420  26D9               	addwf	fsr2l,f,c
  9405  002422  5019               	movf	(backlightController@g+1)^0,w,c
  9406  002424  22DA               	addwfc	fsr2h,f,c
  9407  002426  0E01               	movlw	1
  9408  002428  50DB               	movf	plusw2,w,c
  9409  00242A  E10F               	bnz	l7026
  9410  00242C  0E78               	movlw	120
  9411  00242E  5CDE               	subwf	postinc2,w,c
  9412  002430  B0D8               	btfsc	status,0,c
  9413  002432  D00B               	goto	l7026
  9414                           
  9415                           ;gameFunction.c: 213:     {;gameFunction.c: 214:         GameParameters_setBackLight(g,4
      +                          );
  9416  002434  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9417  002438  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9418  00243C  0E00               	movlw	0
  9419  00243E  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9420  002440  0E04               	movlw	4
  9421  002442  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9422  002444  EC89  F02B         	call	_GameParameters_setBackLight	;wreg free
  9423                           
  9424                           ;gameFunction.c: 215:     }
  9425  002448  D102               	goto	l870
  9426  00244A                     l7026:
  9427  00244A  EE20 F002          	lfsr	2,2
  9428  00244E  5018               	movf	backlightController@g^0,w,c
  9429  002450  26D9               	addwf	fsr2l,f,c
  9430  002452  5019               	movf	(backlightController@g+1)^0,w,c
  9431  002454  22DA               	addwfc	fsr2h,f,c
  9432  002456  0E01               	movlw	1
  9433  002458  50DB               	movf	plusw2,w,c
  9434  00245A  E104               	bnz	u4490
  9435  00245C  0E78               	movlw	120
  9436  00245E  5CDE               	subwf	postinc2,w,c
  9437  002460  A0D8               	btfss	status,0,c
  9438  002462  D018               	goto	l7032
  9439  002464                     u4490:
  9440  002464  EE20 F002          	lfsr	2,2
  9441  002468  5018               	movf	backlightController@g^0,w,c
  9442  00246A  26D9               	addwf	fsr2l,f,c
  9443  00246C  5019               	movf	(backlightController@g+1)^0,w,c
  9444  00246E  22DA               	addwfc	fsr2h,f,c
  9445  002470  0E01               	movlw	1
  9446  002472  50DB               	movf	plusw2,w,c
  9447  002474  E10F               	bnz	l7032
  9448  002476  0E86               	movlw	134
  9449  002478  5CDE               	subwf	postinc2,w,c
  9450  00247A  B0D8               	btfsc	status,0,c
  9451  00247C  D00B               	goto	l7032
  9452                           
  9453                           ;gameFunction.c: 217:     {;gameFunction.c: 218:         GameParameters_setBackLight(g,5
      +                          );
  9454  00247E  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9455  002482  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9456  002486  0E00               	movlw	0
  9457  002488  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9458  00248A  0E05               	movlw	5
  9459  00248C  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9460  00248E  EC89  F02B         	call	_GameParameters_setBackLight	;wreg free
  9461                           
  9462                           ;gameFunction.c: 219:     }
  9463  002492  D0DD               	goto	l870
  9464  002494                     l7032:
  9465  002494  EE20 F002          	lfsr	2,2
  9466  002498  5018               	movf	backlightController@g^0,w,c
  9467  00249A  26D9               	addwf	fsr2l,f,c
  9468  00249C  5019               	movf	(backlightController@g+1)^0,w,c
  9469  00249E  22DA               	addwfc	fsr2h,f,c
  9470  0024A0  0E01               	movlw	1
  9471  0024A2  50DB               	movf	plusw2,w,c
  9472  0024A4  E104               	bnz	u4510
  9473  0024A6  0E86               	movlw	134
  9474  0024A8  5CDE               	subwf	postinc2,w,c
  9475  0024AA  A0D8               	btfss	status,0,c
  9476  0024AC  D018               	goto	l7038
  9477  0024AE                     u4510:
  9478  0024AE  EE20 F002          	lfsr	2,2
  9479  0024B2  5018               	movf	backlightController@g^0,w,c
  9480  0024B4  26D9               	addwf	fsr2l,f,c
  9481  0024B6  5019               	movf	(backlightController@g+1)^0,w,c
  9482  0024B8  22DA               	addwfc	fsr2h,f,c
  9483  0024BA  0E01               	movlw	1
  9484  0024BC  50DB               	movf	plusw2,w,c
  9485  0024BE  E10F               	bnz	l7038
  9486  0024C0  0E96               	movlw	150
  9487  0024C2  5CDE               	subwf	postinc2,w,c
  9488  0024C4  B0D8               	btfsc	status,0,c
  9489  0024C6  D00B               	goto	l7038
  9490                           
  9491                           ;gameFunction.c: 221:     {;gameFunction.c: 222:         GameParameters_setBackLight(g,6
      +                          );
  9492  0024C8  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9493  0024CC  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9494  0024D0  0E00               	movlw	0
  9495  0024D2  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9496  0024D4  0E06               	movlw	6
  9497  0024D6  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9498  0024D8  EC89  F02B         	call	_GameParameters_setBackLight	;wreg free
  9499                           
  9500                           ;gameFunction.c: 223:     }
  9501  0024DC  D0B8               	goto	l870
  9502  0024DE                     l7038:
  9503  0024DE  EE20 F002          	lfsr	2,2
  9504  0024E2  5018               	movf	backlightController@g^0,w,c
  9505  0024E4  26D9               	addwf	fsr2l,f,c
  9506  0024E6  5019               	movf	(backlightController@g+1)^0,w,c
  9507  0024E8  22DA               	addwfc	fsr2h,f,c
  9508  0024EA  0E01               	movlw	1
  9509  0024EC  50DB               	movf	plusw2,w,c
  9510  0024EE  E104               	bnz	u4530
  9511  0024F0  0E96               	movlw	150
  9512  0024F2  5CDE               	subwf	postinc2,w,c
  9513  0024F4  A0D8               	btfss	status,0,c
  9514  0024F6  D018               	goto	l7044
  9515  0024F8                     u4530:
  9516  0024F8  EE20 F002          	lfsr	2,2
  9517  0024FC  5018               	movf	backlightController@g^0,w,c
  9518  0024FE  26D9               	addwf	fsr2l,f,c
  9519  002500  5019               	movf	(backlightController@g+1)^0,w,c
  9520  002502  22DA               	addwfc	fsr2h,f,c
  9521  002504  0E01               	movlw	1
  9522  002506  50DB               	movf	plusw2,w,c
  9523  002508  E10F               	bnz	l7044
  9524  00250A  0EA4               	movlw	164
  9525  00250C  5CDE               	subwf	postinc2,w,c
  9526  00250E  B0D8               	btfsc	status,0,c
  9527  002510  D00B               	goto	l7044
  9528                           
  9529                           ;gameFunction.c: 225:     {;gameFunction.c: 226:         GameParameters_setBackLight(g,7
      +                          );
  9530  002512  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9531  002516  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9532  00251A  0E00               	movlw	0
  9533  00251C  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9534  00251E  0E07               	movlw	7
  9535  002520  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9536  002522  EC89  F02B         	call	_GameParameters_setBackLight	;wreg free
  9537                           
  9538                           ;gameFunction.c: 227:     }
  9539  002526  D093               	goto	l870
  9540  002528                     l7044:
  9541  002528  EE20 F002          	lfsr	2,2
  9542  00252C  5018               	movf	backlightController@g^0,w,c
  9543  00252E  26D9               	addwf	fsr2l,f,c
  9544  002530  5019               	movf	(backlightController@g+1)^0,w,c
  9545  002532  22DA               	addwfc	fsr2h,f,c
  9546  002534  0E01               	movlw	1
  9547  002536  50DB               	movf	plusw2,w,c
  9548  002538  E104               	bnz	u4550
  9549  00253A  0EA4               	movlw	164
  9550  00253C  5CDE               	subwf	postinc2,w,c
  9551  00253E  A0D8               	btfss	status,0,c
  9552  002540  D018               	goto	l7050
  9553  002542                     u4550:
  9554  002542  EE20 F002          	lfsr	2,2
  9555  002546  5018               	movf	backlightController@g^0,w,c
  9556  002548  26D9               	addwf	fsr2l,f,c
  9557  00254A  5019               	movf	(backlightController@g+1)^0,w,c
  9558  00254C  22DA               	addwfc	fsr2h,f,c
  9559  00254E  0E01               	movlw	1
  9560  002550  50DB               	movf	plusw2,w,c
  9561  002552  E10F               	bnz	l7050
  9562  002554  0EB2               	movlw	178
  9563  002556  5CDE               	subwf	postinc2,w,c
  9564  002558  B0D8               	btfsc	status,0,c
  9565  00255A  D00B               	goto	l7050
  9566                           
  9567                           ;gameFunction.c: 229:     {;gameFunction.c: 230:         GameParameters_setBackLight(g,8
      +                          );
  9568  00255C  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9569  002560  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9570  002564  0E00               	movlw	0
  9571  002566  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9572  002568  0E08               	movlw	8
  9573  00256A  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9574  00256C  EC89  F02B         	call	_GameParameters_setBackLight	;wreg free
  9575                           
  9576                           ;gameFunction.c: 231:     }
  9577  002570  D06E               	goto	l870
  9578  002572                     l7050:
  9579  002572  EE20 F002          	lfsr	2,2
  9580  002576  5018               	movf	backlightController@g^0,w,c
  9581  002578  26D9               	addwf	fsr2l,f,c
  9582  00257A  5019               	movf	(backlightController@g+1)^0,w,c
  9583  00257C  22DA               	addwfc	fsr2h,f,c
  9584  00257E  0E01               	movlw	1
  9585  002580  50DB               	movf	plusw2,w,c
  9586  002582  E104               	bnz	u4570
  9587  002584  0EB2               	movlw	178
  9588  002586  5CDE               	subwf	postinc2,w,c
  9589  002588  A0D8               	btfss	status,0,c
  9590  00258A  D018               	goto	l7056
  9591  00258C                     u4570:
  9592  00258C  EE20 F002          	lfsr	2,2
  9593  002590  5018               	movf	backlightController@g^0,w,c
  9594  002592  26D9               	addwf	fsr2l,f,c
  9595  002594  5019               	movf	(backlightController@g+1)^0,w,c
  9596  002596  22DA               	addwfc	fsr2h,f,c
  9597  002598  0E01               	movlw	1
  9598  00259A  50DB               	movf	plusw2,w,c
  9599  00259C  E10F               	bnz	l7056
  9600  00259E  0EC0               	movlw	192
  9601  0025A0  5CDE               	subwf	postinc2,w,c
  9602  0025A2  B0D8               	btfsc	status,0,c
  9603  0025A4  D00B               	goto	l7056
  9604                           
  9605                           ;gameFunction.c: 233:     {;gameFunction.c: 234:         GameParameters_setBackLight(g,9
      +                          );
  9606  0025A6  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9607  0025AA  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9608  0025AE  0E00               	movlw	0
  9609  0025B0  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9610  0025B2  0E09               	movlw	9
  9611  0025B4  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9612  0025B6  EC89  F02B         	call	_GameParameters_setBackLight	;wreg free
  9613                           
  9614                           ;gameFunction.c: 235:     }
  9615  0025BA  D049               	goto	l870
  9616  0025BC                     l7056:
  9617  0025BC  EE20 F002          	lfsr	2,2
  9618  0025C0  5018               	movf	backlightController@g^0,w,c
  9619  0025C2  26D9               	addwf	fsr2l,f,c
  9620  0025C4  5019               	movf	(backlightController@g+1)^0,w,c
  9621  0025C6  22DA               	addwfc	fsr2h,f,c
  9622  0025C8  0E01               	movlw	1
  9623  0025CA  50DB               	movf	plusw2,w,c
  9624  0025CC  E104               	bnz	u4590
  9625  0025CE  0EC0               	movlw	192
  9626  0025D0  5CDE               	subwf	postinc2,w,c
  9627  0025D2  A0D8               	btfss	status,0,c
  9628  0025D4  D018               	goto	l7062
  9629  0025D6                     u4590:
  9630  0025D6  EE20 F002          	lfsr	2,2
  9631  0025DA  5018               	movf	backlightController@g^0,w,c
  9632  0025DC  26D9               	addwf	fsr2l,f,c
  9633  0025DE  5019               	movf	(backlightController@g+1)^0,w,c
  9634  0025E0  22DA               	addwfc	fsr2h,f,c
  9635  0025E2  0E01               	movlw	1
  9636  0025E4  50DB               	movf	plusw2,w,c
  9637  0025E6  E10F               	bnz	l7062
  9638  0025E8  0ECE               	movlw	206
  9639  0025EA  5CDE               	subwf	postinc2,w,c
  9640  0025EC  B0D8               	btfsc	status,0,c
  9641  0025EE  D00B               	goto	l7062
  9642                           
  9643                           ;gameFunction.c: 237:     {;gameFunction.c: 238:         GameParameters_setBackLight(g,1
      +                          0);
  9644  0025F0  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9645  0025F4  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9646  0025F8  0E00               	movlw	0
  9647  0025FA  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9648  0025FC  0E0A               	movlw	10
  9649  0025FE  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9650  002600  EC89  F02B         	call	_GameParameters_setBackLight	;wreg free
  9651                           
  9652                           ;gameFunction.c: 239:     }
  9653  002604  D024               	goto	l870
  9654  002606                     l7062:
  9655  002606  EE20 F002          	lfsr	2,2
  9656  00260A  5018               	movf	backlightController@g^0,w,c
  9657  00260C  26D9               	addwf	fsr2l,f,c
  9658  00260E  5019               	movf	(backlightController@g+1)^0,w,c
  9659  002610  22DA               	addwfc	fsr2h,f,c
  9660  002612  0E01               	movlw	1
  9661  002614  50DB               	movf	plusw2,w,c
  9662  002616  E104               	bnz	u4610
  9663  002618  0ECE               	movlw	206
  9664  00261A  5CDE               	subwf	postinc2,w,c
  9665  00261C  A0D8               	btfss	status,0,c
  9666  00261E  D017               	goto	l870
  9667  002620                     u4610:
  9668  002620  EE20 F002          	lfsr	2,2
  9669  002624  5018               	movf	backlightController@g^0,w,c
  9670  002626  26D9               	addwf	fsr2l,f,c
  9671  002628  5019               	movf	(backlightController@g+1)^0,w,c
  9672  00262A  22DA               	addwfc	fsr2h,f,c
  9673  00262C  0E01               	movlw	1
  9674  00262E  50DB               	movf	plusw2,w,c
  9675  002630  E10E               	bnz	l870
  9676  002632  0ED7               	movlw	215
  9677  002634  5CDE               	subwf	postinc2,w,c
  9678  002636  B0D8               	btfsc	status,0,c
  9679  002638  D00A               	goto	l870
  9680                           
  9681                           ;gameFunction.c: 241:     {;gameFunction.c: 242:         GameParameters_setBackLight(g,1
      +                          1);
  9682  00263A  C018  F012         	movff	backlightController@g,GameParameters_setBackLight@s
  9683  00263E  C019  F013         	movff	backlightController@g+1,GameParameters_setBackLight@s+1
  9684  002642  0E00               	movlw	0
  9685  002644  6E15               	movwf	(GameParameters_setBackLight@value+1)^0,c
  9686  002646  0E0B               	movlw	11
  9687  002648  6E14               	movwf	GameParameters_setBackLight@value^0,c
  9688  00264A  EC89  F02B         	call	_GameParameters_setBackLight	;wreg free
  9689  00264E                     l870:
  9690                           
  9691                           ;gameFunction.c: 244:     g->sldBackLight.value=g->backlight;
  9692  00264E  C018  FFD9         	movff	backlightController@g,fsr2l
  9693  002652  C019  FFDA         	movff	backlightController@g+1,fsr2h
  9694  002656  EE10 F0A9          	lfsr	1,169
  9695  00265A  5018               	movf	backlightController@g^0,w,c
  9696  00265C  26E1               	addwf	fsr1l,f,c
  9697  00265E  5019               	movf	(backlightController@g+1)^0,w,c
  9698  002660  22E2               	addwfc	fsr1h,f,c
  9699  002662  CFDE FFE6          	movff	postinc2,postinc1
  9700  002666  CFDD FFE5          	movff	postdec2,postdec1
  9701  00266A  0012               	return		;funcret
  9702  00266C                     __end_of_backlightController:
  9703                           	callstack 0
  9704                           
  9705 ;; *************** function _GameParameters_setBackLight *****************
  9706 ;; Defined at:
  9707 ;;		line 38 in file "class/gameParameters.c"
  9708 ;; Parameters:    Size  Location     Type
  9709 ;;  s               2   17[COMRAM] PTR struct GameParameter
  9710 ;;		 -> g1(240), 
  9711 ;;  value           2   19[COMRAM] unsigned short 
  9712 ;; Auto vars:     Size  Location     Type
  9713 ;;		None
  9714 ;; Return value:  Size  Location     Type
  9715 ;;                  1    wreg      void 
  9716 ;; Registers used:
  9717 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9718 ;; Tracked objects:
  9719 ;;		On entry : 0/0
  9720 ;;		On exit  : 0/0
  9721 ;;		Unchanged: 0/0
  9722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9723 ;;      Params:         4       0       0       0       0       0       0
  9724 ;;      Locals:         0       0       0       0       0       0       0
  9725 ;;      Temps:          2       0       0       0       0       0       0
  9726 ;;      Totals:         6       0       0       0       0       0       0
  9727 ;;Total ram usage:        6 bytes
  9728 ;; Hardware stack levels used: 1
  9729 ;; Hardware stack levels required when called: 4
  9730 ;; This function calls:
  9731 ;;		Nothing
  9732 ;; This function is called by:
  9733 ;;		_backlightController
  9734 ;; This function uses a non-reentrant model
  9735 ;;
  9736                           
  9737                           	psect	text37
  9738  005712                     __ptext37:
  9739                           	callstack 0
  9740  005712                     _GameParameters_setBackLight:
  9741                           	callstack 21
  9742                           
  9743                           ;class/gameParameters.c: 38: void GameParameters_setBackLight(struct GameParameters* s, 
      +                          uint16_t value);class/gameParameters.c: 39: {;class/gameParameters.c: 40:     s->backlig
      +                          ht = value;
  9744                           
  9745                           ;incstack = 0
  9746  005712  C012  FFD9         	movff	GameParameters_setBackLight@s,fsr2l
  9747  005716  C013  FFDA         	movff	GameParameters_setBackLight@s+1,fsr2h
  9748  00571A  C014  FFDE         	movff	GameParameters_setBackLight@value,postinc2
  9749  00571E  C015  FFDD         	movff	GameParameters_setBackLight@value+1,postdec2
  9750                           
  9751                           ;class/gameParameters.c: 41:     if(s->backlight==11)
  9752  005722  C012  FFD9         	movff	GameParameters_setBackLight@s,fsr2l
  9753  005726  C013  FFDA         	movff	GameParameters_setBackLight@s+1,fsr2h
  9754  00572A  0E0B               	movlw	11
  9755  00572C  18DE               	xorwf	postinc2,w,c
  9756  00572E  10DE               	iorwf	postinc2,w,c
  9757  005730  A4D8               	btfss	status,2,c
  9758  005732  D002               	goto	l6668
  9759                           
  9760                           ;class/gameParameters.c: 42:     {;class/gameParameters.c: 43:         CCPR2L = 255;
  9761  005734  6867               	setf	103,c	;volatile
  9762                           
  9763                           ;class/gameParameters.c: 44:     }
  9764  005736  0012               	return	
  9765  005738                     l6668:
  9766                           
  9767                           ;class/gameParameters.c: 46:     {;class/gameParameters.c: 47:         CCPR2L=(s->backli
      +                          ght)*23;
  9768  005738  C012  FFD9         	movff	GameParameters_setBackLight@s,fsr2l
  9769  00573C  C013  FFDA         	movff	GameParameters_setBackLight@s+1,fsr2h
  9770  005740  50DF               	movf	indf2,w,c
  9771  005742  0D17               	mullw	23
  9772  005744  CFF3 FF67          	movff	prodl,3943	;volatile
  9773  005748  0012               	return		;funcret
  9774  00574A                     __end_of_GameParameters_setBackLight:
  9775                           	callstack 0
  9776                           
  9777 ;; *************** function _XF_scheduleTimer *****************
  9778 ;; Defined at:
  9779 ;;		line 96 in file "xf/xf.c"
  9780 ;; Parameters:    Size  Location     Type
  9781 ;;  tm              2   31[COMRAM] unsigned short 
  9782 ;;  ev              1   33[COMRAM] unsigned char 
  9783 ;;  inISR           1   34[COMRAM] _Bool 
  9784 ;; Auto vars:     Size  Location     Type
  9785 ;;  i               1   35[COMRAM] unsigned char 
  9786 ;; Return value:  Size  Location     Type
  9787 ;;                  1    wreg      unsigned char 
  9788 ;; Registers used:
  9789 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9790 ;; Tracked objects:
  9791 ;;		On entry : 0/0
  9792 ;;		On exit  : 0/0
  9793 ;;		Unchanged: 0/0
  9794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9795 ;;      Params:         4       0       0       0       0       0       0
  9796 ;;      Locals:         1       0       0       0       0       0       0
  9797 ;;      Temps:          0       0       0       0       0       0       0
  9798 ;;      Totals:         5       0       0       0       0       0       0
  9799 ;;Total ram usage:        5 bytes
  9800 ;; Hardware stack levels used: 1
  9801 ;; Hardware stack levels required when called: 5
  9802 ;; This function calls:
  9803 ;;		_ENTERCRITICAL
  9804 ;;		_LEAVECRITICAL
  9805 ;; This function is called by:
  9806 ;;		_touchScreenInit
  9807 ;;		_touchScreenController
  9808 ;;		_gameControllerSM
  9809 ;;		_gameControllerController
  9810 ;; This function uses a non-reentrant model
  9811 ;;
  9812                           
  9813                           	psect	text38
  9814  0053FE                     __ptext38:
  9815                           	callstack 0
  9816  0053FE                     _XF_scheduleTimer:
  9817                           	callstack 22
  9818                           
  9819                           ;xf/xf.c: 96: TimerID XF_scheduleTimer(Time tm, Event ev, _Bool inISR);xf/xf.c: 97: {;xf
      +                          /xf.c: 98:     uint8_t i;;xf/xf.c: 100:     ENTERCRITICAL(inISR);
  9820                           
  9821                           ;incstack = 0
  9822  0053FE  5023               	movf	XF_scheduleTimer@inISR^0,w,c
  9823  005400  EC25  F02D         	call	_ENTERCRITICAL
  9824                           
  9825                           ;xf/xf.c: 101:     for (i=0; i<8; i++)
  9826  005404  0E00               	movlw	0
  9827  005406  6E24               	movwf	XF_scheduleTimer@i^0,c
  9828  005408                     l6984:
  9829                           
  9830                           ;xf/xf.c: 102:     {;xf/xf.c: 103:         if (theXF.timerList[i].ev == NULLEVENT)
  9831  005408  5024               	movf	XF_scheduleTimer@i^0,w,c
  9832  00540A  0D03               	mullw	3
  9833  00540C  50F3               	movf	243,w,c
  9834  00540E  0F62               	addlw	low (_theXF+2)
  9835  005410  6ED9               	movwf	fsr2l,c
  9836  005412  6ADA               	clrf	fsr2h,c
  9837  005414  50DF               	movf	indf2,w,c
  9838  005416  A4D8               	btfss	status,2,c
  9839  005418  D013               	goto	l6988
  9840                           
  9841                           ;xf/xf.c: 104:         {;xf/xf.c: 105:             theXF.timerList[i].tm = tm;
  9842  00541A  5024               	movf	XF_scheduleTimer@i^0,w,c
  9843  00541C  0D03               	mullw	3
  9844  00541E  50F3               	movf	243,w,c
  9845  005420  0F60               	addlw	low _theXF
  9846  005422  6ED9               	movwf	fsr2l,c
  9847  005424  6ADA               	clrf	fsr2h,c
  9848  005426  C020  FFDE         	movff	XF_scheduleTimer@tm,postinc2
  9849  00542A  C021  FFDD         	movff	XF_scheduleTimer@tm+1,postdec2
  9850                           
  9851                           ;xf/xf.c: 106:             theXF.timerList[i].ev = ev;
  9852  00542E  5024               	movf	XF_scheduleTimer@i^0,w,c
  9853  005430  0D03               	mullw	3
  9854  005432  50F3               	movf	243,w,c
  9855  005434  0F62               	addlw	low (_theXF+2)
  9856  005436  6ED9               	movwf	fsr2l,c
  9857  005438  6ADA               	clrf	fsr2h,c
  9858  00543A  C022  FFDF         	movff	XF_scheduleTimer@ev,indf2
  9859                           
  9860                           ;xf/xf.c: 107:             break;
  9861  00543E  D004               	goto	u4380
  9862  005440                     l6988:
  9863                           
  9864                           ;xf/xf.c: 109:     }
  9865  005440  2A24               	incf	XF_scheduleTimer@i^0,f,c
  9866  005442  0E07               	movlw	7
  9867  005444  6424               	cpfsgt	XF_scheduleTimer@i^0,c
  9868  005446  D7E0               	goto	l6984
  9869  005448                     u4380:
  9870                           
  9871                           ;xf/xf.c: 114:     LEAVECRITICAL(inISR);
  9872  005448  5023               	movf	XF_scheduleTimer@inISR^0,w,c
  9873  00544A  EC1F  F02D         	call	_LEAVECRITICAL
  9874  00544E  0012               	return		;funcret
  9875  005450                     __end_of_XF_scheduleTimer:
  9876                           	callstack 0
  9877                           
  9878 ;; *************** function _LCD_InSlider *****************
  9879 ;; Defined at:
  9880 ;;		line 546 in file "libraries/lcd_highlevel.c"
  9881 ;; Parameters:    Size  Location     Type
  9882 ;;  slider          2   17[COMRAM] PTR struct .
  9883 ;;		 -> g1(240), 
  9884 ;;  posX            2   19[COMRAM] unsigned short 
  9885 ;;  posY            2   21[COMRAM] unsigned short 
  9886 ;; Auto vars:     Size  Location     Type
  9887 ;;		None
  9888 ;; Return value:  Size  Location     Type
  9889 ;;                  1    wreg      unsigned char 
  9890 ;; Registers used:
  9891 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9892 ;; Tracked objects:
  9893 ;;		On entry : 0/0
  9894 ;;		On exit  : 0/0
  9895 ;;		Unchanged: 0/0
  9896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9897 ;;      Params:         6       0       0       0       0       0       0
  9898 ;;      Locals:         0       0       0       0       0       0       0
  9899 ;;      Temps:          4       0       0       0       0       0       0
  9900 ;;      Totals:        10       0       0       0       0       0       0
  9901 ;;Total ram usage:       10 bytes
  9902 ;; Hardware stack levels used: 1
  9903 ;; Hardware stack levels required when called: 4
  9904 ;; This function calls:
  9905 ;;		Nothing
  9906 ;; This function is called by:
  9907 ;;		_gameControllerController
  9908 ;; This function uses a non-reentrant model
  9909 ;;
  9910                           
  9911                           	psect	text39
  9912  004AAE                     __ptext39:
  9913                           	callstack 0
  9914  004AAE                     _LCD_InSlider:
  9915                           	callstack 22
  9916                           
  9917                           ;libraries/lcd_highlevel.c: 546: uint8_t LCD_InSlider(sld_t * slider, uint16_t posX, uin
      +                          t16_t posY);libraries/lcd_highlevel.c: 547: {;libraries/lcd_highlevel.c: 549:   if(posX 
      +                          < slider->posX)
  9918                           
  9919                           ;incstack = 0
  9920  004AAE  C012  FFD9         	movff	LCD_InSlider@slider,fsr2l
  9921  004AB2  C013  FFDA         	movff	LCD_InSlider@slider+1,fsr2h
  9922  004AB6  50DE               	movf	postinc2,w,c
  9923  004AB8  5C14               	subwf	LCD_InSlider@posX^0,w,c
  9924  004ABA  50DE               	movf	postinc2,w,c
  9925  004ABC  5815               	subwfb	(LCD_InSlider@posX+1)^0,w,c
  9926  004ABE  B0D8               	btfsc	status,0,c
  9927  004AC0  D002               	goto	l6936
  9928  004AC2                     u4330:
  9929                           
  9930                           ;libraries/lcd_highlevel.c: 550:   {;libraries/lcd_highlevel.c: 551:     return 0;
  9931  004AC2  0E00               	movlw	0
  9932  004AC4  0012               	return	
  9933  004AC6                     l6936:
  9934                           
  9935                           ;libraries/lcd_highlevel.c: 554:   if(posX > (slider->posX + slider->width))
  9936  004AC6  EE20 F004          	lfsr	2,4
  9937  004ACA  5012               	movf	LCD_InSlider@slider^0,w,c
  9938  004ACC  26D9               	addwf	fsr2l,f,c
  9939  004ACE  5013               	movf	(LCD_InSlider@slider+1)^0,w,c
  9940  004AD0  22DA               	addwfc	fsr2h,f,c
  9941  004AD2  CFDE F018          	movff	postinc2,??_LCD_InSlider
  9942  004AD6  CFDD F019          	movff	postdec2,??_LCD_InSlider+1
  9943  004ADA  C012  FFD9         	movff	LCD_InSlider@slider,fsr2l
  9944  004ADE  C013  FFDA         	movff	LCD_InSlider@slider+1,fsr2h
  9945  004AE2  CFDE F01A          	movff	postinc2,??_LCD_InSlider+2
  9946  004AE6  CFDD F01B          	movff	postdec2,??_LCD_InSlider+3
  9947  004AEA  5018               	movf	??_LCD_InSlider^0,w,c
  9948  004AEC  261A               	addwf	(??_LCD_InSlider+2)^0,f,c
  9949  004AEE  5019               	movf	(??_LCD_InSlider+1)^0,w,c
  9950  004AF0  221B               	addwfc	(??_LCD_InSlider+3)^0,f,c
  9951  004AF2  5014               	movf	LCD_InSlider@posX^0,w,c
  9952  004AF4  5C1A               	subwf	(??_LCD_InSlider+2)^0,w,c
  9953  004AF6  5015               	movf	(LCD_InSlider@posX+1)^0,w,c
  9954  004AF8  581B               	subwfb	(??_LCD_InSlider+3)^0,w,c
  9955  004AFA  A0D8               	btfss	status,0,c
  9956  004AFC  D7E2               	goto	u4330
  9957                           
  9958                           ;libraries/lcd_highlevel.c: 559:   if(posY < slider->posY)
  9959  004AFE  EE20 F002          	lfsr	2,2
  9960  004B02  5012               	movf	LCD_InSlider@slider^0,w,c
  9961  004B04  26D9               	addwf	fsr2l,f,c
  9962  004B06  5013               	movf	(LCD_InSlider@slider+1)^0,w,c
  9963  004B08  22DA               	addwfc	fsr2h,f,c
  9964  004B0A  50DE               	movf	postinc2,w,c
  9965  004B0C  5C16               	subwf	LCD_InSlider@posY^0,w,c
  9966  004B0E  50DE               	movf	postinc2,w,c
  9967  004B10  5817               	subwfb	(LCD_InSlider@posY+1)^0,w,c
  9968  004B12  A0D8               	btfss	status,0,c
  9969  004B14  D7D6               	goto	u4330
  9970                           
  9971                           ;libraries/lcd_highlevel.c: 564:   if(posY > (slider->posY + slider->height))
  9972  004B16  EE20 F006          	lfsr	2,6
  9973  004B1A  5012               	movf	LCD_InSlider@slider^0,w,c
  9974  004B1C  26D9               	addwf	fsr2l,f,c
  9975  004B1E  5013               	movf	(LCD_InSlider@slider+1)^0,w,c
  9976  004B20  22DA               	addwfc	fsr2h,f,c
  9977  004B22  CFDE F018          	movff	postinc2,??_LCD_InSlider
  9978  004B26  CFDD F019          	movff	postdec2,??_LCD_InSlider+1
  9979  004B2A  EE20 F002          	lfsr	2,2
  9980  004B2E  5012               	movf	LCD_InSlider@slider^0,w,c
  9981  004B30  26D9               	addwf	fsr2l,f,c
  9982  004B32  5013               	movf	(LCD_InSlider@slider+1)^0,w,c
  9983  004B34  22DA               	addwfc	fsr2h,f,c
  9984  004B36  CFDE F01A          	movff	postinc2,??_LCD_InSlider+2
  9985  004B3A  CFDD F01B          	movff	postdec2,??_LCD_InSlider+3
  9986  004B3E  5018               	movf	??_LCD_InSlider^0,w,c
  9987  004B40  261A               	addwf	(??_LCD_InSlider+2)^0,f,c
  9988  004B42  5019               	movf	(??_LCD_InSlider+1)^0,w,c
  9989  004B44  221B               	addwfc	(??_LCD_InSlider+3)^0,f,c
  9990  004B46  5016               	movf	LCD_InSlider@posY^0,w,c
  9991  004B48  5C1A               	subwf	(??_LCD_InSlider+2)^0,w,c
  9992  004B4A  5017               	movf	(LCD_InSlider@posY+1)^0,w,c
  9993  004B4C  581B               	subwfb	(??_LCD_InSlider+3)^0,w,c
  9994  004B4E  A0D8               	btfss	status,0,c
  9995  004B50  D7B8               	goto	u4330
  9996                           
  9997                           ;libraries/lcd_highlevel.c: 568:   return 1;
  9998  004B52  0E01               	movlw	1
  9999  004B54  0012               	return		;funcret
 10000  004B56                     __end_of_LCD_InSlider:
 10001                           	callstack 0
 10002                           
 10003 ;; *************** function _LCD_InButton *****************
 10004 ;; Defined at:
 10005 ;;		line 514 in file "libraries/lcd_highlevel.c"
 10006 ;; Parameters:    Size  Location     Type
 10007 ;;  button          2   17[COMRAM] PTR struct .
 10008 ;;		 -> g1(240), 
 10009 ;;  posX            2   19[COMRAM] unsigned short 
 10010 ;;  posY            2   21[COMRAM] unsigned short 
 10011 ;; Auto vars:     Size  Location     Type
 10012 ;;		None
 10013 ;; Return value:  Size  Location     Type
 10014 ;;                  1    wreg      unsigned char 
 10015 ;; Registers used:
 10016 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10017 ;; Tracked objects:
 10018 ;;		On entry : 0/0
 10019 ;;		On exit  : 0/0
 10020 ;;		Unchanged: 0/0
 10021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10022 ;;      Params:         6       0       0       0       0       0       0
 10023 ;;      Locals:         0       0       0       0       0       0       0
 10024 ;;      Temps:          4       0       0       0       0       0       0
 10025 ;;      Totals:        10       0       0       0       0       0       0
 10026 ;;Total ram usage:       10 bytes
 10027 ;; Hardware stack levels used: 1
 10028 ;; Hardware stack levels required when called: 4
 10029 ;; This function calls:
 10030 ;;		Nothing
 10031 ;; This function is called by:
 10032 ;;		_gameControllerController
 10033 ;; This function uses a non-reentrant model
 10034 ;;
 10035                           
 10036                           	psect	text40
 10037  004B56                     __ptext40:
 10038                           	callstack 0
 10039  004B56                     _LCD_InButton:
 10040                           	callstack 22
 10041                           
 10042                           ;libraries/lcd_highlevel.c: 514: uint8_t LCD_InButton(btn_t * button, uint16_t posX, uin
      +                          t16_t posY);libraries/lcd_highlevel.c: 515: {;libraries/lcd_highlevel.c: 517:   if(posX 
      +                          < button->posX)
 10043                           
 10044                           ;incstack = 0
 10045  004B56  C012  FFD9         	movff	LCD_InButton@button,fsr2l
 10046  004B5A  C013  FFDA         	movff	LCD_InButton@button+1,fsr2h
 10047  004B5E  50DE               	movf	postinc2,w,c
 10048  004B60  5C14               	subwf	LCD_InButton@posX^0,w,c
 10049  004B62  50DE               	movf	postinc2,w,c
 10050  004B64  5815               	subwfb	(LCD_InButton@posX+1)^0,w,c
 10051  004B66  B0D8               	btfsc	status,0,c
 10052  004B68  D002               	goto	l6908
 10053  004B6A                     u4290:
 10054                           
 10055                           ;libraries/lcd_highlevel.c: 518:   {;libraries/lcd_highlevel.c: 519:     return 0;
 10056  004B6A  0E00               	movlw	0
 10057  004B6C  0012               	return	
 10058  004B6E                     l6908:
 10059                           
 10060                           ;libraries/lcd_highlevel.c: 522:   if(posX > (button->posX + button->width))
 10061  004B6E  EE20 F004          	lfsr	2,4
 10062  004B72  5012               	movf	LCD_InButton@button^0,w,c
 10063  004B74  26D9               	addwf	fsr2l,f,c
 10064  004B76  5013               	movf	(LCD_InButton@button+1)^0,w,c
 10065  004B78  22DA               	addwfc	fsr2h,f,c
 10066  004B7A  CFDE F018          	movff	postinc2,??_LCD_InButton
 10067  004B7E  CFDD F019          	movff	postdec2,??_LCD_InButton+1
 10068  004B82  C012  FFD9         	movff	LCD_InButton@button,fsr2l
 10069  004B86  C013  FFDA         	movff	LCD_InButton@button+1,fsr2h
 10070  004B8A  CFDE F01A          	movff	postinc2,??_LCD_InButton+2
 10071  004B8E  CFDD F01B          	movff	postdec2,??_LCD_InButton+3
 10072  004B92  5018               	movf	??_LCD_InButton^0,w,c
 10073  004B94  261A               	addwf	(??_LCD_InButton+2)^0,f,c
 10074  004B96  5019               	movf	(??_LCD_InButton+1)^0,w,c
 10075  004B98  221B               	addwfc	(??_LCD_InButton+3)^0,f,c
 10076  004B9A  5014               	movf	LCD_InButton@posX^0,w,c
 10077  004B9C  5C1A               	subwf	(??_LCD_InButton+2)^0,w,c
 10078  004B9E  5015               	movf	(LCD_InButton@posX+1)^0,w,c
 10079  004BA0  581B               	subwfb	(??_LCD_InButton+3)^0,w,c
 10080  004BA2  A0D8               	btfss	status,0,c
 10081  004BA4  D7E2               	goto	u4290
 10082                           
 10083                           ;libraries/lcd_highlevel.c: 527:   if(posY < button->posY)
 10084  004BA6  EE20 F002          	lfsr	2,2
 10085  004BAA  5012               	movf	LCD_InButton@button^0,w,c
 10086  004BAC  26D9               	addwf	fsr2l,f,c
 10087  004BAE  5013               	movf	(LCD_InButton@button+1)^0,w,c
 10088  004BB0  22DA               	addwfc	fsr2h,f,c
 10089  004BB2  50DE               	movf	postinc2,w,c
 10090  004BB4  5C16               	subwf	LCD_InButton@posY^0,w,c
 10091  004BB6  50DE               	movf	postinc2,w,c
 10092  004BB8  5817               	subwfb	(LCD_InButton@posY+1)^0,w,c
 10093  004BBA  A0D8               	btfss	status,0,c
 10094  004BBC  D7D6               	goto	u4290
 10095                           
 10096                           ;libraries/lcd_highlevel.c: 532:   if(posY > (button->posY + button->height))
 10097  004BBE  EE20 F006          	lfsr	2,6
 10098  004BC2  5012               	movf	LCD_InButton@button^0,w,c
 10099  004BC4  26D9               	addwf	fsr2l,f,c
 10100  004BC6  5013               	movf	(LCD_InButton@button+1)^0,w,c
 10101  004BC8  22DA               	addwfc	fsr2h,f,c
 10102  004BCA  CFDE F018          	movff	postinc2,??_LCD_InButton
 10103  004BCE  CFDD F019          	movff	postdec2,??_LCD_InButton+1
 10104  004BD2  EE20 F002          	lfsr	2,2
 10105  004BD6  5012               	movf	LCD_InButton@button^0,w,c
 10106  004BD8  26D9               	addwf	fsr2l,f,c
 10107  004BDA  5013               	movf	(LCD_InButton@button+1)^0,w,c
 10108  004BDC  22DA               	addwfc	fsr2h,f,c
 10109  004BDE  CFDE F01A          	movff	postinc2,??_LCD_InButton+2
 10110  004BE2  CFDD F01B          	movff	postdec2,??_LCD_InButton+3
 10111  004BE6  5018               	movf	??_LCD_InButton^0,w,c
 10112  004BE8  261A               	addwf	(??_LCD_InButton+2)^0,f,c
 10113  004BEA  5019               	movf	(??_LCD_InButton+1)^0,w,c
 10114  004BEC  221B               	addwfc	(??_LCD_InButton+3)^0,f,c
 10115  004BEE  5016               	movf	LCD_InButton@posY^0,w,c
 10116  004BF0  5C1A               	subwf	(??_LCD_InButton+2)^0,w,c
 10117  004BF2  5017               	movf	(LCD_InButton@posY+1)^0,w,c
 10118  004BF4  581B               	subwfb	(??_LCD_InButton+3)^0,w,c
 10119  004BF6  A0D8               	btfss	status,0,c
 10120  004BF8  D7B8               	goto	u4290
 10121                           
 10122                           ;libraries/lcd_highlevel.c: 536:   return 1;
 10123  004BFA  0E01               	movlw	1
 10124  004BFC  0012               	return		;funcret
 10125  004BFE                     __end_of_LCD_InButton:
 10126                           	callstack 0
 10127                           
 10128 ;; *************** function _GameParameters_init *****************
 10129 ;; Defined at:
 10130 ;;		line 7 in file "class/gameParameters.c"
 10131 ;; Parameters:    Size  Location     Type
 10132 ;;  s               2   42[COMRAM] PTR struct GameParameter
 10133 ;;		 -> g1(240), 
 10134 ;; Auto vars:     Size  Location     Type
 10135 ;;		None
 10136 ;; Return value:  Size  Location     Type
 10137 ;;                  1    wreg      void 
 10138 ;; Registers used:
 10139 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10140 ;; Tracked objects:
 10141 ;;		On entry : 0/0
 10142 ;;		On exit  : 0/0
 10143 ;;		Unchanged: 0/0
 10144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10145 ;;      Params:         2       0       0       0       0       0       0
 10146 ;;      Locals:         0       0       0       0       0       0       0
 10147 ;;      Temps:          0       0       0       0       0       0       0
 10148 ;;      Totals:         2       0       0       0       0       0       0
 10149 ;;Total ram usage:        2 bytes
 10150 ;; Hardware stack levels used: 1
 10151 ;; Hardware stack levels required when called: 5
 10152 ;; This function calls:
 10153 ;;		_Ball_init
 10154 ;;		_LCD_ButtonCreate
 10155 ;;		_LCD_SliderCreate
 10156 ;;		_Paddle_init
 10157 ;;		_Score_init
 10158 ;; This function is called by:
 10159 ;;		_Factory_init
 10160 ;;		_gameControllerController
 10161 ;; This function uses a non-reentrant model
 10162 ;;
 10163                           
 10164                           	psect	text41
 10165  001B20                     __ptext41:
 10166                           	callstack 0
 10167  001B20                     _GameParameters_init:
 10168                           	callstack 21
 10169                           
 10170                           ;class/gameParameters.c: 7: void GameParameters_init(struct GameParameters* s);class/gam
      +                          eParameters.c: 8: {;class/gameParameters.c: 10:     s->backlight = 11;
 10171                           
 10172                           ;incstack = 0
 10173  001B20  C02B  FFD9         	movff	GameParameters_init@s,fsr2l
 10174  001B24  C02C  FFDA         	movff	GameParameters_init@s+1,fsr2h
 10175  001B28  0E0B               	movlw	11
 10176  001B2A  6EDE               	movwf	postinc2,c
 10177  001B2C  0E00               	movlw	0
 10178  001B2E  6EDD               	movwf	postdec2,c
 10179                           
 10180                           ;class/gameParameters.c: 11:     CCPR2L = 255;
 10181  001B30  6867               	setf	103,c	;volatile
 10182                           
 10183                           ;class/gameParameters.c: 12:     s->x=0;
 10184  001B32  EE20 F002          	lfsr	2,2
 10185  001B36  502B               	movf	GameParameters_init@s^0,w,c
 10186  001B38  26D9               	addwf	fsr2l,f,c
 10187  001B3A  502C               	movf	(GameParameters_init@s+1)^0,w,c
 10188  001B3C  22DA               	addwfc	fsr2h,f,c
 10189  001B3E  0E00               	movlw	0
 10190  001B40  6EDE               	movwf	postinc2,c
 10191  001B42  0E00               	movlw	0
 10192  001B44  6EDD               	movwf	postdec2,c
 10193                           
 10194                           ;class/gameParameters.c: 13:     s->y=0;
 10195  001B46  EE20 F004          	lfsr	2,4
 10196  001B4A  502B               	movf	GameParameters_init@s^0,w,c
 10197  001B4C  26D9               	addwf	fsr2l,f,c
 10198  001B4E  502C               	movf	(GameParameters_init@s+1)^0,w,c
 10199  001B50  22DA               	addwfc	fsr2h,f,c
 10200  001B52  0E00               	movlw	0
 10201  001B54  6EDE               	movwf	postinc2,c
 10202  001B56  0E00               	movlw	0
 10203  001B58  6EDD               	movwf	postdec2,c
 10204                           
 10205                           ;class/gameParameters.c: 14:     s->level=1;
 10206  001B5A  EE20 F006          	lfsr	2,6
 10207  001B5E  502B               	movf	GameParameters_init@s^0,w,c
 10208  001B60  26D9               	addwf	fsr2l,f,c
 10209  001B62  502C               	movf	(GameParameters_init@s+1)^0,w,c
 10210  001B64  22DA               	addwfc	fsr2h,f,c
 10211  001B66  0E01               	movlw	1
 10212  001B68  6EDE               	movwf	postinc2,c
 10213  001B6A  0E00               	movlw	0
 10214  001B6C  6EDD               	movwf	postdec2,c
 10215                           
 10216                           ;class/gameParameters.c: 15:     Score_init(&s->s1);
 10217  001B6E  0EEA               	movlw	234
 10218  001B70  242B               	addwf	GameParameters_init@s^0,w,c
 10219  001B72  6E12               	movwf	Score_init@s^0,c
 10220  001B74  0E00               	movlw	0
 10221  001B76  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10222  001B78  6E13               	movwf	(Score_init@s+1)^0,c
 10223  001B7A  EC93  F02C         	call	_Score_init	;wreg free
 10224                           
 10225                           ;class/gameParameters.c: 16:     Ball_init(&(s->b));
 10226  001B7E  0ECA               	movlw	202
 10227  001B80  242B               	addwf	GameParameters_init@s^0,w,c
 10228  001B82  6E12               	movwf	Ball_init@b^0,c
 10229  001B84  0E00               	movlw	0
 10230  001B86  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10231  001B88  6E13               	movwf	(Ball_init@b+1)^0,c
 10232  001B8A  EC76  F029         	call	_Ball_init	;wreg free
 10233                           
 10234                           ;class/gameParameters.c: 17:     s->b.dy=1;
 10235  001B8E  EE20 F0D4          	lfsr	2,212
 10236  001B92  502B               	movf	GameParameters_init@s^0,w,c
 10237  001B94  26D9               	addwf	fsr2l,f,c
 10238  001B96  502C               	movf	(GameParameters_init@s+1)^0,w,c
 10239  001B98  22DA               	addwfc	fsr2h,f,c
 10240  001B9A  0E01               	movlw	1
 10241  001B9C  6EDE               	movwf	postinc2,c
 10242  001B9E  0E00               	movlw	0
 10243  001BA0  6EDD               	movwf	postdec2,c
 10244                           
 10245                           ;class/gameParameters.c: 18:     Paddle_init(&(s->p1),0);
 10246  001BA2  0ED6               	movlw	214
 10247  001BA4  242B               	addwf	GameParameters_init@s^0,w,c
 10248  001BA6  6E12               	movwf	Paddle_init@p^0,c
 10249  001BA8  0E00               	movlw	0
 10250  001BAA  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10251  001BAC  6E13               	movwf	(Paddle_init@p+1)^0,c
 10252  001BAE  0E00               	movlw	0
 10253  001BB0  6E15               	movwf	(Paddle_init@team+1)^0,c
 10254  001BB2  0E00               	movlw	0
 10255  001BB4  6E14               	movwf	Paddle_init@team^0,c
 10256  001BB6  EC52  F026         	call	_Paddle_init	;wreg free
 10257                           
 10258                           ;class/gameParameters.c: 19:     Paddle_init(&(s->p2),1);
 10259  001BBA  0EE0               	movlw	224
 10260  001BBC  242B               	addwf	GameParameters_init@s^0,w,c
 10261  001BBE  6E12               	movwf	Paddle_init@p^0,c
 10262  001BC0  0E00               	movlw	0
 10263  001BC2  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10264  001BC4  6E13               	movwf	(Paddle_init@p+1)^0,c
 10265  001BC6  0E00               	movlw	0
 10266  001BC8  6E15               	movwf	(Paddle_init@team+1)^0,c
 10267  001BCA  0E01               	movlw	1
 10268  001BCC  6E14               	movwf	Paddle_init@team^0,c
 10269  001BCE  EC52  F026         	call	_Paddle_init	;wreg free
 10270                           
 10271                           ;class/gameParameters.c: 22:     LCD_ButtonCreate(10,200,90,30,0b0000000000000000,0b1111
      +                          111111111111,"1 Player",&arialNarrow_12ptFontInfo,((void*)0),((void*)0),((void*)0),&(s->
      +                          btnOnePlayer),1);
 10272  001BD2  0E00               	movlw	0
 10273  001BD4  6E13               	movwf	(LCD_ButtonCreate@posX+1)^0,c
 10274  001BD6  0E0A               	movlw	10
 10275  001BD8  6E12               	movwf	LCD_ButtonCreate@posX^0,c
 10276  001BDA  0E00               	movlw	0
 10277  001BDC  6E15               	movwf	(LCD_ButtonCreate@posY+1)^0,c
 10278  001BDE  0EC8               	movlw	200
 10279  001BE0  6E14               	movwf	LCD_ButtonCreate@posY^0,c
 10280  001BE2  0E00               	movlw	0
 10281  001BE4  6E17               	movwf	(LCD_ButtonCreate@width+1)^0,c
 10282  001BE6  0E5A               	movlw	90
 10283  001BE8  6E16               	movwf	LCD_ButtonCreate@width^0,c
 10284  001BEA  0E00               	movlw	0
 10285  001BEC  6E19               	movwf	(LCD_ButtonCreate@height+1)^0,c
 10286  001BEE  0E1E               	movlw	30
 10287  001BF0  6E18               	movwf	LCD_ButtonCreate@height^0,c
 10288  001BF2  0E00               	movlw	0
 10289  001BF4  6E1B               	movwf	(LCD_ButtonCreate@txtColor+1)^0,c
 10290  001BF6  0E00               	movlw	0
 10291  001BF8  6E1A               	movwf	LCD_ButtonCreate@txtColor^0,c
 10292  001BFA  0EFF               	movlw	255
 10293  001BFC  6E1D               	movwf	(LCD_ButtonCreate@bgColor+1)^0,c
 10294  001BFE  681C               	setf	LCD_ButtonCreate@bgColor^0,c
 10295  001C00  0ED9               	movlw	low STR_4
 10296  001C02  6E1E               	movwf	LCD_ButtonCreate@textOrBmp^0,c
 10297  001C04  0E7F               	movlw	high STR_4
 10298  001C06  6E1F               	movwf	(LCD_ButtonCreate@textOrBmp+1)^0,c
 10299  001C08  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 10300  001C0A  6E20               	movwf	LCD_ButtonCreate@font^0,c
 10301  001C0C  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 10302  001C0E  6E21               	movwf	(LCD_ButtonCreate@font+1)^0,c
 10303  001C10  0E00               	movlw	0
 10304  001C12  6E22               	movwf	LCD_ButtonCreate@fpPress^0,c
 10305  001C14  0E00               	movlw	0
 10306  001C16  6E23               	movwf	(LCD_ButtonCreate@fpPress+1)^0,c
 10307  001C18  0E00               	movlw	0
 10308  001C1A  6E24               	movwf	LCD_ButtonCreate@fpReleased^0,c
 10309  001C1C  0E00               	movlw	0
 10310  001C1E  6E25               	movwf	(LCD_ButtonCreate@fpReleased+1)^0,c
 10311  001C20  0E00               	movlw	0
 10312  001C22  6E26               	movwf	LCD_ButtonCreate@fpOut^0,c
 10313  001C24  0E00               	movlw	0
 10314  001C26  6E27               	movwf	(LCD_ButtonCreate@fpOut+1)^0,c
 10315  001C28  0E20               	movlw	32
 10316  001C2A  242B               	addwf	GameParameters_init@s^0,w,c
 10317  001C2C  6E28               	movwf	LCD_ButtonCreate@button^0,c
 10318  001C2E  0E00               	movlw	0
 10319  001C30  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10320  001C32  6E29               	movwf	(LCD_ButtonCreate@button+1)^0,c
 10321  001C34  0E01               	movlw	1
 10322  001C36  6E2A               	movwf	LCD_ButtonCreate@index^0,c
 10323  001C38  EC30  F020         	call	_LCD_ButtonCreate	;wreg free
 10324                           
 10325                           ;class/gameParameters.c: 23:     LCD_ButtonCreate(140,200,90,30,0b0000000000000000,0b111
      +                          1111111111111,"2 Player",&arialNarrow_12ptFontInfo,((void*)0),((void*)0),((void*)0),&(s-
      +                          >btnTwoPlayer),2);
 10326  001C3C  0E00               	movlw	0
 10327  001C3E  6E13               	movwf	(LCD_ButtonCreate@posX+1)^0,c
 10328  001C40  0E8C               	movlw	140
 10329  001C42  6E12               	movwf	LCD_ButtonCreate@posX^0,c
 10330  001C44  0E00               	movlw	0
 10331  001C46  6E15               	movwf	(LCD_ButtonCreate@posY+1)^0,c
 10332  001C48  0EC8               	movlw	200
 10333  001C4A  6E14               	movwf	LCD_ButtonCreate@posY^0,c
 10334  001C4C  0E00               	movlw	0
 10335  001C4E  6E17               	movwf	(LCD_ButtonCreate@width+1)^0,c
 10336  001C50  0E5A               	movlw	90
 10337  001C52  6E16               	movwf	LCD_ButtonCreate@width^0,c
 10338  001C54  0E00               	movlw	0
 10339  001C56  6E19               	movwf	(LCD_ButtonCreate@height+1)^0,c
 10340  001C58  0E1E               	movlw	30
 10341  001C5A  6E18               	movwf	LCD_ButtonCreate@height^0,c
 10342  001C5C  0E00               	movlw	0
 10343  001C5E  6E1B               	movwf	(LCD_ButtonCreate@txtColor+1)^0,c
 10344  001C60  0E00               	movlw	0
 10345  001C62  6E1A               	movwf	LCD_ButtonCreate@txtColor^0,c
 10346  001C64  0EFF               	movlw	255
 10347  001C66  6E1D               	movwf	(LCD_ButtonCreate@bgColor+1)^0,c
 10348  001C68  681C               	setf	LCD_ButtonCreate@bgColor^0,c
 10349  001C6A  0EE2               	movlw	low STR_5
 10350  001C6C  6E1E               	movwf	LCD_ButtonCreate@textOrBmp^0,c
 10351  001C6E  0E7F               	movlw	high STR_5
 10352  001C70  6E1F               	movwf	(LCD_ButtonCreate@textOrBmp+1)^0,c
 10353  001C72  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 10354  001C74  6E20               	movwf	LCD_ButtonCreate@font^0,c
 10355  001C76  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 10356  001C78  6E21               	movwf	(LCD_ButtonCreate@font+1)^0,c
 10357  001C7A  0E00               	movlw	0
 10358  001C7C  6E22               	movwf	LCD_ButtonCreate@fpPress^0,c
 10359  001C7E  0E00               	movlw	0
 10360  001C80  6E23               	movwf	(LCD_ButtonCreate@fpPress+1)^0,c
 10361  001C82  0E00               	movlw	0
 10362  001C84  6E24               	movwf	LCD_ButtonCreate@fpReleased^0,c
 10363  001C86  0E00               	movlw	0
 10364  001C88  6E25               	movwf	(LCD_ButtonCreate@fpReleased+1)^0,c
 10365  001C8A  0E00               	movlw	0
 10366  001C8C  6E26               	movwf	LCD_ButtonCreate@fpOut^0,c
 10367  001C8E  0E00               	movlw	0
 10368  001C90  6E27               	movwf	(LCD_ButtonCreate@fpOut+1)^0,c
 10369  001C92  0E38               	movlw	56
 10370  001C94  242B               	addwf	GameParameters_init@s^0,w,c
 10371  001C96  6E28               	movwf	LCD_ButtonCreate@button^0,c
 10372  001C98  0E00               	movlw	0
 10373  001C9A  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10374  001C9C  6E29               	movwf	(LCD_ButtonCreate@button+1)^0,c
 10375  001C9E  0E02               	movlw	2
 10376  001CA0  6E2A               	movwf	LCD_ButtonCreate@index^0,c
 10377  001CA2  EC30  F020         	call	_LCD_ButtonCreate	;wreg free
 10378                           
 10379                           ;class/gameParameters.c: 24:     LCD_ButtonCreate(10,250,90,30,0b0000000000000000,0b1111
      +                          111111111111,"Parametres",&arialNarrow_12ptFontInfo,((void*)0),((void*)0),((void*)0),&(s
      +                          ->btnParam),3);
 10380  001CA6  0E00               	movlw	0
 10381  001CA8  6E13               	movwf	(LCD_ButtonCreate@posX+1)^0,c
 10382  001CAA  0E0A               	movlw	10
 10383  001CAC  6E12               	movwf	LCD_ButtonCreate@posX^0,c
 10384  001CAE  0E00               	movlw	0
 10385  001CB0  6E15               	movwf	(LCD_ButtonCreate@posY+1)^0,c
 10386  001CB2  0EFA               	movlw	250
 10387  001CB4  6E14               	movwf	LCD_ButtonCreate@posY^0,c
 10388  001CB6  0E00               	movlw	0
 10389  001CB8  6E17               	movwf	(LCD_ButtonCreate@width+1)^0,c
 10390  001CBA  0E5A               	movlw	90
 10391  001CBC  6E16               	movwf	LCD_ButtonCreate@width^0,c
 10392  001CBE  0E00               	movlw	0
 10393  001CC0  6E19               	movwf	(LCD_ButtonCreate@height+1)^0,c
 10394  001CC2  0E1E               	movlw	30
 10395  001CC4  6E18               	movwf	LCD_ButtonCreate@height^0,c
 10396  001CC6  0E00               	movlw	0
 10397  001CC8  6E1B               	movwf	(LCD_ButtonCreate@txtColor+1)^0,c
 10398  001CCA  0E00               	movlw	0
 10399  001CCC  6E1A               	movwf	LCD_ButtonCreate@txtColor^0,c
 10400  001CCE  0EFF               	movlw	255
 10401  001CD0  6E1D               	movwf	(LCD_ButtonCreate@bgColor+1)^0,c
 10402  001CD2  681C               	setf	LCD_ButtonCreate@bgColor^0,c
 10403  001CD4  0EB2               	movlw	low STR_6
 10404  001CD6  6E1E               	movwf	LCD_ButtonCreate@textOrBmp^0,c
 10405  001CD8  0E7F               	movlw	high STR_6
 10406  001CDA  6E1F               	movwf	(LCD_ButtonCreate@textOrBmp+1)^0,c
 10407  001CDC  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 10408  001CDE  6E20               	movwf	LCD_ButtonCreate@font^0,c
 10409  001CE0  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 10410  001CE2  6E21               	movwf	(LCD_ButtonCreate@font+1)^0,c
 10411  001CE4  0E00               	movlw	0
 10412  001CE6  6E22               	movwf	LCD_ButtonCreate@fpPress^0,c
 10413  001CE8  0E00               	movlw	0
 10414  001CEA  6E23               	movwf	(LCD_ButtonCreate@fpPress+1)^0,c
 10415  001CEC  0E00               	movlw	0
 10416  001CEE  6E24               	movwf	LCD_ButtonCreate@fpReleased^0,c
 10417  001CF0  0E00               	movlw	0
 10418  001CF2  6E25               	movwf	(LCD_ButtonCreate@fpReleased+1)^0,c
 10419  001CF4  0E00               	movlw	0
 10420  001CF6  6E26               	movwf	LCD_ButtonCreate@fpOut^0,c
 10421  001CF8  0E00               	movlw	0
 10422  001CFA  6E27               	movwf	(LCD_ButtonCreate@fpOut+1)^0,c
 10423  001CFC  0E08               	movlw	8
 10424  001CFE  242B               	addwf	GameParameters_init@s^0,w,c
 10425  001D00  6E28               	movwf	LCD_ButtonCreate@button^0,c
 10426  001D02  0E00               	movlw	0
 10427  001D04  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10428  001D06  6E29               	movwf	(LCD_ButtonCreate@button+1)^0,c
 10429  001D08  0E03               	movlw	3
 10430  001D0A  6E2A               	movwf	LCD_ButtonCreate@index^0,c
 10431  001D0C  EC30  F020         	call	_LCD_ButtonCreate	;wreg free
 10432                           
 10433                           ;class/gameParameters.c: 25:     LCD_ButtonCreate(140,250,90,30,0b0000000000000000,0b111
      +                          1111111111111,"Turn Off",&arialNarrow_12ptFontInfo,((void*)0),((void*)0),((void*)0),&(s-
      +                          >btnTurnOff),4);
 10434  001D10  0E00               	movlw	0
 10435  001D12  6E13               	movwf	(LCD_ButtonCreate@posX+1)^0,c
 10436  001D14  0E8C               	movlw	140
 10437  001D16  6E12               	movwf	LCD_ButtonCreate@posX^0,c
 10438  001D18  0E00               	movlw	0
 10439  001D1A  6E15               	movwf	(LCD_ButtonCreate@posY+1)^0,c
 10440  001D1C  0EFA               	movlw	250
 10441  001D1E  6E14               	movwf	LCD_ButtonCreate@posY^0,c
 10442  001D20  0E00               	movlw	0
 10443  001D22  6E17               	movwf	(LCD_ButtonCreate@width+1)^0,c
 10444  001D24  0E5A               	movlw	90
 10445  001D26  6E16               	movwf	LCD_ButtonCreate@width^0,c
 10446  001D28  0E00               	movlw	0
 10447  001D2A  6E19               	movwf	(LCD_ButtonCreate@height+1)^0,c
 10448  001D2C  0E1E               	movlw	30
 10449  001D2E  6E18               	movwf	LCD_ButtonCreate@height^0,c
 10450  001D30  0E00               	movlw	0
 10451  001D32  6E1B               	movwf	(LCD_ButtonCreate@txtColor+1)^0,c
 10452  001D34  0E00               	movlw	0
 10453  001D36  6E1A               	movwf	LCD_ButtonCreate@txtColor^0,c
 10454  001D38  0EFF               	movlw	255
 10455  001D3A  6E1D               	movwf	(LCD_ButtonCreate@bgColor+1)^0,c
 10456  001D3C  681C               	setf	LCD_ButtonCreate@bgColor^0,c
 10457  001D3E  0ED0               	movlw	low STR_7
 10458  001D40  6E1E               	movwf	LCD_ButtonCreate@textOrBmp^0,c
 10459  001D42  0E7F               	movlw	high STR_7
 10460  001D44  6E1F               	movwf	(LCD_ButtonCreate@textOrBmp+1)^0,c
 10461  001D46  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 10462  001D48  6E20               	movwf	LCD_ButtonCreate@font^0,c
 10463  001D4A  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 10464  001D4C  6E21               	movwf	(LCD_ButtonCreate@font+1)^0,c
 10465  001D4E  0E00               	movlw	0
 10466  001D50  6E22               	movwf	LCD_ButtonCreate@fpPress^0,c
 10467  001D52  0E00               	movlw	0
 10468  001D54  6E23               	movwf	(LCD_ButtonCreate@fpPress+1)^0,c
 10469  001D56  0E00               	movlw	0
 10470  001D58  6E24               	movwf	LCD_ButtonCreate@fpReleased^0,c
 10471  001D5A  0E00               	movlw	0
 10472  001D5C  6E25               	movwf	(LCD_ButtonCreate@fpReleased+1)^0,c
 10473  001D5E  0E00               	movlw	0
 10474  001D60  6E26               	movwf	LCD_ButtonCreate@fpOut^0,c
 10475  001D62  0E00               	movlw	0
 10476  001D64  6E27               	movwf	(LCD_ButtonCreate@fpOut+1)^0,c
 10477  001D66  0E80               	movlw	128
 10478  001D68  242B               	addwf	GameParameters_init@s^0,w,c
 10479  001D6A  6E28               	movwf	LCD_ButtonCreate@button^0,c
 10480  001D6C  0E00               	movlw	0
 10481  001D6E  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10482  001D70  6E29               	movwf	(LCD_ButtonCreate@button+1)^0,c
 10483  001D72  0E04               	movlw	4
 10484  001D74  6E2A               	movwf	LCD_ButtonCreate@index^0,c
 10485  001D76  EC30  F020         	call	_LCD_ButtonCreate	;wreg free
 10486                           
 10487                           ;class/gameParameters.c: 27:     LCD_ButtonCreate(220,0,20,20,0b0000000000000000,0b11111
      +                          00000000000,"X",&arialNarrow_12ptFontInfo,((void*)0),((void*)0),((void*)0),&(s->btnLeave
      +                          ),5);
 10488  001D7A  0E00               	movlw	0
 10489  001D7C  6E13               	movwf	(LCD_ButtonCreate@posX+1)^0,c
 10490  001D7E  0EDC               	movlw	220
 10491  001D80  6E12               	movwf	LCD_ButtonCreate@posX^0,c
 10492  001D82  0E00               	movlw	0
 10493  001D84  6E15               	movwf	(LCD_ButtonCreate@posY+1)^0,c
 10494  001D86  0E00               	movlw	0
 10495  001D88  6E14               	movwf	LCD_ButtonCreate@posY^0,c
 10496  001D8A  0E00               	movlw	0
 10497  001D8C  6E17               	movwf	(LCD_ButtonCreate@width+1)^0,c
 10498  001D8E  0E14               	movlw	20
 10499  001D90  6E16               	movwf	LCD_ButtonCreate@width^0,c
 10500  001D92  0E00               	movlw	0
 10501  001D94  6E19               	movwf	(LCD_ButtonCreate@height+1)^0,c
 10502  001D96  0E14               	movlw	20
 10503  001D98  6E18               	movwf	LCD_ButtonCreate@height^0,c
 10504  001D9A  0E00               	movlw	0
 10505  001D9C  6E1B               	movwf	(LCD_ButtonCreate@txtColor+1)^0,c
 10506  001D9E  0E00               	movlw	0
 10507  001DA0  6E1A               	movwf	LCD_ButtonCreate@txtColor^0,c
 10508  001DA2  0EF8               	movlw	248
 10509  001DA4  6E1D               	movwf	(LCD_ButtonCreate@bgColor+1)^0,c
 10510  001DA6  0E00               	movlw	0
 10511  001DA8  6E1C               	movwf	LCD_ButtonCreate@bgColor^0,c
 10512  001DAA  0EFC               	movlw	low STR_8
 10513  001DAC  6E1E               	movwf	LCD_ButtonCreate@textOrBmp^0,c
 10514  001DAE  0E7F               	movlw	high STR_8
 10515  001DB0  6E1F               	movwf	(LCD_ButtonCreate@textOrBmp+1)^0,c
 10516  001DB2  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 10517  001DB4  6E20               	movwf	LCD_ButtonCreate@font^0,c
 10518  001DB6  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 10519  001DB8  6E21               	movwf	(LCD_ButtonCreate@font+1)^0,c
 10520  001DBA  0E00               	movlw	0
 10521  001DBC  6E22               	movwf	LCD_ButtonCreate@fpPress^0,c
 10522  001DBE  0E00               	movlw	0
 10523  001DC0  6E23               	movwf	(LCD_ButtonCreate@fpPress+1)^0,c
 10524  001DC2  0E00               	movlw	0
 10525  001DC4  6E24               	movwf	LCD_ButtonCreate@fpReleased^0,c
 10526  001DC6  0E00               	movlw	0
 10527  001DC8  6E25               	movwf	(LCD_ButtonCreate@fpReleased+1)^0,c
 10528  001DCA  0E00               	movlw	0
 10529  001DCC  6E26               	movwf	LCD_ButtonCreate@fpOut^0,c
 10530  001DCE  0E00               	movlw	0
 10531  001DD0  6E27               	movwf	(LCD_ButtonCreate@fpOut+1)^0,c
 10532  001DD2  0E50               	movlw	80
 10533  001DD4  242B               	addwf	GameParameters_init@s^0,w,c
 10534  001DD6  6E28               	movwf	LCD_ButtonCreate@button^0,c
 10535  001DD8  0E00               	movlw	0
 10536  001DDA  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10537  001DDC  6E29               	movwf	(LCD_ButtonCreate@button+1)^0,c
 10538  001DDE  0E05               	movlw	5
 10539  001DE0  6E2A               	movwf	LCD_ButtonCreate@index^0,c
 10540  001DE2  EC30  F020         	call	_LCD_ButtonCreate	;wreg free
 10541                           
 10542                           ;class/gameParameters.c: 28:     LCD_ButtonCreate(10,250,90,30,0b0000000000000000,0b1111
      +                          111111111111,"New Game",&arialNarrow_12ptFontInfo,((void*)0),((void*)0),((void*)0),&(s->
      +                          btnNewGame),6);
 10543  001DE6  0E00               	movlw	0
 10544  001DE8  6E13               	movwf	(LCD_ButtonCreate@posX+1)^0,c
 10545  001DEA  0E0A               	movlw	10
 10546  001DEC  6E12               	movwf	LCD_ButtonCreate@posX^0,c
 10547  001DEE  0E00               	movlw	0
 10548  001DF0  6E15               	movwf	(LCD_ButtonCreate@posY+1)^0,c
 10549  001DF2  0EFA               	movlw	250
 10550  001DF4  6E14               	movwf	LCD_ButtonCreate@posY^0,c
 10551  001DF6  0E00               	movlw	0
 10552  001DF8  6E17               	movwf	(LCD_ButtonCreate@width+1)^0,c
 10553  001DFA  0E5A               	movlw	90
 10554  001DFC  6E16               	movwf	LCD_ButtonCreate@width^0,c
 10555  001DFE  0E00               	movlw	0
 10556  001E00  6E19               	movwf	(LCD_ButtonCreate@height+1)^0,c
 10557  001E02  0E1E               	movlw	30
 10558  001E04  6E18               	movwf	LCD_ButtonCreate@height^0,c
 10559  001E06  0E00               	movlw	0
 10560  001E08  6E1B               	movwf	(LCD_ButtonCreate@txtColor+1)^0,c
 10561  001E0A  0E00               	movlw	0
 10562  001E0C  6E1A               	movwf	LCD_ButtonCreate@txtColor^0,c
 10563  001E0E  0EFF               	movlw	255
 10564  001E10  6E1D               	movwf	(LCD_ButtonCreate@bgColor+1)^0,c
 10565  001E12  681C               	setf	LCD_ButtonCreate@bgColor^0,c
 10566  001E14  0EC7               	movlw	low STR_9
 10567  001E16  6E1E               	movwf	LCD_ButtonCreate@textOrBmp^0,c
 10568  001E18  0E7F               	movlw	high STR_9
 10569  001E1A  6E1F               	movwf	(LCD_ButtonCreate@textOrBmp+1)^0,c
 10570  001E1C  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 10571  001E1E  6E20               	movwf	LCD_ButtonCreate@font^0,c
 10572  001E20  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 10573  001E22  6E21               	movwf	(LCD_ButtonCreate@font+1)^0,c
 10574  001E24  0E00               	movlw	0
 10575  001E26  6E22               	movwf	LCD_ButtonCreate@fpPress^0,c
 10576  001E28  0E00               	movlw	0
 10577  001E2A  6E23               	movwf	(LCD_ButtonCreate@fpPress+1)^0,c
 10578  001E2C  0E00               	movlw	0
 10579  001E2E  6E24               	movwf	LCD_ButtonCreate@fpReleased^0,c
 10580  001E30  0E00               	movlw	0
 10581  001E32  6E25               	movwf	(LCD_ButtonCreate@fpReleased+1)^0,c
 10582  001E34  0E00               	movlw	0
 10583  001E36  6E26               	movwf	LCD_ButtonCreate@fpOut^0,c
 10584  001E38  0E00               	movlw	0
 10585  001E3A  6E27               	movwf	(LCD_ButtonCreate@fpOut+1)^0,c
 10586  001E3C  0E68               	movlw	104
 10587  001E3E  242B               	addwf	GameParameters_init@s^0,w,c
 10588  001E40  6E28               	movwf	LCD_ButtonCreate@button^0,c
 10589  001E42  0E00               	movlw	0
 10590  001E44  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10591  001E46  6E29               	movwf	(LCD_ButtonCreate@button+1)^0,c
 10592  001E48  0E06               	movlw	6
 10593  001E4A  6E2A               	movwf	LCD_ButtonCreate@index^0,c
 10594  001E4C  EC30  F020         	call	_LCD_ButtonCreate	;wreg free
 10595                           
 10596                           ;class/gameParameters.c: 31:     LCD_SliderCreate(50,110,165,20,0b0000000000000000,0b111
      +                          1111111111111,0b1111100000000000,0,11,((void*)0),&(s->sldBackLight));
 10597  001E50  0E00               	movlw	0
 10598  001E52  6E13               	movwf	(LCD_SliderCreate@posX+1)^0,c
 10599  001E54  0E32               	movlw	50
 10600  001E56  6E12               	movwf	LCD_SliderCreate@posX^0,c
 10601  001E58  0E00               	movlw	0
 10602  001E5A  6E15               	movwf	(LCD_SliderCreate@posY+1)^0,c
 10603  001E5C  0E6E               	movlw	110
 10604  001E5E  6E14               	movwf	LCD_SliderCreate@posY^0,c
 10605  001E60  0E00               	movlw	0
 10606  001E62  6E17               	movwf	(LCD_SliderCreate@width+1)^0,c
 10607  001E64  0EA5               	movlw	165
 10608  001E66  6E16               	movwf	LCD_SliderCreate@width^0,c
 10609  001E68  0E00               	movlw	0
 10610  001E6A  6E19               	movwf	(LCD_SliderCreate@height+1)^0,c
 10611  001E6C  0E14               	movlw	20
 10612  001E6E  6E18               	movwf	LCD_SliderCreate@height^0,c
 10613  001E70  0E00               	movlw	0
 10614  001E72  6E1B               	movwf	(LCD_SliderCreate@sldColor+1)^0,c
 10615  001E74  0E00               	movlw	0
 10616  001E76  6E1A               	movwf	LCD_SliderCreate@sldColor^0,c
 10617  001E78  0EFF               	movlw	255
 10618  001E7A  6E1D               	movwf	(LCD_SliderCreate@bgColor+1)^0,c
 10619  001E7C  681C               	setf	LCD_SliderCreate@bgColor^0,c
 10620  001E7E  0EF8               	movlw	248
 10621  001E80  6E1F               	movwf	(LCD_SliderCreate@borderColor+1)^0,c
 10622  001E82  0E00               	movlw	0
 10623  001E84  6E1E               	movwf	LCD_SliderCreate@borderColor^0,c
 10624  001E86  0E00               	movlw	0
 10625  001E88  6E21               	movwf	(LCD_SliderCreate@cursorWidth+1)^0,c
 10626  001E8A  0E00               	movlw	0
 10627  001E8C  6E20               	movwf	LCD_SliderCreate@cursorWidth^0,c
 10628  001E8E  0E00               	movlw	0
 10629  001E90  6E23               	movwf	(LCD_SliderCreate@steps+1)^0,c
 10630  001E92  0E0B               	movlw	11
 10631  001E94  6E22               	movwf	LCD_SliderCreate@steps^0,c
 10632  001E96  0E00               	movlw	0
 10633  001E98  6E24               	movwf	LCD_SliderCreate@fpPress^0,c
 10634  001E9A  0E00               	movlw	0
 10635  001E9C  6E25               	movwf	(LCD_SliderCreate@fpPress+1)^0,c
 10636  001E9E  0E98               	movlw	152
 10637  001EA0  242B               	addwf	GameParameters_init@s^0,w,c
 10638  001EA2  6E26               	movwf	LCD_SliderCreate@slider^0,c
 10639  001EA4  0E00               	movlw	0
 10640  001EA6  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10641  001EA8  6E27               	movwf	(LCD_SliderCreate@slider+1)^0,c
 10642  001EAA  ECAD  F020         	call	_LCD_SliderCreate	;wreg free
 10643                           
 10644                           ;class/gameParameters.c: 32:     LCD_SliderCreate(50,160,165,20,0b0000000000000000,0b111
      +                          1111111111111,0b1111100000000000,0,3,((void*)0),&(s->sldLevel));
 10645  001EAE  0E00               	movlw	0
 10646  001EB0  6E13               	movwf	(LCD_SliderCreate@posX+1)^0,c
 10647  001EB2  0E32               	movlw	50
 10648  001EB4  6E12               	movwf	LCD_SliderCreate@posX^0,c
 10649  001EB6  0E00               	movlw	0
 10650  001EB8  6E15               	movwf	(LCD_SliderCreate@posY+1)^0,c
 10651  001EBA  0EA0               	movlw	160
 10652  001EBC  6E14               	movwf	LCD_SliderCreate@posY^0,c
 10653  001EBE  0E00               	movlw	0
 10654  001EC0  6E17               	movwf	(LCD_SliderCreate@width+1)^0,c
 10655  001EC2  0EA5               	movlw	165
 10656  001EC4  6E16               	movwf	LCD_SliderCreate@width^0,c
 10657  001EC6  0E00               	movlw	0
 10658  001EC8  6E19               	movwf	(LCD_SliderCreate@height+1)^0,c
 10659  001ECA  0E14               	movlw	20
 10660  001ECC  6E18               	movwf	LCD_SliderCreate@height^0,c
 10661  001ECE  0E00               	movlw	0
 10662  001ED0  6E1B               	movwf	(LCD_SliderCreate@sldColor+1)^0,c
 10663  001ED2  0E00               	movlw	0
 10664  001ED4  6E1A               	movwf	LCD_SliderCreate@sldColor^0,c
 10665  001ED6  0EFF               	movlw	255
 10666  001ED8  6E1D               	movwf	(LCD_SliderCreate@bgColor+1)^0,c
 10667  001EDA  681C               	setf	LCD_SliderCreate@bgColor^0,c
 10668  001EDC  0EF8               	movlw	248
 10669  001EDE  6E1F               	movwf	(LCD_SliderCreate@borderColor+1)^0,c
 10670  001EE0  0E00               	movlw	0
 10671  001EE2  6E1E               	movwf	LCD_SliderCreate@borderColor^0,c
 10672  001EE4  0E00               	movlw	0
 10673  001EE6  6E21               	movwf	(LCD_SliderCreate@cursorWidth+1)^0,c
 10674  001EE8  0E00               	movlw	0
 10675  001EEA  6E20               	movwf	LCD_SliderCreate@cursorWidth^0,c
 10676  001EEC  0E00               	movlw	0
 10677  001EEE  6E23               	movwf	(LCD_SliderCreate@steps+1)^0,c
 10678  001EF0  0E03               	movlw	3
 10679  001EF2  6E22               	movwf	LCD_SliderCreate@steps^0,c
 10680  001EF4  0E00               	movlw	0
 10681  001EF6  6E24               	movwf	LCD_SliderCreate@fpPress^0,c
 10682  001EF8  0E00               	movlw	0
 10683  001EFA  6E25               	movwf	(LCD_SliderCreate@fpPress+1)^0,c
 10684  001EFC  0EB1               	movlw	177
 10685  001EFE  242B               	addwf	GameParameters_init@s^0,w,c
 10686  001F00  6E26               	movwf	LCD_SliderCreate@slider^0,c
 10687  001F02  0E00               	movlw	0
 10688  001F04  202C               	addwfc	(GameParameters_init@s+1)^0,w,c
 10689  001F06  6E27               	movwf	(LCD_SliderCreate@slider+1)^0,c
 10690  001F08  ECAD  F020         	call	_LCD_SliderCreate	;wreg free
 10691  001F0C  0012               	return		;funcret
 10692  001F0E                     __end_of_GameParameters_init:
 10693                           	callstack 0
 10694                           
 10695 ;; *************** function _Score_init *****************
 10696 ;; Defined at:
 10697 ;;		line 7 in file "class/score.c"
 10698 ;; Parameters:    Size  Location     Type
 10699 ;;  s               2   17[COMRAM] PTR struct Score
 10700 ;;		 -> g1(240), 
 10701 ;; Auto vars:     Size  Location     Type
 10702 ;;		None
 10703 ;; Return value:  Size  Location     Type
 10704 ;;                  1    wreg      void 
 10705 ;; Registers used:
 10706 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10707 ;; Tracked objects:
 10708 ;;		On entry : 0/0
 10709 ;;		On exit  : 0/0
 10710 ;;		Unchanged: 0/0
 10711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10712 ;;      Params:         2       0       0       0       0       0       0
 10713 ;;      Locals:         0       0       0       0       0       0       0
 10714 ;;      Temps:          0       0       0       0       0       0       0
 10715 ;;      Totals:         2       0       0       0       0       0       0
 10716 ;;Total ram usage:        2 bytes
 10717 ;; Hardware stack levels used: 1
 10718 ;; Hardware stack levels required when called: 4
 10719 ;; This function calls:
 10720 ;;		Nothing
 10721 ;; This function is called by:
 10722 ;;		_GameParameters_init
 10723 ;; This function uses a non-reentrant model
 10724 ;;
 10725                           
 10726                           	psect	text42
 10727  005926                     __ptext42:
 10728                           	callstack 0
 10729  005926                     _Score_init:
 10730                           	callstack 21
 10731                           
 10732                           ;class/score.c: 7: void Score_init(struct Score* s);class/score.c: 8: {;class/score.c: 9
      +                          :     s->homeScore = 0;
 10733                           
 10734                           ;incstack = 0
 10735  005926  C012  FFD9         	movff	Score_init@s,fsr2l
 10736  00592A  C013  FFDA         	movff	Score_init@s+1,fsr2h
 10737  00592E  0E00               	movlw	0
 10738  005930  6EDE               	movwf	postinc2,c
 10739  005932  0E00               	movlw	0
 10740  005934  6EDD               	movwf	postdec2,c
 10741                           
 10742                           ;class/score.c: 10:     s->awayScore = 0;
 10743  005936  EE20 F002          	lfsr	2,2
 10744  00593A  5012               	movf	Score_init@s^0,w,c
 10745  00593C  26D9               	addwf	fsr2l,f,c
 10746  00593E  5013               	movf	(Score_init@s+1)^0,w,c
 10747  005940  22DA               	addwfc	fsr2h,f,c
 10748  005942  0E00               	movlw	0
 10749  005944  6EDE               	movwf	postinc2,c
 10750  005946  0E00               	movlw	0
 10751  005948  6EDD               	movwf	postdec2,c
 10752  00594A  0012               	return		;funcret
 10753  00594C                     __end_of_Score_init:
 10754                           	callstack 0
 10755                           
 10756 ;; *************** function _Paddle_init *****************
 10757 ;; Defined at:
 10758 ;;		line 6 in file "class/paddle.c"
 10759 ;; Parameters:    Size  Location     Type
 10760 ;;  p               2   17[COMRAM] PTR struct Paddle
 10761 ;;		 -> g1(240), 
 10762 ;;  team            2   19[COMRAM] unsigned short 
 10763 ;; Auto vars:     Size  Location     Type
 10764 ;;		None
 10765 ;; Return value:  Size  Location     Type
 10766 ;;                  1    wreg      void 
 10767 ;; Registers used:
 10768 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10769 ;; Tracked objects:
 10770 ;;		On entry : 0/0
 10771 ;;		On exit  : 0/0
 10772 ;;		Unchanged: 0/0
 10773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10774 ;;      Params:         4       0       0       0       0       0       0
 10775 ;;      Locals:         0       0       0       0       0       0       0
 10776 ;;      Temps:          0       0       0       0       0       0       0
 10777 ;;      Totals:         4       0       0       0       0       0       0
 10778 ;;Total ram usage:        4 bytes
 10779 ;; Hardware stack levels used: 1
 10780 ;; Hardware stack levels required when called: 4
 10781 ;; This function calls:
 10782 ;;		Nothing
 10783 ;; This function is called by:
 10784 ;;		_GameParameters_init
 10785 ;; This function uses a non-reentrant model
 10786 ;;
 10787                           
 10788                           	psect	text43
 10789  004CA4                     __ptext43:
 10790                           	callstack 0
 10791  004CA4                     _Paddle_init:
 10792                           	callstack 21
 10793                           
 10794                           ;class/paddle.c: 6: void Paddle_init(struct Paddle* p,uint16_t team);class/paddle.c: 7: 
      +                          {;class/paddle.c: 8:     p->oldx=0;
 10795                           
 10796                           ;incstack = 0
 10797  004CA4  EE20 F004          	lfsr	2,4
 10798  004CA8  5012               	movf	Paddle_init@p^0,w,c
 10799  004CAA  26D9               	addwf	fsr2l,f,c
 10800  004CAC  5013               	movf	(Paddle_init@p+1)^0,w,c
 10801  004CAE  22DA               	addwfc	fsr2h,f,c
 10802  004CB0  0E00               	movlw	0
 10803  004CB2  6EDE               	movwf	postinc2,c
 10804  004CB4  0E00               	movlw	0
 10805  004CB6  6EDD               	movwf	postdec2,c
 10806                           
 10807                           ;class/paddle.c: 9:     p->oldy=0;
 10808  004CB8  EE20 F006          	lfsr	2,6
 10809  004CBC  5012               	movf	Paddle_init@p^0,w,c
 10810  004CBE  26D9               	addwf	fsr2l,f,c
 10811  004CC0  5013               	movf	(Paddle_init@p+1)^0,w,c
 10812  004CC2  22DA               	addwfc	fsr2h,f,c
 10813  004CC4  0E00               	movlw	0
 10814  004CC6  6EDE               	movwf	postinc2,c
 10815  004CC8  0E00               	movlw	0
 10816  004CCA  6EDD               	movwf	postdec2,c
 10817                           
 10818                           ;class/paddle.c: 10:     if(team)
 10819  004CCC  5014               	movf	Paddle_init@team^0,w,c
 10820  004CCE  1015               	iorwf	(Paddle_init@team+1)^0,w,c
 10821  004CD0  B4D8               	btfsc	status,2,c
 10822  004CD2  D01D               	goto	l6500
 10823                           
 10824                           ;class/paddle.c: 11:     {;class/paddle.c: 12:         p->x = 90;
 10825  004CD4  C012  FFD9         	movff	Paddle_init@p,fsr2l
 10826  004CD8  C013  FFDA         	movff	Paddle_init@p+1,fsr2h
 10827  004CDC  0E5A               	movlw	90
 10828  004CDE  6EDE               	movwf	postinc2,c
 10829  004CE0  0E00               	movlw	0
 10830  004CE2  6EDD               	movwf	postdec2,c
 10831                           
 10832                           ;class/paddle.c: 13:         p->y = 20;
 10833  004CE4  EE20 F002          	lfsr	2,2
 10834  004CE8  5012               	movf	Paddle_init@p^0,w,c
 10835  004CEA  26D9               	addwf	fsr2l,f,c
 10836  004CEC  5013               	movf	(Paddle_init@p+1)^0,w,c
 10837  004CEE  22DA               	addwfc	fsr2h,f,c
 10838  004CF0  0E14               	movlw	20
 10839  004CF2  6EDE               	movwf	postinc2,c
 10840  004CF4  0E00               	movlw	0
 10841  004CF6  6EDD               	movwf	postdec2,c
 10842                           
 10843                           ;class/paddle.c: 14:         p->color = 0b1111111111111111;
 10844  004CF8  EE20 F008          	lfsr	2,8
 10845  004CFC  5012               	movf	Paddle_init@p^0,w,c
 10846  004CFE  26D9               	addwf	fsr2l,f,c
 10847  004D00  5013               	movf	(Paddle_init@p+1)^0,w,c
 10848  004D02  22DA               	addwfc	fsr2h,f,c
 10849  004D04  0EFF               	movlw	255
 10850  004D06  6EDE               	movwf	postinc2,c
 10851  004D08  0EFF               	movlw	255
 10852  004D0A  6EDD               	movwf	postdec2,c
 10853                           
 10854                           ;class/paddle.c: 15:     }
 10855  004D0C  0012               	return	
 10856  004D0E                     l6500:
 10857                           
 10858                           ;class/paddle.c: 17:     {;class/paddle.c: 18:         p->x = 90;
 10859  004D0E  C012  FFD9         	movff	Paddle_init@p,fsr2l
 10860  004D12  C013  FFDA         	movff	Paddle_init@p+1,fsr2h
 10861  004D16  0E5A               	movlw	90
 10862  004D18  6EDE               	movwf	postinc2,c
 10863  004D1A  0E00               	movlw	0
 10864  004D1C  6EDD               	movwf	postdec2,c
 10865                           
 10866                           ;class/paddle.c: 19:         p->y = 280;
 10867  004D1E  EE20 F002          	lfsr	2,2
 10868  004D22  5012               	movf	Paddle_init@p^0,w,c
 10869  004D24  26D9               	addwf	fsr2l,f,c
 10870  004D26  5013               	movf	(Paddle_init@p+1)^0,w,c
 10871  004D28  22DA               	addwfc	fsr2h,f,c
 10872  004D2A  0E18               	movlw	24
 10873  004D2C  6EDE               	movwf	postinc2,c
 10874  004D2E  0E01               	movlw	1
 10875  004D30  6EDD               	movwf	postdec2,c
 10876                           
 10877                           ;class/paddle.c: 20:         p->color = 0b1111111111111111;
 10878  004D32  EE20 F008          	lfsr	2,8
 10879  004D36  5012               	movf	Paddle_init@p^0,w,c
 10880  004D38  26D9               	addwf	fsr2l,f,c
 10881  004D3A  5013               	movf	(Paddle_init@p+1)^0,w,c
 10882  004D3C  22DA               	addwfc	fsr2h,f,c
 10883  004D3E  0EFF               	movlw	255
 10884  004D40  6EDE               	movwf	postinc2,c
 10885  004D42  0EFF               	movlw	255
 10886  004D44  6EDD               	movwf	postdec2,c
 10887  004D46  0012               	return		;funcret
 10888  004D48                     __end_of_Paddle_init:
 10889                           	callstack 0
 10890                           
 10891 ;; *************** function _LCD_SliderCreate *****************
 10892 ;; Defined at:
 10893 ;;		line 291 in file "libraries/lcd_highlevel.c"
 10894 ;; Parameters:    Size  Location     Type
 10895 ;;  posX            2   17[COMRAM] unsigned short 
 10896 ;;  posY            2   19[COMRAM] unsigned short 
 10897 ;;  width           2   21[COMRAM] unsigned short 
 10898 ;;  height          2   23[COMRAM] unsigned short 
 10899 ;;  sldColor        2   25[COMRAM] unsigned short 
 10900 ;;  bgColor         2   27[COMRAM] unsigned short 
 10901 ;;  borderColor     2   29[COMRAM] unsigned short 
 10902 ;;  cursorWidth     2   31[COMRAM] unsigned short 
 10903 ;;  steps           2   33[COMRAM] unsigned short 
 10904 ;;  fpPress         2   35[COMRAM] PTR FTN()void 
 10905 ;;		 -> Absolute function(1), 
 10906 ;;  slider          2   37[COMRAM] PTR struct .
 10907 ;;		 -> g1(240), 
 10908 ;; Auto vars:     Size  Location     Type
 10909 ;;		None
 10910 ;; Return value:  Size  Location     Type
 10911 ;;                  1    wreg      void 
 10912 ;; Registers used:
 10913 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10914 ;; Tracked objects:
 10915 ;;		On entry : 0/0
 10916 ;;		On exit  : 0/0
 10917 ;;		Unchanged: 0/0
 10918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10919 ;;      Params:        22       0       0       0       0       0       0
 10920 ;;      Locals:         0       0       0       0       0       0       0
 10921 ;;      Temps:          0       0       0       0       0       0       0
 10922 ;;      Totals:        22       0       0       0       0       0       0
 10923 ;;Total ram usage:       22 bytes
 10924 ;; Hardware stack levels used: 1
 10925 ;; Hardware stack levels required when called: 4
 10926 ;; This function calls:
 10927 ;;		Nothing
 10928 ;; This function is called by:
 10929 ;;		_GameParameters_init
 10930 ;; This function uses a non-reentrant model
 10931 ;;
 10932                           
 10933                           	psect	text44
 10934  00415A                     __ptext44:
 10935                           	callstack 0
 10936  00415A                     _LCD_SliderCreate:
 10937                           	callstack 21
 10938                           
 10939                           ;libraries/lcd_highlevel.c: 291: void LCD_SliderCreate(uint16_t posX, uint16_t posY,;lib
      +                          raries/lcd_highlevel.c: 292:                       uint16_t width, uint16_t height,;libr
      +                          aries/lcd_highlevel.c: 293:                       uint16_t sldColor, uint16_t bgColor, u
      +                          int16_t borderColor,;libraries/lcd_highlevel.c: 294:                       uint16_t curs
      +                          orWidth,;libraries/lcd_highlevel.c: 295:                       uint16_t steps,;libraries
      +                          /lcd_highlevel.c: 296:                       void (* fpPress)(),;libraries/lcd_highlevel
      +                          .c: 297:                       sld_t * slider)
 10940                           
 10941                           ;incstack = 0
 10942  00415A  C026  FFD9         	movff	LCD_SliderCreate@slider,fsr2l
 10943  00415E  C027  FFDA         	movff	LCD_SliderCreate@slider+1,fsr2h
 10944  004162  C012  FFDE         	movff	LCD_SliderCreate@posX,postinc2
 10945  004166  C013  FFDD         	movff	LCD_SliderCreate@posX+1,postdec2
 10946                           
 10947                           ;libraries/lcd_highlevel.c: 300:   slider->posY = posY;
 10948  00416A  EE20 F002          	lfsr	2,2
 10949  00416E  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10950  004170  26D9               	addwf	fsr2l,f,c
 10951  004172  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10952  004174  22DA               	addwfc	fsr2h,f,c
 10953  004176  C014  FFDE         	movff	LCD_SliderCreate@posY,postinc2
 10954  00417A  C015  FFDD         	movff	LCD_SliderCreate@posY+1,postdec2
 10955                           
 10956                           ;libraries/lcd_highlevel.c: 301:   slider->height = height;
 10957  00417E  EE20 F006          	lfsr	2,6
 10958  004182  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10959  004184  26D9               	addwf	fsr2l,f,c
 10960  004186  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10961  004188  22DA               	addwfc	fsr2h,f,c
 10962  00418A  C018  FFDE         	movff	LCD_SliderCreate@height,postinc2
 10963  00418E  C019  FFDD         	movff	LCD_SliderCreate@height+1,postdec2
 10964                           
 10965                           ;libraries/lcd_highlevel.c: 302:   slider->width = width;
 10966  004192  EE20 F004          	lfsr	2,4
 10967  004196  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10968  004198  26D9               	addwf	fsr2l,f,c
 10969  00419A  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10970  00419C  22DA               	addwfc	fsr2h,f,c
 10971  00419E  C016  FFDE         	movff	LCD_SliderCreate@width,postinc2
 10972  0041A2  C017  FFDD         	movff	LCD_SliderCreate@width+1,postdec2
 10973                           
 10974                           ;libraries/lcd_highlevel.c: 303:   slider->sldColor = sldColor;
 10975  0041A6  EE20 F008          	lfsr	2,8
 10976  0041AA  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10977  0041AC  26D9               	addwf	fsr2l,f,c
 10978  0041AE  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10979  0041B0  22DA               	addwfc	fsr2h,f,c
 10980  0041B2  C01A  FFDE         	movff	LCD_SliderCreate@sldColor,postinc2
 10981  0041B6  C01B  FFDD         	movff	LCD_SliderCreate@sldColor+1,postdec2
 10982                           
 10983                           ;libraries/lcd_highlevel.c: 304:   slider->bgColor = bgColor;
 10984  0041BA  EE20 F00A          	lfsr	2,10
 10985  0041BE  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10986  0041C0  26D9               	addwf	fsr2l,f,c
 10987  0041C2  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10988  0041C4  22DA               	addwfc	fsr2h,f,c
 10989  0041C6  C01C  FFDE         	movff	LCD_SliderCreate@bgColor,postinc2
 10990  0041CA  C01D  FFDD         	movff	LCD_SliderCreate@bgColor+1,postdec2
 10991                           
 10992                           ;libraries/lcd_highlevel.c: 305:   slider->borderColor = borderColor;
 10993  0041CE  EE20 F00C          	lfsr	2,12
 10994  0041D2  5026               	movf	LCD_SliderCreate@slider^0,w,c
 10995  0041D4  26D9               	addwf	fsr2l,f,c
 10996  0041D6  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 10997  0041D8  22DA               	addwfc	fsr2h,f,c
 10998  0041DA  C01E  FFDE         	movff	LCD_SliderCreate@borderColor,postinc2
 10999  0041DE  C01F  FFDD         	movff	LCD_SliderCreate@borderColor+1,postdec2
 11000                           
 11001                           ;libraries/lcd_highlevel.c: 306:   slider->cursorWidth = cursorWidth;
 11002  0041E2  EE20 F00E          	lfsr	2,14
 11003  0041E6  5026               	movf	LCD_SliderCreate@slider^0,w,c
 11004  0041E8  26D9               	addwf	fsr2l,f,c
 11005  0041EA  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 11006  0041EC  22DA               	addwfc	fsr2h,f,c
 11007  0041EE  C020  FFDE         	movff	LCD_SliderCreate@cursorWidth,postinc2
 11008  0041F2  C021  FFDD         	movff	LCD_SliderCreate@cursorWidth+1,postdec2
 11009                           
 11010                           ;libraries/lcd_highlevel.c: 307:   slider->fpPress = fpPress;
 11011  0041F6  EE20 F017          	lfsr	2,23
 11012  0041FA  5026               	movf	LCD_SliderCreate@slider^0,w,c
 11013  0041FC  26D9               	addwf	fsr2l,f,c
 11014  0041FE  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 11015  004200  22DA               	addwfc	fsr2h,f,c
 11016  004202  C024  FFDE         	movff	LCD_SliderCreate@fpPress,postinc2
 11017  004206  C025  FFDD         	movff	LCD_SliderCreate@fpPress+1,postdec2
 11018                           
 11019                           ;libraries/lcd_highlevel.c: 308:   slider->steps = steps;
 11020  00420A  EE20 F015          	lfsr	2,21
 11021  00420E  5026               	movf	LCD_SliderCreate@slider^0,w,c
 11022  004210  26D9               	addwf	fsr2l,f,c
 11023  004212  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 11024  004214  22DA               	addwfc	fsr2h,f,c
 11025  004216  C022  FFDE         	movff	LCD_SliderCreate@steps,postinc2
 11026  00421A  C023  FFDD         	movff	LCD_SliderCreate@steps+1,postdec2
 11027                           
 11028                           ;libraries/lcd_highlevel.c: 309:   slider->value = 0;
 11029  00421E  EE20 F011          	lfsr	2,17
 11030  004222  5026               	movf	LCD_SliderCreate@slider^0,w,c
 11031  004224  26D9               	addwf	fsr2l,f,c
 11032  004226  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 11033  004228  22DA               	addwfc	fsr2h,f,c
 11034  00422A  0E00               	movlw	0
 11035  00422C  6EDE               	movwf	postinc2,c
 11036  00422E  0E00               	movlw	0
 11037  004230  6EDD               	movwf	postdec2,c
 11038                           
 11039                           ;libraries/lcd_highlevel.c: 310:   slider->oldValue = 0;
 11040  004232  EE20 F013          	lfsr	2,19
 11041  004236  5026               	movf	LCD_SliderCreate@slider^0,w,c
 11042  004238  26D9               	addwf	fsr2l,f,c
 11043  00423A  5027               	movf	(LCD_SliderCreate@slider+1)^0,w,c
 11044  00423C  22DA               	addwfc	fsr2h,f,c
 11045  00423E  0E00               	movlw	0
 11046  004240  6EDE               	movwf	postinc2,c
 11047  004242  0E00               	movlw	0
 11048  004244  6EDD               	movwf	postdec2,c
 11049  004246  0012               	return		;funcret
 11050  004248                     __end_of_LCD_SliderCreate:
 11051                           	callstack 0
 11052                           
 11053 ;; *************** function _LCD_ButtonCreate *****************
 11054 ;; Defined at:
 11055 ;;		line 396 in file "libraries/lcd_highlevel.c"
 11056 ;; Parameters:    Size  Location     Type
 11057 ;;  posX            2   17[COMRAM] unsigned short 
 11058 ;;  posY            2   19[COMRAM] unsigned short 
 11059 ;;  width           2   21[COMRAM] unsigned short 
 11060 ;;  height          2   23[COMRAM] unsigned short 
 11061 ;;  txtColor        2   25[COMRAM] unsigned short 
 11062 ;;  bgColor         2   27[COMRAM] unsigned short 
 11063 ;;  textOrBmp       2   29[COMRAM] PTR const unsigned char 
 11064 ;;		 -> STR_9(9), STR_8(2), STR_7(9), STR_6(11), 
 11065 ;;		 -> STR_5(9), STR_4(9), 
 11066 ;;  font            2   31[COMRAM] PTR struct .
 11067 ;;		 -> arialNarrow_12ptFontInfo(7), 
 11068 ;;  fpPress         2   33[COMRAM] PTR FTN(unsigned char ,)
 11069 ;;		 -> Absolute function(1), 
 11070 ;;  fpReleased      2   35[COMRAM] PTR FTN(unsigned char ,)
 11071 ;;		 -> Absolute function(1), 
 11072 ;;  fpOut           2   37[COMRAM] PTR FTN(unsigned char ,)
 11073 ;;		 -> Absolute function(1), 
 11074 ;;  button          2   39[COMRAM] PTR struct .
 11075 ;;		 -> g1(240), 
 11076 ;;  index           1   41[COMRAM] unsigned char 
 11077 ;; Auto vars:     Size  Location     Type
 11078 ;;		None
 11079 ;; Return value:  Size  Location     Type
 11080 ;;                  1    wreg      void 
 11081 ;; Registers used:
 11082 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11083 ;; Tracked objects:
 11084 ;;		On entry : 0/0
 11085 ;;		On exit  : 0/0
 11086 ;;		Unchanged: 0/0
 11087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11088 ;;      Params:        25       0       0       0       0       0       0
 11089 ;;      Locals:         0       0       0       0       0       0       0
 11090 ;;      Temps:          0       0       0       0       0       0       0
 11091 ;;      Totals:        25       0       0       0       0       0       0
 11092 ;;Total ram usage:       25 bytes
 11093 ;; Hardware stack levels used: 1
 11094 ;; Hardware stack levels required when called: 4
 11095 ;; This function calls:
 11096 ;;		Nothing
 11097 ;; This function is called by:
 11098 ;;		_GameParameters_init
 11099 ;; This function uses a non-reentrant model
 11100 ;;
 11101                           
 11102                           	psect	text45
 11103  004060                     __ptext45:
 11104                           	callstack 0
 11105  004060                     _LCD_ButtonCreate:
 11106                           	callstack 21
 11107                           
 11108                           ;libraries/lcd_highlevel.c: 396: void LCD_ButtonCreate(uint16_t posX, uint16_t posY,;lib
      +                          raries/lcd_highlevel.c: 397:                       uint16_t width, uint16_t height,;libr
      +                          aries/lcd_highlevel.c: 398:                       uint16_t txtColor, uint16_t bgColor,;l
      +                          ibraries/lcd_highlevel.c: 399:                       const uint8_t * textOrBmp, FONT_INF
      +                          O * font,;libraries/lcd_highlevel.c: 400:                       void (*fpPress)(uint8_t)
      +                          , void (* fpReleased)(uint8_t), void (* fpOut)(uint8_t),;libraries/lcd_highlevel.c: 401:
      +                                                 btn_t * button,
 11109                           
 11110                           ;incstack = 0
 11111  004060  C028  FFD9         	movff	LCD_ButtonCreate@button,fsr2l
 11112  004064  C029  FFDA         	movff	LCD_ButtonCreate@button+1,fsr2h
 11113  004068  C012  FFDE         	movff	LCD_ButtonCreate@posX,postinc2
 11114  00406C  C013  FFDD         	movff	LCD_ButtonCreate@posX+1,postdec2
 11115                           
 11116                           ;libraries/lcd_highlevel.c: 405:   button->posY = posY;
 11117  004070  EE20 F002          	lfsr	2,2
 11118  004074  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11119  004076  26D9               	addwf	fsr2l,f,c
 11120  004078  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11121  00407A  22DA               	addwfc	fsr2h,f,c
 11122  00407C  C014  FFDE         	movff	LCD_ButtonCreate@posY,postinc2
 11123  004080  C015  FFDD         	movff	LCD_ButtonCreate@posY+1,postdec2
 11124                           
 11125                           ;libraries/lcd_highlevel.c: 406:   button->height = height;
 11126  004084  EE20 F006          	lfsr	2,6
 11127  004088  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11128  00408A  26D9               	addwf	fsr2l,f,c
 11129  00408C  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11130  00408E  22DA               	addwfc	fsr2h,f,c
 11131  004090  C018  FFDE         	movff	LCD_ButtonCreate@height,postinc2
 11132  004094  C019  FFDD         	movff	LCD_ButtonCreate@height+1,postdec2
 11133                           
 11134                           ;libraries/lcd_highlevel.c: 407:   button->width = width;
 11135  004098  EE20 F004          	lfsr	2,4
 11136  00409C  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11137  00409E  26D9               	addwf	fsr2l,f,c
 11138  0040A0  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11139  0040A2  22DA               	addwfc	fsr2h,f,c
 11140  0040A4  C016  FFDE         	movff	LCD_ButtonCreate@width,postinc2
 11141  0040A8  C017  FFDD         	movff	LCD_ButtonCreate@width+1,postdec2
 11142                           
 11143                           ;libraries/lcd_highlevel.c: 408:   button->txtColor = txtColor;
 11144  0040AC  EE20 F008          	lfsr	2,8
 11145  0040B0  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11146  0040B2  26D9               	addwf	fsr2l,f,c
 11147  0040B4  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11148  0040B6  22DA               	addwfc	fsr2h,f,c
 11149  0040B8  C01A  FFDE         	movff	LCD_ButtonCreate@txtColor,postinc2
 11150  0040BC  C01B  FFDD         	movff	LCD_ButtonCreate@txtColor+1,postdec2
 11151                           
 11152                           ;libraries/lcd_highlevel.c: 409:   button->bgColor = bgColor;
 11153  0040C0  EE20 F00A          	lfsr	2,10
 11154  0040C4  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11155  0040C6  26D9               	addwf	fsr2l,f,c
 11156  0040C8  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11157  0040CA  22DA               	addwfc	fsr2h,f,c
 11158  0040CC  C01C  FFDE         	movff	LCD_ButtonCreate@bgColor,postinc2
 11159  0040D0  C01D  FFDD         	movff	LCD_ButtonCreate@bgColor+1,postdec2
 11160                           
 11161                           ;libraries/lcd_highlevel.c: 410:   button->text = textOrBmp;
 11162  0040D4  EE20 F00C          	lfsr	2,12
 11163  0040D8  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11164  0040DA  26D9               	addwf	fsr2l,f,c
 11165  0040DC  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11166  0040DE  22DA               	addwfc	fsr2h,f,c
 11167  0040E0  C01E  FFDE         	movff	LCD_ButtonCreate@textOrBmp,postinc2
 11168  0040E4  C01F  FFDD         	movff	LCD_ButtonCreate@textOrBmp+1,postdec2
 11169                           
 11170                           ;libraries/lcd_highlevel.c: 411:   button->font = font;
 11171  0040E8  EE20 F00E          	lfsr	2,14
 11172  0040EC  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11173  0040EE  26D9               	addwf	fsr2l,f,c
 11174  0040F0  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11175  0040F2  22DA               	addwfc	fsr2h,f,c
 11176  0040F4  C020  FFDE         	movff	LCD_ButtonCreate@font,postinc2
 11177  0040F8  C021  FFDD         	movff	LCD_ButtonCreate@font+1,postdec2
 11178                           
 11179                           ;libraries/lcd_highlevel.c: 412:   button->fpPress = fpPress;
 11180  0040FC  EE20 F011          	lfsr	2,17
 11181  004100  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11182  004102  26D9               	addwf	fsr2l,f,c
 11183  004104  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11184  004106  22DA               	addwfc	fsr2h,f,c
 11185  004108  C022  FFDE         	movff	LCD_ButtonCreate@fpPress,postinc2
 11186  00410C  C023  FFDD         	movff	LCD_ButtonCreate@fpPress+1,postdec2
 11187                           
 11188                           ;libraries/lcd_highlevel.c: 413:   button->fpReleased = fpReleased;
 11189  004110  EE20 F013          	lfsr	2,19
 11190  004114  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11191  004116  26D9               	addwf	fsr2l,f,c
 11192  004118  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11193  00411A  22DA               	addwfc	fsr2h,f,c
 11194  00411C  C024  FFDE         	movff	LCD_ButtonCreate@fpReleased,postinc2
 11195  004120  C025  FFDD         	movff	LCD_ButtonCreate@fpReleased+1,postdec2
 11196                           
 11197                           ;libraries/lcd_highlevel.c: 414:   button->fpOut = fpOut;
 11198  004124  EE20 F015          	lfsr	2,21
 11199  004128  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11200  00412A  26D9               	addwf	fsr2l,f,c
 11201  00412C  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11202  00412E  22DA               	addwfc	fsr2h,f,c
 11203  004130  C026  FFDE         	movff	LCD_ButtonCreate@fpOut,postinc2
 11204  004134  C027  FFDD         	movff	LCD_ButtonCreate@fpOut+1,postdec2
 11205                           
 11206                           ;libraries/lcd_highlevel.c: 415:   button->index = index;
 11207  004138  EE20 F017          	lfsr	2,23
 11208  00413C  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11209  00413E  26D9               	addwf	fsr2l,f,c
 11210  004140  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11211  004142  22DA               	addwfc	fsr2h,f,c
 11212  004144  C02A  FFDF         	movff	LCD_ButtonCreate@index,indf2
 11213                           
 11214                           ;libraries/lcd_highlevel.c: 416:   button->pressed = 0;
 11215  004148  EE20 F010          	lfsr	2,16
 11216  00414C  5028               	movf	LCD_ButtonCreate@button^0,w,c
 11217  00414E  26D9               	addwf	fsr2l,f,c
 11218  004150  5029               	movf	(LCD_ButtonCreate@button+1)^0,w,c
 11219  004152  22DA               	addwfc	fsr2h,f,c
 11220  004154  0E00               	movlw	0
 11221  004156  6EDF               	movwf	indf2,c
 11222  004158  0012               	return		;funcret
 11223  00415A                     __end_of_LCD_ButtonCreate:
 11224                           	callstack 0
 11225                           
 11226 ;; *************** function _Ball_init *****************
 11227 ;; Defined at:
 11228 ;;		line 6 in file "class/ball.c"
 11229 ;; Parameters:    Size  Location     Type
 11230 ;;  b               2   17[COMRAM] PTR struct Ball
 11231 ;;		 -> g1(240), 
 11232 ;; Auto vars:     Size  Location     Type
 11233 ;;		None
 11234 ;; Return value:  Size  Location     Type
 11235 ;;                  1    wreg      void 
 11236 ;; Registers used:
 11237 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11238 ;; Tracked objects:
 11239 ;;		On entry : 0/0
 11240 ;;		On exit  : 0/0
 11241 ;;		Unchanged: 0/0
 11242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11243 ;;      Params:         2       0       0       0       0       0       0
 11244 ;;      Locals:         0       0       0       0       0       0       0
 11245 ;;      Temps:          0       0       0       0       0       0       0
 11246 ;;      Totals:         2       0       0       0       0       0       0
 11247 ;;Total ram usage:        2 bytes
 11248 ;; Hardware stack levels used: 1
 11249 ;; Hardware stack levels required when called: 4
 11250 ;; This function calls:
 11251 ;;		Nothing
 11252 ;; This function is called by:
 11253 ;;		_GameParameters_init
 11254 ;; This function uses a non-reentrant model
 11255 ;;
 11256                           
 11257                           	psect	text46
 11258  0052EC                     __ptext46:
 11259                           	callstack 0
 11260  0052EC                     _Ball_init:
 11261                           	callstack 21
 11262                           
 11263                           ;class/ball.c: 6: void Ball_init(struct Ball* b);class/ball.c: 7: {;class/ball.c: 8:    
      +                           b->x = 90;
 11264                           
 11265                           ;incstack = 0
 11266  0052EC  C012  FFD9         	movff	Ball_init@b,fsr2l
 11267  0052F0  C013  FFDA         	movff	Ball_init@b+1,fsr2h
 11268  0052F4  0E5A               	movlw	90
 11269  0052F6  6EDE               	movwf	postinc2,c
 11270  0052F8  0E00               	movlw	0
 11271  0052FA  6EDD               	movwf	postdec2,c
 11272                           
 11273                           ;class/ball.c: 9:     b->y = 150;
 11274  0052FC  EE20 F002          	lfsr	2,2
 11275  005300  5012               	movf	Ball_init@b^0,w,c
 11276  005302  26D9               	addwf	fsr2l,f,c
 11277  005304  5013               	movf	(Ball_init@b+1)^0,w,c
 11278  005306  22DA               	addwfc	fsr2h,f,c
 11279  005308  0E96               	movlw	150
 11280  00530A  6EDE               	movwf	postinc2,c
 11281  00530C  0E00               	movlw	0
 11282  00530E  6EDD               	movwf	postdec2,c
 11283                           
 11284                           ;class/ball.c: 10:     b->oldx=20;
 11285  005310  EE20 F004          	lfsr	2,4
 11286  005314  5012               	movf	Ball_init@b^0,w,c
 11287  005316  26D9               	addwf	fsr2l,f,c
 11288  005318  5013               	movf	(Ball_init@b+1)^0,w,c
 11289  00531A  22DA               	addwfc	fsr2h,f,c
 11290  00531C  0E14               	movlw	20
 11291  00531E  6EDE               	movwf	postinc2,c
 11292  005320  0E00               	movlw	0
 11293  005322  6EDD               	movwf	postdec2,c
 11294                           
 11295                           ;class/ball.c: 11:     b->oldy=20;
 11296  005324  EE20 F006          	lfsr	2,6
 11297  005328  5012               	movf	Ball_init@b^0,w,c
 11298  00532A  26D9               	addwf	fsr2l,f,c
 11299  00532C  5013               	movf	(Ball_init@b+1)^0,w,c
 11300  00532E  22DA               	addwfc	fsr2h,f,c
 11301  005330  0E14               	movlw	20
 11302  005332  6EDE               	movwf	postinc2,c
 11303  005334  0E00               	movlw	0
 11304  005336  6EDD               	movwf	postdec2,c
 11305                           
 11306                           ;class/ball.c: 12:     b->dx = 0;
 11307  005338  EE20 F008          	lfsr	2,8
 11308  00533C  5012               	movf	Ball_init@b^0,w,c
 11309  00533E  26D9               	addwf	fsr2l,f,c
 11310  005340  5013               	movf	(Ball_init@b+1)^0,w,c
 11311  005342  22DA               	addwfc	fsr2h,f,c
 11312  005344  0E00               	movlw	0
 11313  005346  6EDE               	movwf	postinc2,c
 11314  005348  0E00               	movlw	0
 11315  00534A  6EDD               	movwf	postdec2,c
 11316  00534C  0012               	return		;funcret
 11317  00534E                     __end_of_Ball_init:
 11318                           	callstack 0
 11319                           
 11320 ;; *************** function _displaySM *****************
 11321 ;; Defined at:
 11322 ;;		line 30 in file "stateMachine/display.c"
 11323 ;; Parameters:    Size  Location     Type
 11324 ;;  ev              1    wreg     unsigned char 
 11325 ;;  g               2   65[BANK0 ] PTR struct GameParameter
 11326 ;;		 -> g1(240), 
 11327 ;; Auto vars:     Size  Location     Type
 11328 ;;  ev              1   69[BANK0 ] unsigned char 
 11329 ;; Return value:  Size  Location     Type
 11330 ;;                  1    wreg      void 
 11331 ;; Registers used:
 11332 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11333 ;; Tracked objects:
 11334 ;;		On entry : 3F/0
 11335 ;;		On exit  : 0/0
 11336 ;;		Unchanged: 0/0
 11337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11338 ;;      Params:         0       2       0       0       0       0       0
 11339 ;;      Locals:         0       1       0       0       0       0       0
 11340 ;;      Temps:          0       2       0       0       0       0       0
 11341 ;;      Totals:         0       5       0       0       0       0       0
 11342 ;;Total ram usage:        5 bytes
 11343 ;; Hardware stack levels used: 1
 11344 ;; Hardware stack levels required when called: 14
 11345 ;; This function calls:
 11346 ;;		_Menu_inGameDraw
 11347 ;;		_displayController
 11348 ;; This function is called by:
 11349 ;;		_Factory_exec
 11350 ;; This function uses a non-reentrant model
 11351 ;;
 11352                           
 11353                           	psect	text47
 11354  004BFE                     __ptext47:
 11355                           	callstack 0
 11356  004BFE                     _displaySM:
 11357                           	callstack 15
 11358                           
 11359                           ;incstack = 0
 11360                           ;displaySM@ev stored from wreg
 11361  004BFE  6FEF               	movwf	displaySM@ev& (0+255),b
 11362                           
 11363                           ;stateMachine/display.c: 30: void displaySM(Event ev, GameParameters* g);stateMachine/di
      +                          splay.c: 31: {;stateMachine/display.c: 32:    switch(displayState)
 11364  004C00  D03B               	goto	l8852
 11365  004C02                     l8808:
 11366                           
 11367                           ; BSR set to: 0
 11368                           ;stateMachine/display.c: 35:             if((ev==evOnePlayer)||(ev==evTwoPlayer))
 11369  004C02  0E05               	movlw	5
 11370  004C04  19EF               	xorwf	displaySM@ev& (0+255),w,b
 11371  004C06  B4D8               	btfsc	status,2,c
 11372  004C08  D004               	goto	u6480
 11373                           
 11374                           ; BSR set to: 0
 11375  004C0A  0E06               	movlw	6
 11376  004C0C  19EF               	xorwf	displaySM@ev& (0+255),w,b
 11377  004C0E  A4D8               	btfss	status,2,c
 11378  004C10  D010               	goto	l8818
 11379  004C12                     u6480:
 11380                           
 11381                           ; BSR set to: 0
 11382                           ;stateMachine/display.c: 36:             {;stateMachine/display.c: 37:                 d
      +                          isplayState=INGAME;
 11383  004C12  0E02               	movlw	2
 11384  004C14  6F88               	movwf	_displayState& (0+255),b
 11385                           
 11386                           ; BSR set to: 0
 11387                           ;stateMachine/display.c: 38:                 Menu_inGameDraw(g);
 11388  004C16  C0EB  F0E4         	movff	displaySM@g,Menu_inGameDraw@g
 11389  004C1A  C0EC  F0E5         	movff	displaySM@g+1,Menu_inGameDraw@g+1
 11390  004C1E  ECA4  F026         	call	_Menu_inGameDraw	;wreg free
 11391                           
 11392                           ;stateMachine/display.c: 39:                 displayController(g,ev);
 11393  004C22  C0EB  F0E6         	movff	displaySM@g,displayController@g
 11394  004C26  C0EC  F0E7         	movff	displaySM@g+1,displayController@g+1
 11395  004C2A  C0EF  F0E8         	movff	displaySM@ev,displayController@ev
 11396  004C2E  EC24  F021         	call	_displayController	;wreg free
 11397  004C32                     l8818:
 11398                           
 11399                           ;stateMachine/display.c: 41:             if(ev==evParameters)
 11400  004C32  0E07               	movlw	7
 11401  004C34  0100               	movlb	0	; () banked
 11402  004C36  19EF               	xorwf	displaySM@ev& (0+255),w,b
 11403  004C38  A4D8               	btfss	status,2,c
 11404  004C3A  0012               	return	
 11405                           
 11406                           ; BSR set to: 0
 11407                           ;stateMachine/display.c: 42:             {;stateMachine/display.c: 43:                 d
      +                          isplayState=PARAMETERS;
 11408  004C3C  0E01               	movlw	1
 11409  004C3E                     L7:
 11410  004C3E  6F88               	movwf	_displayState& (0+255),b
 11411  004C40                     l8822:
 11412                           
 11413                           ; BSR set to: 0
 11414                           ;stateMachine/display.c: 44:                 displayController(g,ev);
 11415  004C40  C0EB  F0E6         	movff	displaySM@g,displayController@g
 11416  004C44  C0EC  F0E7         	movff	displaySM@g+1,displayController@g+1
 11417  004C48  C0EF  F0E8         	movff	displaySM@ev,displayController@ev
 11418  004C4C  EC24  F021         	call	_displayController	;wreg free
 11419  004C50  0012               	return	
 11420  004C52                     l8824:
 11421                           
 11422                           ; BSR set to: 0
 11423                           ;stateMachine/display.c: 49:             if(ev==evLeave)
 11424  004C52  0E08               	movlw	8
 11425  004C54  19EF               	xorwf	displaySM@ev& (0+255),w,b
 11426  004C56  A4D8               	btfss	status,2,c
 11427  004C58  0012               	return	
 11428  004C5A                     u6500:
 11429                           
 11430                           ; BSR set to: 0
 11431                           ;stateMachine/display.c: 50:             {;stateMachine/display.c: 51:                 d
      +                          isplayState=WELCOME;
 11432  004C5A  0E00               	movlw	0
 11433  004C5C  D7F0               	goto	L7
 11434  004C5E                     l8830:
 11435                           
 11436                           ; BSR set to: 0
 11437                           ;stateMachine/display.c: 57:             if(ev==evEndGame)
 11438  004C5E  0E09               	movlw	9
 11439  004C60  19EF               	xorwf	displaySM@ev& (0+255),w,b
 11440  004C62  A4D8               	btfss	status,2,c
 11441  004C64  D002               	goto	l8836
 11442                           
 11443                           ; BSR set to: 0
 11444                           ;stateMachine/display.c: 58:             {;stateMachine/display.c: 59:                 d
      +                          isplayState=ENDGAME;
 11445  004C66  0E03               	movlw	3
 11446  004C68  D7EA               	goto	L7
 11447  004C6A                     l8836:
 11448                           
 11449                           ; BSR set to: 0
 11450  004C6A  0E08               	movlw	8
 11451  004C6C  19EF               	xorwf	displaySM@ev& (0+255),w,b
 11452  004C6E  B4D8               	btfsc	status,2,c
 11453  004C70  D7F4               	goto	u6500
 11454  004C72  D7E6               	goto	l8822
 11455  004C74                     l8844:
 11456                           
 11457                           ; BSR set to: 0
 11458                           ;stateMachine/display.c: 74:            if(ev==evNewGame)
 11459  004C74  0E0F               	movlw	15
 11460  004C76  D7EE               	goto	L14
 11461  004C78                     l8852:
 11462  004C78  0100               	movlb	0	; () banked
 11463  004C7A  5188               	movf	_displayState& (0+255),w,b
 11464  004C7C  6FED               	movwf	??_displaySM& (0+255),b
 11465  004C7E  6BEE               	clrf	(??_displaySM+1)& (0+255),b
 11466                           
 11467                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11468                           ; Switch size 1, requested type "simple"
 11469                           ; Number of cases is 1, Range of values is 0 to 0
 11470                           ; switch strategies available:
 11471                           ; Name         Instructions Cycles
 11472                           ; simple_byte            4     3 (average)
 11473                           ;	Chosen strategy is simple_byte
 11474  004C80  51EE               	movf	(??_displaySM+1)& (0+255),w,b
 11475  004C82  0A00               	xorlw	0	; case 0
 11476  004C84  A4D8               	btfss	status,2,c
 11477  004C86  0012               	return	
 11478                           
 11479                           ; BSR set to: 0
 11480                           ; Switch size 1, requested type "simple"
 11481                           ; Number of cases is 4, Range of values is 0 to 3
 11482                           ; switch strategies available:
 11483                           ; Name         Instructions Cycles
 11484                           ; simple_byte           13     7 (average)
 11485                           ;	Chosen strategy is simple_byte
 11486  004C88  51ED               	movf	??_displaySM& (0+255),w,b
 11487  004C8A  0A00               	xorlw	0	; case 0
 11488  004C8C  B4D8               	btfsc	status,2,c
 11489  004C8E  D7B9               	goto	l8808
 11490  004C90  0A01               	xorlw	1	; case 1
 11491  004C92  B4D8               	btfsc	status,2,c
 11492  004C94  D7DE               	goto	l8824
 11493  004C96  0A03               	xorlw	3	; case 2
 11494  004C98  B4D8               	btfsc	status,2,c
 11495  004C9A  D7E1               	goto	l8830
 11496  004C9C  0A01               	xorlw	1	; case 3
 11497  004C9E  A4D8               	btfss	status,2,c
 11498  004CA0  0012               	return	
 11499  004CA2  D7E8               	goto	l8844
 11500  004CA4                     __end_of_displaySM:
 11501                           	callstack 0
 11502                           
 11503 ;; *************** function _displayController *****************
 11504 ;; Defined at:
 11505 ;;		line 94 in file "stateMachine/display.c"
 11506 ;; Parameters:    Size  Location     Type
 11507 ;;  g               2   60[BANK0 ] PTR struct GameParameter
 11508 ;;		 -> g1(240), 
 11509 ;;  ev              1   62[BANK0 ] unsigned char 
 11510 ;; Auto vars:     Size  Location     Type
 11511 ;;		None
 11512 ;; Return value:  Size  Location     Type
 11513 ;;                  1    wreg      void 
 11514 ;; Registers used:
 11515 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11516 ;; Tracked objects:
 11517 ;;		On entry : 0/0
 11518 ;;		On exit  : 0/0
 11519 ;;		Unchanged: 0/0
 11520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11521 ;;      Params:         0       3       0       0       0       0       0
 11522 ;;      Locals:         0       0       0       0       0       0       0
 11523 ;;      Temps:          0       2       0       0       0       0       0
 11524 ;;      Totals:         0       5       0       0       0       0       0
 11525 ;;Total ram usage:        5 bytes
 11526 ;; Hardware stack levels used: 1
 11527 ;; Hardware stack levels required when called: 13
 11528 ;; This function calls:
 11529 ;;		_Ball_draw
 11530 ;;		_LCD_DrawRect
 11531 ;;		_Menu_endGame
 11532 ;;		_Menu_parametersDraw
 11533 ;;		_Menu_welcomeDraw
 11534 ;;		_Paddle_draw
 11535 ;;		_Score_draw
 11536 ;; This function is called by:
 11537 ;;		_displayInit
 11538 ;;		_displaySM
 11539 ;; This function uses a non-reentrant model
 11540 ;;
 11541                           
 11542                           	psect	text48
 11543  004248                     __ptext48:
 11544                           	callstack 0
 11545  004248                     _displayController:
 11546                           	callstack 14
 11547                           
 11548                           ;stateMachine/display.c: 94: void displayController(GameParameters* g,Event ev);stateMac
      +                          hine/display.c: 95: {;stateMachine/display.c: 96:     switch(displayState)
 11549                           
 11550                           ;incstack = 0
 11551  004248  D060               	goto	l8746
 11552  00424A                     l8720:
 11553                           
 11554                           ; BSR set to: 0
 11555                           ;stateMachine/display.c: 100:             Menu_welcomeDraw(g);
 11556  00424A  C0E6  F044         	movff	displayController@g,Menu_welcomeDraw@g
 11557  00424E  C0E7  F045         	movff	displayController@g+1,Menu_welcomeDraw@g+1
 11558  004252  ECC7  F027         	call	_Menu_welcomeDraw	;wreg free
 11559                           
 11560                           ;stateMachine/display.c: 101:             break;
 11561  004256  0012               	return	
 11562  004258                     l8722:
 11563                           
 11564                           ; BSR set to: 0
 11565                           ;stateMachine/display.c: 105:             Menu_parametersDraw(g);
 11566  004258  C0E6  F0E4         	movff	displayController@g,Menu_parametersDraw@g
 11567  00425C  C0E7  F0E5         	movff	displayController@g+1,Menu_parametersDraw@g+1
 11568  004260  EC98  F01E         	call	_Menu_parametersDraw	;wreg free
 11569                           
 11570                           ;stateMachine/display.c: 106:             break;
 11571  004264  0012               	return	
 11572  004266                     l8724:
 11573                           
 11574                           ; BSR set to: 0
 11575                           ;stateMachine/display.c: 110:             if(ev==evRedrawPaddle1)
 11576  004266  0E0B               	movlw	11
 11577  004268  19E8               	xorwf	displayController@ev& (0+255),w,b
 11578  00426A  A4D8               	btfss	status,2,c
 11579  00426C  D008               	goto	l8728
 11580                           
 11581                           ; BSR set to: 0
 11582                           ;stateMachine/display.c: 111:             {;stateMachine/display.c: 112:                
      +                           Paddle_draw(&g->p1);
 11583  00426E  0ED6               	movlw	214
 11584  004270  25E6               	addwf	displayController@g& (0+255),w,b
 11585  004272  6E25               	movwf	Paddle_draw@p^0,c
 11586  004274  0E00               	movlw	0
 11587  004276  21E7               	addwfc	(displayController@g+1)& (0+255),w,b
 11588  004278  6E26               	movwf	(Paddle_draw@p+1)^0,c
 11589  00427A  EC6D  F01D         	call	_Paddle_draw	;wreg free
 11590  00427E                     l8728:
 11591                           
 11592                           ;stateMachine/display.c: 114:             if(ev==evRedrawPaddle2)
 11593  00427E  0E0C               	movlw	12
 11594  004280  0100               	movlb	0	; () banked
 11595  004282  19E8               	xorwf	displayController@ev& (0+255),w,b
 11596  004284  A4D8               	btfss	status,2,c
 11597  004286  D008               	goto	l8732
 11598                           
 11599                           ; BSR set to: 0
 11600                           ;stateMachine/display.c: 115:             {;stateMachine/display.c: 116:                
      +                           Paddle_draw(&g->p2);
 11601  004288  0EE0               	movlw	224
 11602  00428A  25E6               	addwf	displayController@g& (0+255),w,b
 11603  00428C  6E25               	movwf	Paddle_draw@p^0,c
 11604  00428E  0E00               	movlw	0
 11605  004290  21E7               	addwfc	(displayController@g+1)& (0+255),w,b
 11606  004292  6E26               	movwf	(Paddle_draw@p+1)^0,c
 11607  004294  EC6D  F01D         	call	_Paddle_draw	;wreg free
 11608  004298                     l8732:
 11609                           
 11610                           ;stateMachine/display.c: 118:             if(ev==evRedrawBall)
 11611  004298  0E0D               	movlw	13
 11612  00429A  0100               	movlb	0	; () banked
 11613  00429C  19E8               	xorwf	displayController@ev& (0+255),w,b
 11614  00429E  A4D8               	btfss	status,2,c
 11615  0042A0  D008               	goto	l8736
 11616                           
 11617                           ; BSR set to: 0
 11618                           ;stateMachine/display.c: 119:             {;stateMachine/display.c: 120:                
      +                           Ball_draw(&g->b);
 11619  0042A2  0ECA               	movlw	202
 11620  0042A4  25E6               	addwf	displayController@g& (0+255),w,b
 11621  0042A6  6E25               	movwf	Ball_draw@b^0,c
 11622  0042A8  0E00               	movlw	0
 11623  0042AA  21E7               	addwfc	(displayController@g+1)& (0+255),w,b
 11624  0042AC  6E26               	movwf	(Ball_draw@b+1)^0,c
 11625  0042AE  EC37  F01A         	call	_Ball_draw	;wreg free
 11626  0042B2                     l8736:
 11627                           
 11628                           ;stateMachine/display.c: 122:             if(ev==evRedrawScore)
 11629  0042B2  0E0E               	movlw	14
 11630  0042B4  0100               	movlb	0	; () banked
 11631  0042B6  19E8               	xorwf	displayController@ev& (0+255),w,b
 11632  0042B8  A4D8               	btfss	status,2,c
 11633  0042BA  0012               	return	
 11634                           
 11635                           ; BSR set to: 0
 11636                           ;stateMachine/display.c: 123:             {;stateMachine/display.c: 124:                
      +                           Score_draw(&g->s1);
 11637  0042BC  0EEA               	movlw	234
 11638  0042BE  25E6               	addwf	displayController@g& (0+255),w,b
 11639  0042C0  6FD5               	movwf	Score_draw@s& (0+255),b
 11640  0042C2  0E00               	movlw	0
 11641  0042C4  21E7               	addwfc	(displayController@g+1)& (0+255),w,b
 11642  0042C6  6FD6               	movwf	(Score_draw@s+1)& (0+255),b
 11643  0042C8  EC0F  F022         	call	_Score_draw	;wreg free
 11644                           
 11645                           ;stateMachine/display.c: 125:                 LCD_DrawRect(0,160,239,160,1,0b11111111111
      +                          11111);
 11646  0042CC  0E00               	movlw	0
 11647  0042CE  6E13               	movwf	(LCD_DrawRect@posX1+1)^0,c
 11648  0042D0  0E00               	movlw	0
 11649  0042D2  6E12               	movwf	LCD_DrawRect@posX1^0,c
 11650  0042D4  0E00               	movlw	0
 11651  0042D6  6E15               	movwf	(LCD_DrawRect@posY1+1)^0,c
 11652  0042D8  0EA0               	movlw	160
 11653  0042DA  6E14               	movwf	LCD_DrawRect@posY1^0,c
 11654  0042DC  0E00               	movlw	0
 11655  0042DE  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 11656  0042E0  0EEF               	movlw	239
 11657  0042E2  6E16               	movwf	LCD_DrawRect@posX2^0,c
 11658  0042E4  0E00               	movlw	0
 11659  0042E6  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 11660  0042E8  0EA0               	movlw	160
 11661  0042EA  6E18               	movwf	LCD_DrawRect@posY2^0,c
 11662  0042EC  0E01               	movlw	1
 11663  0042EE  6E1A               	movwf	LCD_DrawRect@fill^0,c
 11664  0042F0  0EFF               	movlw	255
 11665  0042F2  6E1C               	movwf	(LCD_DrawRect@color+1)^0,c
 11666  0042F4  681B               	setf	LCD_DrawRect@color^0,c
 11667  0042F6  EC36  F013         	call	_LCD_DrawRect	;wreg free
 11668  0042FA  0012               	return	
 11669  0042FC                     l8742:
 11670                           
 11671                           ; BSR set to: 0
 11672                           ;stateMachine/display.c: 130:             Menu_endGame(g);
 11673  0042FC  C0E6  F044         	movff	displayController@g,Menu_endGame@g
 11674  004300  C0E7  F045         	movff	displayController@g+1,Menu_endGame@g+1
 11675  004304  EC52  F024         	call	_Menu_endGame	;wreg free
 11676                           
 11677                           ;stateMachine/display.c: 131:             break;
 11678  004308  0012               	return	
 11679  00430A                     l8746:
 11680  00430A  0100               	movlb	0	; () banked
 11681  00430C  5188               	movf	_displayState& (0+255),w,b
 11682  00430E  6FE9               	movwf	??_displayController& (0+255),b
 11683  004310  6BEA               	clrf	(??_displayController+1)& (0+255),b
 11684                           
 11685                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11686                           ; Switch size 1, requested type "simple"
 11687                           ; Number of cases is 1, Range of values is 0 to 0
 11688                           ; switch strategies available:
 11689                           ; Name         Instructions Cycles
 11690                           ; simple_byte            4     3 (average)
 11691                           ;	Chosen strategy is simple_byte
 11692  004312  51EA               	movf	(??_displayController+1)& (0+255),w,b
 11693  004314  0A00               	xorlw	0	; case 0
 11694  004316  A4D8               	btfss	status,2,c
 11695  004318  0012               	return	
 11696                           
 11697                           ; BSR set to: 0
 11698                           ; Switch size 1, requested type "simple"
 11699                           ; Number of cases is 4, Range of values is 0 to 3
 11700                           ; switch strategies available:
 11701                           ; Name         Instructions Cycles
 11702                           ; simple_byte           13     7 (average)
 11703                           ;	Chosen strategy is simple_byte
 11704  00431A  51E9               	movf	??_displayController& (0+255),w,b
 11705  00431C  0A00               	xorlw	0	; case 0
 11706  00431E  B4D8               	btfsc	status,2,c
 11707  004320  D794               	goto	l8720
 11708  004322  0A01               	xorlw	1	; case 1
 11709  004324  B4D8               	btfsc	status,2,c
 11710  004326  D798               	goto	l8722
 11711  004328  0A03               	xorlw	3	; case 2
 11712  00432A  B4D8               	btfsc	status,2,c
 11713  00432C  D79C               	goto	l8724
 11714  00432E  0A01               	xorlw	1	; case 3
 11715  004330  A4D8               	btfss	status,2,c
 11716  004332  0012               	return	
 11717  004334  D7E3               	goto	l8742
 11718  004336                     __end_of_displayController:
 11719                           	callstack 0
 11720                           
 11721 ;; *************** function _Menu_welcomeDraw *****************
 11722 ;; Defined at:
 11723 ;;		line 7 in file "class/menu.c"
 11724 ;; Parameters:    Size  Location     Type
 11725 ;;  g               2   67[COMRAM] PTR struct GameParameter
 11726 ;;		 -> g1(240), 
 11727 ;; Auto vars:     Size  Location     Type
 11728 ;;		None
 11729 ;; Return value:  Size  Location     Type
 11730 ;;                  1    wreg      void 
 11731 ;; Registers used:
 11732 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11733 ;; Tracked objects:
 11734 ;;		On entry : 0/0
 11735 ;;		On exit  : 0/0
 11736 ;;		Unchanged: 0/0
 11737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11738 ;;      Params:         2       0       0       0       0       0       0
 11739 ;;      Locals:         0       0       0       0       0       0       0
 11740 ;;      Temps:          0       0       0       0       0       0       0
 11741 ;;      Totals:         2       0       0       0       0       0       0
 11742 ;;Total ram usage:        2 bytes
 11743 ;; Hardware stack levels used: 1
 11744 ;; Hardware stack levels required when called: 7
 11745 ;; This function calls:
 11746 ;;		_LCD_ButtonDraw
 11747 ;;		_LCD_DrawText
 11748 ;;		_LCD_Fill
 11749 ;; This function is called by:
 11750 ;;		_displayController
 11751 ;; This function uses a non-reentrant model
 11752 ;;
 11753                           
 11754                           	psect	text49
 11755  004F8E                     __ptext49:
 11756                           	callstack 0
 11757  004F8E                     _Menu_welcomeDraw:
 11758                           	callstack 19
 11759                           
 11760                           ;class/menu.c: 7: void Menu_welcomeDraw(GameParameters* g);class/menu.c: 8: {;class/menu
      +                          .c: 9:     LCD_Fill(0b0000000000000000);
 11761                           
 11762                           ;incstack = 0
 11763  004F8E  0E00               	movlw	0
 11764  004F90  6E13               	movwf	(LCD_Fill@color+1)^0,c
 11765  004F92  0E00               	movlw	0
 11766  004F94  6E12               	movwf	LCD_Fill@color^0,c
 11767  004F96  ECAA  F024         	call	_LCD_Fill	;wreg free
 11768                           
 11769                           ;class/menu.c: 10:     LCD_DrawText("WELCOME",&arialNarrow_12ptFontInfo,A_CENTER,120,50,
      +                          0b1111111111111111,0b0000000000000000);
 11770  004F9A  0EEB               	movlw	low STR_10
 11771  004F9C  6E20               	movwf	LCD_DrawText@msg^0,c
 11772  004F9E  0E7F               	movlw	high STR_10
 11773  004FA0  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
 11774  004FA2  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 11775  004FA4  6E22               	movwf	LCD_DrawText@font^0,c
 11776  004FA6  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 11777  004FA8  6E23               	movwf	(LCD_DrawText@font+1)^0,c
 11778  004FAA  0E02               	movlw	2
 11779  004FAC  6E24               	movwf	LCD_DrawText@align^0,c
 11780  004FAE  0E00               	movlw	0
 11781  004FB0  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 11782  004FB2  0E78               	movlw	120
 11783  004FB4  6E25               	movwf	LCD_DrawText@posX^0,c
 11784  004FB6  0E00               	movlw	0
 11785  004FB8  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
 11786  004FBA  0E32               	movlw	50
 11787  004FBC  6E27               	movwf	LCD_DrawText@posY^0,c
 11788  004FBE  0EFF               	movlw	255
 11789  004FC0  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
 11790  004FC2  6829               	setf	LCD_DrawText@color^0,c
 11791  004FC4  0E00               	movlw	0
 11792  004FC6  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
 11793  004FC8  0E00               	movlw	0
 11794  004FCA  6E2B               	movwf	LCD_DrawText@bg_color^0,c
 11795  004FCC  EC87  F00F         	call	_LCD_DrawText	;wreg free
 11796                           
 11797                           ;class/menu.c: 12:     LCD_ButtonDraw(&(g->btnOnePlayer));
 11798  004FD0  0E20               	movlw	32
 11799  004FD2  2444               	addwf	Menu_welcomeDraw@g^0,w,c
 11800  004FD4  6E42               	movwf	LCD_ButtonDraw@button^0,c
 11801  004FD6  0E00               	movlw	0
 11802  004FD8  2045               	addwfc	(Menu_welcomeDraw@g+1)^0,w,c
 11803  004FDA  6E43               	movwf	(LCD_ButtonDraw@button+1)^0,c
 11804  004FDC  EC26  F007         	call	_LCD_ButtonDraw	;wreg free
 11805                           
 11806                           ;class/menu.c: 13:     LCD_ButtonDraw(&(g->btnTwoPlayer));
 11807  004FE0  0E38               	movlw	56
 11808  004FE2  2444               	addwf	Menu_welcomeDraw@g^0,w,c
 11809  004FE4  6E42               	movwf	LCD_ButtonDraw@button^0,c
 11810  004FE6  0E00               	movlw	0
 11811  004FE8  2045               	addwfc	(Menu_welcomeDraw@g+1)^0,w,c
 11812  004FEA  6E43               	movwf	(LCD_ButtonDraw@button+1)^0,c
 11813  004FEC  EC26  F007         	call	_LCD_ButtonDraw	;wreg free
 11814                           
 11815                           ;class/menu.c: 14:     LCD_ButtonDraw(&(g->btnParam));
 11816  004FF0  0E08               	movlw	8
 11817  004FF2  2444               	addwf	Menu_welcomeDraw@g^0,w,c
 11818  004FF4  6E42               	movwf	LCD_ButtonDraw@button^0,c
 11819  004FF6  0E00               	movlw	0
 11820  004FF8  2045               	addwfc	(Menu_welcomeDraw@g+1)^0,w,c
 11821  004FFA  6E43               	movwf	(LCD_ButtonDraw@button+1)^0,c
 11822  004FFC  EC26  F007         	call	_LCD_ButtonDraw	;wreg free
 11823                           
 11824                           ;class/menu.c: 15:     LCD_ButtonDraw(&(g->btnTurnOff));
 11825  005000  0E80               	movlw	128
 11826  005002  2444               	addwf	Menu_welcomeDraw@g^0,w,c
 11827  005004  6E42               	movwf	LCD_ButtonDraw@button^0,c
 11828  005006  0E00               	movlw	0
 11829  005008  2045               	addwfc	(Menu_welcomeDraw@g+1)^0,w,c
 11830  00500A  6E43               	movwf	(LCD_ButtonDraw@button+1)^0,c
 11831  00500C  EC26  F007         	call	_LCD_ButtonDraw	;wreg free
 11832  005010  0012               	return		;funcret
 11833  005012                     __end_of_Menu_welcomeDraw:
 11834                           	callstack 0
 11835                           
 11836 ;; *************** function _Menu_parametersDraw *****************
 11837 ;; Defined at:
 11838 ;;		line 21 in file "class/menu.c"
 11839 ;; Parameters:    Size  Location     Type
 11840 ;;  g               2   58[BANK0 ] PTR struct GameParameter
 11841 ;;		 -> g1(240), 
 11842 ;; Auto vars:     Size  Location     Type
 11843 ;;		None
 11844 ;; Return value:  Size  Location     Type
 11845 ;;                  1    wreg      void 
 11846 ;; Registers used:
 11847 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11848 ;; Tracked objects:
 11849 ;;		On entry : 0/0
 11850 ;;		On exit  : 0/0
 11851 ;;		Unchanged: 0/0
 11852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11853 ;;      Params:         0       2       0       0       0       0       0
 11854 ;;      Locals:         0       0       0       0       0       0       0
 11855 ;;      Temps:          0       0       0       0       0       0       0
 11856 ;;      Totals:         0       2       0       0       0       0       0
 11857 ;;Total ram usage:        2 bytes
 11858 ;; Hardware stack levels used: 1
 11859 ;; Hardware stack levels required when called: 7
 11860 ;; This function calls:
 11861 ;;		_LCD_ButtonDraw
 11862 ;;		_LCD_DrawText
 11863 ;;		_LCD_Fill
 11864 ;;		_LCD_SliderDraw
 11865 ;; This function is called by:
 11866 ;;		_displayController
 11867 ;; This function uses a non-reentrant model
 11868 ;;
 11869                           
 11870                           	psect	text50
 11871  003D30                     __ptext50:
 11872                           	callstack 0
 11873  003D30                     _Menu_parametersDraw:
 11874                           	callstack 19
 11875                           
 11876                           ;class/menu.c: 21: void Menu_parametersDraw(GameParameters* g);class/menu.c: 22: {;class
      +                          /menu.c: 23:     LCD_Fill(0b0000000000000000);
 11877                           
 11878                           ;incstack = 0
 11879  003D30  0E00               	movlw	0
 11880  003D32  6E13               	movwf	(LCD_Fill@color+1)^0,c
 11881  003D34  0E00               	movlw	0
 11882  003D36  6E12               	movwf	LCD_Fill@color^0,c
 11883  003D38  ECAA  F024         	call	_LCD_Fill	;wreg free
 11884                           
 11885                           ;class/menu.c: 24:     LCD_DrawText("PARAMETERS",&arialNarrow_12ptFontInfo,A_CENTER,120,
      +                          50,0b1111111111111111,0b0000000000000000);
 11886  003D3C  0E9C               	movlw	low STR_11
 11887  003D3E  6E20               	movwf	LCD_DrawText@msg^0,c
 11888  003D40  0E7F               	movlw	high STR_11
 11889  003D42  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
 11890  003D44  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 11891  003D46  6E22               	movwf	LCD_DrawText@font^0,c
 11892  003D48  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 11893  003D4A  6E23               	movwf	(LCD_DrawText@font+1)^0,c
 11894  003D4C  0E02               	movlw	2
 11895  003D4E  6E24               	movwf	LCD_DrawText@align^0,c
 11896  003D50  0E00               	movlw	0
 11897  003D52  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 11898  003D54  0E78               	movlw	120
 11899  003D56  6E25               	movwf	LCD_DrawText@posX^0,c
 11900  003D58  0E00               	movlw	0
 11901  003D5A  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
 11902  003D5C  0E32               	movlw	50
 11903  003D5E  6E27               	movwf	LCD_DrawText@posY^0,c
 11904  003D60  0EFF               	movlw	255
 11905  003D62  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
 11906  003D64  6829               	setf	LCD_DrawText@color^0,c
 11907  003D66  0E00               	movlw	0
 11908  003D68  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
 11909  003D6A  0E00               	movlw	0
 11910  003D6C  6E2B               	movwf	LCD_DrawText@bg_color^0,c
 11911  003D6E  EC87  F00F         	call	_LCD_DrawText	;wreg free
 11912                           
 11913                           ;class/menu.c: 25:     LCD_ButtonDraw(&(g->btnLeave));
 11914  003D72  0E50               	movlw	80
 11915  003D74  0100               	movlb	0	; () banked
 11916  003D76  25E4               	addwf	Menu_parametersDraw@g& (0+255),w,b
 11917  003D78  6E42               	movwf	LCD_ButtonDraw@button^0,c
 11918  003D7A  0E00               	movlw	0
 11919  003D7C  21E5               	addwfc	(Menu_parametersDraw@g+1)& (0+255),w,b
 11920  003D7E  6E43               	movwf	(LCD_ButtonDraw@button+1)^0,c
 11921  003D80  EC26  F007         	call	_LCD_ButtonDraw	;wreg free
 11922                           
 11923                           ;class/menu.c: 26:     g->sldBackLight.value=g->backlight;
 11924  003D84  C0E4  FFD9         	movff	Menu_parametersDraw@g,fsr2l
 11925  003D88  C0E5  FFDA         	movff	Menu_parametersDraw@g+1,fsr2h
 11926  003D8C  0100               	movlb	0	; () banked
 11927  003D8E  EE10 F0A9          	lfsr	1,169
 11928  003D92  51E4               	movf	Menu_parametersDraw@g& (0+255),w,b
 11929  003D94  26E1               	addwf	fsr1l,f,c
 11930  003D96  51E5               	movf	(Menu_parametersDraw@g+1)& (0+255),w,b
 11931  003D98  22E2               	addwfc	fsr1h,f,c
 11932  003D9A  CFDE FFE6          	movff	postinc2,postinc1
 11933  003D9E  CFDD FFE5          	movff	postdec2,postdec1
 11934                           
 11935                           ; BSR set to: 0
 11936                           ;class/menu.c: 27:     LCD_SliderDraw(&(g->sldBackLight));
 11937  003DA2  0E98               	movlw	152
 11938  003DA4  25E4               	addwf	Menu_parametersDraw@g& (0+255),w,b
 11939  003DA6  6E37               	movwf	LCD_SliderDraw@slider^0,c
 11940  003DA8  0E00               	movlw	0
 11941  003DAA  21E5               	addwfc	(Menu_parametersDraw@g+1)& (0+255),w,b
 11942  003DAC  6E38               	movwf	(LCD_SliderDraw@slider+1)^0,c
 11943  003DAE  EC29  F01F         	call	_LCD_SliderDraw	;wreg free
 11944                           
 11945                           ;class/menu.c: 28:     LCD_DrawText("LUMINOSITY",&arialNarrow_12ptFontInfo,A_LEFT,50,95,
      +                          0b1111111111111111,0b0000000000000000);
 11946  003DB2  0EA7               	movlw	low STR_12
 11947  003DB4  6E20               	movwf	LCD_DrawText@msg^0,c
 11948  003DB6  0E7F               	movlw	high STR_12
 11949  003DB8  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
 11950  003DBA  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 11951  003DBC  6E22               	movwf	LCD_DrawText@font^0,c
 11952  003DBE  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 11953  003DC0  6E23               	movwf	(LCD_DrawText@font+1)^0,c
 11954  003DC2  0E00               	movlw	0
 11955  003DC4  6E24               	movwf	LCD_DrawText@align^0,c
 11956  003DC6  0E00               	movlw	0
 11957  003DC8  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 11958  003DCA  0E32               	movlw	50
 11959  003DCC  6E25               	movwf	LCD_DrawText@posX^0,c
 11960  003DCE  0E00               	movlw	0
 11961  003DD0  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
 11962  003DD2  0E5F               	movlw	95
 11963  003DD4  6E27               	movwf	LCD_DrawText@posY^0,c
 11964  003DD6  0EFF               	movlw	255
 11965  003DD8  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
 11966  003DDA  6829               	setf	LCD_DrawText@color^0,c
 11967  003DDC  0E00               	movlw	0
 11968  003DDE  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
 11969  003DE0  0E00               	movlw	0
 11970  003DE2  6E2B               	movwf	LCD_DrawText@bg_color^0,c
 11971  003DE4  EC87  F00F         	call	_LCD_DrawText	;wreg free
 11972                           
 11973                           ;class/menu.c: 29:     g->sldLevel.value=g->level;
 11974  003DE8  0100               	movlb	0	; () banked
 11975  003DEA  EE20 F006          	lfsr	2,6
 11976  003DEE  51E4               	movf	Menu_parametersDraw@g& (0+255),w,b
 11977  003DF0  26D9               	addwf	fsr2l,f,c
 11978  003DF2  51E5               	movf	(Menu_parametersDraw@g+1)& (0+255),w,b
 11979  003DF4  22DA               	addwfc	fsr2h,f,c
 11980  003DF6  EE10 F0C2          	lfsr	1,194
 11981  003DFA  51E4               	movf	Menu_parametersDraw@g& (0+255),w,b
 11982  003DFC  26E1               	addwf	fsr1l,f,c
 11983  003DFE  51E5               	movf	(Menu_parametersDraw@g+1)& (0+255),w,b
 11984  003E00  22E2               	addwfc	fsr1h,f,c
 11985  003E02  CFDE FFE6          	movff	postinc2,postinc1
 11986  003E06  CFDD FFE5          	movff	postdec2,postdec1
 11987                           
 11988                           ; BSR set to: 0
 11989                           ;class/menu.c: 30:     LCD_SliderDraw(&(g->sldLevel));
 11990  003E0A  0EB1               	movlw	177
 11991  003E0C  25E4               	addwf	Menu_parametersDraw@g& (0+255),w,b
 11992  003E0E  6E37               	movwf	LCD_SliderDraw@slider^0,c
 11993  003E10  0E00               	movlw	0
 11994  003E12  21E5               	addwfc	(Menu_parametersDraw@g+1)& (0+255),w,b
 11995  003E14  6E38               	movwf	(LCD_SliderDraw@slider+1)^0,c
 11996  003E16  EC29  F01F         	call	_LCD_SliderDraw	;wreg free
 11997                           
 11998                           ;class/menu.c: 31:     LCD_DrawText("LEVEL",&arialNarrow_12ptFontInfo,A_LEFT,50,145,0b11
      +                          11111111111111,0b0000000000000000);
 11999  003E1A  0EF3               	movlw	low STR_13
 12000  003E1C  6E20               	movwf	LCD_DrawText@msg^0,c
 12001  003E1E  0E7F               	movlw	high STR_13
 12002  003E20  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
 12003  003E22  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 12004  003E24  6E22               	movwf	LCD_DrawText@font^0,c
 12005  003E26  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 12006  003E28  6E23               	movwf	(LCD_DrawText@font+1)^0,c
 12007  003E2A  0E00               	movlw	0
 12008  003E2C  6E24               	movwf	LCD_DrawText@align^0,c
 12009  003E2E  0E00               	movlw	0
 12010  003E30  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 12011  003E32  0E32               	movlw	50
 12012  003E34  6E25               	movwf	LCD_DrawText@posX^0,c
 12013  003E36  0E00               	movlw	0
 12014  003E38  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
 12015  003E3A  0E91               	movlw	145
 12016  003E3C  6E27               	movwf	LCD_DrawText@posY^0,c
 12017  003E3E  0EFF               	movlw	255
 12018  003E40  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
 12019  003E42  6829               	setf	LCD_DrawText@color^0,c
 12020  003E44  0E00               	movlw	0
 12021  003E46  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
 12022  003E48  0E00               	movlw	0
 12023  003E4A  6E2B               	movwf	LCD_DrawText@bg_color^0,c
 12024  003E4C  EC87  F00F         	call	_LCD_DrawText	;wreg free
 12025  003E50  0012               	return		;funcret
 12026  003E52                     __end_of_Menu_parametersDraw:
 12027                           	callstack 0
 12028                           
 12029 ;; *************** function _LCD_SliderDraw *****************
 12030 ;; Defined at:
 12031 ;;		line 371 in file "libraries/lcd_highlevel.c"
 12032 ;; Parameters:    Size  Location     Type
 12033 ;;  slider          2   54[COMRAM] PTR struct .
 12034 ;;		 -> g1(240), 
 12035 ;; Auto vars:     Size  Location     Type
 12036 ;;  y2              2   66[COMRAM] unsigned short 
 12037 ;;  y1              2   64[COMRAM] unsigned short 
 12038 ;;  x2              2   62[COMRAM] unsigned short 
 12039 ;;  x1              2   60[COMRAM] unsigned short 
 12040 ;; Return value:  Size  Location     Type
 12041 ;;                  1    wreg      void 
 12042 ;; Registers used:
 12043 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12044 ;; Tracked objects:
 12045 ;;		On entry : 3F/0
 12046 ;;		On exit  : 0/0
 12047 ;;		Unchanged: 0/0
 12048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12049 ;;      Params:         2       0       0       0       0       0       0
 12050 ;;      Locals:         8       0       0       0       0       0       0
 12051 ;;      Temps:          4       0       0       0       0       0       0
 12052 ;;      Totals:        14       0       0       0       0       0       0
 12053 ;;Total ram usage:       14 bytes
 12054 ;; Hardware stack levels used: 1
 12055 ;; Hardware stack levels required when called: 6
 12056 ;; This function calls:
 12057 ;;		_LCD_DrawRect
 12058 ;;		_LCD_SliderUpdate
 12059 ;; This function is called by:
 12060 ;;		_Menu_parametersDraw
 12061 ;; This function uses a non-reentrant model
 12062 ;;
 12063                           
 12064                           	psect	text51
 12065  003E52                     __ptext51:
 12066                           	callstack 0
 12067  003E52                     _LCD_SliderDraw:
 12068                           	callstack 19
 12069                           
 12070                           ; BSR set to: 0
 12071                           ;libraries/lcd_highlevel.c: 371: void LCD_SliderDraw(sld_t * slider);libraries/lcd_highl
      +                          evel.c: 372: {;libraries/lcd_highlevel.c: 373:   uint16_t x1,x2,y1,y2;;libraries/lcd_hig
      +                          hlevel.c: 375:   x1 = slider->posX;
 12072                           
 12073                           ;incstack = 0
 12074  003E52  C037  FFD9         	movff	LCD_SliderDraw@slider,fsr2l
 12075  003E56  C038  FFDA         	movff	LCD_SliderDraw@slider+1,fsr2h
 12076  003E5A  CFDE F03D          	movff	postinc2,LCD_SliderDraw@x1
 12077  003E5E  CFDD F03E          	movff	postdec2,LCD_SliderDraw@x1+1
 12078                           
 12079                           ; BSR set to: 0
 12080                           ;libraries/lcd_highlevel.c: 376:   x2 = slider->posX + slider->width;
 12081  003E62  EE20 F004          	lfsr	2,4
 12082  003E66  5037               	movf	LCD_SliderDraw@slider^0,w,c
 12083  003E68  26D9               	addwf	fsr2l,f,c
 12084  003E6A  5038               	movf	(LCD_SliderDraw@slider+1)^0,w,c
 12085  003E6C  22DA               	addwfc	fsr2h,f,c
 12086  003E6E  CFDE F039          	movff	postinc2,??_LCD_SliderDraw
 12087  003E72  CFDD F03A          	movff	postdec2,??_LCD_SliderDraw+1
 12088  003E76  C037  FFD9         	movff	LCD_SliderDraw@slider,fsr2l
 12089  003E7A  C038  FFDA         	movff	LCD_SliderDraw@slider+1,fsr2h
 12090  003E7E  CFDE F03B          	movff	postinc2,??_LCD_SliderDraw+2
 12091  003E82  CFDD F03C          	movff	postdec2,??_LCD_SliderDraw+3
 12092  003E86  5039               	movf	??_LCD_SliderDraw^0,w,c
 12093  003E88  243B               	addwf	(??_LCD_SliderDraw+2)^0,w,c
 12094  003E8A  6E3F               	movwf	LCD_SliderDraw@x2^0,c
 12095  003E8C  503A               	movf	(??_LCD_SliderDraw+1)^0,w,c
 12096  003E8E  203C               	addwfc	(??_LCD_SliderDraw+3)^0,w,c
 12097  003E90  6E40               	movwf	(LCD_SliderDraw@x2+1)^0,c
 12098                           
 12099                           ; BSR set to: 0
 12100                           ;libraries/lcd_highlevel.c: 377:   y1 = slider->posY;
 12101  003E92  EE20 F002          	lfsr	2,2
 12102  003E96  5037               	movf	LCD_SliderDraw@slider^0,w,c
 12103  003E98  26D9               	addwf	fsr2l,f,c
 12104  003E9A  5038               	movf	(LCD_SliderDraw@slider+1)^0,w,c
 12105  003E9C  22DA               	addwfc	fsr2h,f,c
 12106  003E9E  CFDE F041          	movff	postinc2,LCD_SliderDraw@y1
 12107  003EA2  CFDD F042          	movff	postdec2,LCD_SliderDraw@y1+1
 12108                           
 12109                           ; BSR set to: 0
 12110                           ;libraries/lcd_highlevel.c: 378:   y2 = slider->posY + slider->height;
 12111  003EA6  EE20 F006          	lfsr	2,6
 12112  003EAA  5037               	movf	LCD_SliderDraw@slider^0,w,c
 12113  003EAC  26D9               	addwf	fsr2l,f,c
 12114  003EAE  5038               	movf	(LCD_SliderDraw@slider+1)^0,w,c
 12115  003EB0  22DA               	addwfc	fsr2h,f,c
 12116  003EB2  CFDE F039          	movff	postinc2,??_LCD_SliderDraw
 12117  003EB6  CFDD F03A          	movff	postdec2,??_LCD_SliderDraw+1
 12118  003EBA  EE20 F002          	lfsr	2,2
 12119  003EBE  5037               	movf	LCD_SliderDraw@slider^0,w,c
 12120  003EC0  26D9               	addwf	fsr2l,f,c
 12121  003EC2  5038               	movf	(LCD_SliderDraw@slider+1)^0,w,c
 12122  003EC4  22DA               	addwfc	fsr2h,f,c
 12123  003EC6  CFDE F03B          	movff	postinc2,??_LCD_SliderDraw+2
 12124  003ECA  CFDD F03C          	movff	postdec2,??_LCD_SliderDraw+3
 12125  003ECE  5039               	movf	??_LCD_SliderDraw^0,w,c
 12126  003ED0  243B               	addwf	(??_LCD_SliderDraw+2)^0,w,c
 12127  003ED2  6E43               	movwf	LCD_SliderDraw@y2^0,c
 12128  003ED4  503A               	movf	(??_LCD_SliderDraw+1)^0,w,c
 12129  003ED6  203C               	addwfc	(??_LCD_SliderDraw+3)^0,w,c
 12130  003ED8  6E44               	movwf	(LCD_SliderDraw@y2+1)^0,c
 12131                           
 12132                           ; BSR set to: 0
 12133                           ;libraries/lcd_highlevel.c: 379:   LCD_DrawRect(x1, y1, x2, y2, 1, slider->bgColor);
 12134  003EDA  C03D  F012         	movff	LCD_SliderDraw@x1,LCD_DrawRect@posX1
 12135  003EDE  C03E  F013         	movff	LCD_SliderDraw@x1+1,LCD_DrawRect@posX1+1
 12136  003EE2  C041  F014         	movff	LCD_SliderDraw@y1,LCD_DrawRect@posY1
 12137  003EE6  C042  F015         	movff	LCD_SliderDraw@y1+1,LCD_DrawRect@posY1+1
 12138  003EEA  C03F  F016         	movff	LCD_SliderDraw@x2,LCD_DrawRect@posX2
 12139  003EEE  C040  F017         	movff	LCD_SliderDraw@x2+1,LCD_DrawRect@posX2+1
 12140  003EF2  C043  F018         	movff	LCD_SliderDraw@y2,LCD_DrawRect@posY2
 12141  003EF6  C044  F019         	movff	LCD_SliderDraw@y2+1,LCD_DrawRect@posY2+1
 12142  003EFA  0E01               	movlw	1
 12143  003EFC  6E1A               	movwf	LCD_DrawRect@fill^0,c
 12144  003EFE  EE20 F00A          	lfsr	2,10
 12145  003F02  5037               	movf	LCD_SliderDraw@slider^0,w,c
 12146  003F04  26D9               	addwf	fsr2l,f,c
 12147  003F06  5038               	movf	(LCD_SliderDraw@slider+1)^0,w,c
 12148  003F08  22DA               	addwfc	fsr2h,f,c
 12149  003F0A  CFDE F01B          	movff	postinc2,LCD_DrawRect@color
 12150  003F0E  CFDD F01C          	movff	postdec2,LCD_DrawRect@color+1
 12151  003F12  EC36  F013         	call	_LCD_DrawRect	;wreg free
 12152                           
 12153                           ;libraries/lcd_highlevel.c: 380:   LCD_DrawRect(x1, y1, x2, y2, 0, slider->borderColor);
 12154  003F16  C03D  F012         	movff	LCD_SliderDraw@x1,LCD_DrawRect@posX1
 12155  003F1A  C03E  F013         	movff	LCD_SliderDraw@x1+1,LCD_DrawRect@posX1+1
 12156  003F1E  C041  F014         	movff	LCD_SliderDraw@y1,LCD_DrawRect@posY1
 12157  003F22  C042  F015         	movff	LCD_SliderDraw@y1+1,LCD_DrawRect@posY1+1
 12158  003F26  C03F  F016         	movff	LCD_SliderDraw@x2,LCD_DrawRect@posX2
 12159  003F2A  C040  F017         	movff	LCD_SliderDraw@x2+1,LCD_DrawRect@posX2+1
 12160  003F2E  C043  F018         	movff	LCD_SliderDraw@y2,LCD_DrawRect@posY2
 12161  003F32  C044  F019         	movff	LCD_SliderDraw@y2+1,LCD_DrawRect@posY2+1
 12162  003F36  0E00               	movlw	0
 12163  003F38  6E1A               	movwf	LCD_DrawRect@fill^0,c
 12164  003F3A  EE20 F00C          	lfsr	2,12
 12165  003F3E  5037               	movf	LCD_SliderDraw@slider^0,w,c
 12166  003F40  26D9               	addwf	fsr2l,f,c
 12167  003F42  5038               	movf	(LCD_SliderDraw@slider+1)^0,w,c
 12168  003F44  22DA               	addwfc	fsr2h,f,c
 12169  003F46  CFDE F01B          	movff	postinc2,LCD_DrawRect@color
 12170  003F4A  CFDD F01C          	movff	postdec2,LCD_DrawRect@color+1
 12171  003F4E  EC36  F013         	call	_LCD_DrawRect	;wreg free
 12172                           
 12173                           ;libraries/lcd_highlevel.c: 381:   LCD_SliderUpdate(slider);
 12174  003F52  C037  F027         	movff	LCD_SliderDraw@slider,LCD_SliderUpdate@slider
 12175  003F56  C038  F028         	movff	LCD_SliderDraw@slider+1,LCD_SliderUpdate@slider+1
 12176  003F5A  EC8F  F00B         	call	_LCD_SliderUpdate	;wreg free
 12177  003F5E  0012               	return		;funcret
 12178  003F60                     __end_of_LCD_SliderDraw:
 12179                           	callstack 0
 12180                           
 12181 ;; *************** function _LCD_SliderUpdate *****************
 12182 ;; Defined at:
 12183 ;;		line 319 in file "libraries/lcd_highlevel.c"
 12184 ;; Parameters:    Size  Location     Type
 12185 ;;  slider          2   38[COMRAM] PTR struct .
 12186 ;;		 -> g1(240), 
 12187 ;; Auto vars:     Size  Location     Type
 12188 ;;  x1              2   52[COMRAM] unsigned short 
 12189 ;;  y2              2   50[COMRAM] unsigned short 
 12190 ;;  y1              2   48[COMRAM] unsigned short 
 12191 ;;  x2              2   46[COMRAM] unsigned short 
 12192 ;; Return value:  Size  Location     Type
 12193 ;;                  1    wreg      void 
 12194 ;; Registers used:
 12195 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12196 ;; Tracked objects:
 12197 ;;		On entry : 0/0
 12198 ;;		On exit  : 0/0
 12199 ;;		Unchanged: 0/0
 12200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12201 ;;      Params:         2       0       0       0       0       0       0
 12202 ;;      Locals:         8       0       0       0       0       0       0
 12203 ;;      Temps:          6       0       0       0       0       0       0
 12204 ;;      Totals:        16       0       0       0       0       0       0
 12205 ;;Total ram usage:       16 bytes
 12206 ;; Hardware stack levels used: 1
 12207 ;; Hardware stack levels required when called: 5
 12208 ;; This function calls:
 12209 ;;		_LCD_DrawRect
 12210 ;;		___lwdiv
 12211 ;;		___wmul
 12212 ;; This function is called by:
 12213 ;;		_LCD_SliderDraw
 12214 ;;		_gameControllerController
 12215 ;; This function uses a non-reentrant model
 12216 ;;
 12217                           
 12218                           	psect	text52
 12219  00171E                     __ptext52:
 12220                           	callstack 0
 12221  00171E                     _LCD_SliderUpdate:
 12222                           	callstack 21
 12223                           
 12224                           ;libraries/lcd_highlevel.c: 319: void LCD_SliderUpdate(sld_t * slider);libraries/lcd_hig
      +                          hlevel.c: 320: {;libraries/lcd_highlevel.c: 321:   uint16_t x1,x2,y1,y2;;libraries/lcd_h
      +                          ighlevel.c: 325:   if(slider->cursorWidth != 0)
 12225                           
 12226                           ;incstack = 0
 12227  00171E  EE20 F00E          	lfsr	2,14
 12228  001722  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12229  001724  26D9               	addwf	fsr2l,f,c
 12230  001726  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12231  001728  22DA               	addwfc	fsr2h,f,c
 12232  00172A  50DE               	movf	postinc2,w,c
 12233  00172C  10DE               	iorwf	postinc2,w,c
 12234  00172E  B4D8               	btfsc	status,2,c
 12235  001730  D05C               	goto	l6138
 12236                           
 12237                           ;libraries/lcd_highlevel.c: 326:   {;libraries/lcd_highlevel.c: 327:     x1 = slider->po
      +                          sX + 1 + (((slider->width-slider->cursorWidth) * slider->oldValue)/ slider->steps);
 12238  001732  C027  FFD9         	movff	LCD_SliderUpdate@slider,fsr2l
 12239  001736  C028  FFDA         	movff	LCD_SliderUpdate@slider+1,fsr2h
 12240  00173A  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12241  00173E  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12242  001742  EE20 F00E          	lfsr	2,14
 12243  001746  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12244  001748  26D9               	addwf	fsr2l,f,c
 12245  00174A  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12246  00174C  22DA               	addwfc	fsr2h,f,c
 12247  00174E  CFDE F02B          	movff	postinc2,??_LCD_SliderUpdate+2
 12248  001752  CFDD F02C          	movff	postdec2,??_LCD_SliderUpdate+3
 12249  001756  EE20 F004          	lfsr	2,4
 12250  00175A  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12251  00175C  26D9               	addwf	fsr2l,f,c
 12252  00175E  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12253  001760  22DA               	addwfc	fsr2h,f,c
 12254  001762  CFDE F02D          	movff	postinc2,??_LCD_SliderUpdate+4
 12255  001766  CFDD F02E          	movff	postdec2,??_LCD_SliderUpdate+5
 12256  00176A  502B               	movf	(??_LCD_SliderUpdate+2)^0,w,c
 12257  00176C  5C2D               	subwf	(??_LCD_SliderUpdate+4)^0,w,c
 12258  00176E  6E1A               	movwf	___wmul@multiplier^0,c
 12259  001770  502C               	movf	(??_LCD_SliderUpdate+3)^0,w,c
 12260  001772  582E               	subwfb	(??_LCD_SliderUpdate+5)^0,w,c
 12261  001774  6E1B               	movwf	(___wmul@multiplier+1)^0,c
 12262  001776  EE20 F013          	lfsr	2,19
 12263  00177A  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12264  00177C  26D9               	addwf	fsr2l,f,c
 12265  00177E  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12266  001780  22DA               	addwfc	fsr2h,f,c
 12267  001782  CFDE F01C          	movff	postinc2,___wmul@multiplicand
 12268  001786  CFDD F01D          	movff	postdec2,___wmul@multiplicand+1
 12269  00178A  ECA6  F02C         	call	___wmul	;wreg free
 12270  00178E  C01A  F020         	movff	?___wmul,___lwdiv@dividend
 12271  001792  C01B  F021         	movff	?___wmul+1,___lwdiv@dividend+1
 12272  001796  EE20 F015          	lfsr	2,21
 12273  00179A  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12274  00179C  26D9               	addwf	fsr2l,f,c
 12275  00179E  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12276  0017A0  22DA               	addwfc	fsr2h,f,c
 12277  0017A2  CFDE F022          	movff	postinc2,___lwdiv@divisor
 12278  0017A6  CFDD F023          	movff	postdec2,___lwdiv@divisor+1
 12279  0017AA  EC28  F02A         	call	___lwdiv	;wreg free
 12280  0017AE  5029               	movf	??_LCD_SliderUpdate^0,w,c
 12281  0017B0  2620               	addwf	?___lwdiv^0,f,c
 12282  0017B2  502A               	movf	(??_LCD_SliderUpdate+1)^0,w,c
 12283  0017B4  2221               	addwfc	(?___lwdiv+1)^0,f,c
 12284  0017B6  0E01               	movlw	1
 12285  0017B8  2420               	addwf	?___lwdiv^0,w,c
 12286  0017BA  6E35               	movwf	LCD_SliderUpdate@x1^0,c
 12287  0017BC  0E00               	movlw	0
 12288  0017BE  2021               	addwfc	(?___lwdiv+1)^0,w,c
 12289  0017C0  6E36               	movwf	(LCD_SliderUpdate@x1+1)^0,c
 12290                           
 12291                           ;libraries/lcd_highlevel.c: 328:     x2 = x1 + slider->cursorWidth-2;
 12292  0017C2  EE20 F00E          	lfsr	2,14
 12293  0017C6  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12294  0017C8  26D9               	addwf	fsr2l,f,c
 12295  0017CA  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12296  0017CC  22DA               	addwfc	fsr2h,f,c
 12297  0017CE  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12298  0017D2  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12299  0017D6  5035               	movf	LCD_SliderUpdate@x1^0,w,c
 12300  0017D8  2629               	addwf	??_LCD_SliderUpdate^0,f,c
 12301  0017DA  5036               	movf	(LCD_SliderUpdate@x1+1)^0,w,c
 12302  0017DC  222A               	addwfc	(??_LCD_SliderUpdate+1)^0,f,c
 12303  0017DE  0EFE               	movlw	254
 12304  0017E0  2429               	addwf	??_LCD_SliderUpdate^0,w,c
 12305  0017E2  6E2F               	movwf	LCD_SliderUpdate@x2^0,c
 12306  0017E4  0EFF               	movlw	255
 12307  0017E6  202A               	addwfc	(??_LCD_SliderUpdate+1)^0,w,c
 12308  0017E8  D045               	goto	L15
 12309  0017EA                     l6138:
 12310                           
 12311                           ;libraries/lcd_highlevel.c: 333:   {;libraries/lcd_highlevel.c: 334:     x1 = slider->po
      +                          sX + 1;
 12312  0017EA  C027  FFD9         	movff	LCD_SliderUpdate@slider,fsr2l
 12313  0017EE  C028  FFDA         	movff	LCD_SliderUpdate@slider+1,fsr2h
 12314  0017F2  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12315  0017F6  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12316  0017FA  0E01               	movlw	1
 12317  0017FC  2429               	addwf	??_LCD_SliderUpdate^0,w,c
 12318  0017FE  6E35               	movwf	LCD_SliderUpdate@x1^0,c
 12319  001800  0E00               	movlw	0
 12320  001802  202A               	addwfc	(??_LCD_SliderUpdate+1)^0,w,c
 12321  001804  6E36               	movwf	(LCD_SliderUpdate@x1+1)^0,c
 12322                           
 12323                           ;libraries/lcd_highlevel.c: 335:     x2 = slider->posX - 1 + ((slider->width * slider->o
      +                          ldValue)/ slider->steps);
 12324  001806  C027  FFD9         	movff	LCD_SliderUpdate@slider,fsr2l
 12325  00180A  C028  FFDA         	movff	LCD_SliderUpdate@slider+1,fsr2h
 12326  00180E  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12327  001812  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12328  001816  EE20 F004          	lfsr	2,4
 12329  00181A  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12330  00181C  26D9               	addwf	fsr2l,f,c
 12331  00181E  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12332  001820  22DA               	addwfc	fsr2h,f,c
 12333  001822  CFDE F01A          	movff	postinc2,___wmul@multiplier
 12334  001826  CFDD F01B          	movff	postdec2,___wmul@multiplier+1
 12335  00182A  EE20 F013          	lfsr	2,19
 12336  00182E  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12337  001830  26D9               	addwf	fsr2l,f,c
 12338  001832  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12339  001834  22DA               	addwfc	fsr2h,f,c
 12340  001836  CFDE F01C          	movff	postinc2,___wmul@multiplicand
 12341  00183A  CFDD F01D          	movff	postdec2,___wmul@multiplicand+1
 12342  00183E  ECA6  F02C         	call	___wmul	;wreg free
 12343  001842  C01A  F020         	movff	?___wmul,___lwdiv@dividend
 12344  001846  C01B  F021         	movff	?___wmul+1,___lwdiv@dividend+1
 12345  00184A  EE20 F015          	lfsr	2,21
 12346  00184E  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12347  001850  26D9               	addwf	fsr2l,f,c
 12348  001852  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12349  001854  22DA               	addwfc	fsr2h,f,c
 12350  001856  CFDE F022          	movff	postinc2,___lwdiv@divisor
 12351  00185A  CFDD F023          	movff	postdec2,___lwdiv@divisor+1
 12352  00185E  EC28  F02A         	call	___lwdiv	;wreg free
 12353  001862  5029               	movf	??_LCD_SliderUpdate^0,w,c
 12354  001864  2620               	addwf	?___lwdiv^0,f,c
 12355  001866  502A               	movf	(??_LCD_SliderUpdate+1)^0,w,c
 12356  001868  2221               	addwfc	(?___lwdiv+1)^0,f,c
 12357  00186A  0EFF               	movlw	255
 12358  00186C  2420               	addwf	?___lwdiv^0,w,c
 12359  00186E  6E2F               	movwf	LCD_SliderUpdate@x2^0,c
 12360  001870  0EFF               	movlw	255
 12361  001872  2021               	addwfc	(?___lwdiv+1)^0,w,c
 12362  001874                     L15:
 12363  001874  6E30               	movwf	(LCD_SliderUpdate@x2+1)^0,c
 12364                           
 12365                           ;libraries/lcd_highlevel.c: 336:     y1 = slider->posY + 2;
 12366  001876  EE20 F002          	lfsr	2,2
 12367  00187A  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12368  00187C  26D9               	addwf	fsr2l,f,c
 12369  00187E  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12370  001880  22DA               	addwfc	fsr2h,f,c
 12371  001882  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12372  001886  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12373  00188A  0E02               	movlw	2
 12374  00188C  2429               	addwf	??_LCD_SliderUpdate^0,w,c
 12375  00188E  6E31               	movwf	LCD_SliderUpdate@y1^0,c
 12376  001890  0E00               	movlw	0
 12377  001892  202A               	addwfc	(??_LCD_SliderUpdate+1)^0,w,c
 12378  001894  6E32               	movwf	(LCD_SliderUpdate@y1+1)^0,c
 12379                           
 12380                           ;libraries/lcd_highlevel.c: 337:     y2 = slider->posY + slider->height - 2;
 12381  001896  EE20 F006          	lfsr	2,6
 12382  00189A  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12383  00189C  26D9               	addwf	fsr2l,f,c
 12384  00189E  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12385  0018A0  22DA               	addwfc	fsr2h,f,c
 12386  0018A2  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12387  0018A6  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12388  0018AA  EE20 F002          	lfsr	2,2
 12389  0018AE  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12390  0018B0  26D9               	addwf	fsr2l,f,c
 12391  0018B2  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12392  0018B4  22DA               	addwfc	fsr2h,f,c
 12393  0018B6  CFDE F02B          	movff	postinc2,??_LCD_SliderUpdate+2
 12394  0018BA  CFDD F02C          	movff	postdec2,??_LCD_SliderUpdate+3
 12395  0018BE  5029               	movf	??_LCD_SliderUpdate^0,w,c
 12396  0018C0  262B               	addwf	(??_LCD_SliderUpdate+2)^0,f,c
 12397  0018C2  502A               	movf	(??_LCD_SliderUpdate+1)^0,w,c
 12398  0018C4  222C               	addwfc	(??_LCD_SliderUpdate+3)^0,f,c
 12399  0018C6  0EFE               	movlw	254
 12400  0018C8  242B               	addwf	(??_LCD_SliderUpdate+2)^0,w,c
 12401  0018CA  6E33               	movwf	LCD_SliderUpdate@y2^0,c
 12402  0018CC  0EFF               	movlw	255
 12403  0018CE  202C               	addwfc	(??_LCD_SliderUpdate+3)^0,w,c
 12404  0018D0  6E34               	movwf	(LCD_SliderUpdate@y2+1)^0,c
 12405                           
 12406                           ;libraries/lcd_highlevel.c: 339:   LCD_DrawRect(x1,
 12407  0018D2  C035  F012         	movff	LCD_SliderUpdate@x1,LCD_DrawRect@posX1
 12408  0018D6  C036  F013         	movff	LCD_SliderUpdate@x1+1,LCD_DrawRect@posX1+1
 12409  0018DA  C031  F014         	movff	LCD_SliderUpdate@y1,LCD_DrawRect@posY1
 12410  0018DE  C032  F015         	movff	LCD_SliderUpdate@y1+1,LCD_DrawRect@posY1+1
 12411  0018E2  C02F  F016         	movff	LCD_SliderUpdate@x2,LCD_DrawRect@posX2
 12412  0018E6  C030  F017         	movff	LCD_SliderUpdate@x2+1,LCD_DrawRect@posX2+1
 12413  0018EA  C033  F018         	movff	LCD_SliderUpdate@y2,LCD_DrawRect@posY2
 12414  0018EE  C034  F019         	movff	LCD_SliderUpdate@y2+1,LCD_DrawRect@posY2+1
 12415  0018F2  0E01               	movlw	1
 12416  0018F4  6E1A               	movwf	LCD_DrawRect@fill^0,c
 12417  0018F6  EE20 F00A          	lfsr	2,10
 12418  0018FA  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12419  0018FC  26D9               	addwf	fsr2l,f,c
 12420  0018FE  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12421  001900  22DA               	addwfc	fsr2h,f,c
 12422  001902  CFDE F01B          	movff	postinc2,LCD_DrawRect@color
 12423  001906  CFDD F01C          	movff	postdec2,LCD_DrawRect@color+1
 12424  00190A  EC36  F013         	call	_LCD_DrawRect	;wreg free
 12425                           
 12426                           ;libraries/lcd_highlevel.c: 344:   slider->oldValue = slider->value;
 12427  00190E  EE20 F011          	lfsr	2,17
 12428  001912  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12429  001914  26D9               	addwf	fsr2l,f,c
 12430  001916  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12431  001918  22DA               	addwfc	fsr2h,f,c
 12432  00191A  EE10 F013          	lfsr	1,19
 12433  00191E  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12434  001920  26E1               	addwf	fsr1l,f,c
 12435  001922  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12436  001924  22E2               	addwfc	fsr1h,f,c
 12437  001926  CFDE FFE6          	movff	postinc2,postinc1
 12438  00192A  CFDD FFE5          	movff	postdec2,postdec1
 12439                           
 12440                           ;libraries/lcd_highlevel.c: 347:   if(slider->cursorWidth == 0)
 12441  00192E  EE20 F00E          	lfsr	2,14
 12442  001932  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12443  001934  26D9               	addwf	fsr2l,f,c
 12444  001936  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12445  001938  22DA               	addwfc	fsr2h,f,c
 12446  00193A  50DE               	movf	postinc2,w,c
 12447  00193C  10DE               	iorwf	postinc2,w,c
 12448  00193E  A4D8               	btfss	status,2,c
 12449  001940  D046               	goto	l6160
 12450                           
 12451                           ;libraries/lcd_highlevel.c: 348:   {;libraries/lcd_highlevel.c: 349:     x1 = slider->po
      +                          sX + 1;
 12452  001942  C027  FFD9         	movff	LCD_SliderUpdate@slider,fsr2l
 12453  001946  C028  FFDA         	movff	LCD_SliderUpdate@slider+1,fsr2h
 12454  00194A  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12455  00194E  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12456  001952  0E01               	movlw	1
 12457  001954  2429               	addwf	??_LCD_SliderUpdate^0,w,c
 12458  001956  6E35               	movwf	LCD_SliderUpdate@x1^0,c
 12459  001958  0E00               	movlw	0
 12460  00195A  202A               	addwfc	(??_LCD_SliderUpdate+1)^0,w,c
 12461  00195C  6E36               	movwf	(LCD_SliderUpdate@x1+1)^0,c
 12462                           
 12463                           ;libraries/lcd_highlevel.c: 350:     x2 = slider->posX - 1 + ((slider->width * slider->v
      +                          alue)/ slider->steps);
 12464  00195E  C027  FFD9         	movff	LCD_SliderUpdate@slider,fsr2l
 12465  001962  C028  FFDA         	movff	LCD_SliderUpdate@slider+1,fsr2h
 12466  001966  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12467  00196A  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12468  00196E  EE20 F004          	lfsr	2,4
 12469  001972  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12470  001974  26D9               	addwf	fsr2l,f,c
 12471  001976  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12472  001978  22DA               	addwfc	fsr2h,f,c
 12473  00197A  CFDE F01A          	movff	postinc2,___wmul@multiplier
 12474  00197E  CFDD F01B          	movff	postdec2,___wmul@multiplier+1
 12475  001982  EE20 F011          	lfsr	2,17
 12476  001986  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12477  001988  26D9               	addwf	fsr2l,f,c
 12478  00198A  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12479  00198C  22DA               	addwfc	fsr2h,f,c
 12480  00198E  CFDE F01C          	movff	postinc2,___wmul@multiplicand
 12481  001992  CFDD F01D          	movff	postdec2,___wmul@multiplicand+1
 12482  001996  ECA6  F02C         	call	___wmul	;wreg free
 12483  00199A  C01A  F020         	movff	?___wmul,___lwdiv@dividend
 12484  00199E  C01B  F021         	movff	?___wmul+1,___lwdiv@dividend+1
 12485  0019A2  EE20 F015          	lfsr	2,21
 12486  0019A6  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12487  0019A8  26D9               	addwf	fsr2l,f,c
 12488  0019AA  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12489  0019AC  22DA               	addwfc	fsr2h,f,c
 12490  0019AE  CFDE F022          	movff	postinc2,___lwdiv@divisor
 12491  0019B2  CFDD F023          	movff	postdec2,___lwdiv@divisor+1
 12492  0019B6  EC28  F02A         	call	___lwdiv	;wreg free
 12493  0019BA  5029               	movf	??_LCD_SliderUpdate^0,w,c
 12494  0019BC  2620               	addwf	?___lwdiv^0,f,c
 12495  0019BE  502A               	movf	(??_LCD_SliderUpdate+1)^0,w,c
 12496  0019C0  2221               	addwfc	(?___lwdiv+1)^0,f,c
 12497  0019C2  0EFF               	movlw	255
 12498  0019C4  2420               	addwf	?___lwdiv^0,w,c
 12499  0019C6  6E2F               	movwf	LCD_SliderUpdate@x2^0,c
 12500  0019C8  0EFF               	movlw	255
 12501  0019CA  2021               	addwfc	(?___lwdiv+1)^0,w,c
 12502  0019CC  D05B               	goto	L16
 12503  0019CE                     l6160:
 12504                           
 12505                           ;libraries/lcd_highlevel.c: 357:   {;libraries/lcd_highlevel.c: 358:     x1 = slider->po
      +                          sX + 1 + (((slider->width-slider->cursorWidth) * slider->value)/ slider->steps);
 12506  0019CE  C027  FFD9         	movff	LCD_SliderUpdate@slider,fsr2l
 12507  0019D2  C028  FFDA         	movff	LCD_SliderUpdate@slider+1,fsr2h
 12508  0019D6  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12509  0019DA  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12510  0019DE  EE20 F00E          	lfsr	2,14
 12511  0019E2  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12512  0019E4  26D9               	addwf	fsr2l,f,c
 12513  0019E6  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12514  0019E8  22DA               	addwfc	fsr2h,f,c
 12515  0019EA  CFDE F02B          	movff	postinc2,??_LCD_SliderUpdate+2
 12516  0019EE  CFDD F02C          	movff	postdec2,??_LCD_SliderUpdate+3
 12517  0019F2  EE20 F004          	lfsr	2,4
 12518  0019F6  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12519  0019F8  26D9               	addwf	fsr2l,f,c
 12520  0019FA  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12521  0019FC  22DA               	addwfc	fsr2h,f,c
 12522  0019FE  CFDE F02D          	movff	postinc2,??_LCD_SliderUpdate+4
 12523  001A02  CFDD F02E          	movff	postdec2,??_LCD_SliderUpdate+5
 12524  001A06  502B               	movf	(??_LCD_SliderUpdate+2)^0,w,c
 12525  001A08  5C2D               	subwf	(??_LCD_SliderUpdate+4)^0,w,c
 12526  001A0A  6E1A               	movwf	___wmul@multiplier^0,c
 12527  001A0C  502C               	movf	(??_LCD_SliderUpdate+3)^0,w,c
 12528  001A0E  582E               	subwfb	(??_LCD_SliderUpdate+5)^0,w,c
 12529  001A10  6E1B               	movwf	(___wmul@multiplier+1)^0,c
 12530  001A12  EE20 F011          	lfsr	2,17
 12531  001A16  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12532  001A18  26D9               	addwf	fsr2l,f,c
 12533  001A1A  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12534  001A1C  22DA               	addwfc	fsr2h,f,c
 12535  001A1E  CFDE F01C          	movff	postinc2,___wmul@multiplicand
 12536  001A22  CFDD F01D          	movff	postdec2,___wmul@multiplicand+1
 12537  001A26  ECA6  F02C         	call	___wmul	;wreg free
 12538  001A2A  C01A  F020         	movff	?___wmul,___lwdiv@dividend
 12539  001A2E  C01B  F021         	movff	?___wmul+1,___lwdiv@dividend+1
 12540  001A32  EE20 F015          	lfsr	2,21
 12541  001A36  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12542  001A38  26D9               	addwf	fsr2l,f,c
 12543  001A3A  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12544  001A3C  22DA               	addwfc	fsr2h,f,c
 12545  001A3E  CFDE F022          	movff	postinc2,___lwdiv@divisor
 12546  001A42  CFDD F023          	movff	postdec2,___lwdiv@divisor+1
 12547  001A46  EC28  F02A         	call	___lwdiv	;wreg free
 12548  001A4A  5029               	movf	??_LCD_SliderUpdate^0,w,c
 12549  001A4C  2620               	addwf	?___lwdiv^0,f,c
 12550  001A4E  502A               	movf	(??_LCD_SliderUpdate+1)^0,w,c
 12551  001A50  2221               	addwfc	(?___lwdiv+1)^0,f,c
 12552  001A52  0E01               	movlw	1
 12553  001A54  2420               	addwf	?___lwdiv^0,w,c
 12554  001A56  6E35               	movwf	LCD_SliderUpdate@x1^0,c
 12555  001A58  0E00               	movlw	0
 12556  001A5A  2021               	addwfc	(?___lwdiv+1)^0,w,c
 12557  001A5C  6E36               	movwf	(LCD_SliderUpdate@x1+1)^0,c
 12558                           
 12559                           ;libraries/lcd_highlevel.c: 359:     x2 = x1 + slider->cursorWidth-2;
 12560  001A5E  EE20 F00E          	lfsr	2,14
 12561  001A62  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12562  001A64  26D9               	addwf	fsr2l,f,c
 12563  001A66  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12564  001A68  22DA               	addwfc	fsr2h,f,c
 12565  001A6A  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12566  001A6E  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12567  001A72  5035               	movf	LCD_SliderUpdate@x1^0,w,c
 12568  001A74  2629               	addwf	??_LCD_SliderUpdate^0,f,c
 12569  001A76  5036               	movf	(LCD_SliderUpdate@x1+1)^0,w,c
 12570  001A78  222A               	addwfc	(??_LCD_SliderUpdate+1)^0,f,c
 12571  001A7A  0EFE               	movlw	254
 12572  001A7C  2429               	addwf	??_LCD_SliderUpdate^0,w,c
 12573  001A7E  6E2F               	movwf	LCD_SliderUpdate@x2^0,c
 12574  001A80  0EFF               	movlw	255
 12575  001A82  202A               	addwfc	(??_LCD_SliderUpdate+1)^0,w,c
 12576  001A84                     L16:
 12577  001A84  6E30               	movwf	(LCD_SliderUpdate@x2+1)^0,c
 12578                           
 12579                           ;libraries/lcd_highlevel.c: 360:     y1 = slider->posY + 2;
 12580  001A86  EE20 F002          	lfsr	2,2
 12581  001A8A  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12582  001A8C  26D9               	addwf	fsr2l,f,c
 12583  001A8E  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12584  001A90  22DA               	addwfc	fsr2h,f,c
 12585  001A92  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12586  001A96  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12587  001A9A  0E02               	movlw	2
 12588  001A9C  2429               	addwf	??_LCD_SliderUpdate^0,w,c
 12589  001A9E  6E31               	movwf	LCD_SliderUpdate@y1^0,c
 12590  001AA0  0E00               	movlw	0
 12591  001AA2  202A               	addwfc	(??_LCD_SliderUpdate+1)^0,w,c
 12592  001AA4  6E32               	movwf	(LCD_SliderUpdate@y1+1)^0,c
 12593                           
 12594                           ;libraries/lcd_highlevel.c: 361:     y2 = slider->posY + slider->height - 2;
 12595  001AA6  EE20 F006          	lfsr	2,6
 12596  001AAA  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12597  001AAC  26D9               	addwf	fsr2l,f,c
 12598  001AAE  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12599  001AB0  22DA               	addwfc	fsr2h,f,c
 12600  001AB2  CFDE F029          	movff	postinc2,??_LCD_SliderUpdate
 12601  001AB6  CFDD F02A          	movff	postdec2,??_LCD_SliderUpdate+1
 12602  001ABA  EE20 F002          	lfsr	2,2
 12603  001ABE  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12604  001AC0  26D9               	addwf	fsr2l,f,c
 12605  001AC2  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12606  001AC4  22DA               	addwfc	fsr2h,f,c
 12607  001AC6  CFDE F02B          	movff	postinc2,??_LCD_SliderUpdate+2
 12608  001ACA  CFDD F02C          	movff	postdec2,??_LCD_SliderUpdate+3
 12609  001ACE  5029               	movf	??_LCD_SliderUpdate^0,w,c
 12610  001AD0  262B               	addwf	(??_LCD_SliderUpdate+2)^0,f,c
 12611  001AD2  502A               	movf	(??_LCD_SliderUpdate+1)^0,w,c
 12612  001AD4  222C               	addwfc	(??_LCD_SliderUpdate+3)^0,f,c
 12613  001AD6  0EFE               	movlw	254
 12614  001AD8  242B               	addwf	(??_LCD_SliderUpdate+2)^0,w,c
 12615  001ADA  6E33               	movwf	LCD_SliderUpdate@y2^0,c
 12616  001ADC  0EFF               	movlw	255
 12617  001ADE  202C               	addwfc	(??_LCD_SliderUpdate+3)^0,w,c
 12618  001AE0  6E34               	movwf	(LCD_SliderUpdate@y2+1)^0,c
 12619                           
 12620                           ;libraries/lcd_highlevel.c: 363:   LCD_DrawRect(x1, y1, x2, y2, 1, slider->sldColor);
 12621  001AE2  C035  F012         	movff	LCD_SliderUpdate@x1,LCD_DrawRect@posX1
 12622  001AE6  C036  F013         	movff	LCD_SliderUpdate@x1+1,LCD_DrawRect@posX1+1
 12623  001AEA  C031  F014         	movff	LCD_SliderUpdate@y1,LCD_DrawRect@posY1
 12624  001AEE  C032  F015         	movff	LCD_SliderUpdate@y1+1,LCD_DrawRect@posY1+1
 12625  001AF2  C02F  F016         	movff	LCD_SliderUpdate@x2,LCD_DrawRect@posX2
 12626  001AF6  C030  F017         	movff	LCD_SliderUpdate@x2+1,LCD_DrawRect@posX2+1
 12627  001AFA  C033  F018         	movff	LCD_SliderUpdate@y2,LCD_DrawRect@posY2
 12628  001AFE  C034  F019         	movff	LCD_SliderUpdate@y2+1,LCD_DrawRect@posY2+1
 12629  001B02  0E01               	movlw	1
 12630  001B04  6E1A               	movwf	LCD_DrawRect@fill^0,c
 12631  001B06  EE20 F008          	lfsr	2,8
 12632  001B0A  5027               	movf	LCD_SliderUpdate@slider^0,w,c
 12633  001B0C  26D9               	addwf	fsr2l,f,c
 12634  001B0E  5028               	movf	(LCD_SliderUpdate@slider+1)^0,w,c
 12635  001B10  22DA               	addwfc	fsr2h,f,c
 12636  001B12  CFDE F01B          	movff	postinc2,LCD_DrawRect@color
 12637  001B16  CFDD F01C          	movff	postdec2,LCD_DrawRect@color+1
 12638  001B1A  EC36  F013         	call	_LCD_DrawRect	;wreg free
 12639  001B1E  0012               	return		;funcret
 12640  001B20                     __end_of_LCD_SliderUpdate:
 12641                           	callstack 0
 12642                           
 12643 ;; *************** function _Menu_endGame *****************
 12644 ;; Defined at:
 12645 ;;		line 51 in file "class/menu.c"
 12646 ;; Parameters:    Size  Location     Type
 12647 ;;  g               2   67[COMRAM] PTR struct GameParameter
 12648 ;;		 -> g1(240), 
 12649 ;; Auto vars:     Size  Location     Type
 12650 ;;		None
 12651 ;; Return value:  Size  Location     Type
 12652 ;;                  1    wreg      void 
 12653 ;; Registers used:
 12654 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12655 ;; Tracked objects:
 12656 ;;		On entry : 0/0
 12657 ;;		On exit  : 0/0
 12658 ;;		Unchanged: 0/0
 12659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12660 ;;      Params:         2       0       0       0       0       0       0
 12661 ;;      Locals:         0       0       0       0       0       0       0
 12662 ;;      Temps:          0       2       0       0       0       0       0
 12663 ;;      Totals:         2       2       0       0       0       0       0
 12664 ;;Total ram usage:        4 bytes
 12665 ;; Hardware stack levels used: 1
 12666 ;; Hardware stack levels required when called: 7
 12667 ;; This function calls:
 12668 ;;		_LCD_ButtonDraw
 12669 ;;		_LCD_DrawText
 12670 ;;		_LCD_Fill
 12671 ;; This function is called by:
 12672 ;;		_displayController
 12673 ;; This function uses a non-reentrant model
 12674 ;;
 12675                           
 12676                           	psect	text53
 12677  0048A4                     __ptext53:
 12678                           	callstack 0
 12679  0048A4                     _Menu_endGame:
 12680                           	callstack 19
 12681                           
 12682                           ;class/menu.c: 51: void Menu_endGame(GameParameters* g);class/menu.c: 52: {;class/menu.c
      +                          : 53:     LCD_Fill(0b0000000000000000);
 12683                           
 12684                           ;incstack = 0
 12685  0048A4  0E00               	movlw	0
 12686  0048A6  6E13               	movwf	(LCD_Fill@color+1)^0,c
 12687  0048A8  0E00               	movlw	0
 12688  0048AA  6E12               	movwf	LCD_Fill@color^0,c
 12689  0048AC  ECAA  F024         	call	_LCD_Fill	;wreg free
 12690                           
 12691                           ;class/menu.c: 54:     LCD_ButtonDraw(&(g->btnNewGame));
 12692  0048B0  0E68               	movlw	104
 12693  0048B2  2444               	addwf	Menu_endGame@g^0,w,c
 12694  0048B4  6E42               	movwf	LCD_ButtonDraw@button^0,c
 12695  0048B6  0E00               	movlw	0
 12696  0048B8  2045               	addwfc	(Menu_endGame@g+1)^0,w,c
 12697  0048BA  6E43               	movwf	(LCD_ButtonDraw@button+1)^0,c
 12698  0048BC  EC26  F007         	call	_LCD_ButtonDraw	;wreg free
 12699                           
 12700                           ;class/menu.c: 55:     LCD_ButtonDraw(&(g->btnTurnOff));
 12701  0048C0  0E80               	movlw	128
 12702  0048C2  2444               	addwf	Menu_endGame@g^0,w,c
 12703  0048C4  6E42               	movwf	LCD_ButtonDraw@button^0,c
 12704  0048C6  0E00               	movlw	0
 12705  0048C8  2045               	addwfc	(Menu_endGame@g+1)^0,w,c
 12706  0048CA  6E43               	movwf	(LCD_ButtonDraw@button+1)^0,c
 12707  0048CC  EC26  F007         	call	_LCD_ButtonDraw	;wreg free
 12708                           
 12709                           ;class/menu.c: 57:     if(g->s1.homeScore==0)
 12710  0048D0  EE20 F0EA          	lfsr	2,234
 12711  0048D4  5044               	movf	Menu_endGame@g^0,w,c
 12712  0048D6  26D9               	addwf	fsr2l,f,c
 12713  0048D8  5045               	movf	(Menu_endGame@g+1)^0,w,c
 12714  0048DA  22DA               	addwfc	fsr2h,f,c
 12715  0048DC  50DE               	movf	postinc2,w,c
 12716  0048DE  10DE               	iorwf	postinc2,w,c
 12717  0048E0  A4D8               	btfss	status,2,c
 12718  0048E2  D01C               	goto	l8716
 12719                           
 12720                           ;class/menu.c: 58:     {;class/menu.c: 59:         LCD_DrawText("PLAYER 2 WIN",&arialNar
      +                          row_12ptFontInfo,A_CENTER,100,50,0b1111111111111111,0b0000000000000000);
 12721  0048E4  0E8F               	movlw	low STR_14
 12722  0048E6  6E20               	movwf	LCD_DrawText@msg^0,c
 12723  0048E8  0E7F               	movlw	high STR_14
 12724  0048EA  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
 12725  0048EC  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 12726  0048EE  6E22               	movwf	LCD_DrawText@font^0,c
 12727  0048F0  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 12728  0048F2  6E23               	movwf	(LCD_DrawText@font+1)^0,c
 12729  0048F4  0E02               	movlw	2
 12730  0048F6  6E24               	movwf	LCD_DrawText@align^0,c
 12731  0048F8  0E00               	movlw	0
 12732  0048FA  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 12733  0048FC  0E64               	movlw	100
 12734  0048FE  6E25               	movwf	LCD_DrawText@posX^0,c
 12735  004900  0E00               	movlw	0
 12736  004902  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
 12737  004904  0E32               	movlw	50
 12738  004906  6E27               	movwf	LCD_DrawText@posY^0,c
 12739  004908  0EFF               	movlw	255
 12740  00490A  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
 12741  00490C  6829               	setf	LCD_DrawText@color^0,c
 12742  00490E  0E00               	movlw	0
 12743  004910  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
 12744  004912  0E00               	movlw	0
 12745  004914  6E2B               	movwf	LCD_DrawText@bg_color^0,c
 12746  004916  EC87  F00F         	call	_LCD_DrawText	;wreg free
 12747                           
 12748                           ;class/menu.c: 60:     }
 12749  00491A  0012               	return	
 12750  00491C                     l8716:
 12751                           
 12752                           ;class/menu.c: 62:     {;class/menu.c: 63:         LCD_DrawText("PLAYER 1 WIN",&arialNar
      +                          row_12ptFontInfo,A_CENTER,100,50,0b1111111111111111,0b0000000000000000);
 12753  00491C  0E82               	movlw	low STR_15
 12754  00491E  6E20               	movwf	LCD_DrawText@msg^0,c
 12755  004920  0E7F               	movlw	high STR_15
 12756  004922  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
 12757  004924  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 12758  004926  6E22               	movwf	LCD_DrawText@font^0,c
 12759  004928  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 12760  00492A  6E23               	movwf	(LCD_DrawText@font+1)^0,c
 12761  00492C  0E02               	movlw	2
 12762  00492E  6E24               	movwf	LCD_DrawText@align^0,c
 12763  004930  0E00               	movlw	0
 12764  004932  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 12765  004934  0E64               	movlw	100
 12766  004936  6E25               	movwf	LCD_DrawText@posX^0,c
 12767  004938  0E00               	movlw	0
 12768  00493A  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
 12769  00493C  0E32               	movlw	50
 12770  00493E  6E27               	movwf	LCD_DrawText@posY^0,c
 12771  004940  0EFF               	movlw	255
 12772  004942  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
 12773  004944  6829               	setf	LCD_DrawText@color^0,c
 12774  004946  0E00               	movlw	0
 12775  004948  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
 12776  00494A  0E00               	movlw	0
 12777  00494C  6E2B               	movwf	LCD_DrawText@bg_color^0,c
 12778  00494E  EC87  F00F         	call	_LCD_DrawText	;wreg free
 12779  004952  0012               	return		;funcret
 12780  004954                     __end_of_Menu_endGame:
 12781                           	callstack 0
 12782                           
 12783 ;; *************** function _Menu_inGameDraw *****************
 12784 ;; Defined at:
 12785 ;;		line 37 in file "class/menu.c"
 12786 ;; Parameters:    Size  Location     Type
 12787 ;;  g               2   58[BANK0 ] PTR struct GameParameter
 12788 ;;		 -> g1(240), 
 12789 ;; Auto vars:     Size  Location     Type
 12790 ;;		None
 12791 ;; Return value:  Size  Location     Type
 12792 ;;                  1    wreg      void 
 12793 ;; Registers used:
 12794 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12795 ;; Tracked objects:
 12796 ;;		On entry : 3F/0
 12797 ;;		On exit  : 0/0
 12798 ;;		Unchanged: 0/0
 12799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12800 ;;      Params:         0       2       0       0       0       0       0
 12801 ;;      Locals:         0       0       0       0       0       0       0
 12802 ;;      Temps:          0       0       0       0       0       0       0
 12803 ;;      Totals:         0       2       0       0       0       0       0
 12804 ;;Total ram usage:        2 bytes
 12805 ;; Hardware stack levels used: 1
 12806 ;; Hardware stack levels required when called: 13
 12807 ;; This function calls:
 12808 ;;		_Ball_draw
 12809 ;;		_LCD_ButtonDraw
 12810 ;;		_LCD_DrawRect
 12811 ;;		_LCD_Fill
 12812 ;;		_Paddle_draw
 12813 ;;		_Score_draw
 12814 ;; This function is called by:
 12815 ;;		_displaySM
 12816 ;; This function uses a non-reentrant model
 12817 ;;
 12818                           
 12819                           	psect	text54
 12820  004D48                     __ptext54:
 12821                           	callstack 0
 12822  004D48                     _Menu_inGameDraw:
 12823                           	callstack 15
 12824                           
 12825                           ; BSR set to: 0
 12826                           ;class/menu.c: 37: void Menu_inGameDraw(GameParameters* g);class/menu.c: 38: {;class/men
      +                          u.c: 39:     LCD_Fill(0b0000000000000000);
 12827                           
 12828                           ;incstack = 0
 12829  004D48  0E00               	movlw	0
 12830  004D4A  6E13               	movwf	(LCD_Fill@color+1)^0,c
 12831  004D4C  0E00               	movlw	0
 12832  004D4E  6E12               	movwf	LCD_Fill@color^0,c
 12833  004D50  ECAA  F024         	call	_LCD_Fill	;wreg free
 12834                           
 12835                           ;class/menu.c: 40:     LCD_ButtonDraw(&(g->btnLeave));
 12836  004D54  0E50               	movlw	80
 12837  004D56  0100               	movlb	0	; () banked
 12838  004D58  25E4               	addwf	Menu_inGameDraw@g& (0+255),w,b
 12839  004D5A  6E42               	movwf	LCD_ButtonDraw@button^0,c
 12840  004D5C  0E00               	movlw	0
 12841  004D5E  21E5               	addwfc	(Menu_inGameDraw@g+1)& (0+255),w,b
 12842  004D60  6E43               	movwf	(LCD_ButtonDraw@button+1)^0,c
 12843  004D62  EC26  F007         	call	_LCD_ButtonDraw	;wreg free
 12844                           
 12845                           ;class/menu.c: 41:     LCD_DrawRect(0,160,239,160,1,0b1111111111111111);
 12846  004D66  0E00               	movlw	0
 12847  004D68  6E13               	movwf	(LCD_DrawRect@posX1+1)^0,c
 12848  004D6A  0E00               	movlw	0
 12849  004D6C  6E12               	movwf	LCD_DrawRect@posX1^0,c
 12850  004D6E  0E00               	movlw	0
 12851  004D70  6E15               	movwf	(LCD_DrawRect@posY1+1)^0,c
 12852  004D72  0EA0               	movlw	160
 12853  004D74  6E14               	movwf	LCD_DrawRect@posY1^0,c
 12854  004D76  0E00               	movlw	0
 12855  004D78  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 12856  004D7A  0EEF               	movlw	239
 12857  004D7C  6E16               	movwf	LCD_DrawRect@posX2^0,c
 12858  004D7E  0E00               	movlw	0
 12859  004D80  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 12860  004D82  0EA0               	movlw	160
 12861  004D84  6E18               	movwf	LCD_DrawRect@posY2^0,c
 12862  004D86  0E01               	movlw	1
 12863  004D88  6E1A               	movwf	LCD_DrawRect@fill^0,c
 12864  004D8A  0EFF               	movlw	255
 12865  004D8C  6E1C               	movwf	(LCD_DrawRect@color+1)^0,c
 12866  004D8E  681B               	setf	LCD_DrawRect@color^0,c
 12867  004D90  EC36  F013         	call	_LCD_DrawRect	;wreg free
 12868                           
 12869                           ;class/menu.c: 42:     Score_draw(&g->s1);
 12870  004D94  0EEA               	movlw	234
 12871  004D96  0100               	movlb	0	; () banked
 12872  004D98  25E4               	addwf	Menu_inGameDraw@g& (0+255),w,b
 12873  004D9A  6FD5               	movwf	Score_draw@s& (0+255),b
 12874  004D9C  0E00               	movlw	0
 12875  004D9E  21E5               	addwfc	(Menu_inGameDraw@g+1)& (0+255),w,b
 12876  004DA0  6FD6               	movwf	(Score_draw@s+1)& (0+255),b
 12877  004DA2  EC0F  F022         	call	_Score_draw	;wreg free
 12878                           
 12879                           ;class/menu.c: 43:     Paddle_draw(&g->p1);
 12880  004DA6  0ED6               	movlw	214
 12881  004DA8  0100               	movlb	0	; () banked
 12882  004DAA  25E4               	addwf	Menu_inGameDraw@g& (0+255),w,b
 12883  004DAC  6E25               	movwf	Paddle_draw@p^0,c
 12884  004DAE  0E00               	movlw	0
 12885  004DB0  21E5               	addwfc	(Menu_inGameDraw@g+1)& (0+255),w,b
 12886  004DB2  6E26               	movwf	(Paddle_draw@p+1)^0,c
 12887  004DB4  EC6D  F01D         	call	_Paddle_draw	;wreg free
 12888                           
 12889                           ;class/menu.c: 44:     Paddle_draw(&g->p2);
 12890  004DB8  0EE0               	movlw	224
 12891  004DBA  0100               	movlb	0	; () banked
 12892  004DBC  25E4               	addwf	Menu_inGameDraw@g& (0+255),w,b
 12893  004DBE  6E25               	movwf	Paddle_draw@p^0,c
 12894  004DC0  0E00               	movlw	0
 12895  004DC2  21E5               	addwfc	(Menu_inGameDraw@g+1)& (0+255),w,b
 12896  004DC4  6E26               	movwf	(Paddle_draw@p+1)^0,c
 12897  004DC6  EC6D  F01D         	call	_Paddle_draw	;wreg free
 12898                           
 12899                           ;class/menu.c: 45:     Ball_draw(&g->b);
 12900  004DCA  0ECA               	movlw	202
 12901  004DCC  0100               	movlb	0	; () banked
 12902  004DCE  25E4               	addwf	Menu_inGameDraw@g& (0+255),w,b
 12903  004DD0  6E25               	movwf	Ball_draw@b^0,c
 12904  004DD2  0E00               	movlw	0
 12905  004DD4  21E5               	addwfc	(Menu_inGameDraw@g+1)& (0+255),w,b
 12906  004DD6  6E26               	movwf	(Ball_draw@b+1)^0,c
 12907  004DD8  EC37  F01A         	call	_Ball_draw	;wreg free
 12908  004DDC  0012               	return		;funcret
 12909  004DDE                     __end_of_Menu_inGameDraw:
 12910                           	callstack 0
 12911                           
 12912 ;; *************** function _Score_draw *****************
 12913 ;; Defined at:
 12914 ;;		line 32 in file "class/score.c"
 12915 ;; Parameters:    Size  Location     Type
 12916 ;;  s               2   43[BANK0 ] PTR struct Score
 12917 ;;		 -> g1(240), 
 12918 ;; Auto vars:     Size  Location     Type
 12919 ;;		None
 12920 ;; Return value:  Size  Location     Type
 12921 ;;                  1    wreg      void 
 12922 ;; Registers used:
 12923 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12924 ;; Tracked objects:
 12925 ;;		On entry : 3F/0
 12926 ;;		On exit  : 0/0
 12927 ;;		Unchanged: 0/0
 12928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12929 ;;      Params:         0       2       0       0       0       0       0
 12930 ;;      Locals:         0       0       0       0       0       0       0
 12931 ;;      Temps:          0       0       0       0       0       0       0
 12932 ;;      Totals:         0       2       0       0       0       0       0
 12933 ;;Total ram usage:        2 bytes
 12934 ;; Hardware stack levels used: 1
 12935 ;; Hardware stack levels required when called: 12
 12936 ;; This function calls:
 12937 ;;		_LCD_DrawText
 12938 ;;		_sprintf
 12939 ;; This function is called by:
 12940 ;;		_Menu_inGameDraw
 12941 ;;		_displayController
 12942 ;; This function uses a non-reentrant model
 12943 ;;
 12944                           
 12945                           	psect	text55
 12946  00441E                     __ptext55:
 12947                           	callstack 0
 12948  00441E                     _Score_draw:
 12949                           	callstack 14
 12950                           
 12951                           ; BSR set to: 0
 12952                           ;class/score.c: 32: void Score_draw(struct Score* s);class/score.c: 33: {;class/score.c:
      +                           34:     sprintf(s->str,"%d",s->homeScore);
 12953                           
 12954                           ;incstack = 0
 12955  00441E  0E04               	movlw	4
 12956  004420  25D5               	addwf	Score_draw@s& (0+255),w,b
 12957  004422  6FC8               	movwf	sprintf@s& (0+255),b
 12958  004424  0E00               	movlw	0
 12959  004426  21D6               	addwfc	(Score_draw@s+1)& (0+255),w,b
 12960  004428  6FC9               	movwf	(sprintf@s+1)& (0+255),b
 12961  00442A  0EF9               	movlw	low STR_2
 12962  00442C  6FCA               	movwf	sprintf@fmt& (0+255),b
 12963  00442E  0E7F               	movlw	high STR_2
 12964  004430  6FCB               	movwf	(sprintf@fmt+1)& (0+255),b
 12965  004432  C0D5  FFD9         	movff	Score_draw@s,fsr2l
 12966  004436  C0D6  FFDA         	movff	Score_draw@s+1,fsr2h
 12967  00443A  CFDE F0CC          	movff	postinc2,?_sprintf+4
 12968  00443E  CFDD F0CD          	movff	postdec2,?_sprintf+5
 12969  004442  ECE9  F02A         	call	_sprintf	;wreg free
 12970                           
 12971                           ; BSR set to: 0
 12972                           ;class/score.c: 35:     LCD_DrawText(s->str,&arialNarrow_12ptFontInfo,A_LEFT,20,170,0b11
      +                          11111111111111,0b0000000000000000);
 12973  004446  0E04               	movlw	4
 12974  004448  25D5               	addwf	Score_draw@s& (0+255),w,b
 12975  00444A  6E20               	movwf	LCD_DrawText@msg^0,c
 12976  00444C  0E00               	movlw	0
 12977  00444E  21D6               	addwfc	(Score_draw@s+1)& (0+255),w,b
 12978  004450  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
 12979  004452  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 12980  004454  6E22               	movwf	LCD_DrawText@font^0,c
 12981  004456  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 12982  004458  6E23               	movwf	(LCD_DrawText@font+1)^0,c
 12983  00445A  0E00               	movlw	0
 12984  00445C  6E24               	movwf	LCD_DrawText@align^0,c
 12985  00445E  0E00               	movlw	0
 12986  004460  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 12987  004462  0E14               	movlw	20
 12988  004464  6E25               	movwf	LCD_DrawText@posX^0,c
 12989  004466  0E00               	movlw	0
 12990  004468  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
 12991  00446A  0EAA               	movlw	170
 12992  00446C  6E27               	movwf	LCD_DrawText@posY^0,c
 12993  00446E  0EFF               	movlw	255
 12994  004470  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
 12995  004472  6829               	setf	LCD_DrawText@color^0,c
 12996  004474  0E00               	movlw	0
 12997  004476  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
 12998  004478  0E00               	movlw	0
 12999  00447A  6E2B               	movwf	LCD_DrawText@bg_color^0,c
 13000  00447C  EC87  F00F         	call	_LCD_DrawText	;wreg free
 13001                           
 13002                           ;class/score.c: 36:     sprintf(s->str,"%d",s->awayScore);
 13003  004480  0E04               	movlw	4
 13004  004482  0100               	movlb	0	; () banked
 13005  004484  25D5               	addwf	Score_draw@s& (0+255),w,b
 13006  004486  6FC8               	movwf	sprintf@s& (0+255),b
 13007  004488  0E00               	movlw	0
 13008  00448A  21D6               	addwfc	(Score_draw@s+1)& (0+255),w,b
 13009  00448C  6FC9               	movwf	(sprintf@s+1)& (0+255),b
 13010  00448E  0EF9               	movlw	low STR_2
 13011  004490  6FCA               	movwf	sprintf@fmt& (0+255),b
 13012  004492  0E7F               	movlw	high STR_2
 13013  004494  6FCB               	movwf	(sprintf@fmt+1)& (0+255),b
 13014  004496  EE20 F002          	lfsr	2,2
 13015  00449A  51D5               	movf	Score_draw@s& (0+255),w,b
 13016  00449C  26D9               	addwf	fsr2l,f,c
 13017  00449E  51D6               	movf	(Score_draw@s+1)& (0+255),w,b
 13018  0044A0  22DA               	addwfc	fsr2h,f,c
 13019  0044A2  CFDE F0CC          	movff	postinc2,?_sprintf+4
 13020  0044A6  CFDD F0CD          	movff	postdec2,?_sprintf+5
 13021  0044AA  ECE9  F02A         	call	_sprintf	;wreg free
 13022                           
 13023                           ;class/score.c: 37:     LCD_DrawText(s->str,&arialNarrow_12ptFontInfo,A_LEFT,20,138,0b11
      +                          11111111111111,0b0000000000000000);
 13024  0044AE  0E04               	movlw	4
 13025  0044B0  25D5               	addwf	Score_draw@s& (0+255),w,b
 13026  0044B2  6E20               	movwf	LCD_DrawText@msg^0,c
 13027  0044B4  0E00               	movlw	0
 13028  0044B6  21D6               	addwfc	(Score_draw@s+1)& (0+255),w,b
 13029  0044B8  6E21               	movwf	(LCD_DrawText@msg+1)^0,c
 13030  0044BA  0E7B               	movlw	low _arialNarrow_12ptFontInfo
 13031  0044BC  6E22               	movwf	LCD_DrawText@font^0,c
 13032  0044BE  0E7F               	movlw	high _arialNarrow_12ptFontInfo
 13033  0044C0  6E23               	movwf	(LCD_DrawText@font+1)^0,c
 13034  0044C2  0E00               	movlw	0
 13035  0044C4  6E24               	movwf	LCD_DrawText@align^0,c
 13036  0044C6  0E00               	movlw	0
 13037  0044C8  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 13038  0044CA  0E14               	movlw	20
 13039  0044CC  6E25               	movwf	LCD_DrawText@posX^0,c
 13040  0044CE  0E00               	movlw	0
 13041  0044D0  6E28               	movwf	(LCD_DrawText@posY+1)^0,c
 13042  0044D2  0E8A               	movlw	138
 13043  0044D4  6E27               	movwf	LCD_DrawText@posY^0,c
 13044  0044D6  0EFF               	movlw	255
 13045  0044D8  6E2A               	movwf	(LCD_DrawText@color+1)^0,c
 13046  0044DA  6829               	setf	LCD_DrawText@color^0,c
 13047  0044DC  0E00               	movlw	0
 13048  0044DE  6E2C               	movwf	(LCD_DrawText@bg_color+1)^0,c
 13049  0044E0  0E00               	movlw	0
 13050  0044E2  6E2B               	movwf	LCD_DrawText@bg_color^0,c
 13051  0044E4  EC87  F00F         	call	_LCD_DrawText	;wreg free
 13052  0044E8  0012               	return		;funcret
 13053  0044EA                     __end_of_Score_draw:
 13054                           	callstack 0
 13055                           
 13056 ;; *************** function _sprintf *****************
 13057 ;; Defined at:
 13058 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_sprintf.c"
 13059 ;; Parameters:    Size  Location     Type
 13060 ;;  s               2   30[BANK0 ] PTR unsigned char 
 13061 ;;		 -> g1(240), 
 13062 ;;  fmt             2   32[BANK0 ] PTR const unsigned char 
 13063 ;;		 -> STR_3(3), STR_2(3), 
 13064 ;; Auto vars:     Size  Location     Type
 13065 ;;  f               6   37[BANK0 ] struct _IO_FILE
 13066 ;;  ret             2    0        int 
 13067 ;;  ap              1   36[BANK0 ] PTR void [1]
 13068 ;;		 -> ?_sprintf(2), 
 13069 ;; Return value:  Size  Location     Type
 13070 ;;                  2   30[BANK0 ] int 
 13071 ;; Registers used:
 13072 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13073 ;; Tracked objects:
 13074 ;;		On entry : 3F/0
 13075 ;;		On exit  : 3F/0
 13076 ;;		Unchanged: 0/0
 13077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13078 ;;      Params:         0       6       0       0       0       0       0
 13079 ;;      Locals:         0       7       0       0       0       0       0
 13080 ;;      Temps:          0       0       0       0       0       0       0
 13081 ;;      Totals:         0      13       0       0       0       0       0
 13082 ;;Total ram usage:       13 bytes
 13083 ;; Hardware stack levels used: 1
 13084 ;; Hardware stack levels required when called: 11
 13085 ;; This function calls:
 13086 ;;		_vfprintf
 13087 ;; This function is called by:
 13088 ;;		_Score_draw
 13089 ;; This function uses a non-reentrant model
 13090 ;;
 13091                           
 13092                           	psect	text56
 13093  0055D2                     __ptext56:
 13094                           	callstack 0
 13095  0055D2                     _sprintf:
 13096                           	callstack 14
 13097                           
 13098                           ; BSR set to: 0
 13099                           
 13100                           ;incstack = 0
 13101  0055D2  0ECC               	movlw	low (?_sprintf+4)
 13102  0055D4  6FCE               	movwf	sprintf@ap& (0+255),b
 13103  0055D6  C0C8  F0CF         	movff	sprintf@s,sprintf@f
 13104  0055DA  C0C9  F0D0         	movff	sprintf@s+1,sprintf@f+1
 13105                           
 13106                           ; BSR set to: 0
 13107  0055DE  0E00               	movlw	0
 13108  0055E0  6FD2               	movwf	(sprintf@f+3)& (0+255),b
 13109  0055E2  0E00               	movlw	0
 13110  0055E4  6FD1               	movwf	(sprintf@f+2)& (0+255),b
 13111                           
 13112                           ; BSR set to: 0
 13113  0055E6  0E00               	movlw	0
 13114  0055E8  6FD4               	movwf	(sprintf@f+5)& (0+255),b
 13115  0055EA  0E00               	movlw	0
 13116  0055EC  6FD3               	movwf	(sprintf@f+4)& (0+255),b
 13117                           
 13118                           ; BSR set to: 0
 13119  0055EE  0ECF               	movlw	low sprintf@f
 13120  0055F0  6FC4               	movwf	vfprintf@fp& (0+255),b
 13121  0055F2  C0CA  F0C5         	movff	sprintf@fmt,vfprintf@fmt
 13122  0055F6  C0CB  F0C6         	movff	sprintf@fmt+1,vfprintf@fmt+1
 13123  0055FA  0ECE               	movlw	low sprintf@ap
 13124  0055FC  6FC7               	movwf	vfprintf@ap& (0+255),b
 13125  0055FE  ECC5  F02A         	call	_vfprintf	;wreg free
 13126                           
 13127                           ; BSR set to: 0
 13128  005602  51D1               	movf	(sprintf@f+2)& (0+255),w,b
 13129  005604  25C8               	addwf	sprintf@s& (0+255),w,b
 13130  005606  6ED9               	movwf	fsr2l,c
 13131  005608  51D2               	movf	(sprintf@f+3)& (0+255),w,b
 13132  00560A  21C9               	addwfc	(sprintf@s+1)& (0+255),w,b
 13133  00560C  6EDA               	movwf	fsr2h,c
 13134  00560E  0E00               	movlw	0
 13135  005610  6EDF               	movwf	indf2,c
 13136                           
 13137                           ; BSR set to: 0
 13138  005612  0012               	return		;funcret
 13139  005614                     __end_of_sprintf:
 13140                           	callstack 0
 13141                           
 13142 ;; *************** function _vfprintf *****************
 13143 ;; Defined at:
 13144 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
 13145 ;; Parameters:    Size  Location     Type
 13146 ;;  fp              1   26[BANK0 ] PTR struct _IO_FILE
 13147 ;;		 -> sprintf@f(6), 
 13148 ;;  fmt             2   27[BANK0 ] PTR const unsigned char 
 13149 ;;		 -> STR_3(3), STR_2(3), 
 13150 ;;  ap              1   29[BANK0 ] PTR PTR void 
 13151 ;;		 -> sprintf@ap(1), 
 13152 ;; Auto vars:     Size  Location     Type
 13153 ;;  cfmt            2   63[COMRAM] PTR unsigned char 
 13154 ;;		 -> STR_3(3), STR_2(3), 
 13155 ;; Return value:  Size  Location     Type
 13156 ;;                  2   26[BANK0 ] int 
 13157 ;; Registers used:
 13158 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13159 ;; Tracked objects:
 13160 ;;		On entry : 3F/0
 13161 ;;		On exit  : 3F/0
 13162 ;;		Unchanged: 0/0
 13163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13164 ;;      Params:         0       4       0       0       0       0       0
 13165 ;;      Locals:         2       0       0       0       0       0       0
 13166 ;;      Temps:          0       0       0       0       0       0       0
 13167 ;;      Totals:         2       4       0       0       0       0       0
 13168 ;;Total ram usage:        6 bytes
 13169 ;; Hardware stack levels used: 1
 13170 ;; Hardware stack levels required when called: 10
 13171 ;; This function calls:
 13172 ;;		_vfpfcnvrt
 13173 ;; This function is called by:
 13174 ;;		_sprintf
 13175 ;; This function uses a non-reentrant model
 13176 ;;
 13177                           
 13178                           	psect	text57
 13179  00558A                     __ptext57:
 13180                           	callstack 0
 13181  00558A                     _vfprintf:
 13182                           	callstack 14
 13183                           
 13184                           ; BSR set to: 0
 13185                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
 13186                           
 13187                           ; BSR set to: 0
 13188                           ;incstack = 0
 13189  00558A  C0C5  F040         	movff	vfprintf@fmt,vfprintf@cfmt
 13190  00558E  C0C6  F041         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
 13191                           
 13192                           ; BSR set to: 0
 13193                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
 13194  005592  0E00               	movlw	0
 13195  005594  6F87               	movwf	(_nout+1)& (0+255),b
 13196  005596  0E00               	movlw	0
 13197  005598  6F86               	movwf	_nout& (0+255),b
 13198                           
 13199                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
 13200  00559A  D00D               	goto	l8612
 13201  00559C                     l8610:
 13202                           
 13203                           ; BSR set to: 0
 13204                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
 13205  00559C  C0C4  F03D         	movff	vfprintf@fp,vfpfcnvrt@fp
 13206  0055A0  0E40               	movlw	low vfprintf@cfmt
 13207  0055A2  6E3E               	movwf	vfpfcnvrt@fmt^0,c
 13208  0055A4  C0C7  F03F         	movff	vfprintf@ap,vfpfcnvrt@ap
 13209  0055A8  ECE2  F01A         	call	_vfpfcnvrt	;wreg free
 13210  0055AC  503D               	movf	?_vfpfcnvrt^0,w,c
 13211  0055AE  0100               	movlb	0	; () banked
 13212  0055B0  2786               	addwf	_nout& (0+255),f,b
 13213  0055B2  503E               	movf	(?_vfpfcnvrt+1)^0,w,c
 13214  0055B4  2387               	addwfc	(_nout+1)& (0+255),f,b
 13215  0055B6                     l8612:
 13216                           
 13217                           ; BSR set to: 0
 13218                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
 13219  0055B6  C040  FFF6         	movff	vfprintf@cfmt,tblptrl
 13220  0055BA  C041  FFF7         	movff	vfprintf@cfmt+1,tblptrh
 13221  0055BE                     	if	0	;tblptru may be non-zero
 13222  0055BE                     	endif
 13223  0055BE                     	if	0	;tblptru may be non-zero
 13224  0055BE                     	endif
 13225  0055BE  0008               	tblrd		*
 13226  0055C0  50F5               	movf	tablat,w,c
 13227  0055C2  0900               	iorlw	0
 13228  0055C4  A4D8               	btfss	status,2,c
 13229  0055C6  D7EA               	goto	l8610
 13230                           
 13231                           ; BSR set to: 0
 13232                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
 13233  0055C8  C086  F0C4         	movff	_nout,?_vfprintf
 13234  0055CC  C087  F0C5         	movff	_nout+1,?_vfprintf+1
 13235                           
 13236                           ; BSR set to: 0
 13237  0055D0  0012               	return		;funcret
 13238  0055D2                     __end_of_vfprintf:
 13239                           	callstack 0
 13240                           
 13241 ;; *************** function _vfpfcnvrt *****************
 13242 ;; Defined at:
 13243 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
 13244 ;; Parameters:    Size  Location     Type
 13245 ;;  fp              1   60[COMRAM] PTR struct _IO_FILE
 13246 ;;		 -> sprintf@f(6), 
 13247 ;;  fmt             1   61[COMRAM] PTR PTR unsigned char 
 13248 ;;		 -> vfprintf@cfmt(2), 
 13249 ;;  ap              1   62[COMRAM] PTR PTR void 
 13250 ;;		 -> sprintf@ap(1), 
 13251 ;; Auto vars:     Size  Location     Type
 13252 ;;  ll              8   18[BANK0 ] long long 
 13253 ;;  llu             8    0        unsigned long long 
 13254 ;;  f               4    0        unsigned long long 
 13255 ;;  vp              3    0        PTR void 
 13256 ;;  ct              3    0        unsigned char [3]
 13257 ;;  cp              3    0        PTR unsigned char 
 13258 ;;  i               2    0        int 
 13259 ;;  done            2    0        int 
 13260 ;;  c               1    0        unsigned char 
 13261 ;; Return value:  Size  Location     Type
 13262 ;;                  2   60[COMRAM] int 
 13263 ;; Registers used:
 13264 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13265 ;; Tracked objects:
 13266 ;;		On entry : 3F/0
 13267 ;;		On exit  : 0/0
 13268 ;;		Unchanged: 0/0
 13269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13270 ;;      Params:         3       0       0       0       0       0       0
 13271 ;;      Locals:         0       8       0       0       0       0       0
 13272 ;;      Temps:          0       0       0       0       0       0       0
 13273 ;;      Totals:         3       8       0       0       0       0       0
 13274 ;;Total ram usage:       11 bytes
 13275 ;; Hardware stack levels used: 1
 13276 ;; Hardware stack levels required when called: 9
 13277 ;; This function calls:
 13278 ;;		_dtoa
 13279 ;;		_fputc
 13280 ;; This function is called by:
 13281 ;;		_vfprintf
 13282 ;; This function uses a non-reentrant model
 13283 ;;
 13284                           
 13285                           	psect	text58
 13286  0035C4                     __ptext58:
 13287                           	callstack 0
 13288  0035C4                     _vfpfcnvrt:
 13289                           	callstack 14
 13290                           
 13291                           ; BSR set to: 0
 13292                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.32\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.32\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          2\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
 13293                           
 13294                           ; BSR set to: 0
 13295                           ;incstack = 0
 13296  0035C4  503E               	movf	vfpfcnvrt@fmt^0,w,c
 13297  0035C6  6ED9               	movwf	fsr2l,c
 13298  0035C8  6ADA               	clrf	fsr2h,c
 13299  0035CA  CFDE FFF6          	movff	postinc2,tblptrl
 13300  0035CE  CFDD FFF7          	movff	postdec2,tblptrh
 13301  0035D2                     	if	0	;tblptru may be non-zero
 13302  0035D2                     	endif
 13303  0035D2                     	if	0	;tblptru may be non-zero
 13304  0035D2                     	endif
 13305  0035D2  0008               	tblrd		*
 13306  0035D4  50F5               	movf	tablat,w,c
 13307  0035D6  0A25               	xorlw	37
 13308  0035D8  A4D8               	btfss	status,2,c
 13309  0035DA  D086               	goto	l8454
 13310                           
 13311                           ; BSR set to: 0
 13312                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
 13313  0035DC  503E               	movf	vfpfcnvrt@fmt^0,w,c
 13314  0035DE  6ED9               	movwf	fsr2l,c
 13315  0035E0  6ADA               	clrf	fsr2h,c
 13316  0035E2  2ADE               	incf	postinc2,f,c
 13317  0035E4  0E00               	movlw	0
 13318  0035E6  22DD               	addwfc	postdec2,f,c
 13319                           
 13320                           ; BSR set to: 0
 13321                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
 13322  0035E8  0E00               	movlw	0
 13323  0035EA  6E47               	movwf	(_width+1)^0,c
 13324  0035EC  0E00               	movlw	0
 13325  0035EE  6E46               	movwf	_width^0,c
 13326  0035F0  C046  F04A         	movff	_width,_flags
 13327  0035F4  C047  F04B         	movff	_width+1,_flags+1
 13328                           
 13329                           ; BSR set to: 0
 13330                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
 13331  0035F8  6848               	setf	_prec^0,c
 13332  0035FA  6849               	setf	(_prec+1)^0,c
 13333                           
 13334                           ; BSR set to: 0
 13335                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 847:         if (
      +                          (*fmt[0] == 'd') || (*fmt[0] == 'i')) {
 13336  0035FC  503E               	movf	vfpfcnvrt@fmt^0,w,c
 13337  0035FE  6ED9               	movwf	fsr2l,c
 13338  003600  6ADA               	clrf	fsr2h,c
 13339  003602  CFDE FFF6          	movff	postinc2,tblptrl
 13340  003606  CFDD FFF7          	movff	postdec2,tblptrh
 13341  00360A                     	if	0	;tblptru may be non-zero
 13342  00360A                     	endif
 13343  00360A                     	if	0	;tblptru may be non-zero
 13344  00360A                     	endif
 13345  00360A  0008               	tblrd		*
 13346  00360C  50F5               	movf	tablat,w,c
 13347  00360E  0A64               	xorlw	100
 13348  003610  B4D8               	btfsc	status,2,c
 13349  003612  D00C               	goto	u6200
 13350                           
 13351                           ; BSR set to: 0
 13352  003614  503E               	movf	vfpfcnvrt@fmt^0,w,c
 13353  003616  6ED9               	movwf	fsr2l,c
 13354  003618  6ADA               	clrf	fsr2h,c
 13355  00361A  CFDE FFF6          	movff	postinc2,tblptrl
 13356  00361E  CFDD FFF7          	movff	postdec2,tblptrh
 13357  003622                     	if	0	;tblptru may be non-zero
 13358  003622                     	endif
 13359  003622                     	if	0	;tblptru may be non-zero
 13360  003622                     	endif
 13361  003622  0008               	tblrd		*
 13362  003624  50F5               	movf	tablat,w,c
 13363  003626  0A69               	xorlw	105
 13364  003628  A4D8               	btfss	status,2,c
 13365  00362A  D034               	goto	l8438
 13366  00362C                     u6200:
 13367                           
 13368                           ; BSR set to: 0
 13369                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 849:             
      +                          ++*fmt;
 13370  00362C  503E               	movf	vfpfcnvrt@fmt^0,w,c
 13371  00362E  6ED9               	movwf	fsr2l,c
 13372  003630  6ADA               	clrf	fsr2h,c
 13373  003632  2ADE               	incf	postinc2,f,c
 13374  003634  0E00               	movlw	0
 13375  003636  22DD               	addwfc	postdec2,f,c
 13376                           
 13377                           ; BSR set to: 0
 13378                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 850:             
      +                          ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
 13379  003638  503F               	movf	vfpfcnvrt@ap^0,w,c
 13380  00363A  6ED9               	movwf	fsr2l,c
 13381  00363C  6ADA               	clrf	fsr2h,c
 13382  00363E  50DF               	movf	indf2,w,c
 13383  003640  2ADF               	incf	indf2,f,c
 13384  003642  2ADF               	incf	indf2,f,c
 13385  003644  6ED9               	movwf	fsr2l,c
 13386  003646  6ADA               	clrf	fsr2h,c
 13387  003648  CFDE F0BC          	movff	postinc2,vfpfcnvrt@ll
 13388  00364C  CFDD F0BD          	movff	postdec2,vfpfcnvrt@ll+1
 13389  003650  0E00               	movlw	0
 13390  003652  BFBD               	btfsc	(vfpfcnvrt@ll+1)& (0+255),7,b
 13391  003654  0EFF               	movlw	-1
 13392  003656  6FBE               	movwf	(vfpfcnvrt@ll+2)& (0+255),b
 13393  003658  6FBF               	movwf	(vfpfcnvrt@ll+3)& (0+255),b
 13394  00365A  6FC0               	movwf	(vfpfcnvrt@ll+4)& (0+255),b
 13395  00365C  6FC1               	movwf	(vfpfcnvrt@ll+5)& (0+255),b
 13396  00365E  6FC2               	movwf	(vfpfcnvrt@ll+6)& (0+255),b
 13397  003660  6FC3               	movwf	(vfpfcnvrt@ll+7)& (0+255),b
 13398                           
 13399                           ; BSR set to: 0
 13400                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 852:             
      +                          return dtoa(fp, ll);
 13401  003662  C03D  F02C         	movff	vfpfcnvrt@fp,dtoa@fp
 13402  003666  C0BC  F02D         	movff	vfpfcnvrt@ll,dtoa@d
 13403  00366A  C0BD  F02E         	movff	vfpfcnvrt@ll+1,dtoa@d+1
 13404  00366E  C0BE  F02F         	movff	vfpfcnvrt@ll+2,dtoa@d+2
 13405  003672  C0BF  F030         	movff	vfpfcnvrt@ll+3,dtoa@d+3
 13406  003676  C0C0  F031         	movff	vfpfcnvrt@ll+4,dtoa@d+4
 13407  00367A  C0C1  F032         	movff	vfpfcnvrt@ll+5,dtoa@d+5
 13408  00367E  C0C2  F033         	movff	vfpfcnvrt@ll+6,dtoa@d+6
 13409  003682  C0C3  F034         	movff	vfpfcnvrt@ll+7,dtoa@d+7
 13410  003686  EC32  F017         	call	_dtoa	;wreg free
 13411  00368A  C02C  F03D         	movff	?_dtoa,?_vfpfcnvrt
 13412  00368E  C02D  F03E         	movff	?_dtoa+1,?_vfpfcnvrt+1
 13413  003692  0012               	return	
 13414  003694                     l8438:
 13415                           
 13416                           ; BSR set to: 0
 13417                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
 13418  003694  503E               	movf	vfpfcnvrt@fmt^0,w,c
 13419  003696  6ED9               	movwf	fsr2l,c
 13420  003698  6ADA               	clrf	fsr2h,c
 13421  00369A  CFDE FFF6          	movff	postinc2,tblptrl
 13422  00369E  CFDD FFF7          	movff	postdec2,tblptrh
 13423  0036A2                     	if	0	;tblptru may be non-zero
 13424  0036A2                     	endif
 13425  0036A2                     	if	0	;tblptru may be non-zero
 13426  0036A2                     	endif
 13427  0036A2  0008               	tblrd		*
 13428  0036A4  50F5               	movf	tablat,w,c
 13429  0036A6  0A25               	xorlw	37
 13430  0036A8  A4D8               	btfss	status,2,c
 13431  0036AA  D013               	goto	l8448
 13432                           
 13433                           ; BSR set to: 0
 13434                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
 13435  0036AC  503E               	movf	vfpfcnvrt@fmt^0,w,c
 13436  0036AE  6ED9               	movwf	fsr2l,c
 13437  0036B0  6ADA               	clrf	fsr2h,c
 13438  0036B2  2ADE               	incf	postinc2,f,c
 13439  0036B4  0E00               	movlw	0
 13440  0036B6  22DD               	addwfc	postdec2,f,c
 13441                           
 13442                           ; BSR set to: 0
 13443                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
 13444  0036B8  0E00               	movlw	0
 13445  0036BA  6E13               	movwf	(fputc@c+1)^0,c
 13446  0036BC  0E25               	movlw	37
 13447  0036BE  6E12               	movwf	fputc@c^0,c
 13448  0036C0  C03D  F014         	movff	vfpfcnvrt@fp,fputc@fp
 13449  0036C4  EC39  F027         	call	_fputc	;wreg free
 13450  0036C8                     l8444:
 13451                           
 13452                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
 13453  0036C8  0E00               	movlw	0
 13454  0036CA  6E3E               	movwf	(?_vfpfcnvrt+1)^0,c
 13455  0036CC  0E01               	movlw	1
 13456  0036CE  6E3D               	movwf	?_vfpfcnvrt^0,c
 13457  0036D0  0012               	return	
 13458  0036D2                     l8448:
 13459                           
 13460                           ; BSR set to: 0
 13461                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
 13462  0036D2  503E               	movf	vfpfcnvrt@fmt^0,w,c
 13463  0036D4  6ED9               	movwf	fsr2l,c
 13464  0036D6  6ADA               	clrf	fsr2h,c
 13465  0036D8  2ADE               	incf	postinc2,f,c
 13466  0036DA  0E00               	movlw	0
 13467  0036DC  22DD               	addwfc	postdec2,f,c
 13468                           
 13469                           ; BSR set to: 0
 13470                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
 13471  0036DE  0E00               	movlw	0
 13472  0036E0  6E3E               	movwf	(?_vfpfcnvrt+1)^0,c
 13473  0036E2  0E00               	movlw	0
 13474  0036E4  6E3D               	movwf	?_vfpfcnvrt^0,c
 13475  0036E6  0012               	return	
 13476  0036E8                     l8454:
 13477                           
 13478                           ; BSR set to: 0
 13479                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
 13480  0036E8  503E               	movf	vfpfcnvrt@fmt^0,w,c
 13481  0036EA  6ED9               	movwf	fsr2l,c
 13482  0036EC  6ADA               	clrf	fsr2h,c
 13483  0036EE  CFDE FFF6          	movff	postinc2,tblptrl
 13484  0036F2  CFDD FFF7          	movff	postdec2,tblptrh
 13485  0036F6                     	if	0	;tblptru may be non-zero
 13486  0036F6                     	endif
 13487  0036F6                     	if	0	;tblptru may be non-zero
 13488  0036F6                     	endif
 13489  0036F6  0008               	tblrd		*
 13490  0036F8  50F5               	movf	tablat,w,c
 13491  0036FA  6E12               	movwf	fputc@c^0,c
 13492  0036FC  6A13               	clrf	(fputc@c+1)^0,c
 13493  0036FE  C03D  F014         	movff	vfpfcnvrt@fp,fputc@fp
 13494  003702  EC39  F027         	call	_fputc	;wreg free
 13495                           
 13496                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
 13497  003706  503E               	movf	vfpfcnvrt@fmt^0,w,c
 13498  003708  6ED9               	movwf	fsr2l,c
 13499  00370A  6ADA               	clrf	fsr2h,c
 13500  00370C  2ADE               	incf	postinc2,f,c
 13501  00370E  0E00               	movlw	0
 13502  003710  22DD               	addwfc	postdec2,f,c
 13503  003712  D7DA               	goto	l8444
 13504  003714                     __end_of_vfpfcnvrt:
 13505                           	callstack 0
 13506                           
 13507 ;; *************** function _dtoa *****************
 13508 ;; Defined at:
 13509 ;;		line 287 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
 13510 ;; Parameters:    Size  Location     Type
 13511 ;;  fp              1   43[COMRAM] PTR struct _IO_FILE
 13512 ;;		 -> sprintf@f(6), 
 13513 ;;  d               8   44[COMRAM] long long 
 13514 ;; Auto vars:     Size  Location     Type
 13515 ;;  n               8    8[BANK0 ] long long 
 13516 ;;  i               2   16[BANK0 ] int 
 13517 ;;  s               2    6[BANK0 ] int 
 13518 ;;  w               2    4[BANK0 ] int 
 13519 ;;  p               2    2[BANK0 ] int 
 13520 ;; Return value:  Size  Location     Type
 13521 ;;                  2   43[COMRAM] int 
 13522 ;; Registers used:
 13523 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13524 ;; Tracked objects:
 13525 ;;		On entry : 3F/0
 13526 ;;		On exit  : 0/0
 13527 ;;		Unchanged: 0/0
 13528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13529 ;;      Params:         9       0       0       0       0       0       0
 13530 ;;      Locals:         0      18       0       0       0       0       0
 13531 ;;      Temps:          8       0       0       0       0       0       0
 13532 ;;      Totals:        17      18       0       0       0       0       0
 13533 ;;Total ram usage:       35 bytes
 13534 ;; Hardware stack levels used: 1
 13535 ;; Hardware stack levels required when called: 8
 13536 ;; This function calls:
 13537 ;;		___aodiv
 13538 ;;		___aomod
 13539 ;;		_abs
 13540 ;;		_pad
 13541 ;; This function is called by:
 13542 ;;		_vfpfcnvrt
 13543 ;; This function uses a non-reentrant model
 13544 ;;
 13545                           
 13546                           	psect	text59
 13547  002E64                     __ptext59:
 13548                           	callstack 0
 13549  002E64                     _dtoa:
 13550                           	callstack 14
 13551                           
 13552                           ; BSR set to: 0
 13553                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 287: static int d
      +                          toa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\d
      +                          oprnt.c: 288: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 28
      +                          9:     int i, p, s, w;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprn
      +                          t.c: 290:     long long n;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\d
      +                          oprnt.c: 293:     n = d;
 13554                           
 13555                           ;incstack = 0
 13556  002E64  C02D  F0B2         	movff	dtoa@d,dtoa@n
 13557  002E68  C02E  F0B3         	movff	dtoa@d+1,dtoa@n+1
 13558  002E6C  C02F  F0B4         	movff	dtoa@d+2,dtoa@n+2
 13559  002E70  C030  F0B5         	movff	dtoa@d+3,dtoa@n+3
 13560  002E74  C031  F0B6         	movff	dtoa@d+4,dtoa@n+4
 13561  002E78  C032  F0B7         	movff	dtoa@d+5,dtoa@n+5
 13562  002E7C  C033  F0B8         	movff	dtoa@d+6,dtoa@n+6
 13563  002E80  C034  F0B9         	movff	dtoa@d+7,dtoa@n+7
 13564                           
 13565                           ; BSR set to: 0
 13566                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 294:     s = n < 
      +                          0 ? 1 : 0;
 13567  002E84  AFB9               	btfss	(dtoa@n+7)& (0+255),7,b
 13568  002E86  D002               	goto	u6030
 13569  002E88  0E01               	movlw	1
 13570  002E8A  D001               	goto	u6040
 13571  002E8C                     u6030:
 13572  002E8C  0E00               	movlw	0
 13573  002E8E                     u6040:
 13574  002E8E  6FB0               	movwf	dtoa@s& (0+255),b
 13575  002E90  6BB1               	clrf	(dtoa@s+1)& (0+255),b
 13576                           
 13577                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 295:     if (s) {
 13578  002E92  51B0               	movf	dtoa@s& (0+255),w,b
 13579  002E94  11B1               	iorwf	(dtoa@s+1)& (0+255),w,b
 13580  002E96  B4D8               	btfsc	status,2,c
 13581  002E98  D010               	goto	l8362
 13582                           
 13583                           ; BSR set to: 0
 13584                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 296:         n = 
      +                          -n;
 13585  002E9A  1FB9               	comf	(dtoa@n+7)& (0+255),f,b
 13586  002E9C  1FB8               	comf	(dtoa@n+6)& (0+255),f,b
 13587  002E9E  1FB7               	comf	(dtoa@n+5)& (0+255),f,b
 13588  002EA0  1FB6               	comf	(dtoa@n+4)& (0+255),f,b
 13589  002EA2  1FB5               	comf	(dtoa@n+3)& (0+255),f,b
 13590  002EA4  1FB4               	comf	(dtoa@n+2)& (0+255),f,b
 13591  002EA6  1FB3               	comf	(dtoa@n+1)& (0+255),f,b
 13592  002EA8  6DB2               	negf	dtoa@n& (0+255),b
 13593  002EAA  0E00               	movlw	0
 13594  002EAC  23B3               	addwfc	(dtoa@n+1)& (0+255),f,b
 13595  002EAE  23B4               	addwfc	(dtoa@n+2)& (0+255),f,b
 13596  002EB0  23B5               	addwfc	(dtoa@n+3)& (0+255),f,b
 13597  002EB2  23B6               	addwfc	(dtoa@n+4)& (0+255),f,b
 13598  002EB4  23B7               	addwfc	(dtoa@n+5)& (0+255),f,b
 13599  002EB6  23B8               	addwfc	(dtoa@n+6)& (0+255),f,b
 13600  002EB8  23B9               	addwfc	(dtoa@n+7)& (0+255),f,b
 13601  002EBA                     l8362:
 13602                           
 13603                           ; BSR set to: 0
 13604                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 300:     if (!(pr
      +                          ec < 0)) {
 13605  002EBA  AE49               	btfss	(_prec+1)^0,7,c
 13606                           
 13607                           ; BSR set to: 0
 13608                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 301:         flag
      +                          s &= ~(1 << 1);
 13609  002EBC  924A               	bcf	_flags^0,1,c
 13610                           
 13611                           ; BSR set to: 0
 13612                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 303:     p = (0 <
      +                           prec) ? prec : 1;
 13613  002EBE  BE49               	btfsc	(_prec+1)^0,7,c
 13614  002EC0  D005               	goto	u6070
 13615  002EC2  5049               	movf	(_prec+1)^0,w,c
 13616  002EC4  E108               	bnz	l1602
 13617  002EC6  0448               	decf	_prec^0,w,c
 13618  002EC8  B0D8               	btfsc	status,0,c
 13619  002ECA  D005               	goto	l1602
 13620  002ECC                     u6070:
 13621                           
 13622                           ; BSR set to: 0
 13623  002ECC  0E00               	movlw	0
 13624  002ECE  6FAD               	movwf	(dtoa@p+1)& (0+255),b
 13625  002ED0  0E01               	movlw	1
 13626  002ED2  6FAC               	movwf	dtoa@p& (0+255),b
 13627  002ED4  D004               	goto	l1604
 13628  002ED6                     l1602:
 13629                           
 13630                           ; BSR set to: 0
 13631  002ED6  C048  F0AC         	movff	_prec,dtoa@p
 13632  002EDA  C049  F0AD         	movff	_prec+1,dtoa@p+1
 13633  002EDE                     l1604:
 13634                           
 13635                           ; BSR set to: 0
 13636                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 304:     w = widt
      +                          h;
 13637  002EDE  C046  F0AE         	movff	_width,dtoa@w
 13638  002EE2  C047  F0AF         	movff	_width+1,dtoa@w+1
 13639                           
 13640                           ; BSR set to: 0
 13641                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 305:     if (s ||
      +                           (flags & (1 << 2))) {
 13642  002EE6  51B0               	movf	dtoa@s& (0+255),w,b
 13643  002EE8  11B1               	iorwf	(dtoa@s+1)& (0+255),w,b
 13644  002EEA  A4D8               	btfss	status,2,c
 13645  002EEC  D002               	goto	u6090
 13646                           
 13647                           ; BSR set to: 0
 13648  002EEE  A44A               	btfss	_flags^0,2,c
 13649  002EF0  D003               	goto	l8376
 13650  002EF2                     u6090:
 13651                           
 13652                           ; BSR set to: 0
 13653                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 306:         --w;
 13654  002EF2  07AE               	decf	dtoa@w& (0+255),f,b
 13655  002EF4  A0D8               	btfss	status,0,c
 13656  002EF6  07AF               	decf	(dtoa@w+1)& (0+255),f,b
 13657  002EF8                     l8376:
 13658                           
 13659                           ; BSR set to: 0
 13660                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 310:     i = size
      +                          of(dbuf) - 1;
 13661  002EF8  0E00               	movlw	0
 13662  002EFA  6FBB               	movwf	(dtoa@i+1)& (0+255),b
 13663  002EFC  0E1F               	movlw	31
 13664  002EFE  6FBA               	movwf	dtoa@i& (0+255),b
 13665                           
 13666                           ; BSR set to: 0
 13667                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 311:     dbuf[i] 
      +                          = '\0';
 13668  002F00  0E00               	movlw	0
 13669  002F02  6FA9               	movwf	(_dbuf+31)& (0+255),b
 13670                           
 13671                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 13672  002F04  D07A               	goto	l8390
 13673  002F06                     l8380:
 13674                           
 13675                           ; BSR set to: 0
 13676                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 313:         --i;
 13677  002F06  07BA               	decf	dtoa@i& (0+255),f,b
 13678  002F08  A0D8               	btfss	status,0,c
 13679  002F0A  07BB               	decf	(dtoa@i+1)& (0+255),f,b
 13680                           
 13681                           ; BSR set to: 0
 13682                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 314:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
 13683  002F0C  51BA               	movf	dtoa@i& (0+255),w,b
 13684  002F0E  0F8A               	addlw	low _dbuf
 13685  002F10  6ED9               	movwf	fsr2l,c
 13686  002F12  6ADA               	clrf	fsr2h,c
 13687  002F14  C0B2  F012         	movff	dtoa@n,___aomod@dividend
 13688  002F18  C0B3  F013         	movff	dtoa@n+1,___aomod@dividend+1
 13689  002F1C  C0B4  F014         	movff	dtoa@n+2,___aomod@dividend+2
 13690  002F20  C0B5  F015         	movff	dtoa@n+3,___aomod@dividend+3
 13691  002F24  C0B6  F016         	movff	dtoa@n+4,___aomod@dividend+4
 13692  002F28  C0B7  F017         	movff	dtoa@n+5,___aomod@dividend+5
 13693  002F2C  C0B8  F018         	movff	dtoa@n+6,___aomod@dividend+6
 13694  002F30  C0B9  F019         	movff	dtoa@n+7,___aomod@dividend+7
 13695  002F34  0E0A               	movlw	10
 13696  002F36  6E1A               	movwf	___aomod@divisor^0,c
 13697  002F38  0E00               	movlw	0
 13698  002F3A  6E1B               	movwf	(___aomod@divisor+1)^0,c
 13699  002F3C  0E00               	movlw	0
 13700  002F3E  6E1C               	movwf	(___aomod@divisor+2)^0,c
 13701  002F40  0E00               	movlw	0
 13702  002F42  6E1D               	movwf	(___aomod@divisor+3)^0,c
 13703  002F44  0E00               	movlw	0
 13704  002F46  6E1E               	movwf	(___aomod@divisor+4)^0,c
 13705  002F48  0E00               	movlw	0
 13706  002F4A  6E1F               	movwf	(___aomod@divisor+5)^0,c
 13707  002F4C  0E00               	movlw	0
 13708  002F4E  6E20               	movwf	(___aomod@divisor+6)^0,c
 13709  002F50  0E00               	movlw	0
 13710  002F52  6E21               	movwf	(___aomod@divisor+7)^0,c
 13711  002F54  EC06  F01E         	call	___aomod	;wreg free
 13712  002F58  C012  F035         	movff	?___aomod,??_dtoa
 13713  002F5C  C013  F036         	movff	?___aomod+1,??_dtoa+1
 13714  002F60  C014  F037         	movff	?___aomod+2,??_dtoa+2
 13715  002F64  C015  F038         	movff	?___aomod+3,??_dtoa+3
 13716  002F68  C016  F039         	movff	?___aomod+4,??_dtoa+4
 13717  002F6C  C017  F03A         	movff	?___aomod+5,??_dtoa+5
 13718  002F70  C018  F03B         	movff	?___aomod+6,??_dtoa+6
 13719  002F74  C019  F03C         	movff	?___aomod+7,??_dtoa+7
 13720  002F78  C035  F024         	movff	??_dtoa,abs@a
 13721  002F7C  C037  F025         	movff	??_dtoa+2,abs@a+1
 13722  002F80  EC24  F02C         	call	_abs	;wreg free
 13723  002F84  5024               	movf	?_abs^0,w,c
 13724  002F86  0F30               	addlw	48
 13725  002F88  6EDF               	movwf	indf2,c
 13726                           
 13727                           ; BSR set to: 0
 13728                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 315:         --p;
 13729  002F8A  07AC               	decf	dtoa@p& (0+255),f,b
 13730  002F8C  A0D8               	btfss	status,0,c
 13731  002F8E  07AD               	decf	(dtoa@p+1)& (0+255),f,b
 13732                           
 13733                           ; BSR set to: 0
 13734                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 316:         --w;
 13735  002F90  07AE               	decf	dtoa@w& (0+255),f,b
 13736  002F92  A0D8               	btfss	status,0,c
 13737  002F94  07AF               	decf	(dtoa@w+1)& (0+255),f,b
 13738                           
 13739                           ; BSR set to: 0
 13740                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 317:         n = 
      +                          n / 10;
 13741  002F96  C0B2  F012         	movff	dtoa@n,___aodiv@dividend
 13742  002F9A  C0B3  F013         	movff	dtoa@n+1,___aodiv@dividend+1
 13743  002F9E  C0B4  F014         	movff	dtoa@n+2,___aodiv@dividend+2
 13744  002FA2  C0B5  F015         	movff	dtoa@n+3,___aodiv@dividend+3
 13745  002FA6  C0B6  F016         	movff	dtoa@n+4,___aodiv@dividend+4
 13746  002FAA  C0B7  F017         	movff	dtoa@n+5,___aodiv@dividend+5
 13747  002FAE  C0B8  F018         	movff	dtoa@n+6,___aodiv@dividend+6
 13748  002FB2  C0B9  F019         	movff	dtoa@n+7,___aodiv@dividend+7
 13749  002FB6  0E0A               	movlw	10
 13750  002FB8  6E1A               	movwf	___aodiv@divisor^0,c
 13751  002FBA  0E00               	movlw	0
 13752  002FBC  6E1B               	movwf	(___aodiv@divisor+1)^0,c
 13753  002FBE  0E00               	movlw	0
 13754  002FC0  6E1C               	movwf	(___aodiv@divisor+2)^0,c
 13755  002FC2  0E00               	movlw	0
 13756  002FC4  6E1D               	movwf	(___aodiv@divisor+3)^0,c
 13757  002FC6  0E00               	movlw	0
 13758  002FC8  6E1E               	movwf	(___aodiv@divisor+4)^0,c
 13759  002FCA  0E00               	movlw	0
 13760  002FCC  6E1F               	movwf	(___aodiv@divisor+5)^0,c
 13761  002FCE  0E00               	movlw	0
 13762  002FD0  6E20               	movwf	(___aodiv@divisor+6)^0,c
 13763  002FD2  0E00               	movlw	0
 13764  002FD4  6E21               	movwf	(___aodiv@divisor+7)^0,c
 13765  002FD6  EC8A  F01B         	call	___aodiv	;wreg free
 13766  002FDA  C012  F0B2         	movff	?___aodiv,dtoa@n
 13767  002FDE  C013  F0B3         	movff	?___aodiv+1,dtoa@n+1
 13768  002FE2  C014  F0B4         	movff	?___aodiv+2,dtoa@n+2
 13769  002FE6  C015  F0B5         	movff	?___aodiv+3,dtoa@n+3
 13770  002FEA  C016  F0B6         	movff	?___aodiv+4,dtoa@n+4
 13771  002FEE  C017  F0B7         	movff	?___aodiv+5,dtoa@n+5
 13772  002FF2  C018  F0B8         	movff	?___aodiv+6,dtoa@n+6
 13773  002FF6  C019  F0B9         	movff	?___aodiv+7,dtoa@n+7
 13774  002FFA                     l8390:
 13775                           
 13776                           ; BSR set to: 0
 13777                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 13778  002FFA  BFBB               	btfsc	(dtoa@i+1)& (0+255),7,b
 13779  002FFC  D01F               	goto	u6140
 13780  002FFE  51BB               	movf	(dtoa@i+1)& (0+255),w,b
 13781  003000  E103               	bnz	u6100
 13782  003002  05BA               	decf	dtoa@i& (0+255),w,b
 13783  003004  A0D8               	btfss	status,0,c
 13784  003006  D01A               	goto	u6140
 13785  003008                     u6100:
 13786                           
 13787                           ; BSR set to: 0
 13788  003008  51B2               	movf	dtoa@n& (0+255),w,b
 13789  00300A  11B3               	iorwf	(dtoa@n+1)& (0+255),w,b
 13790  00300C  11B4               	iorwf	(dtoa@n+2)& (0+255),w,b
 13791  00300E  11B5               	iorwf	(dtoa@n+3)& (0+255),w,b
 13792  003010  11B6               	iorwf	(dtoa@n+4)& (0+255),w,b
 13793  003012  11B7               	iorwf	(dtoa@n+5)& (0+255),w,b
 13794  003014  11B8               	iorwf	(dtoa@n+6)& (0+255),w,b
 13795  003016  11B9               	iorwf	(dtoa@n+7)& (0+255),w,b
 13796  003018  A4D8               	btfss	status,2,c
 13797  00301A  D775               	goto	l8380
 13798                           
 13799                           ; BSR set to: 0
 13800  00301C  BFAD               	btfsc	(dtoa@p+1)& (0+255),7,b
 13801  00301E  D005               	goto	u6120
 13802  003020  51AD               	movf	(dtoa@p+1)& (0+255),w,b
 13803  003022  E102               	bnz	u6121
 13804  003024  05AC               	decf	dtoa@p& (0+255),w,b
 13805  003026  B0D8               	btfsc	status,0,c
 13806  003028                     u6121:
 13807  003028  D76E               	goto	l8380
 13808  00302A                     u6120:
 13809                           
 13810                           ; BSR set to: 0
 13811  00302A  BFAF               	btfsc	(dtoa@w+1)& (0+255),7,b
 13812  00302C  D007               	goto	u6140
 13813  00302E  51AF               	movf	(dtoa@w+1)& (0+255),w,b
 13814  003030  E103               	bnz	u6130
 13815  003032  05AE               	decf	dtoa@w& (0+255),w,b
 13816  003034  A0D8               	btfss	status,0,c
 13817  003036  D002               	goto	u6140
 13818  003038                     u6130:
 13819                           
 13820                           ; BSR set to: 0
 13821  003038  B24A               	btfsc	_flags^0,1,c
 13822  00303A  D765               	goto	l8380
 13823  00303C                     u6140:
 13824                           
 13825                           ; BSR set to: 0
 13826                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 321:     if (s ||
      +                           (flags & (1 << 2))) {
 13827  00303C  51B0               	movf	dtoa@s& (0+255),w,b
 13828  00303E  11B1               	iorwf	(dtoa@s+1)& (0+255),w,b
 13829  003040  A4D8               	btfss	status,2,c
 13830  003042  D002               	goto	u6160
 13831                           
 13832                           ; BSR set to: 0
 13833  003044  A44A               	btfss	_flags^0,2,c
 13834  003046  D015               	goto	l8414
 13835  003048                     u6160:
 13836                           
 13837                           ; BSR set to: 0
 13838                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 322:         --i;
 13839  003048  07BA               	decf	dtoa@i& (0+255),f,b
 13840  00304A  A0D8               	btfss	status,0,c
 13841  00304C  07BB               	decf	(dtoa@i+1)& (0+255),f,b
 13842                           
 13843                           ; BSR set to: 0
 13844                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 323:         dbuf
      +                          [i] = s ? '-' : '+';
 13845  00304E  51B0               	movf	dtoa@s& (0+255),w,b
 13846  003050  11B1               	iorwf	(dtoa@s+1)& (0+255),w,b
 13847  003052  A4D8               	btfss	status,2,c
 13848  003054  D004               	goto	l8410
 13849                           
 13850                           ; BSR set to: 0
 13851  003056  0E00               	movlw	0
 13852  003058  6FAB               	movwf	(_dtoa$5516+1)& (0+255),b
 13853  00305A  0E2B               	movlw	43
 13854  00305C  D003               	goto	L8
 13855  00305E                     l8410:
 13856                           
 13857                           ; BSR set to: 0
 13858  00305E  0E00               	movlw	0
 13859  003060  6FAB               	movwf	(_dtoa$5516+1)& (0+255),b
 13860  003062  0E2D               	movlw	45
 13861  003064                     L8:
 13862  003064  6FAA               	movwf	_dtoa$5516& (0+255),b
 13863                           
 13864                           ; BSR set to: 0
 13865  003066  51BA               	movf	dtoa@i& (0+255),w,b
 13866  003068  0F8A               	addlw	low _dbuf
 13867  00306A  6ED9               	movwf	fsr2l,c
 13868  00306C  6ADA               	clrf	fsr2h,c
 13869  00306E  C0AA  FFDF         	movff	_dtoa$5516,indf2
 13870  003072                     l8414:
 13871                           
 13872                           ; BSR set to: 0
 13873                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 327:     return p
      +                          ad(fp, &dbuf[i], w);
 13874  003072  C02C  F01F         	movff	dtoa@fp,pad@fp
 13875  003076  51BA               	movf	dtoa@i& (0+255),w,b
 13876  003078  0F8A               	addlw	low _dbuf
 13877  00307A  6E20               	movwf	pad@buf^0,c
 13878  00307C  C0AE  F021         	movff	dtoa@w,pad@p
 13879  003080  C0AF  F022         	movff	dtoa@w+1,pad@p+1
 13880  003084  EC8C  F028         	call	_pad	;wreg free
 13881  003088  C01F  F02C         	movff	?_pad,?_dtoa
 13882  00308C  C020  F02D         	movff	?_pad+1,?_dtoa+1
 13883  003090  0012               	return		;funcret
 13884  003092                     __end_of_dtoa:
 13885                           	callstack 0
 13886                           
 13887 ;; *************** function _pad *****************
 13888 ;; Defined at:
 13889 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c"
 13890 ;; Parameters:    Size  Location     Type
 13891 ;;  fp              1   30[COMRAM] PTR struct _IO_FILE
 13892 ;;		 -> sprintf@f(6), 
 13893 ;;  buf             1   31[COMRAM] PTR unsigned char 
 13894 ;;		 -> dbuf(32), 
 13895 ;;  p               2   32[COMRAM] int 
 13896 ;; Auto vars:     Size  Location     Type
 13897 ;;  w               2   37[COMRAM] int 
 13898 ;;  i               2   35[COMRAM] int 
 13899 ;; Return value:  Size  Location     Type
 13900 ;;                  2   30[COMRAM] int 
 13901 ;; Registers used:
 13902 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13903 ;; Tracked objects:
 13904 ;;		On entry : 3F/0
 13905 ;;		On exit  : 0/0
 13906 ;;		Unchanged: 0/0
 13907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13908 ;;      Params:         4       0       0       0       0       0       0
 13909 ;;      Locals:         4       0       0       0       0       0       0
 13910 ;;      Temps:          1       0       0       0       0       0       0
 13911 ;;      Totals:         9       0       0       0       0       0       0
 13912 ;;Total ram usage:        9 bytes
 13913 ;; Hardware stack levels used: 1
 13914 ;; Hardware stack levels required when called: 7
 13915 ;; This function calls:
 13916 ;;		_fputc
 13917 ;;		_fputs
 13918 ;;		_strlen
 13919 ;; This function is called by:
 13920 ;;		_dtoa
 13921 ;; This function uses a non-reentrant model
 13922 ;;
 13923                           
 13924                           	psect	text60
 13925  005118                     __ptext60:
 13926                           	callstack 0
 13927  005118                     _pad:
 13928                           	callstack 14
 13929                           
 13930                           ; BSR set to: 0
 13931                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
 13932                           
 13933                           ;incstack = 0
 13934  005118  A04A               	btfss	_flags^0,0,c
 13935  00511A  D006               	goto	l8334
 13936                           
 13937                           ; BSR set to: 0
 13938                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
 13939  00511C  C020  F01A         	movff	pad@buf,fputs@s
 13940  005120  C01F  F01B         	movff	pad@fp,fputs@fp
 13941  005124  EC3D  F02C         	call	_fputs	;wreg free
 13942  005128                     l8334:
 13943                           
 13944                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
 13945  005128  BE22               	btfsc	(pad@p+1)^0,7,c
 13946  00512A  D005               	goto	l8338
 13947  00512C  C021  F026         	movff	pad@p,pad@w
 13948  005130  C022  F027         	movff	pad@p+1,pad@w+1
 13949  005134  D004               	goto	l1591
 13950  005136                     l8338:
 13951  005136  0E00               	movlw	0
 13952  005138  6E27               	movwf	(pad@w+1)^0,c
 13953  00513A  0E00               	movlw	0
 13954  00513C  6E26               	movwf	pad@w^0,c
 13955  00513E                     l1591:
 13956                           
 13957                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 83:     i = 0;
 13958  00513E  0E00               	movlw	0
 13959  005140  6E25               	movwf	(pad@i+1)^0,c
 13960  005142  0E00               	movlw	0
 13961  005144  6E24               	movwf	pad@i^0,c
 13962                           
 13963                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
 13964  005146  D00A               	goto	l8344
 13965  005148                     l8340:
 13966                           
 13967                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
 13968  005148  0E00               	movlw	0
 13969  00514A  6E13               	movwf	(fputc@c+1)^0,c
 13970  00514C  0E20               	movlw	32
 13971  00514E  6E12               	movwf	fputc@c^0,c
 13972  005150  C01F  F014         	movff	pad@fp,fputc@fp
 13973  005154  EC39  F027         	call	_fputc	;wreg free
 13974                           
 13975                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 86:         ++i;
 13976  005158  4A24               	infsnz	pad@i^0,f,c
 13977  00515A  2A25               	incf	(pad@i+1)^0,f,c
 13978  00515C                     l8344:
 13979                           
 13980                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
 13981  00515C  5026               	movf	pad@w^0,w,c
 13982  00515E  5C24               	subwf	pad@i^0,w,c
 13983  005160  5025               	movf	(pad@i+1)^0,w,c
 13984  005162  0A80               	xorlw	128
 13985  005164  6E23               	movwf	??_pad^0,c
 13986  005166  5027               	movf	(pad@w+1)^0,w,c
 13987  005168  0A80               	xorlw	128
 13988  00516A  5823               	subwfb	??_pad^0,w,c
 13989  00516C  A0D8               	btfss	status,0,c
 13990  00516E  D7EC               	goto	l8340
 13991                           
 13992                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
 13993  005170  B04A               	btfsc	_flags^0,0,c
 13994  005172  D006               	goto	l8348
 13995                           
 13996                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
 13997  005174  C020  F01A         	movff	pad@buf,fputs@s
 13998  005178  C01F  F01B         	movff	pad@fp,fputs@fp
 13999  00517C  EC3D  F02C         	call	_fputs	;wreg free
 14000  005180                     l8348:
 14001                           
 14002                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\doprnt.c: 94:     return (i
      +                          nt)(strlen(buf) + (size_t)w);
 14003  005180  C020  F012         	movff	pad@buf,strlen@s
 14004  005184  6A13               	clrf	(strlen@s+1)^0,c
 14005  005186  EC0A  F02B         	call	_strlen	;wreg free
 14006  00518A  5026               	movf	pad@w^0,w,c
 14007  00518C  2412               	addwf	?_strlen^0,w,c
 14008  00518E  6E1F               	movwf	?_pad^0,c
 14009  005190  5027               	movf	(pad@w+1)^0,w,c
 14010  005192  2013               	addwfc	(?_strlen+1)^0,w,c
 14011  005194  6E20               	movwf	(?_pad+1)^0,c
 14012  005196  0012               	return		;funcret
 14013  005198                     __end_of_pad:
 14014                           	callstack 0
 14015                           
 14016 ;; *************** function _fputs *****************
 14017 ;; Defined at:
 14018 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputs.c"
 14019 ;; Parameters:    Size  Location     Type
 14020 ;;  s               1   25[COMRAM] PTR const unsigned char 
 14021 ;;		 -> dbuf(32), 
 14022 ;;  fp              1   26[COMRAM] PTR struct _IO_FILE
 14023 ;;		 -> sprintf@f(6), 
 14024 ;; Auto vars:     Size  Location     Type
 14025 ;;  i               2   28[COMRAM] int 
 14026 ;;  c               1   27[COMRAM] unsigned char 
 14027 ;; Return value:  Size  Location     Type
 14028 ;;                  2   25[COMRAM] int 
 14029 ;; Registers used:
 14030 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14031 ;; Tracked objects:
 14032 ;;		On entry : 0/0
 14033 ;;		On exit  : 0/0
 14034 ;;		Unchanged: 0/0
 14035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14036 ;;      Params:         2       0       0       0       0       0       0
 14037 ;;      Locals:         3       0       0       0       0       0       0
 14038 ;;      Temps:          0       0       0       0       0       0       0
 14039 ;;      Totals:         5       0       0       0       0       0       0
 14040 ;;Total ram usage:        5 bytes
 14041 ;; Hardware stack levels used: 1
 14042 ;; Hardware stack levels required when called: 6
 14043 ;; This function calls:
 14044 ;;		_fputc
 14045 ;; This function is called by:
 14046 ;;		_pad
 14047 ;; This function uses a non-reentrant model
 14048 ;;
 14049                           
 14050                           	psect	text61
 14051  00587A                     __ptext61:
 14052                           	callstack 0
 14053  00587A                     _fputs:
 14054                           	callstack 14
 14055                           
 14056                           ;incstack = 0
 14057  00587A  0E00               	movlw	0
 14058  00587C  6E1E               	movwf	(fputs@i+1)^0,c
 14059  00587E  0E00               	movlw	0
 14060  005880  6E1D               	movwf	fputs@i^0,c
 14061  005882  D009               	goto	l8248
 14062  005884                     l8244:
 14063  005884  C01C  F012         	movff	fputs@c,fputc@c
 14064  005888  6A13               	clrf	(fputc@c+1)^0,c
 14065  00588A  C01B  F014         	movff	fputs@fp,fputc@fp
 14066  00588E  EC39  F027         	call	_fputc	;wreg free
 14067  005892  4A1D               	infsnz	fputs@i^0,f,c
 14068  005894  2A1E               	incf	(fputs@i+1)^0,f,c
 14069  005896                     l8248:
 14070  005896  501A               	movf	fputs@s^0,w,c
 14071  005898  241D               	addwf	fputs@i^0,w,c
 14072  00589A  6ED9               	movwf	fsr2l,c
 14073  00589C  6ADA               	clrf	fsr2h,c
 14074  00589E  50DF               	movf	indf2,w,c
 14075  0058A0  6E1C               	movwf	fputs@c^0,c
 14076  0058A2  501C               	movf	fputs@c^0,w,c
 14077  0058A4  B4D8               	btfsc	status,2,c
 14078  0058A6  0012               	return	
 14079  0058A8  D7ED               	goto	l8244
 14080  0058AA                     __end_of_fputs:
 14081                           	callstack 0
 14082                           
 14083 ;; *************** function _fputc *****************
 14084 ;; Defined at:
 14085 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\nf_fputc.c"
 14086 ;; Parameters:    Size  Location     Type
 14087 ;;  c               2   17[COMRAM] int 
 14088 ;;  fp              1   19[COMRAM] PTR struct _IO_FILE
 14089 ;;		 -> sprintf@f(6), 
 14090 ;; Auto vars:     Size  Location     Type
 14091 ;;		None
 14092 ;; Return value:  Size  Location     Type
 14093 ;;                  2   17[COMRAM] int 
 14094 ;; Registers used:
 14095 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14096 ;; Tracked objects:
 14097 ;;		On entry : 0/0
 14098 ;;		On exit  : 0/0
 14099 ;;		Unchanged: 0/0
 14100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14101 ;;      Params:         3       0       0       0       0       0       0
 14102 ;;      Locals:         0       0       0       0       0       0       0
 14103 ;;      Temps:          5       0       0       0       0       0       0
 14104 ;;      Totals:         8       0       0       0       0       0       0
 14105 ;;Total ram usage:        8 bytes
 14106 ;; Hardware stack levels used: 1
 14107 ;; Hardware stack levels required when called: 5
 14108 ;; This function calls:
 14109 ;;		_putch
 14110 ;; This function is called by:
 14111 ;;		_pad
 14112 ;;		_vfpfcnvrt
 14113 ;;		_fputs
 14114 ;; This function uses a non-reentrant model
 14115 ;;
 14116                           
 14117                           	psect	text62
 14118  004E72                     __ptext62:
 14119                           	callstack 0
 14120  004E72                     _fputc:
 14121                           	callstack 17
 14122                           
 14123                           ;incstack = 0
 14124  004E72  5014               	movf	fputc@fp^0,w,c
 14125  004E74  B4D8               	btfsc	status,2,c
 14126  004E76  D003               	goto	u5790
 14127  004E78  5014               	movf	fputc@fp^0,w,c
 14128  004E7A  A4D8               	btfss	status,2,c
 14129  004E7C  D004               	goto	l8224
 14130  004E7E                     u5790:
 14131  004E7E  5012               	movf	fputc@c^0,w,c
 14132  004E80  EC3C  F02D         	call	_putch
 14133  004E84  0012               	return	
 14134  004E86                     l8224:
 14135  004E86  5014               	movf	fputc@fp^0,w,c
 14136  004E88  6ED9               	movwf	fsr2l,c
 14137  004E8A  6ADA               	clrf	fsr2h,c
 14138  004E8C  0E04               	movlw	4
 14139  004E8E  26D9               	addwf	fsr2l,f,c
 14140  004E90  50DE               	movf	postinc2,w,c
 14141  004E92  10DE               	iorwf	postinc2,w,c
 14142  004E94  B4D8               	btfsc	status,2,c
 14143  004E96  D014               	goto	u5810
 14144  004E98  5014               	movf	fputc@fp^0,w,c
 14145  004E9A  6ED9               	movwf	fsr2l,c
 14146  004E9C  6ADA               	clrf	fsr2h,c
 14147  004E9E  0E04               	movlw	4
 14148  004EA0  26D9               	addwf	fsr2l,f,c
 14149  004EA2  5014               	movf	fputc@fp^0,w,c
 14150  004EA4  6EE1               	movwf	fsr1l,c
 14151  004EA6  6AE2               	clrf	fsr1h,c
 14152  004EA8  0E02               	movlw	2
 14153  004EAA  26E1               	addwf	fsr1l,f,c
 14154  004EAC  50DE               	movf	postinc2,w,c
 14155  004EAE  5CE6               	subwf	postinc1,w,c
 14156  004EB0  50E6               	movf	postinc1,w,c
 14157  004EB2  0A80               	xorlw	128
 14158  004EB4  6E19               	movwf	(??_fputc+4)^0,c
 14159  004EB6  50DE               	movf	postinc2,w,c
 14160  004EB8  0A80               	xorlw	128
 14161  004EBA  5819               	subwfb	(??_fputc+4)^0,w,c
 14162  004EBC  B0D8               	btfsc	status,0,c
 14163  004EBE  0012               	return	
 14164  004EC0                     u5810:
 14165  004EC0  5014               	movf	fputc@fp^0,w,c
 14166  004EC2  6ED9               	movwf	fsr2l,c
 14167  004EC4  6ADA               	clrf	fsr2h,c
 14168  004EC6  0E02               	movlw	2
 14169  004EC8  26D9               	addwf	fsr2l,f,c
 14170  004ECA  CFDE F015          	movff	postinc2,??_fputc
 14171  004ECE  CFDD F016          	movff	postdec2,??_fputc+1
 14172  004ED2  5014               	movf	fputc@fp^0,w,c
 14173  004ED4  6ED9               	movwf	fsr2l,c
 14174  004ED6  6ADA               	clrf	fsr2h,c
 14175  004ED8  CFDE F017          	movff	postinc2,??_fputc+2
 14176  004EDC  CFDD F018          	movff	postdec2,??_fputc+3
 14177  004EE0  5015               	movf	??_fputc^0,w,c
 14178  004EE2  2417               	addwf	(??_fputc+2)^0,w,c
 14179  004EE4  6ED9               	movwf	fsr2l,c
 14180  004EE6  5016               	movf	(??_fputc+1)^0,w,c
 14181  004EE8  2018               	addwfc	(??_fputc+3)^0,w,c
 14182  004EEA  6EDA               	movwf	fsr2h,c
 14183  004EEC  C012  FFDF         	movff	fputc@c,indf2
 14184  004EF0  5014               	movf	fputc@fp^0,w,c
 14185  004EF2  6ED9               	movwf	fsr2l,c
 14186  004EF4  6ADA               	clrf	fsr2h,c
 14187  004EF6  0E02               	movlw	2
 14188  004EF8  26D9               	addwf	fsr2l,f,c
 14189  004EFA  2ADE               	incf	postinc2,f,c
 14190  004EFC  0E00               	movlw	0
 14191  004EFE  22DD               	addwfc	postdec2,f,c
 14192  004F00  0012               	return		;funcret
 14193  004F02                     __end_of_fputc:
 14194                           	callstack 0
 14195                           
 14196 ;; *************** function _putch *****************
 14197 ;; Defined at:
 14198 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\putch.c"
 14199 ;; Parameters:    Size  Location     Type
 14200 ;;  c               1    wreg     unsigned char 
 14201 ;; Auto vars:     Size  Location     Type
 14202 ;;  c               1    0[COMRAM] unsigned char 
 14203 ;; Return value:  Size  Location     Type
 14204 ;;                  1    wreg      void 
 14205 ;; Registers used:
 14206 ;;		wreg
 14207 ;; Tracked objects:
 14208 ;;		On entry : 0/0
 14209 ;;		On exit  : 0/0
 14210 ;;		Unchanged: 0/0
 14211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14212 ;;      Params:         0       0       0       0       0       0       0
 14213 ;;      Locals:         0       0       0       0       0       0       0
 14214 ;;      Temps:          0       0       0       0       0       0       0
 14215 ;;      Totals:         0       0       0       0       0       0       0
 14216 ;;Total ram usage:        0 bytes
 14217 ;; Hardware stack levels used: 1
 14218 ;; Hardware stack levels required when called: 4
 14219 ;; This function calls:
 14220 ;;		Nothing
 14221 ;; This function is called by:
 14222 ;;		_fputc
 14223 ;; This function uses a non-reentrant model
 14224 ;;
 14225                           
 14226                           	psect	text63
 14227  005A78                     __ptext63:
 14228                           	callstack 0
 14229  005A78                     _putch:
 14230                           	callstack 17
 14231                           
 14232                           ;incstack = 0
 14233  005A78  0012               	return		;funcret
 14234  005A7A                     __end_of_putch:
 14235                           	callstack 0
 14236                           
 14237 ;; *************** function _abs *****************
 14238 ;; Defined at:
 14239 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\abs.c"
 14240 ;; Parameters:    Size  Location     Type
 14241 ;;  a               2   35[COMRAM] int 
 14242 ;; Auto vars:     Size  Location     Type
 14243 ;;		None
 14244 ;; Return value:  Size  Location     Type
 14245 ;;                  2   35[COMRAM] int 
 14246 ;; Registers used:
 14247 ;;		wreg, status,2, status,0
 14248 ;; Tracked objects:
 14249 ;;		On entry : 3F/0
 14250 ;;		On exit  : 3F/0
 14251 ;;		Unchanged: 3F/0
 14252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14253 ;;      Params:         2       0       0       0       0       0       0
 14254 ;;      Locals:         0       0       0       0       0       0       0
 14255 ;;      Temps:          2       0       0       0       0       0       0
 14256 ;;      Totals:         4       0       0       0       0       0       0
 14257 ;;Total ram usage:        4 bytes
 14258 ;; Hardware stack levels used: 1
 14259 ;; Hardware stack levels required when called: 4
 14260 ;; This function calls:
 14261 ;;		Nothing
 14262 ;; This function is called by:
 14263 ;;		_dtoa
 14264 ;; This function uses a non-reentrant model
 14265 ;;
 14266                           
 14267                           	psect	text64
 14268  005848                     __ptext64:
 14269                           	callstack 0
 14270  005848                     _abs:
 14271                           	callstack 17
 14272                           
 14273                           ; BSR set to: 0
 14274                           
 14275                           ;incstack = 0
 14276  005848  BE25               	btfsc	(abs@a+1)^0,7,c
 14277  00584A  D005               	goto	u6020
 14278  00584C  5025               	movf	(abs@a+1)^0,w,c
 14279  00584E  E110               	bnz	l1640
 14280  005850  0424               	decf	abs@a^0,w,c
 14281  005852  B0D8               	btfsc	status,0,c
 14282  005854  D00D               	goto	l1640
 14283  005856                     u6020:
 14284                           
 14285                           ; BSR set to: 0
 14286  005856  C024  F026         	movff	abs@a,??_abs
 14287  00585A  C025  F027         	movff	abs@a+1,??_abs+1
 14288  00585E  1E26               	comf	??_abs^0,f,c
 14289  005860  1E27               	comf	(??_abs+1)^0,f,c
 14290  005862  4A26               	infsnz	??_abs^0,f,c
 14291  005864  2A27               	incf	(??_abs+1)^0,f,c
 14292  005866  C026  F024         	movff	??_abs,?_abs
 14293  00586A  C027  F025         	movff	??_abs+1,?_abs+1
 14294  00586E  0012               	return	
 14295  005870                     l1640:
 14296                           
 14297                           ; BSR set to: 0
 14298  005870  C024  F024         	movff	abs@a,?_abs
 14299  005874  C025  F025         	movff	abs@a+1,?_abs+1
 14300                           
 14301                           ; BSR set to: 0
 14302  005878  0012               	return		;funcret
 14303  00587A                     __end_of_abs:
 14304                           	callstack 0
 14305                           
 14306 ;; *************** function ___aomod *****************
 14307 ;; Defined at:
 14308 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\aomod.c"
 14309 ;; Parameters:    Size  Location     Type
 14310 ;;  dividend        8   17[COMRAM] long long 
 14311 ;;  divisor         8   25[COMRAM] long long 
 14312 ;; Auto vars:     Size  Location     Type
 14313 ;;  sign            1   34[COMRAM] unsigned char 
 14314 ;;  counter         1   33[COMRAM] unsigned char 
 14315 ;; Return value:  Size  Location     Type
 14316 ;;                  8   17[COMRAM] long long 
 14317 ;; Registers used:
 14318 ;;		wreg, status,2, status,0
 14319 ;; Tracked objects:
 14320 ;;		On entry : 3F/0
 14321 ;;		On exit  : 3F/0
 14322 ;;		Unchanged: 3F/0
 14323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14324 ;;      Params:        16       0       0       0       0       0       0
 14325 ;;      Locals:         2       0       0       0       0       0       0
 14326 ;;      Temps:          0       0       0       0       0       0       0
 14327 ;;      Totals:        18       0       0       0       0       0       0
 14328 ;;Total ram usage:       18 bytes
 14329 ;; Hardware stack levels used: 1
 14330 ;; Hardware stack levels required when called: 4
 14331 ;; This function calls:
 14332 ;;		Nothing
 14333 ;; This function is called by:
 14334 ;;		_dtoa
 14335 ;; This function uses a non-reentrant model
 14336 ;;
 14337                           
 14338                           	psect	text65
 14339  003C0C                     __ptext65:
 14340                           	callstack 0
 14341  003C0C                     ___aomod:
 14342                           	callstack 17
 14343                           
 14344                           ; BSR set to: 0
 14345                           
 14346                           ; BSR set to: 0
 14347                           ;incstack = 0
 14348  003C0C  0E00               	movlw	0
 14349  003C0E  6E23               	movwf	___aomod@sign^0,c
 14350                           
 14351                           ; BSR set to: 0
 14352  003C10  AE19               	btfss	(___aomod@dividend+7)^0,7,c
 14353  003C12  D012               	goto	l8302
 14354                           
 14355                           ; BSR set to: 0
 14356  003C14  1E19               	comf	(___aomod@dividend+7)^0,f,c
 14357  003C16  1E18               	comf	(___aomod@dividend+6)^0,f,c
 14358  003C18  1E17               	comf	(___aomod@dividend+5)^0,f,c
 14359  003C1A  1E16               	comf	(___aomod@dividend+4)^0,f,c
 14360  003C1C  1E15               	comf	(___aomod@dividend+3)^0,f,c
 14361  003C1E  1E14               	comf	(___aomod@dividend+2)^0,f,c
 14362  003C20  1E13               	comf	(___aomod@dividend+1)^0,f,c
 14363  003C22  6C12               	negf	___aomod@dividend^0,c
 14364  003C24  0E00               	movlw	0
 14365  003C26  2213               	addwfc	(___aomod@dividend+1)^0,f,c
 14366  003C28  2214               	addwfc	(___aomod@dividend+2)^0,f,c
 14367  003C2A  2215               	addwfc	(___aomod@dividend+3)^0,f,c
 14368  003C2C  2216               	addwfc	(___aomod@dividend+4)^0,f,c
 14369  003C2E  2217               	addwfc	(___aomod@dividend+5)^0,f,c
 14370  003C30  2218               	addwfc	(___aomod@dividend+6)^0,f,c
 14371  003C32  2219               	addwfc	(___aomod@dividend+7)^0,f,c
 14372                           
 14373                           ; BSR set to: 0
 14374  003C34  0E01               	movlw	1
 14375  003C36  6E23               	movwf	___aomod@sign^0,c
 14376  003C38                     l8302:
 14377                           
 14378                           ; BSR set to: 0
 14379  003C38  AE21               	btfss	(___aomod@divisor+7)^0,7,c
 14380  003C3A  D010               	goto	l8306
 14381                           
 14382                           ; BSR set to: 0
 14383  003C3C  1E21               	comf	(___aomod@divisor+7)^0,f,c
 14384  003C3E  1E20               	comf	(___aomod@divisor+6)^0,f,c
 14385  003C40  1E1F               	comf	(___aomod@divisor+5)^0,f,c
 14386  003C42  1E1E               	comf	(___aomod@divisor+4)^0,f,c
 14387  003C44  1E1D               	comf	(___aomod@divisor+3)^0,f,c
 14388  003C46  1E1C               	comf	(___aomod@divisor+2)^0,f,c
 14389  003C48  1E1B               	comf	(___aomod@divisor+1)^0,f,c
 14390  003C4A  6C1A               	negf	___aomod@divisor^0,c
 14391  003C4C  0E00               	movlw	0
 14392  003C4E  221B               	addwfc	(___aomod@divisor+1)^0,f,c
 14393  003C50  221C               	addwfc	(___aomod@divisor+2)^0,f,c
 14394  003C52  221D               	addwfc	(___aomod@divisor+3)^0,f,c
 14395  003C54  221E               	addwfc	(___aomod@divisor+4)^0,f,c
 14396  003C56  221F               	addwfc	(___aomod@divisor+5)^0,f,c
 14397  003C58  2220               	addwfc	(___aomod@divisor+6)^0,f,c
 14398  003C5A  2221               	addwfc	(___aomod@divisor+7)^0,f,c
 14399  003C5C                     l8306:
 14400                           
 14401                           ; BSR set to: 0
 14402  003C5C  501A               	movf	___aomod@divisor^0,w,c
 14403  003C5E  101B               	iorwf	(___aomod@divisor+1)^0,w,c
 14404  003C60  101C               	iorwf	(___aomod@divisor+2)^0,w,c
 14405  003C62  101D               	iorwf	(___aomod@divisor+3)^0,w,c
 14406  003C64  101E               	iorwf	(___aomod@divisor+4)^0,w,c
 14407  003C66  101F               	iorwf	(___aomod@divisor+5)^0,w,c
 14408  003C68  1020               	iorwf	(___aomod@divisor+6)^0,w,c
 14409  003C6A  1021               	iorwf	(___aomod@divisor+7)^0,w,c
 14410  003C6C  B4D8               	btfsc	status,2,c
 14411  003C6E  D03C               	goto	l8322
 14412                           
 14413                           ; BSR set to: 0
 14414  003C70  0E01               	movlw	1
 14415  003C72  6E22               	movwf	___aomod@counter^0,c
 14416  003C74  D00A               	goto	l8312
 14417  003C76                     l8310:
 14418                           
 14419                           ; BSR set to: 0
 14420  003C76  90D8               	bcf	status,0,c
 14421  003C78  361A               	rlcf	___aomod@divisor^0,f,c
 14422  003C7A  361B               	rlcf	(___aomod@divisor+1)^0,f,c
 14423  003C7C  361C               	rlcf	(___aomod@divisor+2)^0,f,c
 14424  003C7E  361D               	rlcf	(___aomod@divisor+3)^0,f,c
 14425  003C80  361E               	rlcf	(___aomod@divisor+4)^0,f,c
 14426  003C82  361F               	rlcf	(___aomod@divisor+5)^0,f,c
 14427  003C84  3620               	rlcf	(___aomod@divisor+6)^0,f,c
 14428  003C86  3621               	rlcf	(___aomod@divisor+7)^0,f,c
 14429  003C88  2A22               	incf	___aomod@counter^0,f,c
 14430  003C8A                     l8312:
 14431                           
 14432                           ; BSR set to: 0
 14433  003C8A  AE21               	btfss	(___aomod@divisor+7)^0,7,c
 14434  003C8C  D7F4               	goto	l8310
 14435  003C8E                     u5950:
 14436                           
 14437                           ; BSR set to: 0
 14438  003C8E  501A               	movf	___aomod@divisor^0,w,c
 14439  003C90  5C12               	subwf	___aomod@dividend^0,w,c
 14440  003C92  501B               	movf	(___aomod@divisor+1)^0,w,c
 14441  003C94  5813               	subwfb	(___aomod@dividend+1)^0,w,c
 14442  003C96  501C               	movf	(___aomod@divisor+2)^0,w,c
 14443  003C98  5814               	subwfb	(___aomod@dividend+2)^0,w,c
 14444  003C9A  501D               	movf	(___aomod@divisor+3)^0,w,c
 14445  003C9C  5815               	subwfb	(___aomod@dividend+3)^0,w,c
 14446  003C9E  501E               	movf	(___aomod@divisor+4)^0,w,c
 14447  003CA0  5816               	subwfb	(___aomod@dividend+4)^0,w,c
 14448  003CA2  501F               	movf	(___aomod@divisor+5)^0,w,c
 14449  003CA4  5817               	subwfb	(___aomod@dividend+5)^0,w,c
 14450  003CA6  5020               	movf	(___aomod@divisor+6)^0,w,c
 14451  003CA8  5818               	subwfb	(___aomod@dividend+6)^0,w,c
 14452  003CAA  5021               	movf	(___aomod@divisor+7)^0,w,c
 14453  003CAC  5819               	subwfb	(___aomod@dividend+7)^0,w,c
 14454  003CAE  A0D8               	btfss	status,0,c
 14455  003CB0  D010               	goto	l8318
 14456                           
 14457                           ; BSR set to: 0
 14458  003CB2  501A               	movf	___aomod@divisor^0,w,c
 14459  003CB4  5E12               	subwf	___aomod@dividend^0,f,c
 14460  003CB6  501B               	movf	(___aomod@divisor+1)^0,w,c
 14461  003CB8  5A13               	subwfb	(___aomod@dividend+1)^0,f,c
 14462  003CBA  501C               	movf	(___aomod@divisor+2)^0,w,c
 14463  003CBC  5A14               	subwfb	(___aomod@dividend+2)^0,f,c
 14464  003CBE  501D               	movf	(___aomod@divisor+3)^0,w,c
 14465  003CC0  5A15               	subwfb	(___aomod@dividend+3)^0,f,c
 14466  003CC2  501E               	movf	(___aomod@divisor+4)^0,w,c
 14467  003CC4  5A16               	subwfb	(___aomod@dividend+4)^0,f,c
 14468  003CC6  501F               	movf	(___aomod@divisor+5)^0,w,c
 14469  003CC8  5A17               	subwfb	(___aomod@dividend+5)^0,f,c
 14470  003CCA  5020               	movf	(___aomod@divisor+6)^0,w,c
 14471  003CCC  5A18               	subwfb	(___aomod@dividend+6)^0,f,c
 14472  003CCE  5021               	movf	(___aomod@divisor+7)^0,w,c
 14473  003CD0  5A19               	subwfb	(___aomod@dividend+7)^0,f,c
 14474  003CD2                     l8318:
 14475                           
 14476                           ; BSR set to: 0
 14477  003CD2  90D8               	bcf	status,0,c
 14478  003CD4  3221               	rrcf	(___aomod@divisor+7)^0,f,c
 14479  003CD6  3220               	rrcf	(___aomod@divisor+6)^0,f,c
 14480  003CD8  321F               	rrcf	(___aomod@divisor+5)^0,f,c
 14481  003CDA  321E               	rrcf	(___aomod@divisor+4)^0,f,c
 14482  003CDC  321D               	rrcf	(___aomod@divisor+3)^0,f,c
 14483  003CDE  321C               	rrcf	(___aomod@divisor+2)^0,f,c
 14484  003CE0  321B               	rrcf	(___aomod@divisor+1)^0,f,c
 14485  003CE2  321A               	rrcf	___aomod@divisor^0,f,c
 14486                           
 14487                           ; BSR set to: 0
 14488  003CE4  2E22               	decfsz	___aomod@counter^0,f,c
 14489  003CE6  D7D3               	goto	u5950
 14490  003CE8                     l8322:
 14491                           
 14492                           ; BSR set to: 0
 14493  003CE8  5023               	movf	___aomod@sign^0,w,c
 14494  003CEA  B4D8               	btfsc	status,2,c
 14495  003CEC  D010               	goto	l8326
 14496                           
 14497                           ; BSR set to: 0
 14498  003CEE  1E19               	comf	(___aomod@dividend+7)^0,f,c
 14499  003CF0  1E18               	comf	(___aomod@dividend+6)^0,f,c
 14500  003CF2  1E17               	comf	(___aomod@dividend+5)^0,f,c
 14501  003CF4  1E16               	comf	(___aomod@dividend+4)^0,f,c
 14502  003CF6  1E15               	comf	(___aomod@dividend+3)^0,f,c
 14503  003CF8  1E14               	comf	(___aomod@dividend+2)^0,f,c
 14504  003CFA  1E13               	comf	(___aomod@dividend+1)^0,f,c
 14505  003CFC  6C12               	negf	___aomod@dividend^0,c
 14506  003CFE  0E00               	movlw	0
 14507  003D00  2213               	addwfc	(___aomod@dividend+1)^0,f,c
 14508  003D02  2214               	addwfc	(___aomod@dividend+2)^0,f,c
 14509  003D04  2215               	addwfc	(___aomod@dividend+3)^0,f,c
 14510  003D06  2216               	addwfc	(___aomod@dividend+4)^0,f,c
 14511  003D08  2217               	addwfc	(___aomod@dividend+5)^0,f,c
 14512  003D0A  2218               	addwfc	(___aomod@dividend+6)^0,f,c
 14513  003D0C  2219               	addwfc	(___aomod@dividend+7)^0,f,c
 14514  003D0E                     l8326:
 14515                           
 14516                           ; BSR set to: 0
 14517  003D0E  C012  F012         	movff	___aomod@dividend,?___aomod
 14518  003D12  C013  F013         	movff	___aomod@dividend+1,?___aomod+1
 14519  003D16  C014  F014         	movff	___aomod@dividend+2,?___aomod+2
 14520  003D1A  C015  F015         	movff	___aomod@dividend+3,?___aomod+3
 14521  003D1E  C016  F016         	movff	___aomod@dividend+4,?___aomod+4
 14522  003D22  C017  F017         	movff	___aomod@dividend+5,?___aomod+5
 14523  003D26  C018  F018         	movff	___aomod@dividend+6,?___aomod+6
 14524  003D2A  C019  F019         	movff	___aomod@dividend+7,?___aomod+7
 14525                           
 14526                           ; BSR set to: 0
 14527  003D2E  0012               	return		;funcret
 14528  003D30                     __end_of___aomod:
 14529                           	callstack 0
 14530                           
 14531 ;; *************** function ___aodiv *****************
 14532 ;; Defined at:
 14533 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\aodiv.c"
 14534 ;; Parameters:    Size  Location     Type
 14535 ;;  dividend        8   17[COMRAM] long long 
 14536 ;;  divisor         8   25[COMRAM] long long 
 14537 ;; Auto vars:     Size  Location     Type
 14538 ;;  quotient        8   35[COMRAM] long long 
 14539 ;;  sign            1   34[COMRAM] unsigned char 
 14540 ;;  counter         1   33[COMRAM] unsigned char 
 14541 ;; Return value:  Size  Location     Type
 14542 ;;                  8   17[COMRAM] long long 
 14543 ;; Registers used:
 14544 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14545 ;; Tracked objects:
 14546 ;;		On entry : 3F/0
 14547 ;;		On exit  : 3F/0
 14548 ;;		Unchanged: 3F/0
 14549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14550 ;;      Params:        16       0       0       0       0       0       0
 14551 ;;      Locals:        10       0       0       0       0       0       0
 14552 ;;      Temps:          0       0       0       0       0       0       0
 14553 ;;      Totals:        26       0       0       0       0       0       0
 14554 ;;Total ram usage:       26 bytes
 14555 ;; Hardware stack levels used: 1
 14556 ;; Hardware stack levels required when called: 4
 14557 ;; This function calls:
 14558 ;;		Nothing
 14559 ;; This function is called by:
 14560 ;;		_dtoa
 14561 ;; This function uses a non-reentrant model
 14562 ;;
 14563                           
 14564                           	psect	text66
 14565  003714                     __ptext66:
 14566                           	callstack 0
 14567  003714                     ___aodiv:
 14568                           	callstack 17
 14569                           
 14570                           ; BSR set to: 0
 14571                           
 14572                           ; BSR set to: 0
 14573                           ;incstack = 0
 14574  003714  0E00               	movlw	0
 14575  003716  6E23               	movwf	___aodiv@sign^0,c
 14576                           
 14577                           ; BSR set to: 0
 14578  003718  AE21               	btfss	(___aodiv@divisor+7)^0,7,c
 14579  00371A  D012               	goto	l8258
 14580                           
 14581                           ; BSR set to: 0
 14582  00371C  1E21               	comf	(___aodiv@divisor+7)^0,f,c
 14583  00371E  1E20               	comf	(___aodiv@divisor+6)^0,f,c
 14584  003720  1E1F               	comf	(___aodiv@divisor+5)^0,f,c
 14585  003722  1E1E               	comf	(___aodiv@divisor+4)^0,f,c
 14586  003724  1E1D               	comf	(___aodiv@divisor+3)^0,f,c
 14587  003726  1E1C               	comf	(___aodiv@divisor+2)^0,f,c
 14588  003728  1E1B               	comf	(___aodiv@divisor+1)^0,f,c
 14589  00372A  6C1A               	negf	___aodiv@divisor^0,c
 14590  00372C  0E00               	movlw	0
 14591  00372E  221B               	addwfc	(___aodiv@divisor+1)^0,f,c
 14592  003730  221C               	addwfc	(___aodiv@divisor+2)^0,f,c
 14593  003732  221D               	addwfc	(___aodiv@divisor+3)^0,f,c
 14594  003734  221E               	addwfc	(___aodiv@divisor+4)^0,f,c
 14595  003736  221F               	addwfc	(___aodiv@divisor+5)^0,f,c
 14596  003738  2220               	addwfc	(___aodiv@divisor+6)^0,f,c
 14597  00373A  2221               	addwfc	(___aodiv@divisor+7)^0,f,c
 14598                           
 14599                           ; BSR set to: 0
 14600  00373C  0E01               	movlw	1
 14601  00373E  6E23               	movwf	___aodiv@sign^0,c
 14602  003740                     l8258:
 14603                           
 14604                           ; BSR set to: 0
 14605  003740  AE19               	btfss	(___aodiv@dividend+7)^0,7,c
 14606  003742  D012               	goto	l8264
 14607                           
 14608                           ; BSR set to: 0
 14609  003744  1E19               	comf	(___aodiv@dividend+7)^0,f,c
 14610  003746  1E18               	comf	(___aodiv@dividend+6)^0,f,c
 14611  003748  1E17               	comf	(___aodiv@dividend+5)^0,f,c
 14612  00374A  1E16               	comf	(___aodiv@dividend+4)^0,f,c
 14613  00374C  1E15               	comf	(___aodiv@dividend+3)^0,f,c
 14614  00374E  1E14               	comf	(___aodiv@dividend+2)^0,f,c
 14615  003750  1E13               	comf	(___aodiv@dividend+1)^0,f,c
 14616  003752  6C12               	negf	___aodiv@dividend^0,c
 14617  003754  0E00               	movlw	0
 14618  003756  2213               	addwfc	(___aodiv@dividend+1)^0,f,c
 14619  003758  2214               	addwfc	(___aodiv@dividend+2)^0,f,c
 14620  00375A  2215               	addwfc	(___aodiv@dividend+3)^0,f,c
 14621  00375C  2216               	addwfc	(___aodiv@dividend+4)^0,f,c
 14622  00375E  2217               	addwfc	(___aodiv@dividend+5)^0,f,c
 14623  003760  2218               	addwfc	(___aodiv@dividend+6)^0,f,c
 14624  003762  2219               	addwfc	(___aodiv@dividend+7)^0,f,c
 14625                           
 14626                           ; BSR set to: 0
 14627  003764  0E01               	movlw	1
 14628  003766  1A23               	xorwf	___aodiv@sign^0,f,c
 14629  003768                     l8264:
 14630                           
 14631                           ; BSR set to: 0
 14632  003768  EE20  F024         	lfsr	2,___aodiv@quotient
 14633  00376C  0E07               	movlw	7
 14634  00376E                     u5871:
 14635  00376E  6ADE               	clrf	postinc2,c
 14636  003770  06E8               	decf	wreg,f,c
 14637  003772  E2FD               	bc	u5871
 14638                           
 14639                           ; BSR set to: 0
 14640  003774  501A               	movf	___aodiv@divisor^0,w,c
 14641  003776  101B               	iorwf	(___aodiv@divisor+1)^0,w,c
 14642  003778  101C               	iorwf	(___aodiv@divisor+2)^0,w,c
 14643  00377A  101D               	iorwf	(___aodiv@divisor+3)^0,w,c
 14644  00377C  101E               	iorwf	(___aodiv@divisor+4)^0,w,c
 14645  00377E  101F               	iorwf	(___aodiv@divisor+5)^0,w,c
 14646  003780  1020               	iorwf	(___aodiv@divisor+6)^0,w,c
 14647  003782  1021               	iorwf	(___aodiv@divisor+7)^0,w,c
 14648  003784  B4D8               	btfsc	status,2,c
 14649  003786  D046               	goto	l8286
 14650                           
 14651                           ; BSR set to: 0
 14652  003788  0E01               	movlw	1
 14653  00378A  6E22               	movwf	___aodiv@counter^0,c
 14654  00378C  D00A               	goto	l8272
 14655  00378E                     l8270:
 14656                           
 14657                           ; BSR set to: 0
 14658  00378E  90D8               	bcf	status,0,c
 14659  003790  361A               	rlcf	___aodiv@divisor^0,f,c
 14660  003792  361B               	rlcf	(___aodiv@divisor+1)^0,f,c
 14661  003794  361C               	rlcf	(___aodiv@divisor+2)^0,f,c
 14662  003796  361D               	rlcf	(___aodiv@divisor+3)^0,f,c
 14663  003798  361E               	rlcf	(___aodiv@divisor+4)^0,f,c
 14664  00379A  361F               	rlcf	(___aodiv@divisor+5)^0,f,c
 14665  00379C  3620               	rlcf	(___aodiv@divisor+6)^0,f,c
 14666  00379E  3621               	rlcf	(___aodiv@divisor+7)^0,f,c
 14667  0037A0  2A22               	incf	___aodiv@counter^0,f,c
 14668  0037A2                     l8272:
 14669                           
 14670                           ; BSR set to: 0
 14671  0037A2  AE21               	btfss	(___aodiv@divisor+7)^0,7,c
 14672  0037A4  D7F4               	goto	l8270
 14673  0037A6                     u5890:
 14674                           
 14675                           ; BSR set to: 0
 14676  0037A6  90D8               	bcf	status,0,c
 14677  0037A8  3624               	rlcf	___aodiv@quotient^0,f,c
 14678  0037AA  3625               	rlcf	(___aodiv@quotient+1)^0,f,c
 14679  0037AC  3626               	rlcf	(___aodiv@quotient+2)^0,f,c
 14680  0037AE  3627               	rlcf	(___aodiv@quotient+3)^0,f,c
 14681  0037B0  3628               	rlcf	(___aodiv@quotient+4)^0,f,c
 14682  0037B2  3629               	rlcf	(___aodiv@quotient+5)^0,f,c
 14683  0037B4  362A               	rlcf	(___aodiv@quotient+6)^0,f,c
 14684  0037B6  362B               	rlcf	(___aodiv@quotient+7)^0,f,c
 14685                           
 14686                           ; BSR set to: 0
 14687  0037B8  501A               	movf	___aodiv@divisor^0,w,c
 14688  0037BA  5C12               	subwf	___aodiv@dividend^0,w,c
 14689  0037BC  501B               	movf	(___aodiv@divisor+1)^0,w,c
 14690  0037BE  5813               	subwfb	(___aodiv@dividend+1)^0,w,c
 14691  0037C0  501C               	movf	(___aodiv@divisor+2)^0,w,c
 14692  0037C2  5814               	subwfb	(___aodiv@dividend+2)^0,w,c
 14693  0037C4  501D               	movf	(___aodiv@divisor+3)^0,w,c
 14694  0037C6  5815               	subwfb	(___aodiv@dividend+3)^0,w,c
 14695  0037C8  501E               	movf	(___aodiv@divisor+4)^0,w,c
 14696  0037CA  5816               	subwfb	(___aodiv@dividend+4)^0,w,c
 14697  0037CC  501F               	movf	(___aodiv@divisor+5)^0,w,c
 14698  0037CE  5817               	subwfb	(___aodiv@dividend+5)^0,w,c
 14699  0037D0  5020               	movf	(___aodiv@divisor+6)^0,w,c
 14700  0037D2  5818               	subwfb	(___aodiv@dividend+6)^0,w,c
 14701  0037D4  5021               	movf	(___aodiv@divisor+7)^0,w,c
 14702  0037D6  5819               	subwfb	(___aodiv@dividend+7)^0,w,c
 14703  0037D8  A0D8               	btfss	status,0,c
 14704  0037DA  D011               	goto	l8282
 14705                           
 14706                           ; BSR set to: 0
 14707  0037DC  501A               	movf	___aodiv@divisor^0,w,c
 14708  0037DE  5E12               	subwf	___aodiv@dividend^0,f,c
 14709  0037E0  501B               	movf	(___aodiv@divisor+1)^0,w,c
 14710  0037E2  5A13               	subwfb	(___aodiv@dividend+1)^0,f,c
 14711  0037E4  501C               	movf	(___aodiv@divisor+2)^0,w,c
 14712  0037E6  5A14               	subwfb	(___aodiv@dividend+2)^0,f,c
 14713  0037E8  501D               	movf	(___aodiv@divisor+3)^0,w,c
 14714  0037EA  5A15               	subwfb	(___aodiv@dividend+3)^0,f,c
 14715  0037EC  501E               	movf	(___aodiv@divisor+4)^0,w,c
 14716  0037EE  5A16               	subwfb	(___aodiv@dividend+4)^0,f,c
 14717  0037F0  501F               	movf	(___aodiv@divisor+5)^0,w,c
 14718  0037F2  5A17               	subwfb	(___aodiv@dividend+5)^0,f,c
 14719  0037F4  5020               	movf	(___aodiv@divisor+6)^0,w,c
 14720  0037F6  5A18               	subwfb	(___aodiv@dividend+6)^0,f,c
 14721  0037F8  5021               	movf	(___aodiv@divisor+7)^0,w,c
 14722  0037FA  5A19               	subwfb	(___aodiv@dividend+7)^0,f,c
 14723                           
 14724                           ; BSR set to: 0
 14725  0037FC  8024               	bsf	___aodiv@quotient^0,0,c
 14726  0037FE                     l8282:
 14727                           
 14728                           ; BSR set to: 0
 14729  0037FE  90D8               	bcf	status,0,c
 14730  003800  3221               	rrcf	(___aodiv@divisor+7)^0,f,c
 14731  003802  3220               	rrcf	(___aodiv@divisor+6)^0,f,c
 14732  003804  321F               	rrcf	(___aodiv@divisor+5)^0,f,c
 14733  003806  321E               	rrcf	(___aodiv@divisor+4)^0,f,c
 14734  003808  321D               	rrcf	(___aodiv@divisor+3)^0,f,c
 14735  00380A  321C               	rrcf	(___aodiv@divisor+2)^0,f,c
 14736  00380C  321B               	rrcf	(___aodiv@divisor+1)^0,f,c
 14737  00380E  321A               	rrcf	___aodiv@divisor^0,f,c
 14738                           
 14739                           ; BSR set to: 0
 14740  003810  2E22               	decfsz	___aodiv@counter^0,f,c
 14741  003812  D7C9               	goto	u5890
 14742  003814                     l8286:
 14743                           
 14744                           ; BSR set to: 0
 14745  003814  5023               	movf	___aodiv@sign^0,w,c
 14746  003816  B4D8               	btfsc	status,2,c
 14747  003818  D010               	goto	l8290
 14748                           
 14749                           ; BSR set to: 0
 14750  00381A  1E2B               	comf	(___aodiv@quotient+7)^0,f,c
 14751  00381C  1E2A               	comf	(___aodiv@quotient+6)^0,f,c
 14752  00381E  1E29               	comf	(___aodiv@quotient+5)^0,f,c
 14753  003820  1E28               	comf	(___aodiv@quotient+4)^0,f,c
 14754  003822  1E27               	comf	(___aodiv@quotient+3)^0,f,c
 14755  003824  1E26               	comf	(___aodiv@quotient+2)^0,f,c
 14756  003826  1E25               	comf	(___aodiv@quotient+1)^0,f,c
 14757  003828  6C24               	negf	___aodiv@quotient^0,c
 14758  00382A  0E00               	movlw	0
 14759  00382C  2225               	addwfc	(___aodiv@quotient+1)^0,f,c
 14760  00382E  2226               	addwfc	(___aodiv@quotient+2)^0,f,c
 14761  003830  2227               	addwfc	(___aodiv@quotient+3)^0,f,c
 14762  003832  2228               	addwfc	(___aodiv@quotient+4)^0,f,c
 14763  003834  2229               	addwfc	(___aodiv@quotient+5)^0,f,c
 14764  003836  222A               	addwfc	(___aodiv@quotient+6)^0,f,c
 14765  003838  222B               	addwfc	(___aodiv@quotient+7)^0,f,c
 14766  00383A                     l8290:
 14767                           
 14768                           ; BSR set to: 0
 14769  00383A  C024  F012         	movff	___aodiv@quotient,?___aodiv
 14770  00383E  C025  F013         	movff	___aodiv@quotient+1,?___aodiv+1
 14771  003842  C026  F014         	movff	___aodiv@quotient+2,?___aodiv+2
 14772  003846  C027  F015         	movff	___aodiv@quotient+3,?___aodiv+3
 14773  00384A  C028  F016         	movff	___aodiv@quotient+4,?___aodiv+4
 14774  00384E  C029  F017         	movff	___aodiv@quotient+5,?___aodiv+5
 14775  003852  C02A  F018         	movff	___aodiv@quotient+6,?___aodiv+6
 14776  003856  C02B  F019         	movff	___aodiv@quotient+7,?___aodiv+7
 14777                           
 14778                           ; BSR set to: 0
 14779  00385A  0012               	return		;funcret
 14780  00385C                     __end_of___aodiv:
 14781                           	callstack 0
 14782                           
 14783 ;; *************** function _Paddle_draw *****************
 14784 ;; Defined at:
 14785 ;;		line 55 in file "class/paddle.c"
 14786 ;; Parameters:    Size  Location     Type
 14787 ;;  p               2   36[COMRAM] PTR struct Paddle
 14788 ;;		 -> g1(240), 
 14789 ;; Auto vars:     Size  Location     Type
 14790 ;;		None
 14791 ;; Return value:  Size  Location     Type
 14792 ;;                  1    wreg      void 
 14793 ;; Registers used:
 14794 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14795 ;; Tracked objects:
 14796 ;;		On entry : 3F/0
 14797 ;;		On exit  : 0/0
 14798 ;;		Unchanged: 0/0
 14799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14800 ;;      Params:         2       0       0       0       0       0       0
 14801 ;;      Locals:         0       0       0       0       0       0       0
 14802 ;;      Temps:          4       0       0       0       0       0       0
 14803 ;;      Totals:         6       0       0       0       0       0       0
 14804 ;;Total ram usage:        6 bytes
 14805 ;; Hardware stack levels used: 1
 14806 ;; Hardware stack levels required when called: 5
 14807 ;; This function calls:
 14808 ;;		_LCD_DrawRect
 14809 ;; This function is called by:
 14810 ;;		_Menu_inGameDraw
 14811 ;;		_displayController
 14812 ;; This function uses a non-reentrant model
 14813 ;;
 14814                           
 14815                           	psect	text67
 14816  003ADA                     __ptext67:
 14817                           	callstack 0
 14818  003ADA                     _Paddle_draw:
 14819                           	callstack 21
 14820                           
 14821                           ; BSR set to: 0
 14822                           ;class/paddle.c: 55: void Paddle_draw(struct Paddle* p);class/paddle.c: 56: {;class/padd
      +                          le.c: 58:     LCD_DrawRect(p->oldx,p->oldy,p->oldx+50,p->oldy+10,1,0b0000000000000000);
 14823                           
 14824                           ; BSR set to: 0
 14825                           ;incstack = 0
 14826  003ADA  EE20 F004          	lfsr	2,4
 14827  003ADE  5025               	movf	Paddle_draw@p^0,w,c
 14828  003AE0  26D9               	addwf	fsr2l,f,c
 14829  003AE2  5026               	movf	(Paddle_draw@p+1)^0,w,c
 14830  003AE4  22DA               	addwfc	fsr2h,f,c
 14831  003AE6  CFDE F012          	movff	postinc2,LCD_DrawRect@posX1
 14832  003AEA  CFDD F013          	movff	postdec2,LCD_DrawRect@posX1+1
 14833  003AEE  EE20 F006          	lfsr	2,6
 14834  003AF2  5025               	movf	Paddle_draw@p^0,w,c
 14835  003AF4  26D9               	addwf	fsr2l,f,c
 14836  003AF6  5026               	movf	(Paddle_draw@p+1)^0,w,c
 14837  003AF8  22DA               	addwfc	fsr2h,f,c
 14838  003AFA  CFDE F014          	movff	postinc2,LCD_DrawRect@posY1
 14839  003AFE  CFDD F015          	movff	postdec2,LCD_DrawRect@posY1+1
 14840  003B02  EE20 F004          	lfsr	2,4
 14841  003B06  5025               	movf	Paddle_draw@p^0,w,c
 14842  003B08  26D9               	addwf	fsr2l,f,c
 14843  003B0A  5026               	movf	(Paddle_draw@p+1)^0,w,c
 14844  003B0C  22DA               	addwfc	fsr2h,f,c
 14845  003B0E  CFDE F027          	movff	postinc2,??_Paddle_draw
 14846  003B12  CFDD F028          	movff	postdec2,??_Paddle_draw+1
 14847  003B16  0E32               	movlw	50
 14848  003B18  2427               	addwf	??_Paddle_draw^0,w,c
 14849  003B1A  6E16               	movwf	LCD_DrawRect@posX2^0,c
 14850  003B1C  0E00               	movlw	0
 14851  003B1E  2028               	addwfc	(??_Paddle_draw+1)^0,w,c
 14852  003B20  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 14853  003B22  EE20 F006          	lfsr	2,6
 14854  003B26  5025               	movf	Paddle_draw@p^0,w,c
 14855  003B28  26D9               	addwf	fsr2l,f,c
 14856  003B2A  5026               	movf	(Paddle_draw@p+1)^0,w,c
 14857  003B2C  22DA               	addwfc	fsr2h,f,c
 14858  003B2E  CFDE F029          	movff	postinc2,??_Paddle_draw+2
 14859  003B32  CFDD F02A          	movff	postdec2,??_Paddle_draw+3
 14860  003B36  0E0A               	movlw	10
 14861  003B38  2429               	addwf	(??_Paddle_draw+2)^0,w,c
 14862  003B3A  6E18               	movwf	LCD_DrawRect@posY2^0,c
 14863  003B3C  0E00               	movlw	0
 14864  003B3E  202A               	addwfc	(??_Paddle_draw+3)^0,w,c
 14865  003B40  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 14866  003B42  0E01               	movlw	1
 14867  003B44  6E1A               	movwf	LCD_DrawRect@fill^0,c
 14868  003B46  0E00               	movlw	0
 14869  003B48  6E1C               	movwf	(LCD_DrawRect@color+1)^0,c
 14870  003B4A  0E00               	movlw	0
 14871  003B4C  6E1B               	movwf	LCD_DrawRect@color^0,c
 14872  003B4E  EC36  F013         	call	_LCD_DrawRect	;wreg free
 14873                           
 14874                           ;class/paddle.c: 60:     p->oldx=p->x;
 14875  003B52  C025  FFD9         	movff	Paddle_draw@p,fsr2l
 14876  003B56  C026  FFDA         	movff	Paddle_draw@p+1,fsr2h
 14877  003B5A  EE10 F004          	lfsr	1,4
 14878  003B5E  5025               	movf	Paddle_draw@p^0,w,c
 14879  003B60  26E1               	addwf	fsr1l,f,c
 14880  003B62  5026               	movf	(Paddle_draw@p+1)^0,w,c
 14881  003B64  22E2               	addwfc	fsr1h,f,c
 14882  003B66  CFDE FFE6          	movff	postinc2,postinc1
 14883  003B6A  CFDD FFE5          	movff	postdec2,postdec1
 14884                           
 14885                           ;class/paddle.c: 61:     p->oldy=p->y;
 14886  003B6E  EE20 F002          	lfsr	2,2
 14887  003B72  5025               	movf	Paddle_draw@p^0,w,c
 14888  003B74  26D9               	addwf	fsr2l,f,c
 14889  003B76  5026               	movf	(Paddle_draw@p+1)^0,w,c
 14890  003B78  22DA               	addwfc	fsr2h,f,c
 14891  003B7A  EE10 F006          	lfsr	1,6
 14892  003B7E  5025               	movf	Paddle_draw@p^0,w,c
 14893  003B80  26E1               	addwf	fsr1l,f,c
 14894  003B82  5026               	movf	(Paddle_draw@p+1)^0,w,c
 14895  003B84  22E2               	addwfc	fsr1h,f,c
 14896  003B86  CFDE FFE6          	movff	postinc2,postinc1
 14897  003B8A  CFDD FFE5          	movff	postdec2,postdec1
 14898                           
 14899                           ;class/paddle.c: 63:     LCD_DrawRect(p->x,p->y,p->x+50,p->y+10,1,p->color);
 14900  003B8E  C025  FFD9         	movff	Paddle_draw@p,fsr2l
 14901  003B92  C026  FFDA         	movff	Paddle_draw@p+1,fsr2h
 14902  003B96  CFDE F012          	movff	postinc2,LCD_DrawRect@posX1
 14903  003B9A  CFDD F013          	movff	postdec2,LCD_DrawRect@posX1+1
 14904  003B9E  EE20 F002          	lfsr	2,2
 14905  003BA2  5025               	movf	Paddle_draw@p^0,w,c
 14906  003BA4  26D9               	addwf	fsr2l,f,c
 14907  003BA6  5026               	movf	(Paddle_draw@p+1)^0,w,c
 14908  003BA8  22DA               	addwfc	fsr2h,f,c
 14909  003BAA  CFDE F014          	movff	postinc2,LCD_DrawRect@posY1
 14910  003BAE  CFDD F015          	movff	postdec2,LCD_DrawRect@posY1+1
 14911  003BB2  C025  FFD9         	movff	Paddle_draw@p,fsr2l
 14912  003BB6  C026  FFDA         	movff	Paddle_draw@p+1,fsr2h
 14913  003BBA  CFDE F027          	movff	postinc2,??_Paddle_draw
 14914  003BBE  CFDD F028          	movff	postdec2,??_Paddle_draw+1
 14915  003BC2  0E32               	movlw	50
 14916  003BC4  2427               	addwf	??_Paddle_draw^0,w,c
 14917  003BC6  6E16               	movwf	LCD_DrawRect@posX2^0,c
 14918  003BC8  0E00               	movlw	0
 14919  003BCA  2028               	addwfc	(??_Paddle_draw+1)^0,w,c
 14920  003BCC  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 14921  003BCE  EE20 F002          	lfsr	2,2
 14922  003BD2  5025               	movf	Paddle_draw@p^0,w,c
 14923  003BD4  26D9               	addwf	fsr2l,f,c
 14924  003BD6  5026               	movf	(Paddle_draw@p+1)^0,w,c
 14925  003BD8  22DA               	addwfc	fsr2h,f,c
 14926  003BDA  CFDE F029          	movff	postinc2,??_Paddle_draw+2
 14927  003BDE  CFDD F02A          	movff	postdec2,??_Paddle_draw+3
 14928  003BE2  0E0A               	movlw	10
 14929  003BE4  2429               	addwf	(??_Paddle_draw+2)^0,w,c
 14930  003BE6  6E18               	movwf	LCD_DrawRect@posY2^0,c
 14931  003BE8  0E00               	movlw	0
 14932  003BEA  202A               	addwfc	(??_Paddle_draw+3)^0,w,c
 14933  003BEC  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 14934  003BEE  0E01               	movlw	1
 14935  003BF0  6E1A               	movwf	LCD_DrawRect@fill^0,c
 14936  003BF2  EE20 F008          	lfsr	2,8
 14937  003BF6  5025               	movf	Paddle_draw@p^0,w,c
 14938  003BF8  26D9               	addwf	fsr2l,f,c
 14939  003BFA  5026               	movf	(Paddle_draw@p+1)^0,w,c
 14940  003BFC  22DA               	addwfc	fsr2h,f,c
 14941  003BFE  CFDE F01B          	movff	postinc2,LCD_DrawRect@color
 14942  003C02  CFDD F01C          	movff	postdec2,LCD_DrawRect@color+1
 14943  003C06  EC36  F013         	call	_LCD_DrawRect	;wreg free
 14944  003C0A  0012               	return		;funcret
 14945  003C0C                     __end_of_Paddle_draw:
 14946                           	callstack 0
 14947                           
 14948 ;; *************** function _LCD_Fill *****************
 14949 ;; Defined at:
 14950 ;;		line 218 in file "libraries/lcd_highlevel.c"
 14951 ;; Parameters:    Size  Location     Type
 14952 ;;  color           2   17[COMRAM] unsigned short 
 14953 ;; Auto vars:     Size  Location     Type
 14954 ;;  page            2   23[COMRAM] unsigned short 
 14955 ;;  column          2   21[COMRAM] unsigned short 
 14956 ;;  colorL          1   20[COMRAM] unsigned char 
 14957 ;;  colorH          1   19[COMRAM] unsigned char 
 14958 ;; Return value:  Size  Location     Type
 14959 ;;                  1    wreg      void 
 14960 ;; Registers used:
 14961 ;;		wreg, status,2, status,0
 14962 ;; Tracked objects:
 14963 ;;		On entry : 0/0
 14964 ;;		On exit  : 0/0
 14965 ;;		Unchanged: 0/0
 14966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14967 ;;      Params:         2       0       0       0       0       0       0
 14968 ;;      Locals:         6       0       0       0       0       0       0
 14969 ;;      Temps:          0       0       0       0       0       0       0
 14970 ;;      Totals:         8       0       0       0       0       0       0
 14971 ;;Total ram usage:        8 bytes
 14972 ;; Hardware stack levels used: 1
 14973 ;; Hardware stack levels required when called: 4
 14974 ;; This function calls:
 14975 ;;		Nothing
 14976 ;; This function is called by:
 14977 ;;		_Factory_init
 14978 ;;		_Menu_welcomeDraw
 14979 ;;		_Menu_parametersDraw
 14980 ;;		_Menu_inGameDraw
 14981 ;;		_Menu_endGame
 14982 ;; This function uses a non-reentrant model
 14983 ;;
 14984                           
 14985                           	psect	text68
 14986  004954                     __ptext68:
 14987                           	callstack 0
 14988  004954                     _LCD_Fill:
 14989                           	callstack 21
 14990                           
 14991                           ;libraries/lcd_highlevel.c: 218: void LCD_Fill(uint16_t color);libraries/lcd_highlevel.c
      +                          : 219: {;libraries/lcd_highlevel.c: 220:   uint16_t column;;libraries/lcd_highlevel.c: 2
      +                          21:   uint16_t page;;libraries/lcd_highlevel.c: 222:   uint8_t colorH, colorL;;libraries
      +                          /lcd_highlevel.c: 223:   colorH = color >> 8;
 14992                           
 14993                           ;incstack = 0
 14994  004954  C013  F014         	movff	LCD_Fill@color+1,LCD_Fill@colorH
 14995                           
 14996                           ;libraries/lcd_highlevel.c: 224:   colorL = color;
 14997  004958  C012  F015         	movff	LCD_Fill@color,LCD_Fill@colorL
 14998                           
 14999                           ;libraries/lcd_highlevel.c: 226:   PORTA = 0x2A; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
 15000  00495C  0E2A               	movlw	42
 15001  00495E  6E80               	movwf	128,c	;volatile
 15002  004960  988B               	bcf	3979,4,c	;volatile
 15003  004962  968B               	bcf	3979,3,c	;volatile
 15004  004964  868B               	bsf	3979,3,c	;volatile
 15005  004966  888B               	bsf	3979,4,c	;volatile
 15006                           
 15007                           ;libraries/lcd_highlevel.c: 227:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
 15008  004968  0E00               	movlw	0
 15009  00496A  6E80               	movwf	128,c	;volatile
 15010  00496C  968B               	bcf	3979,3,c	;volatile
 15011  00496E  868B               	bsf	3979,3,c	;volatile
 15012                           
 15013                           ;libraries/lcd_highlevel.c: 228:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
 15014  004970  0E00               	movlw	0
 15015  004972  6E80               	movwf	128,c	;volatile
 15016  004974  968B               	bcf	3979,3,c	;volatile
 15017  004976  868B               	bsf	3979,3,c	;volatile
 15018                           
 15019                           ;libraries/lcd_highlevel.c: 229:   PORTA = (240 -1) >> 8; LATC3 = 0; LATC3 = 1;;
 15020  004978  0E00               	movlw	0
 15021  00497A  6E80               	movwf	128,c	;volatile
 15022  00497C  968B               	bcf	3979,3,c	;volatile
 15023  00497E  868B               	bsf	3979,3,c	;volatile
 15024                           
 15025                           ;libraries/lcd_highlevel.c: 230:   PORTA = (240 -1); LATC3 = 0; LATC3 = 1;;
 15026  004980  0EEF               	movlw	239
 15027  004982  6E80               	movwf	128,c	;volatile
 15028  004984  968B               	bcf	3979,3,c	;volatile
 15029  004986  868B               	bsf	3979,3,c	;volatile
 15030                           
 15031                           ;libraries/lcd_highlevel.c: 232:   PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
 15032  004988  0E2B               	movlw	43
 15033  00498A  6E80               	movwf	128,c	;volatile
 15034  00498C  988B               	bcf	3979,4,c	;volatile
 15035  00498E  968B               	bcf	3979,3,c	;volatile
 15036  004990  868B               	bsf	3979,3,c	;volatile
 15037  004992  888B               	bsf	3979,4,c	;volatile
 15038                           
 15039                           ;libraries/lcd_highlevel.c: 233:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
 15040  004994  0E00               	movlw	0
 15041  004996  6E80               	movwf	128,c	;volatile
 15042  004998  968B               	bcf	3979,3,c	;volatile
 15043  00499A  868B               	bsf	3979,3,c	;volatile
 15044                           
 15045                           ;libraries/lcd_highlevel.c: 234:   PORTA = 0x00; LATC3 = 0; LATC3 = 1;;
 15046  00499C  0E00               	movlw	0
 15047  00499E  6E80               	movwf	128,c	;volatile
 15048  0049A0  968B               	bcf	3979,3,c	;volatile
 15049  0049A2  868B               	bsf	3979,3,c	;volatile
 15050                           
 15051                           ;libraries/lcd_highlevel.c: 235:   PORTA = (320 -1) >> 8; LATC3 = 0; LATC3 = 1;;
 15052  0049A4  0E01               	movlw	1
 15053  0049A6  6E80               	movwf	128,c	;volatile
 15054  0049A8  968B               	bcf	3979,3,c	;volatile
 15055  0049AA  868B               	bsf	3979,3,c	;volatile
 15056                           
 15057                           ;libraries/lcd_highlevel.c: 236:   PORTA = (320 -1); LATC3 = 0; LATC3 = 1;;
 15058  0049AC  0E3F               	movlw	63
 15059  0049AE  6E80               	movwf	128,c	;volatile
 15060  0049B0  968B               	bcf	3979,3,c	;volatile
 15061  0049B2  868B               	bsf	3979,3,c	;volatile
 15062                           
 15063                           ;libraries/lcd_highlevel.c: 238:   PORTA = 0x2C; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
 15064  0049B4  0E2C               	movlw	44
 15065  0049B6  6E80               	movwf	128,c	;volatile
 15066  0049B8  988B               	bcf	3979,4,c	;volatile
 15067  0049BA  968B               	bcf	3979,3,c	;volatile
 15068  0049BC  868B               	bsf	3979,3,c	;volatile
 15069  0049BE  888B               	bsf	3979,4,c	;volatile
 15070                           
 15071                           ;libraries/lcd_highlevel.c: 239:   for(column=0; column<320; column++)
 15072  0049C0  0E00               	movlw	0
 15073  0049C2  6E17               	movwf	(LCD_Fill@column+1)^0,c
 15074  0049C4  0E00               	movlw	0
 15075  0049C6  6E16               	movwf	LCD_Fill@column^0,c
 15076  0049C8                     l6582:
 15077                           
 15078                           ;libraries/lcd_highlevel.c: 240:   {;libraries/lcd_highlevel.c: 241:     for(page=0; pag
      +                          e<240; page++)
 15079  0049C8  0E00               	movlw	0
 15080  0049CA  6E19               	movwf	(LCD_Fill@page+1)^0,c
 15081  0049CC  0E00               	movlw	0
 15082  0049CE  6E18               	movwf	LCD_Fill@page^0,c
 15083  0049D0                     l226:
 15084                           
 15085                           ;libraries/lcd_highlevel.c: 242:     {;libraries/lcd_highlevel.c: 243:       PORTA = col
      +                          orH;
 15086  0049D0  C014  FF80         	movff	LCD_Fill@colorH,3968	;volatile
 15087                           
 15088                           ;libraries/lcd_highlevel.c: 244:       LATC3 = 0;
 15089  0049D4  968B               	bcf	3979,3,c	;volatile
 15090                           
 15091                           ;libraries/lcd_highlevel.c: 245:       LATC3 = 1;
 15092  0049D6  868B               	bsf	3979,3,c	;volatile
 15093                           
 15094                           ;libraries/lcd_highlevel.c: 246:       PORTA = colorL;
 15095  0049D8  C015  FF80         	movff	LCD_Fill@colorL,3968	;volatile
 15096                           
 15097                           ;libraries/lcd_highlevel.c: 247:       LATC3 = 0;
 15098  0049DC  968B               	bcf	3979,3,c	;volatile
 15099                           
 15100                           ;libraries/lcd_highlevel.c: 248:       LATC3 = 1;
 15101  0049DE  868B               	bsf	3979,3,c	;volatile
 15102                           
 15103                           ;libraries/lcd_highlevel.c: 249:     }
 15104  0049E0  4A18               	infsnz	LCD_Fill@page^0,f,c
 15105  0049E2  2A19               	incf	(LCD_Fill@page+1)^0,f,c
 15106  0049E4  5019               	movf	(LCD_Fill@page+1)^0,w,c
 15107  0049E6  E104               	bnz	u4030
 15108  0049E8  0EF0               	movlw	240
 15109  0049EA  5C18               	subwf	LCD_Fill@page^0,w,c
 15110  0049EC  A0D8               	btfss	status,0,c
 15111  0049EE  D7F0               	goto	l226
 15112  0049F0                     u4030:
 15113                           
 15114                           ;libraries/lcd_highlevel.c: 250:   }
 15115  0049F0  4A16               	infsnz	LCD_Fill@column^0,f,c
 15116  0049F2  2A17               	incf	(LCD_Fill@column+1)^0,f,c
 15117  0049F4  0E40               	movlw	64
 15118  0049F6  5C16               	subwf	LCD_Fill@column^0,w,c
 15119  0049F8  0E01               	movlw	1
 15120  0049FA  5817               	subwfb	(LCD_Fill@column+1)^0,w,c
 15121  0049FC  B0D8               	btfsc	status,0,c
 15122  0049FE  0012               	return	
 15123  004A00  D7E3               	goto	l6582
 15124  004A02                     __end_of_LCD_Fill:
 15125                           	callstack 0
 15126                           
 15127 ;; *************** function _LCD_ButtonDraw *****************
 15128 ;; Defined at:
 15129 ;;		line 462 in file "libraries/lcd_highlevel.c"
 15130 ;; Parameters:    Size  Location     Type
 15131 ;;  button          2   65[COMRAM] PTR struct .
 15132 ;;		 -> g1(240), 
 15133 ;; Auto vars:     Size  Location     Type
 15134 ;;  bmpPtr          2   56[BANK0 ] PTR struct .
 15135 ;;		 -> STR_9(9), STR_8(2), STR_7(9), STR_6(11), 
 15136 ;;		 -> STR_5(9), STR_4(9), 
 15137 ;;  yText           2   53[BANK0 ] unsigned short 
 15138 ;;  xText           2   51[BANK0 ] unsigned short 
 15139 ;;  y2              2   49[BANK0 ] unsigned short 
 15140 ;;  y1              2   47[BANK0 ] unsigned short 
 15141 ;;  x2              2   45[BANK0 ] unsigned short 
 15142 ;;  x1              2   43[BANK0 ] unsigned short 
 15143 ;;  width           2   41[BANK0 ] unsigned short 
 15144 ;;  i               1   55[BANK0 ] unsigned char 
 15145 ;;  tempChar        1   40[BANK0 ] unsigned char 
 15146 ;; Return value:  Size  Location     Type
 15147 ;;                  1    wreg      void 
 15148 ;; Registers used:
 15149 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15150 ;; Tracked objects:
 15151 ;;		On entry : 0/0
 15152 ;;		On exit  : 0/0
 15153 ;;		Unchanged: 0/0
 15154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15155 ;;      Params:         2       0       0       0       0       0       0
 15156 ;;      Locals:         0      18       0       0       0       0       0
 15157 ;;      Temps:          0      12       0       0       0       0       0
 15158 ;;      Totals:         2      30       0       0       0       0       0
 15159 ;;Total ram usage:       32 bytes
 15160 ;; Hardware stack levels used: 1
 15161 ;; Hardware stack levels required when called: 6
 15162 ;; This function calls:
 15163 ;;		_LCD_Bitmap
 15164 ;;		_LCD_ButtonUpdate
 15165 ;;		_LCD_DrawRect
 15166 ;;		_LCD_DrawText
 15167 ;;		_strlen
 15168 ;; This function is called by:
 15169 ;;		_Menu_welcomeDraw
 15170 ;;		_Menu_parametersDraw
 15171 ;;		_Menu_inGameDraw
 15172 ;;		_Menu_endGame
 15173 ;; This function uses a non-reentrant model
 15174 ;;
 15175                           
 15176                           	psect	text69
 15177  000E4C                     __ptext69:
 15178                           	callstack 0
 15179  000E4C                     _LCD_ButtonDraw:
 15180                           	callstack 19
 15181                           
 15182                           ;libraries/lcd_highlevel.c: 462: void LCD_ButtonDraw(btn_t * button);libraries/lcd_highl
      +                          evel.c: 463: {;libraries/lcd_highlevel.c: 464:   uint16_t x1,x2,y1,y2;;libraries/lcd_hig
      +                          hlevel.c: 465:   uint16_t xText,yText;;libraries/lcd_highlevel.c: 466:   uint8_t i, temp
      +                          Char;;libraries/lcd_highlevel.c: 467:   uint16_t width=0;
 15183                           
 15184                           ;incstack = 0
 15185  000E4C  0E00               	movlw	0
 15186  000E4E  0100               	movlb	0	; () banked
 15187  000E50  6FD4               	movwf	(LCD_ButtonDraw@width+1)& (0+255),b
 15188  000E52  0E00               	movlw	0
 15189  000E54  6FD3               	movwf	LCD_ButtonDraw@width& (0+255),b
 15190                           
 15191                           ; BSR set to: 0
 15192                           ;libraries/lcd_highlevel.c: 468:   BMP_STRUCT *bmpPtr;;libraries/lcd_highlevel.c: 470:  
      +                           x1 = button->posX;
 15193  000E56  C042  FFD9         	movff	LCD_ButtonDraw@button,fsr2l
 15194  000E5A  C043  FFDA         	movff	LCD_ButtonDraw@button+1,fsr2h
 15195  000E5E  CFDE F0D5          	movff	postinc2,LCD_ButtonDraw@x1
 15196  000E62  CFDD F0D6          	movff	postdec2,LCD_ButtonDraw@x1+1
 15197                           
 15198                           ; BSR set to: 0
 15199                           ;libraries/lcd_highlevel.c: 471:   x2 = button->posX + button->width;
 15200  000E66  EE20 F004          	lfsr	2,4
 15201  000E6A  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15202  000E6C  26D9               	addwf	fsr2l,f,c
 15203  000E6E  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15204  000E70  22DA               	addwfc	fsr2h,f,c
 15205  000E72  CFDE F0C6          	movff	postinc2,??_LCD_ButtonDraw
 15206  000E76  CFDD F0C7          	movff	postdec2,??_LCD_ButtonDraw+1
 15207  000E7A  C042  FFD9         	movff	LCD_ButtonDraw@button,fsr2l
 15208  000E7E  C043  FFDA         	movff	LCD_ButtonDraw@button+1,fsr2h
 15209  000E82  CFDE F0C8          	movff	postinc2,??_LCD_ButtonDraw+2
 15210  000E86  CFDD F0C9          	movff	postdec2,??_LCD_ButtonDraw+3
 15211  000E8A  51C6               	movf	??_LCD_ButtonDraw& (0+255),w,b
 15212  000E8C  25C8               	addwf	(??_LCD_ButtonDraw+2)& (0+255),w,b
 15213  000E8E  6FD7               	movwf	LCD_ButtonDraw@x2& (0+255),b
 15214  000E90  51C7               	movf	(??_LCD_ButtonDraw+1)& (0+255),w,b
 15215  000E92  21C9               	addwfc	(??_LCD_ButtonDraw+3)& (0+255),w,b
 15216  000E94  6FD8               	movwf	(LCD_ButtonDraw@x2+1)& (0+255),b
 15217                           
 15218                           ; BSR set to: 0
 15219                           ;libraries/lcd_highlevel.c: 472:   y1 = button->posY;
 15220  000E96  EE20 F002          	lfsr	2,2
 15221  000E9A  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15222  000E9C  26D9               	addwf	fsr2l,f,c
 15223  000E9E  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15224  000EA0  22DA               	addwfc	fsr2h,f,c
 15225  000EA2  CFDE F0D9          	movff	postinc2,LCD_ButtonDraw@y1
 15226  000EA6  CFDD F0DA          	movff	postdec2,LCD_ButtonDraw@y1+1
 15227                           
 15228                           ; BSR set to: 0
 15229                           ;libraries/lcd_highlevel.c: 473:   y2 = button->posY + button->height;
 15230  000EAA  EE20 F006          	lfsr	2,6
 15231  000EAE  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15232  000EB0  26D9               	addwf	fsr2l,f,c
 15233  000EB2  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15234  000EB4  22DA               	addwfc	fsr2h,f,c
 15235  000EB6  CFDE F0C6          	movff	postinc2,??_LCD_ButtonDraw
 15236  000EBA  CFDD F0C7          	movff	postdec2,??_LCD_ButtonDraw+1
 15237  000EBE  EE20 F002          	lfsr	2,2
 15238  000EC2  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15239  000EC4  26D9               	addwf	fsr2l,f,c
 15240  000EC6  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15241  000EC8  22DA               	addwfc	fsr2h,f,c
 15242  000ECA  CFDE F0C8          	movff	postinc2,??_LCD_ButtonDraw+2
 15243  000ECE  CFDD F0C9          	movff	postdec2,??_LCD_ButtonDraw+3
 15244  000ED2  51C6               	movf	??_LCD_ButtonDraw& (0+255),w,b
 15245  000ED4  25C8               	addwf	(??_LCD_ButtonDraw+2)& (0+255),w,b
 15246  000ED6  6FDB               	movwf	LCD_ButtonDraw@y2& (0+255),b
 15247  000ED8  51C7               	movf	(??_LCD_ButtonDraw+1)& (0+255),w,b
 15248  000EDA  21C9               	addwfc	(??_LCD_ButtonDraw+3)& (0+255),w,b
 15249  000EDC  6FDC               	movwf	(LCD_ButtonDraw@y2+1)& (0+255),b
 15250                           
 15251                           ; BSR set to: 0
 15252                           ;libraries/lcd_highlevel.c: 474:   if(button->bgColor != button->txtColor)
 15253  000EDE  EE20 F008          	lfsr	2,8
 15254  000EE2  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15255  000EE4  26D9               	addwf	fsr2l,f,c
 15256  000EE6  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15257  000EE8  22DA               	addwfc	fsr2h,f,c
 15258  000EEA  EE10 F00A          	lfsr	1,10
 15259  000EEE  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15260  000EF0  26E1               	addwf	fsr1l,f,c
 15261  000EF2  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15262  000EF4  22E2               	addwfc	fsr1h,f,c
 15263  000EF6  50DE               	movf	postinc2,w,c
 15264  000EF8  18E6               	xorwf	postinc1,w,c
 15265  000EFA  E104               	bnz	u6350
 15266  000EFC  50DE               	movf	postinc2,w,c
 15267  000EFE  18E6               	xorwf	postinc1,w,c
 15268  000F00  B4D8               	btfsc	status,2,c
 15269  000F02  D03C               	goto	l8640
 15270  000F04                     u6350:
 15271                           
 15272                           ; BSR set to: 0
 15273                           ;libraries/lcd_highlevel.c: 475:   {;libraries/lcd_highlevel.c: 476:     LCD_DrawRect(x1
      +                          , y1, x2, y2, 1, button->bgColor);
 15274  000F04  C0D5  F012         	movff	LCD_ButtonDraw@x1,LCD_DrawRect@posX1
 15275  000F08  C0D6  F013         	movff	LCD_ButtonDraw@x1+1,LCD_DrawRect@posX1+1
 15276  000F0C  C0D9  F014         	movff	LCD_ButtonDraw@y1,LCD_DrawRect@posY1
 15277  000F10  C0DA  F015         	movff	LCD_ButtonDraw@y1+1,LCD_DrawRect@posY1+1
 15278  000F14  C0D7  F016         	movff	LCD_ButtonDraw@x2,LCD_DrawRect@posX2
 15279  000F18  C0D8  F017         	movff	LCD_ButtonDraw@x2+1,LCD_DrawRect@posX2+1
 15280  000F1C  C0DB  F018         	movff	LCD_ButtonDraw@y2,LCD_DrawRect@posY2
 15281  000F20  C0DC  F019         	movff	LCD_ButtonDraw@y2+1,LCD_DrawRect@posY2+1
 15282  000F24  0E01               	movlw	1
 15283  000F26  6E1A               	movwf	LCD_DrawRect@fill^0,c
 15284  000F28  EE20 F00A          	lfsr	2,10
 15285  000F2C  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15286  000F2E  26D9               	addwf	fsr2l,f,c
 15287  000F30  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15288  000F32  22DA               	addwfc	fsr2h,f,c
 15289  000F34  CFDE F01B          	movff	postinc2,LCD_DrawRect@color
 15290  000F38  CFDD F01C          	movff	postdec2,LCD_DrawRect@color+1
 15291  000F3C  EC36  F013         	call	_LCD_DrawRect	;wreg free
 15292                           
 15293                           ;libraries/lcd_highlevel.c: 477:     LCD_DrawRect(x1, y1, x2, y2, 0, button->txtColor);
 15294  000F40  C0D5  F012         	movff	LCD_ButtonDraw@x1,LCD_DrawRect@posX1
 15295  000F44  C0D6  F013         	movff	LCD_ButtonDraw@x1+1,LCD_DrawRect@posX1+1
 15296  000F48  C0D9  F014         	movff	LCD_ButtonDraw@y1,LCD_DrawRect@posY1
 15297  000F4C  C0DA  F015         	movff	LCD_ButtonDraw@y1+1,LCD_DrawRect@posY1+1
 15298  000F50  C0D7  F016         	movff	LCD_ButtonDraw@x2,LCD_DrawRect@posX2
 15299  000F54  C0D8  F017         	movff	LCD_ButtonDraw@x2+1,LCD_DrawRect@posX2+1
 15300  000F58  C0DB  F018         	movff	LCD_ButtonDraw@y2,LCD_DrawRect@posY2
 15301  000F5C  C0DC  F019         	movff	LCD_ButtonDraw@y2+1,LCD_DrawRect@posY2+1
 15302  000F60  0E00               	movlw	0
 15303  000F62  6E1A               	movwf	LCD_DrawRect@fill^0,c
 15304  000F64  EE20 F008          	lfsr	2,8
 15305  000F68  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15306  000F6A  26D9               	addwf	fsr2l,f,c
 15307  000F6C  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15308  000F6E  22DA               	addwfc	fsr2h,f,c
 15309  000F70  CFDE F01B          	movff	postinc2,LCD_DrawRect@color
 15310  000F74  CFDD F01C          	movff	postdec2,LCD_DrawRect@color+1
 15311  000F78  EC36  F013         	call	_LCD_DrawRect	;wreg free
 15312  000F7C                     l8640:
 15313                           
 15314                           ;libraries/lcd_highlevel.c: 482:   if((button->text[0] == 'B')&&(button->text[1] == 'M')
      +                          )
 15315  000F7C  EE20 F00C          	lfsr	2,12
 15316  000F80  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15317  000F82  26D9               	addwf	fsr2l,f,c
 15318  000F84  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15319  000F86  22DA               	addwfc	fsr2h,f,c
 15320  000F88  CFDE FFF6          	movff	postinc2,tblptrl
 15321  000F8C  CFDD FFF7          	movff	postdec2,tblptrh
 15322  000F90                     	if	0	;tblptru may be non-zero
 15323  000F90                     	endif
 15324  000F90                     	if	0	;tblptru may be non-zero
 15325  000F90                     	endif
 15326  000F90  0008               	tblrd		*
 15327  000F92  50F5               	movf	tablat,w,c
 15328  000F94  0A42               	xorlw	66
 15329  000F96  A4D8               	btfss	status,2,c
 15330  000F98  D0AB               	goto	l8652
 15331  000F9A  EE20 F00C          	lfsr	2,12
 15332  000F9E  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15333  000FA0  26D9               	addwf	fsr2l,f,c
 15334  000FA2  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15335  000FA4  22DA               	addwfc	fsr2h,f,c
 15336  000FA6  CFDE F0C6          	movff	postinc2,??_LCD_ButtonDraw
 15337  000FAA  CFDD F0C7          	movff	postdec2,??_LCD_ButtonDraw+1
 15338  000FAE  0E01               	movlw	1
 15339  000FB0  0100               	movlb	0	; () banked
 15340  000FB2  27C6               	addwf	??_LCD_ButtonDraw& (0+255),f,b
 15341  000FB4  0E00               	movlw	0
 15342  000FB6  23C7               	addwfc	(??_LCD_ButtonDraw+1)& (0+255),f,b
 15343  000FB8  C0C6  FFF6         	movff	??_LCD_ButtonDraw,tblptrl
 15344  000FBC  C0C7  FFF7         	movff	??_LCD_ButtonDraw+1,tblptrh
 15345  000FC0                     	if	0	;tblptru may be non-zero
 15346  000FC0                     	endif
 15347  000FC0                     	if	0	;tblptru may be non-zero
 15348  000FC0                     	endif
 15349  000FC0  0008               	tblrd		*
 15350  000FC2  50F5               	movf	tablat,w,c
 15351  000FC4  0A4D               	xorlw	77
 15352  000FC6  A4D8               	btfss	status,2,c
 15353  000FC8  D093               	goto	l8652
 15354                           
 15355                           ; BSR set to: 0
 15356                           ;libraries/lcd_highlevel.c: 483:   {;libraries/lcd_highlevel.c: 484:     bmpPtr = (BMP_S
      +                          TRUCT *)button->text;
 15357  000FCA  EE20 F00C          	lfsr	2,12
 15358  000FCE  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15359  000FD0  26D9               	addwf	fsr2l,f,c
 15360  000FD2  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15361  000FD4  22DA               	addwfc	fsr2h,f,c
 15362  000FD6  CFDE F0E2          	movff	postinc2,LCD_ButtonDraw@bmpPtr
 15363  000FDA  CFDD F0E3          	movff	postdec2,LCD_ButtonDraw@bmpPtr+1
 15364                           
 15365                           ; BSR set to: 0
 15366                           ;libraries/lcd_highlevel.c: 485:     yText = button->height / 2 + button->posY - (bmpPtr
      +                          ->biHeight / 2);
 15367  000FDE  EE20 F002          	lfsr	2,2
 15368  000FE2  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15369  000FE4  26D9               	addwf	fsr2l,f,c
 15370  000FE6  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15371  000FE8  22DA               	addwfc	fsr2h,f,c
 15372  000FEA  CFDE F0C6          	movff	postinc2,??_LCD_ButtonDraw
 15373  000FEE  CFDD F0C7          	movff	postdec2,??_LCD_ButtonDraw+1
 15374  000FF2  0E16               	movlw	22
 15375  000FF4  25E2               	addwf	LCD_ButtonDraw@bmpPtr& (0+255),w,b
 15376  000FF6  6FC8               	movwf	(??_LCD_ButtonDraw+2)& (0+255),b
 15377  000FF8  0E00               	movlw	0
 15378  000FFA  21E3               	addwfc	(LCD_ButtonDraw@bmpPtr+1)& (0+255),w,b
 15379  000FFC  6FC9               	movwf	(??_LCD_ButtonDraw+3)& (0+255),b
 15380  000FFE  C0C8  FFF6         	movff	??_LCD_ButtonDraw+2,tblptrl
 15381  001002  C0C9  FFF7         	movff	??_LCD_ButtonDraw+3,tblptrh
 15382  001006                     	if	0	;tblptru may be non-zero
 15383  001006                     	endif
 15384  001006                     	if	0	;tblptru may be non-zero
 15385  001006                     	endif
 15386  001006  0009               	tblrd		*+
 15387  001008  CFF5 F0CA          	movff	tablat,??_LCD_ButtonDraw+4
 15388  00100C  0009               	tblrd		*+
 15389  00100E  CFF5 F0CB          	movff	tablat,??_LCD_ButtonDraw+5
 15390  001012  0009               	tblrd		*+
 15391  001014  CFF5 F0CC          	movff	tablat,??_LCD_ButtonDraw+6
 15392  001018  0009               	tblrd		*+
 15393  00101A  CFF5 F0CD          	movff	tablat,??_LCD_ButtonDraw+7
 15394  00101E  90D8               	bcf	status,0,c
 15395  001020  33CD               	rrcf	(??_LCD_ButtonDraw+7)& (0+255),f,b
 15396  001022  33CC               	rrcf	(??_LCD_ButtonDraw+6)& (0+255),f,b
 15397  001024  33CB               	rrcf	(??_LCD_ButtonDraw+5)& (0+255),f,b
 15398  001026  33CA               	rrcf	(??_LCD_ButtonDraw+4)& (0+255),f,b
 15399  001028  EE20 F006          	lfsr	2,6
 15400  00102C  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15401  00102E  26D9               	addwf	fsr2l,f,c
 15402  001030  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15403  001032  22DA               	addwfc	fsr2h,f,c
 15404  001034  CFDE F0CE          	movff	postinc2,??_LCD_ButtonDraw+8
 15405  001038  CFDD F0CF          	movff	postdec2,??_LCD_ButtonDraw+9
 15406  00103C  90D8               	bcf	status,0,c
 15407  00103E  31CF               	rrcf	(??_LCD_ButtonDraw+9)& (0+255),w,b
 15408  001040  6FD1               	movwf	(??_LCD_ButtonDraw+11)& (0+255),b
 15409  001042  31CE               	rrcf	(??_LCD_ButtonDraw+8)& (0+255),w,b
 15410  001044  6FD0               	movwf	(??_LCD_ButtonDraw+10)& (0+255),b
 15411  001046  51CA               	movf	(??_LCD_ButtonDraw+4)& (0+255),w,b
 15412  001048  5FD0               	subwf	(??_LCD_ButtonDraw+10)& (0+255),f,b
 15413  00104A  51CB               	movf	(??_LCD_ButtonDraw+5)& (0+255),w,b
 15414  00104C  5BD1               	subwfb	(??_LCD_ButtonDraw+11)& (0+255),f,b
 15415  00104E  51C6               	movf	??_LCD_ButtonDraw& (0+255),w,b
 15416  001050  25D0               	addwf	(??_LCD_ButtonDraw+10)& (0+255),w,b
 15417  001052  6FDF               	movwf	LCD_ButtonDraw@yText& (0+255),b
 15418  001054  51C7               	movf	(??_LCD_ButtonDraw+1)& (0+255),w,b
 15419  001056  21D1               	addwfc	(??_LCD_ButtonDraw+11)& (0+255),w,b
 15420  001058  6FE0               	movwf	(LCD_ButtonDraw@yText+1)& (0+255),b
 15421                           
 15422                           ; BSR set to: 0
 15423                           ;libraries/lcd_highlevel.c: 486:     xText = button->width / 2 + button->posX - (bmpPtr-
      +                          >biWidth / 2);
 15424  00105A  C042  FFD9         	movff	LCD_ButtonDraw@button,fsr2l
 15425  00105E  C043  FFDA         	movff	LCD_ButtonDraw@button+1,fsr2h
 15426  001062  CFDE F0C6          	movff	postinc2,??_LCD_ButtonDraw
 15427  001066  CFDD F0C7          	movff	postdec2,??_LCD_ButtonDraw+1
 15428  00106A  0E12               	movlw	18
 15429  00106C  25E2               	addwf	LCD_ButtonDraw@bmpPtr& (0+255),w,b
 15430  00106E  6FC8               	movwf	(??_LCD_ButtonDraw+2)& (0+255),b
 15431  001070  0E00               	movlw	0
 15432  001072  21E3               	addwfc	(LCD_ButtonDraw@bmpPtr+1)& (0+255),w,b
 15433  001074  6FC9               	movwf	(??_LCD_ButtonDraw+3)& (0+255),b
 15434  001076  C0C8  FFF6         	movff	??_LCD_ButtonDraw+2,tblptrl
 15435  00107A  C0C9  FFF7         	movff	??_LCD_ButtonDraw+3,tblptrh
 15436  00107E                     	if	0	;tblptru may be non-zero
 15437  00107E                     	endif
 15438  00107E                     	if	0	;tblptru may be non-zero
 15439  00107E                     	endif
 15440  00107E  0009               	tblrd		*+
 15441  001080  CFF5 F0CA          	movff	tablat,??_LCD_ButtonDraw+4
 15442  001084  0009               	tblrd		*+
 15443  001086  CFF5 F0CB          	movff	tablat,??_LCD_ButtonDraw+5
 15444  00108A  0009               	tblrd		*+
 15445  00108C  CFF5 F0CC          	movff	tablat,??_LCD_ButtonDraw+6
 15446  001090  0009               	tblrd		*+
 15447  001092  CFF5 F0CD          	movff	tablat,??_LCD_ButtonDraw+7
 15448  001096  90D8               	bcf	status,0,c
 15449  001098  33CD               	rrcf	(??_LCD_ButtonDraw+7)& (0+255),f,b
 15450  00109A  33CC               	rrcf	(??_LCD_ButtonDraw+6)& (0+255),f,b
 15451  00109C  33CB               	rrcf	(??_LCD_ButtonDraw+5)& (0+255),f,b
 15452  00109E  33CA               	rrcf	(??_LCD_ButtonDraw+4)& (0+255),f,b
 15453  0010A0  EE20 F004          	lfsr	2,4
 15454  0010A4  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15455  0010A6  26D9               	addwf	fsr2l,f,c
 15456  0010A8  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15457  0010AA  22DA               	addwfc	fsr2h,f,c
 15458  0010AC  CFDE F0CE          	movff	postinc2,??_LCD_ButtonDraw+8
 15459  0010B0  CFDD F0CF          	movff	postdec2,??_LCD_ButtonDraw+9
 15460  0010B4  90D8               	bcf	status,0,c
 15461  0010B6  31CF               	rrcf	(??_LCD_ButtonDraw+9)& (0+255),w,b
 15462  0010B8  6FD1               	movwf	(??_LCD_ButtonDraw+11)& (0+255),b
 15463  0010BA  31CE               	rrcf	(??_LCD_ButtonDraw+8)& (0+255),w,b
 15464  0010BC  6FD0               	movwf	(??_LCD_ButtonDraw+10)& (0+255),b
 15465  0010BE  51CA               	movf	(??_LCD_ButtonDraw+4)& (0+255),w,b
 15466  0010C0  5FD0               	subwf	(??_LCD_ButtonDraw+10)& (0+255),f,b
 15467  0010C2  51CB               	movf	(??_LCD_ButtonDraw+5)& (0+255),w,b
 15468  0010C4  5BD1               	subwfb	(??_LCD_ButtonDraw+11)& (0+255),f,b
 15469  0010C6  51C6               	movf	??_LCD_ButtonDraw& (0+255),w,b
 15470  0010C8  25D0               	addwf	(??_LCD_ButtonDraw+10)& (0+255),w,b
 15471  0010CA  6FDD               	movwf	LCD_ButtonDraw@xText& (0+255),b
 15472  0010CC  51C7               	movf	(??_LCD_ButtonDraw+1)& (0+255),w,b
 15473  0010CE  21D1               	addwfc	(??_LCD_ButtonDraw+11)& (0+255),w,b
 15474  0010D0  6FDE               	movwf	(LCD_ButtonDraw@xText+1)& (0+255),b
 15475                           
 15476                           ; BSR set to: 0
 15477                           ;libraries/lcd_highlevel.c: 487:     LCD_Bitmap((const uint8_t *)bmpPtr,xText,yText);
 15478  0010D2  C0E2  F027         	movff	LCD_ButtonDraw@bmpPtr,LCD_Bitmap@bmpPtr
 15479  0010D6  C0E3  F028         	movff	LCD_ButtonDraw@bmpPtr+1,LCD_Bitmap@bmpPtr+1
 15480  0010DA  C0DD  F029         	movff	LCD_ButtonDraw@xText,LCD_Bitmap@posX
 15481  0010DE  C0DE  F02A         	movff	LCD_ButtonDraw@xText+1,LCD_Bitmap@posX+1
 15482  0010E2  C0DF  F02B         	movff	LCD_ButtonDraw@yText,LCD_Bitmap@posY
 15483  0010E6  C0E0  F02C         	movff	LCD_ButtonDraw@yText+1,LCD_Bitmap@posY+1
 15484  0010EA  EC8D  F004         	call	_LCD_Bitmap	;wreg free
 15485                           
 15486                           ;libraries/lcd_highlevel.c: 488:   }
 15487  0010EE  D102               	goto	l8668
 15488  0010F0                     l8652:
 15489                           
 15490                           ;libraries/lcd_highlevel.c: 493:   {;libraries/lcd_highlevel.c: 494:     yText = button-
      +                          >height / 2 + button->posY - (button->font->height / 2);
 15491  0010F0  EE20 F002          	lfsr	2,2
 15492  0010F4  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15493  0010F6  26D9               	addwf	fsr2l,f,c
 15494  0010F8  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15495  0010FA  22DA               	addwfc	fsr2h,f,c
 15496  0010FC  CFDE F0C6          	movff	postinc2,??_LCD_ButtonDraw
 15497  001100  CFDD F0C7          	movff	postdec2,??_LCD_ButtonDraw+1
 15498  001104  EE20 F006          	lfsr	2,6
 15499  001108  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15500  00110A  26D9               	addwf	fsr2l,f,c
 15501  00110C  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15502  00110E  22DA               	addwfc	fsr2h,f,c
 15503  001110  CFDE F0C8          	movff	postinc2,??_LCD_ButtonDraw+2
 15504  001114  CFDD F0C9          	movff	postdec2,??_LCD_ButtonDraw+3
 15505  001118  90D8               	bcf	status,0,c
 15506  00111A  0100               	movlb	0	; () banked
 15507  00111C  31C9               	rrcf	(??_LCD_ButtonDraw+3)& (0+255),w,b
 15508  00111E  6FCB               	movwf	(??_LCD_ButtonDraw+5)& (0+255),b
 15509  001120  31C8               	rrcf	(??_LCD_ButtonDraw+2)& (0+255),w,b
 15510  001122  6FCA               	movwf	(??_LCD_ButtonDraw+4)& (0+255),b
 15511  001124  EE20 F00E          	lfsr	2,14
 15512  001128  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15513  00112A  26D9               	addwf	fsr2l,f,c
 15514  00112C  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15515  00112E  22DA               	addwfc	fsr2h,f,c
 15516  001130  CFDE FFF6          	movff	postinc2,tblptrl
 15517  001134  CFDD FFF7          	movff	postdec2,tblptrh
 15518  001138                     	if	0	;tblptru may be non-zero
 15519  001138                     	endif
 15520  001138                     	if	0	;tblptru may be non-zero
 15521  001138                     	endif
 15522  001138  0008               	tblrd		*
 15523  00113A  CFF5 F0CC          	movff	tablat,??_LCD_ButtonDraw+6
 15524  00113E  90D8               	bcf	status,0,c
 15525  001140  33CC               	rrcf	(??_LCD_ButtonDraw+6)& (0+255),f,b
 15526  001142  51CC               	movf	(??_LCD_ButtonDraw+6)& (0+255),w,b
 15527  001144  5FCA               	subwf	(??_LCD_ButtonDraw+4)& (0+255),f,b
 15528  001146  0E00               	movlw	0
 15529  001148  5BCB               	subwfb	(??_LCD_ButtonDraw+5)& (0+255),f,b
 15530  00114A  51C6               	movf	??_LCD_ButtonDraw& (0+255),w,b
 15531  00114C  25CA               	addwf	(??_LCD_ButtonDraw+4)& (0+255),w,b
 15532  00114E  6FDF               	movwf	LCD_ButtonDraw@yText& (0+255),b
 15533  001150  51C7               	movf	(??_LCD_ButtonDraw+1)& (0+255),w,b
 15534  001152  21CB               	addwfc	(??_LCD_ButtonDraw+5)& (0+255),w,b
 15535  001154  6FE0               	movwf	(LCD_ButtonDraw@yText+1)& (0+255),b
 15536                           
 15537                           ; BSR set to: 0
 15538                           ;libraries/lcd_highlevel.c: 495:     for(i=0;i<strlen(button->text);i++)
 15539  001156  0E00               	movlw	0
 15540  001158  6FE1               	movwf	LCD_ButtonDraw@i& (0+255),b
 15541  00115A  D05C               	goto	l8662
 15542  00115C                     l8656:
 15543                           
 15544                           ; BSR set to: 0
 15545                           ;libraries/lcd_highlevel.c: 496:     {;libraries/lcd_highlevel.c: 497:       tempChar = 
      +                          (button->text[i]) - button->font->start_char;
 15546  00115C  EE20 F00E          	lfsr	2,14
 15547  001160  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15548  001162  26D9               	addwf	fsr2l,f,c
 15549  001164  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15550  001166  22DA               	addwfc	fsr2h,f,c
 15551  001168  CFDE F0C6          	movff	postinc2,??_LCD_ButtonDraw
 15552  00116C  CFDD F0C7          	movff	postdec2,??_LCD_ButtonDraw+1
 15553  001170  0E01               	movlw	1
 15554  001172  27C6               	addwf	??_LCD_ButtonDraw& (0+255),f,b
 15555  001174  0E00               	movlw	0
 15556  001176  23C7               	addwfc	(??_LCD_ButtonDraw+1)& (0+255),f,b
 15557  001178  C0C6  FFF6         	movff	??_LCD_ButtonDraw,tblptrl
 15558  00117C  C0C7  FFF7         	movff	??_LCD_ButtonDraw+1,tblptrh
 15559  001180                     	if	0	;tblptru may be non-zero
 15560  001180                     	endif
 15561  001180                     	if	0	;tblptru may be non-zero
 15562  001180                     	endif
 15563  001180  0008               	tblrd		*
 15564  001182  CFF5 F0C8          	movff	tablat,??_LCD_ButtonDraw+2
 15565  001186  EE20 F00C          	lfsr	2,12
 15566  00118A  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15567  00118C  26D9               	addwf	fsr2l,f,c
 15568  00118E  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15569  001190  22DA               	addwfc	fsr2h,f,c
 15570  001192  CFDE F0C9          	movff	postinc2,??_LCD_ButtonDraw+3
 15571  001196  CFDD F0CA          	movff	postdec2,??_LCD_ButtonDraw+4
 15572  00119A  51E1               	movf	LCD_ButtonDraw@i& (0+255),w,b
 15573  00119C  27C9               	addwf	(??_LCD_ButtonDraw+3)& (0+255),f,b
 15574  00119E  0E00               	movlw	0
 15575  0011A0  23CA               	addwfc	(??_LCD_ButtonDraw+4)& (0+255),f,b
 15576  0011A2  C0C9  FFF6         	movff	??_LCD_ButtonDraw+3,tblptrl
 15577  0011A6  C0CA  FFF7         	movff	??_LCD_ButtonDraw+4,tblptrh
 15578  0011AA                     	if	0	;tblptru may be non-zero
 15579  0011AA                     	endif
 15580  0011AA                     	if	0	;tblptru may be non-zero
 15581  0011AA                     	endif
 15582  0011AA  0008               	tblrd		*
 15583  0011AC  CFF5 F0CB          	movff	tablat,??_LCD_ButtonDraw+5
 15584  0011B0  51C8               	movf	(??_LCD_ButtonDraw+2)& (0+255),w,b
 15585  0011B2  5DCB               	subwf	(??_LCD_ButtonDraw+5)& (0+255),w,b
 15586  0011B4  6FD2               	movwf	LCD_ButtonDraw@tempChar& (0+255),b
 15587                           
 15588                           ; BSR set to: 0
 15589                           ;libraries/lcd_highlevel.c: 498:       width += button->font->descriptor[tempChar].width
      +                          +2;
 15590  0011B6  51D2               	movf	LCD_ButtonDraw@tempChar& (0+255),w,b
 15591  0011B8  0D03               	mullw	3
 15592  0011BA  EE20 F00E          	lfsr	2,14
 15593  0011BE  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15594  0011C0  26D9               	addwf	fsr2l,f,c
 15595  0011C2  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15596  0011C4  22DA               	addwfc	fsr2h,f,c
 15597  0011C6  CFDE F0C6          	movff	postinc2,??_LCD_ButtonDraw
 15598  0011CA  CFDD F0C7          	movff	postdec2,??_LCD_ButtonDraw+1
 15599  0011CE  0E03               	movlw	3
 15600  0011D0  27C6               	addwf	??_LCD_ButtonDraw& (0+255),f,b
 15601  0011D2  0E00               	movlw	0
 15602  0011D4  23C7               	addwfc	(??_LCD_ButtonDraw+1)& (0+255),f,b
 15603  0011D6  C0C6  FFF6         	movff	??_LCD_ButtonDraw,tblptrl
 15604  0011DA  C0C7  FFF7         	movff	??_LCD_ButtonDraw+1,tblptrh
 15605  0011DE                     	if	0	;tblptru may be non-zero
 15606  0011DE                     	endif
 15607  0011DE                     	if	0	;tblptru may be non-zero
 15608  0011DE                     	endif
 15609  0011DE  0009               	tblrd		*+
 15610  0011E0  CFF5 F0C8          	movff	tablat,??_LCD_ButtonDraw+2
 15611  0011E4  0009               	tblrd		*+
 15612  0011E6  CFF5 F0C9          	movff	tablat,??_LCD_ButtonDraw+3
 15613  0011EA  50F3               	movf	243,w,c
 15614  0011EC  27C8               	addwf	(??_LCD_ButtonDraw+2)& (0+255),f,b
 15615  0011EE  50F4               	movf	244,w,c
 15616  0011F0  23C9               	addwfc	(??_LCD_ButtonDraw+3)& (0+255),f,b
 15617  0011F2  C0C8  FFF6         	movff	??_LCD_ButtonDraw+2,tblptrl
 15618  0011F6  C0C9  FFF7         	movff	??_LCD_ButtonDraw+3,tblptrh
 15619  0011FA                     	if	0	;tblptru may be non-zero
 15620  0011FA                     	endif
 15621  0011FA                     	if	0	;tblptru may be non-zero
 15622  0011FA                     	endif
 15623  0011FA  0008               	tblrd		*
 15624  0011FC  50F5               	movf	tablat,w,c
 15625  0011FE  6FCA               	movwf	(??_LCD_ButtonDraw+4)& (0+255),b
 15626  001200  6BCB               	clrf	(??_LCD_ButtonDraw+5)& (0+255),b
 15627  001202  0E02               	movlw	2
 15628  001204  27CA               	addwf	(??_LCD_ButtonDraw+4)& (0+255),f,b
 15629  001206  0E00               	movlw	0
 15630  001208  23CB               	addwfc	(??_LCD_ButtonDraw+5)& (0+255),f,b
 15631  00120A  51CA               	movf	(??_LCD_ButtonDraw+4)& (0+255),w,b
 15632  00120C  27D3               	addwf	LCD_ButtonDraw@width& (0+255),f,b
 15633  00120E  51CB               	movf	(??_LCD_ButtonDraw+5)& (0+255),w,b
 15634  001210  23D4               	addwfc	(LCD_ButtonDraw@width+1)& (0+255),f,b
 15635                           
 15636                           ; BSR set to: 0
 15637                           ;libraries/lcd_highlevel.c: 499:     }
 15638  001212  2BE1               	incf	LCD_ButtonDraw@i& (0+255),f,b
 15639  001214                     l8662:
 15640                           
 15641                           ; BSR set to: 0
 15642  001214  EE20 F00C          	lfsr	2,12
 15643  001218  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15644  00121A  26D9               	addwf	fsr2l,f,c
 15645  00121C  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15646  00121E  22DA               	addwfc	fsr2h,f,c
 15647  001220  CFDE F012          	movff	postinc2,strlen@s
 15648  001224  CFDD F013          	movff	postdec2,strlen@s+1
 15649  001228  EC0A  F02B         	call	_strlen	;wreg free
 15650  00122C  0100               	movlb	0	; () banked
 15651  00122E  51E1               	movf	LCD_ButtonDraw@i& (0+255),w,b
 15652  001230  6FC6               	movwf	??_LCD_ButtonDraw& (0+255),b
 15653  001232  6BC7               	clrf	(??_LCD_ButtonDraw+1)& (0+255),b
 15654  001234  5012               	movf	?_strlen^0,w,c
 15655  001236  5DC6               	subwf	??_LCD_ButtonDraw& (0+255),w,b
 15656  001238  5013               	movf	(?_strlen+1)^0,w,c
 15657  00123A  59C7               	subwfb	(??_LCD_ButtonDraw+1)& (0+255),w,b
 15658  00123C  A0D8               	btfss	status,0,c
 15659  00123E  D78E               	goto	l8656
 15660                           
 15661                           ; BSR set to: 0
 15662                           ;libraries/lcd_highlevel.c: 500:     xText = button->width / 2 + button->posX - (width /
      +                           2);
 15663  001240  C042  FFD9         	movff	LCD_ButtonDraw@button,fsr2l
 15664  001244  C043  FFDA         	movff	LCD_ButtonDraw@button+1,fsr2h
 15665  001248  CFDE F0C6          	movff	postinc2,??_LCD_ButtonDraw
 15666  00124C  CFDD F0C7          	movff	postdec2,??_LCD_ButtonDraw+1
 15667  001250  90D8               	bcf	status,0,c
 15668  001252  31D4               	rrcf	(LCD_ButtonDraw@width+1)& (0+255),w,b
 15669  001254  6FC9               	movwf	(??_LCD_ButtonDraw+3)& (0+255),b
 15670  001256  31D3               	rrcf	LCD_ButtonDraw@width& (0+255),w,b
 15671  001258  6FC8               	movwf	(??_LCD_ButtonDraw+2)& (0+255),b
 15672  00125A  EE20 F004          	lfsr	2,4
 15673  00125E  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15674  001260  26D9               	addwf	fsr2l,f,c
 15675  001262  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15676  001264  22DA               	addwfc	fsr2h,f,c
 15677  001266  CFDE F0CA          	movff	postinc2,??_LCD_ButtonDraw+4
 15678  00126A  CFDD F0CB          	movff	postdec2,??_LCD_ButtonDraw+5
 15679  00126E  90D8               	bcf	status,0,c
 15680  001270  31CB               	rrcf	(??_LCD_ButtonDraw+5)& (0+255),w,b
 15681  001272  6FCD               	movwf	(??_LCD_ButtonDraw+7)& (0+255),b
 15682  001274  31CA               	rrcf	(??_LCD_ButtonDraw+4)& (0+255),w,b
 15683  001276  6FCC               	movwf	(??_LCD_ButtonDraw+6)& (0+255),b
 15684  001278  51C8               	movf	(??_LCD_ButtonDraw+2)& (0+255),w,b
 15685  00127A  5FCC               	subwf	(??_LCD_ButtonDraw+6)& (0+255),f,b
 15686  00127C  51C9               	movf	(??_LCD_ButtonDraw+3)& (0+255),w,b
 15687  00127E  5BCD               	subwfb	(??_LCD_ButtonDraw+7)& (0+255),f,b
 15688  001280  51C6               	movf	??_LCD_ButtonDraw& (0+255),w,b
 15689  001282  25CC               	addwf	(??_LCD_ButtonDraw+6)& (0+255),w,b
 15690  001284  6FDD               	movwf	LCD_ButtonDraw@xText& (0+255),b
 15691  001286  51C7               	movf	(??_LCD_ButtonDraw+1)& (0+255),w,b
 15692  001288  21CD               	addwfc	(??_LCD_ButtonDraw+7)& (0+255),w,b
 15693  00128A  6FDE               	movwf	(LCD_ButtonDraw@xText+1)& (0+255),b
 15694                           
 15695                           ; BSR set to: 0
 15696                           ;libraries/lcd_highlevel.c: 501:     LCD_DrawText(button->text, button->font,A_LEFT,
 15697  00128C  EE20 F00C          	lfsr	2,12
 15698  001290  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15699  001292  26D9               	addwf	fsr2l,f,c
 15700  001294  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15701  001296  22DA               	addwfc	fsr2h,f,c
 15702  001298  CFDE F020          	movff	postinc2,LCD_DrawText@msg
 15703  00129C  CFDD F021          	movff	postdec2,LCD_DrawText@msg+1
 15704  0012A0  EE20 F00E          	lfsr	2,14
 15705  0012A4  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15706  0012A6  26D9               	addwf	fsr2l,f,c
 15707  0012A8  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15708  0012AA  22DA               	addwfc	fsr2h,f,c
 15709  0012AC  CFDE F022          	movff	postinc2,LCD_DrawText@font
 15710  0012B0  CFDD F023          	movff	postdec2,LCD_DrawText@font+1
 15711  0012B4  0E00               	movlw	0
 15712  0012B6  6E24               	movwf	LCD_DrawText@align^0,c
 15713  0012B8  C0DD  F025         	movff	LCD_ButtonDraw@xText,LCD_DrawText@posX
 15714  0012BC  C0DE  F026         	movff	LCD_ButtonDraw@xText+1,LCD_DrawText@posX+1
 15715  0012C0  C0DF  F027         	movff	LCD_ButtonDraw@yText,LCD_DrawText@posY
 15716  0012C4  C0E0  F028         	movff	LCD_ButtonDraw@yText+1,LCD_DrawText@posY+1
 15717  0012C8  EE20 F008          	lfsr	2,8
 15718  0012CC  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15719  0012CE  26D9               	addwf	fsr2l,f,c
 15720  0012D0  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15721  0012D2  22DA               	addwfc	fsr2h,f,c
 15722  0012D4  CFDE F029          	movff	postinc2,LCD_DrawText@color
 15723  0012D8  CFDD F02A          	movff	postdec2,LCD_DrawText@color+1
 15724  0012DC  EE20 F00A          	lfsr	2,10
 15725  0012E0  5042               	movf	LCD_ButtonDraw@button^0,w,c
 15726  0012E2  26D9               	addwf	fsr2l,f,c
 15727  0012E4  5043               	movf	(LCD_ButtonDraw@button+1)^0,w,c
 15728  0012E6  22DA               	addwfc	fsr2h,f,c
 15729  0012E8  CFDE F02B          	movff	postinc2,LCD_DrawText@bg_color
 15730  0012EC  CFDD F02C          	movff	postdec2,LCD_DrawText@bg_color+1
 15731  0012F0  EC87  F00F         	call	_LCD_DrawText	;wreg free
 15732  0012F4                     l8668:
 15733                           
 15734                           ;libraries/lcd_highlevel.c: 504:   LCD_ButtonUpdate(button);
 15735  0012F4  C042  F025         	movff	LCD_ButtonDraw@button,LCD_ButtonUpdate@button
 15736  0012F8  C043  F026         	movff	LCD_ButtonDraw@button+1,LCD_ButtonUpdate@button+1
 15737  0012FC  EC49  F018         	call	_LCD_ButtonUpdate	;wreg free
 15738  001300  0012               	return		;funcret
 15739  001302                     __end_of_LCD_ButtonDraw:
 15740                           	callstack 0
 15741                           
 15742 ;; *************** function _LCD_DrawText *****************
 15743 ;; Defined at:
 15744 ;;		line 713 in file "libraries/lcd_highlevel.c"
 15745 ;; Parameters:    Size  Location     Type
 15746 ;;  msg             2   31[COMRAM] PTR const unsigned char 
 15747 ;;		 -> g1.str(2), STR_15(13), STR_14(13), STR_13(6), 
 15748 ;;		 -> STR_12(11), STR_11(11), STR_10(8), STR_9(9), 
 15749 ;;		 -> STR_8(2), STR_7(9), STR_6(11), STR_5(9), 
 15750 ;;		 -> STR_4(9), g1(240), STR_1(10), 
 15751 ;;  font            2   33[COMRAM] PTR const struct .
 15752 ;;		 -> arialNarrow_12ptFontInfo(7), 
 15753 ;;  align           1   35[COMRAM] enum E355
 15754 ;;  posX            2   36[COMRAM] unsigned short 
 15755 ;;  posY            2   38[COMRAM] unsigned short 
 15756 ;;  color           2   40[COMRAM] unsigned short 
 15757 ;;  bg_color        2   42[COMRAM] unsigned short 
 15758 ;; Auto vars:     Size  Location     Type
 15759 ;;  posXEnd         2   58[COMRAM] unsigned short 
 15760 ;;  posYEnd         2   56[COMRAM] unsigned short 
 15761 ;;  yOffset         2   52[COMRAM] unsigned short 
 15762 ;;  offset          2   50[COMRAM] unsigned short 
 15763 ;;  width           1   64[COMRAM] unsigned char 
 15764 ;;  x               1   63[COMRAM] unsigned char 
 15765 ;;  tempChar        1   62[COMRAM] char 
 15766 ;;  i               1   61[COMRAM] unsigned char 
 15767 ;;  y               1   60[COMRAM] unsigned char 
 15768 ;;  fontPixel       1   55[COMRAM] unsigned char 
 15769 ;;  fontByte        1   54[COMRAM] unsigned char 
 15770 ;; Return value:  Size  Location     Type
 15771 ;;                  1    wreg      void 
 15772 ;; Registers used:
 15773 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15774 ;; Tracked objects:
 15775 ;;		On entry : 0/0
 15776 ;;		On exit  : 0/0
 15777 ;;		Unchanged: 0/0
 15778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15779 ;;      Params:        13       0       0       0       0       0       0
 15780 ;;      Locals:        15       0       0       0       0       0       0
 15781 ;;      Temps:          6       0       0       0       0       0       0
 15782 ;;      Totals:        34       0       0       0       0       0       0
 15783 ;;Total ram usage:       34 bytes
 15784 ;; Hardware stack levels used: 1
 15785 ;; Hardware stack levels required when called: 5
 15786 ;; This function calls:
 15787 ;;		___awdiv
 15788 ;;		___wmul
 15789 ;;		_strlen
 15790 ;; This function is called by:
 15791 ;;		_Factory_init
 15792 ;;		_Score_draw
 15793 ;;		_Menu_welcomeDraw
 15794 ;;		_Menu_parametersDraw
 15795 ;;		_Menu_endGame
 15796 ;;		_LCD_ButtonDraw
 15797 ;; This function uses a non-reentrant model
 15798 ;;
 15799                           
 15800                           	psect	text70
 15801  001F0E                     __ptext70:
 15802                           	callstack 0
 15803  001F0E                     _LCD_DrawText:
 15804                           	callstack 20
 15805                           
 15806                           ;libraries/lcd_highlevel.c: 713: void LCD_DrawText(const uint8_t * msg,const FONT_INFO *
      +                           font, ALIGN align,;libraries/lcd_highlevel.c: 714:         uint16_t posX, uint16_t posY
      +                          , uint16_t color, uint16_t bg_color);libraries/lcd_highlevel.c: 715: {;libraries/lcd_hig
      +                          hlevel.c: 716:   uint8_t x,y,i;;libraries/lcd_highlevel.c: 717:   int8_t tempChar;;libra
      +                          ries/lcd_highlevel.c: 718:   uint16_t offset;;libraries/lcd_highlevel.c: 719:   uint8_t 
      +                          width=0;
 15807                           
 15808                           ;incstack = 0
 15809  001F0E  0E00               	movlw	0
 15810  001F10  6E41               	movwf	LCD_DrawText@width^0,c
 15811                           
 15812                           ;libraries/lcd_highlevel.c: 720:   uint8_t fontByte,fontPixel;;libraries/lcd_highlevel.c
      +                          : 721:   uint16_t posYEnd, posXEnd, yOffset;;libraries/lcd_highlevel.c: 725:   for(i=0;i
      +                          <strlen(msg);i++)
 15813  001F12  0E00               	movlw	0
 15814  001F14  6E3E               	movwf	LCD_DrawText@i^0,c
 15815  001F16  D04F               	goto	l8470
 15816  001F18                     l8464:
 15817                           
 15818                           ;libraries/lcd_highlevel.c: 726:   {;libraries/lcd_highlevel.c: 727:     tempChar = (msg
      +                          [i]) - font->start_char;
 15819  001F18  0E01               	movlw	1
 15820  001F1A  2422               	addwf	LCD_DrawText@font^0,w,c
 15821  001F1C  6E2D               	movwf	??_LCD_DrawText^0,c
 15822  001F1E  0E00               	movlw	0
 15823  001F20  2023               	addwfc	(LCD_DrawText@font+1)^0,w,c
 15824  001F22  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 15825  001F24  C02D  FFF6         	movff	??_LCD_DrawText,tblptrl
 15826  001F28  C02E  FFF7         	movff	??_LCD_DrawText+1,tblptrh
 15827  001F2C                     	if	0	;tblptru may be non-zero
 15828  001F2C                     	endif
 15829  001F2C                     	if	0	;tblptru may be non-zero
 15830  001F2C                     	endif
 15831  001F2C  0008               	tblrd		*
 15832  001F2E  CFF5 F02F          	movff	tablat,??_LCD_DrawText+2
 15833  001F32  503E               	movf	LCD_DrawText@i^0,w,c
 15834  001F34  2420               	addwf	LCD_DrawText@msg^0,w,c
 15835  001F36  6E30               	movwf	(??_LCD_DrawText+3)^0,c
 15836  001F38  0E00               	movlw	0
 15837  001F3A  2021               	addwfc	(LCD_DrawText@msg+1)^0,w,c
 15838  001F3C  6E31               	movwf	(??_LCD_DrawText+4)^0,c
 15839  001F3E  C030  FFF6         	movff	??_LCD_DrawText+3,tblptrl
 15840  001F42  C031  FFF7         	movff	??_LCD_DrawText+4,tblptrh
 15841  001F46  6AF8               	clrf	tblptru,c
 15842  001F48  0E05               	movlw	(high __ramtop+-1)
 15843  001F4A  64F7               	cpfsgt	tblptrh,c
 15844  001F4C  D003               	bra	u6227
 15845  001F4E  0008               	tblrd		*
 15846  001F50  50F5               	movf	tablat,w,c
 15847  001F52  D005               	bra	u6220
 15848  001F54                     u6227:
 15849  001F54  CFF6 FFE1          	movff	tblptrl,fsr1l
 15850  001F58  CFF7 FFE2          	movff	tblptrh,fsr1h
 15851  001F5C  50E7               	movf	indf1,w,c
 15852  001F5E                     u6220:
 15853  001F5E  6E32               	movwf	(??_LCD_DrawText+5)^0,c
 15854  001F60  502F               	movf	(??_LCD_DrawText+2)^0,w,c
 15855  001F62  5C32               	subwf	(??_LCD_DrawText+5)^0,w,c
 15856  001F64  6E3F               	movwf	LCD_DrawText@tempChar^0,c
 15857                           
 15858                           ;libraries/lcd_highlevel.c: 728:     width += font->descriptor[tempChar].width+2;
 15859  001F66  503F               	movf	LCD_DrawText@tempChar^0,w,c
 15860  001F68  6E1A               	movwf	___wmul@multiplier^0,c
 15861  001F6A  6A1B               	clrf	(___wmul@multiplier+1)^0,c
 15862  001F6C  BE1A               	btfsc	___wmul@multiplier^0,7,c
 15863  001F6E  061B               	decf	(___wmul@multiplier+1)^0,f,c
 15864  001F70  0E00               	movlw	0
 15865  001F72  6E1D               	movwf	(___wmul@multiplicand+1)^0,c
 15866  001F74  0E03               	movlw	3
 15867  001F76  6E1C               	movwf	___wmul@multiplicand^0,c
 15868  001F78  ECA6  F02C         	call	___wmul	;wreg free
 15869  001F7C  0E03               	movlw	3
 15870  001F7E  2422               	addwf	LCD_DrawText@font^0,w,c
 15871  001F80  6E2D               	movwf	??_LCD_DrawText^0,c
 15872  001F82  0E00               	movlw	0
 15873  001F84  2023               	addwfc	(LCD_DrawText@font+1)^0,w,c
 15874  001F86  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 15875  001F88  C02D  FFF6         	movff	??_LCD_DrawText,tblptrl
 15876  001F8C  C02E  FFF7         	movff	??_LCD_DrawText+1,tblptrh
 15877  001F90                     	if	0	;tblptru may be non-zero
 15878  001F90                     	endif
 15879  001F90                     	if	0	;tblptru may be non-zero
 15880  001F90                     	endif
 15881  001F90  0009               	tblrd		*+
 15882  001F92  CFF5 F02F          	movff	tablat,??_LCD_DrawText+2
 15883  001F96  0009               	tblrd		*+
 15884  001F98  CFF5 F030          	movff	tablat,??_LCD_DrawText+3
 15885  001F9C  501A               	movf	?___wmul^0,w,c
 15886  001F9E  262F               	addwf	(??_LCD_DrawText+2)^0,f,c
 15887  001FA0  501B               	movf	(?___wmul+1)^0,w,c
 15888  001FA2  2230               	addwfc	(??_LCD_DrawText+3)^0,f,c
 15889  001FA4  C02F  FFF6         	movff	??_LCD_DrawText+2,tblptrl
 15890  001FA8  C030  FFF7         	movff	??_LCD_DrawText+3,tblptrh
 15891  001FAC                     	if	0	;tblptru may be non-zero
 15892  001FAC                     	endif
 15893  001FAC                     	if	0	;tblptru may be non-zero
 15894  001FAC                     	endif
 15895  001FAC  0008               	tblrd		*
 15896  001FAE  50F5               	movf	tablat,w,c
 15897  001FB0  0F02               	addlw	2
 15898  001FB2  2641               	addwf	LCD_DrawText@width^0,f,c
 15899                           
 15900                           ;libraries/lcd_highlevel.c: 729:   }
 15901  001FB4  2A3E               	incf	LCD_DrawText@i^0,f,c
 15902  001FB6                     l8470:
 15903  001FB6  C020  F012         	movff	LCD_DrawText@msg,strlen@s
 15904  001FBA  C021  F013         	movff	LCD_DrawText@msg+1,strlen@s+1
 15905  001FBE  EC0A  F02B         	call	_strlen	;wreg free
 15906  001FC2  503E               	movf	LCD_DrawText@i^0,w,c
 15907  001FC4  6E2D               	movwf	??_LCD_DrawText^0,c
 15908  001FC6  6A2E               	clrf	(??_LCD_DrawText+1)^0,c
 15909  001FC8  5012               	movf	?_strlen^0,w,c
 15910  001FCA  5C2D               	subwf	??_LCD_DrawText^0,w,c
 15911  001FCC  5013               	movf	(?_strlen+1)^0,w,c
 15912  001FCE  582E               	subwfb	(??_LCD_DrawText+1)^0,w,c
 15913  001FD0  A0D8               	btfss	status,0,c
 15914  001FD2  D7A2               	goto	l8464
 15915                           
 15916                           ;libraries/lcd_highlevel.c: 730:   if(align == A_RIGHT)
 15917  001FD4  0424               	decf	LCD_DrawText@align^0,w,c
 15918  001FD6  A4D8               	btfss	status,2,c
 15919  001FD8  D002               	goto	l8476
 15920                           
 15921                           ;libraries/lcd_highlevel.c: 731:   {;libraries/lcd_highlevel.c: 732:     posX = posX - w
      +                          idth;
 15922  001FDA  5041               	movf	LCD_DrawText@width^0,w,c
 15923  001FDC  D009               	goto	L9
 15924  001FDE                     l8476:
 15925  001FDE  0E02               	movlw	2
 15926  001FE0  1824               	xorwf	LCD_DrawText@align^0,w,c
 15927  001FE2  A4D8               	btfss	status,2,c
 15928  001FE4  D00B               	goto	l8480
 15929                           
 15930                           ;libraries/lcd_highlevel.c: 735:   {;libraries/lcd_highlevel.c: 736:     posX = posX - w
      +                          idth / 2;
 15931  001FE6  C041  F02D         	movff	LCD_DrawText@width,??_LCD_DrawText
 15932  001FEA  90D8               	bcf	status,0,c
 15933  001FEC  322D               	rrcf	??_LCD_DrawText^0,f,c
 15934  001FEE  502D               	movf	??_LCD_DrawText^0,w,c
 15935  001FF0                     L9:
 15936  001FF0  5C25               	subwf	LCD_DrawText@posX^0,w,c
 15937  001FF2  6E25               	movwf	LCD_DrawText@posX^0,c
 15938  001FF4  5026               	movf	(LCD_DrawText@posX+1)^0,w,c
 15939  001FF6  A0D8               	btfss	status,0,c
 15940  001FF8  0426               	decf	(LCD_DrawText@posX+1)^0,w,c
 15941  001FFA  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 15942  001FFC                     l8480:
 15943                           
 15944                           ;libraries/lcd_highlevel.c: 740:   {;libraries/lcd_highlevel.c: 741:     tempChar = (*ms
      +                          g) - font->start_char;
 15945  001FFC  0E01               	movlw	1
 15946  001FFE  2422               	addwf	LCD_DrawText@font^0,w,c
 15947  002000  6E2D               	movwf	??_LCD_DrawText^0,c
 15948  002002  0E00               	movlw	0
 15949  002004  2023               	addwfc	(LCD_DrawText@font+1)^0,w,c
 15950  002006  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 15951  002008  C02D  FFF6         	movff	??_LCD_DrawText,tblptrl
 15952  00200C  C02E  FFF7         	movff	??_LCD_DrawText+1,tblptrh
 15953  002010                     	if	0	;tblptru may be non-zero
 15954  002010                     	endif
 15955  002010                     	if	0	;tblptru may be non-zero
 15956  002010                     	endif
 15957  002010  0008               	tblrd		*
 15958  002012  CFF5 F02F          	movff	tablat,??_LCD_DrawText+2
 15959  002016  C020  FFF6         	movff	LCD_DrawText@msg,tblptrl
 15960  00201A  C021  FFF7         	movff	LCD_DrawText@msg+1,tblptrh
 15961  00201E  6AF8               	clrf	tblptru,c
 15962  002020  0E05               	movlw	(high __ramtop+-1)
 15963  002022  64F7               	cpfsgt	tblptrh,c
 15964  002024  D003               	bra	u6267
 15965  002026  0008               	tblrd		*
 15966  002028  50F5               	movf	tablat,w,c
 15967  00202A  D005               	bra	u6260
 15968  00202C                     u6267:
 15969  00202C  CFF6 FFE1          	movff	tblptrl,fsr1l
 15970  002030  CFF7 FFE2          	movff	tblptrh,fsr1h
 15971  002034  50E7               	movf	indf1,w,c
 15972  002036                     u6260:
 15973  002036  6E30               	movwf	(??_LCD_DrawText+3)^0,c
 15974  002038  502F               	movf	(??_LCD_DrawText+2)^0,w,c
 15975  00203A  5C30               	subwf	(??_LCD_DrawText+3)^0,w,c
 15976  00203C  6E3F               	movwf	LCD_DrawText@tempChar^0,c
 15977                           
 15978                           ;libraries/lcd_highlevel.c: 742:     offset = font->descriptor[tempChar].offset;
 15979  00203E  503F               	movf	LCD_DrawText@tempChar^0,w,c
 15980  002040  6E1A               	movwf	___wmul@multiplier^0,c
 15981  002042  6A1B               	clrf	(___wmul@multiplier+1)^0,c
 15982  002044  BE1A               	btfsc	___wmul@multiplier^0,7,c
 15983  002046  061B               	decf	(___wmul@multiplier+1)^0,f,c
 15984  002048  0E00               	movlw	0
 15985  00204A  6E1D               	movwf	(___wmul@multiplicand+1)^0,c
 15986  00204C  0E03               	movlw	3
 15987  00204E  6E1C               	movwf	___wmul@multiplicand^0,c
 15988  002050  ECA6  F02C         	call	___wmul	;wreg free
 15989  002054  0E03               	movlw	3
 15990  002056  2422               	addwf	LCD_DrawText@font^0,w,c
 15991  002058  6E2D               	movwf	??_LCD_DrawText^0,c
 15992  00205A  0E00               	movlw	0
 15993  00205C  2023               	addwfc	(LCD_DrawText@font+1)^0,w,c
 15994  00205E  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 15995  002060  C02D  FFF6         	movff	??_LCD_DrawText,tblptrl
 15996  002064  C02E  FFF7         	movff	??_LCD_DrawText+1,tblptrh
 15997  002068                     	if	0	;tblptru may be non-zero
 15998  002068                     	endif
 15999  002068                     	if	0	;tblptru may be non-zero
 16000  002068                     	endif
 16001  002068  0009               	tblrd		*+
 16002  00206A  CFF5 F02F          	movff	tablat,??_LCD_DrawText+2
 16003  00206E  0009               	tblrd		*+
 16004  002070  CFF5 F030          	movff	tablat,??_LCD_DrawText+3
 16005  002074  501A               	movf	?___wmul^0,w,c
 16006  002076  262F               	addwf	(??_LCD_DrawText+2)^0,f,c
 16007  002078  501B               	movf	(?___wmul+1)^0,w,c
 16008  00207A  2230               	addwfc	(??_LCD_DrawText+3)^0,f,c
 16009  00207C  0E01               	movlw	1
 16010  00207E  262F               	addwf	(??_LCD_DrawText+2)^0,f,c
 16011  002080  0E00               	movlw	0
 16012  002082  2230               	addwfc	(??_LCD_DrawText+3)^0,f,c
 16013  002084  C02F  FFF6         	movff	??_LCD_DrawText+2,tblptrl
 16014  002088  C030  FFF7         	movff	??_LCD_DrawText+3,tblptrh
 16015  00208C                     	if	0	;tblptru may be non-zero
 16016  00208C                     	endif
 16017  00208C                     	if	0	;tblptru may be non-zero
 16018  00208C                     	endif
 16019  00208C  0009               	tblrd		*+
 16020  00208E  CFF5 F033          	movff	tablat,LCD_DrawText@offset
 16021  002092  000A               	tblrd		*-
 16022  002094  CFF5 F034          	movff	tablat,LCD_DrawText@offset+1
 16023                           
 16024                           ;libraries/lcd_highlevel.c: 743:     width = font->descriptor[tempChar].width;
 16025  002098  503F               	movf	LCD_DrawText@tempChar^0,w,c
 16026  00209A  6E1A               	movwf	___wmul@multiplier^0,c
 16027  00209C  6A1B               	clrf	(___wmul@multiplier+1)^0,c
 16028  00209E  BE1A               	btfsc	___wmul@multiplier^0,7,c
 16029  0020A0  061B               	decf	(___wmul@multiplier+1)^0,f,c
 16030  0020A2  0E00               	movlw	0
 16031  0020A4  6E1D               	movwf	(___wmul@multiplicand+1)^0,c
 16032  0020A6  0E03               	movlw	3
 16033  0020A8  6E1C               	movwf	___wmul@multiplicand^0,c
 16034  0020AA  ECA6  F02C         	call	___wmul	;wreg free
 16035  0020AE  0E03               	movlw	3
 16036  0020B0  2422               	addwf	LCD_DrawText@font^0,w,c
 16037  0020B2  6E2D               	movwf	??_LCD_DrawText^0,c
 16038  0020B4  0E00               	movlw	0
 16039  0020B6  2023               	addwfc	(LCD_DrawText@font+1)^0,w,c
 16040  0020B8  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 16041  0020BA  C02D  FFF6         	movff	??_LCD_DrawText,tblptrl
 16042  0020BE  C02E  FFF7         	movff	??_LCD_DrawText+1,tblptrh
 16043  0020C2                     	if	0	;tblptru may be non-zero
 16044  0020C2                     	endif
 16045  0020C2                     	if	0	;tblptru may be non-zero
 16046  0020C2                     	endif
 16047  0020C2  0009               	tblrd		*+
 16048  0020C4  CFF5 F02F          	movff	tablat,??_LCD_DrawText+2
 16049  0020C8  0009               	tblrd		*+
 16050  0020CA  CFF5 F030          	movff	tablat,??_LCD_DrawText+3
 16051  0020CE  501A               	movf	?___wmul^0,w,c
 16052  0020D0  262F               	addwf	(??_LCD_DrawText+2)^0,f,c
 16053  0020D2  501B               	movf	(?___wmul+1)^0,w,c
 16054  0020D4  2230               	addwfc	(??_LCD_DrawText+3)^0,f,c
 16055  0020D6  C02F  FFF6         	movff	??_LCD_DrawText+2,tblptrl
 16056  0020DA  C030  FFF7         	movff	??_LCD_DrawText+3,tblptrh
 16057  0020DE                     	if	0	;tblptru may be non-zero
 16058  0020DE                     	endif
 16059  0020DE                     	if	0	;tblptru may be non-zero
 16060  0020DE                     	endif
 16061  0020DE  0008               	tblrd		*
 16062  0020E0  CFF5 F041          	movff	tablat,LCD_DrawText@width
 16063                           
 16064                           ;libraries/lcd_highlevel.c: 748:     PORTA = 0x2A; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 16065  0020E4  0E2A               	movlw	42
 16066  0020E6  6E80               	movwf	128,c	;volatile
 16067  0020E8  988B               	bcf	3979,4,c	;volatile
 16068  0020EA  968B               	bcf	3979,3,c	;volatile
 16069  0020EC  868B               	bsf	3979,3,c	;volatile
 16070  0020EE  888B               	bsf	3979,4,c	;volatile
 16071                           
 16072                           ;libraries/lcd_highlevel.c: 749:     PORTA = posX>>8; LATC3 = 0; LATC3 = 1;;
 16073  0020F0  C026  FF80         	movff	LCD_DrawText@posX+1,3968	;volatile
 16074  0020F4  968B               	bcf	3979,3,c	;volatile
 16075  0020F6  868B               	bsf	3979,3,c	;volatile
 16076                           
 16077                           ;libraries/lcd_highlevel.c: 750:     PORTA = posX; LATC3 = 0; LATC3 = 1;;
 16078  0020F8  C025  FF80         	movff	LCD_DrawText@posX,3968	;volatile
 16079  0020FC  968B               	bcf	3979,3,c	;volatile
 16080  0020FE  868B               	bsf	3979,3,c	;volatile
 16081                           
 16082                           ;libraries/lcd_highlevel.c: 751:     posXEnd = posX+width-1+2;
 16083  002100  5041               	movf	LCD_DrawText@width^0,w,c
 16084  002102  2425               	addwf	LCD_DrawText@posX^0,w,c
 16085  002104  6E2D               	movwf	??_LCD_DrawText^0,c
 16086  002106  0E00               	movlw	0
 16087  002108  2026               	addwfc	(LCD_DrawText@posX+1)^0,w,c
 16088  00210A  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 16089  00210C  0E01               	movlw	1
 16090  00210E  242D               	addwf	??_LCD_DrawText^0,w,c
 16091  002110  6E3B               	movwf	LCD_DrawText@posXEnd^0,c
 16092  002112  0E00               	movlw	0
 16093  002114  202E               	addwfc	(??_LCD_DrawText+1)^0,w,c
 16094  002116  6E3C               	movwf	(LCD_DrawText@posXEnd+1)^0,c
 16095                           
 16096                           ;libraries/lcd_highlevel.c: 752:     PORTA = posXEnd>>8; LATC3 = 0; LATC3 = 1;;
 16097  002118  C03C  FF80         	movff	LCD_DrawText@posXEnd+1,3968	;volatile
 16098  00211C  968B               	bcf	3979,3,c	;volatile
 16099  00211E  868B               	bsf	3979,3,c	;volatile
 16100                           
 16101                           ;libraries/lcd_highlevel.c: 753:     PORTA = posXEnd; LATC3 = 0; LATC3 = 1;;
 16102  002120  C03B  FF80         	movff	LCD_DrawText@posXEnd,3968	;volatile
 16103  002124  968B               	bcf	3979,3,c	;volatile
 16104  002126  868B               	bsf	3979,3,c	;volatile
 16105                           
 16106                           ;libraries/lcd_highlevel.c: 755:     PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 16107  002128  0E2B               	movlw	43
 16108  00212A  6E80               	movwf	128,c	;volatile
 16109  00212C  988B               	bcf	3979,4,c	;volatile
 16110  00212E  968B               	bcf	3979,3,c	;volatile
 16111  002130  868B               	bsf	3979,3,c	;volatile
 16112  002132  888B               	bsf	3979,4,c	;volatile
 16113                           
 16114                           ;libraries/lcd_highlevel.c: 756:     PORTA = posY>>8; LATC3 = 0; LATC3 = 1;;
 16115  002134  C028  FF80         	movff	LCD_DrawText@posY+1,3968	;volatile
 16116  002138  968B               	bcf	3979,3,c	;volatile
 16117  00213A  868B               	bsf	3979,3,c	;volatile
 16118                           
 16119                           ;libraries/lcd_highlevel.c: 757:     PORTA = posY; LATC3 = 0; LATC3 = 1;;
 16120  00213C  C027  FF80         	movff	LCD_DrawText@posY,3968	;volatile
 16121  002140  968B               	bcf	3979,3,c	;volatile
 16122  002142  868B               	bsf	3979,3,c	;volatile
 16123                           
 16124                           ;libraries/lcd_highlevel.c: 758:     posYEnd = posY + font->height-1;
 16125  002144  C022  FFF6         	movff	LCD_DrawText@font,tblptrl
 16126  002148  C023  FFF7         	movff	LCD_DrawText@font+1,tblptrh
 16127  00214C                     	if	0	;tblptru may be non-zero
 16128  00214C                     	endif
 16129  00214C                     	if	0	;tblptru may be non-zero
 16130  00214C                     	endif
 16131  00214C  0008               	tblrd		*
 16132  00214E  50F5               	movf	tablat,w,c
 16133  002150  2427               	addwf	LCD_DrawText@posY^0,w,c
 16134  002152  6E2D               	movwf	??_LCD_DrawText^0,c
 16135  002154  0E00               	movlw	0
 16136  002156  2028               	addwfc	(LCD_DrawText@posY+1)^0,w,c
 16137  002158  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 16138  00215A  0EFF               	movlw	255
 16139  00215C  242D               	addwf	??_LCD_DrawText^0,w,c
 16140  00215E  6E39               	movwf	LCD_DrawText@posYEnd^0,c
 16141  002160  0EFF               	movlw	255
 16142  002162  202E               	addwfc	(??_LCD_DrawText+1)^0,w,c
 16143  002164  6E3A               	movwf	(LCD_DrawText@posYEnd+1)^0,c
 16144                           
 16145                           ;libraries/lcd_highlevel.c: 759:     PORTA = posYEnd>>8; LATC3 = 0; LATC3 = 1;;
 16146  002166  C03A  FF80         	movff	LCD_DrawText@posYEnd+1,3968	;volatile
 16147  00216A  968B               	bcf	3979,3,c	;volatile
 16148  00216C  868B               	bsf	3979,3,c	;volatile
 16149                           
 16150                           ;libraries/lcd_highlevel.c: 760:     PORTA = posYEnd; LATC3 = 0; LATC3 = 1;;
 16151  00216E  C039  FF80         	movff	LCD_DrawText@posYEnd,3968	;volatile
 16152  002172  968B               	bcf	3979,3,c	;volatile
 16153  002174  868B               	bsf	3979,3,c	;volatile
 16154                           
 16155                           ;libraries/lcd_highlevel.c: 761:     PORTA = 0x2C; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 16156  002176  0E2C               	movlw	44
 16157  002178  6E80               	movwf	128,c	;volatile
 16158  00217A  988B               	bcf	3979,4,c	;volatile
 16159  00217C  968B               	bcf	3979,3,c	;volatile
 16160  00217E  868B               	bsf	3979,3,c	;volatile
 16161  002180  888B               	bsf	3979,4,c	;volatile
 16162                           
 16163                           ;libraries/lcd_highlevel.c: 763:     for(y=0;y<font->height;y++)
 16164  002182  0E00               	movlw	0
 16165  002184  6E3D               	movwf	LCD_DrawText@y^0,c
 16166  002186  D07D               	goto	l8598
 16167  002188                     l8570:
 16168                           
 16169                           ;libraries/lcd_highlevel.c: 764:     {;libraries/lcd_highlevel.c: 765:       yOffset = o
      +                          ffset + (y * ((width+7)/8));
 16170  002188  C03D  F01A         	movff	LCD_DrawText@y,___wmul@multiplier
 16171  00218C  6A1B               	clrf	(___wmul@multiplier+1)^0,c
 16172  00218E  0E00               	movlw	0
 16173  002190  6E15               	movwf	(___awdiv@divisor+1)^0,c
 16174  002192  0E08               	movlw	8
 16175  002194  6E14               	movwf	___awdiv@divisor^0,c
 16176  002196  0E07               	movlw	7
 16177  002198  2441               	addwf	LCD_DrawText@width^0,w,c
 16178  00219A  6E12               	movwf	___awdiv@dividend^0,c
 16179  00219C  6A13               	clrf	(___awdiv@dividend+1)^0,c
 16180  00219E  0E00               	movlw	0
 16181  0021A0  2213               	addwfc	(___awdiv@dividend+1)^0,f,c
 16182  0021A2  EC09  F028         	call	___awdiv	;wreg free
 16183  0021A6  C012  F01C         	movff	?___awdiv,___wmul@multiplicand
 16184  0021AA  C013  F01D         	movff	?___awdiv+1,___wmul@multiplicand+1
 16185  0021AE  ECA6  F02C         	call	___wmul	;wreg free
 16186  0021B2  5033               	movf	LCD_DrawText@offset^0,w,c
 16187  0021B4  241A               	addwf	?___wmul^0,w,c
 16188  0021B6  6E35               	movwf	LCD_DrawText@yOffset^0,c
 16189  0021B8  5034               	movf	(LCD_DrawText@offset+1)^0,w,c
 16190  0021BA  201B               	addwfc	(?___wmul+1)^0,w,c
 16191  0021BC  6E36               	movwf	(LCD_DrawText@yOffset+1)^0,c
 16192                           
 16193                           ;libraries/lcd_highlevel.c: 766:       for(x=0;x<width;x++)
 16194  0021BE  0E00               	movlw	0
 16195  0021C0  6E40               	movwf	LCD_DrawText@x^0,c
 16196  0021C2  D04C               	goto	l8584
 16197  0021C4                     l8574:
 16198                           
 16199                           ;libraries/lcd_highlevel.c: 767:       {;libraries/lcd_highlevel.c: 768:         fontByt
      +                          e = font->bitmap[yOffset + (x/8)];
 16200  0021C4  0E05               	movlw	5
 16201  0021C6  2422               	addwf	LCD_DrawText@font^0,w,c
 16202  0021C8  6E2D               	movwf	??_LCD_DrawText^0,c
 16203  0021CA  0E00               	movlw	0
 16204  0021CC  2023               	addwfc	(LCD_DrawText@font+1)^0,w,c
 16205  0021CE  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 16206  0021D0  C02D  FFF6         	movff	??_LCD_DrawText,tblptrl
 16207  0021D4  C02E  FFF7         	movff	??_LCD_DrawText+1,tblptrh
 16208  0021D8                     	if	0	;tblptru may be non-zero
 16209  0021D8                     	endif
 16210  0021D8                     	if	0	;tblptru may be non-zero
 16211  0021D8                     	endif
 16212  0021D8  0009               	tblrd		*+
 16213  0021DA  CFF5 F02F          	movff	tablat,??_LCD_DrawText+2
 16214  0021DE  0009               	tblrd		*+
 16215  0021E0  CFF5 F030          	movff	tablat,??_LCD_DrawText+3
 16216  0021E4  C040  F031         	movff	LCD_DrawText@x,??_LCD_DrawText+4
 16217  0021E8  90D8               	bcf	status,0,c
 16218  0021EA  3231               	rrcf	(??_LCD_DrawText+4)^0,f,c
 16219  0021EC  90D8               	bcf	status,0,c
 16220  0021EE  3231               	rrcf	(??_LCD_DrawText+4)^0,f,c
 16221  0021F0  90D8               	bcf	status,0,c
 16222  0021F2  3231               	rrcf	(??_LCD_DrawText+4)^0,f,c
 16223  0021F4  5031               	movf	(??_LCD_DrawText+4)^0,w,c
 16224  0021F6  262F               	addwf	(??_LCD_DrawText+2)^0,f,c
 16225  0021F8  0E00               	movlw	0
 16226  0021FA  2230               	addwfc	(??_LCD_DrawText+3)^0,f,c
 16227  0021FC  5035               	movf	LCD_DrawText@yOffset^0,w,c
 16228  0021FE  262F               	addwf	(??_LCD_DrawText+2)^0,f,c
 16229  002200  5036               	movf	(LCD_DrawText@yOffset+1)^0,w,c
 16230  002202  2230               	addwfc	(??_LCD_DrawText+3)^0,f,c
 16231  002204  C02F  FFF6         	movff	??_LCD_DrawText+2,tblptrl
 16232  002208  C030  FFF7         	movff	??_LCD_DrawText+3,tblptrh
 16233  00220C                     	if	0	;tblptru may be non-zero
 16234  00220C                     	endif
 16235  00220C                     	if	0	;tblptru may be non-zero
 16236  00220C                     	endif
 16237  00220C  0008               	tblrd		*
 16238  00220E  CFF5 F037          	movff	tablat,LCD_DrawText@fontByte
 16239                           
 16240                           ;libraries/lcd_highlevel.c: 769:         fontPixel = fontByte & (0x80 >> (x%8));
 16241  002212  C040  F02D         	movff	LCD_DrawText@x,??_LCD_DrawText
 16242  002216  0E07               	movlw	7
 16243  002218  162D               	andwf	??_LCD_DrawText^0,f,c
 16244  00221A  0E80               	movlw	128
 16245  00221C  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 16246  00221E  0E00               	movlw	0
 16247  002220  6E2F               	movwf	(??_LCD_DrawText+2)^0,c
 16248  002222  2A2D               	incf	??_LCD_DrawText^0,f,c
 16249  002224  D003               	goto	u6274
 16250  002226                     u6275:
 16251  002226  342F               	rlcf	(??_LCD_DrawText+2)^0,w,c
 16252  002228  322F               	rrcf	(??_LCD_DrawText+2)^0,f,c
 16253  00222A  322E               	rrcf	(??_LCD_DrawText+1)^0,f,c
 16254  00222C                     u6274:
 16255  00222C  2E2D               	decfsz	??_LCD_DrawText^0,f,c
 16256  00222E  D7FB               	goto	u6275
 16257  002230  502E               	movf	(??_LCD_DrawText+1)^0,w,c
 16258  002232  1437               	andwf	LCD_DrawText@fontByte^0,w,c
 16259  002234  6E38               	movwf	LCD_DrawText@fontPixel^0,c
 16260                           
 16261                           ;libraries/lcd_highlevel.c: 770:         if(fontPixel != 0)
 16262  002236  5038               	movf	LCD_DrawText@fontPixel^0,w,c
 16263  002238  B4D8               	btfsc	status,2,c
 16264  00223A  D007               	goto	l315
 16265                           
 16266                           ;libraries/lcd_highlevel.c: 771:         {;libraries/lcd_highlevel.c: 772:           POR
      +                          TA = color>>8; LATC3 = 0; LATC3 = 1;;
 16267  00223C  C02A  FF80         	movff	LCD_DrawText@color+1,3968	;volatile
 16268  002240  968B               	bcf	3979,3,c	;volatile
 16269  002242  868B               	bsf	3979,3,c	;volatile
 16270                           
 16271                           ;libraries/lcd_highlevel.c: 773:           PORTA = color; LATC3 = 0; LATC3 = 1;;
 16272  002244  C029  FF80         	movff	LCD_DrawText@color,3968	;volatile
 16273  002248  D006               	goto	L10
 16274  00224A                     l315:
 16275                           
 16276                           ;libraries/lcd_highlevel.c: 776:         {;libraries/lcd_highlevel.c: 777:           POR
      +                          TA = bg_color>>8; LATC3 = 0; LATC3 = 1;;
 16277  00224A  C02C  FF80         	movff	LCD_DrawText@bg_color+1,3968	;volatile
 16278  00224E  968B               	bcf	3979,3,c	;volatile
 16279  002250  868B               	bsf	3979,3,c	;volatile
 16280                           
 16281                           ;libraries/lcd_highlevel.c: 778:           PORTA = bg_color; LATC3 = 0; LATC3 = 1;;
 16282  002252  C02B  FF80         	movff	LCD_DrawText@bg_color,3968	;volatile
 16283  002256                     L10:
 16284  002256  968B               	bcf	3979,3,c	;volatile
 16285  002258  868B               	bsf	3979,3,c	;volatile
 16286                           
 16287                           ;libraries/lcd_highlevel.c: 780:       }
 16288  00225A  2A40               	incf	LCD_DrawText@x^0,f,c
 16289  00225C                     l8584:
 16290  00225C  5041               	movf	LCD_DrawText@width^0,w,c
 16291  00225E  5C40               	subwf	LCD_DrawText@x^0,w,c
 16292  002260  A0D8               	btfss	status,0,c
 16293  002262  D7B0               	goto	l8574
 16294                           
 16295                           ;libraries/lcd_highlevel.c: 781:       for(x=0;x<2;x++)
 16296  002264  0E00               	movlw	0
 16297  002266  6E40               	movwf	LCD_DrawText@x^0,c
 16298  002268                     l318:
 16299                           
 16300                           ;libraries/lcd_highlevel.c: 782:       {;libraries/lcd_highlevel.c: 783:         PORTA =
      +                           bg_color>>8; LATC3 = 0; LATC3 = 1;;
 16301  002268  C02C  FF80         	movff	LCD_DrawText@bg_color+1,3968	;volatile
 16302  00226C  968B               	bcf	3979,3,c	;volatile
 16303  00226E  868B               	bsf	3979,3,c	;volatile
 16304                           
 16305                           ;libraries/lcd_highlevel.c: 784:         PORTA = bg_color; LATC3 = 0; LATC3 = 1;;
 16306  002270  C02B  FF80         	movff	LCD_DrawText@bg_color,3968	;volatile
 16307  002274  968B               	bcf	3979,3,c	;volatile
 16308  002276  868B               	bsf	3979,3,c	;volatile
 16309                           
 16310                           ;libraries/lcd_highlevel.c: 785:       }
 16311  002278  2A40               	incf	LCD_DrawText@x^0,f,c
 16312  00227A  0E01               	movlw	1
 16313  00227C  6440               	cpfsgt	LCD_DrawText@x^0,c
 16314  00227E  D7F4               	goto	l318
 16315                           
 16316                           ;libraries/lcd_highlevel.c: 786:     }
 16317  002280  2A3D               	incf	LCD_DrawText@y^0,f,c
 16318  002282                     l8598:
 16319  002282  C022  FFF6         	movff	LCD_DrawText@font,tblptrl
 16320  002286  C023  FFF7         	movff	LCD_DrawText@font+1,tblptrh
 16321  00228A                     	if	0	;tblptru may be non-zero
 16322  00228A                     	endif
 16323  00228A                     	if	0	;tblptru may be non-zero
 16324  00228A                     	endif
 16325  00228A  0009               	tblrd		*+
 16326  00228C  50F5               	movf	tablat,w,c
 16327  00228E  5C3D               	subwf	LCD_DrawText@y^0,w,c
 16328  002290  A0D8               	btfss	status,0,c
 16329  002292  D77A               	goto	l8570
 16330                           
 16331                           ;libraries/lcd_highlevel.c: 787:     posX = posX + 2 + width;
 16332  002294  5041               	movf	LCD_DrawText@width^0,w,c
 16333  002296  2425               	addwf	LCD_DrawText@posX^0,w,c
 16334  002298  6E2D               	movwf	??_LCD_DrawText^0,c
 16335  00229A  0E00               	movlw	0
 16336  00229C  2026               	addwfc	(LCD_DrawText@posX+1)^0,w,c
 16337  00229E  6E2E               	movwf	(??_LCD_DrawText+1)^0,c
 16338  0022A0  0E02               	movlw	2
 16339  0022A2  242D               	addwf	??_LCD_DrawText^0,w,c
 16340  0022A4  6E25               	movwf	LCD_DrawText@posX^0,c
 16341  0022A6  0E00               	movlw	0
 16342  0022A8  202E               	addwfc	(??_LCD_DrawText+1)^0,w,c
 16343  0022AA  6E26               	movwf	(LCD_DrawText@posX+1)^0,c
 16344                           
 16345                           ;libraries/lcd_highlevel.c: 788:     msg++;
 16346  0022AC  4A20               	infsnz	LCD_DrawText@msg^0,f,c
 16347  0022AE  2A21               	incf	(LCD_DrawText@msg+1)^0,f,c
 16348                           
 16349                           ;libraries/lcd_highlevel.c: 789:  }while(*msg != 0);
 16350  0022B0  C020  FFF6         	movff	LCD_DrawText@msg,tblptrl
 16351  0022B4  C021  FFF7         	movff	LCD_DrawText@msg+1,tblptrh
 16352  0022B8  6AF8               	clrf	tblptru,c
 16353  0022BA  0E05               	movlw	(high __ramtop+-1)
 16354  0022BC  64F7               	cpfsgt	tblptrh,c
 16355  0022BE  D003               	bra	u6327
 16356  0022C0  0008               	tblrd		*
 16357  0022C2  50F5               	movf	tablat,w,c
 16358  0022C4  D005               	bra	u6320
 16359  0022C6                     u6327:
 16360  0022C6  CFF6 FFE1          	movff	tblptrl,fsr1l
 16361  0022CA  CFF7 FFE2          	movff	tblptrh,fsr1h
 16362  0022CE  50E7               	movf	indf1,w,c
 16363  0022D0                     u6320:
 16364  0022D0  0900               	iorlw	0
 16365  0022D2  B4D8               	btfsc	status,2,c
 16366  0022D4  0012               	return	
 16367  0022D6  D692               	goto	l8480
 16368  0022D8                     __end_of_LCD_DrawText:
 16369                           	callstack 0
 16370                           
 16371 ;; *************** function _strlen *****************
 16372 ;; Defined at:
 16373 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\strlen.c"
 16374 ;; Parameters:    Size  Location     Type
 16375 ;;  s               2   17[COMRAM] PTR const unsigned char 
 16376 ;;		 -> g1.str(2), dbuf(32), STR_15(13), STR_14(13), 
 16377 ;;		 -> STR_13(6), STR_12(11), STR_11(11), STR_10(8), 
 16378 ;;		 -> STR_9(9), STR_8(2), STR_7(9), STR_6(11), 
 16379 ;;		 -> STR_5(9), STR_4(9), g1(240), STR_1(10), 
 16380 ;; Auto vars:     Size  Location     Type
 16381 ;;  a               2   19[COMRAM] PTR const unsigned char 
 16382 ;;		 -> g1.str(2), dbuf(32), STR_15(13), STR_14(13), 
 16383 ;;		 -> STR_13(6), STR_12(11), STR_11(11), STR_10(8), 
 16384 ;;		 -> STR_9(9), STR_8(2), STR_7(9), STR_6(11), 
 16385 ;;		 -> STR_5(9), STR_4(9), g1(240), STR_1(10), 
 16386 ;; Return value:  Size  Location     Type
 16387 ;;                  2   17[COMRAM] unsigned int 
 16388 ;; Registers used:
 16389 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru
 16390 ;; Tracked objects:
 16391 ;;		On entry : 0/0
 16392 ;;		On exit  : 0/0
 16393 ;;		Unchanged: 0/0
 16394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16395 ;;      Params:         2       0       0       0       0       0       0
 16396 ;;      Locals:         2       0       0       0       0       0       0
 16397 ;;      Temps:          0       0       0       0       0       0       0
 16398 ;;      Totals:         4       0       0       0       0       0       0
 16399 ;;Total ram usage:        4 bytes
 16400 ;; Hardware stack levels used: 1
 16401 ;; Hardware stack levels required when called: 4
 16402 ;; This function calls:
 16403 ;;		Nothing
 16404 ;; This function is called by:
 16405 ;;		_LCD_ButtonDraw
 16406 ;;		_LCD_DrawText
 16407 ;;		_pad
 16408 ;; This function uses a non-reentrant model
 16409 ;;
 16410                           
 16411                           	psect	text71
 16412  005614                     __ptext71:
 16413                           	callstack 0
 16414  005614                     _strlen:
 16415                           	callstack 16
 16416                           
 16417                           ;incstack = 0
 16418  005614  C012  F014         	movff	strlen@s,strlen@a
 16419  005618  C013  F015         	movff	strlen@s+1,strlen@a+1
 16420  00561C  D002               	goto	l8236
 16421  00561E                     l8234:
 16422  00561E  4A12               	infsnz	strlen@s^0,f,c
 16423  005620  2A13               	incf	(strlen@s+1)^0,f,c
 16424  005622                     l8236:
 16425  005622  C012  FFF6         	movff	strlen@s,tblptrl
 16426  005626  C013  FFF7         	movff	strlen@s+1,tblptrh
 16427  00562A  6AF8               	clrf	tblptru,c
 16428  00562C  0E05               	movlw	(high __ramtop+-1)
 16429  00562E  64F7               	cpfsgt	tblptrh,c
 16430  005630  D003               	bra	u5827
 16431  005632  0008               	tblrd		*
 16432  005634  50F5               	movf	tablat,w,c
 16433  005636  D005               	bra	u5820
 16434  005638                     u5827:
 16435  005638  CFF6 FFE1          	movff	tblptrl,fsr1l
 16436  00563C  CFF7 FFE2          	movff	tblptrh,fsr1h
 16437  005640  50E7               	movf	indf1,w,c
 16438  005642                     u5820:
 16439  005642  0900               	iorlw	0
 16440  005644  A4D8               	btfss	status,2,c
 16441  005646  D7EB               	goto	l8234
 16442  005648  5014               	movf	strlen@a^0,w,c
 16443  00564A  5C12               	subwf	strlen@s^0,w,c
 16444  00564C  6E12               	movwf	?_strlen^0,c
 16445  00564E  5015               	movf	(strlen@a+1)^0,w,c
 16446  005650  5813               	subwfb	(strlen@s+1)^0,w,c
 16447  005652  6E13               	movwf	(?_strlen+1)^0,c
 16448  005654  0012               	return		;funcret
 16449  005656                     __end_of_strlen:
 16450                           	callstack 0
 16451                           
 16452 ;; *************** function ___awdiv *****************
 16453 ;; Defined at:
 16454 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
 16455 ;; Parameters:    Size  Location     Type
 16456 ;;  dividend        2   17[COMRAM] int 
 16457 ;;  divisor         2   19[COMRAM] int 
 16458 ;; Auto vars:     Size  Location     Type
 16459 ;;  quotient        2   23[COMRAM] int 
 16460 ;;  sign            1   22[COMRAM] unsigned char 
 16461 ;;  counter         1   21[COMRAM] unsigned char 
 16462 ;; Return value:  Size  Location     Type
 16463 ;;                  2   17[COMRAM] int 
 16464 ;; Registers used:
 16465 ;;		wreg, status,2, status,0
 16466 ;; Tracked objects:
 16467 ;;		On entry : 0/0
 16468 ;;		On exit  : 0/0
 16469 ;;		Unchanged: 0/0
 16470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16471 ;;      Params:         4       0       0       0       0       0       0
 16472 ;;      Locals:         4       0       0       0       0       0       0
 16473 ;;      Temps:          0       0       0       0       0       0       0
 16474 ;;      Totals:         8       0       0       0       0       0       0
 16475 ;;Total ram usage:        8 bytes
 16476 ;; Hardware stack levels used: 1
 16477 ;; Hardware stack levels required when called: 4
 16478 ;; This function calls:
 16479 ;;		Nothing
 16480 ;; This function is called by:
 16481 ;;		_LCD_DrawText
 16482 ;; This function uses a non-reentrant model
 16483 ;;
 16484                           
 16485                           	psect	text72
 16486  005012                     __ptext72:
 16487                           	callstack 0
 16488  005012                     ___awdiv:
 16489                           	callstack 20
 16490                           
 16491                           ;incstack = 0
 16492  005012  0E00               	movlw	0
 16493  005014  6E17               	movwf	___awdiv@sign^0,c
 16494  005016  AE15               	btfss	(___awdiv@divisor+1)^0,7,c
 16495  005018  D006               	goto	l5830
 16496  00501A  6C14               	negf	___awdiv@divisor^0,c
 16497  00501C  1E15               	comf	(___awdiv@divisor+1)^0,f,c
 16498  00501E  B0D8               	btfsc	status,0,c
 16499  005020  2A15               	incf	(___awdiv@divisor+1)^0,f,c
 16500  005022  0E01               	movlw	1
 16501  005024  6E17               	movwf	___awdiv@sign^0,c
 16502  005026                     l5830:
 16503  005026  AE13               	btfss	(___awdiv@dividend+1)^0,7,c
 16504  005028  D006               	goto	l5836
 16505  00502A  6C12               	negf	___awdiv@dividend^0,c
 16506  00502C  1E13               	comf	(___awdiv@dividend+1)^0,f,c
 16507  00502E  B0D8               	btfsc	status,0,c
 16508  005030  2A13               	incf	(___awdiv@dividend+1)^0,f,c
 16509  005032  0E01               	movlw	1
 16510  005034  1A17               	xorwf	___awdiv@sign^0,f,c
 16511  005036                     l5836:
 16512  005036  0E00               	movlw	0
 16513  005038  6E19               	movwf	(___awdiv@quotient+1)^0,c
 16514  00503A  0E00               	movlw	0
 16515  00503C  6E18               	movwf	___awdiv@quotient^0,c
 16516  00503E  5014               	movf	___awdiv@divisor^0,w,c
 16517  005040  1015               	iorwf	(___awdiv@divisor+1)^0,w,c
 16518  005042  B4D8               	btfsc	status,2,c
 16519  005044  D01C               	goto	l5858
 16520  005046  0E01               	movlw	1
 16521  005048  6E16               	movwf	___awdiv@counter^0,c
 16522  00504A  D004               	goto	l5844
 16523  00504C                     l5842:
 16524  00504C  90D8               	bcf	status,0,c
 16525  00504E  3614               	rlcf	___awdiv@divisor^0,f,c
 16526  005050  3615               	rlcf	(___awdiv@divisor+1)^0,f,c
 16527  005052  2A16               	incf	___awdiv@counter^0,f,c
 16528  005054                     l5844:
 16529  005054  AE15               	btfss	(___awdiv@divisor+1)^0,7,c
 16530  005056  D7FA               	goto	l5842
 16531  005058                     u3490:
 16532  005058  90D8               	bcf	status,0,c
 16533  00505A  3618               	rlcf	___awdiv@quotient^0,f,c
 16534  00505C  3619               	rlcf	(___awdiv@quotient+1)^0,f,c
 16535  00505E  5014               	movf	___awdiv@divisor^0,w,c
 16536  005060  5C12               	subwf	___awdiv@dividend^0,w,c
 16537  005062  5015               	movf	(___awdiv@divisor+1)^0,w,c
 16538  005064  5813               	subwfb	(___awdiv@dividend+1)^0,w,c
 16539  005066  A0D8               	btfss	status,0,c
 16540  005068  D005               	goto	l5854
 16541  00506A  5014               	movf	___awdiv@divisor^0,w,c
 16542  00506C  5E12               	subwf	___awdiv@dividend^0,f,c
 16543  00506E  5015               	movf	(___awdiv@divisor+1)^0,w,c
 16544  005070  5A13               	subwfb	(___awdiv@dividend+1)^0,f,c
 16545  005072  8018               	bsf	___awdiv@quotient^0,0,c
 16546  005074                     l5854:
 16547  005074  90D8               	bcf	status,0,c
 16548  005076  3215               	rrcf	(___awdiv@divisor+1)^0,f,c
 16549  005078  3214               	rrcf	___awdiv@divisor^0,f,c
 16550  00507A  2E16               	decfsz	___awdiv@counter^0,f,c
 16551  00507C  D7ED               	goto	u3490
 16552  00507E                     l5858:
 16553  00507E  5017               	movf	___awdiv@sign^0,w,c
 16554  005080  B4D8               	btfsc	status,2,c
 16555  005082  D004               	goto	l5862
 16556  005084  6C18               	negf	___awdiv@quotient^0,c
 16557  005086  1E19               	comf	(___awdiv@quotient+1)^0,f,c
 16558  005088  B0D8               	btfsc	status,0,c
 16559  00508A  2A19               	incf	(___awdiv@quotient+1)^0,f,c
 16560  00508C                     l5862:
 16561  00508C  C018  F012         	movff	___awdiv@quotient,?___awdiv
 16562  005090  C019  F013         	movff	___awdiv@quotient+1,?___awdiv+1
 16563  005094  0012               	return		;funcret
 16564  005096                     __end_of___awdiv:
 16565                           	callstack 0
 16566                           
 16567 ;; *************** function _LCD_ButtonUpdate *****************
 16568 ;; Defined at:
 16569 ;;		line 425 in file "libraries/lcd_highlevel.c"
 16570 ;; Parameters:    Size  Location     Type
 16571 ;;  button          2   36[COMRAM] PTR struct .
 16572 ;;		 -> g1(240), 
 16573 ;; Auto vars:     Size  Location     Type
 16574 ;;  y2              2   52[COMRAM] unsigned short 
 16575 ;;  x1              2   50[COMRAM] unsigned short 
 16576 ;;  y1              2   48[COMRAM] unsigned short 
 16577 ;;  x2              2   46[COMRAM] unsigned short 
 16578 ;;  colorIn         2   44[COMRAM] unsigned short 
 16579 ;;  colorOut        2   42[COMRAM] unsigned short 
 16580 ;; Return value:  Size  Location     Type
 16581 ;;                  1    wreg      void 
 16582 ;; Registers used:
 16583 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16584 ;; Tracked objects:
 16585 ;;		On entry : 0/0
 16586 ;;		On exit  : 0/0
 16587 ;;		Unchanged: 0/0
 16588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16589 ;;      Params:         2       0       0       0       0       0       0
 16590 ;;      Locals:        12       0       0       0       0       0       0
 16591 ;;      Temps:          4       0       0       0       0       0       0
 16592 ;;      Totals:        18       0       0       0       0       0       0
 16593 ;;Total ram usage:       18 bytes
 16594 ;; Hardware stack levels used: 1
 16595 ;; Hardware stack levels required when called: 5
 16596 ;; This function calls:
 16597 ;;		_LCD_DrawRect
 16598 ;;		_LCD_Read
 16599 ;; This function is called by:
 16600 ;;		_LCD_ButtonDraw
 16601 ;; This function uses a non-reentrant model
 16602 ;;
 16603                           
 16604                           	psect	text73
 16605  003092                     __ptext73:
 16606                           	callstack 0
 16607  003092                     _LCD_ButtonUpdate:
 16608                           	callstack 19
 16609                           
 16610                           ;libraries/lcd_highlevel.c: 425: void LCD_ButtonUpdate(btn_t * button);libraries/lcd_hig
      +                          hlevel.c: 426: {;libraries/lcd_highlevel.c: 427:   uint16_t x1,x2,y1,y2;;libraries/lcd_h
      +                          ighlevel.c: 428:   uint16_t colorOut, colorIn;;libraries/lcd_highlevel.c: 430:   x1 = bu
      +                          tton->posX;
 16611                           
 16612                           ;incstack = 0
 16613  003092  C025  FFD9         	movff	LCD_ButtonUpdate@button,fsr2l
 16614  003096  C026  FFDA         	movff	LCD_ButtonUpdate@button+1,fsr2h
 16615  00309A  CFDE F033          	movff	postinc2,LCD_ButtonUpdate@x1
 16616  00309E  CFDD F034          	movff	postdec2,LCD_ButtonUpdate@x1+1
 16617                           
 16618                           ;libraries/lcd_highlevel.c: 431:   x2 = button->posX + button->width;
 16619  0030A2  EE20 F004          	lfsr	2,4
 16620  0030A6  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 16621  0030A8  26D9               	addwf	fsr2l,f,c
 16622  0030AA  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 16623  0030AC  22DA               	addwfc	fsr2h,f,c
 16624  0030AE  CFDE F027          	movff	postinc2,??_LCD_ButtonUpdate
 16625  0030B2  CFDD F028          	movff	postdec2,??_LCD_ButtonUpdate+1
 16626  0030B6  C025  FFD9         	movff	LCD_ButtonUpdate@button,fsr2l
 16627  0030BA  C026  FFDA         	movff	LCD_ButtonUpdate@button+1,fsr2h
 16628  0030BE  CFDE F029          	movff	postinc2,??_LCD_ButtonUpdate+2
 16629  0030C2  CFDD F02A          	movff	postdec2,??_LCD_ButtonUpdate+3
 16630  0030C6  5027               	movf	??_LCD_ButtonUpdate^0,w,c
 16631  0030C8  2429               	addwf	(??_LCD_ButtonUpdate+2)^0,w,c
 16632  0030CA  6E2F               	movwf	LCD_ButtonUpdate@x2^0,c
 16633  0030CC  5028               	movf	(??_LCD_ButtonUpdate+1)^0,w,c
 16634  0030CE  202A               	addwfc	(??_LCD_ButtonUpdate+3)^0,w,c
 16635  0030D0  6E30               	movwf	(LCD_ButtonUpdate@x2+1)^0,c
 16636                           
 16637                           ;libraries/lcd_highlevel.c: 432:   y1 = button->posY;
 16638  0030D2  EE20 F002          	lfsr	2,2
 16639  0030D6  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 16640  0030D8  26D9               	addwf	fsr2l,f,c
 16641  0030DA  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 16642  0030DC  22DA               	addwfc	fsr2h,f,c
 16643  0030DE  CFDE F031          	movff	postinc2,LCD_ButtonUpdate@y1
 16644  0030E2  CFDD F032          	movff	postdec2,LCD_ButtonUpdate@y1+1
 16645                           
 16646                           ;libraries/lcd_highlevel.c: 433:   y2 = button->posY + button->height;
 16647  0030E6  EE20 F006          	lfsr	2,6
 16648  0030EA  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 16649  0030EC  26D9               	addwf	fsr2l,f,c
 16650  0030EE  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 16651  0030F0  22DA               	addwfc	fsr2h,f,c
 16652  0030F2  CFDE F027          	movff	postinc2,??_LCD_ButtonUpdate
 16653  0030F6  CFDD F028          	movff	postdec2,??_LCD_ButtonUpdate+1
 16654  0030FA  EE20 F002          	lfsr	2,2
 16655  0030FE  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 16656  003100  26D9               	addwf	fsr2l,f,c
 16657  003102  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 16658  003104  22DA               	addwfc	fsr2h,f,c
 16659  003106  CFDE F029          	movff	postinc2,??_LCD_ButtonUpdate+2
 16660  00310A  CFDD F02A          	movff	postdec2,??_LCD_ButtonUpdate+3
 16661  00310E  5027               	movf	??_LCD_ButtonUpdate^0,w,c
 16662  003110  2429               	addwf	(??_LCD_ButtonUpdate+2)^0,w,c
 16663  003112  6E35               	movwf	LCD_ButtonUpdate@y2^0,c
 16664  003114  5028               	movf	(??_LCD_ButtonUpdate+1)^0,w,c
 16665  003116  202A               	addwfc	(??_LCD_ButtonUpdate+3)^0,w,c
 16666  003118  6E36               	movwf	(LCD_ButtonUpdate@y2+1)^0,c
 16667                           
 16668                           ;libraries/lcd_highlevel.c: 435:   if(button->pressed == 0)
 16669  00311A  EE20 F010          	lfsr	2,16
 16670  00311E  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 16671  003120  26D9               	addwf	fsr2l,f,c
 16672  003122  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 16673  003124  22DA               	addwfc	fsr2h,f,c
 16674  003126  50DF               	movf	indf2,w,c
 16675  003128  A4D8               	btfss	status,2,c
 16676  00312A  D00D               	goto	l6182
 16677                           
 16678                           ;libraries/lcd_highlevel.c: 436:   {;libraries/lcd_highlevel.c: 437:     colorOut = butt
      +                          on->txtColor;
 16679  00312C  EE20 F008          	lfsr	2,8
 16680  003130  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 16681  003132  26D9               	addwf	fsr2l,f,c
 16682  003134  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 16683  003136  22DA               	addwfc	fsr2h,f,c
 16684  003138  CFDE F02B          	movff	postinc2,LCD_ButtonUpdate@colorOut
 16685  00313C  CFDD F02C          	movff	postdec2,LCD_ButtonUpdate@colorOut+1
 16686                           
 16687                           ;libraries/lcd_highlevel.c: 438:     colorIn = button->bgColor;
 16688  003140  EE20 F00A          	lfsr	2,10
 16689  003144  D012               	goto	L11
 16690  003146                     l6182:
 16691                           
 16692                           ;libraries/lcd_highlevel.c: 441:   {;libraries/lcd_highlevel.c: 443:     colorOut = LCD_
      +                          Read(x1,y2+1);
 16693  003146  C033  F012         	movff	LCD_ButtonUpdate@x1,LCD_Read@posX
 16694  00314A  C034  F013         	movff	LCD_ButtonUpdate@x1+1,LCD_Read@posX+1
 16695  00314E  0E01               	movlw	1
 16696  003150  2435               	addwf	LCD_ButtonUpdate@y2^0,w,c
 16697  003152  6E14               	movwf	LCD_Read@posY^0,c
 16698  003154  0E00               	movlw	0
 16699  003156  2036               	addwfc	(LCD_ButtonUpdate@y2+1)^0,w,c
 16700  003158  6E15               	movwf	(LCD_Read@posY+1)^0,c
 16701  00315A  ECCE  F01C         	call	_LCD_Read	;wreg free
 16702  00315E  C012  F02B         	movff	?_LCD_Read,LCD_ButtonUpdate@colorOut
 16703  003162  C013  F02C         	movff	?_LCD_Read+1,LCD_ButtonUpdate@colorOut+1
 16704                           
 16705                           ;libraries/lcd_highlevel.c: 444:     colorIn = button->txtColor;
 16706  003166  EE20 F008          	lfsr	2,8
 16707  00316A                     L11:
 16708  00316A  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 16709  00316C  26D9               	addwf	fsr2l,f,c
 16710  00316E  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 16711  003170  22DA               	addwfc	fsr2h,f,c
 16712  003172  CFDE F02D          	movff	postinc2,LCD_ButtonUpdate@colorIn
 16713  003176  CFDD F02E          	movff	postdec2,LCD_ButtonUpdate@colorIn+1
 16714                           
 16715                           ;libraries/lcd_highlevel.c: 446:   if(button->bgColor != button->txtColor)
 16716  00317A  EE20 F008          	lfsr	2,8
 16717  00317E  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 16718  003180  26D9               	addwf	fsr2l,f,c
 16719  003182  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 16720  003184  22DA               	addwfc	fsr2h,f,c
 16721  003186  EE10 F00A          	lfsr	1,10
 16722  00318A  5025               	movf	LCD_ButtonUpdate@button^0,w,c
 16723  00318C  26E1               	addwf	fsr1l,f,c
 16724  00318E  5026               	movf	(LCD_ButtonUpdate@button+1)^0,w,c
 16725  003190  22E2               	addwfc	fsr1h,f,c
 16726  003192  50DE               	movf	postinc2,w,c
 16727  003194  18E6               	xorwf	postinc1,w,c
 16728  003196  E104               	bnz	u3830
 16729  003198  50DE               	movf	postinc2,w,c
 16730  00319A  18E6               	xorwf	postinc1,w,c
 16731  00319C  B4D8               	btfsc	status,2,c
 16732  00319E  0012               	return	
 16733  0031A0                     u3830:
 16734                           
 16735                           ;libraries/lcd_highlevel.c: 447:   {;libraries/lcd_highlevel.c: 449:     LCD_DrawRect(x1
      +                          +3, y2+1, x2+3, y2+3, 1, colorOut);
 16736  0031A0  0E03               	movlw	3
 16737  0031A2  2433               	addwf	LCD_ButtonUpdate@x1^0,w,c
 16738  0031A4  6E12               	movwf	LCD_DrawRect@posX1^0,c
 16739  0031A6  0E00               	movlw	0
 16740  0031A8  2034               	addwfc	(LCD_ButtonUpdate@x1+1)^0,w,c
 16741  0031AA  6E13               	movwf	(LCD_DrawRect@posX1+1)^0,c
 16742  0031AC  0E01               	movlw	1
 16743  0031AE  2435               	addwf	LCD_ButtonUpdate@y2^0,w,c
 16744  0031B0  6E14               	movwf	LCD_DrawRect@posY1^0,c
 16745  0031B2  0E00               	movlw	0
 16746  0031B4  2036               	addwfc	(LCD_ButtonUpdate@y2+1)^0,w,c
 16747  0031B6  6E15               	movwf	(LCD_DrawRect@posY1+1)^0,c
 16748  0031B8  0E03               	movlw	3
 16749  0031BA  242F               	addwf	LCD_ButtonUpdate@x2^0,w,c
 16750  0031BC  6E16               	movwf	LCD_DrawRect@posX2^0,c
 16751  0031BE  0E00               	movlw	0
 16752  0031C0  2030               	addwfc	(LCD_ButtonUpdate@x2+1)^0,w,c
 16753  0031C2  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 16754  0031C4  0E03               	movlw	3
 16755  0031C6  2435               	addwf	LCD_ButtonUpdate@y2^0,w,c
 16756  0031C8  6E18               	movwf	LCD_DrawRect@posY2^0,c
 16757  0031CA  0E00               	movlw	0
 16758  0031CC  2036               	addwfc	(LCD_ButtonUpdate@y2+1)^0,w,c
 16759  0031CE  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 16760  0031D0  0E01               	movlw	1
 16761  0031D2  6E1A               	movwf	LCD_DrawRect@fill^0,c
 16762  0031D4  C02B  F01B         	movff	LCD_ButtonUpdate@colorOut,LCD_DrawRect@color
 16763  0031D8  C02C  F01C         	movff	LCD_ButtonUpdate@colorOut+1,LCD_DrawRect@color+1
 16764  0031DC  EC36  F013         	call	_LCD_DrawRect	;wreg free
 16765                           
 16766                           ;libraries/lcd_highlevel.c: 450:     LCD_DrawRect(x2+1, y1+3, x2+3, y2+3, 1, colorOut);
 16767  0031E0  0E01               	movlw	1
 16768  0031E2  242F               	addwf	LCD_ButtonUpdate@x2^0,w,c
 16769  0031E4  6E12               	movwf	LCD_DrawRect@posX1^0,c
 16770  0031E6  0E00               	movlw	0
 16771  0031E8  2030               	addwfc	(LCD_ButtonUpdate@x2+1)^0,w,c
 16772  0031EA  6E13               	movwf	(LCD_DrawRect@posX1+1)^0,c
 16773  0031EC  0E03               	movlw	3
 16774  0031EE  2431               	addwf	LCD_ButtonUpdate@y1^0,w,c
 16775  0031F0  6E14               	movwf	LCD_DrawRect@posY1^0,c
 16776  0031F2  0E00               	movlw	0
 16777  0031F4  2032               	addwfc	(LCD_ButtonUpdate@y1+1)^0,w,c
 16778  0031F6  6E15               	movwf	(LCD_DrawRect@posY1+1)^0,c
 16779  0031F8  0E03               	movlw	3
 16780  0031FA  242F               	addwf	LCD_ButtonUpdate@x2^0,w,c
 16781  0031FC  6E16               	movwf	LCD_DrawRect@posX2^0,c
 16782  0031FE  0E00               	movlw	0
 16783  003200  2030               	addwfc	(LCD_ButtonUpdate@x2+1)^0,w,c
 16784  003202  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 16785  003204  0E03               	movlw	3
 16786  003206  2435               	addwf	LCD_ButtonUpdate@y2^0,w,c
 16787  003208  6E18               	movwf	LCD_DrawRect@posY2^0,c
 16788  00320A  0E00               	movlw	0
 16789  00320C  2036               	addwfc	(LCD_ButtonUpdate@y2+1)^0,w,c
 16790  00320E  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 16791  003210  0E01               	movlw	1
 16792  003212  6E1A               	movwf	LCD_DrawRect@fill^0,c
 16793  003214  C02B  F01B         	movff	LCD_ButtonUpdate@colorOut,LCD_DrawRect@color
 16794  003218  C02C  F01C         	movff	LCD_ButtonUpdate@colorOut+1,LCD_DrawRect@color+1
 16795  00321C  EC36  F013         	call	_LCD_DrawRect	;wreg free
 16796                           
 16797                           ;libraries/lcd_highlevel.c: 451:     LCD_DrawRect(x1+1, y1+1, x2-1, y1+2, 1, colorIn);
 16798  003220  0E01               	movlw	1
 16799  003222  2433               	addwf	LCD_ButtonUpdate@x1^0,w,c
 16800  003224  6E12               	movwf	LCD_DrawRect@posX1^0,c
 16801  003226  0E00               	movlw	0
 16802  003228  2034               	addwfc	(LCD_ButtonUpdate@x1+1)^0,w,c
 16803  00322A  6E13               	movwf	(LCD_DrawRect@posX1+1)^0,c
 16804  00322C  0E01               	movlw	1
 16805  00322E  2431               	addwf	LCD_ButtonUpdate@y1^0,w,c
 16806  003230  6E14               	movwf	LCD_DrawRect@posY1^0,c
 16807  003232  0E00               	movlw	0
 16808  003234  2032               	addwfc	(LCD_ButtonUpdate@y1+1)^0,w,c
 16809  003236  6E15               	movwf	(LCD_DrawRect@posY1+1)^0,c
 16810  003238  0EFF               	movlw	255
 16811  00323A  242F               	addwf	LCD_ButtonUpdate@x2^0,w,c
 16812  00323C  6E16               	movwf	LCD_DrawRect@posX2^0,c
 16813  00323E  0EFF               	movlw	255
 16814  003240  2030               	addwfc	(LCD_ButtonUpdate@x2+1)^0,w,c
 16815  003242  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 16816  003244  0E02               	movlw	2
 16817  003246  2431               	addwf	LCD_ButtonUpdate@y1^0,w,c
 16818  003248  6E18               	movwf	LCD_DrawRect@posY2^0,c
 16819  00324A  0E00               	movlw	0
 16820  00324C  2032               	addwfc	(LCD_ButtonUpdate@y1+1)^0,w,c
 16821  00324E  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 16822  003250  0E01               	movlw	1
 16823  003252  6E1A               	movwf	LCD_DrawRect@fill^0,c
 16824  003254  C02D  F01B         	movff	LCD_ButtonUpdate@colorIn,LCD_DrawRect@color
 16825  003258  C02E  F01C         	movff	LCD_ButtonUpdate@colorIn+1,LCD_DrawRect@color+1
 16826  00325C  EC36  F013         	call	_LCD_DrawRect	;wreg free
 16827                           
 16828                           ;libraries/lcd_highlevel.c: 452:     LCD_DrawRect(x1+1, y1+1, x1+2, y2-1, 1, colorIn);
 16829  003260  0E01               	movlw	1
 16830  003262  2433               	addwf	LCD_ButtonUpdate@x1^0,w,c
 16831  003264  6E12               	movwf	LCD_DrawRect@posX1^0,c
 16832  003266  0E00               	movlw	0
 16833  003268  2034               	addwfc	(LCD_ButtonUpdate@x1+1)^0,w,c
 16834  00326A  6E13               	movwf	(LCD_DrawRect@posX1+1)^0,c
 16835  00326C  0E01               	movlw	1
 16836  00326E  2431               	addwf	LCD_ButtonUpdate@y1^0,w,c
 16837  003270  6E14               	movwf	LCD_DrawRect@posY1^0,c
 16838  003272  0E00               	movlw	0
 16839  003274  2032               	addwfc	(LCD_ButtonUpdate@y1+1)^0,w,c
 16840  003276  6E15               	movwf	(LCD_DrawRect@posY1+1)^0,c
 16841  003278  0E02               	movlw	2
 16842  00327A  2433               	addwf	LCD_ButtonUpdate@x1^0,w,c
 16843  00327C  6E16               	movwf	LCD_DrawRect@posX2^0,c
 16844  00327E  0E00               	movlw	0
 16845  003280  2034               	addwfc	(LCD_ButtonUpdate@x1+1)^0,w,c
 16846  003282  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 16847  003284  0EFF               	movlw	255
 16848  003286  2435               	addwf	LCD_ButtonUpdate@y2^0,w,c
 16849  003288  6E18               	movwf	LCD_DrawRect@posY2^0,c
 16850  00328A  0EFF               	movlw	255
 16851  00328C  2036               	addwfc	(LCD_ButtonUpdate@y2+1)^0,w,c
 16852  00328E  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 16853  003290  0E01               	movlw	1
 16854  003292  6E1A               	movwf	LCD_DrawRect@fill^0,c
 16855  003294  C02D  F01B         	movff	LCD_ButtonUpdate@colorIn,LCD_DrawRect@color
 16856  003298  C02E  F01C         	movff	LCD_ButtonUpdate@colorIn+1,LCD_DrawRect@color+1
 16857  00329C  EC36  F013         	call	_LCD_DrawRect	;wreg free
 16858  0032A0  0012               	return		;funcret
 16859  0032A2                     __end_of_LCD_ButtonUpdate:
 16860                           	callstack 0
 16861                           
 16862 ;; *************** function _LCD_Read *****************
 16863 ;; Defined at:
 16864 ;;		line 64 in file "libraries/lcd_lowlevel.c"
 16865 ;; Parameters:    Size  Location     Type
 16866 ;;  posX            2   17[COMRAM] unsigned short 
 16867 ;;  posY            2   19[COMRAM] unsigned short 
 16868 ;; Auto vars:     Size  Location     Type
 16869 ;;  temp16          2   25[COMRAM] unsigned short 
 16870 ;;  color           2   23[COMRAM] unsigned short 
 16871 ;; Return value:  Size  Location     Type
 16872 ;;                  2   17[COMRAM] unsigned short 
 16873 ;; Registers used:
 16874 ;;		wreg, status,2, status,0
 16875 ;; Tracked objects:
 16876 ;;		On entry : 0/0
 16877 ;;		On exit  : 0/0
 16878 ;;		Unchanged: 0/0
 16879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16880 ;;      Params:         4       0       0       0       0       0       0
 16881 ;;      Locals:         4       0       0       0       0       0       0
 16882 ;;      Temps:          2       0       0       0       0       0       0
 16883 ;;      Totals:        10       0       0       0       0       0       0
 16884 ;;Total ram usage:       10 bytes
 16885 ;; Hardware stack levels used: 1
 16886 ;; Hardware stack levels required when called: 4
 16887 ;; This function calls:
 16888 ;;		Nothing
 16889 ;; This function is called by:
 16890 ;;		_LCD_ButtonUpdate
 16891 ;; This function uses a non-reentrant model
 16892 ;;
 16893                           
 16894                           	psect	text74
 16895  00399C                     __ptext74:
 16896                           	callstack 0
 16897  00399C                     _LCD_Read:
 16898                           	callstack 19
 16899                           
 16900                           ;libraries/lcd_lowlevel.c: 64: uint16_t LCD_Read(uint16_t posX, uint16_t posY);libraries
      +                          /lcd_lowlevel.c: 65: {;libraries/lcd_lowlevel.c: 66:  uint16_t temp16;;libraries/lcd_low
      +                          level.c: 67:   uint16_t color;;libraries/lcd_lowlevel.c: 70:   PORTA = 0x2A; LATC4 = 0; 
      +                          LATC3 = 0; LATC3 = 1; LATC4 = 1;;
 16901                           
 16902                           ;incstack = 0
 16903  00399C  0E2A               	movlw	42
 16904  00399E  6E80               	movwf	128,c	;volatile
 16905  0039A0  988B               	bcf	3979,4,c	;volatile
 16906  0039A2  968B               	bcf	3979,3,c	;volatile
 16907  0039A4  868B               	bsf	3979,3,c	;volatile
 16908  0039A6  888B               	bsf	3979,4,c	;volatile
 16909                           
 16910                           ;libraries/lcd_lowlevel.c: 71:   PORTA = posX>>8; LATC3 = 0; LATC3 = 1;;
 16911  0039A8  C013  FF80         	movff	LCD_Read@posX+1,3968	;volatile
 16912  0039AC  968B               	bcf	3979,3,c	;volatile
 16913  0039AE  868B               	bsf	3979,3,c	;volatile
 16914                           
 16915                           ;libraries/lcd_lowlevel.c: 72:   PORTA = posX; LATC3 = 0; LATC3 = 1;;
 16916  0039B0  C012  FF80         	movff	LCD_Read@posX,3968	;volatile
 16917  0039B4  968B               	bcf	3979,3,c	;volatile
 16918  0039B6  868B               	bsf	3979,3,c	;volatile
 16919                           
 16920                           ;libraries/lcd_lowlevel.c: 73:   PORTA = (240 -1) >> 8; LATC3 = 0; LATC3 = 1;;
 16921  0039B8  0E00               	movlw	0
 16922  0039BA  6E80               	movwf	128,c	;volatile
 16923  0039BC  968B               	bcf	3979,3,c	;volatile
 16924  0039BE  868B               	bsf	3979,3,c	;volatile
 16925                           
 16926                           ;libraries/lcd_lowlevel.c: 74:   PORTA = (240 -1); LATC3 = 0; LATC3 = 1;;
 16927  0039C0  0EEF               	movlw	239
 16928  0039C2  6E80               	movwf	128,c	;volatile
 16929  0039C4  968B               	bcf	3979,3,c	;volatile
 16930  0039C6  868B               	bsf	3979,3,c	;volatile
 16931                           
 16932                           ;libraries/lcd_lowlevel.c: 76:   PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 = 
      +                          1;;
 16933  0039C8  0E2B               	movlw	43
 16934  0039CA  6E80               	movwf	128,c	;volatile
 16935  0039CC  988B               	bcf	3979,4,c	;volatile
 16936  0039CE  968B               	bcf	3979,3,c	;volatile
 16937  0039D0  868B               	bsf	3979,3,c	;volatile
 16938  0039D2  888B               	bsf	3979,4,c	;volatile
 16939                           
 16940                           ;libraries/lcd_lowlevel.c: 77:   PORTA = posY>>8; LATC3 = 0; LATC3 = 1;;
 16941  0039D4  C015  FF80         	movff	LCD_Read@posY+1,3968	;volatile
 16942  0039D8  968B               	bcf	3979,3,c	;volatile
 16943  0039DA  868B               	bsf	3979,3,c	;volatile
 16944                           
 16945                           ;libraries/lcd_lowlevel.c: 78:   PORTA = posY; LATC3 = 0; LATC3 = 1;;
 16946  0039DC  C014  FF80         	movff	LCD_Read@posY,3968	;volatile
 16947  0039E0  968B               	bcf	3979,3,c	;volatile
 16948  0039E2  868B               	bsf	3979,3,c	;volatile
 16949                           
 16950                           ;libraries/lcd_lowlevel.c: 79:   PORTA = (320 -1) >> 8; LATC3 = 0; LATC3 = 1;;
 16951  0039E4  0E01               	movlw	1
 16952  0039E6  6E80               	movwf	128,c	;volatile
 16953  0039E8  968B               	bcf	3979,3,c	;volatile
 16954  0039EA  868B               	bsf	3979,3,c	;volatile
 16955                           
 16956                           ;libraries/lcd_lowlevel.c: 80:   PORTA = (320 -1); LATC3 = 0; LATC3 = 1;;
 16957  0039EC  0E3F               	movlw	63
 16958  0039EE  6E80               	movwf	128,c	;volatile
 16959  0039F0  968B               	bcf	3979,3,c	;volatile
 16960  0039F2  868B               	bsf	3979,3,c	;volatile
 16961                           
 16962                           ;libraries/lcd_lowlevel.c: 82:   PORTA = 0x2E; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 = 
      +                          1;;
 16963  0039F4  0E2E               	movlw	46
 16964  0039F6  6E80               	movwf	128,c	;volatile
 16965  0039F8  988B               	bcf	3979,4,c	;volatile
 16966  0039FA  968B               	bcf	3979,3,c	;volatile
 16967  0039FC  868B               	bsf	3979,3,c	;volatile
 16968  0039FE  888B               	bsf	3979,4,c	;volatile
 16969                           
 16970                           ;libraries/lcd_lowlevel.c: 83:  TRISA = 0xFF;
 16971  003A00  6892               	setf	146,c	;volatile
 16972                           
 16973                           ;libraries/lcd_lowlevel.c: 84:  LATC2 = 0;
 16974  003A02  948B               	bcf	3979,2,c	;volatile
 16975                           
 16976                           ;libraries/lcd_lowlevel.c: 85:   __nop();
 16977  003A04  F000               	nop	
 16978                           
 16979                           ;libraries/lcd_lowlevel.c: 86:  LATC2 = 1;
 16980  003A06  848B               	bsf	3979,2,c	;volatile
 16981                           
 16982                           ;libraries/lcd_lowlevel.c: 87:  TRISA = 0xFF;
 16983  003A08  6892               	setf	146,c	;volatile
 16984                           
 16985                           ;libraries/lcd_lowlevel.c: 88:  LATC2 = 0;
 16986  003A0A  948B               	bcf	3979,2,c	;volatile
 16987                           
 16988                           ;libraries/lcd_lowlevel.c: 89:   __nop();
 16989  003A0C  F000               	nop	
 16990                           
 16991                           ;libraries/lcd_lowlevel.c: 90:  temp16 = PORTA;
 16992  003A0E  CF80 F01A          	movff	3968,LCD_Read@temp16	;volatile
 16993  003A12  6A1B               	clrf	(LCD_Read@temp16+1)^0,c
 16994                           
 16995                           ;libraries/lcd_lowlevel.c: 91:  LATC2 = 1;
 16996  003A14  848B               	bsf	3979,2,c	;volatile
 16997                           
 16998                           ;libraries/lcd_lowlevel.c: 92:   temp16 = temp16 >> 3;
 16999  003A16  C01A  F016         	movff	LCD_Read@temp16,??_LCD_Read
 17000  003A1A  C01B  F017         	movff	LCD_Read@temp16+1,??_LCD_Read+1
 17001  003A1E  90D8               	bcf	status,0,c
 17002  003A20  3217               	rrcf	(??_LCD_Read+1)^0,f,c
 17003  003A22  3216               	rrcf	??_LCD_Read^0,f,c
 17004  003A24  90D8               	bcf	status,0,c
 17005  003A26  3217               	rrcf	(??_LCD_Read+1)^0,f,c
 17006  003A28  3216               	rrcf	??_LCD_Read^0,f,c
 17007  003A2A  90D8               	bcf	status,0,c
 17008  003A2C  3217               	rrcf	(??_LCD_Read+1)^0,f,c
 17009  003A2E  3216               	rrcf	??_LCD_Read^0,f,c
 17010  003A30  C016  F01A         	movff	??_LCD_Read,LCD_Read@temp16
 17011  003A34  C017  F01B         	movff	??_LCD_Read+1,LCD_Read@temp16+1
 17012                           
 17013                           ;libraries/lcd_lowlevel.c: 93:   color = temp16 << 11;
 17014  003A38  C01A  F016         	movff	LCD_Read@temp16,??_LCD_Read
 17015  003A3C  C01B  F017         	movff	LCD_Read@temp16+1,??_LCD_Read+1
 17016  003A40  0E0B               	movlw	11
 17017  003A42                     u3405:
 17018  003A42  90D8               	bcf	status,0,c
 17019  003A44  3616               	rlcf	??_LCD_Read^0,f,c
 17020  003A46  3617               	rlcf	(??_LCD_Read+1)^0,f,c
 17021  003A48  2EE8               	decfsz	wreg,f,c
 17022  003A4A  D7FB               	goto	u3405
 17023  003A4C  C016  F018         	movff	??_LCD_Read,LCD_Read@color
 17024  003A50  C017  F019         	movff	??_LCD_Read+1,LCD_Read@color+1
 17025                           
 17026                           ;libraries/lcd_lowlevel.c: 94:  LATC2 = 0;
 17027  003A54  948B               	bcf	3979,2,c	;volatile
 17028                           
 17029                           ;libraries/lcd_lowlevel.c: 95:   __nop();
 17030  003A56  F000               	nop	
 17031                           
 17032                           ;libraries/lcd_lowlevel.c: 96:  temp16 = PORTA;
 17033  003A58  CF80 F01A          	movff	3968,LCD_Read@temp16	;volatile
 17034  003A5C  6A1B               	clrf	(LCD_Read@temp16+1)^0,c
 17035                           
 17036                           ;libraries/lcd_lowlevel.c: 97:  LATC2 = 1;
 17037  003A5E  848B               	bsf	3979,2,c	;volatile
 17038                           
 17039                           ;libraries/lcd_lowlevel.c: 98:   temp16 = temp16 >> 2;
 17040  003A60  C01A  F016         	movff	LCD_Read@temp16,??_LCD_Read
 17041  003A64  C01B  F017         	movff	LCD_Read@temp16+1,??_LCD_Read+1
 17042  003A68  90D8               	bcf	status,0,c
 17043  003A6A  3217               	rrcf	(??_LCD_Read+1)^0,f,c
 17044  003A6C  3216               	rrcf	??_LCD_Read^0,f,c
 17045  003A6E  90D8               	bcf	status,0,c
 17046  003A70  3217               	rrcf	(??_LCD_Read+1)^0,f,c
 17047  003A72  3216               	rrcf	??_LCD_Read^0,f,c
 17048  003A74  C016  F01A         	movff	??_LCD_Read,LCD_Read@temp16
 17049  003A78  C017  F01B         	movff	??_LCD_Read+1,LCD_Read@temp16+1
 17050                           
 17051                           ;libraries/lcd_lowlevel.c: 99:   color |= temp16 << 5;
 17052  003A7C  C01A  F016         	movff	LCD_Read@temp16,??_LCD_Read
 17053  003A80  C01B  F017         	movff	LCD_Read@temp16+1,??_LCD_Read+1
 17054  003A84  0E05               	movlw	5
 17055  003A86                     u3415:
 17056  003A86  90D8               	bcf	status,0,c
 17057  003A88  3616               	rlcf	??_LCD_Read^0,f,c
 17058  003A8A  3617               	rlcf	(??_LCD_Read+1)^0,f,c
 17059  003A8C  2EE8               	decfsz	wreg,f,c
 17060  003A8E  D7FB               	goto	u3415
 17061  003A90  5016               	movf	??_LCD_Read^0,w,c
 17062  003A92  1218               	iorwf	LCD_Read@color^0,f,c
 17063  003A94  5017               	movf	(??_LCD_Read+1)^0,w,c
 17064  003A96  1219               	iorwf	(LCD_Read@color+1)^0,f,c
 17065                           
 17066                           ;libraries/lcd_lowlevel.c: 100:  LATC2 = 0;
 17067  003A98  948B               	bcf	3979,2,c	;volatile
 17068                           
 17069                           ;libraries/lcd_lowlevel.c: 101:   __nop();
 17070  003A9A  F000               	nop	
 17071                           
 17072                           ;libraries/lcd_lowlevel.c: 102:  temp16 |= PORTA;
 17073  003A9C  5080               	movf	128,w,c	;volatile
 17074  003A9E  121A               	iorwf	LCD_Read@temp16^0,f,c
 17075                           
 17076                           ;libraries/lcd_lowlevel.c: 103:  LATC2 = 1;
 17077  003AA0  848B               	bsf	3979,2,c	;volatile
 17078                           
 17079                           ;libraries/lcd_lowlevel.c: 104:   temp16 = temp16 >> 3;
 17080  003AA2  C01A  F016         	movff	LCD_Read@temp16,??_LCD_Read
 17081  003AA6  C01B  F017         	movff	LCD_Read@temp16+1,??_LCD_Read+1
 17082  003AAA  90D8               	bcf	status,0,c
 17083  003AAC  3217               	rrcf	(??_LCD_Read+1)^0,f,c
 17084  003AAE  3216               	rrcf	??_LCD_Read^0,f,c
 17085  003AB0  90D8               	bcf	status,0,c
 17086  003AB2  3217               	rrcf	(??_LCD_Read+1)^0,f,c
 17087  003AB4  3216               	rrcf	??_LCD_Read^0,f,c
 17088  003AB6  90D8               	bcf	status,0,c
 17089  003AB8  3217               	rrcf	(??_LCD_Read+1)^0,f,c
 17090  003ABA  3216               	rrcf	??_LCD_Read^0,f,c
 17091  003ABC  C016  F01A         	movff	??_LCD_Read,LCD_Read@temp16
 17092  003AC0  C017  F01B         	movff	??_LCD_Read+1,LCD_Read@temp16+1
 17093                           
 17094                           ;libraries/lcd_lowlevel.c: 105:   color |= temp16;
 17095  003AC4  501A               	movf	LCD_Read@temp16^0,w,c
 17096  003AC6  1218               	iorwf	LCD_Read@color^0,f,c
 17097  003AC8  501B               	movf	(LCD_Read@temp16+1)^0,w,c
 17098  003ACA  1219               	iorwf	(LCD_Read@color+1)^0,f,c
 17099                           
 17100                           ;libraries/lcd_lowlevel.c: 106:  TRISA = 0x00;
 17101  003ACC  0E00               	movlw	0
 17102  003ACE  6E92               	movwf	146,c	;volatile
 17103                           
 17104                           ;libraries/lcd_lowlevel.c: 107:  return color;
 17105  003AD0  C018  F012         	movff	LCD_Read@color,?_LCD_Read
 17106  003AD4  C019  F013         	movff	LCD_Read@color+1,?_LCD_Read+1
 17107  003AD8  0012               	return		;funcret
 17108  003ADA                     __end_of_LCD_Read:
 17109                           	callstack 0
 17110                           
 17111 ;; *************** function _LCD_Bitmap *****************
 17112 ;; Defined at:
 17113 ;;		line 823 in file "libraries/lcd_highlevel.c"
 17114 ;; Parameters:    Size  Location     Type
 17115 ;;  bmpPtr          2   38[COMRAM] PTR const unsigned char 
 17116 ;;		 -> STR_9(9), STR_8(2), STR_7(9), STR_6(11), 
 17117 ;;		 -> STR_5(9), STR_4(9), 
 17118 ;;  posX            2   40[COMRAM] unsigned short 
 17119 ;;  posY            2   42[COMRAM] unsigned short 
 17120 ;; Auto vars:     Size  Location     Type
 17121 ;;  bfOffBits       4    0[BANK0 ] unsigned long 
 17122 ;;  i               2   26[BANK0 ] unsigned short 
 17123 ;;  jumpColor       2   24[BANK0 ] unsigned short 
 17124 ;;  biWidth         2   22[BANK0 ] unsigned short 
 17125 ;;  newY            2   19[BANK0 ] unsigned short 
 17126 ;;  strPtr          2   17[BANK0 ] PTR struct .
 17127 ;;		 -> STR_9(9), STR_8(2), STR_7(9), STR_6(11), 
 17128 ;;		 -> STR_5(9), STR_4(9), 
 17129 ;;  color           2   15[BANK0 ] unsigned short 
 17130 ;;  curXPos         2   13[BANK0 ] unsigned short 
 17131 ;;  biHeight        2   11[BANK0 ] unsigned short 
 17132 ;;  colorTablePt    2    9[BANK0 ] PTR unsigned char 
 17133 ;;		 -> STR_9(9), STR_8(2), STR_7(9), STR_6(11), 
 17134 ;;		 -> STR_5(9), STR_4(9), 
 17135 ;;  curYPos         2    7[BANK0 ] unsigned short 
 17136 ;;  jumpCount       2    5[BANK0 ] unsigned short 
 17137 ;;  pixelCount      1   21[BANK0 ] unsigned char 
 17138 ;;  endOfImage      1    4[BANK0 ] unsigned char 
 17139 ;; Return value:  Size  Location     Type
 17140 ;;                  1    wreg      unsigned char 
 17141 ;; Registers used:
 17142 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17143 ;; Tracked objects:
 17144 ;;		On entry : 3F/0
 17145 ;;		On exit  : 3F/0
 17146 ;;		Unchanged: 0/0
 17147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17148 ;;      Params:         6       0       0       0       0       0       0
 17149 ;;      Locals:         0      28       0       0       0       0       0
 17150 ;;      Temps:          4       0       0       0       0       0       0
 17151 ;;      Totals:        10      28       0       0       0       0       0
 17152 ;;Total ram usage:       38 bytes
 17153 ;; Hardware stack levels used: 1
 17154 ;; Hardware stack levels required when called: 5
 17155 ;; This function calls:
 17156 ;;		_RGB2LCD
 17157 ;;		___lwdiv
 17158 ;;		___lwmod
 17159 ;;		___wmul
 17160 ;; This function is called by:
 17161 ;;		_LCD_ButtonDraw
 17162 ;; This function uses a non-reentrant model
 17163 ;;
 17164                           
 17165                           	psect	text75
 17166  00091A                     __ptext75:
 17167                           	callstack 0
 17168  00091A                     _LCD_Bitmap:
 17169                           	callstack 19
 17170                           
 17171                           ; BSR set to: 0
 17172                           ;libraries/lcd_highlevel.c: 823: uint8_t LCD_Bitmap(const uint8_t * bmpPtr, uint16_t pos
      +                          X, uint16_t posY);libraries/lcd_highlevel.c: 824: {;libraries/lcd_highlevel.c: 825:   ui
      +                          nt32_t bfOffBits;;libraries/lcd_highlevel.c: 826:   uint16_t biWidth, biHeight;;librarie
      +                          s/lcd_highlevel.c: 827:   uint8_t * colorTablePtr;;libraries/lcd_highlevel.c: 828:   uin
      +                          t8_t endOfImage;;libraries/lcd_highlevel.c: 829:   uint16_t i,curXPos,curYPos;;libraries
      +                          /lcd_highlevel.c: 830:   uint8_t pixelCount;;libraries/lcd_highlevel.c: 831:   uint16_t 
      +                          color;
 17173                           
 17174                           ;incstack = 0
 17175  00091A  C027  F0BB         	movff	LCD_Bitmap@bmpPtr,LCD_Bitmap@strPtr
 17176  00091E  C028  F0BC         	movff	LCD_Bitmap@bmpPtr+1,LCD_Bitmap@strPtr+1
 17177                           
 17178                           ; BSR set to: 0
 17179                           ;libraries/lcd_highlevel.c: 839:   bfOffBits = strPtr->bfOffBits;
 17180  000922  0E0A               	movlw	10
 17181  000924  25BB               	addwf	LCD_Bitmap@strPtr& (0+255),w,b
 17182  000926  6E2D               	movwf	??_LCD_Bitmap^0,c
 17183  000928  0E00               	movlw	0
 17184  00092A  21BC               	addwfc	(LCD_Bitmap@strPtr+1)& (0+255),w,b
 17185  00092C  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17186  00092E  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 17187  000932  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 17188  000936                     	if	0	;tblptru may be non-zero
 17189  000936                     	endif
 17190  000936                     	if	0	;tblptru may be non-zero
 17191  000936                     	endif
 17192  000936  0009               	tblrd		*+
 17193  000938  CFF5 F0AA          	movff	tablat,LCD_Bitmap@bfOffBits
 17194  00093C  0009               	tblrd		*+
 17195  00093E  CFF5 F0AB          	movff	tablat,LCD_Bitmap@bfOffBits+1
 17196  000942  0009               	tblrd		*+
 17197  000944  CFF5 F0AC          	movff	tablat,LCD_Bitmap@bfOffBits+2
 17198  000948  000A               	tblrd		*-
 17199  00094A  CFF5 F0AD          	movff	tablat,LCD_Bitmap@bfOffBits+3
 17200                           
 17201                           ; BSR set to: 0
 17202                           ;libraries/lcd_highlevel.c: 840:   biWidth = strPtr->biWidth;
 17203  00094E  0E12               	movlw	18
 17204  000950  25BB               	addwf	LCD_Bitmap@strPtr& (0+255),w,b
 17205  000952  6E2D               	movwf	??_LCD_Bitmap^0,c
 17206  000954  0E00               	movlw	0
 17207  000956  21BC               	addwfc	(LCD_Bitmap@strPtr+1)& (0+255),w,b
 17208  000958  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17209  00095A  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 17210  00095E  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 17211  000962                     	if	0	;tblptru may be non-zero
 17212  000962                     	endif
 17213  000962                     	if	0	;tblptru may be non-zero
 17214  000962                     	endif
 17215  000962  0009               	tblrd		*+
 17216  000964  CFF5 F0C0          	movff	tablat,LCD_Bitmap@biWidth
 17217  000968  000A               	tblrd		*-
 17218  00096A  CFF5 F0C1          	movff	tablat,LCD_Bitmap@biWidth+1
 17219                           
 17220                           ; BSR set to: 0
 17221                           ;libraries/lcd_highlevel.c: 841:   biHeight = strPtr->biHeight;
 17222  00096E  0E16               	movlw	22
 17223  000970  25BB               	addwf	LCD_Bitmap@strPtr& (0+255),w,b
 17224  000972  6E2D               	movwf	??_LCD_Bitmap^0,c
 17225  000974  0E00               	movlw	0
 17226  000976  21BC               	addwfc	(LCD_Bitmap@strPtr+1)& (0+255),w,b
 17227  000978  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17228  00097A  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 17229  00097E  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 17230  000982                     	if	0	;tblptru may be non-zero
 17231  000982                     	endif
 17232  000982                     	if	0	;tblptru may be non-zero
 17233  000982                     	endif
 17234  000982  0009               	tblrd		*+
 17235  000984  CFF5 F0B5          	movff	tablat,LCD_Bitmap@biHeight
 17236  000988  000A               	tblrd		*-
 17237  00098A  CFF5 F0B6          	movff	tablat,LCD_Bitmap@biHeight+1
 17238                           
 17239                           ; BSR set to: 0
 17240                           ;libraries/lcd_highlevel.c: 842:   if((strPtr->biBitCount != 8) ||
 17241  00098E  0E1C               	movlw	28
 17242  000990  25BB               	addwf	LCD_Bitmap@strPtr& (0+255),w,b
 17243  000992  6E2D               	movwf	??_LCD_Bitmap^0,c
 17244  000994  0E00               	movlw	0
 17245  000996  21BC               	addwfc	(LCD_Bitmap@strPtr+1)& (0+255),w,b
 17246  000998  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17247  00099A  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 17248  00099E  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 17249  0009A2                     	if	0	;tblptru may be non-zero
 17250  0009A2                     	endif
 17251  0009A2                     	if	0	;tblptru may be non-zero
 17252  0009A2                     	endif
 17253  0009A2  0009               	tblrd		*+
 17254  0009A4  0E08               	movlw	8
 17255  0009A6  18F5               	xorwf	tablat,w,c
 17256  0009A8  0009               	tblrd		*+
 17257  0009AA  10F5               	iorwf	tablat,w,c
 17258  0009AC  A4D8               	btfss	status,2,c
 17259  0009AE  0012               	return	
 17260                           
 17261                           ; BSR set to: 0
 17262  0009B0  0E1E               	movlw	30
 17263  0009B2  25BB               	addwf	LCD_Bitmap@strPtr& (0+255),w,b
 17264  0009B4  6E2D               	movwf	??_LCD_Bitmap^0,c
 17265  0009B6  0E00               	movlw	0
 17266  0009B8  21BC               	addwfc	(LCD_Bitmap@strPtr+1)& (0+255),w,b
 17267  0009BA  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17268  0009BC  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 17269  0009C0  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 17270  0009C4                     	if	0	;tblptru may be non-zero
 17271  0009C4                     	endif
 17272  0009C4                     	if	0	;tblptru may be non-zero
 17273  0009C4                     	endif
 17274  0009C4  0009               	tblrd		*+
 17275  0009C6  04F5               	decf	tablat,w,c
 17276  0009C8  0009               	tblrd		*+
 17277  0009CA  10F5               	iorwf	tablat,w,c
 17278  0009CC  0009               	tblrd		*+
 17279  0009CE  10F5               	iorwf	tablat,w,c
 17280  0009D0  0009               	tblrd		*+
 17281  0009D2  10F5               	iorwf	tablat,w,c
 17282  0009D4  A4D8               	btfss	status,2,c
 17283  0009D6  0012               	return	
 17284                           
 17285                           ; BSR set to: 0
 17286                           ;libraries/lcd_highlevel.c: 847:   if(((posX + biWidth) > (240)) ||
 17287  0009D8  51C0               	movf	LCD_Bitmap@biWidth& (0+255),w,b
 17288  0009DA  2429               	addwf	LCD_Bitmap@posX^0,w,c
 17289  0009DC  6E2D               	movwf	??_LCD_Bitmap^0,c
 17290  0009DE  51C1               	movf	(LCD_Bitmap@biWidth+1)& (0+255),w,b
 17291  0009E0  202A               	addwfc	(LCD_Bitmap@posX+1)^0,w,c
 17292  0009E2  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17293  0009E4  502E               	movf	(??_LCD_Bitmap+1)^0,w,c
 17294  0009E6  E103               	bnz	u3861
 17295  0009E8  0EF1               	movlw	241
 17296  0009EA  5C2D               	subwf	??_LCD_Bitmap^0,w,c
 17297  0009EC  B0D8               	btfsc	status,0,c
 17298  0009EE                     u3861:
 17299  0009EE  0012               	return	
 17300                           
 17301                           ; BSR set to: 0
 17302  0009F0  51B5               	movf	LCD_Bitmap@biHeight& (0+255),w,b
 17303  0009F2  242B               	addwf	LCD_Bitmap@posY^0,w,c
 17304  0009F4  6E2D               	movwf	??_LCD_Bitmap^0,c
 17305  0009F6  51B6               	movf	(LCD_Bitmap@biHeight+1)& (0+255),w,b
 17306  0009F8  202C               	addwfc	(LCD_Bitmap@posY+1)^0,w,c
 17307  0009FA  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17308  0009FC  0E41               	movlw	65
 17309  0009FE  5C2D               	subwf	??_LCD_Bitmap^0,w,c
 17310  000A00  0E01               	movlw	1
 17311  000A02  582E               	subwfb	(??_LCD_Bitmap+1)^0,w,c
 17312  000A04  B0D8               	btfsc	status,0,c
 17313  000A06  0012               	return	
 17314                           
 17315                           ; BSR set to: 0
 17316                           ;libraries/lcd_highlevel.c: 853:   PORTA = 0x36; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
 17317  000A08  0E36               	movlw	54
 17318  000A0A  6E80               	movwf	128,c	;volatile
 17319                           
 17320                           ; BSR set to: 0
 17321  000A0C  988B               	bcf	3979,4,c	;volatile
 17322                           
 17323                           ; BSR set to: 0
 17324  000A0E  968B               	bcf	3979,3,c	;volatile
 17325                           
 17326                           ; BSR set to: 0
 17327  000A10  868B               	bsf	3979,3,c	;volatile
 17328                           
 17329                           ; BSR set to: 0
 17330  000A12  888B               	bsf	3979,4,c	;volatile
 17331                           
 17332                           ;libraries/lcd_highlevel.c: 855:   PORTA = 0b10000000; LATC3 = 0; LATC3 = 1;;
 17333  000A14  0E80               	movlw	128
 17334  000A16  6E80               	movwf	128,c	;volatile
 17335                           
 17336                           ; BSR set to: 0
 17337  000A18  968B               	bcf	3979,3,c	;volatile
 17338                           
 17339                           ; BSR set to: 0
 17340  000A1A  868B               	bsf	3979,3,c	;volatile
 17341                           
 17342                           ; BSR set to: 0
 17343                           ;libraries/lcd_highlevel.c: 857:   colorTablePtr = (uint8_t *)bmpPtr + 54;
 17344  000A1C  0E36               	movlw	54
 17345  000A1E  2427               	addwf	LCD_Bitmap@bmpPtr^0,w,c
 17346  000A20  6FB3               	movwf	LCD_Bitmap@colorTablePtr& (0+255),b
 17347  000A22  0E00               	movlw	0
 17348  000A24  2028               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,w,c
 17349  000A26  6FB4               	movwf	(LCD_Bitmap@colorTablePtr+1)& (0+255),b
 17350                           
 17351                           ; BSR set to: 0
 17352                           ;libraries/lcd_highlevel.c: 858:   bmpPtr += bfOffBits;
 17353  000A28  51AA               	movf	LCD_Bitmap@bfOffBits& (0+255),w,b
 17354  000A2A  2627               	addwf	LCD_Bitmap@bmpPtr^0,f,c
 17355  000A2C  51AB               	movf	(LCD_Bitmap@bfOffBits+1)& (0+255),w,b
 17356  000A2E  2228               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,f,c
 17357                           
 17358                           ;libraries/lcd_highlevel.c: 859:   endOfImage = 0;
 17359  000A30  0E00               	movlw	0
 17360  000A32  6FAE               	movwf	LCD_Bitmap@endOfImage& (0+255),b
 17361                           
 17362                           ; BSR set to: 0
 17363                           ;libraries/lcd_highlevel.c: 860:   jumpColor = RGB2LCD(colorTablePtr);
 17364  000A34  C0B3  F012         	movff	LCD_Bitmap@colorTablePtr,RGB2LCD@colorTableEntry
 17365  000A38  C0B4  F013         	movff	LCD_Bitmap@colorTablePtr+1,RGB2LCD@colorTableEntry+1
 17366  000A3C  ECF5  F023         	call	_RGB2LCD	;wreg free
 17367  000A40  C012  F0C2         	movff	?_RGB2LCD,LCD_Bitmap@jumpColor
 17368  000A44  C013  F0C3         	movff	?_RGB2LCD+1,LCD_Bitmap@jumpColor+1
 17369                           
 17370                           ; BSR set to: 0
 17371                           ;libraries/lcd_highlevel.c: 862:   PORTA = 0x2A; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
 17372  000A48  0E2A               	movlw	42
 17373  000A4A  6E80               	movwf	128,c	;volatile
 17374                           
 17375                           ; BSR set to: 0
 17376  000A4C  988B               	bcf	3979,4,c	;volatile
 17377                           
 17378                           ; BSR set to: 0
 17379  000A4E  968B               	bcf	3979,3,c	;volatile
 17380                           
 17381                           ; BSR set to: 0
 17382  000A50  868B               	bsf	3979,3,c	;volatile
 17383                           
 17384                           ; BSR set to: 0
 17385  000A52  888B               	bsf	3979,4,c	;volatile
 17386                           
 17387                           ; BSR set to: 0
 17388                           ;libraries/lcd_highlevel.c: 863:   PORTA = posX>>8; LATC3 = 0; LATC3 = 1;;
 17389  000A54  C02A  FF80         	movff	LCD_Bitmap@posX+1,3968	;volatile
 17390                           
 17391                           ; BSR set to: 0
 17392  000A58  968B               	bcf	3979,3,c	;volatile
 17393                           
 17394                           ; BSR set to: 0
 17395  000A5A  868B               	bsf	3979,3,c	;volatile
 17396                           
 17397                           ; BSR set to: 0
 17398                           ;libraries/lcd_highlevel.c: 864:   PORTA = posX; LATC3 = 0; LATC3 = 1;;
 17399  000A5C  C029  FF80         	movff	LCD_Bitmap@posX,3968	;volatile
 17400                           
 17401                           ; BSR set to: 0
 17402  000A60  968B               	bcf	3979,3,c	;volatile
 17403                           
 17404                           ; BSR set to: 0
 17405  000A62  868B               	bsf	3979,3,c	;volatile
 17406                           
 17407                           ; BSR set to: 0
 17408                           ;libraries/lcd_highlevel.c: 865:   posX = posX + biWidth-1;
 17409  000A64  51C0               	movf	LCD_Bitmap@biWidth& (0+255),w,b
 17410  000A66  2429               	addwf	LCD_Bitmap@posX^0,w,c
 17411  000A68  6E2D               	movwf	??_LCD_Bitmap^0,c
 17412  000A6A  51C1               	movf	(LCD_Bitmap@biWidth+1)& (0+255),w,b
 17413  000A6C  202A               	addwfc	(LCD_Bitmap@posX+1)^0,w,c
 17414  000A6E  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17415  000A70  0EFF               	movlw	255
 17416  000A72  242D               	addwf	??_LCD_Bitmap^0,w,c
 17417  000A74  6E29               	movwf	LCD_Bitmap@posX^0,c
 17418  000A76  0EFF               	movlw	255
 17419  000A78  202E               	addwfc	(??_LCD_Bitmap+1)^0,w,c
 17420  000A7A  6E2A               	movwf	(LCD_Bitmap@posX+1)^0,c
 17421                           
 17422                           ; BSR set to: 0
 17423                           ;libraries/lcd_highlevel.c: 866:   PORTA = posX>>8; LATC3 = 0; LATC3 = 1;;
 17424  000A7C  C02A  FF80         	movff	LCD_Bitmap@posX+1,3968	;volatile
 17425                           
 17426                           ; BSR set to: 0
 17427  000A80  968B               	bcf	3979,3,c	;volatile
 17428                           
 17429                           ; BSR set to: 0
 17430  000A82  868B               	bsf	3979,3,c	;volatile
 17431                           
 17432                           ; BSR set to: 0
 17433                           ;libraries/lcd_highlevel.c: 867:   PORTA = posX; LATC3 = 0; LATC3 = 1;;
 17434  000A84  C029  FF80         	movff	LCD_Bitmap@posX,3968	;volatile
 17435                           
 17436                           ; BSR set to: 0
 17437  000A88  968B               	bcf	3979,3,c	;volatile
 17438                           
 17439                           ; BSR set to: 0
 17440  000A8A  868B               	bsf	3979,3,c	;volatile
 17441                           
 17442                           ; BSR set to: 0
 17443                           ;libraries/lcd_highlevel.c: 869:   PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
 17444  000A8C  0E2B               	movlw	43
 17445  000A8E  6E80               	movwf	128,c	;volatile
 17446                           
 17447                           ; BSR set to: 0
 17448  000A90  988B               	bcf	3979,4,c	;volatile
 17449                           
 17450                           ; BSR set to: 0
 17451  000A92  968B               	bcf	3979,3,c	;volatile
 17452                           
 17453                           ; BSR set to: 0
 17454  000A94  868B               	bsf	3979,3,c	;volatile
 17455                           
 17456                           ; BSR set to: 0
 17457  000A96  888B               	bsf	3979,4,c	;volatile
 17458                           
 17459                           ; BSR set to: 0
 17460                           ;libraries/lcd_highlevel.c: 870:   newY = 320 - posY - biHeight;
 17461  000A98  C02B  F02D         	movff	LCD_Bitmap@posY,??_LCD_Bitmap
 17462  000A9C  C02C  F02E         	movff	LCD_Bitmap@posY+1,??_LCD_Bitmap+1
 17463  000AA0  1E2D               	comf	??_LCD_Bitmap^0,f,c
 17464  000AA2  1E2E               	comf	(??_LCD_Bitmap+1)^0,f,c
 17465  000AA4  4A2D               	infsnz	??_LCD_Bitmap^0,f,c
 17466  000AA6  2A2E               	incf	(??_LCD_Bitmap+1)^0,f,c
 17467  000AA8  51B5               	movf	LCD_Bitmap@biHeight& (0+255),w,b
 17468  000AAA  5E2D               	subwf	??_LCD_Bitmap^0,f,c
 17469  000AAC  51B6               	movf	(LCD_Bitmap@biHeight+1)& (0+255),w,b
 17470  000AAE  5A2E               	subwfb	(??_LCD_Bitmap+1)^0,f,c
 17471  000AB0  0E40               	movlw	64
 17472  000AB2  242D               	addwf	??_LCD_Bitmap^0,w,c
 17473  000AB4  6FBD               	movwf	LCD_Bitmap@newY& (0+255),b
 17474  000AB6  0E01               	movlw	1
 17475  000AB8  202E               	addwfc	(??_LCD_Bitmap+1)^0,w,c
 17476  000ABA  6FBE               	movwf	(LCD_Bitmap@newY+1)& (0+255),b
 17477                           
 17478                           ; BSR set to: 0
 17479                           ;libraries/lcd_highlevel.c: 871:   PORTA = newY>>8; LATC3 = 0; LATC3 = 1;;
 17480  000ABC  C0BE  FF80         	movff	LCD_Bitmap@newY+1,3968	;volatile
 17481                           
 17482                           ; BSR set to: 0
 17483  000AC0  968B               	bcf	3979,3,c	;volatile
 17484                           
 17485                           ; BSR set to: 0
 17486  000AC2  868B               	bsf	3979,3,c	;volatile
 17487                           
 17488                           ; BSR set to: 0
 17489                           ;libraries/lcd_highlevel.c: 872:   PORTA = newY; LATC3 = 0; LATC3 = 1;;
 17490  000AC4  C0BD  FF80         	movff	LCD_Bitmap@newY,3968	;volatile
 17491                           
 17492                           ; BSR set to: 0
 17493  000AC8  968B               	bcf	3979,3,c	;volatile
 17494                           
 17495                           ; BSR set to: 0
 17496  000ACA  868B               	bsf	3979,3,c	;volatile
 17497                           
 17498                           ; BSR set to: 0
 17499                           ;libraries/lcd_highlevel.c: 873:   newY = newY + biHeight-1;
 17500  000ACC  51B5               	movf	LCD_Bitmap@biHeight& (0+255),w,b
 17501  000ACE  25BD               	addwf	LCD_Bitmap@newY& (0+255),w,b
 17502  000AD0  6E2D               	movwf	??_LCD_Bitmap^0,c
 17503  000AD2  51B6               	movf	(LCD_Bitmap@biHeight+1)& (0+255),w,b
 17504  000AD4  21BE               	addwfc	(LCD_Bitmap@newY+1)& (0+255),w,b
 17505  000AD6  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17506  000AD8  0EFF               	movlw	255
 17507  000ADA  242D               	addwf	??_LCD_Bitmap^0,w,c
 17508  000ADC  6FBD               	movwf	LCD_Bitmap@newY& (0+255),b
 17509  000ADE  0EFF               	movlw	255
 17510  000AE0  202E               	addwfc	(??_LCD_Bitmap+1)^0,w,c
 17511  000AE2  6FBE               	movwf	(LCD_Bitmap@newY+1)& (0+255),b
 17512                           
 17513                           ; BSR set to: 0
 17514                           ;libraries/lcd_highlevel.c: 874:   PORTA = newY>>8; LATC3 = 0; LATC3 = 1;;
 17515  000AE4  C0BE  FF80         	movff	LCD_Bitmap@newY+1,3968	;volatile
 17516                           
 17517                           ; BSR set to: 0
 17518  000AE8  968B               	bcf	3979,3,c	;volatile
 17519                           
 17520                           ; BSR set to: 0
 17521  000AEA  868B               	bsf	3979,3,c	;volatile
 17522                           
 17523                           ; BSR set to: 0
 17524                           ;libraries/lcd_highlevel.c: 875:   PORTA = newY; LATC3 = 0; LATC3 = 1;;
 17525  000AEC  C0BD  FF80         	movff	LCD_Bitmap@newY,3968	;volatile
 17526                           
 17527                           ; BSR set to: 0
 17528  000AF0  968B               	bcf	3979,3,c	;volatile
 17529                           
 17530                           ; BSR set to: 0
 17531  000AF2  868B               	bsf	3979,3,c	;volatile
 17532                           
 17533                           ; BSR set to: 0
 17534                           ;libraries/lcd_highlevel.c: 877:   PORTA = 0x2C; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
 17535  000AF4  0E2C               	movlw	44
 17536  000AF6  6E80               	movwf	128,c	;volatile
 17537                           
 17538                           ; BSR set to: 0
 17539  000AF8  988B               	bcf	3979,4,c	;volatile
 17540                           
 17541                           ; BSR set to: 0
 17542  000AFA  968B               	bcf	3979,3,c	;volatile
 17543                           
 17544                           ; BSR set to: 0
 17545  000AFC  868B               	bsf	3979,3,c	;volatile
 17546                           
 17547                           ; BSR set to: 0
 17548  000AFE  888B               	bsf	3979,4,c	;volatile
 17549                           
 17550                           ; BSR set to: 0
 17551                           ;libraries/lcd_highlevel.c: 878:   curXPos = 0;
 17552  000B00  0E00               	movlw	0
 17553  000B02  6FB8               	movwf	(LCD_Bitmap@curXPos+1)& (0+255),b
 17554  000B04  0E00               	movlw	0
 17555  000B06  6FB7               	movwf	LCD_Bitmap@curXPos& (0+255),b
 17556                           
 17557                           ; BSR set to: 0
 17558                           ;libraries/lcd_highlevel.c: 879:   curYPos = 0;
 17559  000B08  0E00               	movlw	0
 17560  000B0A  6FB2               	movwf	(LCD_Bitmap@curYPos+1)& (0+255),b
 17561  000B0C  0E00               	movlw	0
 17562  000B0E  6FB1               	movwf	LCD_Bitmap@curYPos& (0+255),b
 17563  000B10                     l6314:
 17564                           
 17565                           ; BSR set to: 0
 17566                           ;libraries/lcd_highlevel.c: 881:   {;libraries/lcd_highlevel.c: 882:     if(bmpPtr[0] ==
      +                           0)
 17567  000B10  C027  FFF6         	movff	LCD_Bitmap@bmpPtr,tblptrl
 17568  000B14  C028  FFF7         	movff	LCD_Bitmap@bmpPtr+1,tblptrh
 17569  000B18                     	if	0	;tblptru may be non-zero
 17570  000B18                     	endif
 17571  000B18                     	if	0	;tblptru may be non-zero
 17572  000B18                     	endif
 17573  000B18  0008               	tblrd		*
 17574  000B1A  50F5               	movf	tablat,w,c
 17575  000B1C  0900               	iorlw	0
 17576  000B1E  B4D8               	btfsc	status,2,c
 17577  000B20  D128               	goto	l6400
 17578  000B22  D144               	goto	l6402
 17579  000B24                     l6318:
 17580                           
 17581                           ; BSR set to: 0
 17582                           ;libraries/lcd_highlevel.c: 887:           bmpPtr += 2;
 17583  000B24  0E02               	movlw	2
 17584  000B26  2627               	addwf	LCD_Bitmap@bmpPtr^0,f,c
 17585  000B28  0E00               	movlw	0
 17586  000B2A  2228               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,f,c
 17587                           
 17588                           ; BSR set to: 0
 17589                           ;libraries/lcd_highlevel.c: 888:           for(i=0;i<biWidth - curXPos;i++)
 17590  000B2C  0E00               	movlw	0
 17591  000B2E  6FC5               	movwf	(LCD_Bitmap@i+1)& (0+255),b
 17592  000B30  0E00               	movlw	0
 17593  000B32  6FC4               	movwf	LCD_Bitmap@i& (0+255),b
 17594  000B34  D00A               	goto	l6324
 17595  000B36                     l340:
 17596                           
 17597                           ; BSR set to: 0
 17598                           ;libraries/lcd_highlevel.c: 889:           {;libraries/lcd_highlevel.c: 890:            
      +                           PORTA = jumpColor >> 8; LATC3 = 0; LATC3 = 1;;
 17599  000B36  C0C3  FF80         	movff	LCD_Bitmap@jumpColor+1,3968	;volatile
 17600  000B3A  968B               	bcf	3979,3,c	;volatile
 17601  000B3C  868B               	bsf	3979,3,c	;volatile
 17602                           
 17603                           ;libraries/lcd_highlevel.c: 891:             PORTA = jumpColor; LATC3 = 0; LATC3 = 1;;
 17604  000B3E  C0C2  FF80         	movff	LCD_Bitmap@jumpColor,3968	;volatile
 17605  000B42  968B               	bcf	3979,3,c	;volatile
 17606  000B44  868B               	bsf	3979,3,c	;volatile
 17607                           
 17608                           ; BSR set to: 0
 17609                           ;libraries/lcd_highlevel.c: 892:           }
 17610  000B46  4BC4               	infsnz	LCD_Bitmap@i& (0+255),f,b
 17611  000B48  2BC5               	incf	(LCD_Bitmap@i+1)& (0+255),f,b
 17612  000B4A                     l6324:
 17613                           
 17614                           ; BSR set to: 0
 17615  000B4A  51B7               	movf	LCD_Bitmap@curXPos& (0+255),w,b
 17616  000B4C  5DC0               	subwf	LCD_Bitmap@biWidth& (0+255),w,b
 17617  000B4E  6E2D               	movwf	??_LCD_Bitmap^0,c
 17618  000B50  51B8               	movf	(LCD_Bitmap@curXPos+1)& (0+255),w,b
 17619  000B52  59C1               	subwfb	(LCD_Bitmap@biWidth+1)& (0+255),w,b
 17620  000B54  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17621  000B56  502D               	movf	??_LCD_Bitmap^0,w,c
 17622  000B58  5DC4               	subwf	LCD_Bitmap@i& (0+255),w,b
 17623  000B5A  502E               	movf	(??_LCD_Bitmap+1)^0,w,c
 17624  000B5C  59C5               	subwfb	(LCD_Bitmap@i+1)& (0+255),w,b
 17625  000B5E  A0D8               	btfss	status,0,c
 17626  000B60  D7EA               	goto	l340
 17627                           
 17628                           ; BSR set to: 0
 17629                           ;libraries/lcd_highlevel.c: 893:           curXPos = 0;
 17630  000B62  0E00               	movlw	0
 17631  000B64  6FB8               	movwf	(LCD_Bitmap@curXPos+1)& (0+255),b
 17632  000B66  0E00               	movlw	0
 17633  000B68  6FB7               	movwf	LCD_Bitmap@curXPos& (0+255),b
 17634                           
 17635                           ; BSR set to: 0
 17636                           ;libraries/lcd_highlevel.c: 894:           curYPos++;
 17637  000B6A  4BB1               	infsnz	LCD_Bitmap@curYPos& (0+255),f,b
 17638  000B6C  2BB2               	incf	(LCD_Bitmap@curYPos+1)& (0+255),f,b
 17639                           
 17640                           ;libraries/lcd_highlevel.c: 895:         break;
 17641  000B6E  D160               	goto	l6426
 17642  000B70                     l6330:
 17643                           
 17644                           ; BSR set to: 0
 17645                           ;libraries/lcd_highlevel.c: 897:           for(i=0;i<biWidth - curXPos;i++)
 17646  000B70  0E00               	movlw	0
 17647  000B72  6FC5               	movwf	(LCD_Bitmap@i+1)& (0+255),b
 17648  000B74  0E00               	movlw	0
 17649  000B76  6FC4               	movwf	LCD_Bitmap@i& (0+255),b
 17650  000B78  D00A               	goto	l6334
 17651  000B7A                     l345:
 17652                           
 17653                           ; BSR set to: 0
 17654                           ;libraries/lcd_highlevel.c: 898:           {;libraries/lcd_highlevel.c: 899:            
      +                           PORTA = jumpColor >> 8; LATC3 = 0; LATC3 = 1;;
 17655  000B7A  C0C3  FF80         	movff	LCD_Bitmap@jumpColor+1,3968	;volatile
 17656  000B7E  968B               	bcf	3979,3,c	;volatile
 17657  000B80  868B               	bsf	3979,3,c	;volatile
 17658                           
 17659                           ;libraries/lcd_highlevel.c: 900:             PORTA = jumpColor; LATC3 = 0; LATC3 = 1;;
 17660  000B82  C0C2  FF80         	movff	LCD_Bitmap@jumpColor,3968	;volatile
 17661  000B86  968B               	bcf	3979,3,c	;volatile
 17662  000B88  868B               	bsf	3979,3,c	;volatile
 17663                           
 17664                           ; BSR set to: 0
 17665                           ;libraries/lcd_highlevel.c: 901:           }
 17666  000B8A  4BC4               	infsnz	LCD_Bitmap@i& (0+255),f,b
 17667  000B8C  2BC5               	incf	(LCD_Bitmap@i+1)& (0+255),f,b
 17668  000B8E                     l6334:
 17669                           
 17670                           ; BSR set to: 0
 17671  000B8E  51B7               	movf	LCD_Bitmap@curXPos& (0+255),w,b
 17672  000B90  5DC0               	subwf	LCD_Bitmap@biWidth& (0+255),w,b
 17673  000B92  6E2D               	movwf	??_LCD_Bitmap^0,c
 17674  000B94  51B8               	movf	(LCD_Bitmap@curXPos+1)& (0+255),w,b
 17675  000B96  59C1               	subwfb	(LCD_Bitmap@biWidth+1)& (0+255),w,b
 17676  000B98  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17677  000B9A  502D               	movf	??_LCD_Bitmap^0,w,c
 17678  000B9C  5DC4               	subwf	LCD_Bitmap@i& (0+255),w,b
 17679  000B9E  502E               	movf	(??_LCD_Bitmap+1)^0,w,c
 17680  000BA0  59C5               	subwfb	(LCD_Bitmap@i+1)& (0+255),w,b
 17681  000BA2  A0D8               	btfss	status,0,c
 17682  000BA4  D7EA               	goto	l345
 17683                           
 17684                           ; BSR set to: 0
 17685                           ;libraries/lcd_highlevel.c: 902:           for(i=0;i<(biHeight - curYPos -1)*biWidth;i++
      +                          )
 17686  000BA6  0E00               	movlw	0
 17687  000BA8  6FC5               	movwf	(LCD_Bitmap@i+1)& (0+255),b
 17688  000BAA  0E00               	movlw	0
 17689  000BAC  6FC4               	movwf	LCD_Bitmap@i& (0+255),b
 17690  000BAE  D00A               	goto	l6340
 17691  000BB0                     l348:
 17692                           
 17693                           ; BSR set to: 0
 17694                           ;libraries/lcd_highlevel.c: 903:           {;libraries/lcd_highlevel.c: 904:            
      +                           PORTA = jumpColor >> 8; LATC3 = 0; LATC3 = 1;;
 17695  000BB0  C0C3  FF80         	movff	LCD_Bitmap@jumpColor+1,3968	;volatile
 17696  000BB4  968B               	bcf	3979,3,c	;volatile
 17697  000BB6  868B               	bsf	3979,3,c	;volatile
 17698                           
 17699                           ;libraries/lcd_highlevel.c: 905:             PORTA = jumpColor; LATC3 = 0; LATC3 = 1;;
 17700  000BB8  C0C2  FF80         	movff	LCD_Bitmap@jumpColor,3968	;volatile
 17701  000BBC  968B               	bcf	3979,3,c	;volatile
 17702  000BBE  868B               	bsf	3979,3,c	;volatile
 17703                           
 17704                           ; BSR set to: 0
 17705                           ;libraries/lcd_highlevel.c: 906:           }
 17706  000BC0  4BC4               	infsnz	LCD_Bitmap@i& (0+255),f,b
 17707  000BC2  2BC5               	incf	(LCD_Bitmap@i+1)& (0+255),f,b
 17708  000BC4                     l6340:
 17709                           
 17710                           ; BSR set to: 0
 17711  000BC4  51B1               	movf	LCD_Bitmap@curYPos& (0+255),w,b
 17712  000BC6  5DB5               	subwf	LCD_Bitmap@biHeight& (0+255),w,b
 17713  000BC8  6E2D               	movwf	??_LCD_Bitmap^0,c
 17714  000BCA  51B2               	movf	(LCD_Bitmap@curYPos+1)& (0+255),w,b
 17715  000BCC  59B6               	subwfb	(LCD_Bitmap@biHeight+1)& (0+255),w,b
 17716  000BCE  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17717  000BD0  0EFF               	movlw	255
 17718  000BD2  242D               	addwf	??_LCD_Bitmap^0,w,c
 17719  000BD4  6E1A               	movwf	___wmul@multiplier^0,c
 17720  000BD6  0EFF               	movlw	255
 17721  000BD8  202E               	addwfc	(??_LCD_Bitmap+1)^0,w,c
 17722  000BDA  6E1B               	movwf	(___wmul@multiplier+1)^0,c
 17723  000BDC  C0C0  F01C         	movff	LCD_Bitmap@biWidth,___wmul@multiplicand
 17724  000BE0  C0C1  F01D         	movff	LCD_Bitmap@biWidth+1,___wmul@multiplicand+1
 17725  000BE4  ECA6  F02C         	call	___wmul	;wreg free
 17726  000BE8  501A               	movf	?___wmul^0,w,c
 17727  000BEA  0100               	movlb	0	; () banked
 17728  000BEC  5DC4               	subwf	LCD_Bitmap@i& (0+255),w,b
 17729  000BEE  501B               	movf	(?___wmul+1)^0,w,c
 17730  000BF0  59C5               	subwfb	(LCD_Bitmap@i+1)& (0+255),w,b
 17731  000BF2  A0D8               	btfss	status,0,c
 17732  000BF4  D7DD               	goto	l348
 17733                           
 17734                           ; BSR set to: 0
 17735                           ;libraries/lcd_highlevel.c: 907:           endOfImage = 1;
 17736  000BF6  0E01               	movlw	1
 17737  000BF8  6FAE               	movwf	LCD_Bitmap@endOfImage& (0+255),b
 17738                           
 17739                           ;libraries/lcd_highlevel.c: 908:         break;
 17740  000BFA  D11A               	goto	l6426
 17741  000BFC                     l6344:
 17742                           
 17743                           ; BSR set to: 0
 17744                           ;libraries/lcd_highlevel.c: 910:           jumpCount = bmpPtr[2] + (bmpPtr[3]*biWidth);
 17745  000BFC  0E03               	movlw	3
 17746  000BFE  2427               	addwf	LCD_Bitmap@bmpPtr^0,w,c
 17747  000C00  6E2D               	movwf	??_LCD_Bitmap^0,c
 17748  000C02  0E00               	movlw	0
 17749  000C04  2028               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,w,c
 17750  000C06  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17751  000C08  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 17752  000C0C  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 17753  000C10                     	if	0	;tblptru may be non-zero
 17754  000C10                     	endif
 17755  000C10                     	if	0	;tblptru may be non-zero
 17756  000C10                     	endif
 17757  000C10  0008               	tblrd		*
 17758  000C12  50F5               	movf	tablat,w,c
 17759  000C14  6E1A               	movwf	___wmul@multiplier^0,c
 17760  000C16  6A1B               	clrf	(___wmul@multiplier+1)^0,c
 17761  000C18  C0C0  F01C         	movff	LCD_Bitmap@biWidth,___wmul@multiplicand
 17762  000C1C  C0C1  F01D         	movff	LCD_Bitmap@biWidth+1,___wmul@multiplicand+1
 17763  000C20  ECA6  F02C         	call	___wmul	;wreg free
 17764  000C24  0E02               	movlw	2
 17765  000C26  2427               	addwf	LCD_Bitmap@bmpPtr^0,w,c
 17766  000C28  6E2F               	movwf	(??_LCD_Bitmap+2)^0,c
 17767  000C2A  0E00               	movlw	0
 17768  000C2C  2028               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,w,c
 17769  000C2E  6E30               	movwf	(??_LCD_Bitmap+3)^0,c
 17770  000C30  C02F  FFF6         	movff	??_LCD_Bitmap+2,tblptrl
 17771  000C34  C030  FFF7         	movff	??_LCD_Bitmap+3,tblptrh
 17772  000C38                     	if	0	;tblptru may be non-zero
 17773  000C38                     	endif
 17774  000C38                     	if	0	;tblptru may be non-zero
 17775  000C38                     	endif
 17776  000C38  0008               	tblrd		*
 17777  000C3A  50F5               	movf	tablat,w,c
 17778  000C3C  241A               	addwf	?___wmul^0,w,c
 17779  000C3E  0100               	movlb	0	; () banked
 17780  000C40  6FAF               	movwf	LCD_Bitmap@jumpCount& (0+255),b
 17781  000C42  0E00               	movlw	0
 17782  000C44  201B               	addwfc	(?___wmul+1)^0,w,c
 17783  000C46  6FB0               	movwf	(LCD_Bitmap@jumpCount+1)& (0+255),b
 17784                           
 17785                           ; BSR set to: 0
 17786                           ;libraries/lcd_highlevel.c: 911:           for(i=0;i<jumpCount;i++)
 17787  000C48  0E00               	movlw	0
 17788  000C4A  6FC5               	movwf	(LCD_Bitmap@i+1)& (0+255),b
 17789  000C4C  0E00               	movlw	0
 17790  000C4E  6FC4               	movwf	LCD_Bitmap@i& (0+255),b
 17791  000C50  D00C               	goto	l6362
 17792  000C52                     l6348:
 17793                           
 17794                           ; BSR set to: 0
 17795                           ;libraries/lcd_highlevel.c: 912:           {;libraries/lcd_highlevel.c: 913:            
      +                           curXPos++;
 17796  000C52  4BB7               	infsnz	LCD_Bitmap@curXPos& (0+255),f,b
 17797  000C54  2BB8               	incf	(LCD_Bitmap@curXPos+1)& (0+255),f,b
 17798                           
 17799                           ; BSR set to: 0
 17800                           ;libraries/lcd_highlevel.c: 914:             PORTA = jumpColor >> 8; LATC3 = 0; LATC3 = 
      +                          1;;
 17801  000C56  C0C3  FF80         	movff	LCD_Bitmap@jumpColor+1,3968	;volatile
 17802                           
 17803                           ; BSR set to: 0
 17804  000C5A  968B               	bcf	3979,3,c	;volatile
 17805                           
 17806                           ; BSR set to: 0
 17807  000C5C  868B               	bsf	3979,3,c	;volatile
 17808                           
 17809                           ; BSR set to: 0
 17810                           ;libraries/lcd_highlevel.c: 915:             PORTA = jumpColor; LATC3 = 0; LATC3 = 1;;
 17811  000C5E  C0C2  FF80         	movff	LCD_Bitmap@jumpColor,3968	;volatile
 17812                           
 17813                           ; BSR set to: 0
 17814  000C62  968B               	bcf	3979,3,c	;volatile
 17815                           
 17816                           ; BSR set to: 0
 17817  000C64  868B               	bsf	3979,3,c	;volatile
 17818                           
 17819                           ;libraries/lcd_highlevel.c: 916:           }
 17820  000C66  4BC4               	infsnz	LCD_Bitmap@i& (0+255),f,b
 17821  000C68  2BC5               	incf	(LCD_Bitmap@i+1)& (0+255),f,b
 17822  000C6A                     l6362:
 17823                           
 17824                           ; BSR set to: 0
 17825  000C6A  51AF               	movf	LCD_Bitmap@jumpCount& (0+255),w,b
 17826  000C6C  5DC4               	subwf	LCD_Bitmap@i& (0+255),w,b
 17827  000C6E  51B0               	movf	(LCD_Bitmap@jumpCount+1)& (0+255),w,b
 17828  000C70  59C5               	subwfb	(LCD_Bitmap@i+1)& (0+255),w,b
 17829  000C72  A0D8               	btfss	status,0,c
 17830  000C74  D7EE               	goto	l6348
 17831                           
 17832                           ; BSR set to: 0
 17833                           ;libraries/lcd_highlevel.c: 917:           curYPos = curYPos + (jumpCount / biWidth);
 17834  000C76  C0AF  F020         	movff	LCD_Bitmap@jumpCount,___lwdiv@dividend
 17835  000C7A  C0B0  F021         	movff	LCD_Bitmap@jumpCount+1,___lwdiv@dividend+1
 17836  000C7E  C0C0  F022         	movff	LCD_Bitmap@biWidth,___lwdiv@divisor
 17837  000C82  C0C1  F023         	movff	LCD_Bitmap@biWidth+1,___lwdiv@divisor+1
 17838  000C86  EC28  F02A         	call	___lwdiv	;wreg free
 17839  000C8A  0100               	movlb	0	; () banked
 17840  000C8C  51B1               	movf	LCD_Bitmap@curYPos& (0+255),w,b
 17841  000C8E  2420               	addwf	?___lwdiv^0,w,c
 17842  000C90  6FB1               	movwf	LCD_Bitmap@curYPos& (0+255),b
 17843  000C92  51B2               	movf	(LCD_Bitmap@curYPos+1)& (0+255),w,b
 17844  000C94  2021               	addwfc	(?___lwdiv+1)^0,w,c
 17845  000C96  6FB2               	movwf	(LCD_Bitmap@curYPos+1)& (0+255),b
 17846                           
 17847                           ;libraries/lcd_highlevel.c: 918:           curXPos = curXPos % biWidth;
 17848  000C98  C0B7  F012         	movff	LCD_Bitmap@curXPos,___lwmod@dividend
 17849  000C9C  C0B8  F013         	movff	LCD_Bitmap@curXPos+1,___lwmod@dividend+1
 17850  000CA0  C0C0  F014         	movff	LCD_Bitmap@biWidth,___lwmod@divisor
 17851  000CA4  C0C1  F015         	movff	LCD_Bitmap@biWidth+1,___lwmod@divisor+1
 17852  000CA8  EC2B  F02B         	call	___lwmod	;wreg free
 17853  000CAC  C012  F0B7         	movff	?___lwmod,LCD_Bitmap@curXPos
 17854  000CB0  C013  F0B8         	movff	?___lwmod+1,LCD_Bitmap@curXPos+1
 17855                           
 17856                           ; BSR set to: 0
 17857                           ;libraries/lcd_highlevel.c: 919:           bmpPtr += 4;
 17858  000CB4  0E04               	movlw	4
 17859  000CB6  D0B9               	goto	L12
 17860  000CB8                     l6368:
 17861                           
 17862                           ; BSR set to: 0
 17863                           ;libraries/lcd_highlevel.c: 922:           pixelCount = bmpPtr[1];
 17864  000CB8  0E01               	movlw	1
 17865  000CBA  2427               	addwf	LCD_Bitmap@bmpPtr^0,w,c
 17866  000CBC  6E2D               	movwf	??_LCD_Bitmap^0,c
 17867  000CBE  0E00               	movlw	0
 17868  000CC0  2028               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,w,c
 17869  000CC2  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17870  000CC4  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 17871  000CC8  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 17872  000CCC                     	if	0	;tblptru may be non-zero
 17873  000CCC                     	endif
 17874  000CCC                     	if	0	;tblptru may be non-zero
 17875  000CCC                     	endif
 17876  000CCC  0008               	tblrd		*
 17877  000CCE  CFF5 F0BF          	movff	tablat,LCD_Bitmap@pixelCount
 17878                           
 17879                           ; BSR set to: 0
 17880                           ;libraries/lcd_highlevel.c: 923:           for(i=0;i < pixelCount;i++)
 17881  000CD2  0E00               	movlw	0
 17882  000CD4  6FC5               	movwf	(LCD_Bitmap@i+1)& (0+255),b
 17883  000CD6  0E00               	movlw	0
 17884  000CD8  6FC4               	movwf	LCD_Bitmap@i& (0+255),b
 17885  000CDA  D02D               	goto	l6390
 17886  000CDC                     l6372:
 17887                           
 17888                           ; BSR set to: 0
 17889                           ;libraries/lcd_highlevel.c: 924:           {;libraries/lcd_highlevel.c: 925:            
      +                           color = RGB2LCD(colorTablePtr+(bmpPtr[2+i]*4));
 17890  000CDC  51C4               	movf	LCD_Bitmap@i& (0+255),w,b
 17891  000CDE  2427               	addwf	LCD_Bitmap@bmpPtr^0,w,c
 17892  000CE0  6E2D               	movwf	??_LCD_Bitmap^0,c
 17893  000CE2  51C5               	movf	(LCD_Bitmap@i+1)& (0+255),w,b
 17894  000CE4  2028               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,w,c
 17895  000CE6  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 17896  000CE8  0E02               	movlw	2
 17897  000CEA  262D               	addwf	??_LCD_Bitmap^0,f,c
 17898  000CEC  0E00               	movlw	0
 17899  000CEE  222E               	addwfc	(??_LCD_Bitmap+1)^0,f,c
 17900  000CF0  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 17901  000CF4  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 17902  000CF8                     	if	0	;tblptru may be non-zero
 17903  000CF8                     	endif
 17904  000CF8                     	if	0	;tblptru may be non-zero
 17905  000CF8                     	endif
 17906  000CF8  0008               	tblrd		*
 17907  000CFA  50F5               	movf	tablat,w,c
 17908  000CFC  0D04               	mullw	4
 17909  000CFE  CFF3 F02F          	movff	prodl,??_LCD_Bitmap+2
 17910  000D02  CFF4 F030          	movff	prodh,??_LCD_Bitmap+3
 17911  000D06  502F               	movf	(??_LCD_Bitmap+2)^0,w,c
 17912  000D08  25B3               	addwf	LCD_Bitmap@colorTablePtr& (0+255),w,b
 17913  000D0A  6E12               	movwf	RGB2LCD@colorTableEntry^0,c
 17914  000D0C  5030               	movf	(??_LCD_Bitmap+3)^0,w,c
 17915  000D0E  21B4               	addwfc	(LCD_Bitmap@colorTablePtr+1)& (0+255),w,b
 17916  000D10  6E13               	movwf	(RGB2LCD@colorTableEntry+1)^0,c
 17917  000D12  ECF5  F023         	call	_RGB2LCD	;wreg free
 17918  000D16  C012  F0B9         	movff	?_RGB2LCD,LCD_Bitmap@color
 17919  000D1A  C013  F0BA         	movff	?_RGB2LCD+1,LCD_Bitmap@color+1
 17920                           
 17921                           ; BSR set to: 0
 17922                           ;libraries/lcd_highlevel.c: 926:             curXPos++;
 17923  000D1E  4BB7               	infsnz	LCD_Bitmap@curXPos& (0+255),f,b
 17924  000D20  2BB8               	incf	(LCD_Bitmap@curXPos+1)& (0+255),f,b
 17925                           
 17926                           ; BSR set to: 0
 17927                           ;libraries/lcd_highlevel.c: 927:             PORTA = color >> 8; LATC3 = 0; LATC3 = 1;;
 17928  000D22  C0BA  FF80         	movff	LCD_Bitmap@color+1,3968	;volatile
 17929                           
 17930                           ; BSR set to: 0
 17931  000D26  968B               	bcf	3979,3,c	;volatile
 17932                           
 17933                           ; BSR set to: 0
 17934  000D28  868B               	bsf	3979,3,c	;volatile
 17935                           
 17936                           ; BSR set to: 0
 17937                           ;libraries/lcd_highlevel.c: 928:             PORTA = color; LATC3 = 0; LATC3 = 1;;
 17938  000D2A  C0B9  FF80         	movff	LCD_Bitmap@color,3968	;volatile
 17939                           
 17940                           ; BSR set to: 0
 17941  000D2E  968B               	bcf	3979,3,c	;volatile
 17942                           
 17943                           ; BSR set to: 0
 17944  000D30  868B               	bsf	3979,3,c	;volatile
 17945                           
 17946                           ; BSR set to: 0
 17947                           ;libraries/lcd_highlevel.c: 929:           }
 17948  000D32  4BC4               	infsnz	LCD_Bitmap@i& (0+255),f,b
 17949  000D34  2BC5               	incf	(LCD_Bitmap@i+1)& (0+255),f,b
 17950  000D36                     l6390:
 17951                           
 17952                           ; BSR set to: 0
 17953  000D36  51BF               	movf	LCD_Bitmap@pixelCount& (0+255),w,b
 17954  000D38  6E2D               	movwf	??_LCD_Bitmap^0,c
 17955  000D3A  6A2E               	clrf	(??_LCD_Bitmap+1)^0,c
 17956  000D3C  502D               	movf	??_LCD_Bitmap^0,w,c
 17957  000D3E  5DC4               	subwf	LCD_Bitmap@i& (0+255),w,b
 17958  000D40  502E               	movf	(??_LCD_Bitmap+1)^0,w,c
 17959  000D42  59C5               	subwfb	(LCD_Bitmap@i+1)& (0+255),w,b
 17960  000D44  A0D8               	btfss	status,0,c
 17961  000D46  D7CA               	goto	l6372
 17962                           
 17963                           ; BSR set to: 0
 17964                           ;libraries/lcd_highlevel.c: 930:           if(pixelCount < 255)
 17965  000D48  29BF               	incf	LCD_Bitmap@pixelCount& (0+255),w,b
 17966  000D4A  B4D8               	btfsc	status,2,c
 17967  000D4C  D00E               	goto	l6396
 17968                           
 17969                           ; BSR set to: 0
 17970                           ;libraries/lcd_highlevel.c: 931:           {;libraries/lcd_highlevel.c: 932:            
      +                           pixelCount = (pixelCount+1) & 0xFE;
 17971  000D4E  29BF               	incf	LCD_Bitmap@pixelCount& (0+255),w,b
 17972  000D50  0BFE               	andlw	254
 17973  000D52  6FBF               	movwf	LCD_Bitmap@pixelCount& (0+255),b
 17974                           
 17975                           ;libraries/lcd_highlevel.c: 933:             bmpPtr+=pixelCount+2;
 17976  000D54  51BF               	movf	LCD_Bitmap@pixelCount& (0+255),w,b
 17977  000D56  6E2D               	movwf	??_LCD_Bitmap^0,c
 17978  000D58  6A2E               	clrf	(??_LCD_Bitmap+1)^0,c
 17979  000D5A  0E02               	movlw	2
 17980  000D5C  262D               	addwf	??_LCD_Bitmap^0,f,c
 17981  000D5E  0E00               	movlw	0
 17982  000D60  222E               	addwfc	(??_LCD_Bitmap+1)^0,f,c
 17983  000D62  502D               	movf	??_LCD_Bitmap^0,w,c
 17984  000D64  2627               	addwf	LCD_Bitmap@bmpPtr^0,f,c
 17985  000D66  502E               	movf	(??_LCD_Bitmap+1)^0,w,c
 17986  000D68  D062               	goto	L13
 17987  000D6A                     l6396:
 17988                           
 17989                           ; BSR set to: 0
 17990                           ;libraries/lcd_highlevel.c: 936:           {;libraries/lcd_highlevel.c: 937:            
      +                             bmpPtr += 258;
 17991  000D6A  0E02               	movlw	2
 17992  000D6C  2627               	addwf	LCD_Bitmap@bmpPtr^0,f,c
 17993  000D6E  0E01               	movlw	1
 17994  000D70  D05E               	goto	L13
 17995  000D72                     l6400:
 17996                           
 17997                           ; BSR set to: 0
 17998  000D72  0E01               	movlw	1
 17999  000D74  2427               	addwf	LCD_Bitmap@bmpPtr^0,w,c
 18000  000D76  6E2D               	movwf	??_LCD_Bitmap^0,c
 18001  000D78  0E00               	movlw	0
 18002  000D7A  2028               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,w,c
 18003  000D7C  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 18004  000D7E  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 18005  000D82  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 18006  000D86                     	if	0	;tblptru may be non-zero
 18007  000D86                     	endif
 18008  000D86                     	if	0	;tblptru may be non-zero
 18009  000D86                     	endif
 18010  000D86  0008               	tblrd		*
 18011  000D88  50F5               	movf	tablat,w,c
 18012  000D8A  6E2F               	movwf	(??_LCD_Bitmap+2)^0,c
 18013  000D8C  6A30               	clrf	(??_LCD_Bitmap+3)^0,c
 18014                           
 18015                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18016                           ; Switch size 1, requested type "simple"
 18017                           ; Number of cases is 1, Range of values is 0 to 0
 18018                           ; switch strategies available:
 18019                           ; Name         Instructions Cycles
 18020                           ; simple_byte            4     3 (average)
 18021                           ;	Chosen strategy is simple_byte
 18022  000D8E  5030               	movf	(??_LCD_Bitmap+3)^0,w,c
 18023  000D90  0A00               	xorlw	0	; case 0
 18024  000D92  A4D8               	btfss	status,2,c
 18025  000D94  D791               	goto	l6368
 18026                           
 18027                           ; BSR set to: 0
 18028                           ; Switch size 1, requested type "simple"
 18029                           ; Number of cases is 3, Range of values is 0 to 2
 18030                           ; switch strategies available:
 18031                           ; Name         Instructions Cycles
 18032                           ; simple_byte           10     6 (average)
 18033                           ;	Chosen strategy is simple_byte
 18034  000D96  502F               	movf	(??_LCD_Bitmap+2)^0,w,c
 18035  000D98  0A00               	xorlw	0	; case 0
 18036  000D9A  B4D8               	btfsc	status,2,c
 18037  000D9C  D6C3               	goto	l6318
 18038  000D9E  0A01               	xorlw	1	; case 1
 18039  000DA0  B4D8               	btfsc	status,2,c
 18040  000DA2  D6E6               	goto	l6330
 18041  000DA4  0A03               	xorlw	3	; case 2
 18042  000DA6  B4D8               	btfsc	status,2,c
 18043  000DA8  D729               	goto	l6344
 18044  000DAA  D786               	goto	l6368
 18045  000DAC                     l6402:
 18046                           
 18047                           ; BSR set to: 0
 18048                           ;libraries/lcd_highlevel.c: 943:     {;libraries/lcd_highlevel.c: 944:       pixelCount 
      +                          = bmpPtr[0];
 18049  000DAC  C027  FFF6         	movff	LCD_Bitmap@bmpPtr,tblptrl
 18050  000DB0  C028  FFF7         	movff	LCD_Bitmap@bmpPtr+1,tblptrh
 18051  000DB4                     	if	0	;tblptru may be non-zero
 18052  000DB4                     	endif
 18053  000DB4                     	if	0	;tblptru may be non-zero
 18054  000DB4                     	endif
 18055  000DB4  0008               	tblrd		*
 18056  000DB6  CFF5 F0BF          	movff	tablat,LCD_Bitmap@pixelCount
 18057                           
 18058                           ; BSR set to: 0
 18059                           ;libraries/lcd_highlevel.c: 945:       color = RGB2LCD(colorTablePtr+(bmpPtr[1]*4));
 18060  000DBA  0E01               	movlw	1
 18061  000DBC  2427               	addwf	LCD_Bitmap@bmpPtr^0,w,c
 18062  000DBE  6E2D               	movwf	??_LCD_Bitmap^0,c
 18063  000DC0  0E00               	movlw	0
 18064  000DC2  2028               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,w,c
 18065  000DC4  6E2E               	movwf	(??_LCD_Bitmap+1)^0,c
 18066  000DC6  C02D  FFF6         	movff	??_LCD_Bitmap,tblptrl
 18067  000DCA  C02E  FFF7         	movff	??_LCD_Bitmap+1,tblptrh
 18068  000DCE                     	if	0	;tblptru may be non-zero
 18069  000DCE                     	endif
 18070  000DCE                     	if	0	;tblptru may be non-zero
 18071  000DCE                     	endif
 18072  000DCE  0008               	tblrd		*
 18073  000DD0  50F5               	movf	tablat,w,c
 18074  000DD2  0D04               	mullw	4
 18075  000DD4  CFF3 F02F          	movff	prodl,??_LCD_Bitmap+2
 18076  000DD8  CFF4 F030          	movff	prodh,??_LCD_Bitmap+3
 18077  000DDC  502F               	movf	(??_LCD_Bitmap+2)^0,w,c
 18078  000DDE  25B3               	addwf	LCD_Bitmap@colorTablePtr& (0+255),w,b
 18079  000DE0  6E12               	movwf	RGB2LCD@colorTableEntry^0,c
 18080  000DE2  5030               	movf	(??_LCD_Bitmap+3)^0,w,c
 18081  000DE4  21B4               	addwfc	(LCD_Bitmap@colorTablePtr+1)& (0+255),w,b
 18082  000DE6  6E13               	movwf	(RGB2LCD@colorTableEntry+1)^0,c
 18083  000DE8  ECF5  F023         	call	_RGB2LCD	;wreg free
 18084  000DEC  C012  F0B9         	movff	?_RGB2LCD,LCD_Bitmap@color
 18085  000DF0  C013  F0BA         	movff	?_RGB2LCD+1,LCD_Bitmap@color+1
 18086                           
 18087                           ; BSR set to: 0
 18088                           ;libraries/lcd_highlevel.c: 946:       for(i=0;i < pixelCount;i++)
 18089  000DF4  0E00               	movlw	0
 18090  000DF6  6FC5               	movwf	(LCD_Bitmap@i+1)& (0+255),b
 18091  000DF8  0E00               	movlw	0
 18092  000DFA  6FC4               	movwf	LCD_Bitmap@i& (0+255),b
 18093  000DFC  D00C               	goto	l6422
 18094  000DFE                     l6408:
 18095                           
 18096                           ; BSR set to: 0
 18097                           ;libraries/lcd_highlevel.c: 947:       {;libraries/lcd_highlevel.c: 948:         curXPos
      +                          ++;
 18098  000DFE  4BB7               	infsnz	LCD_Bitmap@curXPos& (0+255),f,b
 18099  000E00  2BB8               	incf	(LCD_Bitmap@curXPos+1)& (0+255),f,b
 18100                           
 18101                           ; BSR set to: 0
 18102                           ;libraries/lcd_highlevel.c: 949:         PORTA = color >> 8; LATC3 = 0; LATC3 = 1;;
 18103  000E02  C0BA  FF80         	movff	LCD_Bitmap@color+1,3968	;volatile
 18104                           
 18105                           ; BSR set to: 0
 18106  000E06  968B               	bcf	3979,3,c	;volatile
 18107                           
 18108                           ; BSR set to: 0
 18109  000E08  868B               	bsf	3979,3,c	;volatile
 18110                           
 18111                           ; BSR set to: 0
 18112                           ;libraries/lcd_highlevel.c: 950:         PORTA = color; LATC3 = 0; LATC3 = 1;;
 18113  000E0A  C0B9  FF80         	movff	LCD_Bitmap@color,3968	;volatile
 18114                           
 18115                           ; BSR set to: 0
 18116  000E0E  968B               	bcf	3979,3,c	;volatile
 18117                           
 18118                           ; BSR set to: 0
 18119  000E10  868B               	bsf	3979,3,c	;volatile
 18120                           
 18121                           ;libraries/lcd_highlevel.c: 951:       }
 18122  000E12  4BC4               	infsnz	LCD_Bitmap@i& (0+255),f,b
 18123  000E14  2BC5               	incf	(LCD_Bitmap@i+1)& (0+255),f,b
 18124  000E16                     l6422:
 18125                           
 18126                           ; BSR set to: 0
 18127  000E16  51BF               	movf	LCD_Bitmap@pixelCount& (0+255),w,b
 18128  000E18  6E2D               	movwf	??_LCD_Bitmap^0,c
 18129  000E1A  6A2E               	clrf	(??_LCD_Bitmap+1)^0,c
 18130  000E1C  502D               	movf	??_LCD_Bitmap^0,w,c
 18131  000E1E  5DC4               	subwf	LCD_Bitmap@i& (0+255),w,b
 18132  000E20  502E               	movf	(??_LCD_Bitmap+1)^0,w,c
 18133  000E22  59C5               	subwfb	(LCD_Bitmap@i+1)& (0+255),w,b
 18134  000E24  A0D8               	btfss	status,0,c
 18135  000E26  D7EB               	goto	l6408
 18136                           
 18137                           ; BSR set to: 0
 18138                           ;libraries/lcd_highlevel.c: 952:       bmpPtr+=2;
 18139  000E28  0E02               	movlw	2
 18140  000E2A                     L12:
 18141  000E2A  2627               	addwf	LCD_Bitmap@bmpPtr^0,f,c
 18142  000E2C  0E00               	movlw	0
 18143  000E2E                     L13:
 18144  000E2E  2228               	addwfc	(LCD_Bitmap@bmpPtr+1)^0,f,c
 18145  000E30                     l6426:
 18146                           
 18147                           ; BSR set to: 0
 18148                           ;libraries/lcd_highlevel.c: 954:   }while(endOfImage == 0);
 18149  000E30  51AE               	movf	LCD_Bitmap@endOfImage& (0+255),w,b
 18150  000E32  B4D8               	btfsc	status,2,c
 18151  000E34  D66D               	goto	l6314
 18152                           
 18153                           ; BSR set to: 0
 18154                           ;libraries/lcd_highlevel.c: 955:   PORTA = 0x36; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 
      +                          = 1;;
 18155  000E36  0E36               	movlw	54
 18156  000E38  6E80               	movwf	128,c	;volatile
 18157                           
 18158                           ; BSR set to: 0
 18159  000E3A  988B               	bcf	3979,4,c	;volatile
 18160                           
 18161                           ; BSR set to: 0
 18162  000E3C  968B               	bcf	3979,3,c	;volatile
 18163                           
 18164                           ; BSR set to: 0
 18165  000E3E  868B               	bsf	3979,3,c	;volatile
 18166                           
 18167                           ; BSR set to: 0
 18168  000E40  888B               	bsf	3979,4,c	;volatile
 18169                           
 18170                           ;libraries/lcd_highlevel.c: 957:   PORTA = 0b00000000; LATC3 = 0; LATC3 = 1;;
 18171  000E42  0E00               	movlw	0
 18172  000E44  6E80               	movwf	128,c	;volatile
 18173                           
 18174                           ; BSR set to: 0
 18175  000E46  968B               	bcf	3979,3,c	;volatile
 18176                           
 18177                           ; BSR set to: 0
 18178  000E48  868B               	bsf	3979,3,c	;volatile
 18179                           
 18180                           ; BSR set to: 0
 18181  000E4A  0012               	return		;funcret
 18182  000E4C                     __end_of_LCD_Bitmap:
 18183                           	callstack 0
 18184                           
 18185 ;; *************** function ___wmul *****************
 18186 ;; Defined at:
 18187 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul16.c"
 18188 ;; Parameters:    Size  Location     Type
 18189 ;;  multiplier      2   25[COMRAM] unsigned int 
 18190 ;;  multiplicand    2   27[COMRAM] unsigned int 
 18191 ;; Auto vars:     Size  Location     Type
 18192 ;;  product         2   29[COMRAM] unsigned int 
 18193 ;; Return value:  Size  Location     Type
 18194 ;;                  2   25[COMRAM] unsigned int 
 18195 ;; Registers used:
 18196 ;;		wreg, status,2, status,0, prodl, prodh
 18197 ;; Tracked objects:
 18198 ;;		On entry : 0/0
 18199 ;;		On exit  : 0/0
 18200 ;;		Unchanged: 0/0
 18201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18202 ;;      Params:         4       0       0       0       0       0       0
 18203 ;;      Locals:         2       0       0       0       0       0       0
 18204 ;;      Temps:          0       0       0       0       0       0       0
 18205 ;;      Totals:         6       0       0       0       0       0       0
 18206 ;;Total ram usage:        6 bytes
 18207 ;; Hardware stack levels used: 1
 18208 ;; Hardware stack levels required when called: 4
 18209 ;; This function calls:
 18210 ;;		Nothing
 18211 ;; This function is called by:
 18212 ;;		_LCD_SliderUpdate
 18213 ;;		_LCD_DrawText
 18214 ;;		_LCD_Bitmap
 18215 ;;		_touchScreenController
 18216 ;;		_gameControllerSM
 18217 ;;		_gameControllerController
 18218 ;;		_XF_init
 18219 ;;		_desactivateTimerSleep
 18220 ;; This function uses a non-reentrant model
 18221 ;;
 18222                           
 18223                           	psect	text76
 18224  00594C                     __ptext76:
 18225                           	callstack 0
 18226  00594C                     ___wmul:
 18227                           	callstack 22
 18228                           
 18229                           ; BSR set to: 0
 18230                           ;incstack = 0
 18231  00594C  501A               	movf	___wmul@multiplier^0,w,c
 18232  00594E  021C               	mulwf	___wmul@multiplicand^0,c
 18233  005950  CFF3 F01E          	movff	prodl,___wmul@product
 18234  005954  CFF4 F01F          	movff	prodh,___wmul@product+1
 18235  005958  501A               	movf	___wmul@multiplier^0,w,c
 18236  00595A  021D               	mulwf	(___wmul@multiplicand+1)^0,c
 18237  00595C  50F3               	movf	243,w,c
 18238  00595E  261F               	addwf	(___wmul@product+1)^0,f,c
 18239  005960  501B               	movf	(___wmul@multiplier+1)^0,w,c
 18240  005962  021C               	mulwf	___wmul@multiplicand^0,c
 18241  005964  50F3               	movf	243,w,c
 18242  005966  261F               	addwf	(___wmul@product+1)^0,f,c
 18243  005968  C01E  F01A         	movff	___wmul@product,?___wmul
 18244  00596C  C01F  F01B         	movff	___wmul@product+1,?___wmul+1
 18245  005970  0012               	return		;funcret
 18246  005972                     __end_of___wmul:
 18247                           	callstack 0
 18248                           
 18249 ;; *************** function ___lwmod *****************
 18250 ;; Defined at:
 18251 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lwmod.c"
 18252 ;; Parameters:    Size  Location     Type
 18253 ;;  dividend        2   17[COMRAM] unsigned int 
 18254 ;;  divisor         2   19[COMRAM] unsigned int 
 18255 ;; Auto vars:     Size  Location     Type
 18256 ;;  counter         1   21[COMRAM] unsigned char 
 18257 ;; Return value:  Size  Location     Type
 18258 ;;                  2   17[COMRAM] unsigned int 
 18259 ;; Registers used:
 18260 ;;		wreg, status,2, status,0
 18261 ;; Tracked objects:
 18262 ;;		On entry : 3F/0
 18263 ;;		On exit  : 3F/0
 18264 ;;		Unchanged: 3F/0
 18265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18266 ;;      Params:         4       0       0       0       0       0       0
 18267 ;;      Locals:         1       0       0       0       0       0       0
 18268 ;;      Temps:          0       0       0       0       0       0       0
 18269 ;;      Totals:         5       0       0       0       0       0       0
 18270 ;;Total ram usage:        5 bytes
 18271 ;; Hardware stack levels used: 1
 18272 ;; Hardware stack levels required when called: 4
 18273 ;; This function calls:
 18274 ;;		Nothing
 18275 ;; This function is called by:
 18276 ;;		_LCD_Bitmap
 18277 ;; This function uses a non-reentrant model
 18278 ;;
 18279                           
 18280                           	psect	text77
 18281  005656                     __ptext77:
 18282                           	callstack 0
 18283  005656                     ___lwmod:
 18284                           	callstack 19
 18285                           
 18286                           ; BSR set to: 0
 18287                           
 18288                           ;incstack = 0
 18289  005656  5014               	movf	___lwmod@divisor^0,w,c
 18290  005658  1015               	iorwf	(___lwmod@divisor+1)^0,w,c
 18291  00565A  B4D8               	btfsc	status,2,c
 18292  00565C  D018               	goto	l1387
 18293                           
 18294                           ; BSR set to: 0
 18295  00565E  0E01               	movlw	1
 18296  005660  6E16               	movwf	___lwmod@counter^0,c
 18297  005662  D004               	goto	l5930
 18298  005664                     l5928:
 18299                           
 18300                           ; BSR set to: 0
 18301  005664  90D8               	bcf	status,0,c
 18302  005666  3614               	rlcf	___lwmod@divisor^0,f,c
 18303  005668  3615               	rlcf	(___lwmod@divisor+1)^0,f,c
 18304  00566A  2A16               	incf	___lwmod@counter^0,f,c
 18305  00566C                     l5930:
 18306                           
 18307                           ; BSR set to: 0
 18308  00566C  AE15               	btfss	(___lwmod@divisor+1)^0,7,c
 18309  00566E  D7FA               	goto	l5928
 18310  005670                     u3620:
 18311                           
 18312                           ; BSR set to: 0
 18313  005670  5014               	movf	___lwmod@divisor^0,w,c
 18314  005672  5C12               	subwf	___lwmod@dividend^0,w,c
 18315  005674  5015               	movf	(___lwmod@divisor+1)^0,w,c
 18316  005676  5813               	subwfb	(___lwmod@dividend+1)^0,w,c
 18317  005678  A0D8               	btfss	status,0,c
 18318  00567A  D004               	goto	l5936
 18319                           
 18320                           ; BSR set to: 0
 18321  00567C  5014               	movf	___lwmod@divisor^0,w,c
 18322  00567E  5E12               	subwf	___lwmod@dividend^0,f,c
 18323  005680  5015               	movf	(___lwmod@divisor+1)^0,w,c
 18324  005682  5A13               	subwfb	(___lwmod@dividend+1)^0,f,c
 18325  005684                     l5936:
 18326                           
 18327                           ; BSR set to: 0
 18328  005684  90D8               	bcf	status,0,c
 18329  005686  3215               	rrcf	(___lwmod@divisor+1)^0,f,c
 18330  005688  3214               	rrcf	___lwmod@divisor^0,f,c
 18331                           
 18332                           ; BSR set to: 0
 18333  00568A  2E16               	decfsz	___lwmod@counter^0,f,c
 18334  00568C  D7F1               	goto	u3620
 18335  00568E                     l1387:
 18336                           
 18337                           ; BSR set to: 0
 18338  00568E  C012  F012         	movff	___lwmod@dividend,?___lwmod
 18339  005692  C013  F013         	movff	___lwmod@dividend+1,?___lwmod+1
 18340                           
 18341                           ; BSR set to: 0
 18342  005696  0012               	return		;funcret
 18343  005698                     __end_of___lwmod:
 18344                           	callstack 0
 18345                           
 18346 ;; *************** function ___lwdiv *****************
 18347 ;; Defined at:
 18348 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lwdiv.c"
 18349 ;; Parameters:    Size  Location     Type
 18350 ;;  dividend        2   31[COMRAM] unsigned int 
 18351 ;;  divisor         2   33[COMRAM] unsigned int 
 18352 ;; Auto vars:     Size  Location     Type
 18353 ;;  quotient        2   35[COMRAM] unsigned int 
 18354 ;;  counter         1   37[COMRAM] unsigned char 
 18355 ;; Return value:  Size  Location     Type
 18356 ;;                  2   31[COMRAM] unsigned int 
 18357 ;; Registers used:
 18358 ;;		wreg, status,2, status,0
 18359 ;; Tracked objects:
 18360 ;;		On entry : 0/0
 18361 ;;		On exit  : 0/0
 18362 ;;		Unchanged: 0/0
 18363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18364 ;;      Params:         4       0       0       0       0       0       0
 18365 ;;      Locals:         3       0       0       0       0       0       0
 18366 ;;      Temps:          0       0       0       0       0       0       0
 18367 ;;      Totals:         7       0       0       0       0       0       0
 18368 ;;Total ram usage:        7 bytes
 18369 ;; Hardware stack levels used: 1
 18370 ;; Hardware stack levels required when called: 4
 18371 ;; This function calls:
 18372 ;;		Nothing
 18373 ;; This function is called by:
 18374 ;;		_LCD_SliderUpdate
 18375 ;;		_LCD_Bitmap
 18376 ;; This function uses a non-reentrant model
 18377 ;;
 18378                           
 18379                           	psect	text78
 18380  005450                     __ptext78:
 18381                           	callstack 0
 18382  005450                     ___lwdiv:
 18383                           	callstack 21
 18384                           
 18385                           ; BSR set to: 0
 18386                           ;incstack = 0
 18387  005450  0E00               	movlw	0
 18388  005452  6E25               	movwf	(___lwdiv@quotient+1)^0,c
 18389  005454  0E00               	movlw	0
 18390  005456  6E24               	movwf	___lwdiv@quotient^0,c
 18391  005458  5022               	movf	___lwdiv@divisor^0,w,c
 18392  00545A  1023               	iorwf	(___lwdiv@divisor+1)^0,w,c
 18393  00545C  B4D8               	btfsc	status,2,c
 18394  00545E  D01C               	goto	l1377
 18395  005460  0E01               	movlw	1
 18396  005462  6E26               	movwf	___lwdiv@counter^0,c
 18397  005464  D004               	goto	l5910
 18398  005466                     l5908:
 18399  005466  90D8               	bcf	status,0,c
 18400  005468  3622               	rlcf	___lwdiv@divisor^0,f,c
 18401  00546A  3623               	rlcf	(___lwdiv@divisor+1)^0,f,c
 18402  00546C  2A26               	incf	___lwdiv@counter^0,f,c
 18403  00546E                     l5910:
 18404  00546E  AE23               	btfss	(___lwdiv@divisor+1)^0,7,c
 18405  005470  D7FA               	goto	l5908
 18406  005472                     u3590:
 18407  005472  90D8               	bcf	status,0,c
 18408  005474  3624               	rlcf	___lwdiv@quotient^0,f,c
 18409  005476  3625               	rlcf	(___lwdiv@quotient+1)^0,f,c
 18410  005478  5022               	movf	___lwdiv@divisor^0,w,c
 18411  00547A  5C20               	subwf	___lwdiv@dividend^0,w,c
 18412  00547C  5023               	movf	(___lwdiv@divisor+1)^0,w,c
 18413  00547E  5821               	subwfb	(___lwdiv@dividend+1)^0,w,c
 18414  005480  A0D8               	btfss	status,0,c
 18415  005482  D005               	goto	l5920
 18416  005484  5022               	movf	___lwdiv@divisor^0,w,c
 18417  005486  5E20               	subwf	___lwdiv@dividend^0,f,c
 18418  005488  5023               	movf	(___lwdiv@divisor+1)^0,w,c
 18419  00548A  5A21               	subwfb	(___lwdiv@dividend+1)^0,f,c
 18420  00548C  8024               	bsf	___lwdiv@quotient^0,0,c
 18421  00548E                     l5920:
 18422  00548E  90D8               	bcf	status,0,c
 18423  005490  3223               	rrcf	(___lwdiv@divisor+1)^0,f,c
 18424  005492  3222               	rrcf	___lwdiv@divisor^0,f,c
 18425  005494  2E26               	decfsz	___lwdiv@counter^0,f,c
 18426  005496  D7ED               	goto	u3590
 18427  005498                     l1377:
 18428  005498  C024  F020         	movff	___lwdiv@quotient,?___lwdiv
 18429  00549C  C025  F021         	movff	___lwdiv@quotient+1,?___lwdiv+1
 18430  0054A0  0012               	return		;funcret
 18431  0054A2                     __end_of___lwdiv:
 18432                           	callstack 0
 18433                           
 18434 ;; *************** function _RGB2LCD *****************
 18435 ;; Defined at:
 18436 ;;		line 799 in file "libraries/lcd_highlevel.c"
 18437 ;; Parameters:    Size  Location     Type
 18438 ;;  colorTableEn    2   17[COMRAM] PTR unsigned char 
 18439 ;;		 -> STR_9(9), STR_8(2), STR_7(9), STR_6(11), 
 18440 ;;		 -> STR_5(9), STR_4(9), 
 18441 ;; Auto vars:     Size  Location     Type
 18442 ;;  color           2   29[COMRAM] unsigned short 
 18443 ;;  blue            2   27[COMRAM] unsigned short 
 18444 ;;  green           2   25[COMRAM] unsigned short 
 18445 ;;  red             2   23[COMRAM] unsigned short 
 18446 ;; Return value:  Size  Location     Type
 18447 ;;                  2   17[COMRAM] unsigned short 
 18448 ;; Registers used:
 18449 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 18450 ;; Tracked objects:
 18451 ;;		On entry : 3F/0
 18452 ;;		On exit  : 3F/0
 18453 ;;		Unchanged: 3F/0
 18454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18455 ;;      Params:         2       0       0       0       0       0       0
 18456 ;;      Locals:         8       0       0       0       0       0       0
 18457 ;;      Temps:          4       0       0       0       0       0       0
 18458 ;;      Totals:        14       0       0       0       0       0       0
 18459 ;;Total ram usage:       14 bytes
 18460 ;; Hardware stack levels used: 1
 18461 ;; Hardware stack levels required when called: 4
 18462 ;; This function calls:
 18463 ;;		Nothing
 18464 ;; This function is called by:
 18465 ;;		_LCD_Bitmap
 18466 ;; This function uses a non-reentrant model
 18467 ;;
 18468                           
 18469                           	psect	text79
 18470  0047EA                     __ptext79:
 18471                           	callstack 0
 18472  0047EA                     _RGB2LCD:
 18473                           	callstack 19
 18474                           
 18475                           ; BSR set to: 0
 18476                           ;libraries/lcd_highlevel.c: 799: uint16_t RGB2LCD(uint8_t * colorTableEntry);libraries/l
      +                          cd_highlevel.c: 800: {;libraries/lcd_highlevel.c: 801:     uint16_t red,green,blue;;libr
      +                          aries/lcd_highlevel.c: 802:     uint16_t color;;libraries/lcd_highlevel.c: 804:     red 
      +                          = colorTableEntry[2] >> 3;
 18477                           
 18478                           ;incstack = 0
 18479  0047EA  0E02               	movlw	2
 18480  0047EC  2412               	addwf	RGB2LCD@colorTableEntry^0,w,c
 18481  0047EE  6E14               	movwf	??_RGB2LCD^0,c
 18482  0047F0  0E00               	movlw	0
 18483  0047F2  2013               	addwfc	(RGB2LCD@colorTableEntry+1)^0,w,c
 18484  0047F4  6E15               	movwf	(??_RGB2LCD+1)^0,c
 18485  0047F6  C014  FFF6         	movff	??_RGB2LCD,tblptrl
 18486  0047FA  C015  FFF7         	movff	??_RGB2LCD+1,tblptrh
 18487  0047FE                     	if	0	;tblptru may be non-zero
 18488  0047FE                     	endif
 18489  0047FE                     	if	0	;tblptru may be non-zero
 18490  0047FE                     	endif
 18491  0047FE  0008               	tblrd		*
 18492  004800  CFF5 F016          	movff	tablat,??_RGB2LCD+2
 18493  004804  90D8               	bcf	status,0,c
 18494  004806  3216               	rrcf	(??_RGB2LCD+2)^0,f,c
 18495  004808  90D8               	bcf	status,0,c
 18496  00480A  3216               	rrcf	(??_RGB2LCD+2)^0,f,c
 18497  00480C  90D8               	bcf	status,0,c
 18498  00480E  3216               	rrcf	(??_RGB2LCD+2)^0,f,c
 18499  004810  5016               	movf	(??_RGB2LCD+2)^0,w,c
 18500  004812  6E18               	movwf	RGB2LCD@red^0,c
 18501  004814  6A19               	clrf	(RGB2LCD@red+1)^0,c
 18502                           
 18503                           ;libraries/lcd_highlevel.c: 805:     green = colorTableEntry[1] >> 2;
 18504  004816  0E01               	movlw	1
 18505  004818  2412               	addwf	RGB2LCD@colorTableEntry^0,w,c
 18506  00481A  6E14               	movwf	??_RGB2LCD^0,c
 18507  00481C  0E00               	movlw	0
 18508  00481E  2013               	addwfc	(RGB2LCD@colorTableEntry+1)^0,w,c
 18509  004820  6E15               	movwf	(??_RGB2LCD+1)^0,c
 18510  004822  C014  FFF6         	movff	??_RGB2LCD,tblptrl
 18511  004826  C015  FFF7         	movff	??_RGB2LCD+1,tblptrh
 18512  00482A                     	if	0	;tblptru may be non-zero
 18513  00482A                     	endif
 18514  00482A                     	if	0	;tblptru may be non-zero
 18515  00482A                     	endif
 18516  00482A  0008               	tblrd		*
 18517  00482C  CFF5 F016          	movff	tablat,??_RGB2LCD+2
 18518  004830  90D8               	bcf	status,0,c
 18519  004832  3216               	rrcf	(??_RGB2LCD+2)^0,f,c
 18520  004834  90D8               	bcf	status,0,c
 18521  004836  3216               	rrcf	(??_RGB2LCD+2)^0,f,c
 18522  004838  5016               	movf	(??_RGB2LCD+2)^0,w,c
 18523  00483A  6E1A               	movwf	RGB2LCD@green^0,c
 18524  00483C  6A1B               	clrf	(RGB2LCD@green+1)^0,c
 18525                           
 18526                           ;libraries/lcd_highlevel.c: 806:     blue = colorTableEntry[0] >> 3;
 18527  00483E  C012  FFF6         	movff	RGB2LCD@colorTableEntry,tblptrl
 18528  004842  C013  FFF7         	movff	RGB2LCD@colorTableEntry+1,tblptrh
 18529  004846                     	if	0	;tblptru may be non-zero
 18530  004846                     	endif
 18531  004846                     	if	0	;tblptru may be non-zero
 18532  004846                     	endif
 18533  004846  0008               	tblrd		*
 18534  004848  CFF5 F014          	movff	tablat,??_RGB2LCD
 18535  00484C  90D8               	bcf	status,0,c
 18536  00484E  3214               	rrcf	??_RGB2LCD^0,f,c
 18537  004850  90D8               	bcf	status,0,c
 18538  004852  3214               	rrcf	??_RGB2LCD^0,f,c
 18539  004854  90D8               	bcf	status,0,c
 18540  004856  3214               	rrcf	??_RGB2LCD^0,f,c
 18541  004858  5014               	movf	??_RGB2LCD^0,w,c
 18542  00485A  6E1C               	movwf	RGB2LCD@blue^0,c
 18543  00485C  6A1D               	clrf	(RGB2LCD@blue+1)^0,c
 18544                           
 18545                           ; BSR set to: 0
 18546                           ;libraries/lcd_highlevel.c: 807:     color = (red << 11) | (green << 5) | (blue << 0);
 18547  00485E  C01A  F014         	movff	RGB2LCD@green,??_RGB2LCD
 18548  004862  C01B  F015         	movff	RGB2LCD@green+1,??_RGB2LCD+1
 18549  004866  0E05               	movlw	5
 18550  004868                     u3425:
 18551  004868  90D8               	bcf	status,0,c
 18552  00486A  3614               	rlcf	??_RGB2LCD^0,f,c
 18553  00486C  3615               	rlcf	(??_RGB2LCD+1)^0,f,c
 18554  00486E  2EE8               	decfsz	wreg,f,c
 18555  004870  D7FB               	goto	u3425
 18556  004872  C018  F016         	movff	RGB2LCD@red,??_RGB2LCD+2
 18557  004876  C019  F017         	movff	RGB2LCD@red+1,??_RGB2LCD+3
 18558  00487A  0E0B               	movlw	11
 18559  00487C                     u3435:
 18560  00487C  90D8               	bcf	status,0,c
 18561  00487E  3616               	rlcf	(??_RGB2LCD+2)^0,f,c
 18562  004880  3617               	rlcf	(??_RGB2LCD+3)^0,f,c
 18563  004882  2EE8               	decfsz	wreg,f,c
 18564  004884  D7FB               	goto	u3435
 18565  004886  5014               	movf	??_RGB2LCD^0,w,c
 18566  004888  1216               	iorwf	(??_RGB2LCD+2)^0,f,c
 18567  00488A  5015               	movf	(??_RGB2LCD+1)^0,w,c
 18568  00488C  1217               	iorwf	(??_RGB2LCD+3)^0,f,c
 18569  00488E  501C               	movf	RGB2LCD@blue^0,w,c
 18570  004890  1016               	iorwf	(??_RGB2LCD+2)^0,w,c
 18571  004892  6E1E               	movwf	RGB2LCD@color^0,c
 18572  004894  501D               	movf	(RGB2LCD@blue+1)^0,w,c
 18573  004896  1017               	iorwf	(??_RGB2LCD+3)^0,w,c
 18574  004898  6E1F               	movwf	(RGB2LCD@color+1)^0,c
 18575                           
 18576                           ; BSR set to: 0
 18577                           ;libraries/lcd_highlevel.c: 808:     return color;
 18578  00489A  C01E  F012         	movff	RGB2LCD@color,?_RGB2LCD
 18579  00489E  C01F  F013         	movff	RGB2LCD@color+1,?_RGB2LCD+1
 18580                           
 18581                           ; BSR set to: 0
 18582  0048A2  0012               	return		;funcret
 18583  0048A4                     __end_of_RGB2LCD:
 18584                           	callstack 0
 18585                           
 18586 ;; *************** function _Ball_draw *****************
 18587 ;; Defined at:
 18588 ;;		line 27 in file "class/ball.c"
 18589 ;; Parameters:    Size  Location     Type
 18590 ;;  b               2   36[COMRAM] PTR struct Ball
 18591 ;;		 -> g1(240), 
 18592 ;; Auto vars:     Size  Location     Type
 18593 ;;		None
 18594 ;; Return value:  Size  Location     Type
 18595 ;;                  1    wreg      void 
 18596 ;; Registers used:
 18597 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 18598 ;; Tracked objects:
 18599 ;;		On entry : 3F/0
 18600 ;;		On exit  : 0/0
 18601 ;;		Unchanged: 0/0
 18602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18603 ;;      Params:         2       0       0       0       0       0       0
 18604 ;;      Locals:         0       0       0       0       0       0       0
 18605 ;;      Temps:          8       0       0       0       0       0       0
 18606 ;;      Totals:        10       0       0       0       0       0       0
 18607 ;;Total ram usage:       10 bytes
 18608 ;; Hardware stack levels used: 1
 18609 ;; Hardware stack levels required when called: 5
 18610 ;; This function calls:
 18611 ;;		_LCD_DrawRect
 18612 ;; This function is called by:
 18613 ;;		_Menu_inGameDraw
 18614 ;;		_displayController
 18615 ;; This function uses a non-reentrant model
 18616 ;;
 18617                           
 18618                           	psect	text80
 18619  00346E                     __ptext80:
 18620                           	callstack 0
 18621  00346E                     _Ball_draw:
 18622                           	callstack 21
 18623                           
 18624                           ; BSR set to: 0
 18625                           ;class/ball.c: 27: void Ball_draw(struct Ball* b);class/ball.c: 28: {;class/ball.c: 29: 
      +                              LCD_DrawRect(b->oldx-8,b->oldy-8,b->oldx+8,b->oldy+8,1,0b0000000000000000);
 18626                           
 18627                           ; BSR set to: 0
 18628                           ;incstack = 0
 18629  00346E  EE20 F004          	lfsr	2,4
 18630  003472  5025               	movf	Ball_draw@b^0,w,c
 18631  003474  26D9               	addwf	fsr2l,f,c
 18632  003476  5026               	movf	(Ball_draw@b+1)^0,w,c
 18633  003478  22DA               	addwfc	fsr2h,f,c
 18634  00347A  CFDE F027          	movff	postinc2,??_Ball_draw
 18635  00347E  CFDD F028          	movff	postdec2,??_Ball_draw+1
 18636  003482  0EF8               	movlw	248
 18637  003484  2427               	addwf	??_Ball_draw^0,w,c
 18638  003486  6E12               	movwf	LCD_DrawRect@posX1^0,c
 18639  003488  0EFF               	movlw	255
 18640  00348A  2028               	addwfc	(??_Ball_draw+1)^0,w,c
 18641  00348C  6E13               	movwf	(LCD_DrawRect@posX1+1)^0,c
 18642  00348E  EE20 F006          	lfsr	2,6
 18643  003492  5025               	movf	Ball_draw@b^0,w,c
 18644  003494  26D9               	addwf	fsr2l,f,c
 18645  003496  5026               	movf	(Ball_draw@b+1)^0,w,c
 18646  003498  22DA               	addwfc	fsr2h,f,c
 18647  00349A  CFDE F029          	movff	postinc2,??_Ball_draw+2
 18648  00349E  CFDD F02A          	movff	postdec2,??_Ball_draw+3
 18649  0034A2  0EF8               	movlw	248
 18650  0034A4  2429               	addwf	(??_Ball_draw+2)^0,w,c
 18651  0034A6  6E14               	movwf	LCD_DrawRect@posY1^0,c
 18652  0034A8  0EFF               	movlw	255
 18653  0034AA  202A               	addwfc	(??_Ball_draw+3)^0,w,c
 18654  0034AC  6E15               	movwf	(LCD_DrawRect@posY1+1)^0,c
 18655  0034AE  EE20 F004          	lfsr	2,4
 18656  0034B2  5025               	movf	Ball_draw@b^0,w,c
 18657  0034B4  26D9               	addwf	fsr2l,f,c
 18658  0034B6  5026               	movf	(Ball_draw@b+1)^0,w,c
 18659  0034B8  22DA               	addwfc	fsr2h,f,c
 18660  0034BA  CFDE F02B          	movff	postinc2,??_Ball_draw+4
 18661  0034BE  CFDD F02C          	movff	postdec2,??_Ball_draw+5
 18662  0034C2  0E08               	movlw	8
 18663  0034C4  242B               	addwf	(??_Ball_draw+4)^0,w,c
 18664  0034C6  6E16               	movwf	LCD_DrawRect@posX2^0,c
 18665  0034C8  0E00               	movlw	0
 18666  0034CA  202C               	addwfc	(??_Ball_draw+5)^0,w,c
 18667  0034CC  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 18668  0034CE  EE20 F006          	lfsr	2,6
 18669  0034D2  5025               	movf	Ball_draw@b^0,w,c
 18670  0034D4  26D9               	addwf	fsr2l,f,c
 18671  0034D6  5026               	movf	(Ball_draw@b+1)^0,w,c
 18672  0034D8  22DA               	addwfc	fsr2h,f,c
 18673  0034DA  CFDE F02D          	movff	postinc2,??_Ball_draw+6
 18674  0034DE  CFDD F02E          	movff	postdec2,??_Ball_draw+7
 18675  0034E2  0E08               	movlw	8
 18676  0034E4  242D               	addwf	(??_Ball_draw+6)^0,w,c
 18677  0034E6  6E18               	movwf	LCD_DrawRect@posY2^0,c
 18678  0034E8  0E00               	movlw	0
 18679  0034EA  202E               	addwfc	(??_Ball_draw+7)^0,w,c
 18680  0034EC  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 18681  0034EE  0E01               	movlw	1
 18682  0034F0  6E1A               	movwf	LCD_DrawRect@fill^0,c
 18683  0034F2  0E00               	movlw	0
 18684  0034F4  6E1C               	movwf	(LCD_DrawRect@color+1)^0,c
 18685  0034F6  0E00               	movlw	0
 18686  0034F8  6E1B               	movwf	LCD_DrawRect@color^0,c
 18687  0034FA  EC36  F013         	call	_LCD_DrawRect	;wreg free
 18688                           
 18689                           ;class/ball.c: 30:     b->oldx=b->x;
 18690  0034FE  C025  FFD9         	movff	Ball_draw@b,fsr2l
 18691  003502  C026  FFDA         	movff	Ball_draw@b+1,fsr2h
 18692  003506  EE10 F004          	lfsr	1,4
 18693  00350A  5025               	movf	Ball_draw@b^0,w,c
 18694  00350C  26E1               	addwf	fsr1l,f,c
 18695  00350E  5026               	movf	(Ball_draw@b+1)^0,w,c
 18696  003510  22E2               	addwfc	fsr1h,f,c
 18697  003512  CFDE FFE6          	movff	postinc2,postinc1
 18698  003516  CFDD FFE5          	movff	postdec2,postdec1
 18699                           
 18700                           ;class/ball.c: 31:     b->oldy=b->y;
 18701  00351A  EE20 F002          	lfsr	2,2
 18702  00351E  5025               	movf	Ball_draw@b^0,w,c
 18703  003520  26D9               	addwf	fsr2l,f,c
 18704  003522  5026               	movf	(Ball_draw@b+1)^0,w,c
 18705  003524  22DA               	addwfc	fsr2h,f,c
 18706  003526  EE10 F006          	lfsr	1,6
 18707  00352A  5025               	movf	Ball_draw@b^0,w,c
 18708  00352C  26E1               	addwf	fsr1l,f,c
 18709  00352E  5026               	movf	(Ball_draw@b+1)^0,w,c
 18710  003530  22E2               	addwfc	fsr1h,f,c
 18711  003532  CFDE FFE6          	movff	postinc2,postinc1
 18712  003536  CFDD FFE5          	movff	postdec2,postdec1
 18713                           
 18714                           ;class/ball.c: 32:     LCD_DrawRect(b->x-8,b->y-8,b->x+8,b->y+8,1,0b1111100000000000);
 18715  00353A  C025  FFD9         	movff	Ball_draw@b,fsr2l
 18716  00353E  C026  FFDA         	movff	Ball_draw@b+1,fsr2h
 18717  003542  CFDE F027          	movff	postinc2,??_Ball_draw
 18718  003546  CFDD F028          	movff	postdec2,??_Ball_draw+1
 18719  00354A  0EF8               	movlw	248
 18720  00354C  2427               	addwf	??_Ball_draw^0,w,c
 18721  00354E  6E12               	movwf	LCD_DrawRect@posX1^0,c
 18722  003550  0EFF               	movlw	255
 18723  003552  2028               	addwfc	(??_Ball_draw+1)^0,w,c
 18724  003554  6E13               	movwf	(LCD_DrawRect@posX1+1)^0,c
 18725  003556  EE20 F002          	lfsr	2,2
 18726  00355A  5025               	movf	Ball_draw@b^0,w,c
 18727  00355C  26D9               	addwf	fsr2l,f,c
 18728  00355E  5026               	movf	(Ball_draw@b+1)^0,w,c
 18729  003560  22DA               	addwfc	fsr2h,f,c
 18730  003562  CFDE F029          	movff	postinc2,??_Ball_draw+2
 18731  003566  CFDD F02A          	movff	postdec2,??_Ball_draw+3
 18732  00356A  0EF8               	movlw	248
 18733  00356C  2429               	addwf	(??_Ball_draw+2)^0,w,c
 18734  00356E  6E14               	movwf	LCD_DrawRect@posY1^0,c
 18735  003570  0EFF               	movlw	255
 18736  003572  202A               	addwfc	(??_Ball_draw+3)^0,w,c
 18737  003574  6E15               	movwf	(LCD_DrawRect@posY1+1)^0,c
 18738  003576  C025  FFD9         	movff	Ball_draw@b,fsr2l
 18739  00357A  C026  FFDA         	movff	Ball_draw@b+1,fsr2h
 18740  00357E  CFDE F02B          	movff	postinc2,??_Ball_draw+4
 18741  003582  CFDD F02C          	movff	postdec2,??_Ball_draw+5
 18742  003586  0E08               	movlw	8
 18743  003588  242B               	addwf	(??_Ball_draw+4)^0,w,c
 18744  00358A  6E16               	movwf	LCD_DrawRect@posX2^0,c
 18745  00358C  0E00               	movlw	0
 18746  00358E  202C               	addwfc	(??_Ball_draw+5)^0,w,c
 18747  003590  6E17               	movwf	(LCD_DrawRect@posX2+1)^0,c
 18748  003592  EE20 F002          	lfsr	2,2
 18749  003596  5025               	movf	Ball_draw@b^0,w,c
 18750  003598  26D9               	addwf	fsr2l,f,c
 18751  00359A  5026               	movf	(Ball_draw@b+1)^0,w,c
 18752  00359C  22DA               	addwfc	fsr2h,f,c
 18753  00359E  CFDE F02D          	movff	postinc2,??_Ball_draw+6
 18754  0035A2  CFDD F02E          	movff	postdec2,??_Ball_draw+7
 18755  0035A6  0E08               	movlw	8
 18756  0035A8  242D               	addwf	(??_Ball_draw+6)^0,w,c
 18757  0035AA  6E18               	movwf	LCD_DrawRect@posY2^0,c
 18758  0035AC  0E00               	movlw	0
 18759  0035AE  202E               	addwfc	(??_Ball_draw+7)^0,w,c
 18760  0035B0  6E19               	movwf	(LCD_DrawRect@posY2+1)^0,c
 18761  0035B2  0E01               	movlw	1
 18762  0035B4  6E1A               	movwf	LCD_DrawRect@fill^0,c
 18763  0035B6  0EF8               	movlw	248
 18764  0035B8  6E1C               	movwf	(LCD_DrawRect@color+1)^0,c
 18765  0035BA  0E00               	movlw	0
 18766  0035BC  6E1B               	movwf	LCD_DrawRect@color^0,c
 18767  0035BE  EC36  F013         	call	_LCD_DrawRect	;wreg free
 18768  0035C2  0012               	return		;funcret
 18769  0035C4                     __end_of_Ball_draw:
 18770                           	callstack 0
 18771                           
 18772 ;; *************** function _LCD_DrawRect *****************
 18773 ;; Defined at:
 18774 ;;		line 584 in file "libraries/lcd_highlevel.c"
 18775 ;; Parameters:    Size  Location     Type
 18776 ;;  posX1           2   17[COMRAM] unsigned short 
 18777 ;;  posY1           2   19[COMRAM] unsigned short 
 18778 ;;  posX2           2   21[COMRAM] unsigned short 
 18779 ;;  posY2           2   23[COMRAM] unsigned short 
 18780 ;;  fill            1   25[COMRAM] unsigned char 
 18781 ;;  color           2   26[COMRAM] unsigned short 
 18782 ;; Auto vars:     Size  Location     Type
 18783 ;;  i               2   34[COMRAM] unsigned short 
 18784 ;;  temp            2   30[COMRAM] unsigned short 
 18785 ;;  j               2   28[COMRAM] unsigned short 
 18786 ;;  colorL          1   33[COMRAM] unsigned char 
 18787 ;;  colorH          1   32[COMRAM] unsigned char 
 18788 ;; Return value:  Size  Location     Type
 18789 ;;                  1    wreg      void 
 18790 ;; Registers used:
 18791 ;;		wreg, status,2, status,0
 18792 ;; Tracked objects:
 18793 ;;		On entry : 0/0
 18794 ;;		On exit  : 0/0
 18795 ;;		Unchanged: 0/0
 18796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18797 ;;      Params:        11       0       0       0       0       0       0
 18798 ;;      Locals:         8       0       0       0       0       0       0
 18799 ;;      Temps:          0       0       0       0       0       0       0
 18800 ;;      Totals:        19       0       0       0       0       0       0
 18801 ;;Total ram usage:       19 bytes
 18802 ;; Hardware stack levels used: 1
 18803 ;; Hardware stack levels required when called: 4
 18804 ;; This function calls:
 18805 ;;		Nothing
 18806 ;; This function is called by:
 18807 ;;		_Ball_draw
 18808 ;;		_Paddle_draw
 18809 ;;		_Menu_inGameDraw
 18810 ;;		_LCD_SliderUpdate
 18811 ;;		_LCD_SliderDraw
 18812 ;;		_LCD_ButtonUpdate
 18813 ;;		_LCD_ButtonDraw
 18814 ;;		_displayController
 18815 ;; This function uses a non-reentrant model
 18816 ;;
 18817                           
 18818                           	psect	text81
 18819  00266C                     __ptext81:
 18820                           	callstack 0
 18821  00266C                     _LCD_DrawRect:
 18822                           	callstack 21
 18823                           
 18824                           ;libraries/lcd_highlevel.c: 584: void LCD_DrawRect(uint16_t posX1,uint16_t posY1, uint16
      +                          _t posX2,;libraries/lcd_highlevel.c: 585:   uint16_t posY2,uint8_t fill,uint16_t color);
      +                          libraries/lcd_highlevel.c: 586: {;libraries/lcd_highlevel.c: 587:   uint16_t i;;librarie
      +                          s/lcd_highlevel.c: 588:   uint16_t j;;libraries/lcd_highlevel.c: 589:   uint16_t temp;;l
      +                          ibraries/lcd_highlevel.c: 590:   uint8_t colorH,colorL;;libraries/lcd_highlevel.c: 592: 
      +                            colorH = color>>8;
 18825                           
 18826                           ;incstack = 0
 18827  00266C  C01C  F021         	movff	LCD_DrawRect@color+1,LCD_DrawRect@colorH
 18828                           
 18829                           ;libraries/lcd_highlevel.c: 593:   colorL = color;
 18830  002670  C01B  F022         	movff	LCD_DrawRect@color,LCD_DrawRect@colorL
 18831                           
 18832                           ;libraries/lcd_highlevel.c: 597:   if(posX1 > posX2)
 18833  002674  5012               	movf	LCD_DrawRect@posX1^0,w,c
 18834  002676  5C16               	subwf	LCD_DrawRect@posX2^0,w,c
 18835  002678  5013               	movf	(LCD_DrawRect@posX1+1)^0,w,c
 18836  00267A  5817               	subwfb	(LCD_DrawRect@posX2+1)^0,w,c
 18837  00267C  B0D8               	btfsc	status,0,c
 18838  00267E  D00C               	goto	l5360
 18839                           
 18840                           ;libraries/lcd_highlevel.c: 598:   {;libraries/lcd_highlevel.c: 599:     temp = posX1;
 18841  002680  C012  F01F         	movff	LCD_DrawRect@posX1,LCD_DrawRect@temp
 18842  002684  C013  F020         	movff	LCD_DrawRect@posX1+1,LCD_DrawRect@temp+1
 18843                           
 18844                           ;libraries/lcd_highlevel.c: 600:     posX1 = posX2;
 18845  002688  C016  F012         	movff	LCD_DrawRect@posX2,LCD_DrawRect@posX1
 18846  00268C  C017  F013         	movff	LCD_DrawRect@posX2+1,LCD_DrawRect@posX1+1
 18847                           
 18848                           ;libraries/lcd_highlevel.c: 601:     posX2 = temp;
 18849  002690  C01F  F016         	movff	LCD_DrawRect@temp,LCD_DrawRect@posX2
 18850  002694  C020  F017         	movff	LCD_DrawRect@temp+1,LCD_DrawRect@posX2+1
 18851  002698                     l5360:
 18852                           
 18853                           ;libraries/lcd_highlevel.c: 603:   if(posY1 > posY2)
 18854  002698  5014               	movf	LCD_DrawRect@posY1^0,w,c
 18855  00269A  5C18               	subwf	LCD_DrawRect@posY2^0,w,c
 18856  00269C  5015               	movf	(LCD_DrawRect@posY1+1)^0,w,c
 18857  00269E  5819               	subwfb	(LCD_DrawRect@posY2+1)^0,w,c
 18858  0026A0  B0D8               	btfsc	status,0,c
 18859  0026A2  D00C               	goto	l5364
 18860                           
 18861                           ;libraries/lcd_highlevel.c: 604:   {;libraries/lcd_highlevel.c: 605:     temp = posY1;
 18862  0026A4  C014  F01F         	movff	LCD_DrawRect@posY1,LCD_DrawRect@temp
 18863  0026A8  C015  F020         	movff	LCD_DrawRect@posY1+1,LCD_DrawRect@temp+1
 18864                           
 18865                           ;libraries/lcd_highlevel.c: 606:     posY1 = posY2;
 18866  0026AC  C018  F014         	movff	LCD_DrawRect@posY2,LCD_DrawRect@posY1
 18867  0026B0  C019  F015         	movff	LCD_DrawRect@posY2+1,LCD_DrawRect@posY1+1
 18868                           
 18869                           ;libraries/lcd_highlevel.c: 607:     posY2 = temp;
 18870  0026B4  C01F  F018         	movff	LCD_DrawRect@temp,LCD_DrawRect@posY2
 18871  0026B8  C020  F019         	movff	LCD_DrawRect@temp+1,LCD_DrawRect@posY2+1
 18872  0026BC                     l5364:
 18873                           
 18874                           ;libraries/lcd_highlevel.c: 610:   if(fill==1)
 18875  0026BC  041A               	decf	LCD_DrawRect@fill^0,w,c
 18876  0026BE  A4D8               	btfss	status,2,c
 18877  0026C0  D055               	goto	l5446
 18878                           
 18879                           ;libraries/lcd_highlevel.c: 611:   {;libraries/lcd_highlevel.c: 613:     PORTA = 0x2A; L
      +                          ATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 = 1;;
 18880  0026C2  0E2A               	movlw	42
 18881  0026C4  6E80               	movwf	128,c	;volatile
 18882  0026C6  988B               	bcf	3979,4,c	;volatile
 18883  0026C8  968B               	bcf	3979,3,c	;volatile
 18884  0026CA  868B               	bsf	3979,3,c	;volatile
 18885  0026CC  888B               	bsf	3979,4,c	;volatile
 18886                           
 18887                           ;libraries/lcd_highlevel.c: 614:     PORTA = posX1>>8; LATC3 = 0; LATC3 = 1;;
 18888  0026CE  C013  FF80         	movff	LCD_DrawRect@posX1+1,3968	;volatile
 18889  0026D2  968B               	bcf	3979,3,c	;volatile
 18890  0026D4  868B               	bsf	3979,3,c	;volatile
 18891                           
 18892                           ;libraries/lcd_highlevel.c: 615:     PORTA = posX1; LATC3 = 0; LATC3 = 1;;
 18893  0026D6  C012  FF80         	movff	LCD_DrawRect@posX1,3968	;volatile
 18894  0026DA  968B               	bcf	3979,3,c	;volatile
 18895  0026DC  868B               	bsf	3979,3,c	;volatile
 18896                           
 18897                           ;libraries/lcd_highlevel.c: 616:     PORTA = posX2>>8; LATC3 = 0; LATC3 = 1;;
 18898  0026DE  C017  FF80         	movff	LCD_DrawRect@posX2+1,3968	;volatile
 18899  0026E2  968B               	bcf	3979,3,c	;volatile
 18900  0026E4  868B               	bsf	3979,3,c	;volatile
 18901                           
 18902                           ;libraries/lcd_highlevel.c: 617:     PORTA = posX2; LATC3 = 0; LATC3 = 1;;
 18903  0026E6  C016  FF80         	movff	LCD_DrawRect@posX2,3968	;volatile
 18904  0026EA  968B               	bcf	3979,3,c	;volatile
 18905  0026EC  868B               	bsf	3979,3,c	;volatile
 18906                           
 18907                           ;libraries/lcd_highlevel.c: 619:     PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 18908  0026EE  0E2B               	movlw	43
 18909  0026F0  6E80               	movwf	128,c	;volatile
 18910  0026F2  988B               	bcf	3979,4,c	;volatile
 18911  0026F4  968B               	bcf	3979,3,c	;volatile
 18912  0026F6  868B               	bsf	3979,3,c	;volatile
 18913  0026F8  888B               	bsf	3979,4,c	;volatile
 18914                           
 18915                           ;libraries/lcd_highlevel.c: 620:     PORTA = posY1>>8; LATC3 = 0; LATC3 = 1;;
 18916  0026FA  C015  FF80         	movff	LCD_DrawRect@posY1+1,3968	;volatile
 18917  0026FE  968B               	bcf	3979,3,c	;volatile
 18918  002700  868B               	bsf	3979,3,c	;volatile
 18919                           
 18920                           ;libraries/lcd_highlevel.c: 621:     PORTA = posY1; LATC3 = 0; LATC3 = 1;;
 18921  002702  C014  FF80         	movff	LCD_DrawRect@posY1,3968	;volatile
 18922  002706  968B               	bcf	3979,3,c	;volatile
 18923  002708  868B               	bsf	3979,3,c	;volatile
 18924                           
 18925                           ;libraries/lcd_highlevel.c: 622:     PORTA = (320 -1) >> 8; LATC3 = 0; LATC3 = 1;;
 18926  00270A  0E01               	movlw	1
 18927  00270C  6E80               	movwf	128,c	;volatile
 18928  00270E  968B               	bcf	3979,3,c	;volatile
 18929  002710  868B               	bsf	3979,3,c	;volatile
 18930                           
 18931                           ;libraries/lcd_highlevel.c: 623:     PORTA = (320 -1); LATC3 = 0; LATC3 = 1;;
 18932  002712  0E3F               	movlw	63
 18933  002714  6E80               	movwf	128,c	;volatile
 18934  002716  968B               	bcf	3979,3,c	;volatile
 18935  002718  868B               	bsf	3979,3,c	;volatile
 18936                           
 18937                           ;libraries/lcd_highlevel.c: 625:     PORTA = 0x2C; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 18938  00271A  0E2C               	movlw	44
 18939  00271C  6E80               	movwf	128,c	;volatile
 18940  00271E  988B               	bcf	3979,4,c	;volatile
 18941  002720  968B               	bcf	3979,3,c	;volatile
 18942  002722  868B               	bsf	3979,3,c	;volatile
 18943  002724  888B               	bsf	3979,4,c	;volatile
 18944                           
 18945                           ;libraries/lcd_highlevel.c: 626:     for(i=posX1;i<=posX2;i++)
 18946  002726  C012  F023         	movff	LCD_DrawRect@posX1,LCD_DrawRect@i
 18947  00272A  C013  F024         	movff	LCD_DrawRect@posX1+1,LCD_DrawRect@i+1
 18948  00272E  D017               	goto	l5444
 18949  002730                     l283:
 18950                           
 18951                           ;libraries/lcd_highlevel.c: 627:     {;libraries/lcd_highlevel.c: 628:       for(j=posY1
      +                          ;j<=posY2;j++)
 18952  002730  C014  F01D         	movff	LCD_DrawRect@posY1,LCD_DrawRect@j
 18953  002734  C015  F01E         	movff	LCD_DrawRect@posY1+1,LCD_DrawRect@j+1
 18954  002738  D00A               	goto	l5440
 18955  00273A                     l285:
 18956                           
 18957                           ;libraries/lcd_highlevel.c: 629:       {;libraries/lcd_highlevel.c: 630:         PORTA =
      +                           colorH; LATC3 = 0; LATC3 = 1;;
 18958  00273A  C021  FF80         	movff	LCD_DrawRect@colorH,3968	;volatile
 18959  00273E  968B               	bcf	3979,3,c	;volatile
 18960  002740  868B               	bsf	3979,3,c	;volatile
 18961                           
 18962                           ;libraries/lcd_highlevel.c: 631:         PORTA = colorL; LATC3 = 0; LATC3 = 1;;
 18963  002742  C022  FF80         	movff	LCD_DrawRect@colorL,3968	;volatile
 18964  002746  968B               	bcf	3979,3,c	;volatile
 18965  002748  868B               	bsf	3979,3,c	;volatile
 18966                           
 18967                           ;libraries/lcd_highlevel.c: 632:       }
 18968  00274A  4A1D               	infsnz	LCD_DrawRect@j^0,f,c
 18969  00274C  2A1E               	incf	(LCD_DrawRect@j+1)^0,f,c
 18970  00274E                     l5440:
 18971  00274E  501D               	movf	LCD_DrawRect@j^0,w,c
 18972  002750  5C18               	subwf	LCD_DrawRect@posY2^0,w,c
 18973  002752  501E               	movf	(LCD_DrawRect@j+1)^0,w,c
 18974  002754  5819               	subwfb	(LCD_DrawRect@posY2+1)^0,w,c
 18975  002756  B0D8               	btfsc	status,0,c
 18976  002758  D7F0               	goto	l285
 18977                           
 18978                           ;libraries/lcd_highlevel.c: 633:     }
 18979  00275A  4A23               	infsnz	LCD_DrawRect@i^0,f,c
 18980  00275C  2A24               	incf	(LCD_DrawRect@i+1)^0,f,c
 18981  00275E                     l5444:
 18982  00275E  5023               	movf	LCD_DrawRect@i^0,w,c
 18983  002760  5C16               	subwf	LCD_DrawRect@posX2^0,w,c
 18984  002762  5024               	movf	(LCD_DrawRect@i+1)^0,w,c
 18985  002764  5817               	subwfb	(LCD_DrawRect@posX2+1)^0,w,c
 18986  002766  A0D8               	btfss	status,0,c
 18987  002768  0012               	return	
 18988  00276A  D7E2               	goto	l283
 18989  00276C                     l5446:
 18990                           
 18991                           ;libraries/lcd_highlevel.c: 637:   {;libraries/lcd_highlevel.c: 639:     PORTA = 0x2A; L
      +                          ATC4 = 0; LATC3 = 0; LATC3 = 1; LATC4 = 1;;
 18992  00276C  0E2A               	movlw	42
 18993  00276E  6E80               	movwf	128,c	;volatile
 18994  002770  988B               	bcf	3979,4,c	;volatile
 18995  002772  968B               	bcf	3979,3,c	;volatile
 18996  002774  868B               	bsf	3979,3,c	;volatile
 18997  002776  888B               	bsf	3979,4,c	;volatile
 18998                           
 18999                           ;libraries/lcd_highlevel.c: 640:     PORTA = posX1>>8; LATC3 = 0; LATC3 = 1;;
 19000  002778  C013  FF80         	movff	LCD_DrawRect@posX1+1,3968	;volatile
 19001  00277C  968B               	bcf	3979,3,c	;volatile
 19002  00277E  868B               	bsf	3979,3,c	;volatile
 19003                           
 19004                           ;libraries/lcd_highlevel.c: 641:     PORTA = posX1; LATC3 = 0; LATC3 = 1;;
 19005  002780  C012  FF80         	movff	LCD_DrawRect@posX1,3968	;volatile
 19006  002784  968B               	bcf	3979,3,c	;volatile
 19007  002786  868B               	bsf	3979,3,c	;volatile
 19008                           
 19009                           ;libraries/lcd_highlevel.c: 642:     PORTA = posX2>>8; LATC3 = 0; LATC3 = 1;;
 19010  002788  C017  FF80         	movff	LCD_DrawRect@posX2+1,3968	;volatile
 19011  00278C  968B               	bcf	3979,3,c	;volatile
 19012  00278E  868B               	bsf	3979,3,c	;volatile
 19013                           
 19014                           ;libraries/lcd_highlevel.c: 643:     PORTA = posX2; LATC3 = 0; LATC3 = 1;;
 19015  002790  C016  FF80         	movff	LCD_DrawRect@posX2,3968	;volatile
 19016  002794  968B               	bcf	3979,3,c	;volatile
 19017  002796  868B               	bsf	3979,3,c	;volatile
 19018                           
 19019                           ;libraries/lcd_highlevel.c: 645:     PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 19020  002798  0E2B               	movlw	43
 19021  00279A  6E80               	movwf	128,c	;volatile
 19022  00279C  988B               	bcf	3979,4,c	;volatile
 19023  00279E  968B               	bcf	3979,3,c	;volatile
 19024  0027A0  868B               	bsf	3979,3,c	;volatile
 19025  0027A2  888B               	bsf	3979,4,c	;volatile
 19026                           
 19027                           ;libraries/lcd_highlevel.c: 646:     PORTA = posY1>>8; LATC3 = 0; LATC3 = 1;;
 19028  0027A4  C015  FF80         	movff	LCD_DrawRect@posY1+1,3968	;volatile
 19029  0027A8  968B               	bcf	3979,3,c	;volatile
 19030  0027AA  868B               	bsf	3979,3,c	;volatile
 19031                           
 19032                           ;libraries/lcd_highlevel.c: 647:     PORTA = posY1; LATC3 = 0; LATC3 = 1;;
 19033  0027AC  C014  FF80         	movff	LCD_DrawRect@posY1,3968	;volatile
 19034  0027B0  968B               	bcf	3979,3,c	;volatile
 19035  0027B2  868B               	bsf	3979,3,c	;volatile
 19036                           
 19037                           ;libraries/lcd_highlevel.c: 648:     PORTA = (320 -1) >> 8; LATC3 = 0; LATC3 = 1;;
 19038  0027B4  0E01               	movlw	1
 19039  0027B6  6E80               	movwf	128,c	;volatile
 19040  0027B8  968B               	bcf	3979,3,c	;volatile
 19041  0027BA  868B               	bsf	3979,3,c	;volatile
 19042                           
 19043                           ;libraries/lcd_highlevel.c: 649:     PORTA = (320 -1); LATC3 = 0; LATC3 = 1;;
 19044  0027BC  0E3F               	movlw	63
 19045  0027BE  6E80               	movwf	128,c	;volatile
 19046  0027C0  968B               	bcf	3979,3,c	;volatile
 19047  0027C2  868B               	bsf	3979,3,c	;volatile
 19048                           
 19049                           ;libraries/lcd_highlevel.c: 651:     PORTA = 0x2C; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 19050  0027C4  0E2C               	movlw	44
 19051  0027C6  6E80               	movwf	128,c	;volatile
 19052  0027C8  988B               	bcf	3979,4,c	;volatile
 19053  0027CA  968B               	bcf	3979,3,c	;volatile
 19054  0027CC  868B               	bsf	3979,3,c	;volatile
 19055  0027CE  888B               	bsf	3979,4,c	;volatile
 19056                           
 19057                           ;libraries/lcd_highlevel.c: 653:     for(i=posX1;i<=posX2;i++)
 19058  0027D0  C012  F023         	movff	LCD_DrawRect@posX1,LCD_DrawRect@i
 19059  0027D4  C013  F024         	movff	LCD_DrawRect@posX1+1,LCD_DrawRect@i+1
 19060  0027D8  D00A               	goto	l5520
 19061  0027DA                     l290:
 19062                           
 19063                           ;libraries/lcd_highlevel.c: 654:     {;libraries/lcd_highlevel.c: 655:       PORTA = col
      +                          orH; LATC3 = 0; LATC3 = 1;;
 19064  0027DA  C021  FF80         	movff	LCD_DrawRect@colorH,3968	;volatile
 19065  0027DE  968B               	bcf	3979,3,c	;volatile
 19066  0027E0  868B               	bsf	3979,3,c	;volatile
 19067                           
 19068                           ;libraries/lcd_highlevel.c: 656:       PORTA = colorL; LATC3 = 0; LATC3 = 1;;
 19069  0027E2  C022  FF80         	movff	LCD_DrawRect@colorL,3968	;volatile
 19070  0027E6  968B               	bcf	3979,3,c	;volatile
 19071  0027E8  868B               	bsf	3979,3,c	;volatile
 19072                           
 19073                           ;libraries/lcd_highlevel.c: 657:     }
 19074  0027EA  4A23               	infsnz	LCD_DrawRect@i^0,f,c
 19075  0027EC  2A24               	incf	(LCD_DrawRect@i+1)^0,f,c
 19076  0027EE                     l5520:
 19077  0027EE  5023               	movf	LCD_DrawRect@i^0,w,c
 19078  0027F0  5C16               	subwf	LCD_DrawRect@posX2^0,w,c
 19079  0027F2  5024               	movf	(LCD_DrawRect@i+1)^0,w,c
 19080  0027F4  5817               	subwfb	(LCD_DrawRect@posX2+1)^0,w,c
 19081  0027F6  B0D8               	btfsc	status,0,c
 19082  0027F8  D7F0               	goto	l290
 19083                           
 19084                           ;libraries/lcd_highlevel.c: 659:     PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 19085  0027FA  0E2B               	movlw	43
 19086  0027FC  6E80               	movwf	128,c	;volatile
 19087  0027FE  988B               	bcf	3979,4,c	;volatile
 19088  002800  968B               	bcf	3979,3,c	;volatile
 19089  002802  868B               	bsf	3979,3,c	;volatile
 19090  002804  888B               	bsf	3979,4,c	;volatile
 19091                           
 19092                           ;libraries/lcd_highlevel.c: 660:     PORTA = posY2>>8; LATC3 = 0; LATC3 = 1;;
 19093  002806  C019  FF80         	movff	LCD_DrawRect@posY2+1,3968	;volatile
 19094  00280A  968B               	bcf	3979,3,c	;volatile
 19095  00280C  868B               	bsf	3979,3,c	;volatile
 19096                           
 19097                           ;libraries/lcd_highlevel.c: 661:     PORTA = posY2; LATC3 = 0; LATC3 = 1;;
 19098  00280E  C018  FF80         	movff	LCD_DrawRect@posY2,3968	;volatile
 19099  002812  968B               	bcf	3979,3,c	;volatile
 19100  002814  868B               	bsf	3979,3,c	;volatile
 19101                           
 19102                           ;libraries/lcd_highlevel.c: 662:     PORTA = 0x2C; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 19103  002816  0E2C               	movlw	44
 19104  002818  6E80               	movwf	128,c	;volatile
 19105  00281A  988B               	bcf	3979,4,c	;volatile
 19106  00281C  968B               	bcf	3979,3,c	;volatile
 19107  00281E  868B               	bsf	3979,3,c	;volatile
 19108  002820  888B               	bsf	3979,4,c	;volatile
 19109                           
 19110                           ;libraries/lcd_highlevel.c: 663:     for(i=posX1;i<=posX2;i++)
 19111  002822  C012  F023         	movff	LCD_DrawRect@posX1,LCD_DrawRect@i
 19112  002826  C013  F024         	movff	LCD_DrawRect@posX1+1,LCD_DrawRect@i+1
 19113  00282A  D00A               	goto	l5556
 19114  00282C                     l293:
 19115                           
 19116                           ;libraries/lcd_highlevel.c: 664:     {;libraries/lcd_highlevel.c: 665:       PORTA = col
      +                          orH; LATC3 = 0; LATC3 = 1;;
 19117  00282C  C021  FF80         	movff	LCD_DrawRect@colorH,3968	;volatile
 19118  002830  968B               	bcf	3979,3,c	;volatile
 19119  002832  868B               	bsf	3979,3,c	;volatile
 19120                           
 19121                           ;libraries/lcd_highlevel.c: 666:       PORTA = colorL; LATC3 = 0; LATC3 = 1;;
 19122  002834  C022  FF80         	movff	LCD_DrawRect@colorL,3968	;volatile
 19123  002838  968B               	bcf	3979,3,c	;volatile
 19124  00283A  868B               	bsf	3979,3,c	;volatile
 19125                           
 19126                           ;libraries/lcd_highlevel.c: 667:     }
 19127  00283C  4A23               	infsnz	LCD_DrawRect@i^0,f,c
 19128  00283E  2A24               	incf	(LCD_DrawRect@i+1)^0,f,c
 19129  002840                     l5556:
 19130  002840  5023               	movf	LCD_DrawRect@i^0,w,c
 19131  002842  5C16               	subwf	LCD_DrawRect@posX2^0,w,c
 19132  002844  5024               	movf	(LCD_DrawRect@i+1)^0,w,c
 19133  002846  5817               	subwfb	(LCD_DrawRect@posX2+1)^0,w,c
 19134  002848  B0D8               	btfsc	status,0,c
 19135  00284A  D7F0               	goto	l293
 19136                           
 19137                           ;libraries/lcd_highlevel.c: 669:     PORTA = 0x2A; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 19138  00284C  0E2A               	movlw	42
 19139  00284E  6E80               	movwf	128,c	;volatile
 19140  002850  988B               	bcf	3979,4,c	;volatile
 19141  002852  968B               	bcf	3979,3,c	;volatile
 19142  002854  868B               	bsf	3979,3,c	;volatile
 19143  002856  888B               	bsf	3979,4,c	;volatile
 19144                           
 19145                           ;libraries/lcd_highlevel.c: 670:     PORTA = posX1>>8; LATC3 = 0; LATC3 = 1;;
 19146  002858  C013  FF80         	movff	LCD_DrawRect@posX1+1,3968	;volatile
 19147  00285C  968B               	bcf	3979,3,c	;volatile
 19148  00285E  868B               	bsf	3979,3,c	;volatile
 19149                           
 19150                           ;libraries/lcd_highlevel.c: 671:     PORTA = posX1; LATC3 = 0; LATC3 = 1;;
 19151  002860  C012  FF80         	movff	LCD_DrawRect@posX1,3968	;volatile
 19152  002864  968B               	bcf	3979,3,c	;volatile
 19153  002866  868B               	bsf	3979,3,c	;volatile
 19154                           
 19155                           ;libraries/lcd_highlevel.c: 672:     PORTA = posX1>>8; LATC3 = 0; LATC3 = 1;;
 19156  002868  C013  FF80         	movff	LCD_DrawRect@posX1+1,3968	;volatile
 19157  00286C  968B               	bcf	3979,3,c	;volatile
 19158  00286E  868B               	bsf	3979,3,c	;volatile
 19159                           
 19160                           ;libraries/lcd_highlevel.c: 673:     PORTA = posX1; LATC3 = 0; LATC3 = 1;;
 19161  002870  C012  FF80         	movff	LCD_DrawRect@posX1,3968	;volatile
 19162  002874  968B               	bcf	3979,3,c	;volatile
 19163  002876  868B               	bsf	3979,3,c	;volatile
 19164                           
 19165                           ;libraries/lcd_highlevel.c: 675:     PORTA = 0x2B; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 19166  002878  0E2B               	movlw	43
 19167  00287A  6E80               	movwf	128,c	;volatile
 19168  00287C  988B               	bcf	3979,4,c	;volatile
 19169  00287E  968B               	bcf	3979,3,c	;volatile
 19170  002880  868B               	bsf	3979,3,c	;volatile
 19171  002882  888B               	bsf	3979,4,c	;volatile
 19172                           
 19173                           ;libraries/lcd_highlevel.c: 676:     PORTA = posY1>>8; LATC3 = 0; LATC3 = 1;;
 19174  002884  C015  FF80         	movff	LCD_DrawRect@posY1+1,3968	;volatile
 19175  002888  968B               	bcf	3979,3,c	;volatile
 19176  00288A  868B               	bsf	3979,3,c	;volatile
 19177                           
 19178                           ;libraries/lcd_highlevel.c: 677:     PORTA = posY1; LATC3 = 0; LATC3 = 1;;
 19179  00288C  C014  FF80         	movff	LCD_DrawRect@posY1,3968	;volatile
 19180  002890  968B               	bcf	3979,3,c	;volatile
 19181  002892  868B               	bsf	3979,3,c	;volatile
 19182                           
 19183                           ;libraries/lcd_highlevel.c: 678:     PORTA = (320 -1) >> 8; LATC3 = 0; LATC3 = 1;;
 19184  002894  0E01               	movlw	1
 19185  002896  6E80               	movwf	128,c	;volatile
 19186  002898  968B               	bcf	3979,3,c	;volatile
 19187  00289A  868B               	bsf	3979,3,c	;volatile
 19188                           
 19189                           ;libraries/lcd_highlevel.c: 679:     PORTA = (320 -1); LATC3 = 0; LATC3 = 1;;
 19190  00289C  0E3F               	movlw	63
 19191  00289E  6E80               	movwf	128,c	;volatile
 19192  0028A0  968B               	bcf	3979,3,c	;volatile
 19193  0028A2  868B               	bsf	3979,3,c	;volatile
 19194                           
 19195                           ;libraries/lcd_highlevel.c: 680:     PORTA = 0x2C; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 19196  0028A4  0E2C               	movlw	44
 19197  0028A6  6E80               	movwf	128,c	;volatile
 19198  0028A8  988B               	bcf	3979,4,c	;volatile
 19199  0028AA  968B               	bcf	3979,3,c	;volatile
 19200  0028AC  868B               	bsf	3979,3,c	;volatile
 19201  0028AE  888B               	bsf	3979,4,c	;volatile
 19202                           
 19203                           ;libraries/lcd_highlevel.c: 681:     for(i=posY1;i<=posY2;i++)
 19204  0028B0  C014  F023         	movff	LCD_DrawRect@posY1,LCD_DrawRect@i
 19205  0028B4  C015  F024         	movff	LCD_DrawRect@posY1+1,LCD_DrawRect@i+1
 19206  0028B8  D00A               	goto	l5632
 19207  0028BA                     l296:
 19208                           
 19209                           ;libraries/lcd_highlevel.c: 682:     {;libraries/lcd_highlevel.c: 683:       PORTA = col
      +                          orH; LATC3 = 0; LATC3 = 1;;
 19210  0028BA  C021  FF80         	movff	LCD_DrawRect@colorH,3968	;volatile
 19211  0028BE  968B               	bcf	3979,3,c	;volatile
 19212  0028C0  868B               	bsf	3979,3,c	;volatile
 19213                           
 19214                           ;libraries/lcd_highlevel.c: 684:       PORTA = colorL; LATC3 = 0; LATC3 = 1;;
 19215  0028C2  C022  FF80         	movff	LCD_DrawRect@colorL,3968	;volatile
 19216  0028C6  968B               	bcf	3979,3,c	;volatile
 19217  0028C8  868B               	bsf	3979,3,c	;volatile
 19218                           
 19219                           ;libraries/lcd_highlevel.c: 685:     }
 19220  0028CA  4A23               	infsnz	LCD_DrawRect@i^0,f,c
 19221  0028CC  2A24               	incf	(LCD_DrawRect@i+1)^0,f,c
 19222  0028CE                     l5632:
 19223  0028CE  5023               	movf	LCD_DrawRect@i^0,w,c
 19224  0028D0  5C18               	subwf	LCD_DrawRect@posY2^0,w,c
 19225  0028D2  5024               	movf	(LCD_DrawRect@i+1)^0,w,c
 19226  0028D4  5819               	subwfb	(LCD_DrawRect@posY2+1)^0,w,c
 19227  0028D6  B0D8               	btfsc	status,0,c
 19228  0028D8  D7F0               	goto	l296
 19229                           
 19230                           ;libraries/lcd_highlevel.c: 687:     PORTA = 0x2A; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 19231  0028DA  0E2A               	movlw	42
 19232  0028DC  6E80               	movwf	128,c	;volatile
 19233  0028DE  988B               	bcf	3979,4,c	;volatile
 19234  0028E0  968B               	bcf	3979,3,c	;volatile
 19235  0028E2  868B               	bsf	3979,3,c	;volatile
 19236  0028E4  888B               	bsf	3979,4,c	;volatile
 19237                           
 19238                           ;libraries/lcd_highlevel.c: 688:     PORTA = posX2>>8; LATC3 = 0; LATC3 = 1;;
 19239  0028E6  C017  FF80         	movff	LCD_DrawRect@posX2+1,3968	;volatile
 19240  0028EA  968B               	bcf	3979,3,c	;volatile
 19241  0028EC  868B               	bsf	3979,3,c	;volatile
 19242                           
 19243                           ;libraries/lcd_highlevel.c: 689:     PORTA = posX2; LATC3 = 0; LATC3 = 1;;
 19244  0028EE  C016  FF80         	movff	LCD_DrawRect@posX2,3968	;volatile
 19245  0028F2  968B               	bcf	3979,3,c	;volatile
 19246  0028F4  868B               	bsf	3979,3,c	;volatile
 19247                           
 19248                           ;libraries/lcd_highlevel.c: 690:     PORTA = posX2>>8; LATC3 = 0; LATC3 = 1;;
 19249  0028F6  C017  FF80         	movff	LCD_DrawRect@posX2+1,3968	;volatile
 19250  0028FA  968B               	bcf	3979,3,c	;volatile
 19251  0028FC  868B               	bsf	3979,3,c	;volatile
 19252                           
 19253                           ;libraries/lcd_highlevel.c: 691:     PORTA = posX2; LATC3 = 0; LATC3 = 1;;
 19254  0028FE  C016  FF80         	movff	LCD_DrawRect@posX2,3968	;volatile
 19255  002902  968B               	bcf	3979,3,c	;volatile
 19256  002904  868B               	bsf	3979,3,c	;volatile
 19257                           
 19258                           ;libraries/lcd_highlevel.c: 692:     PORTA = 0x2C; LATC4 = 0; LATC3 = 0; LATC3 = 1; LATC
      +                          4 = 1;;
 19259  002906  0E2C               	movlw	44
 19260  002908  6E80               	movwf	128,c	;volatile
 19261  00290A  988B               	bcf	3979,4,c	;volatile
 19262  00290C  968B               	bcf	3979,3,c	;volatile
 19263  00290E  868B               	bsf	3979,3,c	;volatile
 19264  002910  888B               	bsf	3979,4,c	;volatile
 19265                           
 19266                           ;libraries/lcd_highlevel.c: 693:     for(i=posY1;i<=posY2;i++)
 19267  002912  C014  F023         	movff	LCD_DrawRect@posY1,LCD_DrawRect@i
 19268  002916  C015  F024         	movff	LCD_DrawRect@posY1+1,LCD_DrawRect@i+1
 19269  00291A  D00A               	goto	l5680
 19270  00291C                     l299:
 19271                           
 19272                           ;libraries/lcd_highlevel.c: 694:     {;libraries/lcd_highlevel.c: 695:       PORTA = col
      +                          orH; LATC3 = 0; LATC3 = 1;;
 19273  00291C  C021  FF80         	movff	LCD_DrawRect@colorH,3968	;volatile
 19274  002920  968B               	bcf	3979,3,c	;volatile
 19275  002922  868B               	bsf	3979,3,c	;volatile
 19276                           
 19277                           ;libraries/lcd_highlevel.c: 696:       PORTA = colorL; LATC3 = 0; LATC3 = 1;;
 19278  002924  C022  FF80         	movff	LCD_DrawRect@colorL,3968	;volatile
 19279  002928  968B               	bcf	3979,3,c	;volatile
 19280  00292A  868B               	bsf	3979,3,c	;volatile
 19281                           
 19282                           ;libraries/lcd_highlevel.c: 697:     }
 19283  00292C  4A23               	infsnz	LCD_DrawRect@i^0,f,c
 19284  00292E  2A24               	incf	(LCD_DrawRect@i+1)^0,f,c
 19285  002930                     l5680:
 19286  002930  5023               	movf	LCD_DrawRect@i^0,w,c
 19287  002932  5C18               	subwf	LCD_DrawRect@posY2^0,w,c
 19288  002934  5024               	movf	(LCD_DrawRect@i+1)^0,w,c
 19289  002936  5819               	subwfb	(LCD_DrawRect@posY2+1)^0,w,c
 19290  002938  A0D8               	btfss	status,0,c
 19291  00293A  0012               	return	
 19292  00293C  D7EF               	goto	l299
 19293  00293E                     __end_of_LCD_DrawRect:
 19294                           	callstack 0
 19295                           
 19296 ;; *************** function _XF_popEvent *****************
 19297 ;; Defined at:
 19298 ;;		line 72 in file "xf/xf.c"
 19299 ;; Parameters:    Size  Location     Type
 19300 ;;  inISR           1    wreg     _Bool 
 19301 ;; Auto vars:     Size  Location     Type
 19302 ;;  inISR           1   24[COMRAM] _Bool 
 19303 ;;  ev              1   23[COMRAM] unsigned char 
 19304 ;; Return value:  Size  Location     Type
 19305 ;;                  1    wreg      unsigned char 
 19306 ;; Registers used:
 19307 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19308 ;; Tracked objects:
 19309 ;;		On entry : 0/0
 19310 ;;		On exit  : 0/0
 19311 ;;		Unchanged: 0/0
 19312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19313 ;;      Params:         0       0       0       0       0       0       0
 19314 ;;      Locals:         2       0       0       0       0       0       0
 19315 ;;      Temps:          0       0       0       0       0       0       0
 19316 ;;      Totals:         2       0       0       0       0       0       0
 19317 ;;Total ram usage:        2 bytes
 19318 ;; Hardware stack levels used: 1
 19319 ;; Hardware stack levels required when called: 5
 19320 ;; This function calls:
 19321 ;;		_ENTERCRITICAL
 19322 ;;		_LEAVECRITICAL
 19323 ;;		___awmod
 19324 ;; This function is called by:
 19325 ;;		_Factory_exec
 19326 ;; This function uses a non-reentrant model
 19327 ;;
 19328                           
 19329                           	psect	text82
 19330  0054F4                     __ptext82:
 19331                           	callstack 0
 19332  0054F4                     _XF_popEvent:
 19333                           	callstack 24
 19334                           
 19335                           ;incstack = 0
 19336                           ;XF_popEvent@inISR stored from wreg
 19337  0054F4  6E19               	movwf	XF_popEvent@inISR^0,c
 19338                           
 19339                           ;xf/xf.c: 76:     ENTERCRITICAL(inISR);
 19340  0054F6  5019               	movf	XF_popEvent@inISR^0,w,c
 19341  0054F8  EC25  F02D         	call	_ENTERCRITICAL
 19342                           
 19343                           ;xf/xf.c: 77:     if(theXF.in == theXF.out)
 19344  0054FC  0100               	movlb	0	; () banked
 19345  0054FE  5185               	movf	(_theXF+37)& (0+255),w,b
 19346  005500  1984               	xorwf	(_theXF+36)& (0+255),w,b
 19347  005502  A4D8               	btfss	status,2,c
 19348  005504  D005               	goto	l7666
 19349                           
 19350                           ; BSR set to: 0
 19351                           ;xf/xf.c: 78:     {;xf/xf.c: 79:       LEAVECRITICAL(inISR);
 19352  005506  5019               	movf	XF_popEvent@inISR^0,w,c
 19353  005508  EC1F  F02D         	call	_LEAVECRITICAL
 19354                           
 19355                           ;xf/xf.c: 80:       return ev;
 19356  00550C  0E00               	movlw	0
 19357  00550E  0012               	return	
 19358  005510                     l7666:
 19359                           
 19360                           ; BSR set to: 0
 19361                           ;xf/xf.c: 82:     ev = theXF.eventQueue[theXF.out];
 19362  005510  5185               	movf	(_theXF+37)& (0+255),w,b
 19363  005512  0F78               	addlw	low (_theXF+24)
 19364  005514  6ED9               	movwf	fsr2l,c
 19365  005516  6ADA               	clrf	fsr2h,c
 19366  005518  50DF               	movf	indf2,w,c
 19367  00551A  6E18               	movwf	XF_popEvent@ev^0,c
 19368                           
 19369                           ; BSR set to: 0
 19370                           ;xf/xf.c: 83:     theXF.out = (theXF.out + 1)%(uint8_t)sizeof(theXF.eventQueue);
 19371  00551C  0E01               	movlw	1
 19372  00551E  2585               	addwf	(_theXF+37)& (0+255),w,b
 19373  005520  6E12               	movwf	___awmod@dividend^0,c
 19374  005522  6A13               	clrf	(___awmod@dividend+1)^0,c
 19375  005524  0E00               	movlw	0
 19376  005526  2213               	addwfc	(___awmod@dividend+1)^0,f,c
 19377  005528  0E00               	movlw	0
 19378  00552A  6E15               	movwf	(___awmod@divisor+1)^0,c
 19379  00552C  0E0C               	movlw	12
 19380  00552E  6E14               	movwf	___awmod@divisor^0,c
 19381  005530  EC06  F029         	call	___awmod	;wreg free
 19382  005534  5012               	movf	?___awmod^0,w,c
 19383  005536  6F85               	movwf	(_theXF+37)& (0+255),b
 19384                           
 19385                           ; BSR set to: 0
 19386                           ;xf/xf.c: 84:     LEAVECRITICAL(inISR);
 19387  005538  5019               	movf	XF_popEvent@inISR^0,w,c
 19388  00553A  EC1F  F02D         	call	_LEAVECRITICAL
 19389                           
 19390                           ;xf/xf.c: 85:     return ev;
 19391  00553E  5018               	movf	XF_popEvent@ev^0,w,c
 19392  005540  0012               	return		;funcret
 19393  005542                     __end_of_XF_popEvent:
 19394                           	callstack 0
 19395                           
 19396 ;; *************** function ___awmod *****************
 19397 ;; Defined at:
 19398 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awmod.c"
 19399 ;; Parameters:    Size  Location     Type
 19400 ;;  dividend        2   17[COMRAM] int 
 19401 ;;  divisor         2   19[COMRAM] int 
 19402 ;; Auto vars:     Size  Location     Type
 19403 ;;  sign            1   22[COMRAM] unsigned char 
 19404 ;;  counter         1   21[COMRAM] unsigned char 
 19405 ;; Return value:  Size  Location     Type
 19406 ;;                  2   17[COMRAM] int 
 19407 ;; Registers used:
 19408 ;;		wreg, status,2, status,0
 19409 ;; Tracked objects:
 19410 ;;		On entry : 3F/0
 19411 ;;		On exit  : 3F/0
 19412 ;;		Unchanged: 3F/0
 19413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19414 ;;      Params:         4       0       0       0       0       0       0
 19415 ;;      Locals:         2       0       0       0       0       0       0
 19416 ;;      Temps:          0       0       0       0       0       0       0
 19417 ;;      Totals:         6       0       0       0       0       0       0
 19418 ;;Total ram usage:        6 bytes
 19419 ;; Hardware stack levels used: 1
 19420 ;; Hardware stack levels required when called: 4
 19421 ;; This function calls:
 19422 ;;		Nothing
 19423 ;; This function is called by:
 19424 ;;		_XF_pushEvent
 19425 ;;		_XF_popEvent
 19426 ;; This function uses a non-reentrant model
 19427 ;;
 19428                           
 19429                           	psect	text83
 19430  00520C                     __ptext83:
 19431                           	callstack 0
 19432  00520C                     ___awmod:
 19433                           	callstack 20
 19434                           
 19435                           ; BSR set to: 0
 19436                           
 19437                           ;incstack = 0
 19438  00520C  0E00               	movlw	0
 19439  00520E  6E17               	movwf	___awmod@sign^0,c
 19440                           
 19441                           ; BSR set to: 0
 19442  005210  AE13               	btfss	(___awmod@dividend+1)^0,7,c
 19443  005212  D006               	goto	l5874
 19444                           
 19445                           ; BSR set to: 0
 19446  005214  6C12               	negf	___awmod@dividend^0,c
 19447  005216  1E13               	comf	(___awmod@dividend+1)^0,f,c
 19448  005218  B0D8               	btfsc	status,0,c
 19449  00521A  2A13               	incf	(___awmod@dividend+1)^0,f,c
 19450                           
 19451                           ; BSR set to: 0
 19452  00521C  0E01               	movlw	1
 19453  00521E  6E17               	movwf	___awmod@sign^0,c
 19454  005220                     l5874:
 19455                           
 19456                           ; BSR set to: 0
 19457  005220  AE15               	btfss	(___awmod@divisor+1)^0,7,c
 19458  005222  D004               	goto	l5878
 19459                           
 19460                           ; BSR set to: 0
 19461  005224  6C14               	negf	___awmod@divisor^0,c
 19462  005226  1E15               	comf	(___awmod@divisor+1)^0,f,c
 19463  005228  B0D8               	btfsc	status,0,c
 19464  00522A  2A15               	incf	(___awmod@divisor+1)^0,f,c
 19465  00522C                     l5878:
 19466                           
 19467                           ; BSR set to: 0
 19468  00522C  5014               	movf	___awmod@divisor^0,w,c
 19469  00522E  1015               	iorwf	(___awmod@divisor+1)^0,w,c
 19470  005230  B4D8               	btfsc	status,2,c
 19471  005232  D018               	goto	l5894
 19472                           
 19473                           ; BSR set to: 0
 19474  005234  0E01               	movlw	1
 19475  005236  6E16               	movwf	___awmod@counter^0,c
 19476  005238  D004               	goto	l5884
 19477  00523A                     l5882:
 19478                           
 19479                           ; BSR set to: 0
 19480  00523A  90D8               	bcf	status,0,c
 19481  00523C  3614               	rlcf	___awmod@divisor^0,f,c
 19482  00523E  3615               	rlcf	(___awmod@divisor+1)^0,f,c
 19483  005240  2A16               	incf	___awmod@counter^0,f,c
 19484  005242                     l5884:
 19485                           
 19486                           ; BSR set to: 0
 19487  005242  AE15               	btfss	(___awmod@divisor+1)^0,7,c
 19488  005244  D7FA               	goto	l5882
 19489  005246                     u3550:
 19490                           
 19491                           ; BSR set to: 0
 19492  005246  5014               	movf	___awmod@divisor^0,w,c
 19493  005248  5C12               	subwf	___awmod@dividend^0,w,c
 19494  00524A  5015               	movf	(___awmod@divisor+1)^0,w,c
 19495  00524C  5813               	subwfb	(___awmod@dividend+1)^0,w,c
 19496  00524E  A0D8               	btfss	status,0,c
 19497  005250  D004               	goto	l5890
 19498                           
 19499                           ; BSR set to: 0
 19500  005252  5014               	movf	___awmod@divisor^0,w,c
 19501  005254  5E12               	subwf	___awmod@dividend^0,f,c
 19502  005256  5015               	movf	(___awmod@divisor+1)^0,w,c
 19503  005258  5A13               	subwfb	(___awmod@dividend+1)^0,f,c
 19504  00525A                     l5890:
 19505                           
 19506                           ; BSR set to: 0
 19507  00525A  90D8               	bcf	status,0,c
 19508  00525C  3215               	rrcf	(___awmod@divisor+1)^0,f,c
 19509  00525E  3214               	rrcf	___awmod@divisor^0,f,c
 19510                           
 19511                           ; BSR set to: 0
 19512  005260  2E16               	decfsz	___awmod@counter^0,f,c
 19513  005262  D7F1               	goto	u3550
 19514  005264                     l5894:
 19515                           
 19516                           ; BSR set to: 0
 19517  005264  5017               	movf	___awmod@sign^0,w,c
 19518  005266  B4D8               	btfsc	status,2,c
 19519  005268  D004               	goto	l5898
 19520                           
 19521                           ; BSR set to: 0
 19522  00526A  6C12               	negf	___awmod@dividend^0,c
 19523  00526C  1E13               	comf	(___awmod@dividend+1)^0,f,c
 19524  00526E  B0D8               	btfsc	status,0,c
 19525  005270  2A13               	incf	(___awmod@dividend+1)^0,f,c
 19526  005272                     l5898:
 19527                           
 19528                           ; BSR set to: 0
 19529  005272  C012  F012         	movff	___awmod@dividend,?___awmod
 19530  005276  C013  F013         	movff	___awmod@dividend+1,?___awmod+1
 19531                           
 19532                           ; BSR set to: 0
 19533  00527A  0012               	return		;funcret
 19534  00527C                     __end_of___awmod:
 19535                           	callstack 0
 19536                           
 19537 ;; *************** function _LEAVECRITICAL *****************
 19538 ;; Defined at:
 19539 ;;		line 186 in file "xf/xf.c"
 19540 ;; Parameters:    Size  Location     Type
 19541 ;;  inISR           1    wreg     _Bool 
 19542 ;; Auto vars:     Size  Location     Type
 19543 ;;  inISR           1   17[COMRAM] _Bool 
 19544 ;; Return value:  Size  Location     Type
 19545 ;;                  1    wreg      void 
 19546 ;; Registers used:
 19547 ;;		wreg, status,2
 19548 ;; Tracked objects:
 19549 ;;		On entry : 0/0
 19550 ;;		On exit  : 0/0
 19551 ;;		Unchanged: 0/0
 19552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19553 ;;      Params:         0       0       0       0       0       0       0
 19554 ;;      Locals:         1       0       0       0       0       0       0
 19555 ;;      Temps:          0       0       0       0       0       0       0
 19556 ;;      Totals:         1       0       0       0       0       0       0
 19557 ;;Total ram usage:        1 bytes
 19558 ;; Hardware stack levels used: 1
 19559 ;; Hardware stack levels required when called: 4
 19560 ;; This function calls:
 19561 ;;		Nothing
 19562 ;; This function is called by:
 19563 ;;		_XF_pushEvent
 19564 ;;		_XF_popEvent
 19565 ;;		_XF_scheduleTimer
 19566 ;;		_XF_unscheduleTimer
 19567 ;; This function uses a non-reentrant model
 19568 ;;
 19569                           
 19570                           	psect	text84
 19571  005A3E                     __ptext84:
 19572                           	callstack 0
 19573  005A3E                     _LEAVECRITICAL:
 19574                           	callstack 22
 19575                           
 19576                           ; BSR set to: 0
 19577                           ;incstack = 0
 19578                           ;LEAVECRITICAL@inISR stored from wreg
 19579  005A3E  6E12               	movwf	LEAVECRITICAL@inISR^0,c
 19580                           
 19581                           ;xf/xf.c: 186: static void LEAVECRITICAL(_Bool inISR);xf/xf.c: 187: {;xf/xf.c: 188:     
      +                          if (inISR == 0)
 19582  005A40  5012               	movf	LEAVECRITICAL@inISR^0,w,c
 19583  005A42  A4D8               	btfss	status,2,c
 19584  005A44  0012               	return	
 19585                           
 19586                           ;xf/xf.c: 189:     {;xf/xf.c: 190:       GIE = 1;
 19587  005A46  8EF2               	bsf	4082,7,c	;volatile
 19588  005A48  0012               	return		;funcret
 19589  005A4A                     __end_of_LEAVECRITICAL:
 19590                           	callstack 0
 19591                           
 19592 ;; *************** function _ENTERCRITICAL *****************
 19593 ;; Defined at:
 19594 ;;		line 172 in file "xf/xf.c"
 19595 ;; Parameters:    Size  Location     Type
 19596 ;;  inISR           1    wreg     _Bool 
 19597 ;; Auto vars:     Size  Location     Type
 19598 ;;  inISR           1   17[COMRAM] _Bool 
 19599 ;; Return value:  Size  Location     Type
 19600 ;;                  1    wreg      void 
 19601 ;; Registers used:
 19602 ;;		wreg, status,2
 19603 ;; Tracked objects:
 19604 ;;		On entry : 0/0
 19605 ;;		On exit  : 0/0
 19606 ;;		Unchanged: 0/0
 19607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19608 ;;      Params:         0       0       0       0       0       0       0
 19609 ;;      Locals:         1       0       0       0       0       0       0
 19610 ;;      Temps:          0       0       0       0       0       0       0
 19611 ;;      Totals:         1       0       0       0       0       0       0
 19612 ;;Total ram usage:        1 bytes
 19613 ;; Hardware stack levels used: 1
 19614 ;; Hardware stack levels required when called: 4
 19615 ;; This function calls:
 19616 ;;		Nothing
 19617 ;; This function is called by:
 19618 ;;		_XF_pushEvent
 19619 ;;		_XF_popEvent
 19620 ;;		_XF_scheduleTimer
 19621 ;;		_XF_unscheduleTimer
 19622 ;; This function uses a non-reentrant model
 19623 ;;
 19624                           
 19625                           	psect	text85
 19626  005A4A                     __ptext85:
 19627                           	callstack 0
 19628  005A4A                     _ENTERCRITICAL:
 19629                           	callstack 22
 19630                           
 19631                           ;incstack = 0
 19632                           ;ENTERCRITICAL@inISR stored from wreg
 19633  005A4A  6E12               	movwf	ENTERCRITICAL@inISR^0,c
 19634                           
 19635                           ;xf/xf.c: 172: static void ENTERCRITICAL(_Bool inISR);xf/xf.c: 173: {;xf/xf.c: 174:     
      +                          if (inISR == 0)
 19636  005A4C  5012               	movf	ENTERCRITICAL@inISR^0,w,c
 19637  005A4E  A4D8               	btfss	status,2,c
 19638  005A50  0012               	return	
 19639                           
 19640                           ;xf/xf.c: 175:     {;xf/xf.c: 176:       GIE = 0;
 19641  005A52  9EF2               	bcf	4082,7,c	;volatile
 19642  005A54  0012               	return		;funcret
 19643  005A56                     __end_of_ENTERCRITICAL:
 19644                           	callstack 0
 19645                           
 19646 ;; *************** function _isr *****************
 19647 ;; Defined at:
 19648 ;;		line 23 in file "main.c"
 19649 ;; Parameters:    Size  Location     Type
 19650 ;;		None
 19651 ;; Auto vars:     Size  Location     Type
 19652 ;;		None
 19653 ;; Return value:  Size  Location     Type
 19654 ;;                  1    wreg      void 
 19655 ;; Registers used:
 19656 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19657 ;; Tracked objects:
 19658 ;;		On entry : 0/0
 19659 ;;		On exit  : 0/0
 19660 ;;		Unchanged: 0/0
 19661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19662 ;;      Params:         0       0       0       0       0       0       0
 19663 ;;      Locals:         0       0       0       0       0       0       0
 19664 ;;      Temps:          4       0       0       0       0       0       0
 19665 ;;      Totals:         4       0       0       0       0       0       0
 19666 ;;Total ram usage:        4 bytes
 19667 ;; Hardware stack levels used: 1
 19668 ;; Hardware stack levels required when called: 3
 19669 ;; This function calls:
 19670 ;;		_XF_decrementAndQueueTimers
 19671 ;;		i2_XF_pushEvent
 19672 ;; This function is called by:
 19673 ;;		Interrupt level 2
 19674 ;; This function uses a non-reentrant model
 19675 ;;
 19676                           
 19677                           	psect	intcode
 19678  000008                     __pintcode:
 19679                           	callstack 0
 19680  000008                     _isr:
 19681                           	callstack 14
 19682                           
 19683                           ;incstack = 0
 19684  000008  824E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19685  00000A  CFD9 F00E          	movff	fsr2l,??_isr
 19686  00000E  CFDA F00F          	movff	fsr2h,??_isr+1
 19687  000012  CFF3 F010          	movff	prodl,??_isr+2
 19688  000016  CFF4 F011          	movff	prodh,??_isr+3
 19689                           
 19690                           ;main.c: 25:     if((INT1IF==1)&&(INT1IE==1))
 19691  00001A  B0F0               	btfsc	4080,0,c	;volatile
 19692  00001C  A6F0               	btfss	4080,3,c	;volatile
 19693  00001E  D013               	goto	i2l7958
 19694                           
 19695                           ;main.c: 26:     {;main.c: 27:         if(INTEDG1==0)
 19696  000020  BAF1               	btfsc	4081,5,c	;volatile
 19697  000022  D008               	goto	i2l771
 19698                           
 19699                           ;main.c: 28:         {;main.c: 29:             INTEDG1=1;
 19700  000024  8AF1               	bsf	4081,5,c	;volatile
 19701                           
 19702                           ;main.c: 30:             INT1IF=0;
 19703  000026  90F0               	bcf	4080,0,c	;volatile
 19704                           
 19705                           ;main.c: 31:             XF_pushEvent(evPress,1);
 19706  000028  0E01               	movlw	1
 19707  00002A  6E07               	movwf	i2XF_pushEvent@inISR^0,c
 19708  00002C  0E01               	movlw	1
 19709  00002E  EC51  F02A         	call	i2_XF_pushEvent
 19710                           
 19711                           ;main.c: 33:         }
 19712  000032  D009               	goto	i2l7958
 19713  000034                     i2l771:
 19714  000034  AAF1               	btfss	4081,5,c	;volatile
 19715  000036  D007               	goto	i2l7958
 19716                           
 19717                           ;main.c: 35:         {;main.c: 36:             INTEDG1=0;
 19718  000038  9AF1               	bcf	4081,5,c	;volatile
 19719                           
 19720                           ;main.c: 37:             INT1IF=0;
 19721  00003A  90F0               	bcf	4080,0,c	;volatile
 19722                           
 19723                           ;main.c: 38:             XF_pushEvent(evRelease,1);
 19724  00003C  0E01               	movlw	1
 19725  00003E  6E07               	movwf	i2XF_pushEvent@inISR^0,c
 19726  000040  0E02               	movlw	2
 19727  000042  EC51  F02A         	call	i2_XF_pushEvent
 19728  000046                     i2l7958:
 19729                           
 19730                           ;main.c: 41:     if((TMR0IF==1)&&(TMR0IE==1))
 19731  000046  B4F2               	btfsc	4082,2,c	;volatile
 19732  000048  AAF2               	btfss	4082,5,c	;volatile
 19733  00004A  D006               	goto	i2l775
 19734                           
 19735                           ;main.c: 42:     {;main.c: 43:         XF_decrementAndQueueTimers();
 19736  00004C  ECEF  F026         	call	_XF_decrementAndQueueTimers	;wreg free
 19737                           
 19738                           ;main.c: 44:         TMR0H=0xFF;
 19739  000050  68D7               	setf	215,c	;volatile
 19740                           
 19741                           ;main.c: 45:         TMR0L=0x82;
 19742  000052  0E82               	movlw	130
 19743  000054  6ED6               	movwf	214,c	;volatile
 19744                           
 19745                           ;main.c: 46:         TMR0IF=0;
 19746  000056  94F2               	bcf	4082,2,c	;volatile
 19747  000058                     i2l775:
 19748  000058  C011  FFF4         	movff	??_isr+3,prodh
 19749  00005C  C010  FFF3         	movff	??_isr+2,prodl
 19750  000060  C00F  FFDA         	movff	??_isr+1,fsr2h
 19751  000064  C00E  FFD9         	movff	??_isr,fsr2l
 19752  000068  924E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19753  00006A  0011               	retfie		f
 19754  00006C                     __end_of_isr:
 19755                           	callstack 0
 19756                           
 19757 ;; *************** function _XF_decrementAndQueueTimers *****************
 19758 ;; Defined at:
 19759 ;;		line 139 in file "xf/xf.c"
 19760 ;; Parameters:    Size  Location     Type
 19761 ;;		None
 19762 ;; Auto vars:     Size  Location     Type
 19763 ;;  i               2   11[COMRAM] int 
 19764 ;; Return value:  Size  Location     Type
 19765 ;;                  1    wreg      void 
 19766 ;; Registers used:
 19767 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19768 ;; Tracked objects:
 19769 ;;		On entry : 0/0
 19770 ;;		On exit  : 0/0
 19771 ;;		Unchanged: 0/0
 19772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19773 ;;      Params:         0       0       0       0       0       0       0
 19774 ;;      Locals:         2       0       0       0       0       0       0
 19775 ;;      Temps:          2       0       0       0       0       0       0
 19776 ;;      Totals:         4       0       0       0       0       0       0
 19777 ;;Total ram usage:        4 bytes
 19778 ;; Hardware stack levels used: 1
 19779 ;; Hardware stack levels required when called: 2
 19780 ;; This function calls:
 19781 ;;		i2_XF_pushEvent
 19782 ;;		i2_XF_unscheduleTimer
 19783 ;; This function is called by:
 19784 ;;		_isr
 19785 ;; This function uses a non-reentrant model
 19786 ;;
 19787                           
 19788                           	psect	text87
 19789  004DDE                     __ptext87:
 19790                           	callstack 0
 19791  004DDE                     _XF_decrementAndQueueTimers:
 19792                           	callstack 14
 19793                           
 19794                           ;xf/xf.c: 141:     int i;;xf/xf.c: 142:     for (i=0; i<8; i++)
 19795                           
 19796                           ;incstack = 0
 19797  004DDE  0E00               	movlw	0
 19798  004DE0  6E0D               	movwf	(XF_decrementAndQueueTimers@i+1)^0,c
 19799  004DE2  0E00               	movlw	0
 19800  004DE4  6E0C               	movwf	XF_decrementAndQueueTimers@i^0,c
 19801  004DE6                     i2l7930:
 19802                           
 19803                           ;xf/xf.c: 143:     {;xf/xf.c: 144:         if (theXF.timerList[i].ev != NULLEVENT)
 19804  004DE6  500C               	movf	XF_decrementAndQueueTimers@i^0,w,c
 19805  004DE8  0D03               	mullw	3
 19806  004DEA  50F3               	movf	243,w,c
 19807  004DEC  0F62               	addlw	low (_theXF+2)
 19808  004DEE  6ED9               	movwf	fsr2l,c
 19809  004DF0  6ADA               	clrf	fsr2h,c
 19810  004DF2  50DF               	movf	indf2,w,c
 19811  004DF4  B4D8               	btfsc	status,2,c
 19812  004DF6  D031               	goto	i2l7940
 19813                           
 19814                           ;xf/xf.c: 145:         {;xf/xf.c: 147:             theXF.timerList[i].tm-=1;
 19815  004DF8  500C               	movf	XF_decrementAndQueueTimers@i^0,w,c
 19816  004DFA  0D03               	mullw	3
 19817  004DFC  50F3               	movf	243,w,c
 19818  004DFE  0F60               	addlw	low _theXF
 19819  004E00  6ED9               	movwf	fsr2l,c
 19820  004E02  6ADA               	clrf	fsr2h,c
 19821  004E04  06DE               	decf	postinc2,f,c
 19822  004E06  0E00               	movlw	0
 19823  004E08  5ADD               	subwfb	postdec2,f,c
 19824                           
 19825                           ;xf/xf.c: 148:             if (theXF.timerList[i].tm ==0)
 19826  004E0A  500C               	movf	XF_decrementAndQueueTimers@i^0,w,c
 19827  004E0C  0D03               	mullw	3
 19828  004E0E  50F3               	movf	243,w,c
 19829  004E10  0F60               	addlw	low _theXF
 19830  004E12  6ED9               	movwf	fsr2l,c
 19831  004E14  6ADA               	clrf	fsr2h,c
 19832  004E16  50DE               	movf	postinc2,w,c
 19833  004E18  10DE               	iorwf	postinc2,w,c
 19834  004E1A  A4D8               	btfss	status,2,c
 19835  004E1C  D01E               	goto	i2l7940
 19836                           
 19837                           ;xf/xf.c: 149:             {;xf/xf.c: 150:                 if(XF_pushEvent(theXF.timerLi
      +                          st[i].ev, 1) == 1)
 19838  004E1E  0E01               	movlw	1
 19839  004E20  6E07               	movwf	i2XF_pushEvent@inISR^0,c
 19840  004E22  500C               	movf	XF_decrementAndQueueTimers@i^0,w,c
 19841  004E24  0D03               	mullw	3
 19842  004E26  50F3               	movf	243,w,c
 19843  004E28  0F62               	addlw	low (_theXF+2)
 19844  004E2A  6ED9               	movwf	fsr2l,c
 19845  004E2C  6ADA               	clrf	fsr2h,c
 19846  004E2E  50DF               	movf	indf2,w,c
 19847  004E30  EC51  F02A         	call	i2_XF_pushEvent
 19848  004E34  06E8               	decf	wreg,f,c
 19849  004E36  A4D8               	btfss	status,2,c
 19850  004E38  D006               	goto	i2l7938
 19851                           
 19852                           ;xf/xf.c: 151:                 {;xf/xf.c: 152:                   XF_unscheduleTimer(i, 1
      +                          );
 19853  004E3A  0E01               	movlw	1
 19854  004E3C  6E02               	movwf	i2XF_unscheduleTimer@inISR^0,c
 19855  004E3E  500C               	movf	XF_decrementAndQueueTimers@i^0,w,c
 19856  004E40  ECBF  F02B         	call	i2_XF_unscheduleTimer
 19857                           
 19858                           ;xf/xf.c: 153:                 }
 19859  004E44  D00A               	goto	i2l7940
 19860  004E46                     i2l7938:
 19861                           
 19862                           ;xf/xf.c: 155:                 {;xf/xf.c: 156:                   theXF.timerList[i].tm=1
      +                          ;
 19863  004E46  500C               	movf	XF_decrementAndQueueTimers@i^0,w,c
 19864  004E48  0D03               	mullw	3
 19865  004E4A  50F3               	movf	243,w,c
 19866  004E4C  0F60               	addlw	low _theXF
 19867  004E4E  6ED9               	movwf	fsr2l,c
 19868  004E50  6ADA               	clrf	fsr2h,c
 19869  004E52  0E01               	movlw	1
 19870  004E54  6EDE               	movwf	postinc2,c
 19871  004E56  0E00               	movlw	0
 19872  004E58  6EDD               	movwf	postdec2,c
 19873  004E5A                     i2l7940:
 19874                           
 19875                           ;xf/xf.c: 160:     }
 19876  004E5A  4A0C               	infsnz	XF_decrementAndQueueTimers@i^0,f,c
 19877  004E5C  2A0D               	incf	(XF_decrementAndQueueTimers@i+1)^0,f,c
 19878  004E5E  BE0D               	btfsc	(XF_decrementAndQueueTimers@i+1)^0,7,c
 19879  004E60  D7C2               	goto	i2l7930
 19880  004E62  500D               	movf	(XF_decrementAndQueueTimers@i+1)^0,w,c
 19881  004E64  E105               	bnz	i2u571_40
 19882  004E66  0E08               	movlw	8
 19883  004E68  5C0C               	subwf	XF_decrementAndQueueTimers@i^0,w,c
 19884  004E6A  B0D8               	btfsc	status,0,c
 19885  004E6C  0012               	return	
 19886  004E6E  D7BB               	goto	i2l7930
 19887  004E70                     i2u571_40:
 19888  004E70  0012               	return		;funcret
 19889  004E72                     __end_of_XF_decrementAndQueueTimers:
 19890                           	callstack 0
 19891                           
 19892 ;; *************** function i2_XF_unscheduleTimer *****************
 19893 ;; Defined at:
 19894 ;;		line 125 in file "xf/xf.c"
 19895 ;; Parameters:    Size  Location     Type
 19896 ;;  id              1    wreg     unsigned char 
 19897 ;;  inISR           1    1[COMRAM] _Bool 
 19898 ;; Auto vars:     Size  Location     Type
 19899 ;;  id              1    2[COMRAM] unsigned char 
 19900 ;; Return value:  Size  Location     Type
 19901 ;;                  1    wreg      void 
 19902 ;; Registers used:
 19903 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19904 ;; Tracked objects:
 19905 ;;		On entry : 0/0
 19906 ;;		On exit  : 0/0
 19907 ;;		Unchanged: 0/0
 19908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19909 ;;      Params:         1       0       0       0       0       0       0
 19910 ;;      Locals:         1       0       0       0       0       0       0
 19911 ;;      Temps:          0       0       0       0       0       0       0
 19912 ;;      Totals:         2       0       0       0       0       0       0
 19913 ;;Total ram usage:        2 bytes
 19914 ;; Hardware stack levels used: 1
 19915 ;; Hardware stack levels required when called: 1
 19916 ;; This function calls:
 19917 ;;		i2_ENTERCRITICAL
 19918 ;;		i2_LEAVECRITICAL
 19919 ;; This function is called by:
 19920 ;;		_XF_decrementAndQueueTimers
 19921 ;; This function uses a non-reentrant model
 19922 ;;
 19923                           
 19924                           	psect	text88
 19925  00577E                     __ptext88:
 19926                           	callstack 0
 19927  00577E                     i2_XF_unscheduleTimer:
 19928                           	callstack 14
 19929                           
 19930                           ;incstack = 0
 19931                           ;i2XF_unscheduleTimer@id stored from wreg
 19932  00577E  6E03               	movwf	i2XF_unscheduleTimer@id^0,c
 19933                           
 19934                           ;xf/xf.c: 125: void XF_unscheduleTimer(TimerID id, _Bool inISR);xf/xf.c: 126: {;xf/xf.c:
      +                           127:     ENTERCRITICAL(inISR);
 19935  005780  5002               	movf	i2XF_unscheduleTimer@inISR^0,w,c
 19936  005782  EC31  F02D         	call	i2_ENTERCRITICAL
 19937                           
 19938                           ;xf/xf.c: 128:     theXF.timerList[id].tm = 0;
 19939  005786  5003               	movf	i2XF_unscheduleTimer@id^0,w,c
 19940  005788  0D03               	mullw	3
 19941  00578A  50F3               	movf	243,w,c
 19942  00578C  0F60               	addlw	low _theXF
 19943  00578E  6ED9               	movwf	fsr2l,c
 19944  005790  6ADA               	clrf	fsr2h,c
 19945  005792  0E00               	movlw	0
 19946  005794  6EDE               	movwf	postinc2,c
 19947  005796  0E00               	movlw	0
 19948  005798  6EDD               	movwf	postdec2,c
 19949                           
 19950                           ;xf/xf.c: 129:     theXF.timerList[id].ev = NULLEVENT;
 19951  00579A  5003               	movf	i2XF_unscheduleTimer@id^0,w,c
 19952  00579C  0D03               	mullw	3
 19953  00579E  50F3               	movf	243,w,c
 19954  0057A0  0F62               	addlw	low (_theXF+2)
 19955  0057A2  6ED9               	movwf	fsr2l,c
 19956  0057A4  6ADA               	clrf	fsr2h,c
 19957  0057A6  0E00               	movlw	0
 19958  0057A8  6EDF               	movwf	indf2,c
 19959                           
 19960                           ;xf/xf.c: 130:     LEAVECRITICAL(inISR);
 19961  0057AA  5002               	movf	i2XF_unscheduleTimer@inISR^0,w,c
 19962  0057AC  EC2B  F02D         	call	i2_LEAVECRITICAL
 19963  0057B0  0012               	return		;funcret
 19964  0057B2                     __end_ofi2_XF_unscheduleTimer:
 19965                           	callstack 0
 19966                           
 19967 ;; *************** function i2_XF_pushEvent *****************
 19968 ;; Defined at:
 19969 ;;		line 49 in file "xf/xf.c"
 19970 ;; Parameters:    Size  Location     Type
 19971 ;;  ev              1    wreg     unsigned char 
 19972 ;;  inISR           1    6[COMRAM] _Bool 
 19973 ;; Auto vars:     Size  Location     Type
 19974 ;;  ev              1    7[COMRAM] unsigned char 
 19975 ;;  temp            1    8[COMRAM] unsigned char 
 19976 ;; Return value:  Size  Location     Type
 19977 ;;                  1    wreg      _Bool 
 19978 ;; Registers used:
 19979 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19980 ;; Tracked objects:
 19981 ;;		On entry : 0/0
 19982 ;;		On exit  : 0/0
 19983 ;;		Unchanged: 0/0
 19984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19985 ;;      Params:         1       0       0       0       0       0       0
 19986 ;;      Locals:         2       0       0       0       0       0       0
 19987 ;;      Temps:          0       0       0       0       0       0       0
 19988 ;;      Totals:         3       0       0       0       0       0       0
 19989 ;;Total ram usage:        3 bytes
 19990 ;; Hardware stack levels used: 1
 19991 ;; Hardware stack levels required when called: 1
 19992 ;; This function calls:
 19993 ;;		i2_ENTERCRITICAL
 19994 ;;		i2_LEAVECRITICAL
 19995 ;;		i2___awmod
 19996 ;; This function is called by:
 19997 ;;		_XF_decrementAndQueueTimers
 19998 ;;		_isr
 19999 ;; This function uses a non-reentrant model
 20000 ;;
 20001                           
 20002                           	psect	text89
 20003  0054A2                     __ptext89:
 20004                           	callstack 0
 20005  0054A2                     i2_XF_pushEvent:
 20006                           	callstack 15
 20007                           
 20008                           ;incstack = 0
 20009                           ;i2XF_pushEvent@ev stored from wreg
 20010  0054A2  6E08               	movwf	i2XF_pushEvent@ev^0,c
 20011                           
 20012                           ;xf/xf.c: 49: _Bool XF_pushEvent(Event ev, _Bool inISR);xf/xf.c: 50: {;xf/xf.c: 51:   ui
      +                          nt8_t temp;;xf/xf.c: 52:     ENTERCRITICAL(inISR);
 20013  0054A4  5007               	movf	i2XF_pushEvent@inISR^0,w,c
 20014  0054A6  EC31  F02D         	call	i2_ENTERCRITICAL
 20015                           
 20016                           ;xf/xf.c: 54:     temp = (theXF.in+1) % (uint8_t)sizeof(theXF.eventQueue);
 20017  0054AA  0E01               	movlw	1
 20018  0054AC  0100               	movlb	0	; () banked
 20019  0054AE  2584               	addwf	(_theXF+36)& (0+255),w,b
 20020  0054B0  6E01               	movwf	i2___awmod@dividend^0,c
 20021  0054B2  6A02               	clrf	(i2___awmod@dividend+1)^0,c
 20022  0054B4  0E00               	movlw	0
 20023  0054B6  2202               	addwfc	(i2___awmod@dividend+1)^0,f,c
 20024  0054B8  0E00               	movlw	0
 20025  0054BA  6E04               	movwf	(i2___awmod@divisor+1)^0,c
 20026  0054BC  0E0C               	movlw	12
 20027  0054BE  6E03               	movwf	i2___awmod@divisor^0,c
 20028  0054C0  EC3E  F029         	call	i2___awmod	;wreg free
 20029  0054C4  5001               	movf	?i2___awmod^0,w,c
 20030  0054C6  6E09               	movwf	i2XF_pushEvent@temp^0,c
 20031                           
 20032                           ; BSR set to: 0
 20033                           ;xf/xf.c: 55:     if(temp == theXF.out)
 20034  0054C8  5009               	movf	i2XF_pushEvent@temp^0,w,c
 20035  0054CA  1985               	xorwf	(_theXF+37)& (0+255),w,b
 20036  0054CC  A4D8               	btfss	status,2,c
 20037  0054CE  D005               	goto	i2l7840
 20038                           
 20039                           ; BSR set to: 0
 20040                           ;xf/xf.c: 56:     {;xf/xf.c: 57:       LEAVECRITICAL(inISR);
 20041  0054D0  5007               	movf	i2XF_pushEvent@inISR^0,w,c
 20042  0054D2  EC2B  F02D         	call	i2_LEAVECRITICAL
 20043                           
 20044                           ;xf/xf.c: 58:       return 0;
 20045  0054D6  0E00               	movlw	0
 20046  0054D8  0012               	return	
 20047  0054DA                     i2l7840:
 20048                           
 20049                           ; BSR set to: 0
 20050                           ;xf/xf.c: 60:     theXF.eventQueue[theXF.in] = ev;
 20051  0054DA  5184               	movf	(_theXF+36)& (0+255),w,b
 20052  0054DC  0F78               	addlw	low (_theXF+24)
 20053  0054DE  6ED9               	movwf	fsr2l,c
 20054  0054E0  6ADA               	clrf	fsr2h,c
 20055  0054E2  C008  FFDF         	movff	i2XF_pushEvent@ev,indf2
 20056                           
 20057                           ; BSR set to: 0
 20058                           ;xf/xf.c: 61:     theXF.in = temp;
 20059  0054E6  C009  F084         	movff	i2XF_pushEvent@temp,_theXF+36
 20060                           
 20061                           ; BSR set to: 0
 20062                           ;xf/xf.c: 62:     LEAVECRITICAL(inISR);
 20063  0054EA  5007               	movf	i2XF_pushEvent@inISR^0,w,c
 20064  0054EC  EC2B  F02D         	call	i2_LEAVECRITICAL
 20065                           
 20066                           ;xf/xf.c: 63:     return 1;
 20067  0054F0  0E01               	movlw	1
 20068  0054F2  0012               	return		;funcret
 20069  0054F4                     __end_ofi2_XF_pushEvent:
 20070                           	callstack 0
 20071                           
 20072 ;; *************** function i2___awmod *****************
 20073 ;; Defined at:
 20074 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awmod.c"
 20075 ;; Parameters:    Size  Location     Type
 20076 ;;  dividend        2    0[COMRAM] int 
 20077 ;;  divisor         2    2[COMRAM] int 
 20078 ;; Auto vars:     Size  Location     Type
 20079 ;;  sign            1    5[COMRAM] unsigned char 
 20080 ;;  counter         1    4[COMRAM] unsigned char 
 20081 ;; Return value:  Size  Location     Type
 20082 ;;                  2    0[COMRAM] int 
 20083 ;; Registers used:
 20084 ;;		wreg, status,2, status,0
 20085 ;; Tracked objects:
 20086 ;;		On entry : 3F/0
 20087 ;;		On exit  : 3F/0
 20088 ;;		Unchanged: 3F/0
 20089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20090 ;;      Params:         4       0       0       0       0       0       0
 20091 ;;      Locals:         2       0       0       0       0       0       0
 20092 ;;      Temps:          0       0       0       0       0       0       0
 20093 ;;      Totals:         6       0       0       0       0       0       0
 20094 ;;Total ram usage:        6 bytes
 20095 ;; Hardware stack levels used: 1
 20096 ;; This function calls:
 20097 ;;		Nothing
 20098 ;; This function is called by:
 20099 ;;		i2_XF_pushEvent
 20100 ;; This function uses a non-reentrant model
 20101 ;;
 20102                           
 20103                           	psect	text90
 20104  00527C                     __ptext90:
 20105                           	callstack 0
 20106  00527C                     i2___awmod:
 20107                           	callstack 15
 20108                           
 20109                           ; BSR set to: 0
 20110                           
 20111                           ;incstack = 0
 20112  00527C  0E00               	movlw	0
 20113  00527E  6E06               	movwf	i2___awmod@sign^0,c
 20114                           
 20115                           ; BSR set to: 0
 20116  005280  AE02               	btfss	(i2___awmod@dividend+1)^0,7,c
 20117  005282  D006               	goto	i2l7590
 20118                           
 20119                           ; BSR set to: 0
 20120  005284  6C01               	negf	i2___awmod@dividend^0,c
 20121  005286  1E02               	comf	(i2___awmod@dividend+1)^0,f,c
 20122  005288  B0D8               	btfsc	status,0,c
 20123  00528A  2A02               	incf	(i2___awmod@dividend+1)^0,f,c
 20124                           
 20125                           ; BSR set to: 0
 20126  00528C  0E01               	movlw	1
 20127  00528E  6E06               	movwf	i2___awmod@sign^0,c
 20128  005290                     i2l7590:
 20129                           
 20130                           ; BSR set to: 0
 20131  005290  AE04               	btfss	(i2___awmod@divisor+1)^0,7,c
 20132  005292  D004               	goto	i2l7594
 20133                           
 20134                           ; BSR set to: 0
 20135  005294  6C03               	negf	i2___awmod@divisor^0,c
 20136  005296  1E04               	comf	(i2___awmod@divisor+1)^0,f,c
 20137  005298  B0D8               	btfsc	status,0,c
 20138  00529A  2A04               	incf	(i2___awmod@divisor+1)^0,f,c
 20139  00529C                     i2l7594:
 20140                           
 20141                           ; BSR set to: 0
 20142  00529C  5003               	movf	i2___awmod@divisor^0,w,c
 20143  00529E  1004               	iorwf	(i2___awmod@divisor+1)^0,w,c
 20144  0052A0  B4D8               	btfsc	status,2,c
 20145  0052A2  D018               	goto	i2l7610
 20146                           
 20147                           ; BSR set to: 0
 20148  0052A4  0E01               	movlw	1
 20149  0052A6  6E05               	movwf	i2___awmod@counter^0,c
 20150  0052A8  D004               	goto	i2l7600
 20151  0052AA                     i2l7598:
 20152                           
 20153                           ; BSR set to: 0
 20154  0052AA  90D8               	bcf	status,0,c
 20155  0052AC  3603               	rlcf	i2___awmod@divisor^0,f,c
 20156  0052AE  3604               	rlcf	(i2___awmod@divisor+1)^0,f,c
 20157  0052B0  2A05               	incf	i2___awmod@counter^0,f,c
 20158  0052B2                     i2l7600:
 20159                           
 20160                           ; BSR set to: 0
 20161  0052B2  AE04               	btfss	(i2___awmod@divisor+1)^0,7,c
 20162  0052B4  D7FA               	goto	i2l7598
 20163  0052B6                     i2u544_40:
 20164                           
 20165                           ; BSR set to: 0
 20166  0052B6  5003               	movf	i2___awmod@divisor^0,w,c
 20167  0052B8  5C01               	subwf	i2___awmod@dividend^0,w,c
 20168  0052BA  5004               	movf	(i2___awmod@divisor+1)^0,w,c
 20169  0052BC  5802               	subwfb	(i2___awmod@dividend+1)^0,w,c
 20170  0052BE  A0D8               	btfss	status,0,c
 20171  0052C0  D004               	goto	i2l7606
 20172                           
 20173                           ; BSR set to: 0
 20174  0052C2  5003               	movf	i2___awmod@divisor^0,w,c
 20175  0052C4  5E01               	subwf	i2___awmod@dividend^0,f,c
 20176  0052C6  5004               	movf	(i2___awmod@divisor+1)^0,w,c
 20177  0052C8  5A02               	subwfb	(i2___awmod@dividend+1)^0,f,c
 20178  0052CA                     i2l7606:
 20179                           
 20180                           ; BSR set to: 0
 20181  0052CA  90D8               	bcf	status,0,c
 20182  0052CC  3204               	rrcf	(i2___awmod@divisor+1)^0,f,c
 20183  0052CE  3203               	rrcf	i2___awmod@divisor^0,f,c
 20184                           
 20185                           ; BSR set to: 0
 20186  0052D0  2E05               	decfsz	i2___awmod@counter^0,f,c
 20187  0052D2  D7F1               	goto	i2u544_40
 20188  0052D4                     i2l7610:
 20189                           
 20190                           ; BSR set to: 0
 20191  0052D4  5006               	movf	i2___awmod@sign^0,w,c
 20192  0052D6  B4D8               	btfsc	status,2,c
 20193  0052D8  D004               	goto	i2l7614
 20194                           
 20195                           ; BSR set to: 0
 20196  0052DA  6C01               	negf	i2___awmod@dividend^0,c
 20197  0052DC  1E02               	comf	(i2___awmod@dividend+1)^0,f,c
 20198  0052DE  B0D8               	btfsc	status,0,c
 20199  0052E0  2A02               	incf	(i2___awmod@dividend+1)^0,f,c
 20200  0052E2                     i2l7614:
 20201                           
 20202                           ; BSR set to: 0
 20203  0052E2  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 20204  0052E6  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 20205                           
 20206                           ; BSR set to: 0
 20207  0052EA  0012               	return		;funcret
 20208  0052EC                     __end_ofi2___awmod:
 20209                           	callstack 0
 20210                           
 20211 ;; *************** function i2_LEAVECRITICAL *****************
 20212 ;; Defined at:
 20213 ;;		line 186 in file "xf/xf.c"
 20214 ;; Parameters:    Size  Location     Type
 20215 ;;  inISR           1    wreg     _Bool 
 20216 ;; Auto vars:     Size  Location     Type
 20217 ;;  inISR           1    0[COMRAM] _Bool 
 20218 ;; Return value:  Size  Location     Type
 20219 ;;                  1    wreg      void 
 20220 ;; Registers used:
 20221 ;;		wreg, status,2
 20222 ;; Tracked objects:
 20223 ;;		On entry : 0/0
 20224 ;;		On exit  : 0/0
 20225 ;;		Unchanged: 0/0
 20226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20227 ;;      Params:         0       0       0       0       0       0       0
 20228 ;;      Locals:         1       0       0       0       0       0       0
 20229 ;;      Temps:          0       0       0       0       0       0       0
 20230 ;;      Totals:         1       0       0       0       0       0       0
 20231 ;;Total ram usage:        1 bytes
 20232 ;; Hardware stack levels used: 1
 20233 ;; This function calls:
 20234 ;;		Nothing
 20235 ;; This function is called by:
 20236 ;;		i2_XF_pushEvent
 20237 ;;		i2_XF_unscheduleTimer
 20238 ;; This function uses a non-reentrant model
 20239 ;;
 20240                           
 20241                           	psect	text91
 20242  005A56                     __ptext91:
 20243                           	callstack 0
 20244  005A56                     i2_LEAVECRITICAL:
 20245                           	callstack 15
 20246                           
 20247                           ; BSR set to: 0
 20248                           ;incstack = 0
 20249                           ;i2LEAVECRITICAL@inISR stored from wreg
 20250  005A56  6E01               	movwf	i2LEAVECRITICAL@inISR^0,c
 20251                           
 20252                           ;xf/xf.c: 186: static void LEAVECRITICAL(_Bool inISR);xf/xf.c: 187: {;xf/xf.c: 188:     
      +                          if (inISR == 0)
 20253  005A58  5001               	movf	i2LEAVECRITICAL@inISR^0,w,c
 20254  005A5A  A4D8               	btfss	status,2,c
 20255  005A5C  0012               	return	
 20256                           
 20257                           ;xf/xf.c: 189:     {;xf/xf.c: 190:       GIE = 1;
 20258  005A5E  8EF2               	bsf	4082,7,c	;volatile
 20259  005A60  0012               	return		;funcret
 20260  005A62                     __end_ofi2_LEAVECRITICAL:
 20261                           	callstack 0
 20262                           
 20263 ;; *************** function i2_ENTERCRITICAL *****************
 20264 ;; Defined at:
 20265 ;;		line 172 in file "xf/xf.c"
 20266 ;; Parameters:    Size  Location     Type
 20267 ;;  inISR           1    wreg     _Bool 
 20268 ;; Auto vars:     Size  Location     Type
 20269 ;;  inISR           1    0[COMRAM] _Bool 
 20270 ;; Return value:  Size  Location     Type
 20271 ;;                  1    wreg      void 
 20272 ;; Registers used:
 20273 ;;		wreg, status,2
 20274 ;; Tracked objects:
 20275 ;;		On entry : 0/0
 20276 ;;		On exit  : 0/0
 20277 ;;		Unchanged: 0/0
 20278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20279 ;;      Params:         0       0       0       0       0       0       0
 20280 ;;      Locals:         1       0       0       0       0       0       0
 20281 ;;      Temps:          0       0       0       0       0       0       0
 20282 ;;      Totals:         1       0       0       0       0       0       0
 20283 ;;Total ram usage:        1 bytes
 20284 ;; Hardware stack levels used: 1
 20285 ;; This function calls:
 20286 ;;		Nothing
 20287 ;; This function is called by:
 20288 ;;		i2_XF_pushEvent
 20289 ;;		i2_XF_unscheduleTimer
 20290 ;; This function uses a non-reentrant model
 20291 ;;
 20292                           
 20293                           	psect	text92
 20294  005A62                     __ptext92:
 20295                           	callstack 0
 20296  005A62                     i2_ENTERCRITICAL:
 20297                           	callstack 15
 20298                           
 20299                           ;incstack = 0
 20300                           ;i2ENTERCRITICAL@inISR stored from wreg
 20301  005A62  6E01               	movwf	i2ENTERCRITICAL@inISR^0,c
 20302                           
 20303                           ;xf/xf.c: 172: static void ENTERCRITICAL(_Bool inISR);xf/xf.c: 173: {;xf/xf.c: 174:     
      +                          if (inISR == 0)
 20304  005A64  5001               	movf	i2ENTERCRITICAL@inISR^0,w,c
 20305  005A66  A4D8               	btfss	status,2,c
 20306  005A68  0012               	return	
 20307                           
 20308                           ;xf/xf.c: 175:     {;xf/xf.c: 176:       GIE = 0;
 20309  005A6A  9EF2               	bcf	4082,7,c	;volatile
 20310  005A6C  0012               	return		;funcret
 20311  005A6E                     __end_ofi2_ENTERCRITICAL:
 20312                           	callstack 0
 20313                           
 20314                           	psect	rparam
 20315  0000                     
 20316                           	psect	temp
 20317  00004E                     btemp:
 20318                           	callstack 0
 20319  00004E                     	ds	1
 20320  0000                     int$flags	set	btemp
 20321  0000                     wtemp8	set	btemp+1
 20322  0000                     ttemp5	set	btemp+1
 20323  0000                     ttemp6	set	btemp+4
 20324  0000                     ttemp7	set	btemp+8
 20325                           
 20326                           	psect	idloc
 20327                           
 20328                           ;Config register IDLOC0 @ 0x200000
 20329                           ;	unspecified, using default values
 20330  200000                     	org	2097152
 20331  200000  FF                 	db	255
 20332                           
 20333                           ;Config register IDLOC1 @ 0x200001
 20334                           ;	unspecified, using default values
 20335  200001                     	org	2097153
 20336  200001  FF                 	db	255
 20337                           
 20338                           ;Config register IDLOC2 @ 0x200002
 20339                           ;	unspecified, using default values
 20340  200002                     	org	2097154
 20341  200002  FF                 	db	255
 20342                           
 20343                           ;Config register IDLOC3 @ 0x200003
 20344                           ;	unspecified, using default values
 20345  200003                     	org	2097155
 20346  200003  FF                 	db	255
 20347                           
 20348                           ;Config register IDLOC4 @ 0x200004
 20349                           ;	unspecified, using default values
 20350  200004                     	org	2097156
 20351  200004  FF                 	db	255
 20352                           
 20353                           ;Config register IDLOC5 @ 0x200005
 20354                           ;	unspecified, using default values
 20355  200005                     	org	2097157
 20356  200005  FF                 	db	255
 20357                           
 20358                           ;Config register IDLOC6 @ 0x200006
 20359                           ;	unspecified, using default values
 20360  200006                     	org	2097158
 20361  200006  FF                 	db	255
 20362                           
 20363                           ;Config register IDLOC7 @ 0x200007
 20364                           ;	unspecified, using default values
 20365  200007                     	org	2097159
 20366  200007  FF                 	db	255
 20367                           
 20368                           	psect	config
 20369                           
 20370                           ; Padding undefined space
 20371  300000                     	org	3145728
 20372  300000  FF                 	db	255
 20373                           
 20374                           ;Config register CONFIG1H @ 0x300001
 20375                           ;	Oscillator Selection bits
 20376                           ;	FOSC = INTIO67, Internal oscillator block
 20377                           ;	4X PLL Enable
 20378                           ;	PLLCFG = ON, Oscillator multiplied by 4
 20379                           ;	Primary clock enable bit
 20380                           ;	PRICLKEN = ON, Primary clock is always enabled
 20381                           ;	Fail-Safe Clock Monitor Enable bit
 20382                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
 20383                           ;	Internal/External Oscillator Switchover bit
 20384                           ;	IESO = OFF, Oscillator Switchover mode disabled
 20385  300001                     	org	3145729
 20386  300001  38                 	db	56
 20387                           
 20388                           ;Config register CONFIG2L @ 0x300002
 20389                           ;	Power-up Timer Enable bit
 20390                           ;	PWRTEN = OFF, Power up timer disabled
 20391                           ;	Brown-out Reset Enable bits
 20392                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
 20393                           ;	Brown Out Reset Voltage bits
 20394                           ;	BORV = 190, VBOR set to 1.90 V nominal
 20395  300002                     	org	3145730
 20396  300002  1F                 	db	31
 20397                           
 20398                           ;Config register CONFIG2H @ 0x300003
 20399                           ;	Watchdog Timer Enable bits
 20400                           ;	WDTEN = SWON, WDT is controlled by SWDTEN bit of the WDTCON register
 20401                           ;	Watchdog Timer Postscale Select bits
 20402                           ;	WDTPS = 32768, 1:32768
 20403  300003                     	org	3145731
 20404  300003  3E                 	db	62
 20405                           
 20406                           ; Padding undefined space
 20407  300004                     	org	3145732
 20408  300004  FF                 	db	255
 20409                           
 20410                           ;Config register CONFIG3H @ 0x300005
 20411                           ;	CCP2 MUX bit
 20412                           ;	CCP2MX = PORTC1, CCP2 input/output is multiplexed with RC1
 20413                           ;	PORTB A/D Enable bit
 20414                           ;	PBADEN = OFF, PORTB<5:0> pins are configured as digital I/O on Reset
 20415                           ;	P3A/CCP3 Mux bit
 20416                           ;	CCP3MX = PORTB5, P3A/CCP3 input/output is multiplexed with RB5
 20417                           ;	HFINTOSC Fast Start-up
 20418                           ;	HFOFST = ON, HFINTOSC output and ready status are not delayed by the oscillator stable
      +                           status
 20419                           ;	Timer3 Clock input mux bit
 20420                           ;	T3CMX = PORTC0, T3CKI is on RC0
 20421                           ;	ECCP2 B output mux bit
 20422                           ;	P2BMX = PORTB5, P2B is on RB5
 20423                           ;	MCLR Pin Enable bit
 20424                           ;	MCLRE = EXTMCLR, MCLR pin enabled, RE3 input pin disabled
 20425  300005                     	org	3145733
 20426  300005  BD                 	db	189
 20427                           
 20428                           ;Config register CONFIG4L @ 0x300006
 20429                           ;	Stack Full/Underflow Reset Enable bit
 20430                           ;	STVREN = ON, Stack full/underflow will cause Reset
 20431                           ;	Single-Supply ICSP Enable bit
 20432                           ;	LVP = ON, Single-Supply ICSP enabled if MCLRE is also 1
 20433                           ;	Extended Instruction Set Enable bit
 20434                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
 20435                           ;	Background Debug
 20436                           ;	DEBUG = 0x1, unprogrammed default
 20437  300006                     	org	3145734
 20438  300006  85                 	db	133
 20439                           
 20440                           ; Padding undefined space
 20441  300007                     	org	3145735
 20442  300007  FF                 	db	255
 20443                           
 20444                           ;Config register CONFIG5L @ 0x300008
 20445                           ;	Code Protection Block 0
 20446                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
 20447                           ;	Code Protection Block 1
 20448                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
 20449                           ;	Code Protection Block 2
 20450                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
 20451                           ;	Code Protection Block 3
 20452                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
 20453  300008                     	org	3145736
 20454  300008  0F                 	db	15
 20455                           
 20456                           ;Config register CONFIG5H @ 0x300009
 20457                           ;	Boot Block Code Protection bit
 20458                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
 20459                           ;	Data EEPROM Code Protection bit
 20460                           ;	CPD = OFF, Data EEPROM not code-protected
 20461  300009                     	org	3145737
 20462  300009  C0                 	db	192
 20463                           
 20464                           ;Config register CONFIG6L @ 0x30000A
 20465                           ;	Write Protection Block 0
 20466                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
 20467                           ;	Write Protection Block 1
 20468                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
 20469                           ;	Write Protection Block 2
 20470                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
 20471                           ;	Write Protection Block 3
 20472                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
 20473  30000A                     	org	3145738
 20474  30000A  0F                 	db	15
 20475                           
 20476                           ;Config register CONFIG6H @ 0x30000B
 20477                           ;	Configuration Register Write Protection bit
 20478                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
 20479                           ;	Boot Block Write Protection bit
 20480                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
 20481                           ;	Data EEPROM Write Protection bit
 20482                           ;	WRTD = OFF, Data EEPROM not write-protected
 20483  30000B                     	org	3145739
 20484  30000B  E0                 	db	224
 20485                           
 20486                           ;Config register CONFIG7L @ 0x30000C
 20487                           ;	Table Read Protection Block 0
 20488                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
 20489                           ;	Table Read Protection Block 1
 20490                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
 20491                           ;	Table Read Protection Block 2
 20492                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
 20493                           ;	Table Read Protection Block 3
 20494                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
 20495  30000C                     	org	3145740
 20496  30000C  0F                 	db	15
 20497                           
 20498                           ;Config register CONFIG7H @ 0x30000D
 20499                           ;	Boot Block Table Read Protection bit
 20500                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
 20501  30000D                     	org	3145741
 20502  30000D  40                 	db	64
 20503                           tosu	equ	0xFFF
 20504                           tosh	equ	0xFFE
 20505                           tosl	equ	0xFFD
 20506                           stkptr	equ	0xFFC
 20507                           pclatu	equ	0xFFB
 20508                           pclath	equ	0xFFA
 20509                           pcl	equ	0xFF9
 20510                           tblptru	equ	0xFF8
 20511                           tblptrh	equ	0xFF7
 20512                           tblptrl	equ	0xFF6
 20513                           tablat	equ	0xFF5
 20514                           prodh	equ	0xFF4
 20515                           prodl	equ	0xFF3
 20516                           indf0	equ	0xFEF
 20517                           postinc0	equ	0xFEE
 20518                           postdec0	equ	0xFED
 20519                           preinc0	equ	0xFEC
 20520                           plusw0	equ	0xFEB
 20521                           fsr0h	equ	0xFEA
 20522                           fsr0l	equ	0xFE9
 20523                           wreg	equ	0xFE8
 20524                           indf1	equ	0xFE7
 20525                           postinc1	equ	0xFE6
 20526                           postdec1	equ	0xFE5
 20527                           preinc1	equ	0xFE4
 20528                           plusw1	equ	0xFE3
 20529                           fsr1h	equ	0xFE2
 20530                           fsr1l	equ	0xFE1
 20531                           bsr	equ	0xFE0
 20532                           indf2	equ	0xFDF
 20533                           postinc2	equ	0xFDE
 20534                           postdec2	equ	0xFDD
 20535                           preinc2	equ	0xFDC
 20536                           plusw2	equ	0xFDB
 20537                           fsr2h	equ	0xFDA
 20538                           fsr2l	equ	0xFD9
 20539                           status	equ	0xFD8

Data Sizes:
    Strings     124
    Constant    1867
    Data        0
    BSS         322
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     69      77
    BANK0           160     71     145
    BANK1           256      0     240
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    g1.font.bitmap	PTR const unsigned char  size(2) Largest target is 0
		 -> arialNarrow_12ptBitmaps(CODE[1575]), 

    g1.font.descriptor	PTR const struct . size(2) Largest target is 0
		 -> arialNarrow_12ptDescriptors(CODE[285]), 

    g1.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), 

    g1.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), 

    g1.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), 

    g1.font	PTR struct . size(2) Largest target is 0
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    g1.text	PTR const unsigned char  size(2) Largest target is 0
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    g1.fpPress	PTR FTN()void  size(2) Largest target is 0
		 -> Absolute function(), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 252
		 -> g1.str(BANK1[2]), dbuf(BANK0[32]), STR_15(CODE[13]), STR_14(CODE[13]), 
		 -> STR_13(CODE[6]), STR_12(CODE[11]), STR_11(CODE[11]), STR_10(CODE[8]), 
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), g1(BANK1[240]), STR_1(CODE[10]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 252
		 -> g1.str(BANK1[2]), dbuf(BANK0[32]), STR_15(CODE[13]), STR_14(CODE[13]), 
		 -> STR_13(CODE[6]), STR_12(CODE[11]), STR_11(CODE[11]), STR_10(CODE[8]), 
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), g1(BANK1[240]), STR_1(CODE[10]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_3(CODE[3]), STR_2(CODE[3]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 3
		 -> STR_3(CODE[3]), STR_2(CODE[3]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_3(CODE[3]), STR_2(CODE[3]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S5447_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    levelController@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    levelController@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    levelController@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    levelController@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    levelController@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    levelController@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    levelController@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    levelController@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    levelController@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    levelController@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    levelController@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    levelController@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    levelController@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    levelController@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    backlightController@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    backlightController@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    backlightController@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    backlightController@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    backlightController@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    backlightController@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    backlightController@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    backlightController@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    backlightController@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    backlightController@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    backlightController@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    backlightController@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    backlightController@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    backlightController@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    checkCollision@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    checkCollision@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    checkCollision@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    checkCollision@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    checkCollision@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    checkCollision@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    checkCollision@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    checkCollision@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    checkCollision@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    checkCollision@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    checkCollision@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    checkCollision@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    checkCollision@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    checkCollision@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    mooveBall@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    mooveBall@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    mooveBall@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    mooveBall@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    mooveBall@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    mooveBall@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    mooveBall@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    mooveBall@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    mooveBall@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    mooveBall@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    mooveBall@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    mooveBall@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    mooveBall@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    mooveBall@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    moovePaddle2@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle2@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle2@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle2@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle2@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle2@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle2@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle2@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle2@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle2@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle2@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle2@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle2@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle2@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    moovePaddle1@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle1@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle1@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle1@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle1@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle1@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle1@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle1@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle1@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle1@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle1@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    moovePaddle1@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    moovePaddle1@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    moovePaddle1@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    gameControllerController@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerController@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerController@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerController@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerController@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerController@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerController@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerController@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerController@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerController@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerController@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerController@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerController@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerController@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    gameControllerSM@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerSM@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerSM@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerSM@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerSM@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerSM@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerSM@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerSM@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerSM@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerSM@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerSM@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    gameControllerSM@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    gameControllerSM@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    gameControllerSM@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    gameControllerInit@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    displayController@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    displayController@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    displayController@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    displayController@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    displayController@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    displayController@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    displayController@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    displayController@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    displayController@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    displayController@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    displayController@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    displayController@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    displayController@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    displayController@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    displaySM@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    displayInit@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    touchScreenController@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    touchScreenSM@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    sleepInit@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    LCD_Bitmap@colorTablePtr	PTR unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    LCD_Bitmap@bmpPtr	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    LCD_Bitmap@strPtr	PTR struct . size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    RGB2LCD@colorTableEntry	PTR unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    LCD_DrawText@font.bitmap	PTR const unsigned char  size(2) Largest target is 1575
		 -> arialNarrow_12ptBitmaps(CODE[1575]), 

    LCD_DrawText@font.descriptor	PTR const struct . size(2) Largest target is 285
		 -> arialNarrow_12ptDescriptors(CODE[285]), 

    LCD_DrawText@font	PTR const struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    LCD_DrawText@msg	PTR const unsigned char  size(2) Largest target is 252
		 -> g1.str(BANK1[2]), STR_15(CODE[13]), STR_14(CODE[13]), STR_13(CODE[6]), 
		 -> STR_12(CODE[11]), STR_11(CODE[11]), STR_10(CODE[8]), STR_9(CODE[9]), 
		 -> STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), STR_5(CODE[9]), 
		 -> STR_4(CODE[9]), g1(BANK1[240]), STR_1(CODE[10]), 

    LCD_InSlider@slider.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_InSlider@slider	PTR struct . size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    LCD_InButton@button.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_InButton@button.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_InButton@button.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_InButton@button.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    LCD_InButton@button.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    LCD_InButton@button	PTR struct . size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    LCD_ButtonDraw@button.font.bitmap	PTR const unsigned char  size(2) Largest target is 1575
		 -> arialNarrow_12ptBitmaps(CODE[1575]), 

    LCD_ButtonDraw@button.font.descriptor	PTR const struct . size(2) Largest target is 285
		 -> arialNarrow_12ptDescriptors(CODE[285]), 

    LCD_ButtonDraw@bmpPtr	PTR struct . size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    LCD_ButtonDraw@button.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonDraw@button.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonDraw@button.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonDraw@button.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    LCD_ButtonDraw@button.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    LCD_ButtonDraw@button	PTR struct . size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    LCD_ButtonUpdate@button.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonUpdate@button.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonUpdate@button.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonUpdate@button.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    LCD_ButtonUpdate@button.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    LCD_ButtonUpdate@button	PTR struct . size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    LCD_ButtonCreate@fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonCreate@fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonCreate@fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonCreate@button.font.bitmap	PTR const unsigned char  size(2) Largest target is 1575
		 -> arialNarrow_12ptBitmaps(CODE[1575]), 

    LCD_ButtonCreate@button.font.descriptor	PTR const struct . size(2) Largest target is 285
		 -> arialNarrow_12ptDescriptors(CODE[285]), 

    LCD_ButtonCreate@font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    LCD_ButtonCreate@textOrBmp	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    LCD_ButtonCreate@button.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonCreate@button.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonCreate@button.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_ButtonCreate@button.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    LCD_ButtonCreate@button.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    LCD_ButtonCreate@button	PTR struct . size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    LCD_SliderDraw@slider.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_SliderDraw@slider	PTR struct . size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    LCD_SliderUpdate@slider.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_SliderUpdate@slider	PTR struct . size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    LCD_SliderCreate@fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_SliderCreate@slider.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    LCD_SliderCreate@slider	PTR struct . size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Menu_endGame@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_endGame@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_endGame@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_endGame@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_endGame@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_endGame@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_endGame@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_endGame@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_endGame@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_endGame@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_endGame@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_endGame@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_endGame@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_endGame@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Menu_inGameDraw@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_inGameDraw@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_inGameDraw@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_inGameDraw@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_inGameDraw@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_inGameDraw@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_inGameDraw@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_inGameDraw@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_inGameDraw@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_inGameDraw@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_inGameDraw@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_inGameDraw@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_inGameDraw@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_inGameDraw@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Menu_parametersDraw@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_parametersDraw@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_parametersDraw@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_parametersDraw@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_parametersDraw@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_parametersDraw@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_parametersDraw@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_parametersDraw@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_parametersDraw@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_parametersDraw@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_parametersDraw@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_parametersDraw@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_parametersDraw@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_parametersDraw@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Menu_welcomeDraw@g.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_welcomeDraw@g.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_welcomeDraw@g.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_welcomeDraw@g.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_welcomeDraw@g.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_welcomeDraw@g.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_welcomeDraw@g.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_welcomeDraw@g.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_welcomeDraw@g.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_welcomeDraw@g.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_welcomeDraw@g.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    Menu_welcomeDraw@g.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    Menu_welcomeDraw@g.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    Menu_welcomeDraw@g	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    GameParameters_setY@s.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setY@s.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setY@s.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setY@s.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setY@s.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setY@s.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setY@s.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setY@s.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setY@s.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setY@s.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setY@s.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setY@s.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setY@s.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setY@s	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    GameParameters_setX@s.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setX@s.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setX@s.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setX@s.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setX@s.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setX@s.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setX@s.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setX@s.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setX@s.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setX@s.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setX@s.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setX@s.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setX@s.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setX@s	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    GameParameters_resetPos@s.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_resetPos@s.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_resetPos@s.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_resetPos@s.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_resetPos@s.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_resetPos@s.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_resetPos@s.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_resetPos@s.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_resetPos@s.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_resetPos@s.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_resetPos@s.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_resetPos@s.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_resetPos@s.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_resetPos@s	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    GameParameters_setLevel@s.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setLevel@s.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setLevel@s.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setLevel@s.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setLevel@s.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setLevel@s.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setLevel@s.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setLevel@s.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setLevel@s.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setLevel@s.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setLevel@s.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setLevel@s.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setLevel@s.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setLevel@s	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    GameParameters_setBackLight@s.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setBackLight@s.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setBackLight@s.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setBackLight@s.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setBackLight@s.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setBackLight@s.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setBackLight@s.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setBackLight@s.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setBackLight@s.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setBackLight@s.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setBackLight@s.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_setBackLight@s.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_setBackLight@s.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_setBackLight@s	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    GameParameters_init@s.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_init@s.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_init@s.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_init@s.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_init@s.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_init@s.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_init@s.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_init@s.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_init@s.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_init@s.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_init@s.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    GameParameters_init@s.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    GameParameters_init@s.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    GameParameters_init@s	PTR struct GameParameters size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Score_draw@s	PTR struct Score size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Score_init@s	PTR struct Score size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    g1.sldLevel.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    S135$fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.sldBackLight.fpPress	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnTurnOff.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnTurnOff.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnTurnOff.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnTurnOff.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    g1.btnTurnOff.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    g1.btnNewGame.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnNewGame.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnNewGame.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnNewGame.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    g1.btnNewGame.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    g1.btnLeave.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnLeave.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnLeave.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnLeave.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    g1.btnLeave.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    g1.btnTwoPlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnTwoPlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnTwoPlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnTwoPlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    g1.btnTwoPlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    g1.btnOnePlayer.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnOnePlayer.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnOnePlayer.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnOnePlayer.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    g1.btnOnePlayer.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    S108$fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnParam.fpOut	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    S108$fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnParam.fpReleased	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    S108$fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    g1.btnParam.fpPress	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    S108$font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    g1.btnParam.font	PTR struct . size(2) Largest target is 9
		 -> arialNarrow_12ptFontInfo(CODE[7]), 

    S108$text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    g1.btnParam.text	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_9(CODE[9]), STR_8(CODE[2]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[9]), STR_4(CODE[9]), 

    S99$bitmap	PTR const unsigned char  size(2) Largest target is 1575
		 -> arialNarrow_12ptBitmaps(CODE[1575]), 

    arialNarrow_12ptFontInfo.bitmap	PTR const unsigned char  size(2) Largest target is 1575
		 -> arialNarrow_12ptBitmaps(CODE[1575]), 

    S99$descriptor	PTR const struct . size(2) Largest target is 285
		 -> arialNarrow_12ptDescriptors(CODE[285]), 

    arialNarrow_12ptFontInfo.descriptor	PTR const struct . size(2) Largest target is 285
		 -> arialNarrow_12ptDescriptors(CODE[285]), 

    Paddle_draw@p	PTR struct Paddle size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Paddle_addX@p	PTR struct Paddle size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Paddle_init@p	PTR struct Paddle size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Ball_draw@b	PTR struct Ball size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Ball_Update@b	PTR struct Ball size(2) Largest target is 252
		 -> g1(BANK1[240]), 

    Ball_init@b	PTR struct Ball size(2) Largest target is 252
		 -> g1(BANK1[240]), 


Critical Paths under _main in COMRAM

    _touchScreenInit->_XF_scheduleTimer
    _gameControllerInit->_gameControllerController
    _LCD_Init->_LCD_Lowlevel_Init
    _Factory_exec->_touchScreenSM
    _touchScreenSM->_touchScreenController
    _touchScreenController->___fltol
    ___fltol->___fldiv
    ___fldiv->___xxtofl
    _sleepSM->_sleepController
    _gameControllerSM->_gameControllerController
    _gameControllerController->_LCD_SliderUpdate
    _moovePaddle2->_Paddle_addX
    _moovePaddle1->_Paddle_addX
    _mooveBall->_checkCollision
    _checkCollision->_XF_pushEvent
    _XF_pushEvent->___awmod
    _levelController->_GameParameters_setLevel
    _desactivateTimerSleep->_XF_unscheduleTimer
    _XF_unscheduleTimer->_ENTERCRITICAL
    _XF_unscheduleTimer->_LEAVECRITICAL
    _backlightController->_GameParameters_setBackLight
    _XF_scheduleTimer->___wmul
    _GameParameters_init->_LCD_ButtonCreate
    _displayController->_Menu_endGame
    _displayController->_Menu_welcomeDraw
    _Menu_welcomeDraw->_LCD_ButtonDraw
    _Menu_parametersDraw->_LCD_SliderDraw
    _LCD_SliderDraw->_LCD_SliderUpdate
    _LCD_SliderUpdate->___lwdiv
    _Menu_endGame->_LCD_ButtonDraw
    _Menu_inGameDraw->_LCD_ButtonDraw
    _Score_draw->_LCD_DrawText
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->___aodiv
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _Paddle_draw->_LCD_DrawRect
    _LCD_ButtonDraw->_LCD_DrawText
    _LCD_DrawText->___wmul
    _LCD_ButtonUpdate->_LCD_DrawRect
    _LCD_Bitmap->___lwdiv
    ___wmul->___awdiv
    ___lwdiv->___wmul
    _Ball_draw->_LCD_DrawRect
    _XF_popEvent->___awmod

Critical Paths under _isr in COMRAM

    _isr->_XF_decrementAndQueueTimers
    _XF_decrementAndQueueTimers->i2_XF_pushEvent
    i2_XF_unscheduleTimer->i2_ENTERCRITICAL
    i2_XF_unscheduleTimer->i2_LEAVECRITICAL
    i2_XF_pushEvent->i2___awmod

Critical Paths under _main in BANK0

    _main->_Factory_exec
    _main->_Factory_init
    _Factory_init->_sleepInit
    _sleepInit->_displayInit
    _displayInit->_displayController
    _Factory_exec->_displaySM
    _touchScreenSM->_touchScreenController
    _displaySM->_displayController
    _displayController->_Menu_endGame
    _displayController->_Menu_parametersDraw
    _Menu_welcomeDraw->_LCD_ButtonDraw
    _Menu_parametersDraw->_LCD_ButtonDraw
    _Menu_endGame->_LCD_ButtonDraw
    _Menu_inGameDraw->_LCD_ButtonDraw
    _Score_draw->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _LCD_ButtonDraw->_LCD_Bitmap

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  696435
                       _Factory_exec
                       _Factory_init
 ---------------------------------------------------------------------------------
 (1) _Factory_init                                         2     2      0  310062
                                             69 BANK0      2     2      0
                _GameParameters_init
                       _LCD_DrawText
                           _LCD_Fill
                           _LCD_Init
                            _XF_init
                          _sleepInit
 ---------------------------------------------------------------------------------
 (2) _sleepInit                                            2     0      2  287387
                                             67 BANK0      2     0      2
                        _displayInit
                 _gameControllerInit
                    _sleepController
                    _touchScreenInit
 ---------------------------------------------------------------------------------
 (3) _touchScreenInit                                      0     0      0    1846
                   _XF_scheduleTimer
                        _configTouch
 ---------------------------------------------------------------------------------
 (3) _gameControllerInit                                   2     0      2   55030
                                             59 COMRAM     2     0      2
           _gameControllerController
 ---------------------------------------------------------------------------------
 (3) _displayInit                                          2     0      2  230359
                                             65 BANK0      2     0      2
                  _displayController
 ---------------------------------------------------------------------------------
 (2) _XF_init                                              2     2      0     158
                                             17 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             2     2      0      90
                                             22 COMRAM     2     2      0
                  _LCD_Lowlevel_Init
 ---------------------------------------------------------------------------------
 (3) _LCD_Lowlevel_Init                                    5     5      0      60
                                             17 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (1) _Factory_exec                                         1     1      0  386373
                                             70 BANK0      1     1      0
                        _XF_popEvent
                          _displaySM
                   _gameControllerSM
                            _sleepSM
                      _touchScreenSM
 ---------------------------------------------------------------------------------
 (2) _touchScreenSM                                        5     3      2    5517
                                             68 COMRAM     1     1      0
                                             12 BANK0      4     2      2
              _touchScreenController
 ---------------------------------------------------------------------------------
 (3) _touchScreenController                               14    12      2    5241
                                             66 COMRAM     2     0      2
                                              0 BANK0     12    12      0
                _GameParameters_setX
                _GameParameters_setY
                   _XF_scheduleTimer
                 _XF_unscheduleTimer
                            ___fldiv
                            ___fltol
                           ___xxtofl
                      _configMeasure
                        _configTouch
 ---------------------------------------------------------------------------------
 (4) _configMeasure                                        1     1      0      44
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) ___xxtofl                                            14    10      4     398
                                             17 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             10     6      4     305
                                             56 COMRAM    10     6      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fldiv                                             25    17      8    1399
                                             31 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) _GameParameters_setY                                  4     0      4     196
                                             17 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (4) _GameParameters_setX                                  4     0      4     196
                                             17 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _sleepSM                                              3     3      0      22
                                             19 COMRAM     3     3      0
                    _sleepController
 ---------------------------------------------------------------------------------
 (3) _sleepController                                      2     2      0       0
                                             17 COMRAM     2     2      0
                     _configPinSleep
 ---------------------------------------------------------------------------------
 (4) _configPinSleep                                       0     0      0       0
                        _configTouch
 ---------------------------------------------------------------------------------
 (4) _configTouch                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _gameControllerSM                                     5     3      2   60111
                                             59 COMRAM     5     3      2
                   _XF_scheduleTimer
                             ___wmul
           _gameControllerController
 ---------------------------------------------------------------------------------
 (4) _gameControllerController                             5     2      3   54932
                                             54 COMRAM     5     2      3
                _GameParameters_init
            _GameParameters_resetPos
                       _LCD_InButton
                       _LCD_InSlider
                   _LCD_SliderUpdate
                       _XF_pushEvent
                   _XF_scheduleTimer
                             ___wmul
                _backlightController
              _desactivateTimerSleep
                    _levelController
                          _mooveBall
                       _moovePaddle1
                       _moovePaddle2
 ---------------------------------------------------------------------------------
 (5) _moovePaddle2                                         8     6      2    3603
                                             27 COMRAM     8     6      2
                        _Paddle_addX
                       _XF_pushEvent
 ---------------------------------------------------------------------------------
 (5) _moovePaddle1                                         4     2      2    4505
                                             27 COMRAM     4     2      2
            _GameParameters_resetPos
                        _Paddle_addX
                       _XF_pushEvent
 ---------------------------------------------------------------------------------
 (6) _Paddle_addX                                         10     4      6    1176
                                             17 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (6) _GameParameters_resetPos                              2     0      2     880
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _mooveBall                                            2     0      2    6602
                                             36 COMRAM     2     0      2
                        _Ball_Update
                       _XF_pushEvent
                     _checkCollision
 ---------------------------------------------------------------------------------
 (6) _checkCollision                                      30    28      2    4055
                                             26 COMRAM    10     8      2
                       _XF_pushEvent
 ---------------------------------------------------------------------------------
 (6) _XF_pushEvent                                         3     2      1    2219
                                             23 COMRAM     3     2      1
                      _ENTERCRITICAL
                      _LEAVECRITICAL
                            ___awmod
 ---------------------------------------------------------------------------------
 (6) _Ball_Update                                          6     4      2     208
                                             17 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _levelController                                      4     2      2     774
                                             21 COMRAM     4     2      2
            _GameParameters_setLevel
 ---------------------------------------------------------------------------------
 (6) _GameParameters_setLevel                              4     0      4     500
                                             17 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (5) _desactivateTimerSleep                                3     3      0     424
                                             20 COMRAM     3     3      0
                 _XF_unscheduleTimer
 ---------------------------------------------------------------------------------
 (6) _XF_unscheduleTimer                                   2     1      1     334
                                             18 COMRAM     2     1      1
                      _ENTERCRITICAL
                      _LEAVECRITICAL
 ---------------------------------------------------------------------------------
 (5) _backlightController                                  4     2      2    2824
                                             23 COMRAM     4     2      2
        _GameParameters_setBackLight
 ---------------------------------------------------------------------------------
 (6) _GameParameters_setBackLight                          6     2      4    1912
                                             17 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _XF_scheduleTimer                                     5     1      4    1846
                                             31 COMRAM     5     1      4
                      _ENTERCRITICAL
                      _LEAVECRITICAL
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _LCD_InSlider                                        10     4      6     676
                                             17 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (5) _LCD_InButton                                        10     4      6    2044
                                             17 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (5) _GameParameters_init                                  2     0      2    9968
                                             42 COMRAM     2     0      2
                          _Ball_init
                   _LCD_ButtonCreate
                   _LCD_SliderCreate
                        _Paddle_init
                         _Score_init
 ---------------------------------------------------------------------------------
 (6) _Score_init                                           2     0      2     120
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (6) _Paddle_init                                          4     0      4     502
                                             17 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (6) _LCD_SliderCreate                                    22     0     22    2156
                                             17 COMRAM    22     0     22
 ---------------------------------------------------------------------------------
 (6) _LCD_ButtonCreate                                    25     0     25    6478
                                             17 COMRAM    25     0     25
 ---------------------------------------------------------------------------------
 (6) _Ball_init                                            2     0      2     186
                                             17 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _displaySM                                            5     3      2  319809
                                             65 BANK0      5     3      2
                    _Menu_inGameDraw
                  _displayController
 ---------------------------------------------------------------------------------
 (4) _displayController                                    5     2      3  230238
                                             60 BANK0      5     2      3
                          _Ball_draw
                       _LCD_DrawRect
                       _Menu_endGame
                _Menu_parametersDraw
                   _Menu_welcomeDraw
                        _Paddle_draw
                         _Score_draw
 ---------------------------------------------------------------------------------
 (5) _Menu_welcomeDraw                                     2     0      2   52342
                                             67 COMRAM     2     0      2
                     _LCD_ButtonDraw
                       _LCD_DrawText
                           _LCD_Fill
 ---------------------------------------------------------------------------------
 (5) _Menu_parametersDraw                                  2     0      2   75482
                                             58 BANK0      2     0      2
                     _LCD_ButtonDraw
                       _LCD_DrawText
                           _LCD_Fill
                     _LCD_SliderDraw
 ---------------------------------------------------------------------------------
 (6) _LCD_SliderDraw                                      14    12      2   23047
                                             54 COMRAM    14    12      2
                       _LCD_DrawRect
                   _LCD_SliderUpdate
 ---------------------------------------------------------------------------------
 (5) _LCD_SliderUpdate                                    16    14      2   13758
                                             38 COMRAM    16    14      2
                       _LCD_DrawRect
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) _Menu_endGame                                         4     2      2   52311
                                             67 COMRAM     2     0      2
                                             58 BANK0      2     2      0
                     _LCD_ButtonDraw
                       _LCD_DrawText
                           _LCD_Fill
 ---------------------------------------------------------------------------------
 (3) _Menu_inGameDraw                                      2     0      2   88799
                                             58 BANK0      2     0      2
                          _Ball_draw
                     _LCD_ButtonDraw
                       _LCD_DrawRect
                           _LCD_Fill
                        _Paddle_draw
                         _Score_draw
 ---------------------------------------------------------------------------------
 (5) _Score_draw                                           2     0      2   21039
                                             43 BANK0      2     0      2
                       _LCD_DrawText
                            _sprintf
 ---------------------------------------------------------------------------------
 (6) _sprintf                                             15     9      6    8777
                                             30 BANK0     13     7      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (7) _vfprintf                                             6     2      4    8111
                                             63 COMRAM     2     2      0
                                             26 BANK0      4     0      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (8) _vfpfcnvrt                                           37    34      3    7638
                                             60 COMRAM     3     0      3
                                             18 BANK0      8     8      0
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (9) _dtoa                                                35    26      9    5863
                                             43 COMRAM    17     8      9
                                              0 BANK0     18    18      0
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (10) _pad                                                 9     5      4    3597
                                             30 COMRAM     9     5      4
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (11) _fputs                                               5     3      2    1537
                                             25 COMRAM     5     3      2
                              _fputc
 ---------------------------------------------------------------------------------
 (9) _fputc                                                8     5      3    1037
                                             17 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (10) _putch                                               1     1      0       0
 ---------------------------------------------------------------------------------
 (10) _abs                                                 4     2      2     183
                                             35 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (10) ___aomod                                            18     2     16     613
                                             17 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (10) ___aodiv                                            26    10     16     625
                                             17 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (5) _Paddle_draw                                          6     4      2    9349
                                             36 COMRAM     6     4      2
                       _LCD_DrawRect
 ---------------------------------------------------------------------------------
 (6) _LCD_Fill                                             8     6      2     563
                                             17 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (6) _LCD_ButtonDraw                                      32    30      2   39669
                                             65 COMRAM     2     0      2
                                             28 BANK0     30    30      0
                         _LCD_Bitmap
                   _LCD_ButtonUpdate
                       _LCD_DrawRect
                       _LCD_DrawText
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _LCD_DrawText                                        34    21     13   11896
                                             31 COMRAM    34    21     13
                            ___awdiv
                             ___wmul
                             _strlen
 ---------------------------------------------------------------------------------
 (11) _strlen                                              4     2      2     400
                                             17 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     452
                                             17 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (7) _LCD_ButtonUpdate                                    18    16      2    9996
                                             36 COMRAM    18    16      2
                       _LCD_DrawRect
                           _LCD_Read
 ---------------------------------------------------------------------------------
 (8) _LCD_Read                                            10     6      4     405
                                             17 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (7) _LCD_Bitmap                                          38    32      6    6306
                                             38 COMRAM    10     4      6
                                              0 BANK0     28    28      0
                            _RGB2LCD
                            ___lwdiv
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    2949
                                             25 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) ___lwmod                                              5     1      4     311
                                             17 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     706
                                             31 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (8) _RGB2LCD                                             14    12      2     386
                                             17 COMRAM    14    12      2
 ---------------------------------------------------------------------------------
 (5) _Ball_draw                                           10     8      2    9175
                                             36 COMRAM    10     8      2
                       _LCD_DrawRect
 ---------------------------------------------------------------------------------
 (6) _LCD_DrawRect                                        19     8     11    8759
                                             17 COMRAM    19     8     11
 ---------------------------------------------------------------------------------
 (2) _XF_popEvent                                          2     2      0     756
                                             23 COMRAM     2     2      0
                      _ENTERCRITICAL
                      _LEAVECRITICAL
                            ___awmod
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4     600
                                             17 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _LEAVECRITICAL                                        1     1      0      22
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _ENTERCRITICAL                                        1     1      0      22
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (14) _isr                                                 4     4      0    1542
                                             13 COMRAM     4     4      0
         _XF_decrementAndQueueTimers
                     i2_XF_pushEvent
 ---------------------------------------------------------------------------------
 (15) _XF_decrementAndQueueTimers                          4     4      0     939
                                              9 COMRAM     4     4      0
                     i2_XF_pushEvent
               i2_XF_unscheduleTimer
 ---------------------------------------------------------------------------------
 (16) i2_XF_unscheduleTimer                                2     1      1     158
                                              1 COMRAM     2     1      1
                    i2_ENTERCRITICAL
                    i2_LEAVECRITICAL
 ---------------------------------------------------------------------------------
 (15) i2_XF_pushEvent                                      3     2      1     603
                                              6 COMRAM     3     2      1
                    i2_ENTERCRITICAL
                    i2_LEAVECRITICAL
                          i2___awmod
 ---------------------------------------------------------------------------------
 (16) i2___awmod                                           6     2      4     348
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (16) i2_LEAVECRITICAL                                     1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (16) i2_ENTERCRITICAL                                     1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Factory_exec
     _XF_popEvent
       _ENTERCRITICAL
       _LEAVECRITICAL
       ___awmod
     _displaySM
       _Menu_inGameDraw
         _Ball_draw
           _LCD_DrawRect
         _LCD_ButtonDraw
           _LCD_Bitmap
             _RGB2LCD
             ___lwdiv
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___lwmod
             ___wmul
           _LCD_ButtonUpdate
             _LCD_DrawRect
             _LCD_Read
           _LCD_DrawRect
           _LCD_DrawText
             ___awdiv
             ___wmul
             _strlen
           _strlen
         _LCD_DrawRect
         _LCD_Fill
         _Paddle_draw
           _LCD_DrawRect
         _Score_draw
           _LCD_DrawText
           _sprintf
             _vfprintf
               _vfpfcnvrt
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _putch
                     _fputs
                       _fputc
                     _strlen
                 _fputc
       _displayController
         _Ball_draw
         _LCD_DrawRect
         _Menu_endGame
           _LCD_ButtonDraw
           _LCD_DrawText
           _LCD_Fill
         _Menu_parametersDraw
           _LCD_ButtonDraw
           _LCD_DrawText
           _LCD_Fill
           _LCD_SliderDraw
             _LCD_DrawRect
             _LCD_SliderUpdate
               _LCD_DrawRect
               ___lwdiv
               ___wmul
         _Menu_welcomeDraw
           _LCD_ButtonDraw
           _LCD_DrawText
           _LCD_Fill
         _Paddle_draw
         _Score_draw
     _gameControllerSM
       _XF_scheduleTimer
         _ENTERCRITICAL
         _LEAVECRITICAL
         ___wmul (ARG)
       ___wmul
       _gameControllerController
         _GameParameters_init
           _Ball_init
           _LCD_ButtonCreate
           _LCD_SliderCreate
           _Paddle_init
           _Score_init
         _GameParameters_resetPos
         _LCD_InButton
         _LCD_InSlider
         _LCD_SliderUpdate
         _XF_pushEvent
           _ENTERCRITICAL
           _LEAVECRITICAL
           ___awmod
         _XF_scheduleTimer
         ___wmul
         _backlightController
           _GameParameters_setBackLight
         _desactivateTimerSleep
           _XF_unscheduleTimer
             _ENTERCRITICAL
             _LEAVECRITICAL
         _levelController
           _GameParameters_setLevel
         _mooveBall
           _Ball_Update
           _XF_pushEvent
           _checkCollision
             _XF_pushEvent
         _moovePaddle1
           _GameParameters_resetPos
           _Paddle_addX
           _XF_pushEvent
         _moovePaddle2
           _Paddle_addX
           _XF_pushEvent
     _sleepSM
       _sleepController
         _configPinSleep
           _configTouch
     _touchScreenSM
       _touchScreenController
         _GameParameters_setX
         _GameParameters_setY
         _XF_scheduleTimer
         _XF_unscheduleTimer
         ___fldiv
           ___xxtofl (ARG)
         ___fltol
           ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _configMeasure
         _configTouch
   _Factory_init
     _GameParameters_init
     _LCD_DrawText
     _LCD_Fill
     _LCD_Init
       _LCD_Lowlevel_Init
     _XF_init
     _sleepInit
       _displayInit
         _displayController
       _gameControllerInit
         _gameControllerController
       _sleepController
       _touchScreenInit
         _XF_scheduleTimer
         _configTouch

 _isr (ROOT)
   _XF_decrementAndQueueTimers
     i2_XF_pushEvent
       i2_ENTERCRITICAL
       i2_LEAVECRITICAL
       i2___awmod
     i2_XF_unscheduleTimer
       i2_ENTERCRITICAL
       i2_LEAVECRITICAL
   i2_XF_pushEvent

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      F0       6       93.8%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     47      91       4       90.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     45      4D       1       81.9%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1CE       9        0.0%
DATA                 0      0     1CE      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Thu Sep 09 11:16:40 2021

                      _LCD_ButtonDraw 0E4C                           ?_LCD_Bitmap 0027  
                        ___fldiv@aexp 0038                          ___fldiv@bexp 0037  
                    _LCD_ButtonCreate 4060                 _desactivateTimerSleep 5698  
                        ___fldiv@sign 0030                          ?_displayInit 00EB  
                __end_of_Factory_exec 558A                  __end_of_Factory_init 4730  
                                  _g1 0100                          ___awdiv@sign 0017  
             __end_of_sleepController 58D6                     ??i2_ENTERCRITICAL 0001  
            __end_of_Menu_welcomeDraw 5012                   ___wmul@multiplicand 001C  
                backlightController@g 0018                      _LCD_ButtonUpdate 3092  
                       ?_LCD_InButton 0012                         ?_LCD_InSlider 0012  
                       ?_LCD_DrawRect 0012                         ?_LCD_DrawText 0020  
                                 l226 49D0                                   l315 224A  
                                 l340 0B36                                   l318 2268  
                                 l345 0B7A                                   l290 27DA  
                                 l283 2730                                   l348 0BB0  
                                 l532 32A4                                   l293 282C  
                                 l285 273A                                   l542 33B2  
                                 l296 28BA                                   l538 3304  
                                 l299 291C                                   l805 4AA2  
                                 l830 04E0                                   l670 13AC  
                                 l671 1400                                   l824 010C  
                                 l841 0828                                   l825 01B4  
                                 l780 5A72                                   l669 1358  
                                 l870 264E                                   _GIE 007F97  
                                 _PR2 000FBB                                   _abs 5848  
                                 _pad 5118                                   _isr 0008  
                configMeasure@channel 0012                       ??_ENTERCRITICAL 0012  
                        ___awmod@sign 0017                                   wreg 000FE8  
              __size_of_touchScreenSM 005E                       __end_of_RGB2LCD 48A4  
                        ___fltol@exp1 0042                      _touchScreenState 004D  
                         _Ball_Update 5096                         ??_Paddle_addX 0018  
                                ?_abs 0024                                  l1602 2ED6  
                                l1604 2EDE                                  l1541 389A  
                                l1470 2D4E                                  l1640 5870  
                                l1377 5498                                  l1481 2DBC  
                                l1482 2DB8                                  l4026 4F26  
                                l1387 568E                                  l1548 3918  
                                l4038 4F60                                  l1591 513E  
                                l7002 2322                                  l7020 2400  
                                l4188 2952                                  l7014 23B6  
                                l7102 56A0                                  ?_pad 001F  
                                l5520 27EE                                  l5440 274E  
                                l5360 2698                                  l6400 0D72  
                                l6160 19CE                                  l7032 2494  
                                l7008 236C                                  l6330 0B70  
                                l6402 0DAC                                  l6314 0B10  
                                l6138 17EA                                  l7050 2572  
                                l7026 244A                                  l7106 56BE  
                                l5444 275E                                  l5364 26BC  
                                l6340 0BC4                                  l6324 0B4A  
                                l6500 4D0E                                  l7044 2528  
                                l7116 43AE                                  l7220 15CC  
                                l7212 1522                                  l7204 14BC  
                                l7300 2C96                                  l5446 276C  
                                l6422 0E16                                  l6334 0B8E  
                                l6318 0B24                                  l6182 3146  
                                l7062 2606                                  l7038 24DE  
                                l5632 28CE                                  l6408 0DFE  
                                l6344 0BFC                                  l7056 25BC  
                                l6512 461A                                  l7232 1640  
                                l7224 15E2                                  l7216 1578  
                                l6362 0C6A                                  l6426 0E30  
                                l7082 457E                                  l7410 4798  
                                l7146 56F4                                  l5556 2840  
                                l6372 0CDC                                  l6348 0C52  
                                l7084 4592                                  l7076 4534  
                                l6460 53E4                                  l6516 464C  
                                l7092 4A5C                                  l7244 16EE  
                                l7332 2D4C                                  l7308 2CAE  
                                l7420 47B0                                  l5910 546E  
                                l6390 0D36                                  l5830 5026  
                                l8310 3C76                                  l8302 3C38  
                                l7238 1698                                  l7510 58B6  
                                l7326 2D26                                  l7318 2CFE  
                                l7262 2C08                                  l7422 47BC  
                                l7414 47A8                                  l5680 2930  
                                l5920 548E                                  l6368 0CB8  
                                l8312 3C8A                                  l8224 4E86  
                                l6800 08B6                                  l7344 2D82  
                                l5930 566C                                  l5842 504C  
                                l8234 561E                                  l8322 3CE8  
                                l8306 3C5C                                  l8410 305E  
                                l7506 58AC                                  l7338 2D64  
                                l7282 2C48                                  l7266 2C0C  
                                l7450 3900                                  l7522 32C0  
                                l5908 5466                                  l6396 0D6A  
                                l5844 5054                                  l5836 5036  
                                l8236 5622                                  l8244 5884  
                                l8340 5148                                  l7188 1304  
                                l7380 2E5C                                  l7372 2E4E  
                                l7364 2E00                                  l7428 47D8  
                                l7444 38C8                                  l7532 32E6  
                                ?_isr 0001                                  l5862 508C  
                                l5854 5074                                  l6582 49C8  
                                l8270 378E                                  l8326 3D0E  
                                l8318 3CD2                                  l8334 5128  
                                l8414 3072                                  l7198 1456  
                                l7294 2C80                                  l7286 2C4C  
                                l7446 38CE                                  l7438 38AA  
                                l7542 3330                                  l5936 5684  
                                l5928 5664                                  l8272 37A2  
                                l8264 3768                                  l8248 5896  
                                l8344 515C                                  l6760 0420  
                                l6752 0302                                  l7368 2E24  
                                l7456 393E                                  l7448 38DA  
                                l7552 33DE                                  l7528 32C8  
                                l7624 51A0                                  l5890 525A  
                                l5882 523A                                  l5874 5220  
                                l5858 507E                                  l8290 383A  
                                l8282 37FE                                  l8258 3740  
                                l8338 5136                                  l8362 2EBA  
                                l8610 559C                                  l7378 2E5A  
                                l7394 474E                                  l7474 398A  
                                l7458 394A                                  l5884 5242  
                                l8348 5180                                  l8380 2F06  
                                l8444 36C8                                  l8612 55B6  
                                l6908 4B6E                                  l6668 5738  
                                l6764 049C                                  l6756 0382  
                                l7804 3FE4                                  l7820 4030  
                                l7636 51C8                                  l5894 5264  
                                l5878 522C                                  l8470 1FB6  
                                l8286 3814                                  l8390 2FFA  
                                l8438 3694                                  l8454 36E8  
                                l6790 07E4                                  l6782 06CA  
                                l7566 344E                                  l8480 1FFC  
                                l8464 1F18                                  l8640 0F7C  
                                l8376 2EF8                                  l8448 36D2  
                                l8720 424A                                  l6936 4AC6  
                                l6768 04FC                                  l7816 401E  
                                l5898 5272                                  l7666 5510  
                                l8570 2188                                  l8722 4258  
                                l6786 0768                                  l6778 064A  
                                l6794 0844                                  l8476 1FDE  
                                l8652 10F0                                  l8716 491C  
                                l8732 4298                                  l8724 4266  
                                l7780 3F64                                  l8574 21C4  
                                l8662 1214                                  l8742 42FC  
                                l8830 4C5E                                  l8822 4C40  
                                l7678 57E8                                  l7686 57FA  
                                l8584 225C                                  l8656 115C  
                                l8736 42B2                                  l8728 427E  
                                l8824 4C52                                  l8808 4C02  
                                l6984 5408                                  l8746 430A  
                                l8818 4C32                                  l7786 3F80  
                       ??_Paddle_draw 0027                                  l8668 12F4  
                                l8844 4C74                                  l8836 4C6A  
                                l8852 4C78                                  l6988 5440  
                                l8780 5352                                  l8598 2282  
                                l7798 3FC6                                  l8792 5382  
                                l8784 535C                                  l8786 536A  
                                l8798 538C                   __end_of_XF_popEvent 5542  
                                STR_1 7FBD                                  STR_2 7FF9  
                                STR_3 7FF9                                  STR_4 7FD9  
                                STR_5 7FE2                                  STR_6 7FB2  
                                STR_7 7FD0                                  STR_8 7FFC  
                                STR_9 7FC7                         ??_Paddle_init 0016  
                                _LATA 000F89                                  u4010 4608  
                                u4100 00B4                                  u2420 4F50  
                                u4030 49F0                                  u4110 015C  
                                u2430 4F8C                                  u4121 0200  
                                u3405 3A42                                  u3415 3A86  
                                u5120 2E0E                                  u5200 47C2  
                                u3425 4868                                  u4330 4AC2  
                                u4410 233C                                  u5130 2E32  
                                u3435 487C                                  u3620 5670  
                                u6020 5856                                  u6100 3008  
                                u3550 5246                                  u6030 2E8C  
                                u4510 24AE                                  u4430 2386  
                                u5150 473C                                  u4191 0548  
                                u6120 302A                                  u6040 2E8E  
                                u6200 362C                                  u5080 2DB2  
                                u5160 476C                                  u6121 3028  
                                u3490 5058                                  u6130 3038  
                                u4290 4B6A                                  u4610 2620  
                                u4530 24F8                                  u4450 23D0  
                                u5330 32FC                                  u6220 1F5E  
                                u6140 303C                                  u4380 5448  
                                u5165 4762                                  u3590 5472  
                                u3830 31A0                                  u6070 2ECC  
                                u4550 2542                                  u4470 241A  
                                u4390 22F2                                  u4710 56D4  
                                u4630 4504                                  u6320 22D0  
                                u6160 3048                                  u5280 3954  
                                u6090 2EF2                                  u4570 258C  
                                u4490 2464                                  u4650 454E  
                                u6227 1F54                                  u6260 2036  
                                u6500 4C5A                                  u3861 09EE  
                                u6350 0F04                                  u4590 25D6  
                                u5630 3FDE                                  u5470 51C0  
                                u6327 22C6                                  u5480 5200  
                                u6274 222C                                  u5810 4EC0  
                                u4690 4A76                                  u6275 2226  
                                u6267 202C                                  u5820 5642  
                                u6480 4C12                                  u5827 5638  
                                u6557 4688                                  u5950 3C8E  
                                u5790 4E7E                                  u5871 376E  
                                u6567 2958                                  u6577 4F2C  
                                u5890 37A6                                  u6587 4F66  
                                _RBPU 007F8F                                  _WPUB 000F61  
                         displaySM@ev 00EF                           LCD_Bitmap@i 00C4  
                                abs@a 0024                                  _dbuf 008A  
                     ?_checkCollision 001B             __size_of_LCD_SliderCreate 00EE  
                                _main 5A6E                                  _dtoa 2E64  
                    _XF_scheduleTimer 53FE                                  _prec 0048  
                                _nout 0086                                  pad@i 0024  
                                pad@p 0021                                  fsr1h 000FE2  
                                fsr2h 000FDA                                  indf1 000FE7  
                                indf2 000FDF                                  fsr1l 000FE1  
                                pad@w 0026                                  fsr2l 000FD9  
                                btemp 004E                      Menu_inGameDraw@g 00E4  
                      touchScreenSM@g 00B6                                  prodh 000FF4  
                                prodl 000FF3      __end_of_arialNarrow_12ptFontInfo 7F82  
                                start 006C                           RGB2LCD@blue 001C  
              __end_of_LCD_ButtonDraw 1302             __size_of_LCD_SliderUpdate 0402  
                     ___fldiv@new_exp 0031                        _LCD_SliderDraw 3E52  
                  LCD_InSlider@slider 0012                       __end_of_XF_init 520C  
                        ___param_bank 000000                      _gameStateMachine 004C  
              LCD_ButtonCreate@height 0018                    XF_scheduleTimer@ev 0022  
                  XF_scheduleTimer@tm 0020                LCD_ButtonCreate@button 0028  
                               ??_abs 0026                                 ??_pad 0023  
                               ??_isr 000E                      __end_of_LCD_Fill 4A02  
                      ??_LCD_InButton 0018                      __end_of_LCD_Init 2BDC  
                    __end_of_LCD_Read 3ADA                        ??_LCD_InSlider 0018  
                      ??_LCD_DrawRect 001D           LCD_SliderCreate@cursorWidth 0020  
                      ??_LCD_DrawText 002D                         ___fltol@sign1 0041  
                     __end_of___aodiv 385C                                 ?_main 0001  
                               ?_dtoa 002C                       __end_of___aomod 3D30  
                     LCD_ButtonDraw@i 00E1                       __end_of___fldiv 2E64  
                     __end_of___awdiv 5096                                 STR_10 7FEB  
                               STR_11 7F9C                                 STR_12 7FA7  
                               STR_13 7FF3                                 STR_14 7F8F  
                               STR_15 7F82                       __end_of___awmod 527C  
                               _ANSB1 0079C9                                 _ANSB2 0079CA  
                     __end_of___fltol 47EA                                 _T0CON 000FD5  
                     ___awdiv@divisor 0014                                 _LATB1 007C51  
                               _LATC0 007C58                                 _LATB2 007C52  
                               _LATB3 007C53                                 _LATC2 007C5A  
                               _LATB4 007C54                                 _LATC3 007C5B  
                               _LATC4 007C5C                                 _LATC5 007C5D  
                     __end_of___lwdiv 54A2                       __end_of___lwmod 5698  
                               i2l771 0034                                 i2l775 0058  
                     ___awdiv@counter 0016                                 _PLLEN 007CDE  
                        vfpfcnvrt@fmt 003E                                 _TMR0H 000FD7  
                               _TMR0L 000FD6                                 _PORTA 000F80  
                     ??_configMeasure 0012                                 _TRISA 000F92  
                               _TRISC 000F94          __end_ofi2_XF_unscheduleTimer 57B2  
                 LCD_Bitmap@bfOffBits 00AA                          LCD_Fill@page 0018  
                               _flags 004A                          displayInit@g 00EB  
                               _fputc 4E72                                 _theXF 0060  
                               _fputs 587A                LCD_ButtonDraw@tempChar 00D2  
                 __size_of_LCD_Bitmap 0532                                 pad@fp 001F  
                               _width 0046                                 _putch 5A78  
                               dtoa@d 002D                                 dtoa@i 00BA  
                               dtoa@n 00B2                                 dtoa@p 00AC  
                               dtoa@s 00B0                                 dtoa@w 00AE  
                __end_of_XF_pushEvent 53FE                       __end_of_sleepSM 5816  
                        Paddle_addX@p 0012                                 tablat 000FF5  
          ??_gameControllerController 003A                       touchScreenSM@ev 0045  
                               plusw2 000FDB           ?_XF_decrementAndQueueTimers 0001  
                               ttemp5 004F                                 ttemp6 0052  
                               ttemp7 0056                                 status 000FD8  
                               wtemp8 004F                          Paddle_draw@p 0025  
                     __end_of_sprintf 5614                          RGB2LCD@color 001E  
                        RGB2LCD@green 001A                __end_of_LCD_SliderDraw 3F60  
                       ?_Menu_endGame 0044                          Paddle_init@p 0012  
            __size_of_touchScreenInit 001E               LCD_ButtonCreate@bgColor 001C  
                  __size_ofi2___awmod 0070                   __end_of_Paddle_addX 4676  
                     ?_LCD_ButtonDraw 0042                     ?_gameControllerSM 003C  
                 __end_of_Paddle_draw 3C0C                         _touchScreenSM 534E  
                 __end_of_Paddle_init 4D48                    __size_of_Ball_draw 0156  
                        LCD_Read@posX 0012                          LCD_Read@posY 0014  
                  __size_of_Ball_init 0062                       __initialization 57B2  
              ?_desactivateTimerSleep 0001                       _levelController 44EA  
                  ??_gameControllerSM 003E                          __end_of_main 5A78  
                        __end_of_dtoa 3092               LCD_ButtonCreate@fpPress 0022  
              touchScreenController@g 0043                touchScreenController@i 00B2  
                    ?_sleepController 0001                      i2XF_pushEvent@ev 0008  
              i2XF_unscheduleTimer@id 0003                                ??_main 0046  
                              ??_dtoa 0035          GameParameters_setLevel@value 0014  
                       __activetblptr 000002                             ??_RGB2LCD 0014  
                         _XF_popEvent 54F4                                _ADCON0 000FC2  
                              _ADCON2 000FC0                      LCD_ButtonDraw@x1 00D5  
                    LCD_ButtonDraw@x2 00D7                      LCD_ButtonDraw@y1 00D9  
                    LCD_ButtonDraw@y2 00DB                                ?_fputc 0012  
                              ?_fputs 001A                                _ADRESH 000FC4  
                              _ADRESL 000FC3                                _CCPR2L 000F67  
                    ___awdiv@dividend 0012               _GameParameters_setLevel 5A28  
                              ?_putch 0001                                _INT1IE 007F83  
                              _INT1IF 007F80                    LCD_DrawRect@colorH 0021  
                  LCD_DrawRect@colorL 0022               _GameParameters_resetPos 58D6  
                              i2l7600 52B2                                i2l7610 52D4  
                              i2l7614 52E2                                i2l7606 52CA  
                              i2l7590 5290                                i2l7840 54DA  
                              i2l7594 529C                                i2l7930 4DE6  
                              i2l7940 4E5A                                i2l7598 52AA  
                              i2l7938 4E46                                i2l7958 0046  
                              _OSCCON 000FD3                             ??_XF_init 0012  
                              _TMR0IE 007F95                                _TMR0IF 007F92  
                              _TMR2IF 007CF1                        ??_Menu_endGame 00E4  
                              _TRISB1 007C99                                _TRISC0 007CA0  
                              _TRISB2 007C9A                                _TRISC1 007CA1  
                              _TRISB3 007C9B                                _TRISC2 007CA2  
                              _TRISB4 007C9C                                _TRISC3 007CA3  
                              _TRISC4 007CA4                                _TRISC5 007CA5  
                    __end_of___xxtofl 399C                       ?_LCD_SliderDraw 0037  
                 i2XF_pushEvent@inISR 0007                  LCD_DrawText@bg_color 002B  
                          _Score_draw 441E                            _Score_init 5926  
                      ?_touchScreenSM 00B6                      ??_configPinSleep 0012  
                     i2_LEAVECRITICAL 5A56                 __size_of_Factory_exec 0048  
               __size_of_Factory_init 00BA                          vfprintf@cfmt 0040  
                 LCD_Bitmap@jumpColor 00C2                   LCD_Bitmap@jumpCount 00AF  
                 _Menu_parametersDraw 3D30                  __size_of_configTouch 0022  
          __end_of_gameControllerInit 59E6                             ??___aodiv 0022  
                           ??___aomod 0022                                ___wmul 594C  
                           ??___fldiv 0028                             ??___awdiv 0016  
                           ??___awmod 0016                         LCD_Fill@color 0012  
                           ??___fltol 003D                LCD_ButtonUpdate@button 0025  
                           ??___lwdiv 0024                             ??___lwmod 0016  
          gameControllerController@ev 0039                  LCD_DrawText@fontByte 0037  
        __size_of_GameParameters_init 03EE                                clear_0 57B8  
                              clear_1 57C4                                clear_2 57D0  
        __size_of_GameParameters_setX 0016          __size_of_GameParameters_setY 0016  
                    ___awdiv@quotient 0018             LCD_ButtonCreate@textOrBmp 001E  
               _touchScreenController 32A2                       ___awmod@divisor 0014  
                              isa$std 000001                       ___awmod@counter 0016  
                __size_of_displayInit 0016                                pad@buf 0020  
                              dtoa@fp 002C                                _strlen 5614  
                       LCD_DrawRect@i 0023                         LCD_DrawRect@j 001D  
                              fputc@c 0012                                fputs@c 001C  
                              fputs@i 001D                                fputs@s 001A  
        ?_GameParameters_setBackLight 0012                         LCD_DrawText@i 003E  
                   __end_ofi2___awmod 52EC                         LCD_DrawText@x 0040  
                       LCD_DrawText@y 003D                  LCD_DrawText@tempChar 003F  
                        __mediumconst 7836                                tblptrh 000FF7  
                           ??_sleepSM 0014                                tblptrl 000FF6  
                              tblptru 000FF8                     __end_of_Ball_draw 35C4  
                   __end_of_Ball_init 534E                  ?_Menu_parametersDraw 00E4  
                              putch@c 0001                      __end_of_vfprintf 55D2  
                      i2___awmod@sign 0006                             ??_sprintf 0042  
            __end_of_LCD_ButtonCreate 415A                           _Paddle_addX 45B4  
                        _Factory_exec 5542                          _Factory_init 4676  
                         _Paddle_draw 3ADA                           _Paddle_init 4CA4  
                    XF_pushEvent@temp 001A                          ___xxtofl@arg 001C  
               LCD_SliderCreate@width 0016                          ___xxtofl@exp 001B  
                        ___xxtofl@val 0012                  __end_of_LCD_InButton 4BFE  
               LCD_SliderCreate@steps 0022              __end_of_LCD_ButtonUpdate 32A2  
                          __accesstop 0060               __end_of__initialization 57D6  
                           ?_LCD_Fill 0012                      _LCD_SliderCreate 415A  
                           ?_LCD_Init 0001                             ?_LCD_Read 0012  
                __end_of_LCD_InSlider 4B56               __end_of_levelController 45B4  
                __end_of_LCD_DrawRect 293E                  __end_of_LCD_DrawText 22D8  
         __size_of_XF_unscheduleTimer 0034                       i2_ENTERCRITICAL 5A62  
                       ___rparam_used 000001                            ___fltol@f1 0039  
                       LCD_Read@color 0018                      _LCD_SliderUpdate 171E  
                  LEAVECRITICAL@inISR 0012                             LCD_Init@i 0018  
                      __pcstackCOMRAM 0001                          ??_LCD_Bitmap 002D  
                i2_XF_unscheduleTimer 577E                     ??_touchScreenInit 0025  
         __end_of_backlightController 266C                         __end_of_fputc 4F02  
                       __end_of_fputs 58AA                   gameControllerInit@g 003C  
          LCD_ButtonCreate@fpReleased 0024                         __end_of_putch 5A7A  
                   LCD_Bitmap@biWidth 00C0                     ?_Menu_welcomeDraw 0044  
                LCD_Bitmap@endOfImage 00AE              __end_of_XF_scheduleTimer 5450  
                  ??_Menu_welcomeDraw 0046                     LCD_Bitmap@curXPos 00B7  
 __size_of_XF_decrementAndQueueTimers 0094                     LCD_Bitmap@curYPos 00B1  
               __size_of_XF_pushEvent 0052             ??_GameParameters_setLevel 0016  
               ??_Menu_parametersDraw 0045         ??_GameParameters_setBackLight 0016  
                        Ball_Update@b 0012             ??_GameParameters_resetPos 0014  
             _arialNarrow_12ptBitmaps 7837                      ??_checkCollision 001D  
                  __size_of_displaySM 00A6                 __end_of_LEAVECRITICAL 5A4A  
                  LCD_DrawText@offset 0033                               ??_fputc 0015  
                             ??_fputs 001C                          ?_Ball_Update 0012  
              desactivateTimerSleep@i 0016                               ??_putch 0012  
    __end_of_gameControllerController 171E             gameControllerController@g 0037  
             __end_ofi2_LEAVECRITICAL 5A62                        XF_pushEvent@ev 0019  
                          __pbssBANK0 0060                            __pbssBANK1 0100  
                  __end_of_LCD_Bitmap 0E4C                            ??_LCD_Fill 0014  
                          ??_LCD_Init 0017                            ??_LCD_Read 0016  
                     ??_touchScreenSM 00B8              LCD_ButtonCreate@txtColor 001A  
                         ?_Score_draw 00D5                           ?_Score_init 0012  
                  ENTERCRITICAL@inISR 0012              __size_of_Menu_inGameDraw 0096  
                         Score_draw@s 00D5                           Score_init@s 0012  
               ?i2_XF_unscheduleTimer 0002                               ?___wmul 001A  
              ?_touchScreenController 0043                          _XF_pushEvent 53AC  
                  __size_of_mooveBall 0032                    __size_of_sleepInit 0026  
                             ?_strlen 0012                  __end_of_Menu_endGame 4954  
             __size_ofi2_XF_pushEvent 0052                               _RGB2LCD 47EA  
                             _INTEDG1 007F8D                  GameParameters_init@s 002B  
                           ?___xxtofl 0012                  GameParameters_setX@s 0012  
                GameParameters_setY@s 0012                    __size_of_vfpfcnvrt 0150  
               __end_of_ENTERCRITICAL 5A56                         ?_moovePaddle1 001C  
                       ?_moovePaddle2 001C               __end_ofi2_ENTERCRITICAL 5A6E  
                    ??_LCD_ButtonDraw 00C6                  Menu_parametersDraw@g 00E4  
 __end_of_arialNarrow_12ptDescriptors 7F7B           _arialNarrow_12ptDescriptors 7E5E  
                             _XF_init 5198                   LCD_ButtonDraw@xText 00DD  
                    ?_levelController 0016                   LCD_ButtonDraw@yText 00DF  
                 LCD_ButtonDraw@width 00D3               ??_desactivateTimerSleep 0015  
                             __Hparam 0000                               __Lparam 0000  
                             ___aodiv 3714                     __end_of_displaySM 4CA4  
                             ___aomod 3C0C                               ___fldiv 2BDC  
                             ___awdiv 5012                               ___awmod 520C  
                             ___fltol 4730                       __size_of___wmul 0026  
             LCD_ButtonUpdate@colorIn 002D                               ___lwdiv 5450  
                             ___lwmod 5656                             ?_vfprintf 00C4  
                      LCD_Bitmap@newY 00BD                        LCD_Bitmap@posX 0029  
                      LCD_Bitmap@posY 002B                        LCD_Fill@colorH 0014  
                      LCD_Fill@colorL 0015                               __pcinit 57B2  
                      LCD_Fill@column 0016                               __ramtop 0600  
                             __ptext0 5A6E                               __ptext1 4676  
                             __ptext2 5900                               __ptext3 5994  
                             __ptext4 59D0                               __ptext5 59E6  
                             __ptext6 5198                               __ptext7 293E  
                             __ptext8 4F02                               __ptext9 5542  
                     __size_of_strlen 0042             __size_of_gameControllerSM 0100  
                           _T2CONbits 000FBA                          __size_of_abs 0032  
                        __size_of_pad 0080                          __size_of_isr 0064  
                        ?_XF_popEvent 0001                            ??___xxtofl 0016  
                LCD_Bitmap@pixelCount 00BF                   __size_of_Score_draw 00CC  
                    ___awmod@dividend 0012                   __size_of_Score_init 0026  
               LCD_DrawText@fontPixel 0038                               _sleepSM 57E4  
               __end_of_configMeasure 5712                 __size_of_LCD_InButton 00A8  
             XF_unscheduleTimer@inISR 0013                        ??_moovePaddle1 001E  
                      ??_moovePaddle2 001E                 __size_of_LCD_InSlider 00A8  
                   Menu_welcomeDraw@g 0044                 __size_of_LCD_DrawRect 02D2  
                             _sprintf 55D2                 __size_of_LCD_DrawText 03CA  
                    ??_LCD_SliderDraw 0039                  end_of_initialization 57D6  
                    ?i2_LEAVECRITICAL 0001                   _GameParameters_init 1B20  
                 _GameParameters_setX 5A12                   _GameParameters_setY 59FC  
                   __end_of_mooveBall 5848                               fputc@fp 0014  
                       __Lmediumconst 7836                               fputs@fp 001B  
                      Paddle_addX@add 0016                     __end_of_sleepInit 5926  
                 displayController@ev 00E8                ??i2_XF_unscheduleTimer 0003  
                   __end_of_vfpfcnvrt 3714                            _sleepState 0089  
                             postdec1 000FE5                               postdec2 000FDD  
                   _LCD_Lowlevel_Init 4F02                               postinc0 000FEE  
                             postinc1 000FE6                               postinc2 000FDE  
                          ??_vfprintf 0040     __size_of_gameControllerController 041C  
                ?_GameParameters_init 002B             ?_gameControllerController 0037  
                   ??_Menu_inGameDraw 0044                  ?_GameParameters_setX 0012  
                  ?_LCD_Lowlevel_Init 0001                  ?_GameParameters_setY 0012  
                             strlen@a 0014                               strlen@s 0012  
                        _LCD_InButton 4B56                             _PORTBbits 000F81  
            __end_of_LCD_SliderCreate 4248                LCD_SliderCreate@height 0018  
                        _LCD_InSlider 4AAE                          _displayState 0088  
                        _LCD_DrawRect 266C                          _LCD_DrawText 1F0E  
                   XF_pushEvent@inISR 0018              __end_of_LCD_SliderUpdate 1B20  
                    XF_popEvent@inISR 0019                LCD_SliderCreate@slider 0026  
                 ??_LCD_Lowlevel_Init 0012                         ___xxtofl@sign 001A  
                  _gameControllerInit 59D0              __size_of_sleepController 002C  
                      Factory_exec@ev 00F0                           ___fldiv@grs 0033  
                         ___fldiv@rem 002C                             i2___awmod 527C  
                    ?i2_ENTERCRITICAL 0001                     ?_LCD_ButtonCreate 0012  
                        ?_Paddle_addX 0012                          ?_Paddle_draw 0025  
                           _Ball_draw 346E                          ?_Paddle_init 0012  
                           _Ball_init 52EC                   ?_gameControllerInit 003C  
                __size_of_Ball_Update 0082                    ??_LCD_ButtonCreate 002B  
                   ?_LCD_ButtonUpdate 0025                       _touchScreenInit 5994  
                   _displayController 4248                           _CCP2CONbits 000F66  
                          displaySM@g 00EB                        LCD_Read@temp16 001A  
     __end_of_arialNarrow_12ptBitmaps 7E5E                RGB2LCD@colorTableEntry 0012  
                       ??_configTouch 0012                    ??_LCD_ButtonUpdate 0027  
                   __size_of_LCD_Fill 00AE                     __size_of_LCD_Init 029E  
                   __size_of_LCD_Read 013E                    ?_displayController 00E6  
                          RGB2LCD@red 0018             __end_of_LCD_Lowlevel_Init 4F8E  
                  LCD_Lowlevel_Init@i 0013                 LCD_ButtonCreate@fpOut 0026  
                   XF_scheduleTimer@i 0024                 LCD_ButtonCreate@index 002A  
               LCD_ButtonCreate@width 0016                         ??_displayInit 0046  
               __size_of_Menu_endGame 00B0                 ??_GameParameters_init 002D  
               ??_GameParameters_setX 0016                 ??_GameParameters_setY 0016  
                 ??_displayController 00E9                           vfpfcnvrt@ap 003F  
                         vfpfcnvrt@fp 003D                           vfpfcnvrt@ll 00BC  
                      __end_of___wmul 5972                  ??_gameControllerInit 003E  
                  LCD_Bitmap@biHeight 00B5                  XF_unscheduleTimer@id 0014  
                      i2_XF_pushEvent 54A2                     ?_XF_scheduleTimer 0020  
                      __end_of_strlen 5656                         XF_popEvent@ev 0018  
                 start_initialization 57B2                    ??_XF_scheduleTimer 0024  
                         __end_of_abs 587A                    LCD_InButton@button 0012  
                         __end_of_pad 5198                           __end_of_isr 006C  
               XF_scheduleTimer@inISR 0023                            ?i2___awmod 0001  
                          ?_Ball_draw 0025                            ?_Ball_init 0012  
           __end_of_displayController 4336             __size_of_Menu_welcomeDraw 0084  
          __end_of_XF_unscheduleTimer 577E                          ??_Score_draw 0042  
                   LCD_DrawRect@color 001B                          _Menu_endGame 48A4  
                        ??_Score_init 0014                     LCD_DrawRect@posX1 0012  
                   LCD_DrawRect@posX2 0016                     LCD_DrawRect@posY1 0014  
                   LCD_DrawRect@posY2 0018                    i2XF_pushEvent@temp 0009  
             ??_touchScreenController 00AA                           vfprintf@fmt 00C5  
                            ??___wmul 001E                  __end_of_moovePaddle1 4AAE  
                __end_of_moovePaddle2 441E                   LCD_DrawText@yOffset 0035  
                 __end_of_configTouch 5994                __end_ofi2_XF_pushEvent 54F4  
                 LCD_DrawText@posXEnd 003B                   LCD_DrawText@posYEnd 0039  
            _arialNarrow_12ptFontInfo 7F7B           __end_of_Menu_parametersDraw 3E52  
             __size_of_configPinSleep 001E                              ??_strlen 0014  
                LCD_SliderCreate@posX 0012                  LCD_SliderCreate@posY 0014  
                    _gameControllerSM 3F60                   __end_of_displayInit 59FC  
                           ___fldiv@a 0024                             ___fldiv@b 0020  
                            ?_RGB2LCD 0012          __size_of_backlightController 0394  
                         __pbssCOMRAM 0046                LCD_SliderUpdate@slider 0027  
                       Menu_endGame@g 0044           XF_decrementAndQueueTimers@i 000C  
                       __pcstackBANK0 00AA                    __end_of_Score_draw 44EA  
                LCD_SliderDraw@slider 0037                    __end_of_Score_init 594C  
                    ___aodiv@dividend 0012                    gameControllerSM@ev 0040  
             __end_of_touchScreenInit 59B2                  __size_of_XF_popEvent 004E  
                   __size_of___xxtofl 0140                         moovePaddle1@g 001C  
                       moovePaddle2@g 001C                      LCD_InButton@posX 0014  
                    LCD_InButton@posY 0016                      LCD_Bitmap@bmpPtr 0027  
                   LCD_DrawText@align 0024                              ?_XF_init 0001  
                   LCD_DrawText@color 0029                     ??_sleepController 0012  
                    LCD_Bitmap@strPtr 00BB          ??_XF_decrementAndQueueTimers 000A  
                   LCD_DrawText@width 0041                 __end_of_touchScreenSM 53AC  
             LCD_Bitmap@colorTablePtr 00B3                  i2LEAVECRITICAL@inISR 0001  
      __size_of_desactivateTimerSleep 003E                      LCD_SliderDraw@x1 003D  
                    LCD_SliderDraw@x2 003F                      LCD_SliderDraw@y1 0041  
                    LCD_SliderDraw@y2 0043            __size_of_LCD_Lowlevel_Init 008C  
                    ___lwdiv@dividend 0020         __end_of_desactivateTimerSleep 56D6  
                           _dtoa$5516 00AA                             __pintcode 0008  
                       __pmediumconst 7836                              ?___aodiv 0012  
                            ?___aomod 0012                              ?___fldiv 0020  
                            ?___awdiv 0012                      ___aodiv@quotient 0024  
                            ?___awmod 0012                              ?___fltol 0039  
                            ?___lwdiv 0020                              ?___lwmod 0012  
              __size_of_LEAVECRITICAL 000C                       ?i2_XF_pushEvent 0007  
                           _displaySM 4BFE                     __size_of_vfprintf 0048  
            ?_GameParameters_setLevel 0012   __end_of_GameParameters_setBackLight 574A  
         _GameParameters_setBackLight 5712              ?_GameParameters_resetPos 0012  
                          mooveBall@g 0025                              ?_sleepSM 0001  
                    levelController@g 0016                      ___lwdiv@quotient 0024  
         touchScreenController@valueX 00B4           touchScreenController@valueY 00B0  
                         ??i2___awmod 0005                              ?_sprintf 00C8  
                      __size_of_fputc 0090                        __size_of_fputs 0030  
                      __size_of_putch 0002                           ??_Ball_draw 0027  
                         ??_Ball_init 0014            __size_of_displayController 00EE  
                          sleepInit@g 00ED                              _LCD_Fill 4954  
                            _LCD_Init 293E                              _LCD_Read 399C  
                      ___wmul@product 001E                  __size_of_Paddle_addX 00C2  
                __size_of_Paddle_draw 0132                  __size_of_Paddle_init 00A4  
                     _Menu_inGameDraw 4D48                  i2ENTERCRITICAL@inISR 0001  
                  LCD_SliderUpdate@x1 0035                    LCD_SliderUpdate@x2 002F  
                  LCD_SliderUpdate@y1 0031                    LCD_SliderUpdate@y2 0033  
                  displayController@g 00E6               __size_of_checkCollision 08AA  
                           _mooveBall 5816                           _configTouch 5972  
                            XF_init@i 0012                              i2u544_40 52B6  
                           _sleepInit 5900                              i2u571_40 4E70  
              __size_of_ENTERCRITICAL 000C              __size_of_levelController 00CA  
                         _displayInit 59E6                             _vfpfcnvrt 35C4  
                          ?_displaySM 00EB                     ___wmul@multiplier 001A  
                   ?_LCD_SliderCreate 0012      GameParameters_setBackLight@value 0014  
                  LCD_ButtonUpdate@x1 0033                    LCD_ButtonUpdate@x2 002F  
                  LCD_ButtonUpdate@y1 0031                    LCD_ButtonUpdate@y2 0035  
                  ??_LCD_SliderCreate 0028                      __size_of_RGB2LCD 00BA  
                   ?_LCD_SliderUpdate 0027                      LCD_InSlider@posX 0014  
                    LCD_InSlider@posY 0016                  LCD_ButtonCreate@font 0020  
                LCD_ButtonCreate@posX 0012                  LCD_ButtonCreate@posY 0014  
                LCD_ButtonDraw@bmpPtr 00E2                      ?_touchScreenInit 0001  
                  ??_LCD_SliderUpdate 0029                  LCD_ButtonDraw@button 0042  
                       _LEAVECRITICAL 5A3E                         ?_Factory_exec 0001  
                       ?_Factory_init 0001                    i2___awmod@dividend 0001  
                    _Menu_welcomeDraw 4F8E                       checkCollision@g 001B  
                    __size_of_XF_init 0074                 __size_of_moovePaddle1 00AC  
               __size_of_moovePaddle2 00E8                      LCD_DrawRect@fill 001A  
                          ?_mooveBall 0025                              __Hrparam 0000  
                    LCD_DrawRect@temp 001F                            ?_sleepInit 00ED  
            __size_ofi2_LEAVECRITICAL 000C                            vfprintf@ap 00C7  
                            __Lrparam 0000                            vfprintf@fp 00C4  
           i2XF_unscheduleTimer@inISR 0002               __size_of_LCD_ButtonDraw 04B6  
       __size_ofi2_XF_unscheduleTimer 0034                __size_of_configMeasure 003C  
     __end_of_GameParameters_setLevel 5A3E             __size_of_LCD_ButtonCreate 00FA  
                    __size_of___aodiv 0148       __end_of_GameParameters_resetPos 5900  
                    __size_of___aomod 0124                      __size_of___fldiv 0288  
                    __size_of___awdiv 0084                      __size_of___awmod 0070  
                    __size_of___fltol 00BA                            ?_vfpfcnvrt 003D  
                    __size_of___lwdiv 0052                      __size_of___lwmod 0042  
                      _configPinSleep 59B2             __size_of_LCD_ButtonUpdate 0210  
                   gameControllerSM@g 003C                       ___aodiv@divisor 001A  
                    Paddle_addX@value 0014              LCD_ButtonUpdate@colorOut 002B  
                     ___aodiv@counter 0022              GameParameters_setX@value 0014  
                     LCD_Bitmap@color 00B9              GameParameters_setY@value 0014  
                    LCD_DrawText@font 0022                            sprintf@fmt 00CA  
                    LCD_DrawText@posX 0025                      LCD_DrawText@posY 0027  
            GameParameters_setLevel@s 0012                              ___xxtofl 385C  
                          Ball_draw@b 0025                       ___lwdiv@divisor 0022  
                          Ball_init@b 0012                       ___lwdiv@counter 0026  
                            __ptext10 534E                              __ptext11 32A2  
                            __ptext20 59B2                              __ptext12 56D6  
                            __ptext21 5972                              __ptext13 385C  
                            __ptext30 53AC                              __ptext22 3F60  
                            __ptext14 4730                              __ptext31 5096  
                            __ptext23 1302                              __ptext15 2BDC  
                            __ptext40 4B56                              __ptext32 44EA  
                            __ptext24 4336                              __ptext16 59FC  
                            __ptext41 1B20                              __ptext33 5A28  
                            __ptext25 4A02                              __ptext17 5A12  
                            __ptext50 3D30                              __ptext42 5926  
                            __ptext34 5698                              __ptext26 45B4  
                            __ptext18 57E4                              __ptext51 3E52  
                            __ptext43 4CA4                              __ptext35 574A  
                            __ptext27 58D6                              __ptext19 58AA  
                            __ptext60 5118                              __ptext52 171E  
                            __ptext44 415A                              __ptext36 22D8  
                            __ptext28 5816                              __ptext61 587A  
                            __ptext53 48A4                              __ptext45 4060  
                            __ptext37 5712                              __ptext29 0070  
                            __ptext70 1F0E                              __ptext62 4E72  
                            __ptext54 4D48                              __ptext46 52EC  
                            __ptext38 53FE                              __ptext71 5614  
                            __ptext63 5A78                              __ptext55 441E  
                            __ptext47 4BFE                              __ptext39 4AAE  
                            __ptext80 346E                              __ptext72 5012  
                            __ptext64 5848                              __ptext56 55D2  
                            __ptext48 4248                              __ptext81 266C  
                            __ptext73 3092                              __ptext65 3C0C  
                            __ptext57 558A                              __ptext49 4F8E  
                            __ptext90 527C                              __ptext82 54F4  
                            __ptext74 399C                              __ptext66 3714  
                            __ptext58 35C4                              __ptext91 5A56  
                            __ptext83 520C                              __ptext75 091A  
                            __ptext67 3ADA                              __ptext59 2E64  
                            __ptext92 5A62                              __ptext84 5A3E  
                            __ptext76 594C                              __ptext68 4954  
                            __ptext85 5A4A                              __ptext77 5656  
                            __ptext69 0E4C                              __ptext78 5450  
                            __ptext87 4DDE                              __ptext79 47EA  
                            __ptext88 577E                              __ptext89 54A2  
                    __size_of_sleepSM 0032                        ?_LEAVECRITICAL 0001  
                       _ENTERCRITICAL 5A4A                         ??_Ball_Update 0014  
                      ??_Factory_exec 0046                        ??_Factory_init 00EF  
             __end_of_Menu_inGameDraw 4DDE                          _moovePaddle1 4A02  
                        _moovePaddle2 4336              GameParameters_resetPos@s 0012  
                    __size_of_sprintf 0042    __end_of_XF_decrementAndQueueTimers 4E72  
          _XF_decrementAndQueueTimers 4DDE                         __size_of_main 000A  
                           sleepSM@ev 0016                         __size_of_dtoa 022E  
           __size_of_XF_scheduleTimer 0052              __end_of_gameControllerSM 4060  
                 _backlightController 22D8           __end_of_GameParameters_init 1F0E  
         __end_of_GameParameters_setX 5A28           __end_of_GameParameters_setY 5A12  
            __size_ofi2_ENTERCRITICAL 000C               __size_of_LCD_SliderDraw 010E  
        GameParameters_setBackLight@s 0012              _gameControllerController 1302  
                            isa$xinst 000000                            _LCD_Bitmap 091A  
      __size_of_touchScreenController 01CC                    _XF_unscheduleTimer 574A  
       __end_of_touchScreenController 346E                              int$flags 004E  
              __end_of_configPinSleep 59D0                              _vfprintf 558A  
                       ?_XF_pushEvent 0018           __size_of_gameControllerInit 0016  
                         ??_displaySM 00ED                      ___aomod@dividend 0012  
                 ?_XF_unscheduleTimer 0013                     i2___awmod@divisor 0003  
                   ??_levelController 0018                     i2___awmod@counter 0005  
                ?_backlightController 0018                       _sleepController 58AA  
                      ?_ENTERCRITICAL 0001                         _configMeasure 56D6  
                            intlevel2 0000                             sprintf@ap 00CE  
                     LCD_DrawText@msg 0020                      ___lwmod@dividend 0012  
                ??_XF_unscheduleTimer 0014                   __end_of_Ball_Update 5118  
                      _checkCollision 0070                           ??_mooveBall 0027  
                         ??_sleepInit 0046                      ??i2_XF_pushEvent 0008  
                      ??_XF_pushEvent 0019                       ?_configPinSleep 0001  
                     ___aomod@divisor 001A                           ??_vfpfcnvrt 0040  
                     ___aomod@counter 0022                     ??i2_LEAVECRITICAL 0001  
                            sprintf@f 00CF                              sprintf@s 00C8  
               ??_backlightController 001A                         ??_XF_popEvent 0018  
                     ___lwmod@divisor 0014               LCD_SliderCreate@bgColor 001C  
                     ___lwmod@counter 0016                       ??_LEAVECRITICAL 0012  
                      ?_configMeasure 0001           LCD_SliderCreate@borderColor 001E  
        __size_of_Menu_parametersDraw 0122              LCD_SliderCreate@sldColor 001A  
             LCD_SliderCreate@fpPress 0024                      ?_Menu_inGameDraw 00E4  
                        ___aodiv@sign 0023      __size_of_GameParameters_setLevel 0016  
                     Paddle_init@team 0014                __end_of_checkCollision 091A  
    __size_of_GameParameters_resetPos 002A  __size_of_GameParameters_setBackLight 0038  
                        ___aomod@sign 0023                          ?_configTouch 0001  
